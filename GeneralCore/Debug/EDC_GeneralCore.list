
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007b34  08007b34  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b34  08007b34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  20000074  08007bb0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  08007bb0  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d00  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002709  00000000  00000000  00030d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000334a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  000345a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000324d  00000000  00000000  000355b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014686  00000000  00000000  00038805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d827  00000000  00000000  0004ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea6b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  000ea704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	080079b4 	.word	0x080079b4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	080079b4 	.word	0x080079b4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_frsub>:
 8000a64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	e002      	b.n	8000a70 <__addsf3>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fsub>:
 8000a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a70 <__addsf3>:
 8000a70:	0042      	lsls	r2, r0, #1
 8000a72:	bf1f      	itttt	ne
 8000a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a78:	ea92 0f03 	teqne	r2, r3
 8000a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a84:	d06a      	beq.n	8000b5c <__addsf3+0xec>
 8000a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8e:	bfc1      	itttt	gt
 8000a90:	18d2      	addgt	r2, r2, r3
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	4048      	eorgt	r0, r1
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	bfb8      	it	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	bf88      	it	hi
 8000aa0:	4770      	bxhi	lr
 8000aa2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4249      	negne	r1, r1
 8000ac2:	ea92 0f03 	teq	r2, r3
 8000ac6:	d03f      	beq.n	8000b48 <__addsf3+0xd8>
 8000ac8:	f1a2 0201 	sub.w	r2, r2, #1
 8000acc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad0:	eb10 000c 	adds.w	r0, r0, ip
 8000ad4:	f1c3 0320 	rsb	r3, r3, #32
 8000ad8:	fa01 f103 	lsl.w	r1, r1, r3
 8000adc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__addsf3+0x78>
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aec:	d313      	bcc.n	8000b16 <__addsf3+0xa6>
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d306      	bcc.n	8000b02 <__addsf3+0x92>
 8000af4:	0840      	lsrs	r0, r0, #1
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	f102 0201 	add.w	r2, r2, #1
 8000afe:	2afe      	cmp	r2, #254	; 0xfe
 8000b00:	d251      	bcs.n	8000ba6 <__addsf3+0x136>
 8000b02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0a:	bf08      	it	eq
 8000b0c:	f020 0001 	biceq.w	r0, r0, #1
 8000b10:	ea40 0003 	orr.w	r0, r0, r3
 8000b14:	4770      	bx	lr
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	eb40 0000 	adc.w	r0, r0, r0
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b24:	d2ed      	bcs.n	8000b02 <__addsf3+0x92>
 8000b26:	fab0 fc80 	clz	ip, r0
 8000b2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b36:	bfaa      	itet	ge
 8000b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b3c:	4252      	neglt	r2, r2
 8000b3e:	4318      	orrge	r0, r3
 8000b40:	bfbc      	itt	lt
 8000b42:	40d0      	lsrlt	r0, r2
 8000b44:	4318      	orrlt	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	f092 0f00 	teq	r2, #0
 8000b4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b50:	bf06      	itte	eq
 8000b52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b56:	3201      	addeq	r2, #1
 8000b58:	3b01      	subne	r3, #1
 8000b5a:	e7b5      	b.n	8000ac8 <__addsf3+0x58>
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d021      	beq.n	8000bb0 <__addsf3+0x140>
 8000b6c:	ea92 0f03 	teq	r2, r3
 8000b70:	d004      	beq.n	8000b7c <__addsf3+0x10c>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	bf08      	it	eq
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea90 0f01 	teq	r0, r1
 8000b80:	bf1c      	itt	ne
 8000b82:	2000      	movne	r0, #0
 8000b84:	4770      	bxne	lr
 8000b86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8a:	d104      	bne.n	8000b96 <__addsf3+0x126>
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	bf28      	it	cs
 8000b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9a:	bf3c      	itt	cc
 8000b9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bxcc	lr
 8000ba2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	4770      	bx	lr
 8000bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb4:	bf16      	itet	ne
 8000bb6:	4608      	movne	r0, r1
 8000bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bbc:	4601      	movne	r1, r0
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	bf06      	itte	eq
 8000bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc6:	ea90 0f01 	teqeq	r0, r1
 8000bca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_ui2f>:
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e004      	b.n	8000be0 <__aeabi_i2f+0x8>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_i2f>:
 8000bd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	bf48      	it	mi
 8000bde:	4240      	negmi	r0, r0
 8000be0:	ea5f 0c00 	movs.w	ip, r0
 8000be4:	bf08      	it	eq
 8000be6:	4770      	bxeq	lr
 8000be8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bec:	4601      	mov	r1, r0
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	e01c      	b.n	8000c2e <__aeabi_l2f+0x2a>

08000bf4 <__aeabi_ul2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e00a      	b.n	8000c18 <__aeabi_l2f+0x14>
 8000c02:	bf00      	nop

08000c04 <__aeabi_l2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	d502      	bpl.n	8000c18 <__aeabi_l2f+0x14>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	ea5f 0c01 	movs.w	ip, r1
 8000c1c:	bf02      	ittt	eq
 8000c1e:	4684      	moveq	ip, r0
 8000c20:	4601      	moveq	r1, r0
 8000c22:	2000      	moveq	r0, #0
 8000c24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c28:	bf08      	it	eq
 8000c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c32:	fabc f28c 	clz	r2, ip
 8000c36:	3a08      	subs	r2, #8
 8000c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c3c:	db10      	blt.n	8000c60 <__aeabi_l2f+0x5c>
 8000c3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c50:	fa20 f202 	lsr.w	r2, r0, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f102 0220 	add.w	r2, r2, #32
 8000c64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c70:	fa21 f202 	lsr.w	r2, r1, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fmul>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d06f      	beq.n	8000d78 <__aeabi_fmul+0xf8>
 8000c98:	441a      	add	r2, r3
 8000c9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca6:	d01e      	beq.n	8000ce6 <__aeabi_fmul+0x66>
 8000ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc0:	bf3e      	ittt	cc
 8000cc2:	0049      	lslcc	r1, r1, #1
 8000cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc8:	005b      	lslcc	r3, r3, #1
 8000cca:	ea40 0001 	orr.w	r0, r0, r1
 8000cce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd2:	2afd      	cmp	r2, #253	; 0xfd
 8000cd4:	d81d      	bhi.n	8000d12 <__aeabi_fmul+0x92>
 8000cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	0249      	lsleq	r1, r1, #9
 8000cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfa:	3a7f      	subs	r2, #127	; 0x7f
 8000cfc:	bfc2      	ittt	gt
 8000cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d06:	4770      	bxgt	lr
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	dc5d      	bgt.n	8000dd0 <__aeabi_fmul+0x150>
 8000d14:	f112 0f19 	cmn.w	r2, #25
 8000d18:	bfdc      	itt	le
 8000d1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bxle	lr
 8000d20:	f1c2 0200 	rsb	r2, r2, #0
 8000d24:	0041      	lsls	r1, r0, #1
 8000d26:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2a:	f1c2 0220 	rsb	r2, r2, #32
 8000d2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d36:	f140 0000 	adc.w	r0, r0, #0
 8000d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3e:	bf08      	it	eq
 8000d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d44:	4770      	bx	lr
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0040      	lsleq	r0, r0, #1
 8000d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d56:	3a01      	subeq	r2, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xce>
 8000d5a:	ea40 000c 	orr.w	r0, r0, ip
 8000d5e:	f093 0f00 	teq	r3, #0
 8000d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	bf02      	ittt	eq
 8000d68:	0049      	lsleq	r1, r1, #1
 8000d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6e:	3b01      	subeq	r3, #1
 8000d70:	d0f9      	beq.n	8000d66 <__aeabi_fmul+0xe6>
 8000d72:	ea41 010c 	orr.w	r1, r1, ip
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fmul+0x18>
 8000d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	bf18      	it	ne
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d00a      	beq.n	8000d9e <__aeabi_fmul+0x11e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1d8      	bne.n	8000d46 <__aeabi_fmul+0xc6>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	bf17      	itett	ne
 8000da4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da8:	4608      	moveq	r0, r1
 8000daa:	f091 0f00 	teqne	r1, #0
 8000dae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db2:	d014      	beq.n	8000dde <__aeabi_fmul+0x15e>
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d101      	bne.n	8000dbe <__aeabi_fmul+0x13e>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d10f      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dbe:	ea93 0f0c 	teq	r3, ip
 8000dc2:	d103      	bne.n	8000dcc <__aeabi_fmul+0x14c>
 8000dc4:	024b      	lsls	r3, r1, #9
 8000dc6:	bf18      	it	ne
 8000dc8:	4608      	movne	r0, r1
 8000dca:	d108      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	4770      	bx	lr
 8000dde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fdiv>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d069      	beq.n	8000ed4 <__aeabi_fdiv+0xec>
 8000e00:	eba2 0203 	sub.w	r2, r2, r3
 8000e04:	ea80 0c01 	eor.w	ip, r0, r1
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0e:	d037      	beq.n	8000e80 <__aeabi_fdiv+0x98>
 8000e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf38      	it	cc
 8000e24:	005b      	lslcc	r3, r3, #1
 8000e26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	bf24      	itt	cs
 8000e32:	1a5b      	subcs	r3, r3, r1
 8000e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4a:	bf24      	itt	cs
 8000e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	bf18      	it	ne
 8000e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6a:	d1e0      	bne.n	8000e2e <__aeabi_fdiv+0x46>
 8000e6c:	2afd      	cmp	r2, #253	; 0xfd
 8000e6e:	f63f af50 	bhi.w	8000d12 <__aeabi_fmul+0x92>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e78:	bf08      	it	eq
 8000e7a:	f020 0001 	biceq.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e88:	327f      	adds	r2, #127	; 0x7f
 8000e8a:	bfc2      	ittt	gt
 8000e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e94:	4770      	bxgt	lr
 8000e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	e737      	b.n	8000d12 <__aeabi_fmul+0x92>
 8000ea2:	f092 0f00 	teq	r2, #0
 8000ea6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0040      	lsleq	r0, r0, #1
 8000eae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb2:	3a01      	subeq	r2, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xc2>
 8000eb6:	ea40 000c 	orr.w	r0, r0, ip
 8000eba:	f093 0f00 	teq	r3, #0
 8000ebe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0049      	lsleq	r1, r1, #1
 8000ec6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eca:	3b01      	subeq	r3, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fdiv+0xda>
 8000ece:	ea41 010c 	orr.w	r1, r1, ip
 8000ed2:	e795      	b.n	8000e00 <__aeabi_fdiv+0x18>
 8000ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d108      	bne.n	8000ef0 <__aeabi_fdiv+0x108>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	f47f af7d 	bne.w	8000dde <__aeabi_fmul+0x15e>
 8000ee4:	ea93 0f0c 	teq	r3, ip
 8000ee8:	f47f af70 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e776      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000ef0:	ea93 0f0c 	teq	r3, ip
 8000ef4:	d104      	bne.n	8000f00 <__aeabi_fdiv+0x118>
 8000ef6:	024b      	lsls	r3, r1, #9
 8000ef8:	f43f af4c 	beq.w	8000d94 <__aeabi_fmul+0x114>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e76e      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f04:	bf18      	it	ne
 8000f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	d1ca      	bne.n	8000ea2 <__aeabi_fdiv+0xba>
 8000f0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f10:	f47f af5c 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000f14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f18:	f47f af3c 	bne.w	8000d94 <__aeabi_fmul+0x114>
 8000f1c:	e75f      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f1e:	bf00      	nop

08000f20 <__gesf2>:
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295
 8000f24:	e006      	b.n	8000f34 <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__lesf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	e002      	b.n	8000f34 <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__cmpsf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	bf18      	it	ne
 8000f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4a:	d011      	beq.n	8000f70 <__cmpsf2+0x40>
 8000f4c:	b001      	add	sp, #4
 8000f4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f52:	bf18      	it	ne
 8000f54:	ea90 0f01 	teqne	r0, r1
 8000f58:	bf58      	it	pl
 8000f5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5e:	bf88      	it	hi
 8000f60:	17c8      	asrhi	r0, r1, #31
 8000f62:	bf38      	it	cc
 8000f64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f68:	bf18      	it	ne
 8000f6a:	f040 0001 	orrne.w	r0, r0, #1
 8000f6e:	4770      	bx	lr
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	d102      	bne.n	8000f7c <__cmpsf2+0x4c>
 8000f76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7a:	d105      	bne.n	8000f88 <__cmpsf2+0x58>
 8000f7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f80:	d1e4      	bne.n	8000f4c <__cmpsf2+0x1c>
 8000f82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f86:	d0e1      	beq.n	8000f4c <__cmpsf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cfrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4661      	mov	r1, ip
 8000f96:	e7ff      	b.n	8000f98 <__aeabi_cfcmpeq>

08000f98 <__aeabi_cfcmpeq>:
 8000f98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9a:	f7ff ffc9 	bl	8000f30 <__cmpsf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	bf48      	it	mi
 8000fa2:	f110 0f00 	cmnmi.w	r0, #0
 8000fa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa8 <__aeabi_fcmpeq>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff fff4 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2001      	moveq	r0, #1
 8000fb4:	2000      	movne	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmplt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffea 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmple>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffe0 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fd8:	bf94      	ite	ls
 8000fda:	2001      	movls	r0, #1
 8000fdc:	2000      	movhi	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmpge>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffd2 	bl	8000f90 <__aeabi_cfrcmple>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpgt>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffc8 	bl	8000f90 <__aeabi_cfrcmple>
 8001000:	bf34      	ite	cc
 8001002:	2001      	movcc	r0, #1
 8001004:	2000      	movcs	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_f2uiz>:
 800100c:	0042      	lsls	r2, r0, #1
 800100e:	d20e      	bcs.n	800102e <__aeabi_f2uiz+0x22>
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001014:	d30b      	bcc.n	800102e <__aeabi_f2uiz+0x22>
 8001016:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d409      	bmi.n	8001034 <__aeabi_f2uiz+0x28>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr
 8001034:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001038:	d101      	bne.n	800103e <__aeabi_f2uiz+0x32>
 800103a:	0242      	lsls	r2, r0, #9
 800103c:	d102      	bne.n	8001044 <__aeabi_f2uiz+0x38>
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	4770      	bx	lr
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d038      	beq.n	80010cc <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d036      	beq.n	80010d0 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f838 	bl	80010d8 <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 80010b0:	f002 fc10 	bl	80038d4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	332c      	adds	r3, #44	; 0x2c
 80010c2:	220b      	movs	r2, #11
 80010c4:	4619      	mov	r1, r3
 80010c6:	f005 f9a1 	bl	800640c <HAL_UART_Receive_DMA>
 80010ca:	e002      	b.n	80010d2 <huansic_jy62_init+0x86>
	if(!hjy62) return;
 80010cc:	bf00      	nop
 80010ce:	e000      	b.n	80010d2 <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 80010d0:	bf00      	nop
}
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	2203      	movs	r2, #3
 80010ea:	4903      	ldr	r1, [pc, #12]	; (80010f8 <huansic_jy62_resetAngle+0x20>)
 80010ec:	f005 f8fc 	bl	80062e8 <HAL_UART_Transmit>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	00000000 	.word	0x00000000

08001100 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800110e:	2b55      	cmp	r3, #85	; 0x55
 8001110:	f040 8212 	bne.w	8001538 <huansic_jy62_decodePackage+0x438>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001120:	4413      	add	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800112a:	4413      	add	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001148:	4413      	add	r3, r2
 800114a:	b2da      	uxtb	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001152:	4413      	add	r3, r2
 8001154:	b2da      	uxtb	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800115c:	4413      	add	r3, r2
 800115e:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001166:	4413      	add	r3, r2
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001170:	4413      	add	r3, r2
 8001172:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 81dd 	bne.w	800153c <huansic_jy62_decodePackage+0x43c>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001188:	2b51      	cmp	r3, #81	; 0x51
 800118a:	f040 8091 	bne.w	80012b0 <huansic_jy62_decodePackage+0x1b0>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0 * 9.81;
 80011a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f98f 	bl	80004cc <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b9d      	ldr	r3, [pc, #628]	; (8001428 <huansic_jy62_decodePackage+0x328>)
 80011b4:	f7ff fb1e 	bl	80007f4 <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b99      	ldr	r3, [pc, #612]	; (800142c <huansic_jy62_decodePackage+0x32c>)
 80011c6:	f7ff f9eb 	bl	80005a0 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	a391      	add	r3, pc, #580	; (adr r3, 8001418 <huansic_jy62_decodePackage+0x318>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff f9e2 	bl	80005a0 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fbee 	bl	80009c4 <__aeabi_d2f>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0 * 9.81;
 8001204:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f95f 	bl	80004cc <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <huansic_jy62_decodePackage+0x328>)
 8001214:	f7ff faee 	bl	80007f4 <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b81      	ldr	r3, [pc, #516]	; (800142c <huansic_jy62_decodePackage+0x32c>)
 8001226:	f7ff f9bb 	bl	80005a0 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	a379      	add	r3, pc, #484	; (adr r3, 8001418 <huansic_jy62_decodePackage+0x318>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9b2 	bl	80005a0 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fbbe 	bl	80009c4 <__aeabi_d2f>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0 * 9.81;
 8001264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f92f 	bl	80004cc <__aeabi_i2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <huansic_jy62_decodePackage+0x328>)
 8001274:	f7ff fabe 	bl	80007f4 <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b69      	ldr	r3, [pc, #420]	; (800142c <huansic_jy62_decodePackage+0x32c>)
 8001286:	f7ff f98b 	bl	80005a0 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	a361      	add	r3, pc, #388	; (adr r3, 8001418 <huansic_jy62_decodePackage+0x318>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f982 	bl	80005a0 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fb8e 	bl	80009c4 <__aeabi_d2f>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	e13d      	b.n	800152c <huansic_jy62_decodePackage+0x42c>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012b6:	2b52      	cmp	r3, #82	; 0x52
 80012b8:	f040 80be 	bne.w	8001438 <huansic_jy62_decodePackage+0x338>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80012d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f8f8 	bl	80004cc <__aeabi_i2d>
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b51      	ldr	r3, [pc, #324]	; (8001428 <huansic_jy62_decodePackage+0x328>)
 80012e2:	f7ff fa87 	bl	80007f4 <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <huansic_jy62_decodePackage+0x330>)
 80012f4:	f7ff f954 	bl	80005a0 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <huansic_jy62_decodePackage+0x334>)
 8001306:	f7ff fa75 	bl	80007f4 <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	a343      	add	r3, pc, #268	; (adr r3, 8001420 <huansic_jy62_decodePackage+0x320>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f942 	bl	80005a0 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb4e 	bl	80009c4 <__aeabi_d2f>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 8001344:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8bf 	bl	80004cc <__aeabi_i2d>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b35      	ldr	r3, [pc, #212]	; (8001428 <huansic_jy62_decodePackage+0x328>)
 8001354:	f7ff fa4e 	bl	80007f4 <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <huansic_jy62_decodePackage+0x330>)
 8001366:	f7ff f91b 	bl	80005a0 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <huansic_jy62_decodePackage+0x334>)
 8001378:	f7ff fa3c 	bl	80007f4 <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	a326      	add	r3, pc, #152	; (adr r3, 8001420 <huansic_jy62_decodePackage+0x320>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f909 	bl	80005a0 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fb15 	bl	80009c4 <__aeabi_d2f>
 800139a:	4602      	mov	r2, r0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80013b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f886 	bl	80004cc <__aeabi_i2d>
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <huansic_jy62_decodePackage+0x328>)
 80013c6:	f7ff fa15 	bl	80007f4 <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <huansic_jy62_decodePackage+0x330>)
 80013d8:	f7ff f8e2 	bl	80005a0 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <huansic_jy62_decodePackage+0x334>)
 80013ea:	f7ff fa03 	bl	80007f4 <__aeabi_ddiv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	a30a      	add	r3, pc, #40	; (adr r3, 8001420 <huansic_jy62_decodePackage+0x320>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8d0 	bl	80005a0 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fadc 	bl	80009c4 <__aeabi_d2f>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
 8001412:	e08b      	b.n	800152c <huansic_jy62_decodePackage+0x42c>
 8001414:	f3af 8000 	nop.w
 8001418:	51eb851f 	.word	0x51eb851f
 800141c:	40239eb8 	.word	0x40239eb8
 8001420:	54442d18 	.word	0x54442d18
 8001424:	400921fb 	.word	0x400921fb
 8001428:	40e00000 	.word	0x40e00000
 800142c:	40300000 	.word	0x40300000
 8001430:	409f4000 	.word	0x409f4000
 8001434:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800143e:	2b53      	cmp	r3, #83	; 0x53
 8001440:	d174      	bne.n	800152c <huansic_jy62_decodePackage+0x42c>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 8001458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f835 	bl	80004cc <__aeabi_i2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <huansic_jy62_decodePackage+0x450>)
 8001468:	f7ff f9c4 	bl	80007f4 <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	a334      	add	r3, pc, #208	; (adr r3, 8001548 <huansic_jy62_decodePackage+0x448>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f891 	bl	80005a0 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fa9d 	bl	80009c4 <__aeabi_d2f>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 80014a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f80e 	bl	80004cc <__aeabi_i2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <huansic_jy62_decodePackage+0x450>)
 80014b6:	f7ff f99d 	bl	80007f4 <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a321      	add	r3, pc, #132	; (adr r3, 8001548 <huansic_jy62_decodePackage+0x448>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f86a 	bl	80005a0 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fa76 	bl	80009c4 <__aeabi_d2f>
 80014d8:	4602      	mov	r2, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 80014f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffe7 	bl	80004cc <__aeabi_i2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <huansic_jy62_decodePackage+0x450>)
 8001504:	f7ff f976 	bl	80007f4 <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	a30d      	add	r3, pc, #52	; (adr r3, 8001548 <huansic_jy62_decodePackage+0x448>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f843 	bl	80005a0 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fa4f 	bl	80009c4 <__aeabi_d2f>
 8001526:	4602      	mov	r2, r0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 800152c:	f002 f9d2 	bl	80038d4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
 8001536:	e002      	b.n	800153e <huansic_jy62_decodePackage+0x43e>
		return;
 8001538:	bf00      	nop
 800153a:	e000      	b.n	800153e <huansic_jy62_decodePackage+0x43e>
		return;
 800153c:	bf00      	nop
}
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	f3af 8000 	nop.w
 8001548:	54442d18 	.word	0x54442d18
 800154c:	400921fb 	.word	0x400921fb
 8001550:	40e00000 	.word	0x40e00000

08001554 <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	332c      	adds	r3, #44	; 0x2c
 8001564:	220b      	movs	r2, #11
 8001566:	4619      	mov	r1, r3
 8001568:	f004 ff50 	bl	800640c <HAL_UART_Receive_DMA>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159a:	d101      	bne.n	80015a0 <huansic_order_new+0x18>
		return 0;
 800159c:	2300      	movs	r3, #0
 800159e:	e046      	b.n	800162e <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e017      	b.n	80015d6 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	4923      	ldr	r1, [pc, #140]	; (8001638 <huansic_order_new+0xb0>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3310      	adds	r3, #16
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d107      	bne.n	80015d0 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <huansic_order_new+0xb0>)
 80015cc:	4413      	add	r3, r2
 80015ce:	e02e      	b.n	800162e <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	3301      	adds	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b3b      	cmp	r3, #59	; 0x3b
 80015da:	d9e4      	bls.n	80015a6 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e021      	b.n	8001626 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	4914      	ldr	r1, [pc, #80]	; (8001638 <huansic_order_new+0xb0>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3310      	adds	r3, #16
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d112      	bne.n	8001620 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <huansic_order_new+0xb0>)
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4403      	add	r3, r0
 800160c:	3310      	adds	r3, #16
 800160e:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <huansic_order_new+0xb0>)
 800161c:	4413      	add	r3, r2
 800161e:	e006      	b.n	800162e <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b3b      	cmp	r3, #59	; 0x3b
 800162a:	d9da      	bls.n	80015e2 <huansic_order_new+0x5a>
		}
	}

	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000090 	.word	0x20000090

0800163c <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d103      	bne.n	8001656 <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff90 	bl	8001574 <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 8001654:	e003      	b.n	800165e <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <huansic_motor_init+0x1c>
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <huansic_motor_init+0x168>)
 800167a:	4a56      	ldr	r2, [pc, #344]	; (80017d4 <huansic_motor_init+0x16c>)
 800167c:	210c      	movs	r1, #12
 800167e:	4856      	ldr	r0, [pc, #344]	; (80017d8 <huansic_motor_init+0x170>)
 8001680:	f005 f948 	bl	8006914 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <huansic_motor_init+0x30>
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <huansic_motor_init+0x174>)
 800168e:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <huansic_motor_init+0x16c>)
 8001690:	210d      	movs	r1, #13
 8001692:	4851      	ldr	r0, [pc, #324]	; (80017d8 <huansic_motor_init+0x170>)
 8001694:	f005 f93e 	bl	8006914 <__assert_func>
	assert(hmotor->dt);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fc81 	bl	8000fa8 <__aeabi_fcmpeq>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <huansic_motor_init+0x50>
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <huansic_motor_init+0x178>)
 80016ae:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <huansic_motor_init+0x16c>)
 80016b0:	210e      	movs	r1, #14
 80016b2:	4849      	ldr	r0, [pc, #292]	; (80017d8 <huansic_motor_init+0x170>)
 80016b4:	f005 f92e 	bl	8006914 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	849a      	strh	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
 8001702:	e01c      	b.n	800173e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d105      	bne.n	8001718 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
 8001716:	e012      	b.n	800173e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d105      	bne.n	800172c <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	63da      	str	r2, [r3, #60]	; 0x3c
 800172a:	e008      	b.n	800173e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b0c      	cmp	r3, #12
 8001732:	d104      	bne.n	800173e <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d026      	beq.n	8001794 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
 8001758:	e01c      	b.n	8001794 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d105      	bne.n	800176e <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	639a      	str	r2, [r3, #56]	; 0x38
 800176c:	e012      	b.n	8001794 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d105      	bne.n	8001782 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001780:	e008      	b.n	8001794 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d104      	bne.n	8001794 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	213c      	movs	r1, #60	; 0x3c
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fe62 	bl	8005464 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f003 fcfe 	bl	80051ac <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f003 fcf2 	bl	80051ac <HAL_TIM_PWM_Start>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	080079cc 	.word	0x080079cc
 80017d4:	08007a34 	.word	0x08007a34
 80017d8:	080079dc 	.word	0x080079dc
 80017dc:	080079fc 	.word	0x080079fc
 80017e0:	08007a10 	.word	0x08007a10

080017e4 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	int16_t diffTick = (0x0FFFF & hmotor->counter->Instance->CNT) - hmotor->lastTick;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	82fb      	strh	r3, [r7, #22]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	849a      	strh	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 800180e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f9e0 	bl	8000bd8 <__aeabi_i2f>
 8001818:	4602      	mov	r2, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f7ff fae1 	bl	8000de8 <__aeabi_fdiv>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff f915 	bl	8000a6c <__aeabi_fsub>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff f910 	bl	8000a6c <__aeabi_fsub>
 800184c:	4603      	mov	r3, r0
 800184e:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f7ff f906 	bl	8000a6c <__aeabi_fsub>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff f8fc 	bl	8000a70 <__addsf3>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f7ff f9f8 	bl	8000c80 <__aeabi_fmul>
 8001890:	4603      	mov	r3, r0
 8001892:	461c      	mov	r4, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f7ff f9ee 	bl	8000c80 <__aeabi_fmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff f8e1 	bl	8000a70 <__addsf3>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	6939      	ldr	r1, [r7, #16]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f9e1 	bl	8000c80 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff f8d4 	bl	8000a70 <__addsf3>
 80018c8:	4603      	mov	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 80018cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fb91 	bl	8000ff8 <__aeabi_fcmpgt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <huansic_motor_pid+0xfe>
 80018dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018e0:	e009      	b.n	80018f6 <huansic_motor_pid+0x112>
 80018e2:	4954      	ldr	r1, [pc, #336]	; (8001a34 <huansic_motor_pid+0x250>)
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff fb69 	bl	8000fbc <__aeabi_fcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <huansic_motor_pid+0x110>
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <huansic_motor_pid+0x250>)
 80018f2:	e000      	b.n	80018f6 <huansic_motor_pid+0x112>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fb7b 	bl	8000ff8 <__aeabi_fcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d019      	beq.n	800193c <huansic_motor_pid+0x158>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f95a 	bl	8000bd0 <__aeabi_ui2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff f9ad 	bl	8000c80 <__aeabi_fmul>
 8001926:	4603      	mov	r3, r0
 8001928:	4618      	mov	r0, r3
 800192a:	f006 f81d 	bl	8007968 <roundf>
 800192e:	4603      	mov	r3, r0
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fb6b 	bl	800100c <__aeabi_f2uiz>
 8001936:	4603      	mov	r3, r0
 8001938:	b29b      	uxth	r3, r3
 800193a:	e000      	b.n	800193e <huansic_motor_pid+0x15a>
 800193c:	2300      	movs	r3, #0
 800193e:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff fb39 	bl	8000fbc <__aeabi_fcmplt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d019      	beq.n	8001984 <huansic_motor_pid+0x1a0>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f936 	bl	8000bd0 <__aeabi_ui2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f989 	bl	8000c80 <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fff9 	bl	8007968 <roundf>
 8001976:	4603      	mov	r3, r0
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fb47 	bl	800100c <__aeabi_f2uiz>
 800197e:	4603      	mov	r3, r0
 8001980:	b29b      	uxth	r3, r3
 8001982:	e000      	b.n	8001986 <huansic_motor_pid+0x1a2>
 8001984:	2300      	movs	r3, #0
 8001986:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <huansic_motor_pid+0x1b8>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	897a      	ldrh	r2, [r7, #10]
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
 800199a:	e01c      	b.n	80019d6 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d105      	bne.n	80019b0 <huansic_motor_pid+0x1cc>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	897a      	ldrh	r2, [r7, #10]
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
 80019ae:	e012      	b.n	80019d6 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d105      	bne.n	80019c4 <huansic_motor_pid+0x1e0>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	897a      	ldrh	r2, [r7, #10]
 80019c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80019c2:	e008      	b.n	80019d6 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d104      	bne.n	80019d6 <huansic_motor_pid+0x1f2>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	897a      	ldrh	r2, [r7, #10]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d026      	beq.n	8001a2c <huansic_motor_pid+0x248>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <huansic_motor_pid+0x20e>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	893a      	ldrh	r2, [r7, #8]
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 80019f0:	e01c      	b.n	8001a2c <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d105      	bne.n	8001a06 <huansic_motor_pid+0x222>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a04:	e012      	b.n	8001a2c <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d105      	bne.n	8001a1a <huansic_motor_pid+0x236>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	893a      	ldrh	r2, [r7, #8]
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a18:	e008      	b.n	8001a2c <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d104      	bne.n	8001a2c <huansic_motor_pid+0x248>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	893a      	ldrh	r2, [r7, #8]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	bf800000 	.word	0xbf800000

08001a38 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]

}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2206      	movs	r2, #6
 8001a58:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f103 010a 	add.w	r1, r3, #10
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7a5b      	ldrb	r3, [r3, #9]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f004 fcce 	bl	800640c <HAL_UART_Receive_DMA>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7a99      	ldrb	r1, [r3, #10]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7adb      	ldrb	r3, [r3, #11]
 8001a8c:	404b      	eors	r3, r1
 8001a8e:	b2d9      	uxtb	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7b1b      	ldrb	r3, [r3, #12]
 8001a94:	404b      	eors	r3, r1
 8001a96:	b2d9      	uxtb	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7b5b      	ldrb	r3, [r3, #13]
 8001a9c:	404b      	eors	r3, r1
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7b9b      	ldrb	r3, [r3, #14]
 8001aa4:	404b      	eors	r3, r1
 8001aa6:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e01d      	b.n	8001aec <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7a9b      	ldrb	r3, [r3, #10]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <huansic_xb_decodeHeader+0x4c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7a9b      	ldrb	r3, [r3, #10]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d001      	beq.n	8001ac4 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e013      	b.n	8001aec <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7a9a      	ldrb	r2, [r3, #10]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b9a      	ldrb	r2, [r3, #14]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f103 010a 	add.w	r1, r3, #10
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7a5b      	ldrb	r3, [r3, #9]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f004 fc91 	bl	800640c <HAL_UART_Receive_DMA>
	return 1;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	76fb      	strb	r3, [r7, #27]
 8001b00:	2300      	movs	r3, #0
 8001b02:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7a1b      	ldrb	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f040 816d 	bne.w	8001de8 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001b0e:	7f7b      	ldrb	r3, [r7, #29]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	777a      	strb	r2, [r7, #29]
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	7a9a      	ldrb	r2, [r3, #10]
 8001b1c:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <huansic_xb_decodeBody+0x25c>)
 8001b1e:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001b20:	7f7b      	ldrb	r3, [r7, #29]
 8001b22:	3301      	adds	r3, #1
 8001b24:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	77fb      	strb	r3, [r7, #31]
 8001b2a:	e075      	b.n	8001c18 <huansic_xb_decodeBody+0x124>
			index += 2;
 8001b2c:	7f7b      	ldrb	r3, [r7, #29]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001b32:	7f7b      	ldrb	r3, [r7, #29]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	777a      	strb	r2, [r7, #29]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	7a9b      	ldrb	r3, [r3, #10]
 8001b40:	021a      	lsls	r2, r3, #8
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
 8001b44:	b211      	sxth	r1, r2
 8001b46:	4a83      	ldr	r2, [pc, #524]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001b48:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001b4c:	7f7b      	ldrb	r3, [r7, #29]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	777a      	strb	r2, [r7, #29]
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	7a9a      	ldrb	r2, [r3, #10]
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
 8001b5c:	b211      	sxth	r1, r2
 8001b5e:	4a7d      	ldr	r2, [pc, #500]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001b60:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001b64:	7f7b      	ldrb	r3, [r7, #29]
 8001b66:	3302      	adds	r3, #2
 8001b68:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001b6a:	7f7b      	ldrb	r3, [r7, #29]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	777a      	strb	r2, [r7, #29]
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	7a9b      	ldrb	r3, [r3, #10]
 8001b78:	021a      	lsls	r2, r3, #8
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
 8001b7c:	b211      	sxth	r1, r2
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	460a      	mov	r2, r1
 8001b86:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001b88:	7f7b      	ldrb	r3, [r7, #29]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	7a9a      	ldrb	r2, [r3, #10]
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
 8001b92:	b211      	sxth	r1, r2
 8001b94:	4a6f      	ldr	r2, [pc, #444]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001b9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001ba4:	7f7b      	ldrb	r3, [r7, #29]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	777a      	strb	r2, [r7, #29]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	7a9b      	ldrb	r3, [r3, #10]
 8001bb2:	021a      	lsls	r2, r3, #8
 8001bb4:	7ffb      	ldrb	r3, [r7, #31]
 8001bb6:	b211      	sxth	r1, r2
 8001bb8:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001bc2:	7f7b      	ldrb	r3, [r7, #29]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	7a9a      	ldrb	r2, [r3, #10]
 8001bca:	7ffb      	ldrb	r3, [r7, #31]
 8001bcc:	b211      	sxth	r1, r2
 8001bce:	4a61      	ldr	r2, [pc, #388]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001bd8:	7f7b      	ldrb	r3, [r7, #29]
 8001bda:	3302      	adds	r3, #2
 8001bdc:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001bde:	7f7b      	ldrb	r3, [r7, #29]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	777a      	strb	r2, [r7, #29]
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	7a9b      	ldrb	r3, [r3, #10]
 8001bec:	021a      	lsls	r2, r3, #8
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	b211      	sxth	r1, r2
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	460a      	mov	r2, r1
 8001bfa:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001bfc:	7f7b      	ldrb	r3, [r7, #29]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	7a9a      	ldrb	r2, [r3, #10]
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	b211      	sxth	r1, r2
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <huansic_xb_decodeBody+0x260>)
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	460a      	mov	r2, r1
 8001c10:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
 8001c14:	3301      	adds	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d986      	bls.n	8001b2c <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001c1e:	7f7b      	ldrb	r3, [r7, #29]
 8001c20:	3301      	adds	r3, #1
 8001c22:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001c24:	7f7b      	ldrb	r3, [r7, #29]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	777a      	strb	r2, [r7, #29]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	7a9b      	ldrb	r3, [r3, #10]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c36:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001c38:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c40:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001c42:	7f7b      	ldrb	r3, [r7, #29]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	777a      	strb	r2, [r7, #29]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	7a9b      	ldrb	r3, [r3, #10]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	4a3f      	ldr	r2, [pc, #252]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c5a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	4a3d      	ldr	r2, [pc, #244]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c64:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001c66:	7f7b      	ldrb	r3, [r7, #29]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	777a      	strb	r2, [r7, #29]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	7a9b      	ldrb	r3, [r3, #10]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c7e:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c88:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001c8a:	7f7b      	ldrb	r3, [r7, #29]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	777a      	strb	r2, [r7, #29]
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	7a9b      	ldrb	r3, [r3, #10]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <huansic_xb_decodeBody+0x264>)
 8001ca2:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8001ca4:	7f7b      	ldrb	r3, [r7, #29]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	7a9b      	ldrb	r3, [r3, #10]
 8001cac:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	77fb      	strb	r3, [r7, #31]
 8001cb2:	e03e      	b.n	8001d32 <huansic_xb_decodeBody+0x23e>
			index += 2;
 8001cb4:	7f7b      	ldrb	r3, [r7, #29]
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001cba:	7f7b      	ldrb	r3, [r7, #29]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	777a      	strb	r2, [r7, #29]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	7a9b      	ldrb	r3, [r3, #10]
 8001cc8:	021a      	lsls	r2, r3, #8
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	b211      	sxth	r1, r2
 8001cce:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <huansic_xb_decodeBody+0x268>)
 8001cd0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8001cd4:	7f7b      	ldrb	r3, [r7, #29]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	777a      	strb	r2, [r7, #29]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	7a9a      	ldrb	r2, [r3, #10]
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	b211      	sxth	r1, r2
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <huansic_xb_decodeBody+0x268>)
 8001ce8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001cec:	7f7b      	ldrb	r3, [r7, #29]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001cf2:	7f7b      	ldrb	r3, [r7, #29]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	777a      	strb	r2, [r7, #29]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	7a9b      	ldrb	r3, [r3, #10]
 8001d00:	021a      	lsls	r2, r3, #8
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	b211      	sxth	r1, r2
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <huansic_xb_decodeBody+0x268>)
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8001d10:	7f7b      	ldrb	r3, [r7, #29]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	777a      	strb	r2, [r7, #29]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	7a9a      	ldrb	r2, [r3, #10]
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	b211      	sxth	r1, r2
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <huansic_xb_decodeBody+0x268>)
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	460a      	mov	r2, r1
 8001d2a:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	77fb      	strb	r3, [r7, #31]
 8001d32:	7ffa      	ldrb	r2, [r7, #31]
 8001d34:	7efb      	ldrb	r3, [r7, #27]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3bc      	bcc.n	8001cb4 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8001d3a:	7f7b      	ldrb	r3, [r7, #29]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8001d40:	7f7b      	ldrb	r3, [r7, #29]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	7a9b      	ldrb	r3, [r3, #10]
 8001d48:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	77fb      	strb	r3, [r7, #31]
 8001d4e:	e046      	b.n	8001dde <huansic_xb_decodeBody+0x2ea>
 8001d50:	20000b40 	.word	0x20000b40
 8001d54:	20000b4c 	.word	0x20000b4c
 8001d58:	20000b44 	.word	0x20000b44
 8001d5c:	20000b74 	.word	0x20000b74
			index += 2;
 8001d60:	7f7b      	ldrb	r3, [r7, #29]
 8001d62:	3302      	adds	r3, #2
 8001d64:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001d66:	7f7b      	ldrb	r3, [r7, #29]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	777a      	strb	r2, [r7, #29]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	7a9b      	ldrb	r3, [r3, #10]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	b211      	sxth	r1, r2
 8001d7a:	4a9f      	ldr	r2, [pc, #636]	; (8001ff8 <huansic_xb_decodeBody+0x504>)
 8001d7c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8001d80:	7f7b      	ldrb	r3, [r7, #29]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	777a      	strb	r2, [r7, #29]
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	7a9a      	ldrb	r2, [r3, #10]
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	b211      	sxth	r1, r2
 8001d92:	4a99      	ldr	r2, [pc, #612]	; (8001ff8 <huansic_xb_decodeBody+0x504>)
 8001d94:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001d98:	7f7b      	ldrb	r3, [r7, #29]
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001d9e:	7f7b      	ldrb	r3, [r7, #29]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	777a      	strb	r2, [r7, #29]
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	7a9b      	ldrb	r3, [r3, #10]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	7ffb      	ldrb	r3, [r7, #31]
 8001db0:	b211      	sxth	r1, r2
 8001db2:	4a91      	ldr	r2, [pc, #580]	; (8001ff8 <huansic_xb_decodeBody+0x504>)
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	460a      	mov	r2, r1
 8001dba:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8001dbc:	7f7b      	ldrb	r3, [r7, #29]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	777a      	strb	r2, [r7, #29]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	7a9a      	ldrb	r2, [r3, #10]
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	b211      	sxth	r1, r2
 8001dce:	4a8a      	ldr	r2, [pc, #552]	; (8001ff8 <huansic_xb_decodeBody+0x504>)
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	77fb      	strb	r3, [r7, #31]
 8001dde:	7ffa      	ldrb	r2, [r7, #31]
 8001de0:	7efb      	ldrb	r3, [r7, #27]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3bc      	bcc.n	8001d60 <huansic_xb_decodeBody+0x26c>
 8001de6:	e31a      	b.n	800241e <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7a1b      	ldrb	r3, [r3, #8]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	f040 8316 	bne.w	800241e <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8001df2:	7f7b      	ldrb	r3, [r7, #29]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	777a      	strb	r2, [r7, #29]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	7a9a      	ldrb	r2, [r3, #10]
 8001e00:	4b7e      	ldr	r3, [pc, #504]	; (8001ffc <huansic_xb_decodeBody+0x508>)
 8001e02:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8001e04:	7f7b      	ldrb	r3, [r7, #29]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	777a      	strb	r2, [r7, #29]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	7a9b      	ldrb	r3, [r3, #10]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e16:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	4a78      	ldr	r2, [pc, #480]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e20:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001e22:	7f7b      	ldrb	r3, [r7, #29]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	777a      	strb	r2, [r7, #29]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	7a9b      	ldrb	r3, [r3, #10]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	4a71      	ldr	r2, [pc, #452]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e3a:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	4a6f      	ldr	r2, [pc, #444]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e44:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001e46:	7f7b      	ldrb	r3, [r7, #29]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	777a      	strb	r2, [r7, #29]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	7a9b      	ldrb	r3, [r3, #10]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	4a68      	ldr	r2, [pc, #416]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e5e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e68:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001e6a:	7f7b      	ldrb	r3, [r7, #29]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	777a      	strb	r2, [r7, #29]
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	7a9b      	ldrb	r3, [r3, #10]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b61      	ldr	r3, [pc, #388]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	4a5f      	ldr	r2, [pc, #380]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e82:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8001e84:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <huansic_xb_decodeBody+0x510>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <huansic_xb_decodeBody+0x50c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	4a5e      	ldr	r2, [pc, #376]	; (8002008 <huansic_xb_decodeBody+0x514>)
 8001e90:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8001e92:	7f7b      	ldrb	r3, [r7, #29]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	777a      	strb	r2, [r7, #29]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	7a9b      	ldrb	r3, [r3, #10]
 8001ea0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001ea8:	7f7b      	ldrb	r3, [r7, #29]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	777a      	strb	r2, [r7, #29]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	7a9b      	ldrb	r3, [r3, #10]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	777a      	strb	r2, [r7, #29]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	7a9b      	ldrb	r3, [r3, #10]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001ee0:	7f7b      	ldrb	r3, [r7, #29]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	777a      	strb	r2, [r7, #29]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	7a9b      	ldrb	r3, [r3, #10]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a43      	ldr	r2, [pc, #268]	; (800200c <huansic_xb_decodeBody+0x518>)
 8001efe:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8001f00:	7f7b      	ldrb	r3, [r7, #29]
 8001f02:	3302      	adds	r3, #2
 8001f04:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	777a      	strb	r2, [r7, #29]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	7a9b      	ldrb	r3, [r3, #10]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <huansic_xb_decodeBody+0x51c>)
 8001f1a:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8001f1c:	7f7b      	ldrb	r3, [r7, #29]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	777a      	strb	r2, [r7, #29]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	7a9b      	ldrb	r3, [r3, #10]
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <huansic_xb_decodeBody+0x51c>)
 8001f2e:	801a      	strh	r2, [r3, #0]
		index += 2;
 8001f30:	7f7b      	ldrb	r3, [r7, #29]
 8001f32:	3302      	adds	r3, #2
 8001f34:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	777a      	strb	r2, [r7, #29]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	7a9b      	ldrb	r3, [r3, #10]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <huansic_xb_decodeBody+0x51c>)
 8001f4a:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8001f4c:	7f7b      	ldrb	r3, [r7, #29]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	777a      	strb	r2, [r7, #29]
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	7a9b      	ldrb	r3, [r3, #10]
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <huansic_xb_decodeBody+0x51c>)
 8001f5e:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8001f60:	7f7b      	ldrb	r3, [r7, #29]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	777a      	strb	r2, [r7, #29]
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001f76:	7f7b      	ldrb	r3, [r7, #29]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	777a      	strb	r2, [r7, #29]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	7a9b      	ldrb	r3, [r3, #10]
 8001f84:	461a      	mov	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001f92:	7f7b      	ldrb	r3, [r7, #29]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	777a      	strb	r2, [r7, #29]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001fae:	7f7b      	ldrb	r3, [r7, #29]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	777a      	strb	r2, [r7, #29]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	7a9b      	ldrb	r3, [r3, #10]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <huansic_xb_decodeBody+0x520>)
 8001fcc:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <huansic_xb_decodeBody+0x524>)
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fd8:	6018      	str	r0, [r3, #0]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 8001fe2:	7f7b      	ldrb	r3, [r7, #29]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	777a      	strb	r2, [r7, #29]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	7a9b      	ldrb	r3, [r3, #10]
 8001ff0:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	77fb      	strb	r3, [r7, #31]
 8001ff6:	e0fd      	b.n	80021f4 <huansic_xb_decodeBody+0x700>
 8001ff8:	20000b80 	.word	0x20000b80
 8001ffc:	20000b41 	.word	0x20000b41
 8002000:	20000b48 	.word	0x20000b48
 8002004:	20000b44 	.word	0x20000b44
 8002008:	20000bac 	.word	0x20000bac
 800200c:	20000ba4 	.word	0x20000ba4
 8002010:	20000ba0 	.word	0x20000ba0
 8002014:	20000ba8 	.word	0x20000ba8
 8002018:	08007a1c 	.word	0x08007a1c
			temp = hxb->buffer[index + 24];
 800201c:	7f7b      	ldrb	r3, [r7, #29]
 800201e:	3318      	adds	r3, #24
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	7a9b      	ldrb	r3, [r3, #10]
 8002026:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 800202e:	7f7b      	ldrb	r3, [r7, #29]
 8002030:	3319      	adds	r3, #25
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	7a9b      	ldrb	r3, [r3, #10]
 8002038:	461a      	mov	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 8002046:	7f7b      	ldrb	r3, [r7, #29]
 8002048:	331a      	adds	r3, #26
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	7a9b      	ldrb	r3, [r3, #10]
 8002050:	461a      	mov	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 800205e:	7f7b      	ldrb	r3, [r7, #29]
 8002060:	331b      	adds	r3, #27
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	7a9b      	ldrb	r3, [r3, #10]
 8002068:	461a      	mov	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	b25b      	sxtb	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fa87 	bl	8001588 <huansic_order_new>
 800207a:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 8002082:	7f7b      	ldrb	r3, [r7, #29]
 8002084:	331c      	adds	r3, #28
 8002086:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fcd3 	bl	8001a38 <custom_order_new_failed>
				continue;
 8002092:	e0ac      	b.n	80021ee <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002094:	7f7b      	ldrb	r3, [r7, #29]
 8002096:	3302      	adds	r3, #2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	7a9b      	ldrb	r3, [r3, #10]
 800209e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	7f7b      	ldrb	r3, [r7, #29]
 80020a4:	3303      	adds	r3, #3
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	440b      	add	r3, r1
 80020aa:	7a9b      	ldrb	r3, [r3, #10]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80020b6:	7f7b      	ldrb	r3, [r7, #29]
 80020b8:	3306      	adds	r3, #6
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	7a9b      	ldrb	r3, [r3, #10]
 80020c0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	7f7b      	ldrb	r3, [r7, #29]
 80020c6:	3307      	adds	r3, #7
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	440b      	add	r3, r1
 80020cc:	7a9b      	ldrb	r3, [r3, #10]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80020d8:	7f7b      	ldrb	r3, [r7, #29]
 80020da:	330a      	adds	r3, #10
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	7a9b      	ldrb	r3, [r3, #10]
 80020e2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	7f7b      	ldrb	r3, [r7, #29]
 80020e8:	330b      	adds	r3, #11
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	440b      	add	r3, r1
 80020ee:	7a9b      	ldrb	r3, [r3, #10]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80020fa:	7f7b      	ldrb	r3, [r7, #29]
 80020fc:	330e      	adds	r3, #14
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	7a9b      	ldrb	r3, [r3, #10]
 8002104:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002106:	b21a      	sxth	r2, r3
 8002108:	7f7b      	ldrb	r3, [r7, #29]
 800210a:	330f      	adds	r3, #15
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	440b      	add	r3, r1
 8002110:	7a9b      	ldrb	r3, [r3, #10]
 8002112:	b21b      	sxth	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 800211c:	7f7b      	ldrb	r3, [r7, #29]
 800211e:	3310      	adds	r3, #16
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	7a9b      	ldrb	r3, [r3, #10]
 8002126:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800212e:	7f7b      	ldrb	r3, [r7, #29]
 8002130:	3311      	adds	r3, #17
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	7a9b      	ldrb	r3, [r3, #10]
 8002138:	461a      	mov	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002146:	7f7b      	ldrb	r3, [r7, #29]
 8002148:	3312      	adds	r3, #18
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	7a9b      	ldrb	r3, [r3, #10]
 8002150:	461a      	mov	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800215e:	7f7b      	ldrb	r3, [r7, #29]
 8002160:	3313      	adds	r3, #19
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	7a9b      	ldrb	r3, [r3, #10]
 8002168:	461a      	mov	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002176:	7f7b      	ldrb	r3, [r7, #29]
 8002178:	3314      	adds	r3, #20
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	7a9b      	ldrb	r3, [r3, #10]
 8002180:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002188:	7f7b      	ldrb	r3, [r7, #29]
 800218a:	3315      	adds	r3, #21
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	7a9b      	ldrb	r3, [r3, #10]
 8002192:	461a      	mov	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80021a0:	7f7b      	ldrb	r3, [r7, #29]
 80021a2:	3316      	adds	r3, #22
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	7a9b      	ldrb	r3, [r3, #10]
 80021aa:	461a      	mov	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80021b8:	7f7b      	ldrb	r3, [r7, #29]
 80021ba:	3317      	adds	r3, #23
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	7a9b      	ldrb	r3, [r3, #10]
 80021c2:	461a      	mov	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 80021d4:	7f7b      	ldrb	r3, [r7, #29]
 80021d6:	331c      	adds	r3, #28
 80021d8:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	7f3b      	ldrb	r3, [r7, #28]
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	7739      	strb	r1, [r7, #28]
 80021e4:	b252      	sxtb	r2, r2
 80021e6:	3320      	adds	r3, #32
 80021e8:	443b      	add	r3, r7
 80021ea:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	3301      	adds	r3, #1
 80021f2:	77fb      	strb	r3, [r7, #31]
 80021f4:	7ffa      	ldrb	r2, [r7, #31]
 80021f6:	7efb      	ldrb	r3, [r7, #27]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f4ff af0f 	bcc.w	800201c <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	77fb      	strb	r3, [r7, #31]
 8002202:	e02d      	b.n	8002260 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 8002204:	7ffb      	ldrb	r3, [r7, #31]
 8002206:	4a90      	ldr	r2, [pc, #576]	; (8002448 <huansic_xb_decodeBody+0x954>)
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002212:	d022      	beq.n	800225a <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 8002214:	2300      	movs	r3, #0
 8002216:	77bb      	strb	r3, [r7, #30]
 8002218:	e011      	b.n	800223e <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	4a8a      	ldr	r2, [pc, #552]	; (8002448 <huansic_xb_decodeBody+0x954>)
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	7fba      	ldrb	r2, [r7, #30]
 8002226:	3220      	adds	r2, #32
 8002228:	443a      	add	r2, r7
 800222a:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 800222e:	4293      	cmp	r3, r2
 8002230:	d102      	bne.n	8002238 <huansic_xb_decodeBody+0x744>
						j = 255;
 8002232:	23ff      	movs	r3, #255	; 0xff
 8002234:	77bb      	strb	r3, [r7, #30]
						break;
 8002236:	e006      	b.n	8002246 <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 8002238:	7fbb      	ldrb	r3, [r7, #30]
 800223a:	3301      	adds	r3, #1
 800223c:	77bb      	strb	r3, [r7, #30]
 800223e:	7ffa      	ldrb	r2, [r7, #31]
 8002240:	7f3b      	ldrb	r3, [r7, #28]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3e9      	bcc.n	800221a <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 8002246:	7fbb      	ldrb	r3, [r7, #30]
 8002248:	2bff      	cmp	r3, #255	; 0xff
 800224a:	d006      	beq.n	800225a <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 800224c:	7ffb      	ldrb	r3, [r7, #31]
 800224e:	4a7e      	ldr	r2, [pc, #504]	; (8002448 <huansic_xb_decodeBody+0x954>)
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f9f1 	bl	800163c <huansic_order_delete>
		for (i = 0; i < 5; i++)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	3301      	adds	r3, #1
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	2b04      	cmp	r3, #4
 8002264:	d9ce      	bls.n	8002204 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8002266:	7f7b      	ldrb	r3, [r7, #29]
 8002268:	3318      	adds	r3, #24
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	7a9b      	ldrb	r3, [r3, #10]
 8002270:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8002278:	7f7b      	ldrb	r3, [r7, #29]
 800227a:	3319      	adds	r3, #25
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	7a9b      	ldrb	r3, [r3, #10]
 8002282:	461a      	mov	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002290:	7f7b      	ldrb	r3, [r7, #29]
 8002292:	331a      	adds	r3, #26
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	7a9b      	ldrb	r3, [r3, #10]
 800229a:	461a      	mov	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 80022a8:	7f7b      	ldrb	r3, [r7, #29]
 80022aa:	331b      	adds	r3, #27
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	7a9b      	ldrb	r3, [r3, #10]
 80022b2:	461a      	mov	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f962 	bl	8001588 <huansic_order_new>
 80022c4:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <huansic_xb_decodeBody+0x7ea>
			index += 28;
 80022cc:	7f7b      	ldrb	r3, [r7, #29]
 80022ce:	331c      	adds	r3, #28
 80022d0:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fbae 	bl	8001a38 <custom_order_new_failed>
 80022dc:	e09f      	b.n	800241e <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80022de:	7f7b      	ldrb	r3, [r7, #29]
 80022e0:	3302      	adds	r3, #2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	7a9b      	ldrb	r3, [r3, #10]
 80022e8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	7f7b      	ldrb	r3, [r7, #29]
 80022ee:	3303      	adds	r3, #3
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	440b      	add	r3, r1
 80022f4:	7a9b      	ldrb	r3, [r3, #10]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002300:	7f7b      	ldrb	r3, [r7, #29]
 8002302:	3306      	adds	r3, #6
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	7a9b      	ldrb	r3, [r3, #10]
 800230a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800230c:	b21a      	sxth	r2, r3
 800230e:	7f7b      	ldrb	r3, [r7, #29]
 8002310:	3307      	adds	r3, #7
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	440b      	add	r3, r1
 8002316:	7a9b      	ldrb	r3, [r3, #10]
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002322:	7f7b      	ldrb	r3, [r7, #29]
 8002324:	330a      	adds	r3, #10
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	7a9b      	ldrb	r3, [r3, #10]
 800232c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 800232e:	b21a      	sxth	r2, r3
 8002330:	7f7b      	ldrb	r3, [r7, #29]
 8002332:	330b      	adds	r3, #11
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	440b      	add	r3, r1
 8002338:	7a9b      	ldrb	r3, [r3, #10]
 800233a:	b21b      	sxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002344:	7f7b      	ldrb	r3, [r7, #29]
 8002346:	330e      	adds	r3, #14
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	7a9b      	ldrb	r3, [r3, #10]
 800234e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002350:	b21a      	sxth	r2, r3
 8002352:	7f7b      	ldrb	r3, [r7, #29]
 8002354:	330f      	adds	r3, #15
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	440b      	add	r3, r1
 800235a:	7a9b      	ldrb	r3, [r3, #10]
 800235c:	b21b      	sxth	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8002366:	7f7b      	ldrb	r3, [r7, #29]
 8002368:	3310      	adds	r3, #16
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	7a9b      	ldrb	r3, [r3, #10]
 8002370:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8002378:	7f7b      	ldrb	r3, [r7, #29]
 800237a:	3311      	adds	r3, #17
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	7a9b      	ldrb	r3, [r3, #10]
 8002382:	461a      	mov	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002390:	7f7b      	ldrb	r3, [r7, #29]
 8002392:	3312      	adds	r3, #18
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	7a9b      	ldrb	r3, [r3, #10]
 800239a:	461a      	mov	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80023a8:	7f7b      	ldrb	r3, [r7, #29]
 80023aa:	3313      	adds	r3, #19
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	7a9b      	ldrb	r3, [r3, #10]
 80023b2:	461a      	mov	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 80023c0:	7f7b      	ldrb	r3, [r7, #29]
 80023c2:	3314      	adds	r3, #20
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	7a9b      	ldrb	r3, [r3, #10]
 80023ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80023d2:	7f7b      	ldrb	r3, [r7, #29]
 80023d4:	3315      	adds	r3, #21
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	7a9b      	ldrb	r3, [r3, #10]
 80023dc:	461a      	mov	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80023ea:	7f7b      	ldrb	r3, [r7, #29]
 80023ec:	3316      	adds	r3, #22
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	7a9b      	ldrb	r3, [r3, #10]
 80023f4:	461a      	mov	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002402:	7f7b      	ldrb	r3, [r7, #29]
 8002404:	3317      	adds	r3, #23
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	7a9b      	ldrb	r3, [r3, #10]
 800240c:	461a      	mov	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2206      	movs	r2, #6
 8002422:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f103 010a 	add.w	r1, r3, #10
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7a5b      	ldrb	r3, [r3, #9]
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	f003 ffe6 	bl	800640c <HAL_UART_Receive_DMA>
}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000b8c 	.word	0x20000b8c

0800244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002450:	f001 f9e8 	bl	8003824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002454:	f000 f854 	bl	8002500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002458:	f000 fc4e 	bl	8002cf8 <MX_GPIO_Init>
	MX_DMA_Init();
 800245c:	f000 fc26 	bl	8002cac <MX_DMA_Init>
	MX_I2C1_Init();
 8002460:	f000 f894 	bl	800258c <MX_I2C1_Init>
	MX_TIM1_Init();
 8002464:	f000 f8c0 	bl	80025e8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002468:	f000 f982 	bl	8002770 <MX_TIM2_Init>
	MX_TIM3_Init();
 800246c:	f000 f9d4 	bl	8002818 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002470:	f000 fa26 	bl	80028c0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002474:	f000 fa78 	bl	8002968 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002478:	f000 fb00 	bl	8002a7c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800247c:	f000 fbc2 	bl	8002c04 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002480:	f000 fbea 	bl	8002c58 <MX_USART3_UART_Init>
    MX_TIM6_Init();
 8002484:	f000 fac4 	bl	8002a10 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	HUAN_MOTOR1_Init();
 8002488:	f000 fc8c 	bl	8002da4 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 800248c:	f000 fcba 	bl	8002e04 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8002490:	f000 fce8 	bl	8002e64 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8002494:	f000 fd16 	bl	8002ec4 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8002498:	f000 fd44 	bl	8002f24 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 800249c:	f000 fd50 	bl	8002f40 <HUAN_ZIGBEE_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer
	HAL_TIM_Base_Start_IT(&htim6);
 80024a0:	4814      	ldr	r0, [pc, #80]	; (80024f4 <main+0xa8>)
 80024a2:	f002 fdcb 	bl	800503c <HAL_TIM_Base_Start_IT>
//		chao_move_angle(0, 4000); // 向后
//
//		HAL_Delay(2000);
//		chao_move_angle(90, 4000); // 向左

		while(!gameStatus){		// if the game is not running
 80024a6:	bf00      	nop
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <main+0xac>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
//	    	LED1_ON;
			break;
		}

		while (gameStage == 0) {		// pre-match
 80024ae:	e003      	b.n	80024b8 <main+0x6c>
			if (!gameStatus)	// if the game stopped
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <main+0xac>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <main+0x76>
		while (gameStage == 0) {		// pre-match
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <main+0xb0>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f7      	beq.n	80024b0 <main+0x64>
 80024c0:	e005      	b.n	80024ce <main+0x82>
				break;
 80024c2:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 80024c4:	e003      	b.n	80024ce <main+0x82>
			if (!gameStatus)	// if the game stopped
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <main+0xac>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <main+0x8c>
		while (gameStage == 1){			// first-half
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <main+0xb0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d0f7      	beq.n	80024c6 <main+0x7a>
 80024d6:	e005      	b.n	80024e4 <main+0x98>
				break;
 80024d8:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 80024da:	e003      	b.n	80024e4 <main+0x98>
			if (!gameStatus)	// if the game stopped
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <main+0xac>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <main+0xa2>
		while (gameStage == 2){			// second-half
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <main+0xb0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d0f7      	beq.n	80024dc <main+0x90>
 80024ec:	e7db      	b.n	80024a6 <main+0x5a>
				break;
 80024ee:	bf00      	nop
		while(!gameStatus){		// if the game is not running
 80024f0:	e7d9      	b.n	80024a6 <main+0x5a>
 80024f2:	bf00      	nop
 80024f4:	200007ec 	.word	0x200007ec
 80024f8:	20000b41 	.word	0x20000b41
 80024fc:	20000b40 	.word	0x20000b40

08002500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b090      	sub	sp, #64	; 0x40
 8002504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002506:	f107 0318 	add.w	r3, r7, #24
 800250a:	2228      	movs	r2, #40	; 0x28
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f004 fa5a 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800252c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002530:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002532:	2301      	movs	r3, #1
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002536:	2302      	movs	r3, #2
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800253a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002540:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002546:	f107 0318 	add.w	r3, r7, #24
 800254a:	4618      	mov	r0, r3
 800254c:	f002 f90a 	bl	8004764 <HAL_RCC_OscConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002556:	f000 fd01 	bl	8002f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255a:	230f      	movs	r3, #15
 800255c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255e:	2302      	movs	r3, #2
 8002560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2102      	movs	r1, #2
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fb77 	bl	8004c68 <HAL_RCC_ClockConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002580:	f000 fcec 	bl	8002f5c <Error_Handler>
  }
}
 8002584:	bf00      	nop
 8002586:	3740      	adds	r7, #64	; 0x40
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <MX_I2C1_Init+0x50>)
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <MX_I2C1_Init+0x54>)
 8002594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_I2C1_Init+0x50>)
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <MX_I2C1_Init+0x58>)
 800259a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_I2C1_Init+0x50>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_I2C1_Init+0x50>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_I2C1_Init+0x50>)
 80025aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <MX_I2C1_Init+0x50>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_I2C1_Init+0x50>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_I2C1_Init+0x50>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_I2C1_Init+0x50>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_I2C1_Init+0x50>)
 80025ca:	f001 ff87 	bl	80044dc <HAL_I2C_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025d4:	f000 fcc2 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000630 	.word	0x20000630
 80025e0:	40005400 	.word	0x40005400
 80025e4:	000186a0 	.word	0x000186a0

080025e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b096      	sub	sp, #88	; 0x58
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]
 8002616:	615a      	str	r2, [r3, #20]
 8002618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2220      	movs	r2, #32
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f004 f9d1 	bl	80069c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002626:	4b50      	ldr	r3, [pc, #320]	; (8002768 <MX_TIM1_Init+0x180>)
 8002628:	4a50      	ldr	r2, [pc, #320]	; (800276c <MX_TIM1_Init+0x184>)
 800262a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800262c:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <MX_TIM1_Init+0x180>)
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <MX_TIM1_Init+0x180>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50 * 72 - 1;
 8002638:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <MX_TIM1_Init+0x180>)
 800263a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800263e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <MX_TIM1_Init+0x180>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002646:	4b48      	ldr	r3, [pc, #288]	; (8002768 <MX_TIM1_Init+0x180>)
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264c:	4b46      	ldr	r3, [pc, #280]	; (8002768 <MX_TIM1_Init+0x180>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002652:	4845      	ldr	r0, [pc, #276]	; (8002768 <MX_TIM1_Init+0x180>)
 8002654:	f002 fca2 	bl	8004f9c <HAL_TIM_Base_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800265e:	f000 fc7d 	bl	8002f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800266c:	4619      	mov	r1, r3
 800266e:	483e      	ldr	r0, [pc, #248]	; (8002768 <MX_TIM1_Init+0x180>)
 8002670:	f003 f94c 	bl	800590c <HAL_TIM_ConfigClockSource>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800267a:	f000 fc6f 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800267e:	483a      	ldr	r0, [pc, #232]	; (8002768 <MX_TIM1_Init+0x180>)
 8002680:	f002 fd3c 	bl	80050fc <HAL_TIM_PWM_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800268a:	f000 fc67 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800269a:	4619      	mov	r1, r3
 800269c:	4832      	ldr	r0, [pc, #200]	; (8002768 <MX_TIM1_Init+0x180>)
 800269e:	f003 fd07 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80026a8:	f000 fc58 	bl	8002f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ac:	2360      	movs	r3, #96	; 0x60
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026b8:	2300      	movs	r3, #0
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	2200      	movs	r2, #0
 80026ce:	4619      	mov	r1, r3
 80026d0:	4825      	ldr	r0, [pc, #148]	; (8002768 <MX_TIM1_Init+0x180>)
 80026d2:	f003 f85d 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80026dc:	f000 fc3e 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e4:	2204      	movs	r2, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	481f      	ldr	r0, [pc, #124]	; (8002768 <MX_TIM1_Init+0x180>)
 80026ea:	f003 f851 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80026f4:	f000 fc32 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fc:	2208      	movs	r2, #8
 80026fe:	4619      	mov	r1, r3
 8002700:	4819      	ldr	r0, [pc, #100]	; (8002768 <MX_TIM1_Init+0x180>)
 8002702:	f003 f845 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800270c:	f000 fc26 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	220c      	movs	r2, #12
 8002716:	4619      	mov	r1, r3
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <MX_TIM1_Init+0x180>)
 800271a:	f003 f839 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002724:	f000 fc1a 	bl	8002f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM1_Init+0x180>)
 800274c:	f003 fd1c 	bl	8006188 <HAL_TIMEx_ConfigBreakDeadTime>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002756:	f000 fc01 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM1_Init+0x180>)
 800275c:	f000 fdc4 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002760:	bf00      	nop
 8002762:	3758      	adds	r7, #88	; 0x58
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000684 	.word	0x20000684
 800276c:	40012c00 	.word	0x40012c00

08002770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f922 	bl	80069c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <MX_TIM2_Init+0xa4>)
 800278e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002794:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <MX_TIM2_Init+0xa4>)
 8002796:	2200      	movs	r2, #0
 8002798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <MX_TIM2_Init+0xa4>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80027a0:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <MX_TIM2_Init+0xa4>)
 80027a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <MX_TIM2_Init+0xa4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <MX_TIM2_Init+0xa4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027b4:	2303      	movs	r3, #3
 80027b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80027c8:	2302      	movs	r3, #2
 80027ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027cc:	2301      	movs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	4619      	mov	r1, r3
 80027de:	480d      	ldr	r0, [pc, #52]	; (8002814 <MX_TIM2_Init+0xa4>)
 80027e0:	f002 fd9e 	bl	8005320 <HAL_TIM_Encoder_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80027ea:	f000 fbb7 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4806      	ldr	r0, [pc, #24]	; (8002814 <MX_TIM2_Init+0xa4>)
 80027fc:	f003 fc58 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002806:	f000 fba9 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	3730      	adds	r7, #48	; 0x30
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200006cc 	.word	0x200006cc

08002818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f004 f8ce 	bl	80069c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <MX_TIM3_Init+0xa0>)
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <MX_TIM3_Init+0xa4>)
 8002838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <MX_TIM3_Init+0xa0>)
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <MX_TIM3_Init+0xa0>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <MX_TIM3_Init+0xa0>)
 8002848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <MX_TIM3_Init+0xa0>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <MX_TIM3_Init+0xa0>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800285a:	2303      	movs	r3, #3
 800285c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002862:	2301      	movs	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002872:	2301      	movs	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002876:	2300      	movs	r3, #0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <MX_TIM3_Init+0xa0>)
 8002886:	f002 fd4b 	bl	8005320 <HAL_TIM_Encoder_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002890:	f000 fb64 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_TIM3_Init+0xa0>)
 80028a2:	f003 fc05 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80028ac:	f000 fb56 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000714 	.word	0x20000714
 80028bc:	40000400 	.word	0x40000400

080028c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 f87a 	bl	80069c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <MX_TIM4_Init+0xa0>)
 80028de:	4a21      	ldr	r2, [pc, #132]	; (8002964 <MX_TIM4_Init+0xa4>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <MX_TIM4_Init+0xa0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_TIM4_Init+0xa0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <MX_TIM4_Init+0xa0>)
 80028f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_TIM4_Init+0xa0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_TIM4_Init+0xa0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002902:	2303      	movs	r3, #3
 8002904:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800290a:	2301      	movs	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800291a:	2301      	movs	r3, #1
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	4619      	mov	r1, r3
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <MX_TIM4_Init+0xa0>)
 800292e:	f002 fcf7 	bl	8005320 <HAL_TIM_Encoder_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002938:	f000 fb10 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_TIM4_Init+0xa0>)
 800294a:	f003 fbb1 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002954:	f000 fb02 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	3730      	adds	r7, #48	; 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000075c 	.word	0x2000075c
 8002964:	40000800 	.word	0x40000800

08002968 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f004 f826 	bl	80069c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <MX_TIM5_Init+0xa0>)
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <MX_TIM5_Init+0xa4>)
 8002988:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <MX_TIM5_Init+0xa0>)
 800298c:	2200      	movs	r2, #0
 800298e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <MX_TIM5_Init+0xa0>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <MX_TIM5_Init+0xa0>)
 8002998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MX_TIM5_Init+0xa0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <MX_TIM5_Init+0xa0>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029aa:	2303      	movs	r3, #3
 80029ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c2:	2301      	movs	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <MX_TIM5_Init+0xa0>)
 80029d6:	f002 fca3 	bl	8005320 <HAL_TIM_Encoder_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80029e0:	f000 fabc 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <MX_TIM5_Init+0xa0>)
 80029f2:	f003 fb5d 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80029fc:	f000 faae 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200007a4 	.word	0x200007a4
 8002a0c:	40000c00 	.word	0x40000c00

08002a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a16:	463b      	mov	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <MX_TIM6_Init+0x68>)
 8002a22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a26:	2247      	movs	r2, #71	; 0x47
 8002a28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002a36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a40:	f002 faac 	bl	8004f9c <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002a4a:	f000 fa87 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a56:	463b      	mov	r3, r7
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <MX_TIM6_Init+0x64>)
 8002a5c:	f003 fb28 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002a66:	f000 fa79 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200007ec 	.word	0x200007ec
 8002a78:	40001000 	.word	0x40001000

08002a7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b096      	sub	sp, #88	; 0x58
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	615a      	str	r2, [r3, #20]
 8002aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 ff87 	bl	80069c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002aba:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002abc:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <MX_TIM8_Init+0x184>)
 8002abe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac6:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50 * 72 - 1;
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002ace:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002ad2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad4:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ae6:	4845      	ldr	r0, [pc, #276]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002ae8:	f002 fa58 	bl	8004f9c <HAL_TIM_Base_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002af2:	f000 fa33 	bl	8002f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002afc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b00:	4619      	mov	r1, r3
 8002b02:	483e      	ldr	r0, [pc, #248]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002b04:	f002 ff02 	bl	800590c <HAL_TIM_ConfigClockSource>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002b0e:	f000 fa25 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b12:	483a      	ldr	r0, [pc, #232]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002b14:	f002 faf2 	bl	80050fc <HAL_TIM_PWM_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002b1e:	f000 fa1d 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4832      	ldr	r0, [pc, #200]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002b32:	f003 fabd 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002b3c:	f000 fa0e 	bl	8002f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b40:	2360      	movs	r3, #96	; 0x60
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	2200      	movs	r2, #0
 8002b62:	4619      	mov	r1, r3
 8002b64:	4825      	ldr	r0, [pc, #148]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002b66:	f002 fe13 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002b70:	f000 f9f4 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	2204      	movs	r2, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	481f      	ldr	r0, [pc, #124]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002b7e:	f002 fe07 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002b88:	f000 f9e8 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	2208      	movs	r2, #8
 8002b92:	4619      	mov	r1, r3
 8002b94:	4819      	ldr	r0, [pc, #100]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002b96:	f002 fdfb 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002ba0:	f000 f9dc 	bl	8002f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	220c      	movs	r2, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	4813      	ldr	r0, [pc, #76]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002bae:	f002 fdef 	bl	8005790 <HAL_TIM_PWM_ConfigChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002bb8:	f000 f9d0 	bl	8002f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4807      	ldr	r0, [pc, #28]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002be0:	f003 fad2 	bl	8006188 <HAL_TIMEx_ConfigBreakDeadTime>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002bea:	f000 f9b7 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002bee:	4803      	ldr	r0, [pc, #12]	; (8002bfc <MX_TIM8_Init+0x180>)
 8002bf0:	f000 fb7a 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002bf4:	bf00      	nop
 8002bf6:	3758      	adds	r7, #88	; 0x58
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000834 	.word	0x20000834
 8002c00:	40013400 	.word	0x40013400

08002c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_USART2_UART_Init+0x50>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c3c:	f003 fb07 	bl	800624e <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c46:	f000 f989 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000087c 	.word	0x2000087c
 8002c54:	40004400 	.word	0x40004400

08002c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <MX_USART3_UART_Init+0x50>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c90:	f003 fadd 	bl	800624e <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c9a:	f000 f95f 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200008c0 	.word	0x200008c0
 8002ca8:	40004800 	.word	0x40004800

08002cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <MX_DMA_Init+0x48>)
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <MX_DMA_Init+0x48>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6153      	str	r3, [r2, #20]
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MX_DMA_Init+0x48>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2102      	movs	r1, #2
 8002cce:	200d      	movs	r0, #13
 8002cd0:	f000 fee1 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002cd4:	200d      	movs	r0, #13
 8002cd6:	f000 fefa 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2102      	movs	r1, #2
 8002cde:	2010      	movs	r0, #16
 8002ce0:	f000 fed9 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002ce4:	2010      	movs	r0, #16
 8002ce6:	f000 fef2 	bl	8003ace <HAL_NVIC_EnableIRQ>

}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6193      	str	r3, [r2, #24]
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <MX_GPIO_Init+0xa4>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2107      	movs	r1, #7
 8002d70:	480b      	ldr	r0, [pc, #44]	; (8002da0 <MX_GPIO_Init+0xa8>)
 8002d72:	f001 fb9b 	bl	80044ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002d76:	2307      	movs	r3, #7
 8002d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4804      	ldr	r0, [pc, #16]	; (8002da0 <MX_GPIO_Init+0xa8>)
 8002d8e:	f001 f9f9 	bl	8004184 <HAL_GPIO_Init>

}
 8002d92:	bf00      	nop
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010c00 	.word	0x40010c00

08002da4 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HUAN_MOTOR1_Init+0x48>)
 8002dac:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002db0:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HUAN_MOTOR1_Init+0x4c>)
 8002db2:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HUAN_MOTOR1_Init+0x50>)
 8002db8:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002dbc:	220c      	movs	r2, #12
 8002dbe:	60da      	str	r2, [r3, #12]
	cmotor_lf.negTimer = &htim1;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002dc2:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <HUAN_MOTOR1_Init+0x50>)
 8002dc4:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002dc8:	2208      	movs	r2, #8
 8002dca:	611a      	str	r2, [r3, #16]
	cmotor_lf.kp = 0.0003;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HUAN_MOTOR1_Init+0x54>)
 8002dd0:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002dd4:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HUAN_MOTOR1_Init+0x58>)
 8002dd6:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HUAN_MOTOR1_Init+0x5c>)
 8002ddc:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8002dde:	4802      	ldr	r0, [pc, #8]	; (8002de8 <HUAN_MOTOR1_Init+0x44>)
 8002de0:	f7fe fc42 	bl	8001668 <huansic_motor_init>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	2000098c 	.word	0x2000098c
 8002dec:	200006cc 	.word	0x200006cc
 8002df0:	3d4ccccd 	.word	0x3d4ccccd
 8002df4:	20000684 	.word	0x20000684
 8002df8:	399d4952 	.word	0x399d4952
 8002dfc:	37a7c5ac 	.word	0x37a7c5ac
 8002e00:	387ba882 	.word	0x387ba882

08002e04 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HUAN_MOTOR2_Init+0x48>)
 8002e0c:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e10:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HUAN_MOTOR2_Init+0x4c>)
 8002e12:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <HUAN_MOTOR2_Init+0x50>)
 8002e18:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HUAN_MOTOR2_Init+0x50>)
 8002e24:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e28:	2204      	movs	r2, #4
 8002e2a:	611a      	str	r2, [r3, #16]
	cmotor_rf.kp = 0.0003;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HUAN_MOTOR2_Init+0x54>)
 8002e30:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HUAN_MOTOR2_Init+0x58>)
 8002e36:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <HUAN_MOTOR2_Init+0x5c>)
 8002e3c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 8002e3e:	4802      	ldr	r0, [pc, #8]	; (8002e48 <HUAN_MOTOR2_Init+0x44>)
 8002e40:	f7fe fc12 	bl	8001668 <huansic_motor_init>
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200009c8 	.word	0x200009c8
 8002e4c:	2000075c 	.word	0x2000075c
 8002e50:	3d4ccccd 	.word	0x3d4ccccd
 8002e54:	20000684 	.word	0x20000684
 8002e58:	399d4952 	.word	0x399d4952
 8002e5c:	37a7c5ac 	.word	0x37a7c5ac
 8002e60:	387ba882 	.word	0x387ba882

08002e64 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HUAN_MOTOR3_Init+0x48>)
 8002e6c:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <HUAN_MOTOR3_Init+0x4c>)
 8002e72:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e76:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HUAN_MOTOR3_Init+0x50>)
 8002e78:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e7c:	220c      	movs	r2, #12
 8002e7e:	60da      	str	r2, [r3, #12]
	cmotor_lb.negTimer = &htim8;
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HUAN_MOTOR3_Init+0x50>)
 8002e84:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e88:	2208      	movs	r2, #8
 8002e8a:	611a      	str	r2, [r3, #16]
	cmotor_lb.kp = 0.0003;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <HUAN_MOTOR3_Init+0x54>)
 8002e90:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HUAN_MOTOR3_Init+0x58>)
 8002e96:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <HUAN_MOTOR3_Init+0x5c>)
 8002e9c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8002e9e:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <HUAN_MOTOR3_Init+0x44>)
 8002ea0:	f7fe fbe2 	bl	8001668 <huansic_motor_init>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000a04 	.word	0x20000a04
 8002eac:	20000714 	.word	0x20000714
 8002eb0:	3d4ccccd 	.word	0x3d4ccccd
 8002eb4:	20000834 	.word	0x20000834
 8002eb8:	399d4952 	.word	0x399d4952
 8002ebc:	37a7c5ac 	.word	0x37a7c5ac
 8002ec0:	387ba882 	.word	0x387ba882

08002ec4 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HUAN_MOTOR4_Init+0x48>)
 8002ecc:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HUAN_MOTOR4_Init+0x4c>)
 8002ed2:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HUAN_MOTOR4_Init+0x50>)
 8002ed8:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HUAN_MOTOR4_Init+0x50>)
 8002ee4:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002ee8:	2204      	movs	r2, #4
 8002eea:	611a      	str	r2, [r3, #16]
	cmotor_rb.kp = 0.0003;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <HUAN_MOTOR4_Init+0x54>)
 8002ef0:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HUAN_MOTOR4_Init+0x58>)
 8002ef6:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002efa:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <HUAN_MOTOR4_Init+0x5c>)
 8002efc:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 8002efe:	4802      	ldr	r0, [pc, #8]	; (8002f08 <HUAN_MOTOR4_Init+0x44>)
 8002f00:	f7fe fbb2 	bl	8001668 <huansic_motor_init>
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000a40 	.word	0x20000a40
 8002f0c:	200007a4 	.word	0x200007a4
 8002f10:	3d4ccccd 	.word	0x3d4ccccd
 8002f14:	20000834 	.word	0x20000834
 8002f18:	399d4952 	.word	0x399d4952
 8002f1c:	37a7c5ac 	.word	0x37a7c5ac
 8002f20:	387ba882 	.word	0x387ba882

08002f24 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	himu.uartPort = &huart3;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HUAN_IMU_Init+0x14>)
 8002f2a:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HUAN_IMU_Init+0x18>)
 8002f2c:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8002f2e:	4802      	ldr	r0, [pc, #8]	; (8002f38 <HUAN_IMU_Init+0x14>)
 8002f30:	f7fe f88c 	bl	800104c <huansic_jy62_init>
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000a7c 	.word	0x20000a7c
 8002f3c:	200008c0 	.word	0x200008c0

08002f40 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HUAN_ZIGBEE_Init+0x14>)
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HUAN_ZIGBEE_Init+0x18>)
 8002f48:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8002f4a:	4802      	ldr	r0, [pc, #8]	; (8002f54 <HUAN_ZIGBEE_Init+0x14>)
 8002f4c:	f7fe fd7e 	bl	8001a4c <huansic_xb_init>
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000ab4 	.word	0x20000ab4
 8002f58:	2000087c 	.word	0x2000087c

08002f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f60:	b672      	cpsid	i
}
 8002f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f64:	e7fe      	b.n	8002f64 <Error_Handler+0x8>
	...

08002f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_MspInit+0x5c>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_MspInit+0x5c>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6193      	str	r3, [r2, #24]
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_MspInit+0x5c>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_MspInit+0x5c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <HAL_MspInit+0x5c>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_MspInit+0x5c>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_MspInit+0x60>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_MspInit+0x60>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000

08002fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_I2C_MspInit+0x90>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d132      	bne.n	8003052 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_I2C_MspInit+0x94>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_I2C_MspInit+0x94>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_I2C_MspInit+0x94>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003004:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300a:	2312      	movs	r3, #18
 800300c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4812      	ldr	r0, [pc, #72]	; (8003064 <HAL_I2C_MspInit+0x98>)
 800301a:	f001 f8b3 	bl	8004184 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_I2C_MspInit+0x9c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_I2C_MspInit+0x9c>)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_I2C_MspInit+0x94>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_I2C_MspInit+0x94>)
 8003040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003044:	61d3      	str	r3, [r2, #28]
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_I2C_MspInit+0x94>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40005400 	.word	0x40005400
 8003060:	40021000 	.word	0x40021000
 8003064:	40010c00 	.word	0x40010c00
 8003068:	40010000 	.word	0x40010000

0800306c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_TIM_Base_MspInit+0x8c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10c      	bne.n	8003098 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 8003084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003088:	6193      	str	r3, [r2, #24]
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003096:	e02a      	b.n	80030ee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_TIM_Base_MspInit+0x94>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d114      	bne.n	80030cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 80030a8:	f043 0310 	orr.w	r3, r3, #16
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2101      	movs	r1, #1
 80030be:	2036      	movs	r0, #54	; 0x36
 80030c0:	f000 fce9 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80030c4:	2036      	movs	r0, #54	; 0x36
 80030c6:	f000 fd02 	bl	8003ace <HAL_NVIC_EnableIRQ>
}
 80030ca:	e010      	b.n	80030ee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_TIM_Base_MspInit+0x98>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10b      	bne.n	80030ee <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 80030dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030e0:	6193      	str	r3, [r2, #24]
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_TIM_Base_MspInit+0x90>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40021000 	.word	0x40021000
 8003100:	40001000 	.word	0x40001000
 8003104:	40013400 	.word	0x40013400

08003108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b090      	sub	sp, #64	; 0x40
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003126:	d14f      	bne.n	80031c8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	61d3      	str	r3, [r2, #28]
 8003134:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003140:	4b62      	ldr	r3, [pc, #392]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a61      	ldr	r2, [pc, #388]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800315e:	f043 0308 	orr.w	r3, r3, #8
 8003162:	6193      	str	r3, [r2, #24]
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003182:	4619      	mov	r1, r3
 8003184:	4852      	ldr	r0, [pc, #328]	; (80032d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003186:	f000 fffd 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800318a:	2308      	movs	r3, #8
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800319a:	4619      	mov	r1, r3
 800319c:	484d      	ldr	r0, [pc, #308]	; (80032d4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800319e:	f000 fff1 	bl	8004184 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80031c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031c6:	e07c      	b.n	80032c2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a43      	ldr	r2, [pc, #268]	; (80032dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d124      	bne.n	800321c <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	61d3      	str	r3, [r2, #28]
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6193      	str	r3, [r2, #24]
 80031f6:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003202:	23c0      	movs	r3, #192	; 0xc0
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003206:	2300      	movs	r3, #0
 8003208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003212:	4619      	mov	r1, r3
 8003214:	482e      	ldr	r0, [pc, #184]	; (80032d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003216:	f000 ffb5 	bl	8004184 <HAL_GPIO_Init>
}
 800321a:	e052      	b.n	80032c2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d124      	bne.n	8003270 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a28      	ldr	r2, [pc, #160]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6193      	str	r3, [r2, #24]
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003256:	23c0      	movs	r3, #192	; 0xc0
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800325a:	2300      	movs	r3, #0
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003266:	4619      	mov	r1, r3
 8003268:	481a      	ldr	r0, [pc, #104]	; (80032d4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800326a:	f000 ff8b 	bl	8004184 <HAL_GPIO_Init>
}
 800326e:	e028      	b.n	80032c2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d123      	bne.n	80032c2 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a13      	ldr	r2, [pc, #76]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	61d3      	str	r3, [r2, #28]
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	6193      	str	r3, [r2, #24]
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032aa:	2303      	movs	r3, #3
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ae:	2300      	movs	r3, #0
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ba:	4619      	mov	r1, r3
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80032be:	f000 ff61 	bl	8004184 <HAL_GPIO_Init>
}
 80032c2:	bf00      	nop
 80032c4:	3740      	adds	r7, #64	; 0x40
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40010800 	.word	0x40010800
 80032d4:	40010c00 	.word	0x40010c00
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40000c00 	.word	0x40000c00

080032e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0310 	add.w	r3, r7, #16
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_TIM_MspPostInit+0x98>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d119      	bne.n	800333c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_TIM_MspPostInit+0x9c>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_TIM_MspPostInit+0x9c>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_TIM_MspPostInit+0x9c>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003320:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2302      	movs	r3, #2
 800332c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	4619      	mov	r1, r3
 8003334:	4814      	ldr	r0, [pc, #80]	; (8003388 <HAL_TIM_MspPostInit+0xa0>)
 8003336:	f000 ff25 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800333a:	e01d      	b.n	8003378 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a12      	ldr	r2, [pc, #72]	; (800338c <HAL_TIM_MspPostInit+0xa4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d118      	bne.n	8003378 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_TIM_MspPostInit+0x9c>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <HAL_TIM_MspPostInit+0x9c>)
 800334c:	f043 0310 	orr.w	r3, r3, #16
 8003350:	6193      	str	r3, [r2, #24]
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_TIM_MspPostInit+0x9c>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800335e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003368:	2302      	movs	r3, #2
 800336a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336c:	f107 0310 	add.w	r3, r7, #16
 8003370:	4619      	mov	r1, r3
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <HAL_TIM_MspPostInit+0xa8>)
 8003374:	f000 ff06 	bl	8004184 <HAL_GPIO_Init>
}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40021000 	.word	0x40021000
 8003388:	40010800 	.word	0x40010800
 800338c:	40013400 	.word	0x40013400
 8003390:	40011000 	.word	0x40011000

08003394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a66      	ldr	r2, [pc, #408]	; (8003548 <HAL_UART_MspInit+0x1b4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d156      	bne.n	8003462 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b4:	4b65      	ldr	r3, [pc, #404]	; (800354c <HAL_UART_MspInit+0x1b8>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a64      	ldr	r2, [pc, #400]	; (800354c <HAL_UART_MspInit+0x1b8>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033be:	61d3      	str	r3, [r2, #28]
 80033c0:	4b62      	ldr	r3, [pc, #392]	; (800354c <HAL_UART_MspInit+0x1b8>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_UART_MspInit+0x1b8>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_UART_MspInit+0x1b8>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6193      	str	r3, [r2, #24]
 80033d8:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_UART_MspInit+0x1b8>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 80033e4:	2304      	movs	r3, #4
 80033e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	4856      	ldr	r0, [pc, #344]	; (8003550 <HAL_UART_MspInit+0x1bc>)
 80033f8:	f000 fec4 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 80033fc:	2308      	movs	r3, #8
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	4850      	ldr	r0, [pc, #320]	; (8003550 <HAL_UART_MspInit+0x1bc>)
 8003410:	f000 feb8 	bl	8004184 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003414:	4b4f      	ldr	r3, [pc, #316]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003416:	4a50      	ldr	r2, [pc, #320]	; (8003558 <HAL_UART_MspInit+0x1c4>)
 8003418:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800341a:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003420:	4b4c      	ldr	r3, [pc, #304]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003426:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800342c:	4b49      	ldr	r3, [pc, #292]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003432:	4b48      	ldr	r3, [pc, #288]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800343e:	4b45      	ldr	r3, [pc, #276]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003444:	4843      	ldr	r0, [pc, #268]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003446:	f000 fb5d 	bl	8003b04 <HAL_DMA_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003450:	f7ff fd84 	bl	8002f5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
 800345a:	4a3e      	ldr	r2, [pc, #248]	; (8003554 <HAL_UART_MspInit+0x1c0>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003460:	e06e      	b.n	8003540 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3d      	ldr	r2, [pc, #244]	; (800355c <HAL_UART_MspInit+0x1c8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d169      	bne.n	8003540 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 800346c:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_UART_MspInit+0x1b8>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a36      	ldr	r2, [pc, #216]	; (800354c <HAL_UART_MspInit+0x1b8>)
 8003472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003476:	61d3      	str	r3, [r2, #28]
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_UART_MspInit+0x1b8>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_UART_MspInit+0x1b8>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4a30      	ldr	r2, [pc, #192]	; (800354c <HAL_UART_MspInit+0x1b8>)
 800348a:	f043 0310 	orr.w	r3, r3, #16
 800348e:	6193      	str	r3, [r2, #24]
 8003490:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_UART_MspInit+0x1b8>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 800349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a6:	2303      	movs	r3, #3
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	482b      	ldr	r0, [pc, #172]	; (8003560 <HAL_UART_MspInit+0x1cc>)
 80034b2:	f000 fe67 	bl	8004184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 80034b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	4619      	mov	r1, r3
 80034ca:	4825      	ldr	r0, [pc, #148]	; (8003560 <HAL_UART_MspInit+0x1cc>)
 80034cc:	f000 fe5a 	bl	8004184 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_UART_MspInit+0x1d0>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	f043 0310 	orr.w	r3, r3, #16
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ee:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_UART_MspInit+0x1d0>)
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_UART_MspInit+0x1d8>)
 80034f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 8003514:	2200      	movs	r2, #0
 8003516:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 800351a:	2200      	movs	r2, #0
 800351c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 8003520:	2200      	movs	r2, #0
 8003522:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003524:	4810      	ldr	r0, [pc, #64]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 8003526:	f000 faed 	bl	8003b04 <HAL_DMA_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003530:	f7ff fd14 	bl	8002f5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <HAL_UART_MspInit+0x1d4>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003540:	bf00      	nop
 8003542:	3730      	adds	r7, #48	; 0x30
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40004400 	.word	0x40004400
 800354c:	40021000 	.word	0x40021000
 8003550:	40010800 	.word	0x40010800
 8003554:	20000904 	.word	0x20000904
 8003558:	4002006c 	.word	0x4002006c
 800355c:	40004800 	.word	0x40004800
 8003560:	40011000 	.word	0x40011000
 8003564:	40010000 	.word	0x40010000
 8003568:	20000948 	.word	0x20000948
 800356c:	40020030 	.word	0x40020030

08003570 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003574:	e7fe      	b.n	8003574 <NMI_Handler+0x4>

08003576 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800357a:	e7fe      	b.n	800357a <HardFault_Handler+0x4>

0800357c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003580:	e7fe      	b.n	8003580 <MemManage_Handler+0x4>

08003582 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8003586:	e7fe      	b.n	8003586 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800358c:	e7fe      	b.n	800358c <UsageFault_Handler+0x4>

0800358e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80035b6:	f000 f97b 	bl	80038b0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <DMA1_Channel3_IRQHandler+0x1c>)
 80035c6:	f7fd fd9b 	bl	8001100 <huansic_jy62_decodePackage>
	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80035ca:	4805      	ldr	r0, [pc, #20]	; (80035e0 <DMA1_Channel3_IRQHandler+0x20>)
 80035cc:	f000 fb70 	bl	8003cb0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <DMA1_Channel3_IRQHandler+0x1c>)
 80035d2:	f7fd ffbf 	bl	8001554 <huansic_jy62_setDMA>
	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000a7c 	.word	0x20000a7c
 80035e0:	20000948 	.word	0x20000948

080035e4 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <DMA1_Channel6_IRQHandler+0x24>)
 80035ea:	7a1b      	ldrb	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 80035f0:	4805      	ldr	r0, [pc, #20]	; (8003608 <DMA1_Channel6_IRQHandler+0x24>)
 80035f2:	f7fe fa41 	bl	8001a78 <huansic_xb_decodeHeader>
 80035f6:	e002      	b.n	80035fe <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 80035f8:	4803      	ldr	r0, [pc, #12]	; (8003608 <DMA1_Channel6_IRQHandler+0x24>)
 80035fa:	f7fe fa7b 	bl	8001af4 <huansic_xb_decodeBody>
	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035fe:	4803      	ldr	r0, [pc, #12]	; (800360c <DMA1_Channel6_IRQHandler+0x28>)
 8003600:	f000 fb56 	bl	8003cb0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000ab4 	.word	0x20000ab4
 800360c:	20000904 	.word	0x20000904

08003610 <TIM6_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt.
 */
void TIM6_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8003614:	4808      	ldr	r0, [pc, #32]	; (8003638 <TIM6_IRQHandler+0x28>)
 8003616:	f7fe f8e5 	bl	80017e4 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 800361a:	4808      	ldr	r0, [pc, #32]	; (800363c <TIM6_IRQHandler+0x2c>)
 800361c:	f7fe f8e2 	bl	80017e4 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8003620:	4807      	ldr	r0, [pc, #28]	; (8003640 <TIM6_IRQHandler+0x30>)
 8003622:	f7fe f8df 	bl	80017e4 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8003626:	4807      	ldr	r0, [pc, #28]	; (8003644 <TIM6_IRQHandler+0x34>)
 8003628:	f7fe f8dc 	bl	80017e4 <huansic_motor_pid>
	/* USER CODE END TIM6_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800362c:	4806      	ldr	r0, [pc, #24]	; (8003648 <TIM6_IRQHandler+0x38>)
 800362e:	f001 ffa7 	bl	8005580 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_IRQn 1 */

	/* USER CODE END TIM6_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000098c 	.word	0x2000098c
 800363c:	200009c8 	.word	0x200009c8
 8003640:	20000a04 	.word	0x20000a04
 8003644:	20000a40 	.word	0x20000a40
 8003648:	200007ec 	.word	0x200007ec

0800364c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
	return 1;
 8003650:	2301      	movs	r3, #1
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <_kill>:

int _kill(int pid, int sig)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003664:	f003 f974 	bl	8006950 <__errno>
 8003668:	4603      	mov	r3, r0
 800366a:	2216      	movs	r2, #22
 800366c:	601a      	str	r2, [r3, #0]
	return -1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_exit>:

void _exit (int status)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003682:	f04f 31ff 	mov.w	r1, #4294967295
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffe7 	bl	800365a <_kill>
	while (1) {}		/* Make sure we hang here */
 800368c:	e7fe      	b.n	800368c <_exit+0x12>

0800368e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e00a      	b.n	80036b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036a0:	f3af 8000 	nop.w
 80036a4:	4601      	mov	r1, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	60ba      	str	r2, [r7, #8]
 80036ac:	b2ca      	uxtb	r2, r1
 80036ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3301      	adds	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	dbf0      	blt.n	80036a0 <_read+0x12>
	}

return len;
 80036be:	687b      	ldr	r3, [r7, #4]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e009      	b.n	80036ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	60ba      	str	r2, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3301      	adds	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	dbf1      	blt.n	80036da <_write+0x12>
	}
	return len;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_close>:

int _close(int file)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	return -1;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003726:	605a      	str	r2, [r3, #4]
	return 0;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <_isatty>:

int _isatty(int file)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	return 1;
 800373c:	2301      	movs	r3, #1
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
	return 0;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <_sbrk+0x5c>)
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <_sbrk+0x60>)
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <_sbrk+0x64>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <_sbrk+0x64>)
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <_sbrk+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <_sbrk+0x64>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	429a      	cmp	r2, r3
 800378e:	d207      	bcs.n	80037a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003790:	f003 f8de 	bl	8006950 <__errno>
 8003794:	4603      	mov	r3, r0
 8003796:	220c      	movs	r2, #12
 8003798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295
 800379e:	e009      	b.n	80037b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <_sbrk+0x64>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a05      	ldr	r2, [pc, #20]	; (80037c4 <_sbrk+0x64>)
 80037b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	2000c000 	.word	0x2000c000
 80037c0:	00000400 	.word	0x00000400
 80037c4:	20000bb0 	.word	0x20000bb0
 80037c8:	20000bc8 	.word	0x20000bc8

080037cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037d8:	480c      	ldr	r0, [pc, #48]	; (800380c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037da:	490d      	ldr	r1, [pc, #52]	; (8003810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037e0:	e002      	b.n	80037e8 <LoopCopyDataInit>

080037e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037e6:	3304      	adds	r3, #4

080037e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037ec:	d3f9      	bcc.n	80037e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037f0:	4c0a      	ldr	r4, [pc, #40]	; (800381c <LoopFillZerobss+0x22>)
  movs r3, #0
 80037f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037f4:	e001      	b.n	80037fa <LoopFillZerobss>

080037f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f8:	3204      	adds	r2, #4

080037fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037fc:	d3fb      	bcc.n	80037f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037fe:	f7ff ffe5 	bl	80037cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003802:	f003 f8bd 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003806:	f7fe fe21 	bl	800244c <main>
  bx lr
 800380a:	4770      	bx	lr
  ldr r0, =_sdata
 800380c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003810:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003814:	08007b3c 	.word	0x08007b3c
  ldr r2, =_sbss
 8003818:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800381c:	20000bc8 	.word	0x20000bc8

08003820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003820:	e7fe      	b.n	8003820 <ADC1_2_IRQHandler>
	...

08003824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_Init+0x28>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <HAL_Init+0x28>)
 800382e:	f043 0310 	orr.w	r3, r3, #16
 8003832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003834:	2003      	movs	r0, #3
 8003836:	f000 f923 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800383a:	200f      	movs	r0, #15
 800383c:	f000 f808 	bl	8003850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003840:	f7ff fb92 	bl	8002f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40022000 	.word	0x40022000

08003850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_InitTick+0x54>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_InitTick+0x58>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4619      	mov	r1, r3
 8003862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003866:	fbb3 f3f1 	udiv	r3, r3, r1
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f93b 	bl	8003aea <HAL_SYSTICK_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00e      	b.n	800389c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b0f      	cmp	r3, #15
 8003882:	d80a      	bhi.n	800389a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003884:	2200      	movs	r2, #0
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	f000 f903 	bl	8003a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <HAL_InitTick+0x5c>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000004 	.word	0x20000004
 80038a8:	2000000c 	.word	0x2000000c
 80038ac:	20000008 	.word	0x20000008

080038b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_IncTick+0x1c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_IncTick+0x20>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_IncTick+0x20>)
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	2000000c 	.word	0x2000000c
 80038d0:	20000bb4 	.word	0x20000bb4

080038d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return uwTick;
 80038d8:	4b02      	ldr	r3, [pc, #8]	; (80038e4 <HAL_GetTick+0x10>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	20000bb4 	.word	0x20000bb4

080038e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003904:	4013      	ands	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	60d3      	str	r3, [r2, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <__NVIC_GetPriorityGrouping+0x18>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	f003 0307 	and.w	r3, r3, #7
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db0b      	blt.n	8003976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	4906      	ldr	r1, [pc, #24]	; (8003980 <__NVIC_EnableIRQ+0x34>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2001      	movs	r0, #1
 800396e:	fa00 f202 	lsl.w	r2, r0, r2
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
         );
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4c:	d301      	bcc.n	8003a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <SysTick_Config+0x40>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f7ff ff90 	bl	8003984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <SysTick_Config+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <SysTick_Config+0x40>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff2d 	bl	80038e8 <__NVIC_SetPriorityGrouping>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa8:	f7ff ff42 	bl	8003930 <__NVIC_GetPriorityGrouping>
 8003aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff90 	bl	80039d8 <NVIC_EncodePriority>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5f 	bl	8003984 <__NVIC_SetPriority>
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff35 	bl	800394c <__NVIC_EnableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ffa2 	bl	8003a3c <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e059      	b.n	8003bce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_DMA_Init+0xd4>)
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d80f      	bhi.n	8003b46 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_DMA_Init+0xd8>)
 8003b2e:	4413      	add	r3, r2
 8003b30:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_DMA_Init+0xdc>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	009a      	lsls	r2, r3, #2
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_DMA_Init+0xe0>)
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b44:	e00e      	b.n	8003b64 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_DMA_Init+0xe4>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a23      	ldr	r2, [pc, #140]	; (8003be0 <HAL_DMA_Init+0xdc>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_DMA_Init+0xe8>)
 8003b62:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	40020407 	.word	0x40020407
 8003bdc:	bffdfff8 	.word	0xbffdfff8
 8003be0:	cccccccd 	.word	0xcccccccd
 8003be4:	40020000 	.word	0x40020000
 8003be8:	bffdfbf8 	.word	0xbffdfbf8
 8003bec:	40020400 	.word	0x40020400

08003bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_DMA_Start_IT+0x20>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e04a      	b.n	8003ca6 <HAL_DMA_Start_IT+0xb6>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d13a      	bne.n	8003c98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fa6e 	bl	8004128 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 020e 	orr.w	r2, r2, #14
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e00f      	b.n	8003c86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0204 	bic.w	r2, r2, #4
 8003c74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 020a 	orr.w	r2, r2, #10
 8003c84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e005      	b.n	8003ca4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2204      	movs	r2, #4
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80f1 	beq.w	8003ebc <HAL_DMA_IRQHandler+0x20c>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80eb 	beq.w	8003ebc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0204 	bic.w	r2, r2, #4
 8003d02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_DMA_IRQHandler+0x1d8>)
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d958      	bls.n	8003dc2 <HAL_DMA_IRQHandler+0x112>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5d      	ldr	r2, [pc, #372]	; (8003e8c <HAL_DMA_IRQHandler+0x1dc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04f      	beq.n	8003dba <HAL_DMA_IRQHandler+0x10a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5c      	ldr	r2, [pc, #368]	; (8003e90 <HAL_DMA_IRQHandler+0x1e0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d048      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x106>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <HAL_DMA_IRQHandler+0x1e4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x100>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a59      	ldr	r2, [pc, #356]	; (8003e98 <HAL_DMA_IRQHandler+0x1e8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d038      	beq.n	8003daa <HAL_DMA_IRQHandler+0xfa>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_DMA_IRQHandler+0x1ec>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d030      	beq.n	8003da4 <HAL_DMA_IRQHandler+0xf4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a56      	ldr	r2, [pc, #344]	; (8003ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d028      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xee>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a4d      	ldr	r2, [pc, #308]	; (8003e88 <HAL_DMA_IRQHandler+0x1d8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d020      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xe8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d019      	beq.n	8003d94 <HAL_DMA_IRQHandler+0xe4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a50      	ldr	r2, [pc, #320]	; (8003ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d012      	beq.n	8003d90 <HAL_DMA_IRQHandler+0xe0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4f      	ldr	r2, [pc, #316]	; (8003eac <HAL_DMA_IRQHandler+0x1fc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00a      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xda>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <HAL_DMA_IRQHandler+0x200>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d102      	bne.n	8003d84 <HAL_DMA_IRQHandler+0xd4>
 8003d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d82:	e01b      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003d84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d88:	e018      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d8e:	e015      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003d90:	2340      	movs	r3, #64	; 0x40
 8003d92:	e013      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003d94:	2304      	movs	r3, #4
 8003d96:	e011      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003d98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d9c:	e00e      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003da2:	e00b      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da8:	e008      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dae:	e005      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db4:	e002      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	e000      	b.n	8003dbc <HAL_DMA_IRQHandler+0x10c>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	4a3d      	ldr	r2, [pc, #244]	; (8003eb4 <HAL_DMA_IRQHandler+0x204>)
 8003dbe:	6053      	str	r3, [r2, #4]
 8003dc0:	e057      	b.n	8003e72 <HAL_DMA_IRQHandler+0x1c2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <HAL_DMA_IRQHandler+0x1dc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04f      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x1bc>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2f      	ldr	r2, [pc, #188]	; (8003e90 <HAL_DMA_IRQHandler+0x1e0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d048      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x1b8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <HAL_DMA_IRQHandler+0x1e4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x1b2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <HAL_DMA_IRQHandler+0x1e8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d038      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x1ac>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_DMA_IRQHandler+0x1ec>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d030      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x1a6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d028      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x1a0>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <HAL_DMA_IRQHandler+0x1d8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d020      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x19a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d019      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x196>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d012      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x192>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_DMA_IRQHandler+0x1fc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00a      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x18c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_DMA_IRQHandler+0x200>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d102      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x186>
 8003e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e34:	e01b      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e3a:	e018      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e40:	e015      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e42:	2340      	movs	r3, #64	; 0x40
 8003e44:	e013      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e46:	2304      	movs	r3, #4
 8003e48:	e011      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e4e:	e00e      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e54:	e00b      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e5a:	e008      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e60:	e005      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e66:	e002      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	e000      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1be>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_DMA_IRQHandler+0x208>)
 8003e70:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8136 	beq.w	80040e8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e84:	e130      	b.n	80040e8 <HAL_DMA_IRQHandler+0x438>
 8003e86:	bf00      	nop
 8003e88:	40020080 	.word	0x40020080
 8003e8c:	40020008 	.word	0x40020008
 8003e90:	4002001c 	.word	0x4002001c
 8003e94:	40020030 	.word	0x40020030
 8003e98:	40020044 	.word	0x40020044
 8003e9c:	40020058 	.word	0x40020058
 8003ea0:	4002006c 	.word	0x4002006c
 8003ea4:	40020408 	.word	0x40020408
 8003ea8:	4002041c 	.word	0x4002041c
 8003eac:	40020430 	.word	0x40020430
 8003eb0:	40020444 	.word	0x40020444
 8003eb4:	40020400 	.word	0x40020400
 8003eb8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80dd 	beq.w	8004088 <HAL_DMA_IRQHandler+0x3d8>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80d7 	beq.w	8004088 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 020a 	bic.w	r2, r2, #10
 8003ef6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <HAL_DMA_IRQHandler+0x444>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d958      	bls.n	8003fbe <HAL_DMA_IRQHandler+0x30e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a79      	ldr	r2, [pc, #484]	; (80040f8 <HAL_DMA_IRQHandler+0x448>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d04f      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x306>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a78      	ldr	r2, [pc, #480]	; (80040fc <HAL_DMA_IRQHandler+0x44c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d048      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x302>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a76      	ldr	r2, [pc, #472]	; (8004100 <HAL_DMA_IRQHandler+0x450>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d040      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2fc>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a75      	ldr	r2, [pc, #468]	; (8004104 <HAL_DMA_IRQHandler+0x454>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d038      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x2f6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a73      	ldr	r2, [pc, #460]	; (8004108 <HAL_DMA_IRQHandler+0x458>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d030      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x2f0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a72      	ldr	r2, [pc, #456]	; (800410c <HAL_DMA_IRQHandler+0x45c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d028      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x2ea>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a69      	ldr	r2, [pc, #420]	; (80040f4 <HAL_DMA_IRQHandler+0x444>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d020      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x2e4>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6e      	ldr	r2, [pc, #440]	; (8004110 <HAL_DMA_IRQHandler+0x460>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d019      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x2e0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_DMA_IRQHandler+0x464>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d012      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x2dc>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6b      	ldr	r2, [pc, #428]	; (8004118 <HAL_DMA_IRQHandler+0x468>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00a      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2d6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a69      	ldr	r2, [pc, #420]	; (800411c <HAL_DMA_IRQHandler+0x46c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d102      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x2d0>
 8003f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f7e:	e01b      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f84:	e018      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f8a:	e015      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e013      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e011      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f98:	e00e      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003f9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f9e:	e00b      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fa4:	e008      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003faa:	e005      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb0:	e002      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x308>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	4a59      	ldr	r2, [pc, #356]	; (8004120 <HAL_DMA_IRQHandler+0x470>)
 8003fba:	6053      	str	r3, [r2, #4]
 8003fbc:	e057      	b.n	800406e <HAL_DMA_IRQHandler+0x3be>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a4d      	ldr	r2, [pc, #308]	; (80040f8 <HAL_DMA_IRQHandler+0x448>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04f      	beq.n	8004068 <HAL_DMA_IRQHandler+0x3b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a4b      	ldr	r2, [pc, #300]	; (80040fc <HAL_DMA_IRQHandler+0x44c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d048      	beq.n	8004064 <HAL_DMA_IRQHandler+0x3b4>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <HAL_DMA_IRQHandler+0x450>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d040      	beq.n	800405e <HAL_DMA_IRQHandler+0x3ae>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a48      	ldr	r2, [pc, #288]	; (8004104 <HAL_DMA_IRQHandler+0x454>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d038      	beq.n	8004058 <HAL_DMA_IRQHandler+0x3a8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a47      	ldr	r2, [pc, #284]	; (8004108 <HAL_DMA_IRQHandler+0x458>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d030      	beq.n	8004052 <HAL_DMA_IRQHandler+0x3a2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a45      	ldr	r2, [pc, #276]	; (800410c <HAL_DMA_IRQHandler+0x45c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d028      	beq.n	800404c <HAL_DMA_IRQHandler+0x39c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3d      	ldr	r2, [pc, #244]	; (80040f4 <HAL_DMA_IRQHandler+0x444>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d020      	beq.n	8004046 <HAL_DMA_IRQHandler+0x396>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a41      	ldr	r2, [pc, #260]	; (8004110 <HAL_DMA_IRQHandler+0x460>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d019      	beq.n	8004042 <HAL_DMA_IRQHandler+0x392>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a40      	ldr	r2, [pc, #256]	; (8004114 <HAL_DMA_IRQHandler+0x464>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d012      	beq.n	800403e <HAL_DMA_IRQHandler+0x38e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3e      	ldr	r2, [pc, #248]	; (8004118 <HAL_DMA_IRQHandler+0x468>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00a      	beq.n	8004038 <HAL_DMA_IRQHandler+0x388>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3d      	ldr	r2, [pc, #244]	; (800411c <HAL_DMA_IRQHandler+0x46c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d102      	bne.n	8004032 <HAL_DMA_IRQHandler+0x382>
 800402c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004030:	e01b      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004036:	e018      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800403c:	e015      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 800403e:	2320      	movs	r3, #32
 8004040:	e013      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004042:	2302      	movs	r3, #2
 8004044:	e011      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404a:	e00e      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 800404c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004050:	e00b      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004056:	e008      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800405c:	e005      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 800405e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004062:	e002      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004064:	2320      	movs	r3, #32
 8004066:	e000      	b.n	800406a <HAL_DMA_IRQHandler+0x3ba>
 8004068:	2302      	movs	r3, #2
 800406a:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <HAL_DMA_IRQHandler+0x474>)
 800406c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d034      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004086:	e02f      	b.n	80040e8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2208      	movs	r2, #8
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d028      	beq.n	80040ea <HAL_DMA_IRQHandler+0x43a>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d023      	beq.n	80040ea <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 020e 	bic.w	r2, r2, #14
 80040b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
    }
  }
  return;
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
}
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40020080 	.word	0x40020080
 80040f8:	40020008 	.word	0x40020008
 80040fc:	4002001c 	.word	0x4002001c
 8004100:	40020030 	.word	0x40020030
 8004104:	40020044 	.word	0x40020044
 8004108:	40020058 	.word	0x40020058
 800410c:	4002006c 	.word	0x4002006c
 8004110:	40020408 	.word	0x40020408
 8004114:	4002041c 	.word	0x4002041c
 8004118:	40020430 	.word	0x40020430
 800411c:	40020444 	.word	0x40020444
 8004120:	40020400 	.word	0x40020400
 8004124:	40020000 	.word	0x40020000

08004128 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2101      	movs	r1, #1
 8004140:	fa01 f202 	lsl.w	r2, r1, r2
 8004144:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b10      	cmp	r3, #16
 8004154:	d108      	bne.n	8004168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004166:	e007      	b.n	8004178 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
	...

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b08b      	sub	sp, #44	; 0x2c
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004196:	e179      	b.n	800448c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004198:	2201      	movs	r2, #1
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f040 8168 	bne.w	8004486 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4a96      	ldr	r2, [pc, #600]	; (8004414 <HAL_GPIO_Init+0x290>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d05e      	beq.n	800427e <HAL_GPIO_Init+0xfa>
 80041c0:	4a94      	ldr	r2, [pc, #592]	; (8004414 <HAL_GPIO_Init+0x290>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d875      	bhi.n	80042b2 <HAL_GPIO_Init+0x12e>
 80041c6:	4a94      	ldr	r2, [pc, #592]	; (8004418 <HAL_GPIO_Init+0x294>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d058      	beq.n	800427e <HAL_GPIO_Init+0xfa>
 80041cc:	4a92      	ldr	r2, [pc, #584]	; (8004418 <HAL_GPIO_Init+0x294>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d86f      	bhi.n	80042b2 <HAL_GPIO_Init+0x12e>
 80041d2:	4a92      	ldr	r2, [pc, #584]	; (800441c <HAL_GPIO_Init+0x298>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d052      	beq.n	800427e <HAL_GPIO_Init+0xfa>
 80041d8:	4a90      	ldr	r2, [pc, #576]	; (800441c <HAL_GPIO_Init+0x298>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d869      	bhi.n	80042b2 <HAL_GPIO_Init+0x12e>
 80041de:	4a90      	ldr	r2, [pc, #576]	; (8004420 <HAL_GPIO_Init+0x29c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d04c      	beq.n	800427e <HAL_GPIO_Init+0xfa>
 80041e4:	4a8e      	ldr	r2, [pc, #568]	; (8004420 <HAL_GPIO_Init+0x29c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d863      	bhi.n	80042b2 <HAL_GPIO_Init+0x12e>
 80041ea:	4a8e      	ldr	r2, [pc, #568]	; (8004424 <HAL_GPIO_Init+0x2a0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d046      	beq.n	800427e <HAL_GPIO_Init+0xfa>
 80041f0:	4a8c      	ldr	r2, [pc, #560]	; (8004424 <HAL_GPIO_Init+0x2a0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d85d      	bhi.n	80042b2 <HAL_GPIO_Init+0x12e>
 80041f6:	2b12      	cmp	r3, #18
 80041f8:	d82a      	bhi.n	8004250 <HAL_GPIO_Init+0xcc>
 80041fa:	2b12      	cmp	r3, #18
 80041fc:	d859      	bhi.n	80042b2 <HAL_GPIO_Init+0x12e>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <HAL_GPIO_Init+0x80>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	0800427f 	.word	0x0800427f
 8004208:	08004259 	.word	0x08004259
 800420c:	0800426b 	.word	0x0800426b
 8004210:	080042ad 	.word	0x080042ad
 8004214:	080042b3 	.word	0x080042b3
 8004218:	080042b3 	.word	0x080042b3
 800421c:	080042b3 	.word	0x080042b3
 8004220:	080042b3 	.word	0x080042b3
 8004224:	080042b3 	.word	0x080042b3
 8004228:	080042b3 	.word	0x080042b3
 800422c:	080042b3 	.word	0x080042b3
 8004230:	080042b3 	.word	0x080042b3
 8004234:	080042b3 	.word	0x080042b3
 8004238:	080042b3 	.word	0x080042b3
 800423c:	080042b3 	.word	0x080042b3
 8004240:	080042b3 	.word	0x080042b3
 8004244:	080042b3 	.word	0x080042b3
 8004248:	08004261 	.word	0x08004261
 800424c:	08004275 	.word	0x08004275
 8004250:	4a75      	ldr	r2, [pc, #468]	; (8004428 <HAL_GPIO_Init+0x2a4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004256:	e02c      	b.n	80042b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	623b      	str	r3, [r7, #32]
          break;
 800425e:	e029      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	3304      	adds	r3, #4
 8004266:	623b      	str	r3, [r7, #32]
          break;
 8004268:	e024      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	3308      	adds	r3, #8
 8004270:	623b      	str	r3, [r7, #32]
          break;
 8004272:	e01f      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	330c      	adds	r3, #12
 800427a:	623b      	str	r3, [r7, #32]
          break;
 800427c:	e01a      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004286:	2304      	movs	r3, #4
 8004288:	623b      	str	r3, [r7, #32]
          break;
 800428a:	e013      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004294:	2308      	movs	r3, #8
 8004296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	611a      	str	r2, [r3, #16]
          break;
 800429e:	e009      	b.n	80042b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042a0:	2308      	movs	r3, #8
 80042a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	615a      	str	r2, [r3, #20]
          break;
 80042aa:	e003      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042ac:	2300      	movs	r3, #0
 80042ae:	623b      	str	r3, [r7, #32]
          break;
 80042b0:	e000      	b.n	80042b4 <HAL_GPIO_Init+0x130>
          break;
 80042b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	d801      	bhi.n	80042be <HAL_GPIO_Init+0x13a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	e001      	b.n	80042c2 <HAL_GPIO_Init+0x13e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2bff      	cmp	r3, #255	; 0xff
 80042c8:	d802      	bhi.n	80042d0 <HAL_GPIO_Init+0x14c>
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	e002      	b.n	80042d6 <HAL_GPIO_Init+0x152>
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	3b08      	subs	r3, #8
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	210f      	movs	r1, #15
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	431a      	orrs	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80c1 	beq.w	8004486 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004304:	4b49      	ldr	r3, [pc, #292]	; (800442c <HAL_GPIO_Init+0x2a8>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4a48      	ldr	r2, [pc, #288]	; (800442c <HAL_GPIO_Init+0x2a8>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6193      	str	r3, [r2, #24]
 8004310:	4b46      	ldr	r3, [pc, #280]	; (800442c <HAL_GPIO_Init+0x2a8>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800431c:	4a44      	ldr	r2, [pc, #272]	; (8004430 <HAL_GPIO_Init+0x2ac>)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	3302      	adds	r3, #2
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <HAL_GPIO_Init+0x2b0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d01f      	beq.n	8004388 <HAL_GPIO_Init+0x204>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <HAL_GPIO_Init+0x2b4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d019      	beq.n	8004384 <HAL_GPIO_Init+0x200>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3a      	ldr	r2, [pc, #232]	; (800443c <HAL_GPIO_Init+0x2b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <HAL_GPIO_Init+0x1fc>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a39      	ldr	r2, [pc, #228]	; (8004440 <HAL_GPIO_Init+0x2bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00d      	beq.n	800437c <HAL_GPIO_Init+0x1f8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a38      	ldr	r2, [pc, #224]	; (8004444 <HAL_GPIO_Init+0x2c0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <HAL_GPIO_Init+0x1f4>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a37      	ldr	r2, [pc, #220]	; (8004448 <HAL_GPIO_Init+0x2c4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d101      	bne.n	8004374 <HAL_GPIO_Init+0x1f0>
 8004370:	2305      	movs	r3, #5
 8004372:	e00a      	b.n	800438a <HAL_GPIO_Init+0x206>
 8004374:	2306      	movs	r3, #6
 8004376:	e008      	b.n	800438a <HAL_GPIO_Init+0x206>
 8004378:	2304      	movs	r3, #4
 800437a:	e006      	b.n	800438a <HAL_GPIO_Init+0x206>
 800437c:	2303      	movs	r3, #3
 800437e:	e004      	b.n	800438a <HAL_GPIO_Init+0x206>
 8004380:	2302      	movs	r3, #2
 8004382:	e002      	b.n	800438a <HAL_GPIO_Init+0x206>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_GPIO_Init+0x206>
 8004388:	2300      	movs	r3, #0
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	f002 0203 	and.w	r2, r2, #3
 8004390:	0092      	lsls	r2, r2, #2
 8004392:	4093      	lsls	r3, r2
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800439a:	4925      	ldr	r1, [pc, #148]	; (8004430 <HAL_GPIO_Init+0x2ac>)
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3302      	adds	r3, #2
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4924      	ldr	r1, [pc, #144]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
 80043c0:	e006      	b.n	80043d0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	4920      	ldr	r1, [pc, #128]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	491a      	ldr	r1, [pc, #104]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	e006      	b.n	80043f8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_GPIO_Init+0x2c8>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d025      	beq.n	8004450 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_GPIO_Init+0x2c8>)
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	4910      	ldr	r1, [pc, #64]	; (800444c <HAL_GPIO_Init+0x2c8>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
 8004410:	e025      	b.n	800445e <HAL_GPIO_Init+0x2da>
 8004412:	bf00      	nop
 8004414:	10320000 	.word	0x10320000
 8004418:	10310000 	.word	0x10310000
 800441c:	10220000 	.word	0x10220000
 8004420:	10210000 	.word	0x10210000
 8004424:	10120000 	.word	0x10120000
 8004428:	10110000 	.word	0x10110000
 800442c:	40021000 	.word	0x40021000
 8004430:	40010000 	.word	0x40010000
 8004434:	40010800 	.word	0x40010800
 8004438:	40010c00 	.word	0x40010c00
 800443c:	40011000 	.word	0x40011000
 8004440:	40011400 	.word	0x40011400
 8004444:	40011800 	.word	0x40011800
 8004448:	40011c00 	.word	0x40011c00
 800444c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <HAL_GPIO_Init+0x324>)
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	43db      	mvns	r3, r3
 8004458:	4913      	ldr	r1, [pc, #76]	; (80044a8 <HAL_GPIO_Init+0x324>)
 800445a:	4013      	ands	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d006      	beq.n	8004478 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_GPIO_Init+0x324>)
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	490e      	ldr	r1, [pc, #56]	; (80044a8 <HAL_GPIO_Init+0x324>)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	60cb      	str	r3, [r1, #12]
 8004476:	e006      	b.n	8004486 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_GPIO_Init+0x324>)
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	43db      	mvns	r3, r3
 8004480:	4909      	ldr	r1, [pc, #36]	; (80044a8 <HAL_GPIO_Init+0x324>)
 8004482:	4013      	ands	r3, r2
 8004484:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	3301      	adds	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	f47f ae7e 	bne.w	8004198 <HAL_GPIO_Init+0x14>
  }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	372c      	adds	r7, #44	; 0x2c
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
 80044b8:	4613      	mov	r3, r2
 80044ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044bc:	787b      	ldrb	r3, [r7, #1]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c2:	887a      	ldrh	r2, [r7, #2]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044c8:	e003      	b.n	80044d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ca:	887b      	ldrh	r3, [r7, #2]
 80044cc:	041a      	lsls	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	611a      	str	r2, [r3, #16]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e12b      	b.n	8004746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe fd62 	bl	8002fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004540:	f000 fce6 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a81      	ldr	r2, [pc, #516]	; (8004750 <HAL_I2C_Init+0x274>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d807      	bhi.n	8004560 <HAL_I2C_Init+0x84>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a80      	ldr	r2, [pc, #512]	; (8004754 <HAL_I2C_Init+0x278>)
 8004554:	4293      	cmp	r3, r2
 8004556:	bf94      	ite	ls
 8004558:	2301      	movls	r3, #1
 800455a:	2300      	movhi	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e006      	b.n	800456e <HAL_I2C_Init+0x92>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a7d      	ldr	r2, [pc, #500]	; (8004758 <HAL_I2C_Init+0x27c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	bf94      	ite	ls
 8004568:	2301      	movls	r3, #1
 800456a:	2300      	movhi	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0e7      	b.n	8004746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a78      	ldr	r2, [pc, #480]	; (800475c <HAL_I2C_Init+0x280>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0c9b      	lsrs	r3, r3, #18
 8004580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a6a      	ldr	r2, [pc, #424]	; (8004750 <HAL_I2C_Init+0x274>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d802      	bhi.n	80045b0 <HAL_I2C_Init+0xd4>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3301      	adds	r3, #1
 80045ae:	e009      	b.n	80045c4 <HAL_I2C_Init+0xe8>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	4a69      	ldr	r2, [pc, #420]	; (8004760 <HAL_I2C_Init+0x284>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	3301      	adds	r3, #1
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	495c      	ldr	r1, [pc, #368]	; (8004750 <HAL_I2C_Init+0x274>)
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d819      	bhi.n	8004618 <HAL_I2C_Init+0x13c>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1e59      	subs	r1, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045f8:	400b      	ands	r3, r1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_I2C_Init+0x138>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1e59      	subs	r1, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fbb1 f3f3 	udiv	r3, r1, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004612:	e051      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004614:	2304      	movs	r3, #4
 8004616:	e04f      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <HAL_I2C_Init+0x168>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	440b      	add	r3, r1
 800462e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004632:	3301      	adds	r3, #1
 8004634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e012      	b.n	800466a <HAL_I2C_Init+0x18e>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	0099      	lsls	r1, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Init+0x196>
 800466e:	2301      	movs	r3, #1
 8004670:	e022      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10e      	bne.n	8004698 <HAL_I2C_Init+0x1bc>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1e58      	subs	r0, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	440b      	add	r3, r1
 8004688:	fbb0 f3f3 	udiv	r3, r0, r3
 800468c:	3301      	adds	r3, #1
 800468e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	e00f      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	6809      	ldr	r1, [r1, #0]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6911      	ldr	r1, [r2, #16]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68d2      	ldr	r2, [r2, #12]
 80046f2:	4311      	orrs	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	000186a0 	.word	0x000186a0
 8004754:	001e847f 	.word	0x001e847f
 8004758:	003d08ff 	.word	0x003d08ff
 800475c:	431bde83 	.word	0x431bde83
 8004760:	10624dd3 	.word	0x10624dd3

08004764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e272      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8087 	beq.w	8004892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004784:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b04      	cmp	r3, #4
 800478e:	d00c      	beq.n	80047aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004790:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b08      	cmp	r3, #8
 800479a:	d112      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5e>
 800479c:	4b8c      	ldr	r3, [pc, #560]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a8:	d10b      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047aa:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d06c      	beq.n	8004890 <HAL_RCC_OscConfig+0x12c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d168      	bne.n	8004890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e24c      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0x76>
 80047cc:	4b80      	ldr	r3, [pc, #512]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a7f      	ldr	r2, [pc, #508]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e02e      	b.n	8004838 <HAL_RCC_OscConfig+0xd4>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0x98>
 80047e2:	4b7b      	ldr	r3, [pc, #492]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7a      	ldr	r2, [pc, #488]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b78      	ldr	r3, [pc, #480]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a77      	ldr	r2, [pc, #476]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xd4>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0xbc>
 8004806:	4b72      	ldr	r3, [pc, #456]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a71      	ldr	r2, [pc, #452]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b6f      	ldr	r3, [pc, #444]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6e      	ldr	r2, [pc, #440]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xd4>
 8004820:	4b6b      	ldr	r3, [pc, #428]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6a      	ldr	r2, [pc, #424]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b68      	ldr	r3, [pc, #416]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a67      	ldr	r2, [pc, #412]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7ff f848 	bl	80038d4 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7ff f844 	bl	80038d4 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e200      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b5d      	ldr	r3, [pc, #372]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xe4>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7ff f834 	bl	80038d4 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004870:	f7ff f830 	bl	80038d4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1ec      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x10c>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d063      	beq.n	8004966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048aa:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x18c>
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x176>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1c0      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4939      	ldr	r1, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCC_OscConfig+0x270>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fe ffe9 	bl	80038d4 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004906:	f7fe ffe5 	bl	80038d4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1a1      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4927      	ldr	r1, [pc, #156]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <HAL_RCC_OscConfig+0x270>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe ffc8 	bl	80038d4 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004948:	f7fe ffc4 	bl	80038d4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e180      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d03a      	beq.n	80049e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d019      	beq.n	80049ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_RCC_OscConfig+0x274>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fe ffa8 	bl	80038d4 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7fe ffa4 	bl	80038d4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e160      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049a6:	2001      	movs	r0, #1
 80049a8:	f000 fada 	bl	8004f60 <RCC_Delay>
 80049ac:	e01c      	b.n	80049e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <HAL_RCC_OscConfig+0x274>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b4:	f7fe ff8e 	bl	80038d4 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ba:	e00f      	b.n	80049dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fe ff8a 	bl	80038d4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d908      	bls.n	80049dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e146      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	42420000 	.word	0x42420000
 80049d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	4b92      	ldr	r3, [pc, #584]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e9      	bne.n	80049bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a6 	beq.w	8004b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fa:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4a87      	ldr	r2, [pc, #540]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	61d3      	str	r3, [r2, #28]
 8004a12:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a22:	4b82      	ldr	r3, [pc, #520]	; (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d118      	bne.n	8004a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2e:	4b7f      	ldr	r3, [pc, #508]	; (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7e      	ldr	r2, [pc, #504]	; (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3a:	f7fe ff4b 	bl	80038d4 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a42:	f7fe ff47 	bl	80038d4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e103      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a54:	4b75      	ldr	r3, [pc, #468]	; (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x312>
 8004a68:	4b6f      	ldr	r3, [pc, #444]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a6e      	ldr	r2, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	e02d      	b.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x334>
 8004a7e:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a69      	ldr	r2, [pc, #420]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6213      	str	r3, [r2, #32]
 8004a8a:	4b67      	ldr	r3, [pc, #412]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4a66      	ldr	r2, [pc, #408]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	6213      	str	r3, [r2, #32]
 8004a96:	e01c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b05      	cmp	r3, #5
 8004a9e:	d10c      	bne.n	8004aba <HAL_RCC_OscConfig+0x356>
 8004aa0:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4a60      	ldr	r2, [pc, #384]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	6213      	str	r3, [r2, #32]
 8004aac:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6213      	str	r3, [r2, #32]
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004aba:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4a5a      	ldr	r2, [pc, #360]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	6213      	str	r3, [r2, #32]
 8004ac6:	4b58      	ldr	r3, [pc, #352]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4a57      	ldr	r2, [pc, #348]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d015      	beq.n	8004b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fe fefb 	bl	80038d4 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fe fef7 	bl	80038d4 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0b1      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af8:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ee      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x37e>
 8004b04:	e014      	b.n	8004b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b06:	f7fe fee5 	bl	80038d4 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0e:	f7fe fee1 	bl	80038d4 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e09b      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b24:	4b40      	ldr	r3, [pc, #256]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ee      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b36:	4b3c      	ldr	r3, [pc, #240]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4a3b      	ldr	r2, [pc, #236]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8087 	beq.w	8004c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4c:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 030c 	and.w	r3, r3, #12
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d061      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d146      	bne.n	8004bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b60:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <HAL_RCC_OscConfig+0x4cc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fe feb5 	bl	80038d4 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fe feb1 	bl	80038d4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e06d      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b80:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d108      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4921      	ldr	r1, [pc, #132]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba8:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a19      	ldr	r1, [r3, #32]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	491b      	ldr	r1, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_RCC_OscConfig+0x4cc>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fe85 	bl	80038d4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fe fe81 	bl	80038d4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e03d      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x46a>
 8004bec:	e035      	b.n	8004c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_RCC_OscConfig+0x4cc>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fe6e 	bl	80038d4 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe fe6a 	bl	80038d4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e026      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x498>
 8004c1a:	e01e      	b.n	8004c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e019      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_OscConfig+0x500>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d001      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0d0      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b6a      	ldr	r3, [pc, #424]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d910      	bls.n	8004cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b67      	ldr	r3, [pc, #412]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0207 	bic.w	r2, r3, #7
 8004c92:	4965      	ldr	r1, [pc, #404]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cdc:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b50      	ldr	r3, [pc, #320]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	494d      	ldr	r1, [pc, #308]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d040      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d115      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b41      	ldr	r3, [pc, #260]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e073      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e06b      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4936      	ldr	r1, [pc, #216]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fe fdbc 	bl	80038d4 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fe fdb8 	bl	80038d4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e053      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d210      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 0207 	bic.w	r2, r3, #7
 8004d9e:	4922      	ldr	r1, [pc, #136]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4916      	ldr	r1, [pc, #88]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	490e      	ldr	r1, [pc, #56]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004df6:	f000 f821 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	490a      	ldr	r1, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e08:	5ccb      	ldrb	r3, [r1, r3]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCC_ClockConfig+0x1cc>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x1d0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fd1a 	bl	8003850 <HAL_InitTick>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40022000 	.word	0x40022000
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	08007a48 	.word	0x08007a48
 8004e34:	20000004 	.word	0x20000004
 8004e38:	20000008 	.word	0x20000008

08004e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	b490      	push	{r4, r7}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e42:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004e44:	1d3c      	adds	r4, r7, #4
 8004e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e4c:	f240 2301 	movw	r3, #513	; 0x201
 8004e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e66:	4b21      	ldr	r3, [pc, #132]	; (8004eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d002      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0x40>
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d003      	beq.n	8004e82 <HAL_RCC_GetSysClockFreq+0x46>
 8004e7a:	e02b      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e7e:	623b      	str	r3, [r7, #32]
      break;
 8004e80:	e02b      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	0c9b      	lsrs	r3, r3, #18
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	3328      	adds	r3, #40	; 0x28
 8004e8c:	443b      	add	r3, r7
 8004e8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0c5b      	lsrs	r3, r3, #17
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	3328      	adds	r3, #40	; 0x28
 8004eaa:	443b      	add	r3, r7
 8004eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004eb6:	fb03 f202 	mul.w	r2, r3, r2
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec2:	e004      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4a0b      	ldr	r2, [pc, #44]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	623b      	str	r3, [r7, #32]
      break;
 8004ed2:	e002      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ed4:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ed6:	623b      	str	r3, [r7, #32]
      break;
 8004ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eda:	6a3b      	ldr	r3, [r7, #32]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3728      	adds	r7, #40	; 0x28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc90      	pop	{r4, r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	08007a24 	.word	0x08007a24
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	00f42400 	.word	0x00f42400
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	007a1200 	.word	0x007a1200

08004efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f00:	4b02      	ldr	r3, [pc, #8]	; (8004f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	20000004 	.word	0x20000004

08004f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f14:	f7ff fff2 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4903      	ldr	r1, [pc, #12]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f26:	5ccb      	ldrb	r3, [r1, r3]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	08007a58 	.word	0x08007a58

08004f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f3c:	f7ff ffde 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	0adb      	lsrs	r3, r3, #11
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4903      	ldr	r1, [pc, #12]	; (8004f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	08007a58 	.word	0x08007a58

08004f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <RCC_Delay+0x34>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <RCC_Delay+0x38>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	0a5b      	lsrs	r3, r3, #9
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f7c:	bf00      	nop
  }
  while (Delay --);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	60fa      	str	r2, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f9      	bne.n	8004f7c <RCC_Delay+0x1c>
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	20000004 	.word	0x20000004
 8004f98:	10624dd3 	.word	0x10624dd3

08004f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e041      	b.n	8005032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fe f852 	bl	800306c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fd88 	bl	8005af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e044      	b.n	80050de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <HAL_TIM_Base_Start_IT+0xac>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <HAL_TIM_Base_Start_IT+0xb0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d00e      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <HAL_TIM_Base_Start_IT+0xbc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d111      	bne.n	80050cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d010      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	e007      	b.n	80050dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00

080050fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e041      	b.n	8005192 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f839 	bl	800519a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fcd8 	bl	8005af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_TIM_PWM_Start+0x24>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e022      	b.n	8005216 <HAL_TIM_PWM_Start+0x6a>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d109      	bne.n	80051ea <HAL_TIM_PWM_Start+0x3e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e015      	b.n	8005216 <HAL_TIM_PWM_Start+0x6a>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d109      	bne.n	8005204 <HAL_TIM_PWM_Start+0x58>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e008      	b.n	8005216 <HAL_TIM_PWM_Start+0x6a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e072      	b.n	8005304 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <HAL_TIM_PWM_Start+0x82>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800522c:	e013      	b.n	8005256 <HAL_TIM_PWM_Start+0xaa>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b04      	cmp	r3, #4
 8005232:	d104      	bne.n	800523e <HAL_TIM_PWM_Start+0x92>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	e00b      	b.n	8005256 <HAL_TIM_PWM_Start+0xaa>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d104      	bne.n	800524e <HAL_TIM_PWM_Start+0xa2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524c:	e003      	b.n	8005256 <HAL_TIM_PWM_Start+0xaa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2201      	movs	r2, #1
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ff02 	bl	8006068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <HAL_TIM_PWM_Start+0x160>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIM_PWM_Start+0xcc>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a27      	ldr	r2, [pc, #156]	; (8005310 <HAL_TIM_PWM_Start+0x164>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_TIM_PWM_Start+0xd0>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_TIM_PWM_Start+0xd2>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <HAL_TIM_PWM_Start+0x160>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_TIM_PWM_Start+0x122>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <HAL_TIM_PWM_Start+0x164>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_TIM_PWM_Start+0x122>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d00e      	beq.n	80052ce <HAL_TIM_PWM_Start+0x122>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_TIM_PWM_Start+0x168>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIM_PWM_Start+0x122>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a16      	ldr	r2, [pc, #88]	; (8005318 <HAL_TIM_PWM_Start+0x16c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_PWM_Start+0x122>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a14      	ldr	r2, [pc, #80]	; (800531c <HAL_TIM_PWM_Start+0x170>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d111      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b06      	cmp	r3, #6
 80052de:	d010      	beq.n	8005302 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	e007      	b.n	8005302 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00

08005320 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e093      	b.n	800545c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fd fedd 	bl	8003108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f000 fbbb 	bl	8005af0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	4313      	orrs	r3, r2
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053c0:	f023 030c 	bic.w	r3, r3, #12
 80053c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	4313      	orrs	r3, r2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	011a      	lsls	r2, r3, #4
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	4313      	orrs	r3, r2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4313      	orrs	r3, r2
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005474:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800547c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005484:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800548c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d110      	bne.n	80054b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800549a:	7b7b      	ldrb	r3, [r7, #13]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d001      	beq.n	80054a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e069      	b.n	8005578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b4:	e031      	b.n	800551a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d110      	bne.n	80054de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054c2:	7b3b      	ldrb	r3, [r7, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e055      	b.n	8005578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054dc:	e01d      	b.n	800551a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d108      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d102      	bne.n	80054f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054f0:	7b3b      	ldrb	r3, [r7, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e03e      	b.n	8005578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_TIM_Encoder_Start+0xc4>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b04      	cmp	r3, #4
 8005524:	d008      	beq.n	8005538 <HAL_TIM_Encoder_Start+0xd4>
 8005526:	e00f      	b.n	8005548 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fd99 	bl	8006068 <TIM_CCxChannelCmd>
      break;
 8005536:	e016      	b.n	8005566 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	2104      	movs	r1, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fd91 	bl	8006068 <TIM_CCxChannelCmd>
      break;
 8005546:	e00e      	b.n	8005566 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2201      	movs	r2, #1
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fd89 	bl	8006068 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2201      	movs	r2, #1
 800555c:	2104      	movs	r1, #4
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fd82 	bl	8006068 <TIM_CCxChannelCmd>
      break;
 8005564:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d122      	bne.n	80055dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0202 	mvn.w	r2, #2
 80055ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa78 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa6b 	bl	8005aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa7a 	bl	8005aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d122      	bne.n	8005630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d11b      	bne.n	8005630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0204 	mvn.w	r2, #4
 8005600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa4e 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 800561c:	e005      	b.n	800562a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa41 	bl	8005aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa50 	bl	8005aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b08      	cmp	r3, #8
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0208 	mvn.w	r2, #8
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2204      	movs	r2, #4
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa24 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa17 	bl	8005aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa26 	bl	8005aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b10      	cmp	r3, #16
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b10      	cmp	r3, #16
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0210 	mvn.w	r2, #16
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2208      	movs	r2, #8
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f9fa 	bl	8005ab8 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9ed 	bl	8005aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f9fc 	bl	8005aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0201 	mvn.w	r2, #1
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9c8 	bl	8005a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fd86 	bl	800623c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9c0 	bl	8005adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b20      	cmp	r3, #32
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0220 	mvn.w	r2, #32
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fd51 	bl	800622a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e0ac      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x174>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	f200 809f 	bhi.w	80058f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	080058f9 	.word	0x080058f9
 80057c8:	080058f9 	.word	0x080058f9
 80057cc:	080058f9 	.word	0x080058f9
 80057d0:	08005835 	.word	0x08005835
 80057d4:	080058f9 	.word	0x080058f9
 80057d8:	080058f9 	.word	0x080058f9
 80057dc:	080058f9 	.word	0x080058f9
 80057e0:	08005877 	.word	0x08005877
 80057e4:	080058f9 	.word	0x080058f9
 80057e8:	080058f9 	.word	0x080058f9
 80057ec:	080058f9 	.word	0x080058f9
 80057f0:	080058b7 	.word	0x080058b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f9f2 	bl	8005be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6999      	ldr	r1, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	619a      	str	r2, [r3, #24]
      break;
 8005832:	e062      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fa42 	bl	8005cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800584e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	021a      	lsls	r2, r3, #8
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	619a      	str	r2, [r3, #24]
      break;
 8005874:	e041      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fa95 	bl	8005dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0208 	orr.w	r2, r2, #8
 8005890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0204 	bic.w	r2, r2, #4
 80058a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69d9      	ldr	r1, [r3, #28]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	61da      	str	r2, [r3, #28]
      break;
 80058b4:	e021      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fae9 	bl	8005e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	021a      	lsls	r2, r3, #8
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	61da      	str	r2, [r3, #28]
      break;
 80058f6:	e000      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80058f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIM_ConfigClockSource+0x18>
 8005920:	2302      	movs	r3, #2
 8005922:	e0b3      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x180>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595c:	d03e      	beq.n	80059dc <HAL_TIM_ConfigClockSource+0xd0>
 800595e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005962:	f200 8087 	bhi.w	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	f000 8085 	beq.w	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	d87f      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d01a      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xa2>
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d87b      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 800597c:	2b60      	cmp	r3, #96	; 0x60
 800597e:	d050      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x116>
 8005980:	2b60      	cmp	r3, #96	; 0x60
 8005982:	d877      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 8005984:	2b50      	cmp	r3, #80	; 0x50
 8005986:	d03c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0xf6>
 8005988:	2b50      	cmp	r3, #80	; 0x50
 800598a:	d873      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d058      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x136>
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d86f      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d064      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x156>
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d86b      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d060      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x156>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d867      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d05c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x156>
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d05a      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059ac:	e062      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6899      	ldr	r1, [r3, #8]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f000 fb34 	bl	800602a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	609a      	str	r2, [r3, #8]
      break;
 80059da:	e04e      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6899      	ldr	r1, [r3, #8]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f000 fb1d 	bl	800602a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fe:	609a      	str	r2, [r3, #8]
      break;
 8005a00:	e03b      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f000 fa94 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2150      	movs	r1, #80	; 0x50
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 faeb 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005a20:	e02b      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 fab2 	bl	8005f98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2160      	movs	r1, #96	; 0x60
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fadb 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e01b      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 fa74 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 facb 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005a60:	e00b      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f000 fac2 	bl	8005ff6 <TIM_ITRx_SetConfig>
        break;
 8005a72:	e002      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
	...

08005af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <TIM_Base_SetConfig+0xe0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a32      	ldr	r2, [pc, #200]	; (8005bd4 <TIM_Base_SetConfig+0xe4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2f      	ldr	r2, [pc, #188]	; (8005bd8 <TIM_Base_SetConfig+0xe8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <TIM_Base_SetConfig+0xec>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	; (8005be0 <TIM_Base_SetConfig+0xf0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <TIM_Base_SetConfig+0xe0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_Base_SetConfig+0x82>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <TIM_Base_SetConfig+0xe4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_Base_SetConfig+0x82>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0x82>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <TIM_Base_SetConfig+0xe8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0x82>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <TIM_Base_SetConfig+0xec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0x82>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <TIM_Base_SetConfig+0xf0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <TIM_Base_SetConfig+0xe0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0xc8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <TIM_Base_SetConfig+0xe4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d103      	bne.n	8005bc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	615a      	str	r2, [r3, #20]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000800 	.word	0x40000800
 8005be0:	40000c00 	.word	0x40000c00

08005be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0302 	bic.w	r3, r3, #2
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a20      	ldr	r2, [pc, #128]	; (8005cbc <TIM_OC1_SetConfig+0xd8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC1_SetConfig+0x64>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <TIM_OC1_SetConfig+0xdc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10c      	bne.n	8005c62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0308 	bic.w	r3, r3, #8
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 0304 	bic.w	r3, r3, #4
 8005c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a15      	ldr	r2, [pc, #84]	; (8005cbc <TIM_OC1_SetConfig+0xd8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_OC1_SetConfig+0x8e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a14      	ldr	r2, [pc, #80]	; (8005cc0 <TIM_OC1_SetConfig+0xdc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d111      	bne.n	8005c96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	621a      	str	r2, [r3, #32]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400

08005cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0210 	bic.w	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 0320 	bic.w	r3, r3, #32
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a21      	ldr	r2, [pc, #132]	; (8005da4 <TIM_OC2_SetConfig+0xe0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC2_SetConfig+0x68>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <TIM_OC2_SetConfig+0xe4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10d      	bne.n	8005d48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <TIM_OC2_SetConfig+0xe0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_OC2_SetConfig+0x94>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <TIM_OC2_SetConfig+0xe4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d113      	bne.n	8005d80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40013400 	.word	0x40013400

08005dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <TIM_OC3_SetConfig+0xe0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC3_SetConfig+0x66>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a20      	ldr	r2, [pc, #128]	; (8005e90 <TIM_OC3_SetConfig+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10d      	bne.n	8005e2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <TIM_OC3_SetConfig+0xe0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_OC3_SetConfig+0x92>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC3_SetConfig+0xe4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d113      	bne.n	8005e66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	621a      	str	r2, [r3, #32]
}
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40013400 	.word	0x40013400

08005e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	031b      	lsls	r3, r3, #12
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <TIM_OC4_SetConfig+0xa0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC4_SetConfig+0x68>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <TIM_OC4_SetConfig+0xa4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d109      	bne.n	8005f10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40013400 	.word	0x40013400

08005f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0201 	bic.w	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 030a 	bic.w	r3, r3, #10
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f023 0210 	bic.w	r2, r3, #16
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	031b      	lsls	r3, r3, #12
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	f043 0307 	orr.w	r3, r3, #7
 8006018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006044:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	021a      	lsls	r2, r3, #8
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	431a      	orrs	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	4313      	orrs	r3, r2
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	609a      	str	r2, [r3, #8]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr

08006068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e050      	b.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d00e      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a14      	ldr	r2, [pc, #80]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10c      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	40012c00 	.word	0x40012c00
 8006178:	40013400 	.word	0x40013400
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00

08006188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e03d      	b.n	8006220 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e03f      	b.n	80062e0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fd f88d 	bl	8003394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2224      	movs	r2, #36	; 0x24
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006290:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fab0 	bl	80067f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b20      	cmp	r3, #32
 8006306:	d17c      	bne.n	8006402 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_UART_Transmit+0x2c>
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e075      	b.n	8006404 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_UART_Transmit+0x3e>
 8006322:	2302      	movs	r3, #2
 8006324:	e06e      	b.n	8006404 <HAL_UART_Transmit+0x11c>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2221      	movs	r2, #33	; 0x21
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800633c:	f7fd faca 	bl	80038d4 <HAL_GetTick>
 8006340:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	88fa      	ldrh	r2, [r7, #6]
 800634c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	d108      	bne.n	800636a <HAL_UART_Transmit+0x82>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e003      	b.n	8006372 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800637a:	e02a      	b.n	80063d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2200      	movs	r2, #0
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f946 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e036      	b.n	8006404 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	3302      	adds	r3, #2
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e007      	b.n	80063c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	781a      	ldrb	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3301      	adds	r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1cf      	bne.n	800637c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	2140      	movs	r1, #64	; 0x40
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f916 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e006      	b.n	8006404 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e000      	b.n	8006404 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b20      	cmp	r3, #32
 8006424:	d11d      	bne.n	8006462 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_UART_Receive_DMA+0x26>
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e016      	b.n	8006464 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Receive_DMA+0x38>
 8006440:	2302      	movs	r3, #2
 8006442:	e00f      	b.n	8006464 <HAL_UART_Receive_DMA+0x58>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	461a      	mov	r2, r3
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f927 	bl	80066ac <UART_Start_Receive_DMA>
 800645e:	4603      	mov	r3, r0
 8006460:	e000      	b.n	8006464 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006462:	2302      	movs	r3, #2
  }
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d12a      	bne.n	800652a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695a      	ldr	r2, [r3, #20]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695a      	ldr	r2, [r3, #20]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006508:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	2b01      	cmp	r3, #1
 8006518:	d107      	bne.n	800652a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0210 	bic.w	r2, r2, #16
 8006528:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	2b01      	cmp	r3, #1
 8006530:	d106      	bne.n	8006540 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006536:	4619      	mov	r1, r3
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff ffb2 	bl	80064a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800653e:	e002      	b.n	8006546 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7ff ff93 	bl	800646c <HAL_UART_RxCpltCallback>
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	2b01      	cmp	r3, #1
 8006562:	d108      	bne.n	8006576 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	b29b      	uxth	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff ff97 	bl	80064a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006574:	e002      	b.n	800657c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff ff81 	bl	800647e <HAL_UART_RxHalfCpltCallback>
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b21      	cmp	r3, #33	; 0x21
 80065b6:	d108      	bne.n	80065ca <UART_DMAError+0x46>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2200      	movs	r2, #0
 80065c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80065c4:	68b8      	ldr	r0, [r7, #8]
 80065c6:	f000 f8d5 	bl	8006774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b22      	cmp	r3, #34	; 0x22
 80065ea:	d108      	bne.n	80065fe <UART_DMAError+0x7a>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2200      	movs	r2, #0
 80065f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80065f8:	68b8      	ldr	r0, [r7, #8]
 80065fa:	f000 f8d0 	bl	800679e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f043 0210 	orr.w	r2, r3, #16
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800660a:	68b8      	ldr	r0, [r7, #8]
 800660c:	f7ff ff40 	bl	8006490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006628:	e02c      	b.n	8006684 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d028      	beq.n	8006684 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <UART_WaitOnFlagUntilTimeout+0x30>
 8006638:	f7fd f94c 	bl	80038d4 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	429a      	cmp	r2, r3
 8006646:	d21d      	bcs.n	8006684 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006656:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695a      	ldr	r2, [r3, #20]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0201 	bic.w	r2, r2, #1
 8006666:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e00f      	b.n	80066a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4013      	ands	r3, r2
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	bf0c      	ite	eq
 8006694:	2301      	moveq	r3, #1
 8006696:	2300      	movne	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d0c3      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2222      	movs	r2, #34	; 0x22
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	4a23      	ldr	r2, [pc, #140]	; (8006768 <UART_Start_Receive_DMA+0xbc>)
 80066da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	4a22      	ldr	r2, [pc, #136]	; (800676c <UART_Start_Receive_DMA+0xc0>)
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	4a21      	ldr	r2, [pc, #132]	; (8006770 <UART_Start_Receive_DMA+0xc4>)
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	2200      	movs	r2, #0
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80066f4:	f107 0308 	add.w	r3, r7, #8
 80066f8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3304      	adds	r3, #4
 8006704:	4619      	mov	r1, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	f7fd fa70 	bl	8003bf0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800673c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800675c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	080064b9 	.word	0x080064b9
 800676c:	0800654f 	.word	0x0800654f
 8006770:	08006585 	.word	0x08006585

08006774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800678a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695a      	ldr	r2, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d107      	bne.n	80067de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0210 	bic.w	r2, r2, #16
 80067dc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr
	...

080067f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006832:	f023 030c 	bic.w	r3, r3, #12
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	430b      	orrs	r3, r1
 800683e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2c      	ldr	r2, [pc, #176]	; (800690c <UART_SetConfig+0x114>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d103      	bne.n	8006868 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe fb6a 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	e002      	b.n	800686e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fe fb52 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 800686c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009a      	lsls	r2, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	4a22      	ldr	r2, [pc, #136]	; (8006910 <UART_SetConfig+0x118>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	0119      	lsls	r1, r3, #4
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009a      	lsls	r2, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <UART_SetConfig+0x118>)
 80068a6:	fba3 0302 	umull	r0, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	2064      	movs	r0, #100	; 0x64
 80068ae:	fb00 f303 	mul.w	r3, r0, r3
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	3332      	adds	r3, #50	; 0x32
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <UART_SetConfig+0x118>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c4:	4419      	add	r1, r3
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009a      	lsls	r2, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <UART_SetConfig+0x118>)
 80068de:	fba3 0302 	umull	r0, r3, r3, r2
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2064      	movs	r0, #100	; 0x64
 80068e6:	fb00 f303 	mul.w	r3, r0, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	3332      	adds	r3, #50	; 0x32
 80068f0:	4a07      	ldr	r2, [pc, #28]	; (8006910 <UART_SetConfig+0x118>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	440a      	add	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40013800 	.word	0x40013800
 8006910:	51eb851f 	.word	0x51eb851f

08006914 <__assert_func>:
 8006914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006916:	4614      	mov	r4, r2
 8006918:	461a      	mov	r2, r3
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <__assert_func+0x2c>)
 800691c:	4605      	mov	r5, r0
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68d8      	ldr	r0, [r3, #12]
 8006922:	b14c      	cbz	r4, 8006938 <__assert_func+0x24>
 8006924:	4b07      	ldr	r3, [pc, #28]	; (8006944 <__assert_func+0x30>)
 8006926:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800692a:	9100      	str	r1, [sp, #0]
 800692c:	462b      	mov	r3, r5
 800692e:	4906      	ldr	r1, [pc, #24]	; (8006948 <__assert_func+0x34>)
 8006930:	f000 f814 	bl	800695c <fiprintf>
 8006934:	f000 fbfe 	bl	8007134 <abort>
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <__assert_func+0x38>)
 800693a:	461c      	mov	r4, r3
 800693c:	e7f3      	b.n	8006926 <__assert_func+0x12>
 800693e:	bf00      	nop
 8006940:	20000010 	.word	0x20000010
 8006944:	08007a60 	.word	0x08007a60
 8006948:	08007a6d 	.word	0x08007a6d
 800694c:	08007a9b 	.word	0x08007a9b

08006950 <__errno>:
 8006950:	4b01      	ldr	r3, [pc, #4]	; (8006958 <__errno+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000010 	.word	0x20000010

0800695c <fiprintf>:
 800695c:	b40e      	push	{r1, r2, r3}
 800695e:	b503      	push	{r0, r1, lr}
 8006960:	4601      	mov	r1, r0
 8006962:	ab03      	add	r3, sp, #12
 8006964:	4805      	ldr	r0, [pc, #20]	; (800697c <fiprintf+0x20>)
 8006966:	f853 2b04 	ldr.w	r2, [r3], #4
 800696a:	6800      	ldr	r0, [r0, #0]
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	f000 f85b 	bl	8006a28 <_vfiprintf_r>
 8006972:	b002      	add	sp, #8
 8006974:	f85d eb04 	ldr.w	lr, [sp], #4
 8006978:	b003      	add	sp, #12
 800697a:	4770      	bx	lr
 800697c:	20000010 	.word	0x20000010

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	2600      	movs	r6, #0
 8006984:	4d0c      	ldr	r5, [pc, #48]	; (80069b8 <__libc_init_array+0x38>)
 8006986:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006988:	1b64      	subs	r4, r4, r5
 800698a:	10a4      	asrs	r4, r4, #2
 800698c:	42a6      	cmp	r6, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	f001 f810 	bl	80079b4 <_init>
 8006994:	2600      	movs	r6, #0
 8006996:	4d0a      	ldr	r5, [pc, #40]	; (80069c0 <__libc_init_array+0x40>)
 8006998:	4c0a      	ldr	r4, [pc, #40]	; (80069c4 <__libc_init_array+0x44>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a8:	4798      	blx	r3
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b2:	4798      	blx	r3
 80069b4:	3601      	adds	r6, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	08007b34 	.word	0x08007b34
 80069bc:	08007b34 	.word	0x08007b34
 80069c0:	08007b34 	.word	0x08007b34
 80069c4:	08007b38 	.word	0x08007b38

080069c8 <memset>:
 80069c8:	4603      	mov	r3, r0
 80069ca:	4402      	add	r2, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <__sfputc_r>:
 80069d8:	6893      	ldr	r3, [r2, #8]
 80069da:	b410      	push	{r4}
 80069dc:	3b01      	subs	r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	6093      	str	r3, [r2, #8]
 80069e2:	da07      	bge.n	80069f4 <__sfputc_r+0x1c>
 80069e4:	6994      	ldr	r4, [r2, #24]
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	db01      	blt.n	80069ee <__sfputc_r+0x16>
 80069ea:	290a      	cmp	r1, #10
 80069ec:	d102      	bne.n	80069f4 <__sfputc_r+0x1c>
 80069ee:	bc10      	pop	{r4}
 80069f0:	f000 bae0 	b.w	8006fb4 <__swbuf_r>
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	1c58      	adds	r0, r3, #1
 80069f8:	6010      	str	r0, [r2, #0]
 80069fa:	7019      	strb	r1, [r3, #0]
 80069fc:	4608      	mov	r0, r1
 80069fe:	bc10      	pop	{r4}
 8006a00:	4770      	bx	lr

08006a02 <__sfputs_r>:
 8006a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	4614      	mov	r4, r2
 8006a0a:	18d5      	adds	r5, r2, r3
 8006a0c:	42ac      	cmp	r4, r5
 8006a0e:	d101      	bne.n	8006a14 <__sfputs_r+0x12>
 8006a10:	2000      	movs	r0, #0
 8006a12:	e007      	b.n	8006a24 <__sfputs_r+0x22>
 8006a14:	463a      	mov	r2, r7
 8006a16:	4630      	mov	r0, r6
 8006a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1c:	f7ff ffdc 	bl	80069d8 <__sfputc_r>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d1f3      	bne.n	8006a0c <__sfputs_r+0xa>
 8006a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a28 <_vfiprintf_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	4614      	mov	r4, r2
 8006a30:	4698      	mov	r8, r3
 8006a32:	4606      	mov	r6, r0
 8006a34:	b09d      	sub	sp, #116	; 0x74
 8006a36:	b118      	cbz	r0, 8006a40 <_vfiprintf_r+0x18>
 8006a38:	6983      	ldr	r3, [r0, #24]
 8006a3a:	b90b      	cbnz	r3, 8006a40 <_vfiprintf_r+0x18>
 8006a3c:	f000 fc98 	bl	8007370 <__sinit>
 8006a40:	4b89      	ldr	r3, [pc, #548]	; (8006c68 <_vfiprintf_r+0x240>)
 8006a42:	429d      	cmp	r5, r3
 8006a44:	d11b      	bne.n	8006a7e <_vfiprintf_r+0x56>
 8006a46:	6875      	ldr	r5, [r6, #4]
 8006a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_vfiprintf_r+0x32>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_vfiprintf_r+0x32>
 8006a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a56:	f000 fd29 	bl	80074ac <__retarget_lock_acquire_recursive>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	071b      	lsls	r3, r3, #28
 8006a5e:	d501      	bpl.n	8006a64 <_vfiprintf_r+0x3c>
 8006a60:	692b      	ldr	r3, [r5, #16]
 8006a62:	b9eb      	cbnz	r3, 8006aa0 <_vfiprintf_r+0x78>
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 faf6 	bl	8007058 <__swsetup_r>
 8006a6c:	b1c0      	cbz	r0, 8006aa0 <_vfiprintf_r+0x78>
 8006a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a70:	07dc      	lsls	r4, r3, #31
 8006a72:	d50e      	bpl.n	8006a92 <_vfiprintf_r+0x6a>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	b01d      	add	sp, #116	; 0x74
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7e:	4b7b      	ldr	r3, [pc, #492]	; (8006c6c <_vfiprintf_r+0x244>)
 8006a80:	429d      	cmp	r5, r3
 8006a82:	d101      	bne.n	8006a88 <_vfiprintf_r+0x60>
 8006a84:	68b5      	ldr	r5, [r6, #8]
 8006a86:	e7df      	b.n	8006a48 <_vfiprintf_r+0x20>
 8006a88:	4b79      	ldr	r3, [pc, #484]	; (8006c70 <_vfiprintf_r+0x248>)
 8006a8a:	429d      	cmp	r5, r3
 8006a8c:	bf08      	it	eq
 8006a8e:	68f5      	ldreq	r5, [r6, #12]
 8006a90:	e7da      	b.n	8006a48 <_vfiprintf_r+0x20>
 8006a92:	89ab      	ldrh	r3, [r5, #12]
 8006a94:	0598      	lsls	r0, r3, #22
 8006a96:	d4ed      	bmi.n	8006a74 <_vfiprintf_r+0x4c>
 8006a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a9a:	f000 fd08 	bl	80074ae <__retarget_lock_release_recursive>
 8006a9e:	e7e9      	b.n	8006a74 <_vfiprintf_r+0x4c>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aaa:	2330      	movs	r3, #48	; 0x30
 8006aac:	f04f 0901 	mov.w	r9, #1
 8006ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ab4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006c74 <_vfiprintf_r+0x24c>
 8006ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006abc:	4623      	mov	r3, r4
 8006abe:	469a      	mov	sl, r3
 8006ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac4:	b10a      	cbz	r2, 8006aca <_vfiprintf_r+0xa2>
 8006ac6:	2a25      	cmp	r2, #37	; 0x25
 8006ac8:	d1f9      	bne.n	8006abe <_vfiprintf_r+0x96>
 8006aca:	ebba 0b04 	subs.w	fp, sl, r4
 8006ace:	d00b      	beq.n	8006ae8 <_vfiprintf_r+0xc0>
 8006ad0:	465b      	mov	r3, fp
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff ff93 	bl	8006a02 <__sfputs_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	f000 80aa 	beq.w	8006c36 <_vfiprintf_r+0x20e>
 8006ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae4:	445a      	add	r2, fp
 8006ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80a2 	beq.w	8006c36 <_vfiprintf_r+0x20e>
 8006af2:	2300      	movs	r3, #0
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006afc:	f10a 0a01 	add.w	sl, sl, #1
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b08:	931a      	str	r3, [sp, #104]	; 0x68
 8006b0a:	4654      	mov	r4, sl
 8006b0c:	2205      	movs	r2, #5
 8006b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b12:	4858      	ldr	r0, [pc, #352]	; (8006c74 <_vfiprintf_r+0x24c>)
 8006b14:	f000 fd32 	bl	800757c <memchr>
 8006b18:	9a04      	ldr	r2, [sp, #16]
 8006b1a:	b9d8      	cbnz	r0, 8006b54 <_vfiprintf_r+0x12c>
 8006b1c:	06d1      	lsls	r1, r2, #27
 8006b1e:	bf44      	itt	mi
 8006b20:	2320      	movmi	r3, #32
 8006b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b26:	0713      	lsls	r3, r2, #28
 8006b28:	bf44      	itt	mi
 8006b2a:	232b      	movmi	r3, #43	; 0x2b
 8006b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b30:	f89a 3000 	ldrb.w	r3, [sl]
 8006b34:	2b2a      	cmp	r3, #42	; 0x2a
 8006b36:	d015      	beq.n	8006b64 <_vfiprintf_r+0x13c>
 8006b38:	4654      	mov	r4, sl
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f04f 0c0a 	mov.w	ip, #10
 8006b40:	9a07      	ldr	r2, [sp, #28]
 8006b42:	4621      	mov	r1, r4
 8006b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b48:	3b30      	subs	r3, #48	; 0x30
 8006b4a:	2b09      	cmp	r3, #9
 8006b4c:	d94e      	bls.n	8006bec <_vfiprintf_r+0x1c4>
 8006b4e:	b1b0      	cbz	r0, 8006b7e <_vfiprintf_r+0x156>
 8006b50:	9207      	str	r2, [sp, #28]
 8006b52:	e014      	b.n	8006b7e <_vfiprintf_r+0x156>
 8006b54:	eba0 0308 	sub.w	r3, r0, r8
 8006b58:	fa09 f303 	lsl.w	r3, r9, r3
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	46a2      	mov	sl, r4
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	e7d2      	b.n	8006b0a <_vfiprintf_r+0xe2>
 8006b64:	9b03      	ldr	r3, [sp, #12]
 8006b66:	1d19      	adds	r1, r3, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	9103      	str	r1, [sp, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bfbb      	ittet	lt
 8006b70:	425b      	neglt	r3, r3
 8006b72:	f042 0202 	orrlt.w	r2, r2, #2
 8006b76:	9307      	strge	r3, [sp, #28]
 8006b78:	9307      	strlt	r3, [sp, #28]
 8006b7a:	bfb8      	it	lt
 8006b7c:	9204      	strlt	r2, [sp, #16]
 8006b7e:	7823      	ldrb	r3, [r4, #0]
 8006b80:	2b2e      	cmp	r3, #46	; 0x2e
 8006b82:	d10c      	bne.n	8006b9e <_vfiprintf_r+0x176>
 8006b84:	7863      	ldrb	r3, [r4, #1]
 8006b86:	2b2a      	cmp	r3, #42	; 0x2a
 8006b88:	d135      	bne.n	8006bf6 <_vfiprintf_r+0x1ce>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	3402      	adds	r4, #2
 8006b8e:	1d1a      	adds	r2, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	9203      	str	r2, [sp, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bfb8      	it	lt
 8006b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b9c:	9305      	str	r3, [sp, #20]
 8006b9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006c78 <_vfiprintf_r+0x250>
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	7821      	ldrb	r1, [r4, #0]
 8006ba8:	f000 fce8 	bl	800757c <memchr>
 8006bac:	b140      	cbz	r0, 8006bc0 <_vfiprintf_r+0x198>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	eba0 000a 	sub.w	r0, r0, sl
 8006bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8006bb8:	9b04      	ldr	r3, [sp, #16]
 8006bba:	3401      	adds	r4, #1
 8006bbc:	4303      	orrs	r3, r0
 8006bbe:	9304      	str	r3, [sp, #16]
 8006bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc4:	2206      	movs	r2, #6
 8006bc6:	482d      	ldr	r0, [pc, #180]	; (8006c7c <_vfiprintf_r+0x254>)
 8006bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bcc:	f000 fcd6 	bl	800757c <memchr>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d03f      	beq.n	8006c54 <_vfiprintf_r+0x22c>
 8006bd4:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <_vfiprintf_r+0x258>)
 8006bd6:	bb1b      	cbnz	r3, 8006c20 <_vfiprintf_r+0x1f8>
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	3307      	adds	r3, #7
 8006bdc:	f023 0307 	bic.w	r3, r3, #7
 8006be0:	3308      	adds	r3, #8
 8006be2:	9303      	str	r3, [sp, #12]
 8006be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be6:	443b      	add	r3, r7
 8006be8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bea:	e767      	b.n	8006abc <_vfiprintf_r+0x94>
 8006bec:	460c      	mov	r4, r1
 8006bee:	2001      	movs	r0, #1
 8006bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bf4:	e7a5      	b.n	8006b42 <_vfiprintf_r+0x11a>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f04f 0c0a 	mov.w	ip, #10
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	3401      	adds	r4, #1
 8006c00:	9305      	str	r3, [sp, #20]
 8006c02:	4620      	mov	r0, r4
 8006c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c08:	3a30      	subs	r2, #48	; 0x30
 8006c0a:	2a09      	cmp	r2, #9
 8006c0c:	d903      	bls.n	8006c16 <_vfiprintf_r+0x1ee>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0c5      	beq.n	8006b9e <_vfiprintf_r+0x176>
 8006c12:	9105      	str	r1, [sp, #20]
 8006c14:	e7c3      	b.n	8006b9e <_vfiprintf_r+0x176>
 8006c16:	4604      	mov	r4, r0
 8006c18:	2301      	movs	r3, #1
 8006c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c1e:	e7f0      	b.n	8006c02 <_vfiprintf_r+0x1da>
 8006c20:	ab03      	add	r3, sp, #12
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	462a      	mov	r2, r5
 8006c26:	4630      	mov	r0, r6
 8006c28:	4b16      	ldr	r3, [pc, #88]	; (8006c84 <_vfiprintf_r+0x25c>)
 8006c2a:	a904      	add	r1, sp, #16
 8006c2c:	f3af 8000 	nop.w
 8006c30:	4607      	mov	r7, r0
 8006c32:	1c78      	adds	r0, r7, #1
 8006c34:	d1d6      	bne.n	8006be4 <_vfiprintf_r+0x1bc>
 8006c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c38:	07d9      	lsls	r1, r3, #31
 8006c3a:	d405      	bmi.n	8006c48 <_vfiprintf_r+0x220>
 8006c3c:	89ab      	ldrh	r3, [r5, #12]
 8006c3e:	059a      	lsls	r2, r3, #22
 8006c40:	d402      	bmi.n	8006c48 <_vfiprintf_r+0x220>
 8006c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c44:	f000 fc33 	bl	80074ae <__retarget_lock_release_recursive>
 8006c48:	89ab      	ldrh	r3, [r5, #12]
 8006c4a:	065b      	lsls	r3, r3, #25
 8006c4c:	f53f af12 	bmi.w	8006a74 <_vfiprintf_r+0x4c>
 8006c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c52:	e711      	b.n	8006a78 <_vfiprintf_r+0x50>
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <_vfiprintf_r+0x25c>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	f000 f882 	bl	8006d68 <_printf_i>
 8006c64:	e7e4      	b.n	8006c30 <_vfiprintf_r+0x208>
 8006c66:	bf00      	nop
 8006c68:	08007af4 	.word	0x08007af4
 8006c6c:	08007b14 	.word	0x08007b14
 8006c70:	08007ad4 	.word	0x08007ad4
 8006c74:	08007aa0 	.word	0x08007aa0
 8006c78:	08007aa6 	.word	0x08007aa6
 8006c7c:	08007aaa 	.word	0x08007aaa
 8006c80:	00000000 	.word	0x00000000
 8006c84:	08006a03 	.word	0x08006a03

08006c88 <_printf_common>:
 8006c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	4699      	mov	r9, r3
 8006c90:	688a      	ldr	r2, [r1, #8]
 8006c92:	690b      	ldr	r3, [r1, #16]
 8006c94:	4607      	mov	r7, r0
 8006c96:	4293      	cmp	r3, r2
 8006c98:	bfb8      	it	lt
 8006c9a:	4613      	movlt	r3, r2
 8006c9c:	6033      	str	r3, [r6, #0]
 8006c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca8:	b10a      	cbz	r2, 8006cae <_printf_common+0x26>
 8006caa:	3301      	adds	r3, #1
 8006cac:	6033      	str	r3, [r6, #0]
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	0699      	lsls	r1, r3, #26
 8006cb2:	bf42      	ittt	mi
 8006cb4:	6833      	ldrmi	r3, [r6, #0]
 8006cb6:	3302      	addmi	r3, #2
 8006cb8:	6033      	strmi	r3, [r6, #0]
 8006cba:	6825      	ldr	r5, [r4, #0]
 8006cbc:	f015 0506 	ands.w	r5, r5, #6
 8006cc0:	d106      	bne.n	8006cd0 <_printf_common+0x48>
 8006cc2:	f104 0a19 	add.w	sl, r4, #25
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	6832      	ldr	r2, [r6, #0]
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dc28      	bgt.n	8006d22 <_printf_common+0x9a>
 8006cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cd4:	1e13      	subs	r3, r2, #0
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	bf18      	it	ne
 8006cda:	2301      	movne	r3, #1
 8006cdc:	0692      	lsls	r2, r2, #26
 8006cde:	d42d      	bmi.n	8006d3c <_printf_common+0xb4>
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ce8:	47c0      	blx	r8
 8006cea:	3001      	adds	r0, #1
 8006cec:	d020      	beq.n	8006d30 <_printf_common+0xa8>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	68e5      	ldr	r5, [r4, #12]
 8006cf2:	f003 0306 	and.w	r3, r3, #6
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	bf18      	it	ne
 8006cfa:	2500      	movne	r5, #0
 8006cfc:	6832      	ldr	r2, [r6, #0]
 8006cfe:	f04f 0600 	mov.w	r6, #0
 8006d02:	68a3      	ldr	r3, [r4, #8]
 8006d04:	bf08      	it	eq
 8006d06:	1aad      	subeq	r5, r5, r2
 8006d08:	6922      	ldr	r2, [r4, #16]
 8006d0a:	bf08      	it	eq
 8006d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfc4      	itt	gt
 8006d14:	1a9b      	subgt	r3, r3, r2
 8006d16:	18ed      	addgt	r5, r5, r3
 8006d18:	341a      	adds	r4, #26
 8006d1a:	42b5      	cmp	r5, r6
 8006d1c:	d11a      	bne.n	8006d54 <_printf_common+0xcc>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e008      	b.n	8006d34 <_printf_common+0xac>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4652      	mov	r2, sl
 8006d26:	4649      	mov	r1, r9
 8006d28:	4638      	mov	r0, r7
 8006d2a:	47c0      	blx	r8
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d103      	bne.n	8006d38 <_printf_common+0xb0>
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	3501      	adds	r5, #1
 8006d3a:	e7c4      	b.n	8006cc6 <_printf_common+0x3e>
 8006d3c:	2030      	movs	r0, #48	; 0x30
 8006d3e:	18e1      	adds	r1, r4, r3
 8006d40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d4a:	4422      	add	r2, r4
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d52:	e7c5      	b.n	8006ce0 <_printf_common+0x58>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4622      	mov	r2, r4
 8006d58:	4649      	mov	r1, r9
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	47c0      	blx	r8
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d0e6      	beq.n	8006d30 <_printf_common+0xa8>
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7d9      	b.n	8006d1a <_printf_common+0x92>
	...

08006d68 <_printf_i>:
 8006d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	7e0f      	ldrb	r7, [r1, #24]
 8006d6e:	4691      	mov	r9, r2
 8006d70:	2f78      	cmp	r7, #120	; 0x78
 8006d72:	4680      	mov	r8, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	469a      	mov	sl, r3
 8006d78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d7e:	d807      	bhi.n	8006d90 <_printf_i+0x28>
 8006d80:	2f62      	cmp	r7, #98	; 0x62
 8006d82:	d80a      	bhi.n	8006d9a <_printf_i+0x32>
 8006d84:	2f00      	cmp	r7, #0
 8006d86:	f000 80d9 	beq.w	8006f3c <_printf_i+0x1d4>
 8006d8a:	2f58      	cmp	r7, #88	; 0x58
 8006d8c:	f000 80a4 	beq.w	8006ed8 <_printf_i+0x170>
 8006d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d98:	e03a      	b.n	8006e10 <_printf_i+0xa8>
 8006d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d9e:	2b15      	cmp	r3, #21
 8006da0:	d8f6      	bhi.n	8006d90 <_printf_i+0x28>
 8006da2:	a101      	add	r1, pc, #4	; (adr r1, 8006da8 <_printf_i+0x40>)
 8006da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006da8:	08006e01 	.word	0x08006e01
 8006dac:	08006e15 	.word	0x08006e15
 8006db0:	08006d91 	.word	0x08006d91
 8006db4:	08006d91 	.word	0x08006d91
 8006db8:	08006d91 	.word	0x08006d91
 8006dbc:	08006d91 	.word	0x08006d91
 8006dc0:	08006e15 	.word	0x08006e15
 8006dc4:	08006d91 	.word	0x08006d91
 8006dc8:	08006d91 	.word	0x08006d91
 8006dcc:	08006d91 	.word	0x08006d91
 8006dd0:	08006d91 	.word	0x08006d91
 8006dd4:	08006f23 	.word	0x08006f23
 8006dd8:	08006e45 	.word	0x08006e45
 8006ddc:	08006f05 	.word	0x08006f05
 8006de0:	08006d91 	.word	0x08006d91
 8006de4:	08006d91 	.word	0x08006d91
 8006de8:	08006f45 	.word	0x08006f45
 8006dec:	08006d91 	.word	0x08006d91
 8006df0:	08006e45 	.word	0x08006e45
 8006df4:	08006d91 	.word	0x08006d91
 8006df8:	08006d91 	.word	0x08006d91
 8006dfc:	08006f0d 	.word	0x08006f0d
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	1d1a      	adds	r2, r3, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	602a      	str	r2, [r5, #0]
 8006e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0a4      	b.n	8006f5e <_printf_i+0x1f6>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	6829      	ldr	r1, [r5, #0]
 8006e18:	0606      	lsls	r6, r0, #24
 8006e1a:	f101 0304 	add.w	r3, r1, #4
 8006e1e:	d50a      	bpl.n	8006e36 <_printf_i+0xce>
 8006e20:	680e      	ldr	r6, [r1, #0]
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	da03      	bge.n	8006e30 <_printf_i+0xc8>
 8006e28:	232d      	movs	r3, #45	; 0x2d
 8006e2a:	4276      	negs	r6, r6
 8006e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e30:	230a      	movs	r3, #10
 8006e32:	485e      	ldr	r0, [pc, #376]	; (8006fac <_printf_i+0x244>)
 8006e34:	e019      	b.n	8006e6a <_printf_i+0x102>
 8006e36:	680e      	ldr	r6, [r1, #0]
 8006e38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	bf18      	it	ne
 8006e40:	b236      	sxthne	r6, r6
 8006e42:	e7ef      	b.n	8006e24 <_printf_i+0xbc>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	1d19      	adds	r1, r3, #4
 8006e4a:	6029      	str	r1, [r5, #0]
 8006e4c:	0601      	lsls	r1, r0, #24
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0xec>
 8006e50:	681e      	ldr	r6, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0xf2>
 8006e54:	0646      	lsls	r6, r0, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0xe8>
 8006e58:	881e      	ldrh	r6, [r3, #0]
 8006e5a:	2f6f      	cmp	r7, #111	; 0x6f
 8006e5c:	bf0c      	ite	eq
 8006e5e:	2308      	moveq	r3, #8
 8006e60:	230a      	movne	r3, #10
 8006e62:	4852      	ldr	r0, [pc, #328]	; (8006fac <_printf_i+0x244>)
 8006e64:	2100      	movs	r1, #0
 8006e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e6a:	6865      	ldr	r5, [r4, #4]
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	bfa8      	it	ge
 8006e70:	6821      	ldrge	r1, [r4, #0]
 8006e72:	60a5      	str	r5, [r4, #8]
 8006e74:	bfa4      	itt	ge
 8006e76:	f021 0104 	bicge.w	r1, r1, #4
 8006e7a:	6021      	strge	r1, [r4, #0]
 8006e7c:	b90e      	cbnz	r6, 8006e82 <_printf_i+0x11a>
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	d04d      	beq.n	8006f1e <_printf_i+0x1b6>
 8006e82:	4615      	mov	r5, r2
 8006e84:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e88:	fb03 6711 	mls	r7, r3, r1, r6
 8006e8c:	5dc7      	ldrb	r7, [r0, r7]
 8006e8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e92:	4637      	mov	r7, r6
 8006e94:	42bb      	cmp	r3, r7
 8006e96:	460e      	mov	r6, r1
 8006e98:	d9f4      	bls.n	8006e84 <_printf_i+0x11c>
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d10b      	bne.n	8006eb6 <_printf_i+0x14e>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	07de      	lsls	r6, r3, #31
 8006ea2:	d508      	bpl.n	8006eb6 <_printf_i+0x14e>
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	6861      	ldr	r1, [r4, #4]
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	bfde      	ittt	le
 8006eac:	2330      	movle	r3, #48	; 0x30
 8006eae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006eb6:	1b52      	subs	r2, r2, r5
 8006eb8:	6122      	str	r2, [r4, #16]
 8006eba:	464b      	mov	r3, r9
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	f8cd a000 	str.w	sl, [sp]
 8006ec4:	aa03      	add	r2, sp, #12
 8006ec6:	f7ff fedf 	bl	8006c88 <_printf_common>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d14c      	bne.n	8006f68 <_printf_i+0x200>
 8006ece:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed2:	b004      	add	sp, #16
 8006ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed8:	4834      	ldr	r0, [pc, #208]	; (8006fac <_printf_i+0x244>)
 8006eda:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ede:	6829      	ldr	r1, [r5, #0]
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ee6:	6029      	str	r1, [r5, #0]
 8006ee8:	061d      	lsls	r5, r3, #24
 8006eea:	d514      	bpl.n	8006f16 <_printf_i+0x1ae>
 8006eec:	07df      	lsls	r7, r3, #31
 8006eee:	bf44      	itt	mi
 8006ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef4:	6023      	strmi	r3, [r4, #0]
 8006ef6:	b91e      	cbnz	r6, 8006f00 <_printf_i+0x198>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	f023 0320 	bic.w	r3, r3, #32
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	2310      	movs	r3, #16
 8006f02:	e7af      	b.n	8006e64 <_printf_i+0xfc>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f043 0320 	orr.w	r3, r3, #32
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	2378      	movs	r3, #120	; 0x78
 8006f0e:	4828      	ldr	r0, [pc, #160]	; (8006fb0 <_printf_i+0x248>)
 8006f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f14:	e7e3      	b.n	8006ede <_printf_i+0x176>
 8006f16:	0659      	lsls	r1, r3, #25
 8006f18:	bf48      	it	mi
 8006f1a:	b2b6      	uxthmi	r6, r6
 8006f1c:	e7e6      	b.n	8006eec <_printf_i+0x184>
 8006f1e:	4615      	mov	r5, r2
 8006f20:	e7bb      	b.n	8006e9a <_printf_i+0x132>
 8006f22:	682b      	ldr	r3, [r5, #0]
 8006f24:	6826      	ldr	r6, [r4, #0]
 8006f26:	1d18      	adds	r0, r3, #4
 8006f28:	6961      	ldr	r1, [r4, #20]
 8006f2a:	6028      	str	r0, [r5, #0]
 8006f2c:	0635      	lsls	r5, r6, #24
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	d501      	bpl.n	8006f36 <_printf_i+0x1ce>
 8006f32:	6019      	str	r1, [r3, #0]
 8006f34:	e002      	b.n	8006f3c <_printf_i+0x1d4>
 8006f36:	0670      	lsls	r0, r6, #25
 8006f38:	d5fb      	bpl.n	8006f32 <_printf_i+0x1ca>
 8006f3a:	8019      	strh	r1, [r3, #0]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4615      	mov	r5, r2
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	e7ba      	b.n	8006eba <_printf_i+0x152>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	2100      	movs	r1, #0
 8006f48:	1d1a      	adds	r2, r3, #4
 8006f4a:	602a      	str	r2, [r5, #0]
 8006f4c:	681d      	ldr	r5, [r3, #0]
 8006f4e:	6862      	ldr	r2, [r4, #4]
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 fb13 	bl	800757c <memchr>
 8006f56:	b108      	cbz	r0, 8006f5c <_printf_i+0x1f4>
 8006f58:	1b40      	subs	r0, r0, r5
 8006f5a:	6060      	str	r0, [r4, #4]
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	2300      	movs	r3, #0
 8006f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f66:	e7a8      	b.n	8006eba <_printf_i+0x152>
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	47d0      	blx	sl
 8006f72:	3001      	adds	r0, #1
 8006f74:	d0ab      	beq.n	8006ece <_printf_i+0x166>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	079b      	lsls	r3, r3, #30
 8006f7a:	d413      	bmi.n	8006fa4 <_printf_i+0x23c>
 8006f7c:	68e0      	ldr	r0, [r4, #12]
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	4298      	cmp	r0, r3
 8006f82:	bfb8      	it	lt
 8006f84:	4618      	movlt	r0, r3
 8006f86:	e7a4      	b.n	8006ed2 <_printf_i+0x16a>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4632      	mov	r2, r6
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	4640      	mov	r0, r8
 8006f90:	47d0      	blx	sl
 8006f92:	3001      	adds	r0, #1
 8006f94:	d09b      	beq.n	8006ece <_printf_i+0x166>
 8006f96:	3501      	adds	r5, #1
 8006f98:	68e3      	ldr	r3, [r4, #12]
 8006f9a:	9903      	ldr	r1, [sp, #12]
 8006f9c:	1a5b      	subs	r3, r3, r1
 8006f9e:	42ab      	cmp	r3, r5
 8006fa0:	dcf2      	bgt.n	8006f88 <_printf_i+0x220>
 8006fa2:	e7eb      	b.n	8006f7c <_printf_i+0x214>
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	f104 0619 	add.w	r6, r4, #25
 8006faa:	e7f5      	b.n	8006f98 <_printf_i+0x230>
 8006fac:	08007ab1 	.word	0x08007ab1
 8006fb0:	08007ac2 	.word	0x08007ac2

08006fb4 <__swbuf_r>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	460e      	mov	r6, r1
 8006fb8:	4614      	mov	r4, r2
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b118      	cbz	r0, 8006fc6 <__swbuf_r+0x12>
 8006fbe:	6983      	ldr	r3, [r0, #24]
 8006fc0:	b90b      	cbnz	r3, 8006fc6 <__swbuf_r+0x12>
 8006fc2:	f000 f9d5 	bl	8007370 <__sinit>
 8006fc6:	4b21      	ldr	r3, [pc, #132]	; (800704c <__swbuf_r+0x98>)
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	d12b      	bne.n	8007024 <__swbuf_r+0x70>
 8006fcc:	686c      	ldr	r4, [r5, #4]
 8006fce:	69a3      	ldr	r3, [r4, #24]
 8006fd0:	60a3      	str	r3, [r4, #8]
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	071a      	lsls	r2, r3, #28
 8006fd6:	d52f      	bpl.n	8007038 <__swbuf_r+0x84>
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	b36b      	cbz	r3, 8007038 <__swbuf_r+0x84>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	b2f6      	uxtb	r6, r6
 8006fe2:	1ac0      	subs	r0, r0, r3
 8006fe4:	6963      	ldr	r3, [r4, #20]
 8006fe6:	4637      	mov	r7, r6
 8006fe8:	4283      	cmp	r3, r0
 8006fea:	dc04      	bgt.n	8006ff6 <__swbuf_r+0x42>
 8006fec:	4621      	mov	r1, r4
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 f92a 	bl	8007248 <_fflush_r>
 8006ff4:	bb30      	cbnz	r0, 8007044 <__swbuf_r+0x90>
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	60a3      	str	r3, [r4, #8]
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	701e      	strb	r6, [r3, #0]
 8007006:	6963      	ldr	r3, [r4, #20]
 8007008:	4283      	cmp	r3, r0
 800700a:	d004      	beq.n	8007016 <__swbuf_r+0x62>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d506      	bpl.n	8007020 <__swbuf_r+0x6c>
 8007012:	2e0a      	cmp	r6, #10
 8007014:	d104      	bne.n	8007020 <__swbuf_r+0x6c>
 8007016:	4621      	mov	r1, r4
 8007018:	4628      	mov	r0, r5
 800701a:	f000 f915 	bl	8007248 <_fflush_r>
 800701e:	b988      	cbnz	r0, 8007044 <__swbuf_r+0x90>
 8007020:	4638      	mov	r0, r7
 8007022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <__swbuf_r+0x9c>)
 8007026:	429c      	cmp	r4, r3
 8007028:	d101      	bne.n	800702e <__swbuf_r+0x7a>
 800702a:	68ac      	ldr	r4, [r5, #8]
 800702c:	e7cf      	b.n	8006fce <__swbuf_r+0x1a>
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <__swbuf_r+0xa0>)
 8007030:	429c      	cmp	r4, r3
 8007032:	bf08      	it	eq
 8007034:	68ec      	ldreq	r4, [r5, #12]
 8007036:	e7ca      	b.n	8006fce <__swbuf_r+0x1a>
 8007038:	4621      	mov	r1, r4
 800703a:	4628      	mov	r0, r5
 800703c:	f000 f80c 	bl	8007058 <__swsetup_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	d0cb      	beq.n	8006fdc <__swbuf_r+0x28>
 8007044:	f04f 37ff 	mov.w	r7, #4294967295
 8007048:	e7ea      	b.n	8007020 <__swbuf_r+0x6c>
 800704a:	bf00      	nop
 800704c:	08007af4 	.word	0x08007af4
 8007050:	08007b14 	.word	0x08007b14
 8007054:	08007ad4 	.word	0x08007ad4

08007058 <__swsetup_r>:
 8007058:	4b32      	ldr	r3, [pc, #200]	; (8007124 <__swsetup_r+0xcc>)
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	4606      	mov	r6, r0
 8007060:	460c      	mov	r4, r1
 8007062:	b125      	cbz	r5, 800706e <__swsetup_r+0x16>
 8007064:	69ab      	ldr	r3, [r5, #24]
 8007066:	b913      	cbnz	r3, 800706e <__swsetup_r+0x16>
 8007068:	4628      	mov	r0, r5
 800706a:	f000 f981 	bl	8007370 <__sinit>
 800706e:	4b2e      	ldr	r3, [pc, #184]	; (8007128 <__swsetup_r+0xd0>)
 8007070:	429c      	cmp	r4, r3
 8007072:	d10f      	bne.n	8007094 <__swsetup_r+0x3c>
 8007074:	686c      	ldr	r4, [r5, #4]
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800707c:	0719      	lsls	r1, r3, #28
 800707e:	d42c      	bmi.n	80070da <__swsetup_r+0x82>
 8007080:	06dd      	lsls	r5, r3, #27
 8007082:	d411      	bmi.n	80070a8 <__swsetup_r+0x50>
 8007084:	2309      	movs	r3, #9
 8007086:	6033      	str	r3, [r6, #0]
 8007088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	e03e      	b.n	8007112 <__swsetup_r+0xba>
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <__swsetup_r+0xd4>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d101      	bne.n	800709e <__swsetup_r+0x46>
 800709a:	68ac      	ldr	r4, [r5, #8]
 800709c:	e7eb      	b.n	8007076 <__swsetup_r+0x1e>
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <__swsetup_r+0xd8>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	bf08      	it	eq
 80070a4:	68ec      	ldreq	r4, [r5, #12]
 80070a6:	e7e6      	b.n	8007076 <__swsetup_r+0x1e>
 80070a8:	0758      	lsls	r0, r3, #29
 80070aa:	d512      	bpl.n	80070d2 <__swsetup_r+0x7a>
 80070ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ae:	b141      	cbz	r1, 80070c2 <__swsetup_r+0x6a>
 80070b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d002      	beq.n	80070be <__swsetup_r+0x66>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f000 fa6d 	bl	8007598 <_free_r>
 80070be:	2300      	movs	r3, #0
 80070c0:	6363      	str	r3, [r4, #52]	; 0x34
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	2300      	movs	r3, #0
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0308 	orr.w	r3, r3, #8
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	b94b      	cbnz	r3, 80070f2 <__swsetup_r+0x9a>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e8:	d003      	beq.n	80070f2 <__swsetup_r+0x9a>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 fa05 	bl	80074fc <__smakebuf_r>
 80070f2:	89a0      	ldrh	r0, [r4, #12]
 80070f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f8:	f010 0301 	ands.w	r3, r0, #1
 80070fc:	d00a      	beq.n	8007114 <__swsetup_r+0xbc>
 80070fe:	2300      	movs	r3, #0
 8007100:	60a3      	str	r3, [r4, #8]
 8007102:	6963      	ldr	r3, [r4, #20]
 8007104:	425b      	negs	r3, r3
 8007106:	61a3      	str	r3, [r4, #24]
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	b943      	cbnz	r3, 800711e <__swsetup_r+0xc6>
 800710c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007110:	d1ba      	bne.n	8007088 <__swsetup_r+0x30>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	0781      	lsls	r1, r0, #30
 8007116:	bf58      	it	pl
 8007118:	6963      	ldrpl	r3, [r4, #20]
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	e7f4      	b.n	8007108 <__swsetup_r+0xb0>
 800711e:	2000      	movs	r0, #0
 8007120:	e7f7      	b.n	8007112 <__swsetup_r+0xba>
 8007122:	bf00      	nop
 8007124:	20000010 	.word	0x20000010
 8007128:	08007af4 	.word	0x08007af4
 800712c:	08007b14 	.word	0x08007b14
 8007130:	08007ad4 	.word	0x08007ad4

08007134 <abort>:
 8007134:	2006      	movs	r0, #6
 8007136:	b508      	push	{r3, lr}
 8007138:	f000 fb42 	bl	80077c0 <raise>
 800713c:	2001      	movs	r0, #1
 800713e:	f7fc fa9c 	bl	800367a <_exit>
	...

08007144 <__sflush_r>:
 8007144:	898a      	ldrh	r2, [r1, #12]
 8007146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007148:	4605      	mov	r5, r0
 800714a:	0710      	lsls	r0, r2, #28
 800714c:	460c      	mov	r4, r1
 800714e:	d457      	bmi.n	8007200 <__sflush_r+0xbc>
 8007150:	684b      	ldr	r3, [r1, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dc04      	bgt.n	8007160 <__sflush_r+0x1c>
 8007156:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc01      	bgt.n	8007160 <__sflush_r+0x1c>
 800715c:	2000      	movs	r0, #0
 800715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007162:	2e00      	cmp	r6, #0
 8007164:	d0fa      	beq.n	800715c <__sflush_r+0x18>
 8007166:	2300      	movs	r3, #0
 8007168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800716c:	682f      	ldr	r7, [r5, #0]
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	d032      	beq.n	80071d8 <__sflush_r+0x94>
 8007172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	075a      	lsls	r2, r3, #29
 8007178:	d505      	bpl.n	8007186 <__sflush_r+0x42>
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	1ac0      	subs	r0, r0, r3
 800717e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007180:	b10b      	cbz	r3, 8007186 <__sflush_r+0x42>
 8007182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007184:	1ac0      	subs	r0, r0, r3
 8007186:	2300      	movs	r3, #0
 8007188:	4602      	mov	r2, r0
 800718a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800718c:	4628      	mov	r0, r5
 800718e:	6a21      	ldr	r1, [r4, #32]
 8007190:	47b0      	blx	r6
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	d106      	bne.n	80071a6 <__sflush_r+0x62>
 8007198:	6829      	ldr	r1, [r5, #0]
 800719a:	291d      	cmp	r1, #29
 800719c:	d82c      	bhi.n	80071f8 <__sflush_r+0xb4>
 800719e:	4a29      	ldr	r2, [pc, #164]	; (8007244 <__sflush_r+0x100>)
 80071a0:	40ca      	lsrs	r2, r1
 80071a2:	07d6      	lsls	r6, r2, #31
 80071a4:	d528      	bpl.n	80071f8 <__sflush_r+0xb4>
 80071a6:	2200      	movs	r2, #0
 80071a8:	6062      	str	r2, [r4, #4]
 80071aa:	6922      	ldr	r2, [r4, #16]
 80071ac:	04d9      	lsls	r1, r3, #19
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	d504      	bpl.n	80071bc <__sflush_r+0x78>
 80071b2:	1c42      	adds	r2, r0, #1
 80071b4:	d101      	bne.n	80071ba <__sflush_r+0x76>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b903      	cbnz	r3, 80071bc <__sflush_r+0x78>
 80071ba:	6560      	str	r0, [r4, #84]	; 0x54
 80071bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071be:	602f      	str	r7, [r5, #0]
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d0cb      	beq.n	800715c <__sflush_r+0x18>
 80071c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071c8:	4299      	cmp	r1, r3
 80071ca:	d002      	beq.n	80071d2 <__sflush_r+0x8e>
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 f9e3 	bl	8007598 <_free_r>
 80071d2:	2000      	movs	r0, #0
 80071d4:	6360      	str	r0, [r4, #52]	; 0x34
 80071d6:	e7c2      	b.n	800715e <__sflush_r+0x1a>
 80071d8:	6a21      	ldr	r1, [r4, #32]
 80071da:	2301      	movs	r3, #1
 80071dc:	4628      	mov	r0, r5
 80071de:	47b0      	blx	r6
 80071e0:	1c41      	adds	r1, r0, #1
 80071e2:	d1c7      	bne.n	8007174 <__sflush_r+0x30>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0c4      	beq.n	8007174 <__sflush_r+0x30>
 80071ea:	2b1d      	cmp	r3, #29
 80071ec:	d001      	beq.n	80071f2 <__sflush_r+0xae>
 80071ee:	2b16      	cmp	r3, #22
 80071f0:	d101      	bne.n	80071f6 <__sflush_r+0xb2>
 80071f2:	602f      	str	r7, [r5, #0]
 80071f4:	e7b2      	b.n	800715c <__sflush_r+0x18>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	e7ae      	b.n	800715e <__sflush_r+0x1a>
 8007200:	690f      	ldr	r7, [r1, #16]
 8007202:	2f00      	cmp	r7, #0
 8007204:	d0aa      	beq.n	800715c <__sflush_r+0x18>
 8007206:	0793      	lsls	r3, r2, #30
 8007208:	bf18      	it	ne
 800720a:	2300      	movne	r3, #0
 800720c:	680e      	ldr	r6, [r1, #0]
 800720e:	bf08      	it	eq
 8007210:	694b      	ldreq	r3, [r1, #20]
 8007212:	1bf6      	subs	r6, r6, r7
 8007214:	600f      	str	r7, [r1, #0]
 8007216:	608b      	str	r3, [r1, #8]
 8007218:	2e00      	cmp	r6, #0
 800721a:	dd9f      	ble.n	800715c <__sflush_r+0x18>
 800721c:	4633      	mov	r3, r6
 800721e:	463a      	mov	r2, r7
 8007220:	4628      	mov	r0, r5
 8007222:	6a21      	ldr	r1, [r4, #32]
 8007224:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007228:	47e0      	blx	ip
 800722a:	2800      	cmp	r0, #0
 800722c:	dc06      	bgt.n	800723c <__sflush_r+0xf8>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	e790      	b.n	800715e <__sflush_r+0x1a>
 800723c:	4407      	add	r7, r0
 800723e:	1a36      	subs	r6, r6, r0
 8007240:	e7ea      	b.n	8007218 <__sflush_r+0xd4>
 8007242:	bf00      	nop
 8007244:	20400001 	.word	0x20400001

08007248 <_fflush_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b913      	cbnz	r3, 8007258 <_fflush_r+0x10>
 8007252:	2500      	movs	r5, #0
 8007254:	4628      	mov	r0, r5
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	b118      	cbz	r0, 8007262 <_fflush_r+0x1a>
 800725a:	6983      	ldr	r3, [r0, #24]
 800725c:	b90b      	cbnz	r3, 8007262 <_fflush_r+0x1a>
 800725e:	f000 f887 	bl	8007370 <__sinit>
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <_fflush_r+0x6c>)
 8007264:	429c      	cmp	r4, r3
 8007266:	d11b      	bne.n	80072a0 <_fflush_r+0x58>
 8007268:	686c      	ldr	r4, [r5, #4]
 800726a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0ef      	beq.n	8007252 <_fflush_r+0xa>
 8007272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007274:	07d0      	lsls	r0, r2, #31
 8007276:	d404      	bmi.n	8007282 <_fflush_r+0x3a>
 8007278:	0599      	lsls	r1, r3, #22
 800727a:	d402      	bmi.n	8007282 <_fflush_r+0x3a>
 800727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800727e:	f000 f915 	bl	80074ac <__retarget_lock_acquire_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	4621      	mov	r1, r4
 8007286:	f7ff ff5d 	bl	8007144 <__sflush_r>
 800728a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800728c:	4605      	mov	r5, r0
 800728e:	07da      	lsls	r2, r3, #31
 8007290:	d4e0      	bmi.n	8007254 <_fflush_r+0xc>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	059b      	lsls	r3, r3, #22
 8007296:	d4dd      	bmi.n	8007254 <_fflush_r+0xc>
 8007298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800729a:	f000 f908 	bl	80074ae <__retarget_lock_release_recursive>
 800729e:	e7d9      	b.n	8007254 <_fflush_r+0xc>
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_fflush_r+0x70>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <_fflush_r+0x62>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7df      	b.n	800726a <_fflush_r+0x22>
 80072aa:	4b04      	ldr	r3, [pc, #16]	; (80072bc <_fflush_r+0x74>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7da      	b.n	800726a <_fflush_r+0x22>
 80072b4:	08007af4 	.word	0x08007af4
 80072b8:	08007b14 	.word	0x08007b14
 80072bc:	08007ad4 	.word	0x08007ad4

080072c0 <std>:
 80072c0:	2300      	movs	r3, #0
 80072c2:	b510      	push	{r4, lr}
 80072c4:	4604      	mov	r4, r0
 80072c6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ce:	6083      	str	r3, [r0, #8]
 80072d0:	8181      	strh	r1, [r0, #12]
 80072d2:	6643      	str	r3, [r0, #100]	; 0x64
 80072d4:	81c2      	strh	r2, [r0, #14]
 80072d6:	6183      	str	r3, [r0, #24]
 80072d8:	4619      	mov	r1, r3
 80072da:	2208      	movs	r2, #8
 80072dc:	305c      	adds	r0, #92	; 0x5c
 80072de:	f7ff fb73 	bl	80069c8 <memset>
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <std+0x38>)
 80072e4:	6224      	str	r4, [r4, #32]
 80072e6:	6263      	str	r3, [r4, #36]	; 0x24
 80072e8:	4b04      	ldr	r3, [pc, #16]	; (80072fc <std+0x3c>)
 80072ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <std+0x40>)
 80072ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <std+0x44>)
 80072f2:	6323      	str	r3, [r4, #48]	; 0x30
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	080077f9 	.word	0x080077f9
 80072fc:	0800781b 	.word	0x0800781b
 8007300:	08007853 	.word	0x08007853
 8007304:	08007877 	.word	0x08007877

08007308 <_cleanup_r>:
 8007308:	4901      	ldr	r1, [pc, #4]	; (8007310 <_cleanup_r+0x8>)
 800730a:	f000 b8af 	b.w	800746c <_fwalk_reent>
 800730e:	bf00      	nop
 8007310:	08007249 	.word	0x08007249

08007314 <__sfmoreglue>:
 8007314:	2268      	movs	r2, #104	; 0x68
 8007316:	b570      	push	{r4, r5, r6, lr}
 8007318:	1e4d      	subs	r5, r1, #1
 800731a:	4355      	muls	r5, r2
 800731c:	460e      	mov	r6, r1
 800731e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007322:	f000 f9a1 	bl	8007668 <_malloc_r>
 8007326:	4604      	mov	r4, r0
 8007328:	b140      	cbz	r0, 800733c <__sfmoreglue+0x28>
 800732a:	2100      	movs	r1, #0
 800732c:	e9c0 1600 	strd	r1, r6, [r0]
 8007330:	300c      	adds	r0, #12
 8007332:	60a0      	str	r0, [r4, #8]
 8007334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007338:	f7ff fb46 	bl	80069c8 <memset>
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <__sfp_lock_acquire>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__sfp_lock_acquire+0x8>)
 8007342:	f000 b8b3 	b.w	80074ac <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	20000bb9 	.word	0x20000bb9

0800734c <__sfp_lock_release>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_release+0x8>)
 800734e:	f000 b8ae 	b.w	80074ae <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	20000bb9 	.word	0x20000bb9

08007358 <__sinit_lock_acquire>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sinit_lock_acquire+0x8>)
 800735a:	f000 b8a7 	b.w	80074ac <__retarget_lock_acquire_recursive>
 800735e:	bf00      	nop
 8007360:	20000bba 	.word	0x20000bba

08007364 <__sinit_lock_release>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sinit_lock_release+0x8>)
 8007366:	f000 b8a2 	b.w	80074ae <__retarget_lock_release_recursive>
 800736a:	bf00      	nop
 800736c:	20000bba 	.word	0x20000bba

08007370 <__sinit>:
 8007370:	b510      	push	{r4, lr}
 8007372:	4604      	mov	r4, r0
 8007374:	f7ff fff0 	bl	8007358 <__sinit_lock_acquire>
 8007378:	69a3      	ldr	r3, [r4, #24]
 800737a:	b11b      	cbz	r3, 8007384 <__sinit+0x14>
 800737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007380:	f7ff bff0 	b.w	8007364 <__sinit_lock_release>
 8007384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007388:	6523      	str	r3, [r4, #80]	; 0x50
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <__sinit+0x68>)
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <__sinit+0x6c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	62a2      	str	r2, [r4, #40]	; 0x28
 8007392:	42a3      	cmp	r3, r4
 8007394:	bf08      	it	eq
 8007396:	2301      	moveq	r3, #1
 8007398:	4620      	mov	r0, r4
 800739a:	bf08      	it	eq
 800739c:	61a3      	streq	r3, [r4, #24]
 800739e:	f000 f81f 	bl	80073e0 <__sfp>
 80073a2:	6060      	str	r0, [r4, #4]
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 f81b 	bl	80073e0 <__sfp>
 80073aa:	60a0      	str	r0, [r4, #8]
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 f817 	bl	80073e0 <__sfp>
 80073b2:	2200      	movs	r2, #0
 80073b4:	2104      	movs	r1, #4
 80073b6:	60e0      	str	r0, [r4, #12]
 80073b8:	6860      	ldr	r0, [r4, #4]
 80073ba:	f7ff ff81 	bl	80072c0 <std>
 80073be:	2201      	movs	r2, #1
 80073c0:	2109      	movs	r1, #9
 80073c2:	68a0      	ldr	r0, [r4, #8]
 80073c4:	f7ff ff7c 	bl	80072c0 <std>
 80073c8:	2202      	movs	r2, #2
 80073ca:	2112      	movs	r1, #18
 80073cc:	68e0      	ldr	r0, [r4, #12]
 80073ce:	f7ff ff77 	bl	80072c0 <std>
 80073d2:	2301      	movs	r3, #1
 80073d4:	61a3      	str	r3, [r4, #24]
 80073d6:	e7d1      	b.n	800737c <__sinit+0xc>
 80073d8:	08007a9c 	.word	0x08007a9c
 80073dc:	08007309 	.word	0x08007309

080073e0 <__sfp>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	4607      	mov	r7, r0
 80073e4:	f7ff ffac 	bl	8007340 <__sfp_lock_acquire>
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <__sfp+0x84>)
 80073ea:	681e      	ldr	r6, [r3, #0]
 80073ec:	69b3      	ldr	r3, [r6, #24]
 80073ee:	b913      	cbnz	r3, 80073f6 <__sfp+0x16>
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff ffbd 	bl	8007370 <__sinit>
 80073f6:	3648      	adds	r6, #72	; 0x48
 80073f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	d503      	bpl.n	8007408 <__sfp+0x28>
 8007400:	6833      	ldr	r3, [r6, #0]
 8007402:	b30b      	cbz	r3, 8007448 <__sfp+0x68>
 8007404:	6836      	ldr	r6, [r6, #0]
 8007406:	e7f7      	b.n	80073f8 <__sfp+0x18>
 8007408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800740c:	b9d5      	cbnz	r5, 8007444 <__sfp+0x64>
 800740e:	4b16      	ldr	r3, [pc, #88]	; (8007468 <__sfp+0x88>)
 8007410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007414:	60e3      	str	r3, [r4, #12]
 8007416:	6665      	str	r5, [r4, #100]	; 0x64
 8007418:	f000 f847 	bl	80074aa <__retarget_lock_init_recursive>
 800741c:	f7ff ff96 	bl	800734c <__sfp_lock_release>
 8007420:	2208      	movs	r2, #8
 8007422:	4629      	mov	r1, r5
 8007424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800742c:	6025      	str	r5, [r4, #0]
 800742e:	61a5      	str	r5, [r4, #24]
 8007430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007434:	f7ff fac8 	bl	80069c8 <memset>
 8007438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800743c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007440:	4620      	mov	r0, r4
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007444:	3468      	adds	r4, #104	; 0x68
 8007446:	e7d9      	b.n	80073fc <__sfp+0x1c>
 8007448:	2104      	movs	r1, #4
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff ff62 	bl	8007314 <__sfmoreglue>
 8007450:	4604      	mov	r4, r0
 8007452:	6030      	str	r0, [r6, #0]
 8007454:	2800      	cmp	r0, #0
 8007456:	d1d5      	bne.n	8007404 <__sfp+0x24>
 8007458:	f7ff ff78 	bl	800734c <__sfp_lock_release>
 800745c:	230c      	movs	r3, #12
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	e7ee      	b.n	8007440 <__sfp+0x60>
 8007462:	bf00      	nop
 8007464:	08007a9c 	.word	0x08007a9c
 8007468:	ffff0001 	.word	0xffff0001

0800746c <_fwalk_reent>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4606      	mov	r6, r0
 8007472:	4688      	mov	r8, r1
 8007474:	2700      	movs	r7, #0
 8007476:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800747a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800747e:	f1b9 0901 	subs.w	r9, r9, #1
 8007482:	d505      	bpl.n	8007490 <_fwalk_reent+0x24>
 8007484:	6824      	ldr	r4, [r4, #0]
 8007486:	2c00      	cmp	r4, #0
 8007488:	d1f7      	bne.n	800747a <_fwalk_reent+0xe>
 800748a:	4638      	mov	r0, r7
 800748c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d907      	bls.n	80074a6 <_fwalk_reent+0x3a>
 8007496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800749a:	3301      	adds	r3, #1
 800749c:	d003      	beq.n	80074a6 <_fwalk_reent+0x3a>
 800749e:	4629      	mov	r1, r5
 80074a0:	4630      	mov	r0, r6
 80074a2:	47c0      	blx	r8
 80074a4:	4307      	orrs	r7, r0
 80074a6:	3568      	adds	r5, #104	; 0x68
 80074a8:	e7e9      	b.n	800747e <_fwalk_reent+0x12>

080074aa <__retarget_lock_init_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_acquire_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_release_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <__swhatbuf_r>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	460e      	mov	r6, r1
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	4614      	mov	r4, r2
 80074ba:	2900      	cmp	r1, #0
 80074bc:	461d      	mov	r5, r3
 80074be:	b096      	sub	sp, #88	; 0x58
 80074c0:	da08      	bge.n	80074d4 <__swhatbuf_r+0x24>
 80074c2:	2200      	movs	r2, #0
 80074c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	061a      	lsls	r2, r3, #24
 80074cc:	d410      	bmi.n	80074f0 <__swhatbuf_r+0x40>
 80074ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d2:	e00e      	b.n	80074f2 <__swhatbuf_r+0x42>
 80074d4:	466a      	mov	r2, sp
 80074d6:	f000 f9f5 	bl	80078c4 <_fstat_r>
 80074da:	2800      	cmp	r0, #0
 80074dc:	dbf1      	blt.n	80074c2 <__swhatbuf_r+0x12>
 80074de:	9a01      	ldr	r2, [sp, #4]
 80074e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074e8:	425a      	negs	r2, r3
 80074ea:	415a      	adcs	r2, r3
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	e7ee      	b.n	80074ce <__swhatbuf_r+0x1e>
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	2000      	movs	r0, #0
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	b016      	add	sp, #88	; 0x58
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080074fc <__smakebuf_r>:
 80074fc:	898b      	ldrh	r3, [r1, #12]
 80074fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007500:	079d      	lsls	r5, r3, #30
 8007502:	4606      	mov	r6, r0
 8007504:	460c      	mov	r4, r1
 8007506:	d507      	bpl.n	8007518 <__smakebuf_r+0x1c>
 8007508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	2301      	movs	r3, #1
 8007512:	6163      	str	r3, [r4, #20]
 8007514:	b002      	add	sp, #8
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	466a      	mov	r2, sp
 800751a:	ab01      	add	r3, sp, #4
 800751c:	f7ff ffc8 	bl	80074b0 <__swhatbuf_r>
 8007520:	9900      	ldr	r1, [sp, #0]
 8007522:	4605      	mov	r5, r0
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f89f 	bl	8007668 <_malloc_r>
 800752a:	b948      	cbnz	r0, 8007540 <__smakebuf_r+0x44>
 800752c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007530:	059a      	lsls	r2, r3, #22
 8007532:	d4ef      	bmi.n	8007514 <__smakebuf_r+0x18>
 8007534:	f023 0303 	bic.w	r3, r3, #3
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	e7e3      	b.n	8007508 <__smakebuf_r+0xc>
 8007540:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <__smakebuf_r+0x7c>)
 8007542:	62b3      	str	r3, [r6, #40]	; 0x28
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	6020      	str	r0, [r4, #0]
 8007548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	6120      	str	r0, [r4, #16]
 8007552:	6163      	str	r3, [r4, #20]
 8007554:	9b01      	ldr	r3, [sp, #4]
 8007556:	b15b      	cbz	r3, 8007570 <__smakebuf_r+0x74>
 8007558:	4630      	mov	r0, r6
 800755a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800755e:	f000 f9c3 	bl	80078e8 <_isatty_r>
 8007562:	b128      	cbz	r0, 8007570 <__smakebuf_r+0x74>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	f043 0301 	orr.w	r3, r3, #1
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	89a0      	ldrh	r0, [r4, #12]
 8007572:	4305      	orrs	r5, r0
 8007574:	81a5      	strh	r5, [r4, #12]
 8007576:	e7cd      	b.n	8007514 <__smakebuf_r+0x18>
 8007578:	08007309 	.word	0x08007309

0800757c <memchr>:
 800757c:	4603      	mov	r3, r0
 800757e:	b510      	push	{r4, lr}
 8007580:	b2c9      	uxtb	r1, r1
 8007582:	4402      	add	r2, r0
 8007584:	4293      	cmp	r3, r2
 8007586:	4618      	mov	r0, r3
 8007588:	d101      	bne.n	800758e <memchr+0x12>
 800758a:	2000      	movs	r0, #0
 800758c:	e003      	b.n	8007596 <memchr+0x1a>
 800758e:	7804      	ldrb	r4, [r0, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	428c      	cmp	r4, r1
 8007594:	d1f6      	bne.n	8007584 <memchr+0x8>
 8007596:	bd10      	pop	{r4, pc}

08007598 <_free_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4605      	mov	r5, r0
 800759c:	2900      	cmp	r1, #0
 800759e:	d040      	beq.n	8007622 <_free_r+0x8a>
 80075a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a4:	1f0c      	subs	r4, r1, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfb8      	it	lt
 80075aa:	18e4      	addlt	r4, r4, r3
 80075ac:	f000 f9be 	bl	800792c <__malloc_lock>
 80075b0:	4a1c      	ldr	r2, [pc, #112]	; (8007624 <_free_r+0x8c>)
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	b933      	cbnz	r3, 80075c4 <_free_r+0x2c>
 80075b6:	6063      	str	r3, [r4, #4]
 80075b8:	6014      	str	r4, [r2, #0]
 80075ba:	4628      	mov	r0, r5
 80075bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c0:	f000 b9ba 	b.w	8007938 <__malloc_unlock>
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d908      	bls.n	80075da <_free_r+0x42>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	1821      	adds	r1, r4, r0
 80075cc:	428b      	cmp	r3, r1
 80075ce:	bf01      	itttt	eq
 80075d0:	6819      	ldreq	r1, [r3, #0]
 80075d2:	685b      	ldreq	r3, [r3, #4]
 80075d4:	1809      	addeq	r1, r1, r0
 80075d6:	6021      	streq	r1, [r4, #0]
 80075d8:	e7ed      	b.n	80075b6 <_free_r+0x1e>
 80075da:	461a      	mov	r2, r3
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	b10b      	cbz	r3, 80075e4 <_free_r+0x4c>
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	d9fa      	bls.n	80075da <_free_r+0x42>
 80075e4:	6811      	ldr	r1, [r2, #0]
 80075e6:	1850      	adds	r0, r2, r1
 80075e8:	42a0      	cmp	r0, r4
 80075ea:	d10b      	bne.n	8007604 <_free_r+0x6c>
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	4401      	add	r1, r0
 80075f0:	1850      	adds	r0, r2, r1
 80075f2:	4283      	cmp	r3, r0
 80075f4:	6011      	str	r1, [r2, #0]
 80075f6:	d1e0      	bne.n	80075ba <_free_r+0x22>
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	4401      	add	r1, r0
 80075fe:	6011      	str	r1, [r2, #0]
 8007600:	6053      	str	r3, [r2, #4]
 8007602:	e7da      	b.n	80075ba <_free_r+0x22>
 8007604:	d902      	bls.n	800760c <_free_r+0x74>
 8007606:	230c      	movs	r3, #12
 8007608:	602b      	str	r3, [r5, #0]
 800760a:	e7d6      	b.n	80075ba <_free_r+0x22>
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	1821      	adds	r1, r4, r0
 8007610:	428b      	cmp	r3, r1
 8007612:	bf01      	itttt	eq
 8007614:	6819      	ldreq	r1, [r3, #0]
 8007616:	685b      	ldreq	r3, [r3, #4]
 8007618:	1809      	addeq	r1, r1, r0
 800761a:	6021      	streq	r1, [r4, #0]
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	6054      	str	r4, [r2, #4]
 8007620:	e7cb      	b.n	80075ba <_free_r+0x22>
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	20000bbc 	.word	0x20000bbc

08007628 <sbrk_aligned>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	4e0e      	ldr	r6, [pc, #56]	; (8007664 <sbrk_aligned+0x3c>)
 800762c:	460c      	mov	r4, r1
 800762e:	6831      	ldr	r1, [r6, #0]
 8007630:	4605      	mov	r5, r0
 8007632:	b911      	cbnz	r1, 800763a <sbrk_aligned+0x12>
 8007634:	f000 f88c 	bl	8007750 <_sbrk_r>
 8007638:	6030      	str	r0, [r6, #0]
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f000 f887 	bl	8007750 <_sbrk_r>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d00a      	beq.n	800765c <sbrk_aligned+0x34>
 8007646:	1cc4      	adds	r4, r0, #3
 8007648:	f024 0403 	bic.w	r4, r4, #3
 800764c:	42a0      	cmp	r0, r4
 800764e:	d007      	beq.n	8007660 <sbrk_aligned+0x38>
 8007650:	1a21      	subs	r1, r4, r0
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f87c 	bl	8007750 <_sbrk_r>
 8007658:	3001      	adds	r0, #1
 800765a:	d101      	bne.n	8007660 <sbrk_aligned+0x38>
 800765c:	f04f 34ff 	mov.w	r4, #4294967295
 8007660:	4620      	mov	r0, r4
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	20000bc0 	.word	0x20000bc0

08007668 <_malloc_r>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	1ccd      	adds	r5, r1, #3
 800766e:	f025 0503 	bic.w	r5, r5, #3
 8007672:	3508      	adds	r5, #8
 8007674:	2d0c      	cmp	r5, #12
 8007676:	bf38      	it	cc
 8007678:	250c      	movcc	r5, #12
 800767a:	2d00      	cmp	r5, #0
 800767c:	4607      	mov	r7, r0
 800767e:	db01      	blt.n	8007684 <_malloc_r+0x1c>
 8007680:	42a9      	cmp	r1, r5
 8007682:	d905      	bls.n	8007690 <_malloc_r+0x28>
 8007684:	230c      	movs	r3, #12
 8007686:	2600      	movs	r6, #0
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	4630      	mov	r0, r6
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	4e2e      	ldr	r6, [pc, #184]	; (800774c <_malloc_r+0xe4>)
 8007692:	f000 f94b 	bl	800792c <__malloc_lock>
 8007696:	6833      	ldr	r3, [r6, #0]
 8007698:	461c      	mov	r4, r3
 800769a:	bb34      	cbnz	r4, 80076ea <_malloc_r+0x82>
 800769c:	4629      	mov	r1, r5
 800769e:	4638      	mov	r0, r7
 80076a0:	f7ff ffc2 	bl	8007628 <sbrk_aligned>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	4604      	mov	r4, r0
 80076a8:	d14d      	bne.n	8007746 <_malloc_r+0xde>
 80076aa:	6834      	ldr	r4, [r6, #0]
 80076ac:	4626      	mov	r6, r4
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	d140      	bne.n	8007734 <_malloc_r+0xcc>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	4631      	mov	r1, r6
 80076b6:	4638      	mov	r0, r7
 80076b8:	eb04 0803 	add.w	r8, r4, r3
 80076bc:	f000 f848 	bl	8007750 <_sbrk_r>
 80076c0:	4580      	cmp	r8, r0
 80076c2:	d13a      	bne.n	800773a <_malloc_r+0xd2>
 80076c4:	6821      	ldr	r1, [r4, #0]
 80076c6:	3503      	adds	r5, #3
 80076c8:	1a6d      	subs	r5, r5, r1
 80076ca:	f025 0503 	bic.w	r5, r5, #3
 80076ce:	3508      	adds	r5, #8
 80076d0:	2d0c      	cmp	r5, #12
 80076d2:	bf38      	it	cc
 80076d4:	250c      	movcc	r5, #12
 80076d6:	4638      	mov	r0, r7
 80076d8:	4629      	mov	r1, r5
 80076da:	f7ff ffa5 	bl	8007628 <sbrk_aligned>
 80076de:	3001      	adds	r0, #1
 80076e0:	d02b      	beq.n	800773a <_malloc_r+0xd2>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	442b      	add	r3, r5
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	e00e      	b.n	8007708 <_malloc_r+0xa0>
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	1b52      	subs	r2, r2, r5
 80076ee:	d41e      	bmi.n	800772e <_malloc_r+0xc6>
 80076f0:	2a0b      	cmp	r2, #11
 80076f2:	d916      	bls.n	8007722 <_malloc_r+0xba>
 80076f4:	1961      	adds	r1, r4, r5
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	6025      	str	r5, [r4, #0]
 80076fa:	bf18      	it	ne
 80076fc:	6059      	strne	r1, [r3, #4]
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	bf08      	it	eq
 8007702:	6031      	streq	r1, [r6, #0]
 8007704:	5162      	str	r2, [r4, r5]
 8007706:	604b      	str	r3, [r1, #4]
 8007708:	4638      	mov	r0, r7
 800770a:	f104 060b 	add.w	r6, r4, #11
 800770e:	f000 f913 	bl	8007938 <__malloc_unlock>
 8007712:	f026 0607 	bic.w	r6, r6, #7
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	1af2      	subs	r2, r6, r3
 800771a:	d0b6      	beq.n	800768a <_malloc_r+0x22>
 800771c:	1b9b      	subs	r3, r3, r6
 800771e:	50a3      	str	r3, [r4, r2]
 8007720:	e7b3      	b.n	800768a <_malloc_r+0x22>
 8007722:	6862      	ldr	r2, [r4, #4]
 8007724:	42a3      	cmp	r3, r4
 8007726:	bf0c      	ite	eq
 8007728:	6032      	streq	r2, [r6, #0]
 800772a:	605a      	strne	r2, [r3, #4]
 800772c:	e7ec      	b.n	8007708 <_malloc_r+0xa0>
 800772e:	4623      	mov	r3, r4
 8007730:	6864      	ldr	r4, [r4, #4]
 8007732:	e7b2      	b.n	800769a <_malloc_r+0x32>
 8007734:	4634      	mov	r4, r6
 8007736:	6876      	ldr	r6, [r6, #4]
 8007738:	e7b9      	b.n	80076ae <_malloc_r+0x46>
 800773a:	230c      	movs	r3, #12
 800773c:	4638      	mov	r0, r7
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	f000 f8fa 	bl	8007938 <__malloc_unlock>
 8007744:	e7a1      	b.n	800768a <_malloc_r+0x22>
 8007746:	6025      	str	r5, [r4, #0]
 8007748:	e7de      	b.n	8007708 <_malloc_r+0xa0>
 800774a:	bf00      	nop
 800774c:	20000bbc 	.word	0x20000bbc

08007750 <_sbrk_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	2300      	movs	r3, #0
 8007754:	4d05      	ldr	r5, [pc, #20]	; (800776c <_sbrk_r+0x1c>)
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7fc f800 	bl	8003760 <_sbrk>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_sbrk_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_sbrk_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20000bc4 	.word	0x20000bc4

08007770 <_raise_r>:
 8007770:	291f      	cmp	r1, #31
 8007772:	b538      	push	{r3, r4, r5, lr}
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	d904      	bls.n	8007784 <_raise_r+0x14>
 800777a:	2316      	movs	r3, #22
 800777c:	6003      	str	r3, [r0, #0]
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007786:	b112      	cbz	r2, 800778e <_raise_r+0x1e>
 8007788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800778c:	b94b      	cbnz	r3, 80077a2 <_raise_r+0x32>
 800778e:	4620      	mov	r0, r4
 8007790:	f000 f830 	bl	80077f4 <_getpid_r>
 8007794:	462a      	mov	r2, r5
 8007796:	4601      	mov	r1, r0
 8007798:	4620      	mov	r0, r4
 800779a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800779e:	f000 b817 	b.w	80077d0 <_kill_r>
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d00a      	beq.n	80077bc <_raise_r+0x4c>
 80077a6:	1c59      	adds	r1, r3, #1
 80077a8:	d103      	bne.n	80077b2 <_raise_r+0x42>
 80077aa:	2316      	movs	r3, #22
 80077ac:	6003      	str	r3, [r0, #0]
 80077ae:	2001      	movs	r0, #1
 80077b0:	e7e7      	b.n	8007782 <_raise_r+0x12>
 80077b2:	2400      	movs	r4, #0
 80077b4:	4628      	mov	r0, r5
 80077b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077ba:	4798      	blx	r3
 80077bc:	2000      	movs	r0, #0
 80077be:	e7e0      	b.n	8007782 <_raise_r+0x12>

080077c0 <raise>:
 80077c0:	4b02      	ldr	r3, [pc, #8]	; (80077cc <raise+0xc>)
 80077c2:	4601      	mov	r1, r0
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	f7ff bfd3 	b.w	8007770 <_raise_r>
 80077ca:	bf00      	nop
 80077cc:	20000010 	.word	0x20000010

080077d0 <_kill_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	2300      	movs	r3, #0
 80077d4:	4d06      	ldr	r5, [pc, #24]	; (80077f0 <_kill_r+0x20>)
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	f7fb ff3c 	bl	800365a <_kill>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	d102      	bne.n	80077ec <_kill_r+0x1c>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	b103      	cbz	r3, 80077ec <_kill_r+0x1c>
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	20000bc4 	.word	0x20000bc4

080077f4 <_getpid_r>:
 80077f4:	f7fb bf2a 	b.w	800364c <_getpid>

080077f8 <__sread>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	460c      	mov	r4, r1
 80077fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007800:	f000 f8a0 	bl	8007944 <_read_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	bfab      	itete	ge
 8007808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800780a:	89a3      	ldrhlt	r3, [r4, #12]
 800780c:	181b      	addge	r3, r3, r0
 800780e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007812:	bfac      	ite	ge
 8007814:	6563      	strge	r3, [r4, #84]	; 0x54
 8007816:	81a3      	strhlt	r3, [r4, #12]
 8007818:	bd10      	pop	{r4, pc}

0800781a <__swrite>:
 800781a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800781e:	461f      	mov	r7, r3
 8007820:	898b      	ldrh	r3, [r1, #12]
 8007822:	4605      	mov	r5, r0
 8007824:	05db      	lsls	r3, r3, #23
 8007826:	460c      	mov	r4, r1
 8007828:	4616      	mov	r6, r2
 800782a:	d505      	bpl.n	8007838 <__swrite+0x1e>
 800782c:	2302      	movs	r3, #2
 800782e:	2200      	movs	r2, #0
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	f000 f868 	bl	8007908 <_lseek_r>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	4632      	mov	r2, r6
 800783c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	4628      	mov	r0, r5
 8007844:	463b      	mov	r3, r7
 8007846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	f000 b817 	b.w	8007880 <_write_r>

08007852 <__sseek>:
 8007852:	b510      	push	{r4, lr}
 8007854:	460c      	mov	r4, r1
 8007856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785a:	f000 f855 	bl	8007908 <_lseek_r>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	bf15      	itete	ne
 8007864:	6560      	strne	r0, [r4, #84]	; 0x54
 8007866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800786a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800786e:	81a3      	strheq	r3, [r4, #12]
 8007870:	bf18      	it	ne
 8007872:	81a3      	strhne	r3, [r4, #12]
 8007874:	bd10      	pop	{r4, pc}

08007876 <__sclose>:
 8007876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787a:	f000 b813 	b.w	80078a4 <_close_r>
	...

08007880 <_write_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	2200      	movs	r2, #0
 800788a:	4d05      	ldr	r5, [pc, #20]	; (80078a0 <_write_r+0x20>)
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7fb ff1a 	bl	80036c8 <_write>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_write_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_write_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000bc4 	.word	0x20000bc4

080078a4 <_close_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	2300      	movs	r3, #0
 80078a8:	4d05      	ldr	r5, [pc, #20]	; (80078c0 <_close_r+0x1c>)
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	f7fb ff26 	bl	8003700 <_close>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d102      	bne.n	80078be <_close_r+0x1a>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	b103      	cbz	r3, 80078be <_close_r+0x1a>
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	20000bc4 	.word	0x20000bc4

080078c4 <_fstat_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	2300      	movs	r3, #0
 80078c8:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_fstat_r+0x20>)
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	4611      	mov	r1, r2
 80078d0:	602b      	str	r3, [r5, #0]
 80078d2:	f7fb ff20 	bl	8003716 <_fstat>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d102      	bne.n	80078e0 <_fstat_r+0x1c>
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	b103      	cbz	r3, 80078e0 <_fstat_r+0x1c>
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	bd38      	pop	{r3, r4, r5, pc}
 80078e2:	bf00      	nop
 80078e4:	20000bc4 	.word	0x20000bc4

080078e8 <_isatty_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	2300      	movs	r3, #0
 80078ec:	4d05      	ldr	r5, [pc, #20]	; (8007904 <_isatty_r+0x1c>)
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7fb ff1e 	bl	8003734 <_isatty>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_isatty_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_isatty_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20000bc4 	.word	0x20000bc4

08007908 <_lseek_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	2200      	movs	r2, #0
 8007912:	4d05      	ldr	r5, [pc, #20]	; (8007928 <_lseek_r+0x20>)
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	f7fb ff16 	bl	8003748 <_lseek>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_lseek_r+0x1e>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_lseek_r+0x1e>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20000bc4 	.word	0x20000bc4

0800792c <__malloc_lock>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__malloc_lock+0x8>)
 800792e:	f7ff bdbd 	b.w	80074ac <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	20000bb8 	.word	0x20000bb8

08007938 <__malloc_unlock>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__malloc_unlock+0x8>)
 800793a:	f7ff bdb8 	b.w	80074ae <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	20000bb8 	.word	0x20000bb8

08007944 <_read_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	2200      	movs	r2, #0
 800794e:	4d05      	ldr	r5, [pc, #20]	; (8007964 <_read_r+0x20>)
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7fb fe9b 	bl	800368e <_read>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_read_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_read_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	20000bc4 	.word	0x20000bc4

08007968 <roundf>:
 8007968:	b508      	push	{r3, lr}
 800796a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800796e:	3b7f      	subs	r3, #127	; 0x7f
 8007970:	2b16      	cmp	r3, #22
 8007972:	4601      	mov	r1, r0
 8007974:	4602      	mov	r2, r0
 8007976:	dc14      	bgt.n	80079a2 <roundf+0x3a>
 8007978:	2b00      	cmp	r3, #0
 800797a:	da07      	bge.n	800798c <roundf+0x24>
 800797c:	3301      	adds	r3, #1
 800797e:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8007982:	d101      	bne.n	8007988 <roundf+0x20>
 8007984:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8007988:	4608      	mov	r0, r1
 800798a:	bd08      	pop	{r3, pc}
 800798c:	4808      	ldr	r0, [pc, #32]	; (80079b0 <roundf+0x48>)
 800798e:	4118      	asrs	r0, r3
 8007990:	4201      	tst	r1, r0
 8007992:	d0f9      	beq.n	8007988 <roundf+0x20>
 8007994:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007998:	4119      	asrs	r1, r3
 800799a:	4411      	add	r1, r2
 800799c:	ea21 0100 	bic.w	r1, r1, r0
 80079a0:	e7f2      	b.n	8007988 <roundf+0x20>
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d1f0      	bne.n	8007988 <roundf+0x20>
 80079a6:	f7f9 f863 	bl	8000a70 <__addsf3>
 80079aa:	4601      	mov	r1, r0
 80079ac:	e7ec      	b.n	8007988 <roundf+0x20>
 80079ae:	bf00      	nop
 80079b0:	007fffff 	.word	0x007fffff

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
