
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080099e8  080099e8  000199e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d28  08009d28  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009d28  08009d28  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d28  08009d28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  20000074  08009da4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  08009da4  00020bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119ac  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e0  00000000  00000000  00031a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00034430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000359b  00000000  00000000  00036620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001543b  00000000  00000000  00039bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db6c  00000000  00000000  0004eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecb62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e8  00000000  00000000  000ecbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	080099cc 	.word	0x080099cc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	080099cc 	.word	0x080099cc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2uiz>:
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	d20e      	bcs.n	800118e <__aeabi_f2uiz+0x22>
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30b      	bcc.n	800118e <__aeabi_f2uiz+0x22>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d409      	bmi.n	8001194 <__aeabi_f2uiz+0x28>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	fa23 f002 	lsr.w	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr
 8001194:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001198:	d101      	bne.n	800119e <__aeabi_f2uiz+0x32>
 800119a:	0242      	lsls	r2, r0, #9
 800119c:	d102      	bne.n	80011a4 <__aeabi_f2uiz+0x38>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	4770      	bx	lr
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <chao_move_angle>:
		}
	}
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 80011b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 80011bc:	4984      	ldr	r1, [pc, #528]	; (80013d0 <chao_move_angle+0x220>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fec2 	bl	8000f48 <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f992 	bl	80004f0 <__aeabi_f2d>
 80011cc:	a37e      	add	r3, pc, #504	; (adr r3, 80013c8 <chao_move_angle+0x218>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f9e5 	bl	80005a0 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fca1 	bl	8000b24 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff f982 	bl	80004f0 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff f97d 	bl	80004f0 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f007 fb7f 	bl	8008900 <cos>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f9c9 	bl	80005a0 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4690      	mov	r8, r2
 8001214:	4699      	mov	r9, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f96a 	bl	80004f0 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f965 	bl	80004f0 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f007 fbb1 	bl	8008994 <sin>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f9b1 	bl	80005a0 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4640      	mov	r0, r8
 8001244:	4649      	mov	r1, r9
 8001246:	f7fe fff3 	bl	8000230 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc67 	bl	8000b24 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <chao_move_angle+0x224>)
 800125a:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff f947 	bl	80004f0 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff f942 	bl	80004f0 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f007 fb44 	bl	8008900 <cos>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f98e 	bl	80005a0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff f92f 	bl	80004f0 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f92a 	bl	80004f0 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f007 fb76 	bl	8008994 <sin>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f976 	bl	80005a0 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4640      	mov	r0, r8
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffba 	bl	8000234 <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc2c 	bl	8000b24 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <chao_move_angle+0x228>)
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff f90c 	bl	80004f0 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff f907 	bl	80004f0 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f007 fb09 	bl	8008900 <cos>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f953 	bl	80005a0 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4690      	mov	r8, r2
 8001300:	4699      	mov	r9, r3
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff f8f4 	bl	80004f0 <__aeabi_f2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff f8ef 	bl	80004f0 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f007 fb3b 	bl	8008994 <sin>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f93b 	bl	80005a0 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4640      	mov	r0, r8
 8001330:	4649      	mov	r1, r9
 8001332:	f7fe ff7f 	bl	8000234 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbf1 	bl	8000b24 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <chao_move_angle+0x22c>)
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f7ff f8d1 	bl	80004f0 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff f8cc 	bl	80004f0 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f007 face 	bl	8008900 <cos>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff f918 	bl	80005a0 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4690      	mov	r8, r2
 8001376:	4699      	mov	r9, r3
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff f8b9 	bl	80004f0 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff f8b4 	bl	80004f0 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f007 fb00 	bl	8008994 <sin>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff f900 	bl	80005a0 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4640      	mov	r0, r8
 80013a6:	4649      	mov	r1, r9
 80013a8:	f7fe ff42 	bl	8000230 <__aeabi_dsub>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fbb6 	bl	8000b24 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <chao_move_angle+0x230>)
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c8:	54442d18 	.word	0x54442d18
 80013cc:	400921fb 	.word	0x400921fb
 80013d0:	43340000 	.word	0x43340000
 80013d4:	2000098c 	.word	0x2000098c
 80013d8:	200009c8 	.word	0x200009c8
 80013dc:	20000a04 	.word	0x20000a04
 80013e0:	20000a40 	.word	0x20000a40

080013e4 <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <huansic_jy62_init+0x12>
		return IMU_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e026      	b.n	8001444 <huansic_jy62_init+0x60>

	if (!himu->huart)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e020      	b.n	8001444 <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 8001402:	2003      	movs	r0, #3
 8001404:	f002 fda8 	bl	8003f58 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	230a      	movs	r3, #10
 800140e:	2203      	movs	r2, #3
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <huansic_jy62_init+0x68>)
 8001412:	f005 fc07 	bl	8006c24 <HAL_UART_Transmit>

// instead, just use DMA
	himu->pending_alignment = 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3334      	adds	r3, #52	; 0x34
 8001426:	2221      	movs	r2, #33	; 0x21
 8001428:	4619      	mov	r1, r3
 800142a:	f005 fcbd 	bl	8006da8 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0204 	bic.w	r2, r2, #4
 8001440:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000

08001450 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e112      	b.n	8001688 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	2300      	movs	r3, #0
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	e0ed      	b.n	8001648 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001476:	2b55      	cmp	r3, #85	; 0x55
 8001478:	d01c      	beq.n	80014b4 <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3334      	adds	r3, #52	; 0x34
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	f005 fc5b 	bl	8006d48 <HAL_UART_Receive_IT>
			if (i) {
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	3b01      	subs	r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fa69 	bl	8001978 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80014a6:	f002 fd4d 	bl	8003f44 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 80014b0:	2305      	movs	r3, #5
 80014b2:	e0e9      	b.n	8001688 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014be:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	3301      	adds	r3, #1
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	4413      	add	r3, r2
 80014d0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	3302      	adds	r3, #2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	4413      	add	r3, r2
 80014e2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	3303      	adds	r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	4413      	add	r3, r2
 80014f4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	3304      	adds	r3, #4
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	4413      	add	r3, r2
 8001506:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	3305      	adds	r3, #5
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	4413      	add	r3, r2
 8001518:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	3306      	adds	r3, #6
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	4413      	add	r3, r2
 800152a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	3307      	adds	r3, #7
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	4413      	add	r3, r2
 800153c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	3308      	adds	r3, #8
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	4413      	add	r3, r2
 800154e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	3309      	adds	r3, #9
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	4413      	add	r3, r2
 8001560:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	330a      	adds	r3, #10
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800156e:	7b7a      	ldrb	r2, [r7, #13]
 8001570:	429a      	cmp	r2, r3
 8001572:	d01c      	beq.n	80015ae <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3334      	adds	r3, #52	; 0x34
 8001584:	2201      	movs	r2, #1
 8001586:	4619      	mov	r1, r3
 8001588:	f005 fbde 	bl	8006d48 <HAL_UART_Receive_IT>
				if (i) {
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	3b01      	subs	r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9ec 	bl	8001978 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80015a0:	f002 fcd0 	bl	8003f44 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 80015aa:	2304      	movs	r3, #4
 80015ac:	e06c      	b.n	8001688 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	3301      	adds	r3, #1
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ba:	2b51      	cmp	r3, #81	; 0x51
 80015bc:	d105      	bne.n	80015ca <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8c4 	bl	8001750 <__huansic_jy62_decode_accel>
 80015c8:	e038      	b.n	800163c <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	3301      	adds	r3, #1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015d6:	2b52      	cmp	r3, #82	; 0x52
 80015d8:	d105      	bne.n	80015e6 <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f920 	bl	8001824 <__huansic_jy62_decode_omega>
 80015e4:	e02a      	b.n	800163c <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	3301      	adds	r3, #1
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015f2:	2b53      	cmp	r3, #83	; 0x53
 80015f4:	d105      	bne.n	8001602 <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f966 	bl	80018cc <__huansic_jy62_decode_theta>
 8001600:	e01c      	b.n	800163c <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3334      	adds	r3, #52	; 0x34
 8001612:	2201      	movs	r2, #1
 8001614:	4619      	mov	r1, r3
 8001616:	f005 fb97 	bl	8006d48 <HAL_UART_Receive_IT>
				if (i) {
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3b01      	subs	r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f9a5 	bl	8001978 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800162e:	f002 fc89 	bl	8003f44 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 8001638:	2306      	movs	r3, #6
 800163a:	e025      	b.n	8001688 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	330b      	adds	r3, #11
 8001646:	73bb      	strb	r3, [r7, #14]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b02      	cmp	r3, #2
 800164c:	f67f af0e 	bls.w	800146c <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 8001650:	f002 fc78 	bl	8003f44 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 800165a:	2102      	movs	r1, #2
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f98b 	bl	8001978 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3334      	adds	r3, #52	; 0x34
 800166a:	2221      	movs	r2, #33	; 0x21
 800166c:	4619      	mov	r1, r3
 800166e:	f005 fb9b 	bl	8006da8 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0204 	bic.w	r2, r2, #4
 8001684:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e029      	b.n	80016f6 <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016a8:	2b55      	cmp	r3, #85	; 0x55
 80016aa:	d00d      	beq.n	80016c8 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3334      	adds	r3, #52	; 0x34
 80016bc:	2201      	movs	r2, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	f005 fb42 	bl	8006d48 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 80016c4:	2305      	movs	r3, #5
 80016c6:	e016      	b.n	80016f6 <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3335      	adds	r3, #53	; 0x35
 80016d8:	2220      	movs	r2, #32
 80016da:	4619      	mov	r1, r3
 80016dc:	f005 fb64 	bl	8006da8 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 80016f4:	2300      	movs	r3, #0
	}
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3334      	adds	r3, #52	; 0x34
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	f005 fb15 	bl	8006d48 <HAL_UART_Receive_IT>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3334      	adds	r3, #52	; 0x34
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	f005 fb01 	bl	8006d48 <HAL_UART_Receive_IT>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e050      	b.n	8001804 <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	1cd9      	adds	r1, r3, #3
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	440b      	add	r3, r1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800177e:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001780:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	0059      	lsls	r1, r3, #1
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	440b      	add	r3, r1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	89bb      	ldrh	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 80017ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fac1 	bl	8000d38 <__aeabi_i2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb0f 	bl	8000de0 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe93 	bl	80004f0 <__aeabi_f2d>
 80017ca:	a313      	add	r3, pc, #76	; (adr r3, 8001818 <__huansic_jy62_decode_accel+0xc8>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe fee6 	bl	80005a0 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <__huansic_jy62_decode_accel+0xd0>)
 80017e2:	f7ff f807 	bl	80007f4 <__aeabi_ddiv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	7bfc      	ldrb	r4, [r7, #15]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f998 	bl	8000b24 <__aeabi_d2f>
 80017f4:	4601      	mov	r1, r0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1ca2      	adds	r2, r4, #2
 80017fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d9ab      	bls.n	8001762 <__huansic_jy62_decode_accel+0x12>
	}
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	9999999a 	.word	0x9999999a
 800181c:	40239999 	.word	0x40239999
 8001820:	40e00000 	.word	0x40e00000

08001824 <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e03f      	b.n	80018b6 <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1cd9      	adds	r1, r3, #3
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	440b      	add	r3, r1
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001852:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001854:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	3301      	adds	r3, #1
 8001860:	0059      	lsls	r1, r3, #1
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	440b      	add	r3, r1
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001878:	b21a      	sxth	r2, r3
 800187a:	89bb      	ldrh	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8001880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa57 	bl	8000d38 <__aeabi_i2f>
 800188a:	4603      	mov	r3, r0
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <__huansic_jy62_decode_omega+0xa4>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff faa6 	bl	8000de0 <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	7bfc      	ldrb	r4, [r7, #15]
 8001898:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb53 	bl	8000f48 <__aeabi_fdiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4619      	mov	r1, r3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	1d23      	adds	r3, r4, #4
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	3301      	adds	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d9bc      	bls.n	8001836 <__huansic_jy62_decode_omega+0x12>
	}
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	44fa0000 	.word	0x44fa0000

080018cc <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e03f      	b.n	800195e <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	1cd9      	adds	r1, r3, #3
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018fa:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80018fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	3301      	adds	r3, #1
 8001908:	0059      	lsls	r1, r3, #1
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	440b      	add	r3, r1
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001920:	b21a      	sxth	r2, r3
 8001922:	89bb      	ldrh	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 8001928:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fa03 	bl	8000d38 <__aeabi_i2f>
 8001932:	4603      	mov	r3, r0
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <__huansic_jy62_decode_theta+0xa4>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa52 	bl	8000de0 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	7bfc      	ldrb	r4, [r7, #15]
 8001940:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff faff 	bl	8000f48 <__aeabi_fdiv>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f104 0208 	add.w	r2, r4, #8
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	3301      	adds	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d9bc      	bls.n	80018de <__huansic_jy62_decode_theta+0x12>
	}
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	bf00      	nop
 8001970:	43340000 	.word	0x43340000
 8001974:	00000000 	.word	0x00000000

08001978 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	3308      	adds	r3, #8
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800199a:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 800199c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3309      	adds	r3, #9
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	4313      	orrs	r3, r2
 80019c0:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 80019c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9b6 	bl	8000d38 <__aeabi_i2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4910      	ldr	r1, [pc, #64]	; (8001a10 <__huansic_jy62_decode_temp+0x98>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fab9 	bl	8000f48 <__aeabi_fdiv>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fd89 	bl	80004f0 <__aeabi_f2d>
 80019de:	a30a      	add	r3, pc, #40	; (adr r3, 8001a08 <__huansic_jy62_decode_temp+0x90>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f7fe fc26 	bl	8000234 <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f898 	bl	8000b24 <__aeabi_d2f>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	0a3d70a4 	.word	0x0a3d70a4
 8001a0c:	404243d7 	.word	0x404243d7
 8001a10:	43aa0000 	.word	0x43aa0000

08001a14 <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3a:	d101      	bne.n	8001a40 <huansic_order_new+0x18>
		return 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e046      	b.n	8001ace <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e017      	b.n	8001a76 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	4923      	ldr	r1, [pc, #140]	; (8001ad8 <huansic_order_new+0xb0>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	3310      	adds	r3, #16
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <huansic_order_new+0xb0>)
 8001a6c:	4413      	add	r3, r2
 8001a6e:	e02e      	b.n	8001ace <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	3301      	adds	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b3b      	cmp	r3, #59	; 0x3b
 8001a7a:	d9e4      	bls.n	8001a46 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e021      	b.n	8001ac6 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	4914      	ldr	r1, [pc, #80]	; (8001ad8 <huansic_order_new+0xb0>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3310      	adds	r3, #16
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d112      	bne.n	8001ac0 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <huansic_order_new+0xb0>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4403      	add	r3, r0
 8001aac:	3310      	adds	r3, #16
 8001aae:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <huansic_order_new+0xb0>)
 8001abc:	4413      	add	r3, r2
 8001abe:	e006      	b.n	8001ace <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b3b      	cmp	r3, #59	; 0x3b
 8001aca:	d9da      	bls.n	8001a82 <huansic_order_new+0x5a>
		}
	}

	return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000090 	.word	0x20000090

08001adc <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d103      	bne.n	8001af6 <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff90 	bl	8001a14 <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 8001af4:	e003      	b.n	8001afe <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	611a      	str	r2, [r3, #16]
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <huansic_motor_init+0x1c>
 8001b18:	4b55      	ldr	r3, [pc, #340]	; (8001c70 <huansic_motor_init+0x168>)
 8001b1a:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <huansic_motor_init+0x16c>)
 8001b1c:	210c      	movs	r1, #12
 8001b1e:	4856      	ldr	r0, [pc, #344]	; (8001c78 <huansic_motor_init+0x170>)
 8001b20:	f005 fec4 	bl	80078ac <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <huansic_motor_init+0x30>
 8001b2c:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <huansic_motor_init+0x174>)
 8001b2e:	4a51      	ldr	r2, [pc, #324]	; (8001c74 <huansic_motor_init+0x16c>)
 8001b30:	210d      	movs	r1, #13
 8001b32:	4851      	ldr	r0, [pc, #324]	; (8001c78 <huansic_motor_init+0x170>)
 8001b34:	f005 feba 	bl	80078ac <__assert_func>
	assert(hmotor->dt);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fae1 	bl	8001108 <__aeabi_fcmpeq>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <huansic_motor_init+0x50>
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <huansic_motor_init+0x178>)
 8001b4e:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <huansic_motor_init+0x16c>)
 8001b50:	210e      	movs	r1, #14
 8001b52:	4849      	ldr	r0, [pc, #292]	; (8001c78 <huansic_motor_init+0x170>)
 8001b54:	f005 feaa 	bl	80078ac <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba2:	e01c      	b.n	8001bde <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d105      	bne.n	8001bb8 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8001bb6:	e012      	b.n	8001bde <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d105      	bne.n	8001bcc <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bca:	e008      	b.n	8001bde <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d104      	bne.n	8001bde <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d026      	beq.n	8001c34 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf8:	e01c      	b.n	8001c34 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d105      	bne.n	8001c0e <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c0c:	e012      	b.n	8001c34 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d105      	bne.n	8001c22 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c20:	e008      	b.n	8001c34 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d104      	bne.n	8001c34 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	213c      	movs	r1, #60	; 0x3c
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f8b0 	bl	8005da0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f003 ff4c 	bl	8005ae8 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f003 ff40 	bl	8005ae8 <HAL_TIM_PWM_Start>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	080099e8 	.word	0x080099e8
 8001c74:	08009a50 	.word	0x08009a50
 8001c78:	080099f8 	.word	0x080099f8
 8001c7c:	08009a18 	.word	0x08009a18
 8001c80:	08009a2c 	.word	0x08009a2c

08001c84 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8001ca0:	8afb      	ldrh	r3, [r7, #22]
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8001ca8:	8afa      	ldrh	r2, [r7, #22]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 8001cb4:	8afa      	ldrh	r2, [r7, #22]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001cba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f83a 	bl	8000d38 <__aeabi_i2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7ff f93b 	bl	8000f48 <__aeabi_fdiv>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f7fe ff6f 	bl	8000bcc <__aeabi_fsub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7fe ff6a 	bl	8000bcc <__aeabi_fsub>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7fe ff60 	bl	8000bcc <__aeabi_fsub>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7fe ff56 	bl	8000bd0 <__addsf3>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7ff f852 	bl	8000de0 <__aeabi_fmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461c      	mov	r4, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff f848 	bl	8000de0 <__aeabi_fmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7fe ff3b 	bl	8000bd0 <__addsf3>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	6939      	ldr	r1, [r7, #16]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f83b 	bl	8000de0 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7fe ff2e 	bl	8000bd0 <__addsf3>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8001d78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff f9eb 	bl	8001158 <__aeabi_fcmpgt>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <huansic_motor_pid+0x10a>
 8001d88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d8c:	e009      	b.n	8001da2 <huansic_motor_pid+0x11e>
 8001d8e:	4954      	ldr	r1, [pc, #336]	; (8001ee0 <huansic_motor_pid+0x25c>)
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff f9c3 	bl	800111c <__aeabi_fcmplt>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <huansic_motor_pid+0x11c>
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <huansic_motor_pid+0x25c>)
 8001d9e:	e000      	b.n	8001da2 <huansic_motor_pid+0x11e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff f9d5 	bl	8001158 <__aeabi_fcmpgt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d019      	beq.n	8001de8 <huansic_motor_pid+0x164>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ffb4 	bl	8000d30 <__aeabi_ui2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff f807 	bl	8000de0 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 fe23 	bl	8008a20 <roundf>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f9c5 	bl	800116c <__aeabi_f2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	e000      	b.n	8001dea <huansic_motor_pid+0x166>
 8001de8:	2300      	movs	r3, #0
 8001dea:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff f993 	bl	800111c <__aeabi_fcmplt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d019      	beq.n	8001e30 <huansic_motor_pid+0x1ac>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff90 	bl	8000d30 <__aeabi_ui2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4619      	mov	r1, r3
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7fe ffe3 	bl	8000de0 <__aeabi_fmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f006 fdff 	bl	8008a20 <roundf>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f9a1 	bl	800116c <__aeabi_f2uiz>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	e000      	b.n	8001e32 <huansic_motor_pid+0x1ae>
 8001e30:	2300      	movs	r3, #0
 8001e32:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <huansic_motor_pid+0x1c4>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	897a      	ldrh	r2, [r7, #10]
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
 8001e46:	e01c      	b.n	8001e82 <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d105      	bne.n	8001e5c <huansic_motor_pid+0x1d8>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	897a      	ldrh	r2, [r7, #10]
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
 8001e5a:	e012      	b.n	8001e82 <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d105      	bne.n	8001e70 <huansic_motor_pid+0x1ec>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	897a      	ldrh	r2, [r7, #10]
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e6e:	e008      	b.n	8001e82 <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d104      	bne.n	8001e82 <huansic_motor_pid+0x1fe>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	897a      	ldrh	r2, [r7, #10]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d026      	beq.n	8001ed8 <huansic_motor_pid+0x254>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <huansic_motor_pid+0x21a>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	893a      	ldrh	r2, [r7, #8]
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001e9c:	e01c      	b.n	8001ed8 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d105      	bne.n	8001eb2 <huansic_motor_pid+0x22e>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	893a      	ldrh	r2, [r7, #8]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001eb0:	e012      	b.n	8001ed8 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d105      	bne.n	8001ec6 <huansic_motor_pid+0x242>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	893a      	ldrh	r2, [r7, #8]
 8001ec2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ec4:	e008      	b.n	8001ed8 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d104      	bne.n	8001ed8 <huansic_motor_pid+0x254>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	893a      	ldrh	r2, [r7, #8]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	bf800000 	.word	0xbf800000

08001ee4 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]

}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2206      	movs	r2, #6
 8001f04:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 010a 	add.w	r1, r3, #10
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7a5b      	ldrb	r3, [r3, #9]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	f004 ff46 	bl	8006da8 <HAL_UART_Receive_DMA>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7a99      	ldrb	r1, [r3, #10]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7adb      	ldrb	r3, [r3, #11]
 8001f38:	404b      	eors	r3, r1
 8001f3a:	b2d9      	uxtb	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7b1b      	ldrb	r3, [r3, #12]
 8001f40:	404b      	eors	r3, r1
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7b5b      	ldrb	r3, [r3, #13]
 8001f48:	404b      	eors	r3, r1
 8001f4a:	b2d9      	uxtb	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7b9b      	ldrb	r3, [r3, #14]
 8001f50:	404b      	eors	r3, r1
 8001f52:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <huansic_xb_decodeHeader+0x38>
		return 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e01d      	b.n	8001f98 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7a9b      	ldrb	r3, [r3, #10]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d005      	beq.n	8001f70 <huansic_xb_decodeHeader+0x4c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7a9b      	ldrb	r3, [r3, #10]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d001      	beq.n	8001f70 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e013      	b.n	8001f98 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7a9a      	ldrb	r2, [r3, #10]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7b9a      	ldrb	r2, [r3, #14]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f103 010a 	add.w	r1, r3, #10
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7a5b      	ldrb	r3, [r3, #9]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	f004 ff09 	bl	8006da8 <HAL_UART_Receive_DMA>
	return 1;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	76fb      	strb	r3, [r7, #27]
 8001fac:	2300      	movs	r3, #0
 8001fae:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7a1b      	ldrb	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 816d 	bne.w	8002294 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001fba:	7f7b      	ldrb	r3, [r7, #29]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	777a      	strb	r2, [r7, #29]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	7a9a      	ldrb	r2, [r3, #10]
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	; (80021fc <huansic_xb_decodeBody+0x25c>)
 8001fca:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001fcc:	7f7b      	ldrb	r3, [r7, #29]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	77fb      	strb	r3, [r7, #31]
 8001fd6:	e075      	b.n	80020c4 <huansic_xb_decodeBody+0x124>
			index += 2;
 8001fd8:	7f7b      	ldrb	r3, [r7, #29]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001fde:	7f7b      	ldrb	r3, [r7, #29]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	777a      	strb	r2, [r7, #29]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	7a9b      	ldrb	r3, [r3, #10]
 8001fec:	021a      	lsls	r2, r3, #8
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	b211      	sxth	r1, r2
 8001ff2:	4a83      	ldr	r2, [pc, #524]	; (8002200 <huansic_xb_decodeBody+0x260>)
 8001ff4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001ff8:	7f7b      	ldrb	r3, [r7, #29]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	777a      	strb	r2, [r7, #29]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	7a9a      	ldrb	r2, [r3, #10]
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	b211      	sxth	r1, r2
 800200a:	4a7d      	ldr	r2, [pc, #500]	; (8002200 <huansic_xb_decodeBody+0x260>)
 800200c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002010:	7f7b      	ldrb	r3, [r7, #29]
 8002012:	3302      	adds	r3, #2
 8002014:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8002016:	7f7b      	ldrb	r3, [r7, #29]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	777a      	strb	r2, [r7, #29]
 800201c:	461a      	mov	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	7a9b      	ldrb	r3, [r3, #10]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	b211      	sxth	r1, r2
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <huansic_xb_decodeBody+0x260>)
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8002034:	7f7b      	ldrb	r3, [r7, #29]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	7a9a      	ldrb	r2, [r3, #10]
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	b211      	sxth	r1, r2
 8002040:	4a6f      	ldr	r2, [pc, #444]	; (8002200 <huansic_xb_decodeBody+0x260>)
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	460a      	mov	r2, r1
 8002048:	805a      	strh	r2, [r3, #2]
			index += 2;
 800204a:	7f7b      	ldrb	r3, [r7, #29]
 800204c:	3302      	adds	r3, #2
 800204e:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8002050:	7f7b      	ldrb	r3, [r7, #29]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	777a      	strb	r2, [r7, #29]
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	7a9b      	ldrb	r3, [r3, #10]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	7ffb      	ldrb	r3, [r7, #31]
 8002062:	b211      	sxth	r1, r2
 8002064:	4a66      	ldr	r2, [pc, #408]	; (8002200 <huansic_xb_decodeBody+0x260>)
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	460a      	mov	r2, r1
 800206c:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 800206e:	7f7b      	ldrb	r3, [r7, #29]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	7a9a      	ldrb	r2, [r3, #10]
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	b211      	sxth	r1, r2
 800207a:	4a61      	ldr	r2, [pc, #388]	; (8002200 <huansic_xb_decodeBody+0x260>)
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	460a      	mov	r2, r1
 8002082:	809a      	strh	r2, [r3, #4]
			index += 2;
 8002084:	7f7b      	ldrb	r3, [r7, #29]
 8002086:	3302      	adds	r3, #2
 8002088:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 800208a:	7f7b      	ldrb	r3, [r7, #29]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	777a      	strb	r2, [r7, #29]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	7a9b      	ldrb	r3, [r3, #10]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	b211      	sxth	r1, r2
 800209e:	4a58      	ldr	r2, [pc, #352]	; (8002200 <huansic_xb_decodeBody+0x260>)
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	460a      	mov	r2, r1
 80020a6:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 80020a8:	7f7b      	ldrb	r3, [r7, #29]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	7a9a      	ldrb	r2, [r3, #10]
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
 80020b2:	b211      	sxth	r1, r2
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <huansic_xb_decodeBody+0x260>)
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	460a      	mov	r2, r1
 80020bc:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	3301      	adds	r3, #1
 80020c2:	77fb      	strb	r3, [r7, #31]
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d986      	bls.n	8001fd8 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 80020ca:	7f7b      	ldrb	r3, [r7, #29]
 80020cc:	3301      	adds	r3, #1
 80020ce:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 80020d0:	7f7b      	ldrb	r3, [r7, #29]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	777a      	strb	r2, [r7, #29]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	7a9b      	ldrb	r3, [r3, #10]
 80020de:	461a      	mov	r2, r3
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <huansic_xb_decodeBody+0x264>)
 80020e2:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <huansic_xb_decodeBody+0x264>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	4a46      	ldr	r2, [pc, #280]	; (8002204 <huansic_xb_decodeBody+0x264>)
 80020ec:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 80020ee:	7f7b      	ldrb	r3, [r7, #29]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	777a      	strb	r2, [r7, #29]
 80020f4:	461a      	mov	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	7a9b      	ldrb	r3, [r3, #10]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <huansic_xb_decodeBody+0x264>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <huansic_xb_decodeBody+0x264>)
 8002106:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <huansic_xb_decodeBody+0x264>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <huansic_xb_decodeBody+0x264>)
 8002110:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002112:	7f7b      	ldrb	r3, [r7, #29]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	777a      	strb	r2, [r7, #29]
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	7a9b      	ldrb	r3, [r3, #10]
 8002120:	461a      	mov	r2, r3
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <huansic_xb_decodeBody+0x264>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	4a36      	ldr	r2, [pc, #216]	; (8002204 <huansic_xb_decodeBody+0x264>)
 800212a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <huansic_xb_decodeBody+0x264>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	4a34      	ldr	r2, [pc, #208]	; (8002204 <huansic_xb_decodeBody+0x264>)
 8002134:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002136:	7f7b      	ldrb	r3, [r7, #29]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	777a      	strb	r2, [r7, #29]
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	7a9b      	ldrb	r3, [r3, #10]
 8002144:	461a      	mov	r2, r3
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <huansic_xb_decodeBody+0x264>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <huansic_xb_decodeBody+0x264>)
 800214e:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002150:	7f7b      	ldrb	r3, [r7, #29]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	7a9b      	ldrb	r3, [r3, #10]
 8002158:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	77fb      	strb	r3, [r7, #31]
 800215e:	e03e      	b.n	80021de <huansic_xb_decodeBody+0x23e>
			index += 2;
 8002160:	7f7b      	ldrb	r3, [r7, #29]
 8002162:	3302      	adds	r3, #2
 8002164:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002166:	7f7b      	ldrb	r3, [r7, #29]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	777a      	strb	r2, [r7, #29]
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	7a9b      	ldrb	r3, [r3, #10]
 8002174:	021a      	lsls	r2, r3, #8
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	b211      	sxth	r1, r2
 800217a:	4a23      	ldr	r2, [pc, #140]	; (8002208 <huansic_xb_decodeBody+0x268>)
 800217c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002180:	7f7b      	ldrb	r3, [r7, #29]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	777a      	strb	r2, [r7, #29]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	7a9a      	ldrb	r2, [r3, #10]
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	b211      	sxth	r1, r2
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <huansic_xb_decodeBody+0x268>)
 8002194:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002198:	7f7b      	ldrb	r3, [r7, #29]
 800219a:	3302      	adds	r3, #2
 800219c:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 800219e:	7f7b      	ldrb	r3, [r7, #29]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	777a      	strb	r2, [r7, #29]
 80021a4:	461a      	mov	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	7a9b      	ldrb	r3, [r3, #10]
 80021ac:	021a      	lsls	r2, r3, #8
 80021ae:	7ffb      	ldrb	r3, [r7, #31]
 80021b0:	b211      	sxth	r1, r2
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <huansic_xb_decodeBody+0x268>)
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	460a      	mov	r2, r1
 80021ba:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 80021bc:	7f7b      	ldrb	r3, [r7, #29]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	777a      	strb	r2, [r7, #29]
 80021c2:	461a      	mov	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	7a9a      	ldrb	r2, [r3, #10]
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	b211      	sxth	r1, r2
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <huansic_xb_decodeBody+0x268>)
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	460a      	mov	r2, r1
 80021d6:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 80021d8:	7ffb      	ldrb	r3, [r7, #31]
 80021da:	3301      	adds	r3, #1
 80021dc:	77fb      	strb	r3, [r7, #31]
 80021de:	7ffa      	ldrb	r2, [r7, #31]
 80021e0:	7efb      	ldrb	r3, [r7, #27]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3bc      	bcc.n	8002160 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 80021e6:	7f7b      	ldrb	r3, [r7, #29]
 80021e8:	3301      	adds	r3, #1
 80021ea:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 80021ec:	7f7b      	ldrb	r3, [r7, #29]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	7a9b      	ldrb	r3, [r3, #10]
 80021f4:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80021f6:	2300      	movs	r3, #0
 80021f8:	77fb      	strb	r3, [r7, #31]
 80021fa:	e046      	b.n	800228a <huansic_xb_decodeBody+0x2ea>
 80021fc:	20000b60 	.word	0x20000b60
 8002200:	20000b6c 	.word	0x20000b6c
 8002204:	20000b64 	.word	0x20000b64
 8002208:	20000b94 	.word	0x20000b94
			index += 2;
 800220c:	7f7b      	ldrb	r3, [r7, #29]
 800220e:	3302      	adds	r3, #2
 8002210:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002212:	7f7b      	ldrb	r3, [r7, #29]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	777a      	strb	r2, [r7, #29]
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	7a9b      	ldrb	r3, [r3, #10]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	7ffb      	ldrb	r3, [r7, #31]
 8002224:	b211      	sxth	r1, r2
 8002226:	4a9f      	ldr	r2, [pc, #636]	; (80024a4 <huansic_xb_decodeBody+0x504>)
 8002228:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 800222c:	7f7b      	ldrb	r3, [r7, #29]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	777a      	strb	r2, [r7, #29]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	7a9a      	ldrb	r2, [r3, #10]
 800223a:	7ffb      	ldrb	r3, [r7, #31]
 800223c:	b211      	sxth	r1, r2
 800223e:	4a99      	ldr	r2, [pc, #612]	; (80024a4 <huansic_xb_decodeBody+0x504>)
 8002240:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002244:	7f7b      	ldrb	r3, [r7, #29]
 8002246:	3302      	adds	r3, #2
 8002248:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 800224a:	7f7b      	ldrb	r3, [r7, #29]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	777a      	strb	r2, [r7, #29]
 8002250:	461a      	mov	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	7a9b      	ldrb	r3, [r3, #10]
 8002258:	021a      	lsls	r2, r3, #8
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	b211      	sxth	r1, r2
 800225e:	4a91      	ldr	r2, [pc, #580]	; (80024a4 <huansic_xb_decodeBody+0x504>)
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	460a      	mov	r2, r1
 8002266:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002268:	7f7b      	ldrb	r3, [r7, #29]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	777a      	strb	r2, [r7, #29]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	7a9a      	ldrb	r2, [r3, #10]
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	b211      	sxth	r1, r2
 800227a:	4a8a      	ldr	r2, [pc, #552]	; (80024a4 <huansic_xb_decodeBody+0x504>)
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	460a      	mov	r2, r1
 8002282:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	3301      	adds	r3, #1
 8002288:	77fb      	strb	r3, [r7, #31]
 800228a:	7ffa      	ldrb	r2, [r7, #31]
 800228c:	7efb      	ldrb	r3, [r7, #27]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3bc      	bcc.n	800220c <huansic_xb_decodeBody+0x26c>
 8002292:	e31a      	b.n	80028ca <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7a1b      	ldrb	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	f040 8316 	bne.w	80028ca <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 800229e:	7f7b      	ldrb	r3, [r7, #29]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	777a      	strb	r2, [r7, #29]
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	7a9a      	ldrb	r2, [r3, #10]
 80022ac:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <huansic_xb_decodeBody+0x508>)
 80022ae:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 80022b0:	7f7b      	ldrb	r3, [r7, #29]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	777a      	strb	r2, [r7, #29]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	7a9b      	ldrb	r3, [r3, #10]
 80022be:	461a      	mov	r2, r3
 80022c0:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022c2:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 80022c4:	4b79      	ldr	r3, [pc, #484]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	4a78      	ldr	r2, [pc, #480]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022cc:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80022ce:	7f7b      	ldrb	r3, [r7, #29]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	777a      	strb	r2, [r7, #29]
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	7a9b      	ldrb	r3, [r3, #10]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b73      	ldr	r3, [pc, #460]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	4a71      	ldr	r2, [pc, #452]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022e6:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80022e8:	4b70      	ldr	r3, [pc, #448]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	4a6f      	ldr	r2, [pc, #444]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 80022f0:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80022f2:	7f7b      	ldrb	r3, [r7, #29]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	777a      	strb	r2, [r7, #29]
 80022f8:	461a      	mov	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	7a9b      	ldrb	r3, [r3, #10]
 8002300:	461a      	mov	r2, r3
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	4a68      	ldr	r2, [pc, #416]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 800230a:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 800230c:	4b67      	ldr	r3, [pc, #412]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4a66      	ldr	r2, [pc, #408]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 8002314:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002316:	7f7b      	ldrb	r3, [r7, #29]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	777a      	strb	r2, [r7, #29]
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	7a9b      	ldrb	r3, [r3, #10]
 8002324:	461a      	mov	r2, r3
 8002326:	4b61      	ldr	r3, [pc, #388]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 800232e:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8002330:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <huansic_xb_decodeBody+0x510>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <huansic_xb_decodeBody+0x50c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	4a5e      	ldr	r2, [pc, #376]	; (80024b4 <huansic_xb_decodeBody+0x514>)
 800233c:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 800233e:	7f7b      	ldrb	r3, [r7, #29]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	777a      	strb	r2, [r7, #29]
 8002344:	461a      	mov	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	7a9b      	ldrb	r3, [r3, #10]
 800234c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002354:	7f7b      	ldrb	r3, [r7, #29]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	777a      	strb	r2, [r7, #29]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	7a9b      	ldrb	r3, [r3, #10]
 8002362:	461a      	mov	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002370:	7f7b      	ldrb	r3, [r7, #29]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	777a      	strb	r2, [r7, #29]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	7a9b      	ldrb	r3, [r3, #10]
 800237e:	461a      	mov	r2, r3
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	777a      	strb	r2, [r7, #29]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	7a9b      	ldrb	r3, [r3, #10]
 800239a:	461a      	mov	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a43      	ldr	r2, [pc, #268]	; (80024b8 <huansic_xb_decodeBody+0x518>)
 80023aa:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 80023ac:	7f7b      	ldrb	r3, [r7, #29]
 80023ae:	3302      	adds	r3, #2
 80023b0:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 80023b2:	7f7b      	ldrb	r3, [r7, #29]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	777a      	strb	r2, [r7, #29]
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	7a9b      	ldrb	r3, [r3, #10]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <huansic_xb_decodeBody+0x51c>)
 80023c6:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 80023c8:	7f7b      	ldrb	r3, [r7, #29]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	777a      	strb	r2, [r7, #29]
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	7a9b      	ldrb	r3, [r3, #10]
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <huansic_xb_decodeBody+0x51c>)
 80023da:	801a      	strh	r2, [r3, #0]
		index += 2;
 80023dc:	7f7b      	ldrb	r3, [r7, #29]
 80023de:	3302      	adds	r3, #2
 80023e0:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80023e2:	7f7b      	ldrb	r3, [r7, #29]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	777a      	strb	r2, [r7, #29]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	7a9b      	ldrb	r3, [r3, #10]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <huansic_xb_decodeBody+0x51c>)
 80023f6:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 80023f8:	7f7b      	ldrb	r3, [r7, #29]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	777a      	strb	r2, [r7, #29]
 80023fe:	461a      	mov	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	7a9b      	ldrb	r3, [r3, #10]
 8002406:	b21a      	sxth	r2, r3
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <huansic_xb_decodeBody+0x51c>)
 800240a:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 800240c:	7f7b      	ldrb	r3, [r7, #29]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	777a      	strb	r2, [r7, #29]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	7a9b      	ldrb	r3, [r3, #10]
 800241a:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002422:	7f7b      	ldrb	r3, [r7, #29]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	777a      	strb	r2, [r7, #29]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	7a9b      	ldrb	r3, [r3, #10]
 8002430:	461a      	mov	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800243e:	7f7b      	ldrb	r3, [r7, #29]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	777a      	strb	r2, [r7, #29]
 8002444:	461a      	mov	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	7a9b      	ldrb	r3, [r3, #10]
 800244c:	461a      	mov	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800245a:	7f7b      	ldrb	r3, [r7, #29]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	777a      	strb	r2, [r7, #29]
 8002460:	461a      	mov	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	7a9b      	ldrb	r3, [r3, #10]
 8002468:	461a      	mov	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <huansic_xb_decodeBody+0x520>)
 8002478:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <huansic_xb_decodeBody+0x524>)
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002484:	6018      	str	r0, [r3, #0]
 8002486:	3304      	adds	r3, #4
 8002488:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 800248e:	7f7b      	ldrb	r3, [r7, #29]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	777a      	strb	r2, [r7, #29]
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	7a9b      	ldrb	r3, [r3, #10]
 800249c:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	77fb      	strb	r3, [r7, #31]
 80024a2:	e0fd      	b.n	80026a0 <huansic_xb_decodeBody+0x700>
 80024a4:	20000ba0 	.word	0x20000ba0
 80024a8:	20000b61 	.word	0x20000b61
 80024ac:	20000b68 	.word	0x20000b68
 80024b0:	20000b64 	.word	0x20000b64
 80024b4:	20000bd4 	.word	0x20000bd4
 80024b8:	20000bcc 	.word	0x20000bcc
 80024bc:	20000bc0 	.word	0x20000bc0
 80024c0:	20000bd0 	.word	0x20000bd0
 80024c4:	08009a38 	.word	0x08009a38
			temp = hxb->buffer[index + 24];
 80024c8:	7f7b      	ldrb	r3, [r7, #29]
 80024ca:	3318      	adds	r3, #24
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	7a9b      	ldrb	r3, [r3, #10]
 80024d2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80024da:	7f7b      	ldrb	r3, [r7, #29]
 80024dc:	3319      	adds	r3, #25
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	7a9b      	ldrb	r3, [r3, #10]
 80024e4:	461a      	mov	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80024f2:	7f7b      	ldrb	r3, [r7, #29]
 80024f4:	331a      	adds	r3, #26
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	7a9b      	ldrb	r3, [r3, #10]
 80024fc:	461a      	mov	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 800250a:	7f7b      	ldrb	r3, [r7, #29]
 800250c:	331b      	adds	r3, #27
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	7a9b      	ldrb	r3, [r3, #10]
 8002514:	461a      	mov	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	b25b      	sxtb	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fa81 	bl	8001a28 <huansic_order_new>
 8002526:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 800252e:	7f7b      	ldrb	r3, [r7, #29]
 8002530:	331c      	adds	r3, #28
 8002532:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fcd3 	bl	8001ee4 <custom_order_new_failed>
				continue;
 800253e:	e0ac      	b.n	800269a <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002540:	7f7b      	ldrb	r3, [r7, #29]
 8002542:	3302      	adds	r3, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	7a9b      	ldrb	r3, [r3, #10]
 800254a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800254c:	b21a      	sxth	r2, r3
 800254e:	7f7b      	ldrb	r3, [r7, #29]
 8002550:	3303      	adds	r3, #3
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	440b      	add	r3, r1
 8002556:	7a9b      	ldrb	r3, [r3, #10]
 8002558:	b21b      	sxth	r3, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002562:	7f7b      	ldrb	r3, [r7, #29]
 8002564:	3306      	adds	r3, #6
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	7a9b      	ldrb	r3, [r3, #10]
 800256c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800256e:	b21a      	sxth	r2, r3
 8002570:	7f7b      	ldrb	r3, [r7, #29]
 8002572:	3307      	adds	r3, #7
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	440b      	add	r3, r1
 8002578:	7a9b      	ldrb	r3, [r3, #10]
 800257a:	b21b      	sxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002584:	7f7b      	ldrb	r3, [r7, #29]
 8002586:	330a      	adds	r3, #10
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	7a9b      	ldrb	r3, [r3, #10]
 800258e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8002590:	b21a      	sxth	r2, r3
 8002592:	7f7b      	ldrb	r3, [r7, #29]
 8002594:	330b      	adds	r3, #11
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	440b      	add	r3, r1
 800259a:	7a9b      	ldrb	r3, [r3, #10]
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80025a6:	7f7b      	ldrb	r3, [r7, #29]
 80025a8:	330e      	adds	r3, #14
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	7a9b      	ldrb	r3, [r3, #10]
 80025b0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80025b2:	b21a      	sxth	r2, r3
 80025b4:	7f7b      	ldrb	r3, [r7, #29]
 80025b6:	330f      	adds	r3, #15
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	440b      	add	r3, r1
 80025bc:	7a9b      	ldrb	r3, [r3, #10]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80025c8:	7f7b      	ldrb	r3, [r7, #29]
 80025ca:	3310      	adds	r3, #16
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	7a9b      	ldrb	r3, [r3, #10]
 80025d2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80025da:	7f7b      	ldrb	r3, [r7, #29]
 80025dc:	3311      	adds	r3, #17
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	7a9b      	ldrb	r3, [r3, #10]
 80025e4:	461a      	mov	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80025f2:	7f7b      	ldrb	r3, [r7, #29]
 80025f4:	3312      	adds	r3, #18
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	7a9b      	ldrb	r3, [r3, #10]
 80025fc:	461a      	mov	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800260a:	7f7b      	ldrb	r3, [r7, #29]
 800260c:	3313      	adds	r3, #19
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	7a9b      	ldrb	r3, [r3, #10]
 8002614:	461a      	mov	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002622:	7f7b      	ldrb	r3, [r7, #29]
 8002624:	3314      	adds	r3, #20
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	7a9b      	ldrb	r3, [r3, #10]
 800262c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002634:	7f7b      	ldrb	r3, [r7, #29]
 8002636:	3315      	adds	r3, #21
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	7a9b      	ldrb	r3, [r3, #10]
 800263e:	461a      	mov	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800264c:	7f7b      	ldrb	r3, [r7, #29]
 800264e:	3316      	adds	r3, #22
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	7a9b      	ldrb	r3, [r3, #10]
 8002656:	461a      	mov	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002664:	7f7b      	ldrb	r3, [r7, #29]
 8002666:	3317      	adds	r3, #23
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	7a9b      	ldrb	r3, [r3, #10]
 800266e:	461a      	mov	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 8002680:	7f7b      	ldrb	r3, [r7, #29]
 8002682:	331c      	adds	r3, #28
 8002684:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	7f3b      	ldrb	r3, [r7, #28]
 800268c:	1c59      	adds	r1, r3, #1
 800268e:	7739      	strb	r1, [r7, #28]
 8002690:	b252      	sxtb	r2, r2
 8002692:	3320      	adds	r3, #32
 8002694:	443b      	add	r3, r7
 8002696:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	3301      	adds	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	7ffa      	ldrb	r2, [r7, #31]
 80026a2:	7efb      	ldrb	r3, [r7, #27]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f4ff af0f 	bcc.w	80024c8 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	77fb      	strb	r3, [r7, #31]
 80026ae:	e02d      	b.n	800270c <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 80026b0:	7ffb      	ldrb	r3, [r7, #31]
 80026b2:	4a90      	ldr	r2, [pc, #576]	; (80028f4 <huansic_xb_decodeBody+0x954>)
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d022      	beq.n	8002706 <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	77bb      	strb	r3, [r7, #30]
 80026c4:	e011      	b.n	80026ea <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	4a8a      	ldr	r2, [pc, #552]	; (80028f4 <huansic_xb_decodeBody+0x954>)
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	7fba      	ldrb	r2, [r7, #30]
 80026d2:	3220      	adds	r2, #32
 80026d4:	443a      	add	r2, r7
 80026d6:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d102      	bne.n	80026e4 <huansic_xb_decodeBody+0x744>
						j = 255;
 80026de:	23ff      	movs	r3, #255	; 0xff
 80026e0:	77bb      	strb	r3, [r7, #30]
						break;
 80026e2:	e006      	b.n	80026f2 <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 80026e4:	7fbb      	ldrb	r3, [r7, #30]
 80026e6:	3301      	adds	r3, #1
 80026e8:	77bb      	strb	r3, [r7, #30]
 80026ea:	7ffa      	ldrb	r2, [r7, #31]
 80026ec:	7f3b      	ldrb	r3, [r7, #28]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3e9      	bcc.n	80026c6 <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 80026f2:	7fbb      	ldrb	r3, [r7, #30]
 80026f4:	2bff      	cmp	r3, #255	; 0xff
 80026f6:	d006      	beq.n	8002706 <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	4a7e      	ldr	r2, [pc, #504]	; (80028f4 <huansic_xb_decodeBody+0x954>)
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f9eb 	bl	8001adc <huansic_order_delete>
		for (i = 0; i < 5; i++)
 8002706:	7ffb      	ldrb	r3, [r7, #31]
 8002708:	3301      	adds	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d9ce      	bls.n	80026b0 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8002712:	7f7b      	ldrb	r3, [r7, #29]
 8002714:	3318      	adds	r3, #24
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	7a9b      	ldrb	r3, [r3, #10]
 800271c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8002724:	7f7b      	ldrb	r3, [r7, #29]
 8002726:	3319      	adds	r3, #25
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	7a9b      	ldrb	r3, [r3, #10]
 800272e:	461a      	mov	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 800273c:	7f7b      	ldrb	r3, [r7, #29]
 800273e:	331a      	adds	r3, #26
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	7a9b      	ldrb	r3, [r3, #10]
 8002746:	461a      	mov	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8002754:	7f7b      	ldrb	r3, [r7, #29]
 8002756:	331b      	adds	r3, #27
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	7a9b      	ldrb	r3, [r3, #10]
 800275e:	461a      	mov	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	b25b      	sxtb	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f95c 	bl	8001a28 <huansic_order_new>
 8002770:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d108      	bne.n	800278a <huansic_xb_decodeBody+0x7ea>
			index += 28;
 8002778:	7f7b      	ldrb	r3, [r7, #29]
 800277a:	331c      	adds	r3, #28
 800277c:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fbae 	bl	8001ee4 <custom_order_new_failed>
 8002788:	e09f      	b.n	80028ca <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800278a:	7f7b      	ldrb	r3, [r7, #29]
 800278c:	3302      	adds	r3, #2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	7a9b      	ldrb	r3, [r3, #10]
 8002794:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002796:	b21a      	sxth	r2, r3
 8002798:	7f7b      	ldrb	r3, [r7, #29]
 800279a:	3303      	adds	r3, #3
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	440b      	add	r3, r1
 80027a0:	7a9b      	ldrb	r3, [r3, #10]
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80027ac:	7f7b      	ldrb	r3, [r7, #29]
 80027ae:	3306      	adds	r3, #6
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	7a9b      	ldrb	r3, [r3, #10]
 80027b6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	7f7b      	ldrb	r3, [r7, #29]
 80027bc:	3307      	adds	r3, #7
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	440b      	add	r3, r1
 80027c2:	7a9b      	ldrb	r3, [r3, #10]
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80027ce:	7f7b      	ldrb	r3, [r7, #29]
 80027d0:	330a      	adds	r3, #10
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	7a9b      	ldrb	r3, [r3, #10]
 80027d8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80027da:	b21a      	sxth	r2, r3
 80027dc:	7f7b      	ldrb	r3, [r7, #29]
 80027de:	330b      	adds	r3, #11
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	440b      	add	r3, r1
 80027e4:	7a9b      	ldrb	r3, [r3, #10]
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80027f0:	7f7b      	ldrb	r3, [r7, #29]
 80027f2:	330e      	adds	r3, #14
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	7a9b      	ldrb	r3, [r3, #10]
 80027fa:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	7f7b      	ldrb	r3, [r7, #29]
 8002800:	330f      	adds	r3, #15
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	440b      	add	r3, r1
 8002806:	7a9b      	ldrb	r3, [r3, #10]
 8002808:	b21b      	sxth	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8002812:	7f7b      	ldrb	r3, [r7, #29]
 8002814:	3310      	adds	r3, #16
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	7a9b      	ldrb	r3, [r3, #10]
 800281c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8002824:	7f7b      	ldrb	r3, [r7, #29]
 8002826:	3311      	adds	r3, #17
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	7a9b      	ldrb	r3, [r3, #10]
 800282e:	461a      	mov	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 800283c:	7f7b      	ldrb	r3, [r7, #29]
 800283e:	3312      	adds	r3, #18
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	7a9b      	ldrb	r3, [r3, #10]
 8002846:	461a      	mov	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002854:	7f7b      	ldrb	r3, [r7, #29]
 8002856:	3313      	adds	r3, #19
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	7a9b      	ldrb	r3, [r3, #10]
 800285e:	461a      	mov	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800286c:	7f7b      	ldrb	r3, [r7, #29]
 800286e:	3314      	adds	r3, #20
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	7a9b      	ldrb	r3, [r3, #10]
 8002876:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800287e:	7f7b      	ldrb	r3, [r7, #29]
 8002880:	3315      	adds	r3, #21
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	7a9b      	ldrb	r3, [r3, #10]
 8002888:	461a      	mov	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002896:	7f7b      	ldrb	r3, [r7, #29]
 8002898:	3316      	adds	r3, #22
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	7a9b      	ldrb	r3, [r3, #10]
 80028a0:	461a      	mov	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80028ae:	7f7b      	ldrb	r3, [r7, #29]
 80028b0:	3317      	adds	r3, #23
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	7a9b      	ldrb	r3, [r3, #10]
 80028b8:	461a      	mov	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2206      	movs	r2, #6
 80028ce:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 010a 	add.w	r1, r3, #10
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7a5b      	ldrb	r3, [r3, #9]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	f004 fa5e 	bl	8006da8 <HAL_UART_Receive_DMA>
}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000bac 	.word	0x20000bac

080028f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

 	HAL_Init();
 80028fe:	f001 fac9 	bl	8003e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002902:	f000 f8e3 	bl	8002acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002906:	f000 fcdd 	bl	80032c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800290a:	f000 fcb5 	bl	8003278 <MX_DMA_Init>
  MX_I2C1_Init();
 800290e:	f000 f923 	bl	8002b58 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002912:	f000 f94f 	bl	8002bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002916:	f000 fa11 	bl	8002d3c <MX_TIM2_Init>
  MX_TIM3_Init();
 800291a:	f000 fa63 	bl	8002de4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800291e:	f000 fab5 	bl	8002e8c <MX_TIM4_Init>
  MX_TIM5_Init();
 8002922:	f000 fb07 	bl	8002f34 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002926:	f000 fb8f 	bl	8003048 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800292a:	f000 fc51 	bl	80031d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800292e:	f000 fc79 	bl	8003224 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002932:	f000 fb53 	bl	8002fdc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	cmotor_lf.encoderInverted = 1;
 8002936:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <main+0x194>)
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 800293e:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <main+0x198>)
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 8002946:	f000 fd13 	bl	8003370 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 800294a:	f000 fd45 	bl	80033d8 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 800294e:	f000 fd77 	bl	8003440 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8002952:	f000 fda9 	bl	80034a8 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8002956:	f000 fddb 	bl	8003510 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 800295a:	f000 fde7 	bl	800352c <HUAN_ZIGBEE_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 800295e:	2014      	movs	r0, #20
 8002960:	f001 fafa 	bl	8003f58 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8002964:	484b      	ldr	r0, [pc, #300]	; (8002a94 <main+0x19c>)
 8002966:	f003 f807 	bl	8005978 <HAL_TIM_Base_Start_IT>

	initangleZ = himu.theta[2];
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <main+0x1a0>)
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <main+0x1a4>)
 8002970:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	myCoord.x = 0;
 8002972:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <main+0x1a8>)
 8002974:	2200      	movs	r2, #0
 8002976:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <main+0x1a8>)
 800297a:	2200      	movs	r2, #0
 800297c:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 10;
 800297e:	230a      	movs	r3, #10
 8002980:	80bb      	strh	r3, [r7, #4]
	goal.y = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	80fb      	strh	r3, [r7, #6]
//	uint8_t isFind_road = A_Star_main(&myCoord, &goal, 5);

    while (1) {
    	// test code to ensure the motor can work
		HAL_Delay(1000);
 8002986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800298a:	f001 fae5 	bl	8003f58 <HAL_Delay>
		chao_move_angle(0, 2000);
 800298e:	4945      	ldr	r1, [pc, #276]	; (8002aa4 <main+0x1ac>)
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f7fe fc0c 	bl	80011b0 <chao_move_angle>
		HAL_Delay(1000);
 8002998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299c:	f001 fadc 	bl	8003f58 <HAL_Delay>
		chao_move_angle(90, 2000);
 80029a0:	4940      	ldr	r1, [pc, #256]	; (8002aa4 <main+0x1ac>)
 80029a2:	4841      	ldr	r0, [pc, #260]	; (8002aa8 <main+0x1b0>)
 80029a4:	f7fe fc04 	bl	80011b0 <chao_move_angle>
		HAL_Delay(1000);
 80029a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ac:	f001 fad4 	bl	8003f58 <HAL_Delay>
		chao_move_angle(180, 2000);
 80029b0:	493c      	ldr	r1, [pc, #240]	; (8002aa4 <main+0x1ac>)
 80029b2:	483e      	ldr	r0, [pc, #248]	; (8002aac <main+0x1b4>)
 80029b4:	f7fe fbfc 	bl	80011b0 <chao_move_angle>
		HAL_Delay(1000);
 80029b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029bc:	f001 facc 	bl	8003f58 <HAL_Delay>
		chao_move_angle(270, 2000);
 80029c0:	4938      	ldr	r1, [pc, #224]	; (8002aa4 <main+0x1ac>)
 80029c2:	483b      	ldr	r0, [pc, #236]	; (8002ab0 <main+0x1b8>)
 80029c4:	f7fe fbf4 	bl	80011b0 <chao_move_angle>

//    	isArrived = GotoDestination(goal); //暂时不用管，还没有调通
//    	if (isArrived == 1) break;
    	rotation_angle = himu.theta[2] - initangleZ;
 80029c8:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <main+0x1a0>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	4a33      	ldr	r2, [pc, #204]	; (8002a9c <main+0x1a4>)
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f8fa 	bl	8000bcc <__aeabi_fsub>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <main+0x1bc>)
 80029de:	601a      	str	r2, [r3, #0]
    	while(rotation_angle < -180)
 80029e0:	e009      	b.n	80029f6 <main+0xfe>
    	{
    		rotation_angle += 360;
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <main+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <main+0x1c0>)
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe f8f1 	bl	8000bd0 <__addsf3>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <main+0x1bc>)
 80029f4:	601a      	str	r2, [r3, #0]
    	while(rotation_angle < -180)
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <main+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4930      	ldr	r1, [pc, #192]	; (8002abc <main+0x1c4>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb8d 	bl	800111c <__aeabi_fcmplt>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ec      	bne.n	80029e2 <main+0xea>
    	}
    	while(rotation_angle > 180)
 8002a08:	e009      	b.n	8002a1e <main+0x126>
    	{
    		rotation_angle -= 360;
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <main+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	492a      	ldr	r1, [pc, #168]	; (8002ab8 <main+0x1c0>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f8db 	bl	8000bcc <__aeabi_fsub>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <main+0x1bc>)
 8002a1c:	601a      	str	r2, [r3, #0]
    	while(rotation_angle > 180)
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <main+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <main+0x1b4>)
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fb97 	bl	8001158 <__aeabi_fcmpgt>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ec      	bne.n	8002a0a <main+0x112>
    	}

		while(!gameStatus){		// if the game is not running
 8002a30:	e005      	b.n	8002a3e <main+0x146>
	    	LED1_ON;
 8002a32:	2201      	movs	r2, #1
 8002a34:	2101      	movs	r1, #1
 8002a36:	4822      	ldr	r0, [pc, #136]	; (8002ac0 <main+0x1c8>)
 8002a38:	f002 f9d6 	bl	8004de8 <HAL_GPIO_WritePin>
			break;
 8002a3c:	e003      	b.n	8002a46 <main+0x14e>
		while(!gameStatus){		// if the game is not running
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <main+0x1cc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f5      	beq.n	8002a32 <main+0x13a>
		}

		while (gameStage == 0) {		// pre-match
 8002a46:	e003      	b.n	8002a50 <main+0x158>
			if (!gameStatus)	// if the game stopped
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <main+0x1cc>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <main+0x162>
		while (gameStage == 0) {		// pre-match
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <main+0x1d0>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f7      	beq.n	8002a48 <main+0x150>
 8002a58:	e005      	b.n	8002a66 <main+0x16e>
				break;
 8002a5a:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 8002a5c:	e003      	b.n	8002a66 <main+0x16e>
			if (!gameStatus)	// if the game stopped
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <main+0x1cc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <main+0x178>
		while (gameStage == 1){			// first-half
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <main+0x1d0>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d0f7      	beq.n	8002a5e <main+0x166>
 8002a6e:	e005      	b.n	8002a7c <main+0x184>
				break;
 8002a70:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 8002a72:	e003      	b.n	8002a7c <main+0x184>
			if (!gameStatus)	// if the game stopped
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <main+0x1cc>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <main+0x18e>
		while (gameStage == 2){			// second-half
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <main+0x1d0>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d0f7      	beq.n	8002a74 <main+0x17c>
 8002a84:	e77f      	b.n	8002986 <main+0x8e>
				break;
 8002a86:	bf00      	nop
		HAL_Delay(1000);
 8002a88:	e77d      	b.n	8002986 <main+0x8e>
 8002a8a:	bf00      	nop
 8002a8c:	2000098c 	.word	0x2000098c
 8002a90:	20000a04 	.word	0x20000a04
 8002a94:	200007ec 	.word	0x200007ec
 8002a98:	20000a7c 	.word	0x20000a7c
 8002a9c:	20000bc4 	.word	0x20000bc4
 8002aa0:	20000bc0 	.word	0x20000bc0
 8002aa4:	44fa0000 	.word	0x44fa0000
 8002aa8:	42b40000 	.word	0x42b40000
 8002aac:	43340000 	.word	0x43340000
 8002ab0:	43870000 	.word	0x43870000
 8002ab4:	20000bc8 	.word	0x20000bc8
 8002ab8:	43b40000 	.word	0x43b40000
 8002abc:	c3340000 	.word	0xc3340000
 8002ac0:	40010c00 	.word	0x40010c00
 8002ac4:	20000b61 	.word	0x20000b61
 8002ac8:	20000b60 	.word	0x20000b60

08002acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b090      	sub	sp, #64	; 0x40
 8002ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad2:	f107 0318 	add.w	r3, r7, #24
 8002ad6:	2228      	movs	r2, #40	; 0x28
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 ff40 	bl	8007960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002afe:	2301      	movs	r3, #1
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b02:	2302      	movs	r3, #2
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b12:	f107 0318 	add.w	r3, r7, #24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fac2 	bl	80050a0 <HAL_RCC_OscConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002b22:	f000 fd49 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b26:	230f      	movs	r3, #15
 8002b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 fd2f 	bl	80055a4 <HAL_RCC_ClockConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002b4c:	f000 fd34 	bl	80035b8 <Error_Handler>
  }
}
 8002b50:	bf00      	nop
 8002b52:	3740      	adds	r7, #64	; 0x40
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <MX_I2C1_Init+0x54>)
 8002b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <MX_I2C1_Init+0x58>)
 8002b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b96:	f002 f93f 	bl	8004e18 <HAL_I2C_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ba0:	f000 fd0a 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000630 	.word	0x20000630
 8002bac:	40005400 	.word	0x40005400
 8002bb0:	000186a0 	.word	0x000186a0

08002bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b096      	sub	sp, #88	; 0x58
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	615a      	str	r2, [r3, #20]
 8002be4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	2220      	movs	r2, #32
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 feb7 	bl	8007960 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bf2:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002bf4:	4a50      	ldr	r2, [pc, #320]	; (8002d38 <MX_TIM1_Init+0x184>)
 8002bf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c12:	4b48      	ldr	r3, [pc, #288]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c18:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c1e:	4845      	ldr	r0, [pc, #276]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c20:	f002 fe5a 	bl	80058d8 <HAL_TIM_Base_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002c2a:	f000 fcc5 	bl	80035b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c38:	4619      	mov	r1, r3
 8002c3a:	483e      	ldr	r0, [pc, #248]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c3c:	f003 fb04 	bl	8006248 <HAL_TIM_ConfigClockSource>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002c46:	f000 fcb7 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c4a:	483a      	ldr	r0, [pc, #232]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c4c:	f002 fef4 	bl	8005a38 <HAL_TIM_PWM_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002c56:	f000 fcaf 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c66:	4619      	mov	r1, r3
 8002c68:	4832      	ldr	r0, [pc, #200]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c6a:	f003 febf 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002c74:	f000 fca0 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c78:	2360      	movs	r3, #96	; 0x60
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c84:	2300      	movs	r3, #0
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4825      	ldr	r0, [pc, #148]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002c9e:	f003 fa15 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ca8:	f000 fc86 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	481f      	ldr	r0, [pc, #124]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002cb6:	f003 fa09 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002cc0:	f000 fc7a 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc8:	2208      	movs	r2, #8
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4819      	ldr	r0, [pc, #100]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002cce:	f003 f9fd 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002cd8:	f000 fc6e 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce0:	220c      	movs	r2, #12
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4813      	ldr	r0, [pc, #76]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002ce6:	f003 f9f1 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002cf0:	f000 fc62 	bl	80035b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002d18:	f003 fed4 	bl	8006ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002d22:	f000 fc49 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d26:	4803      	ldr	r0, [pc, #12]	; (8002d34 <MX_TIM1_Init+0x180>)
 8002d28:	f000 fe0c 	bl	8003944 <HAL_TIM_MspPostInit>

}
 8002d2c:	bf00      	nop
 8002d2e:	3758      	adds	r7, #88	; 0x58
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000684 	.word	0x20000684
 8002d38:	40012c00 	.word	0x40012c00

08002d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 fe08 	bl	8007960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d66:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d80:	2301      	movs	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4619      	mov	r1, r3
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002dac:	f002 ff56 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002db6:	f000 fbff 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4806      	ldr	r0, [pc, #24]	; (8002de0 <MX_TIM2_Init+0xa4>)
 8002dc8:	f003 fe10 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002dd2:	f000 fbf1 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	3730      	adds	r7, #48	; 0x30
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200006cc 	.word	0x200006cc

08002de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fdb4 	bl	8007960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <MX_TIM3_Init+0xa4>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	4619      	mov	r1, r3
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e52:	f002 ff03 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e5c:	f000 fbac 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_TIM3_Init+0xa0>)
 8002e6e:	f003 fdbd 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e78:	f000 fb9e 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	3730      	adds	r7, #48	; 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000714 	.word	0x20000714
 8002e88:	40000400 	.word	0x40000400

08002e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	; 0x30
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 fd60 	bl	8007960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <MX_TIM4_Init+0xa4>)
 8002eac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480c      	ldr	r0, [pc, #48]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002efa:	f002 feaf 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f04:	f000 fb58 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4805      	ldr	r0, [pc, #20]	; (8002f2c <MX_TIM4_Init+0xa0>)
 8002f16:	f003 fd69 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002f20:	f000 fb4a 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	3730      	adds	r7, #48	; 0x30
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000075c 	.word	0x2000075c
 8002f30:	40000800 	.word	0x40000800

08002f34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fd0c 	bl	8007960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <MX_TIM5_Init+0xa4>)
 8002f54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002fa2:	f002 fe5b 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002fac:	f000 fb04 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <MX_TIM5_Init+0xa0>)
 8002fbe:	f003 fd15 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002fc8:	f000 faf6 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fcc:	bf00      	nop
 8002fce:	3730      	adds	r7, #48	; 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200007a4 	.word	0x200007a4
 8002fd8:	40000c00 	.word	0x40000c00

08002fdc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_TIM6_Init+0x64>)
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <MX_TIM6_Init+0x68>)
 8002fee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_TIM6_Init+0x64>)
 8002ff2:	2247      	movs	r2, #71	; 0x47
 8002ff4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_TIM6_Init+0x64>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <MX_TIM6_Init+0x64>)
 8002ffe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003002:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_TIM6_Init+0x64>)
 8003006:	2200      	movs	r2, #0
 8003008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <MX_TIM6_Init+0x64>)
 800300c:	f002 fc64 	bl	80058d8 <HAL_TIM_Base_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003016:	f000 facf 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003022:	463b      	mov	r3, r7
 8003024:	4619      	mov	r1, r3
 8003026:	4806      	ldr	r0, [pc, #24]	; (8003040 <MX_TIM6_Init+0x64>)
 8003028:	f003 fce0 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003032:	f000 fac1 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200007ec 	.word	0x200007ec
 8003044:	40001000 	.word	0x40001000

08003048 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b096      	sub	sp, #88	; 0x58
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	615a      	str	r2, [r3, #20]
 8003078:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2220      	movs	r2, #32
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fc6d 	bl	8007960 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003086:	4b50      	ldr	r3, [pc, #320]	; (80031c8 <MX_TIM8_Init+0x180>)
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <MX_TIM8_Init+0x184>)
 800308a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800308c:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <MX_TIM8_Init+0x180>)
 800308e:	2200      	movs	r2, #0
 8003090:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <MX_TIM8_Init+0x180>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <MX_TIM8_Init+0x180>)
 800309a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a0:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030a6:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ac:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030b2:	4845      	ldr	r0, [pc, #276]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030b4:	f002 fc10 	bl	80058d8 <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80030be:	f000 fa7b 	bl	80035b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030cc:	4619      	mov	r1, r3
 80030ce:	483e      	ldr	r0, [pc, #248]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030d0:	f003 f8ba 	bl	8006248 <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80030da:	f000 fa6d 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80030de:	483a      	ldr	r0, [pc, #232]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030e0:	f002 fcaa 	bl	8005a38 <HAL_TIM_PWM_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80030ea:	f000 fa65 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030fa:	4619      	mov	r1, r3
 80030fc:	4832      	ldr	r0, [pc, #200]	; (80031c8 <MX_TIM8_Init+0x180>)
 80030fe:	f003 fc75 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003108:	f000 fa56 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800310c:	2360      	movs	r3, #96	; 0x60
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003118:	2300      	movs	r3, #0
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	4825      	ldr	r0, [pc, #148]	; (80031c8 <MX_TIM8_Init+0x180>)
 8003132:	f002 ffcb 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800313c:	f000 fa3c 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003144:	2204      	movs	r2, #4
 8003146:	4619      	mov	r1, r3
 8003148:	481f      	ldr	r0, [pc, #124]	; (80031c8 <MX_TIM8_Init+0x180>)
 800314a:	f002 ffbf 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003154:	f000 fa30 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315c:	2208      	movs	r2, #8
 800315e:	4619      	mov	r1, r3
 8003160:	4819      	ldr	r0, [pc, #100]	; (80031c8 <MX_TIM8_Init+0x180>)
 8003162:	f002 ffb3 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800316c:	f000 fa24 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003174:	220c      	movs	r2, #12
 8003176:	4619      	mov	r1, r3
 8003178:	4813      	ldr	r0, [pc, #76]	; (80031c8 <MX_TIM8_Init+0x180>)
 800317a:	f002 ffa7 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8003184:	f000 fa18 	bl	80035b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800319c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4807      	ldr	r0, [pc, #28]	; (80031c8 <MX_TIM8_Init+0x180>)
 80031ac:	f003 fc8a 	bl	8006ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80031b6:	f000 f9ff 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80031ba:	4803      	ldr	r0, [pc, #12]	; (80031c8 <MX_TIM8_Init+0x180>)
 80031bc:	f000 fbc2 	bl	8003944 <HAL_TIM_MspPostInit>

}
 80031c0:	bf00      	nop
 80031c2:	3758      	adds	r7, #88	; 0x58
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000834 	.word	0x20000834
 80031cc:	40013400 	.word	0x40013400

080031d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <MX_USART2_UART_Init+0x50>)
 80031d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_USART2_UART_Init+0x4c>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003206:	4805      	ldr	r0, [pc, #20]	; (800321c <MX_USART2_UART_Init+0x4c>)
 8003208:	f003 fcbf 	bl	8006b8a <HAL_UART_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003212:	f000 f9d1 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2000087c 	.word	0x2000087c
 8003220:	40004400 	.word	0x40004400

08003224 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <MX_USART3_UART_Init+0x50>)
 800322c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 8003230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003234:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 800324a:	220c      	movs	r2, #12
 800324c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800325a:	4805      	ldr	r0, [pc, #20]	; (8003270 <MX_USART3_UART_Init+0x4c>)
 800325c:	f003 fc95 	bl	8006b8a <HAL_UART_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003266:	f000 f9a7 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200008c0 	.word	0x200008c0
 8003274:	40004800 	.word	0x40004800

08003278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <MX_DMA_Init+0x48>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <MX_DMA_Init+0x48>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6153      	str	r3, [r2, #20]
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <MX_DMA_Init+0x48>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2102      	movs	r1, #2
 800329a:	200d      	movs	r0, #13
 800329c:	f000 ff57 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80032a0:	200d      	movs	r0, #13
 80032a2:	f000 ff70 	bl	8004186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2102      	movs	r1, #2
 80032aa:	2010      	movs	r0, #16
 80032ac:	f000 ff4f 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80032b0:	2010      	movs	r0, #16
 80032b2:	f000 ff68 	bl	8004186 <HAL_NVIC_EnableIRQ>

}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000

080032c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032d8:	4b23      	ldr	r3, [pc, #140]	; (8003368 <MX_GPIO_Init+0xa4>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <MX_GPIO_Init+0xa4>)
 80032de:	f043 0320 	orr.w	r3, r3, #32
 80032e2:	6193      	str	r3, [r2, #24]
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <MX_GPIO_Init+0xa4>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <MX_GPIO_Init+0xa4>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <MX_GPIO_Init+0xa4>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6193      	str	r3, [r2, #24]
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <MX_GPIO_Init+0xa4>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <MX_GPIO_Init+0xa4>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a16      	ldr	r2, [pc, #88]	; (8003368 <MX_GPIO_Init+0xa4>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <MX_GPIO_Init+0xa4>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <MX_GPIO_Init+0xa4>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a10      	ldr	r2, [pc, #64]	; (8003368 <MX_GPIO_Init+0xa4>)
 8003326:	f043 0310 	orr.w	r3, r3, #16
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <MX_GPIO_Init+0xa4>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003338:	2200      	movs	r2, #0
 800333a:	2107      	movs	r1, #7
 800333c:	480b      	ldr	r0, [pc, #44]	; (800336c <MX_GPIO_Init+0xa8>)
 800333e:	f001 fd53 	bl	8004de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8003342:	2307      	movs	r3, #7
 8003344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	2301      	movs	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2302      	movs	r3, #2
 8003350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	4619      	mov	r1, r3
 8003358:	4804      	ldr	r0, [pc, #16]	; (800336c <MX_GPIO_Init+0xa8>)
 800335a:	f001 fbb1 	bl	8004ac0 <HAL_GPIO_Init>

}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	40010c00 	.word	0x40010c00

08003370 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <HUAN_MOTOR1_Init+0x50>)
 8003378:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HUAN_MOTOR1_Init+0x54>)
 800337e:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HUAN_MOTOR1_Init+0x58>)
 8003384:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 8003388:	220c      	movs	r2, #12
 800338a:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 800338e:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <HUAN_MOTOR1_Init+0x58>)
 8003390:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 8003394:	2208      	movs	r2, #8
 8003396:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HUAN_MOTOR1_Init+0x5c>)
 80033a4:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 80033a8:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HUAN_MOTOR1_Init+0x60>)
 80033aa:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <HUAN_MOTOR1_Init+0x64>)
 80033b0:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 80033b2:	4802      	ldr	r0, [pc, #8]	; (80033bc <HUAN_MOTOR1_Init+0x4c>)
 80033b4:	f7fe fba8 	bl	8001b08 <huansic_motor_init>
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000098c 	.word	0x2000098c
 80033c0:	200006cc 	.word	0x200006cc
 80033c4:	3d4ccccd 	.word	0x3d4ccccd
 80033c8:	20000684 	.word	0x20000684
 80033cc:	399d4952 	.word	0x399d4952
 80033d0:	37a7c5ac 	.word	0x37a7c5ac
 80033d4:	387ba882 	.word	0x387ba882

080033d8 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HUAN_MOTOR2_Init+0x50>)
 80033e0:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 80033e4:	4a11      	ldr	r2, [pc, #68]	; (800342c <HUAN_MOTOR2_Init+0x54>)
 80033e6:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 80033ea:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HUAN_MOTOR2_Init+0x58>)
 80033ec:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <HUAN_MOTOR2_Init+0x58>)
 80033f8:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 80033fc:	2204      	movs	r2, #4
 80033fe:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HUAN_MOTOR2_Init+0x5c>)
 800340c:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 8003410:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HUAN_MOTOR2_Init+0x60>)
 8003412:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HUAN_MOTOR2_Init+0x64>)
 8003418:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 800341a:	4802      	ldr	r0, [pc, #8]	; (8003424 <HUAN_MOTOR2_Init+0x4c>)
 800341c:	f7fe fb74 	bl	8001b08 <huansic_motor_init>
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200009c8 	.word	0x200009c8
 8003428:	2000075c 	.word	0x2000075c
 800342c:	3d4ccccd 	.word	0x3d4ccccd
 8003430:	20000684 	.word	0x20000684
 8003434:	399d4952 	.word	0x399d4952
 8003438:	37a7c5ac 	.word	0x37a7c5ac
 800343c:	387ba882 	.word	0x387ba882

08003440 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HUAN_MOTOR3_Init+0x50>)
 8003448:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 800344c:	4a11      	ldr	r2, [pc, #68]	; (8003494 <HUAN_MOTOR3_Init+0x54>)
 800344e:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003452:	4a11      	ldr	r2, [pc, #68]	; (8003498 <HUAN_MOTOR3_Init+0x58>)
 8003454:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003458:	220c      	movs	r2, #12
 800345a:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 800345e:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <HUAN_MOTOR3_Init+0x58>)
 8003460:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003464:	2208      	movs	r2, #8
 8003466:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HUAN_MOTOR3_Init+0x5c>)
 8003474:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003478:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HUAN_MOTOR3_Init+0x60>)
 800347a:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HUAN_MOTOR3_Init+0x64>)
 8003480:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8003482:	4802      	ldr	r0, [pc, #8]	; (800348c <HUAN_MOTOR3_Init+0x4c>)
 8003484:	f7fe fb40 	bl	8001b08 <huansic_motor_init>
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000a04 	.word	0x20000a04
 8003490:	20000714 	.word	0x20000714
 8003494:	3d4ccccd 	.word	0x3d4ccccd
 8003498:	20000834 	.word	0x20000834
 800349c:	399d4952 	.word	0x399d4952
 80034a0:	37a7c5ac 	.word	0x37a7c5ac
 80034a4:	387ba882 	.word	0x387ba882

080034a8 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <HUAN_MOTOR4_Init+0x50>)
 80034b0:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HUAN_MOTOR4_Init+0x54>)
 80034b6:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034ba:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HUAN_MOTOR4_Init+0x58>)
 80034bc:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034c6:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <HUAN_MOTOR4_Init+0x58>)
 80034c8:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034cc:	2204      	movs	r2, #4
 80034ce:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HUAN_MOTOR4_Init+0x5c>)
 80034dc:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034e0:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HUAN_MOTOR4_Init+0x60>)
 80034e2:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <HUAN_MOTOR4_Init+0x64>)
 80034e8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 80034ea:	4802      	ldr	r0, [pc, #8]	; (80034f4 <HUAN_MOTOR4_Init+0x4c>)
 80034ec:	f7fe fb0c 	bl	8001b08 <huansic_motor_init>
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000a40 	.word	0x20000a40
 80034f8:	200007a4 	.word	0x200007a4
 80034fc:	3d4ccccd 	.word	0x3d4ccccd
 8003500:	20000834 	.word	0x20000834
 8003504:	399d4952 	.word	0x399d4952
 8003508:	37a7c5ac 	.word	0x37a7c5ac
 800350c:	387ba882 	.word	0x387ba882

08003510 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HUAN_IMU_Init+0x14>)
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HUAN_IMU_Init+0x18>)
 8003518:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 800351a:	4802      	ldr	r0, [pc, #8]	; (8003524 <HUAN_IMU_Init+0x14>)
 800351c:	f7fd ff62 	bl	80013e4 <huansic_jy62_init>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000a7c 	.word	0x20000a7c
 8003528:	200008c0 	.word	0x200008c0

0800352c <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HUAN_ZIGBEE_Init+0x14>)
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HUAN_ZIGBEE_Init+0x18>)
 8003534:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8003536:	4802      	ldr	r0, [pc, #8]	; (8003540 <HUAN_ZIGBEE_Init+0x14>)
 8003538:	f7fe fcde 	bl	8001ef8 <huansic_xb_init>
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000ad4 	.word	0x20000ad4
 8003544:	2000087c 	.word	0x2000087c

08003548 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_UART_RxCpltCallback+0x34>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d10b      	bne.n	8003572 <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_UART_RxCpltCallback+0x34>)
 800355c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 8003564:	4805      	ldr	r0, [pc, #20]	; (800357c <HAL_UART_RxCpltCallback+0x34>)
 8003566:	f7fe f893 	bl	8001690 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 800356a:	e002      	b.n	8003572 <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 800356c:	4803      	ldr	r0, [pc, #12]	; (800357c <HAL_UART_RxCpltCallback+0x34>)
 800356e:	f7fd ff6f 	bl	8001450 <huansic_jy62_dma_isr>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000a7c 	.word	0x20000a7c

08003580 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_UART_ErrorCallback+0x34>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d10b      	bne.n	80035aa <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_UART_ErrorCallback+0x34>)
 8003594:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 800359c:	4805      	ldr	r0, [pc, #20]	; (80035b4 <HAL_UART_ErrorCallback+0x34>)
 800359e:	f7fe f8c2 	bl	8001726 <huansic_jy62_error>
		else
			huansic_jy62_dma_error(&himu);
	} /*else if(){

	}*/
}
 80035a2:	e002      	b.n	80035aa <HAL_UART_ErrorCallback+0x2a>
			huansic_jy62_dma_error(&himu);
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <HAL_UART_ErrorCallback+0x34>)
 80035a6:	f7fe f8aa 	bl	80016fe <huansic_jy62_dma_error>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000a7c 	.word	0x20000a7c

080035b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_MspInit+0x5c>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_MspInit+0x5c>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6193      	str	r3, [r2, #24]
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_MspInit+0x5c>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_MspInit+0x5c>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_MspInit+0x5c>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_MspInit+0x5c>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_MspInit+0x60>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_MspInit+0x60>)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000

08003628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_I2C_MspInit+0x90>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d132      	bne.n	80036ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_I2C_MspInit+0x94>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <HAL_I2C_MspInit+0x94>)
 800364e:	f043 0308 	orr.w	r3, r3, #8
 8003652:	6193      	str	r3, [r2, #24]
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_I2C_MspInit+0x94>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003666:	2312      	movs	r3, #18
 8003668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800366a:	2303      	movs	r3, #3
 800366c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <HAL_I2C_MspInit+0x98>)
 8003676:	f001 fa23 	bl	8004ac0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_I2C_MspInit+0x9c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <HAL_I2C_MspInit+0x9c>)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_I2C_MspInit+0x94>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <HAL_I2C_MspInit+0x94>)
 800369c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036a0:	61d3      	str	r3, [r2, #28]
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_I2C_MspInit+0x94>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40005400 	.word	0x40005400
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40010c00 	.word	0x40010c00
 80036c4:	40010000 	.word	0x40010000

080036c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_TIM_Base_MspInit+0x8c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10c      	bne.n	80036f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036da:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 80036e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036e4:	6193      	str	r3, [r2, #24]
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80036f2:	e02a      	b.n	800374a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_TIM_Base_MspInit+0x94>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d114      	bne.n	8003728 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 8003704:	f043 0310 	orr.w	r3, r3, #16
 8003708:	61d3      	str	r3, [r2, #28]
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003716:	2200      	movs	r2, #0
 8003718:	2101      	movs	r1, #1
 800371a:	2036      	movs	r0, #54	; 0x36
 800371c:	f000 fd17 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003720:	2036      	movs	r0, #54	; 0x36
 8003722:	f000 fd30 	bl	8004186 <HAL_NVIC_EnableIRQ>
}
 8003726:	e010      	b.n	800374a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <HAL_TIM_Base_MspInit+0x98>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10b      	bne.n	800374a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 8003738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800373c:	6193      	str	r3, [r2, #24]
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_TIM_Base_MspInit+0x90>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40021000 	.word	0x40021000
 800375c:	40001000 	.word	0x40001000
 8003760:	40013400 	.word	0x40013400

08003764 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b090      	sub	sp, #64	; 0x40
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d14f      	bne.n	8003824 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4a67      	ldr	r2, [pc, #412]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	61d3      	str	r3, [r2, #28]
 8003790:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379c:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4a61      	ldr	r2, [pc, #388]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6193      	str	r3, [r2, #24]
 80037a8:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b4:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	4a5b      	ldr	r2, [pc, #364]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037ba:	f043 0308 	orr.w	r3, r3, #8
 80037be:	6193      	str	r3, [r2, #24]
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d2:	2300      	movs	r3, #0
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037de:	4619      	mov	r1, r3
 80037e0:	4852      	ldr	r0, [pc, #328]	; (800392c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80037e2:	f001 f96d 	bl	8004ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037e6:	2308      	movs	r3, #8
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ea:	2300      	movs	r3, #0
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f6:	4619      	mov	r1, r3
 80037f8:	484d      	ldr	r0, [pc, #308]	; (8003930 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037fa:	f001 f961 	bl	8004ac0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80037fe:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381c:	4a45      	ldr	r2, [pc, #276]	; (8003934 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003820:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003822:	e07c      	b.n	800391e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a43      	ldr	r2, [pc, #268]	; (8003938 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d124      	bne.n	8003878 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800382e:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4a3d      	ldr	r2, [pc, #244]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	61d3      	str	r3, [r2, #28]
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6193      	str	r3, [r2, #24]
 8003852:	4b35      	ldr	r3, [pc, #212]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800385e:	23c0      	movs	r3, #192	; 0xc0
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003862:	2300      	movs	r3, #0
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800386e:	4619      	mov	r1, r3
 8003870:	482e      	ldr	r0, [pc, #184]	; (800392c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003872:	f001 f925 	bl	8004ac0 <HAL_GPIO_Init>
}
 8003876:	e052      	b.n	800391e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <HAL_TIM_Encoder_MspInit+0x1d8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d124      	bne.n	80038cc <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	61d3      	str	r3, [r2, #28]
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	4a22      	ldr	r2, [pc, #136]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	6193      	str	r3, [r2, #24]
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038b2:	23c0      	movs	r3, #192	; 0xc0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b6:	2300      	movs	r3, #0
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c2:	4619      	mov	r1, r3
 80038c4:	481a      	ldr	r0, [pc, #104]	; (8003930 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80038c6:	f001 f8fb 	bl	8004ac0 <HAL_GPIO_Init>
}
 80038ca:	e028      	b.n	800391e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d123      	bne.n	800391e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038dc:	f043 0308 	orr.w	r3, r3, #8
 80038e0:	61d3      	str	r3, [r2, #28]
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	6193      	str	r3, [r2, #24]
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003906:	2303      	movs	r3, #3
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800390a:	2300      	movs	r3, #0
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003916:	4619      	mov	r1, r3
 8003918:	4804      	ldr	r0, [pc, #16]	; (800392c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800391a:	f001 f8d1 	bl	8004ac0 <HAL_GPIO_Init>
}
 800391e:	bf00      	nop
 8003920:	3740      	adds	r7, #64	; 0x40
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	40010800 	.word	0x40010800
 8003930:	40010c00 	.word	0x40010c00
 8003934:	40010000 	.word	0x40010000
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00

08003944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_TIM_MspPostInit+0x98>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d119      	bne.n	8003998 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_TIM_MspPostInit+0x9c>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_TIM_MspPostInit+0x9c>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6193      	str	r3, [r2, #24]
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_TIM_MspPostInit+0x9c>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800397c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003986:	2302      	movs	r3, #2
 8003988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398a:	f107 0310 	add.w	r3, r7, #16
 800398e:	4619      	mov	r1, r3
 8003990:	4814      	ldr	r0, [pc, #80]	; (80039e4 <HAL_TIM_MspPostInit+0xa0>)
 8003992:	f001 f895 	bl	8004ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003996:	e01d      	b.n	80039d4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <HAL_TIM_MspPostInit+0xa4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d118      	bne.n	80039d4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_TIM_MspPostInit+0x9c>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_TIM_MspPostInit+0x9c>)
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	6193      	str	r3, [r2, #24]
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_TIM_MspPostInit+0x9c>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80039ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80039be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c8:	f107 0310 	add.w	r3, r7, #16
 80039cc:	4619      	mov	r1, r3
 80039ce:	4807      	ldr	r0, [pc, #28]	; (80039ec <HAL_TIM_MspPostInit+0xa8>)
 80039d0:	f001 f876 	bl	8004ac0 <HAL_GPIO_Init>
}
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40010800 	.word	0x40010800
 80039e8:	40013400 	.word	0x40013400
 80039ec:	40011000 	.word	0x40011000

080039f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6a      	ldr	r2, [pc, #424]	; (8003bb4 <HAL_UART_MspInit+0x1c4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d156      	bne.n	8003abe <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a10:	4b69      	ldr	r3, [pc, #420]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4a68      	ldr	r2, [pc, #416]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1a:	61d3      	str	r3, [r2, #28]
 8003a1c:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4a62      	ldr	r2, [pc, #392]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6193      	str	r3, [r2, #24]
 8003a34:	4b60      	ldr	r3, [pc, #384]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003a40:	2304      	movs	r3, #4
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f107 031c 	add.w	r3, r7, #28
 8003a50:	4619      	mov	r1, r3
 8003a52:	485a      	ldr	r0, [pc, #360]	; (8003bbc <HAL_UART_MspInit+0x1cc>)
 8003a54:	f001 f834 	bl	8004ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4854      	ldr	r0, [pc, #336]	; (8003bbc <HAL_UART_MspInit+0x1cc>)
 8003a6c:	f001 f828 	bl	8004ac0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a72:	4a54      	ldr	r2, [pc, #336]	; (8003bc4 <HAL_UART_MspInit+0x1d4>)
 8003a74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a76:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a7c:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a82:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a88:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a8e:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a94:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a9a:	4b49      	ldr	r3, [pc, #292]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003aa0:	4847      	ldr	r0, [pc, #284]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003aa2:	f000 fb8b 	bl	80041bc <HAL_DMA_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003aac:	f7ff fd84 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab6:	4a42      	ldr	r2, [pc, #264]	; (8003bc0 <HAL_UART_MspInit+0x1d0>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003abc:	e076      	b.n	8003bac <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <HAL_UART_MspInit+0x1d8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d171      	bne.n	8003bac <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a3a      	ldr	r2, [pc, #232]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad2:	61d3      	str	r3, [r2, #28]
 8003ad4:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6193      	str	r3, [r2, #24]
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_UART_MspInit+0x1c8>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8003af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b02:	2303      	movs	r3, #3
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	482f      	ldr	r0, [pc, #188]	; (8003bcc <HAL_UART_MspInit+0x1dc>)
 8003b0e:	f000 ffd7 	bl	8004ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8003b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	4829      	ldr	r0, [pc, #164]	; (8003bcc <HAL_UART_MspInit+0x1dc>)
 8003b28:	f000 ffca 	bl	8004ac0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_UART_MspInit+0x1e0>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	f043 0310 	orr.w	r3, r3, #16
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4a:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <HAL_UART_MspInit+0x1e0>)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003b50:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b52:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_UART_MspInit+0x1e8>)
 8003b54:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b80:	4814      	ldr	r0, [pc, #80]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b82:	f000 fb1b 	bl	80041bc <HAL_DMA_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003b8c:	f7ff fd14 	bl	80035b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
 8003b96:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <HAL_UART_MspInit+0x1e4>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	2027      	movs	r0, #39	; 0x27
 8003ba2:	f000 fad4 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ba6:	2027      	movs	r0, #39	; 0x27
 8003ba8:	f000 faed 	bl	8004186 <HAL_NVIC_EnableIRQ>
}
 8003bac:	bf00      	nop
 8003bae:	3730      	adds	r7, #48	; 0x30
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40010800 	.word	0x40010800
 8003bc0:	20000904 	.word	0x20000904
 8003bc4:	4002006c 	.word	0x4002006c
 8003bc8:	40004800 	.word	0x40004800
 8003bcc:	40011000 	.word	0x40011000
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	20000948 	.word	0x20000948
 8003bd8:	40020030 	.word	0x40020030

08003bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003be0:	e7fe      	b.n	8003be0 <NMI_Handler+0x4>

08003be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be6:	e7fe      	b.n	8003be6 <HardFault_Handler+0x4>

08003be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <MemManage_Handler+0x4>

08003bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <BusFault_Handler+0x4>

08003bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <UsageFault_Handler+0x4>

08003bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c22:	f000 f97d 	bl	8003f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <DMA1_Channel3_IRQHandler+0x10>)
 8003c32:	f000 fcdb 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000948 	.word	0x20000948

08003c40 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <DMA1_Channel6_IRQHandler+0x24>)
 8003c46:	7a1b      	ldrb	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8003c4c:	4805      	ldr	r0, [pc, #20]	; (8003c64 <DMA1_Channel6_IRQHandler+0x24>)
 8003c4e:	f7fe f969 	bl	8001f24 <huansic_xb_decodeHeader>
 8003c52:	e002      	b.n	8003c5a <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8003c54:	4803      	ldr	r0, [pc, #12]	; (8003c64 <DMA1_Channel6_IRQHandler+0x24>)
 8003c56:	f7fe f9a3 	bl	8001fa0 <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c5a:	4803      	ldr	r0, [pc, #12]	; (8003c68 <DMA1_Channel6_IRQHandler+0x28>)
 8003c5c:	f000 fcc6 	bl	80045ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000ad4 	.word	0x20000ad4
 8003c68:	20000904 	.word	0x20000904

08003c6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <USART3_IRQHandler+0x10>)
 8003c72:	f003 f8c9 	bl	8006e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200008c0 	.word	0x200008c0

08003c80 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8003c84:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <TIM6_IRQHandler+0x28>)
 8003c86:	f7fd fffd 	bl	8001c84 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8003c8a:	4808      	ldr	r0, [pc, #32]	; (8003cac <TIM6_IRQHandler+0x2c>)
 8003c8c:	f7fd fffa 	bl	8001c84 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8003c90:	4807      	ldr	r0, [pc, #28]	; (8003cb0 <TIM6_IRQHandler+0x30>)
 8003c92:	f7fd fff7 	bl	8001c84 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8003c96:	4807      	ldr	r0, [pc, #28]	; (8003cb4 <TIM6_IRQHandler+0x34>)
 8003c98:	f7fd fff4 	bl	8001c84 <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c9c:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <TIM6_IRQHandler+0x38>)
 8003c9e:	f002 f90d 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000098c 	.word	0x2000098c
 8003cac:	200009c8 	.word	0x200009c8
 8003cb0:	20000a04 	.word	0x20000a04
 8003cb4:	20000a40 	.word	0x20000a40
 8003cb8:	200007ec 	.word	0x200007ec

08003cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
	return 1;
 8003cc0:	2301      	movs	r3, #1
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <_kill>:

int _kill(int pid, int sig)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cd4:	f003 fe08 	bl	80078e8 <__errno>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2216      	movs	r2, #22
 8003cdc:	601a      	str	r2, [r3, #0]
	return -1;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_exit>:

void _exit (int status)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ffe7 	bl	8003cca <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cfc:	e7fe      	b.n	8003cfc <_exit+0x12>

08003cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e00a      	b.n	8003d26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d10:	f3af 8000 	nop.w
 8003d14:	4601      	mov	r1, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	60ba      	str	r2, [r7, #8]
 8003d1c:	b2ca      	uxtb	r2, r1
 8003d1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3301      	adds	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	dbf0      	blt.n	8003d10 <_read+0x12>
	}

return len;
 8003d2e:	687b      	ldr	r3, [r7, #4]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e009      	b.n	8003d5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	60ba      	str	r2, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	dbf1      	blt.n	8003d4a <_write+0x12>
	}
	return len;
 8003d66:	687b      	ldr	r3, [r7, #4]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_close>:

int _close(int file)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	return -1;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d96:	605a      	str	r2, [r3, #4]
	return 0;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <_isatty>:

int _isatty(int file)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	return 1;
 8003dac:	2301      	movs	r3, #1
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <_sbrk+0x5c>)
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <_sbrk+0x60>)
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <_sbrk+0x64>)
 8003dee:	4a12      	ldr	r2, [pc, #72]	; (8003e38 <_sbrk+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <_sbrk+0x64>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e00:	f003 fd72 	bl	80078e8 <__errno>
 8003e04:	4603      	mov	r3, r0
 8003e06:	220c      	movs	r2, #12
 8003e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	e009      	b.n	8003e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <_sbrk+0x64>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <_sbrk+0x64>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <_sbrk+0x64>)
 8003e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2000c000 	.word	0x2000c000
 8003e30:	00000400 	.word	0x00000400
 8003e34:	20000bd8 	.word	0x20000bd8
 8003e38:	20000bf0 	.word	0x20000bf0

08003e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e48:	480c      	ldr	r0, [pc, #48]	; (8003e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e4a:	490d      	ldr	r1, [pc, #52]	; (8003e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e50:	e002      	b.n	8003e58 <LoopCopyDataInit>

08003e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e56:	3304      	adds	r3, #4

08003e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e5c:	d3f9      	bcc.n	8003e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e60:	4c0a      	ldr	r4, [pc, #40]	; (8003e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e64:	e001      	b.n	8003e6a <LoopFillZerobss>

08003e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e68:	3204      	adds	r2, #4

08003e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e6c:	d3fb      	bcc.n	8003e66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e6e:	f7ff ffe5 	bl	8003e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e72:	f003 fd51 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e76:	f7fe fd3f 	bl	80028f8 <main>
  bx lr
 8003e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8003e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003e84:	08009d30 	.word	0x08009d30
  ldr r2, =_sbss
 8003e88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003e8c:	20000bf0 	.word	0x20000bf0

08003e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e90:	e7fe      	b.n	8003e90 <ADC1_2_IRQHandler>
	...

08003e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_Init+0x28>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_Init+0x28>)
 8003e9e:	f043 0310 	orr.w	r3, r3, #16
 8003ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea4:	2003      	movs	r0, #3
 8003ea6:	f000 f947 	bl	8004138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eaa:	200f      	movs	r0, #15
 8003eac:	f000 f808 	bl	8003ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb0:	f7ff fb88 	bl	80035c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40022000 	.word	0x40022000

08003ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_InitTick+0x54>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_InitTick+0x58>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f95f 	bl	80041a2 <HAL_SYSTICK_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00e      	b.n	8003f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b0f      	cmp	r3, #15
 8003ef2:	d80a      	bhi.n	8003f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f000 f927 	bl	800414e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f00:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <HAL_InitTick+0x5c>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000004 	.word	0x20000004
 8003f18:	2000000c 	.word	0x2000000c
 8003f1c:	20000008 	.word	0x20000008

08003f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_IncTick+0x1c>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_IncTick+0x20>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a03      	ldr	r2, [pc, #12]	; (8003f40 <HAL_IncTick+0x20>)
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	2000000c 	.word	0x2000000c
 8003f40:	20000bdc 	.word	0x20000bdc

08003f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return uwTick;
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <HAL_GetTick+0x10>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	20000bdc 	.word	0x20000bdc

08003f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d005      	beq.n	8003f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_Delay+0x44>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f7e:	bf00      	nop
 8003f80:	f7ff ffe0 	bl	8003f44 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d8f7      	bhi.n	8003f80 <HAL_Delay+0x28>
  {
  }
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000000c 	.word	0x2000000c

08003fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd2:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	60d3      	str	r3, [r2, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <__NVIC_GetPriorityGrouping+0x18>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	f003 0307 	and.w	r3, r3, #7
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	2b00      	cmp	r3, #0
 8004014:	db0b      	blt.n	800402e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	4906      	ldr	r1, [pc, #24]	; (8004038 <__NVIC_EnableIRQ+0x34>)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2001      	movs	r0, #1
 8004026:	fa00 f202 	lsl.w	r2, r0, r2
 800402a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db0a      	blt.n	8004066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	490c      	ldr	r1, [pc, #48]	; (8004088 <__NVIC_SetPriority+0x4c>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	440b      	add	r3, r1
 8004060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004064:	e00a      	b.n	800407c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4908      	ldr	r1, [pc, #32]	; (800408c <__NVIC_SetPriority+0x50>)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3b04      	subs	r3, #4
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	440b      	add	r3, r1
 800407a:	761a      	strb	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000e100 	.word	0xe000e100
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f1c3 0307 	rsb	r3, r3, #7
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf28      	it	cs
 80040ae:	2304      	movcs	r3, #4
 80040b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d902      	bls.n	80040c0 <NVIC_EncodePriority+0x30>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3b03      	subs	r3, #3
 80040be:	e000      	b.n	80040c2 <NVIC_EncodePriority+0x32>
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	401a      	ands	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	43d9      	mvns	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	4313      	orrs	r3, r2
         );
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	; 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004104:	d301      	bcc.n	800410a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004106:	2301      	movs	r3, #1
 8004108:	e00f      	b.n	800412a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <SysTick_Config+0x40>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004112:	210f      	movs	r1, #15
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	f7ff ff90 	bl	800403c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <SysTick_Config+0x40>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <SysTick_Config+0x40>)
 8004124:	2207      	movs	r2, #7
 8004126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	e000e010 	.word	0xe000e010

08004138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff2d 	bl	8003fa0 <__NVIC_SetPriorityGrouping>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004160:	f7ff ff42 	bl	8003fe8 <__NVIC_GetPriorityGrouping>
 8004164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff90 	bl	8004090 <NVIC_EncodePriority>
 8004170:	4602      	mov	r2, r0
 8004172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff5f 	bl	800403c <__NVIC_SetPriority>
}
 800417e:	bf00      	nop
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	4603      	mov	r3, r0
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff35 	bl	8004004 <__NVIC_EnableIRQ>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ffa2 	bl	80040f4 <SysTick_Config>
 80041b0:	4603      	mov	r3, r0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e059      	b.n	8004286 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b2d      	ldr	r3, [pc, #180]	; (8004290 <HAL_DMA_Init+0xd4>)
 80041da:	429a      	cmp	r2, r3
 80041dc:	d80f      	bhi.n	80041fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_DMA_Init+0xd8>)
 80041e6:	4413      	add	r3, r2
 80041e8:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <HAL_DMA_Init+0xdc>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	009a      	lsls	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a28      	ldr	r2, [pc, #160]	; (800429c <HAL_DMA_Init+0xe0>)
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80041fc:	e00e      	b.n	800421c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <HAL_DMA_Init+0xe4>)
 8004206:	4413      	add	r3, r2
 8004208:	4a23      	ldr	r2, [pc, #140]	; (8004298 <HAL_DMA_Init+0xdc>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	009a      	lsls	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <HAL_DMA_Init+0xe8>)
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004232:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004236:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40020407 	.word	0x40020407
 8004294:	bffdfff8 	.word	0xbffdfff8
 8004298:	cccccccd 	.word	0xcccccccd
 800429c:	40020000 	.word	0x40020000
 80042a0:	bffdfbf8 	.word	0xbffdfbf8
 80042a4:	40020400 	.word	0x40020400

080042a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_DMA_Start_IT+0x20>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e04a      	b.n	800435e <HAL_DMA_Start_IT+0xb6>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d13a      	bne.n	8004350 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fbb0 	bl	8004a64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 020e 	orr.w	r2, r2, #14
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e00f      	b.n	800433e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0204 	bic.w	r2, r2, #4
 800432c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 020a 	orr.w	r2, r2, #10
 800433c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e005      	b.n	800435c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004358:	2302      	movs	r3, #2
 800435a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004378:	2b02      	cmp	r3, #2
 800437a:	d008      	beq.n	800438e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2204      	movs	r2, #4
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e020      	b.n	80043d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 020e 	bic.w	r2, r2, #14
 800439c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f202 	lsl.w	r2, r1, r2
 80043bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d005      	beq.n	80043fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2204      	movs	r2, #4
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	e0d6      	b.n	80045ac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 020e 	bic.w	r2, r2, #14
 800440c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	4b64      	ldr	r3, [pc, #400]	; (80045b8 <HAL_DMA_Abort_IT+0x1dc>)
 8004426:	429a      	cmp	r2, r3
 8004428:	d958      	bls.n	80044dc <HAL_DMA_Abort_IT+0x100>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a63      	ldr	r2, [pc, #396]	; (80045bc <HAL_DMA_Abort_IT+0x1e0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d04f      	beq.n	80044d4 <HAL_DMA_Abort_IT+0xf8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a61      	ldr	r2, [pc, #388]	; (80045c0 <HAL_DMA_Abort_IT+0x1e4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d048      	beq.n	80044d0 <HAL_DMA_Abort_IT+0xf4>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a60      	ldr	r2, [pc, #384]	; (80045c4 <HAL_DMA_Abort_IT+0x1e8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d040      	beq.n	80044ca <HAL_DMA_Abort_IT+0xee>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <HAL_DMA_Abort_IT+0x1ec>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d038      	beq.n	80044c4 <HAL_DMA_Abort_IT+0xe8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_DMA_Abort_IT+0x1f0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d030      	beq.n	80044be <HAL_DMA_Abort_IT+0xe2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5b      	ldr	r2, [pc, #364]	; (80045d0 <HAL_DMA_Abort_IT+0x1f4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d028      	beq.n	80044b8 <HAL_DMA_Abort_IT+0xdc>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a53      	ldr	r2, [pc, #332]	; (80045b8 <HAL_DMA_Abort_IT+0x1dc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d020      	beq.n	80044b2 <HAL_DMA_Abort_IT+0xd6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a57      	ldr	r2, [pc, #348]	; (80045d4 <HAL_DMA_Abort_IT+0x1f8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d019      	beq.n	80044ae <HAL_DMA_Abort_IT+0xd2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a56      	ldr	r2, [pc, #344]	; (80045d8 <HAL_DMA_Abort_IT+0x1fc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d012      	beq.n	80044aa <HAL_DMA_Abort_IT+0xce>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a54      	ldr	r2, [pc, #336]	; (80045dc <HAL_DMA_Abort_IT+0x200>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00a      	beq.n	80044a4 <HAL_DMA_Abort_IT+0xc8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a53      	ldr	r2, [pc, #332]	; (80045e0 <HAL_DMA_Abort_IT+0x204>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d102      	bne.n	800449e <HAL_DMA_Abort_IT+0xc2>
 8004498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800449c:	e01b      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 800449e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044a2:	e018      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044a8:	e015      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044aa:	2310      	movs	r3, #16
 80044ac:	e013      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e011      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b6:	e00e      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044bc:	e00b      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c2:	e008      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c8:	e005      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ce:	e002      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044d0:	2310      	movs	r3, #16
 80044d2:	e000      	b.n	80044d6 <HAL_DMA_Abort_IT+0xfa>
 80044d4:	2301      	movs	r3, #1
 80044d6:	4a43      	ldr	r2, [pc, #268]	; (80045e4 <HAL_DMA_Abort_IT+0x208>)
 80044d8:	6053      	str	r3, [r2, #4]
 80044da:	e057      	b.n	800458c <HAL_DMA_Abort_IT+0x1b0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a36      	ldr	r2, [pc, #216]	; (80045bc <HAL_DMA_Abort_IT+0x1e0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d04f      	beq.n	8004586 <HAL_DMA_Abort_IT+0x1aa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a35      	ldr	r2, [pc, #212]	; (80045c0 <HAL_DMA_Abort_IT+0x1e4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d048      	beq.n	8004582 <HAL_DMA_Abort_IT+0x1a6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a33      	ldr	r2, [pc, #204]	; (80045c4 <HAL_DMA_Abort_IT+0x1e8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d040      	beq.n	800457c <HAL_DMA_Abort_IT+0x1a0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <HAL_DMA_Abort_IT+0x1ec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d038      	beq.n	8004576 <HAL_DMA_Abort_IT+0x19a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a30      	ldr	r2, [pc, #192]	; (80045cc <HAL_DMA_Abort_IT+0x1f0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d030      	beq.n	8004570 <HAL_DMA_Abort_IT+0x194>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <HAL_DMA_Abort_IT+0x1f4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d028      	beq.n	800456a <HAL_DMA_Abort_IT+0x18e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a26      	ldr	r2, [pc, #152]	; (80045b8 <HAL_DMA_Abort_IT+0x1dc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d020      	beq.n	8004564 <HAL_DMA_Abort_IT+0x188>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2b      	ldr	r2, [pc, #172]	; (80045d4 <HAL_DMA_Abort_IT+0x1f8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d019      	beq.n	8004560 <HAL_DMA_Abort_IT+0x184>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_DMA_Abort_IT+0x1fc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d012      	beq.n	800455c <HAL_DMA_Abort_IT+0x180>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a28      	ldr	r2, [pc, #160]	; (80045dc <HAL_DMA_Abort_IT+0x200>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00a      	beq.n	8004556 <HAL_DMA_Abort_IT+0x17a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <HAL_DMA_Abort_IT+0x204>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d102      	bne.n	8004550 <HAL_DMA_Abort_IT+0x174>
 800454a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454e:	e01b      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004554:	e018      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800455a:	e015      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 800455c:	2310      	movs	r3, #16
 800455e:	e013      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004560:	2301      	movs	r3, #1
 8004562:	e011      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004568:	e00e      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 800456a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800456e:	e00b      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004574:	e008      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800457a:	e005      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 800457c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004580:	e002      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004582:	2310      	movs	r3, #16
 8004584:	e000      	b.n	8004588 <HAL_DMA_Abort_IT+0x1ac>
 8004586:	2301      	movs	r3, #1
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_DMA_Abort_IT+0x20c>)
 800458a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
    } 
  }
  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40020080 	.word	0x40020080
 80045bc:	40020008 	.word	0x40020008
 80045c0:	4002001c 	.word	0x4002001c
 80045c4:	40020030 	.word	0x40020030
 80045c8:	40020044 	.word	0x40020044
 80045cc:	40020058 	.word	0x40020058
 80045d0:	4002006c 	.word	0x4002006c
 80045d4:	40020408 	.word	0x40020408
 80045d8:	4002041c 	.word	0x4002041c
 80045dc:	40020430 	.word	0x40020430
 80045e0:	40020444 	.word	0x40020444
 80045e4:	40020400 	.word	0x40020400
 80045e8:	40020000 	.word	0x40020000

080045ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2204      	movs	r2, #4
 800460a:	409a      	lsls	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80f1 	beq.w	80047f8 <HAL_DMA_IRQHandler+0x20c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80eb 	beq.w	80047f8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0204 	bic.w	r2, r2, #4
 800463e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	4b5f      	ldr	r3, [pc, #380]	; (80047c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d958      	bls.n	80046fe <HAL_DMA_IRQHandler+0x112>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d04f      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x10a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5c      	ldr	r2, [pc, #368]	; (80047cc <HAL_DMA_IRQHandler+0x1e0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d048      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x106>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a5a      	ldr	r2, [pc, #360]	; (80047d0 <HAL_DMA_IRQHandler+0x1e4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d040      	beq.n	80046ec <HAL_DMA_IRQHandler+0x100>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a59      	ldr	r2, [pc, #356]	; (80047d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d038      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xfa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a57      	ldr	r2, [pc, #348]	; (80047d8 <HAL_DMA_IRQHandler+0x1ec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d030      	beq.n	80046e0 <HAL_DMA_IRQHandler+0xf4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a56      	ldr	r2, [pc, #344]	; (80047dc <HAL_DMA_IRQHandler+0x1f0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d028      	beq.n	80046da <HAL_DMA_IRQHandler+0xee>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_DMA_IRQHandler+0x1d8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d020      	beq.n	80046d4 <HAL_DMA_IRQHandler+0xe8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_DMA_IRQHandler+0x1f4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d019      	beq.n	80046d0 <HAL_DMA_IRQHandler+0xe4>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a50      	ldr	r2, [pc, #320]	; (80047e4 <HAL_DMA_IRQHandler+0x1f8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d012      	beq.n	80046cc <HAL_DMA_IRQHandler+0xe0>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a4f      	ldr	r2, [pc, #316]	; (80047e8 <HAL_DMA_IRQHandler+0x1fc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00a      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xda>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a4d      	ldr	r2, [pc, #308]	; (80047ec <HAL_DMA_IRQHandler+0x200>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d102      	bne.n	80046c0 <HAL_DMA_IRQHandler+0xd4>
 80046ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046be:	e01b      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046c4:	e018      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ca:	e015      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046cc:	2340      	movs	r3, #64	; 0x40
 80046ce:	e013      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046d0:	2304      	movs	r3, #4
 80046d2:	e011      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046d8:	e00e      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046de:	e00b      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046e4:	e008      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046ea:	e005      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f0:	e002      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	e000      	b.n	80046f8 <HAL_DMA_IRQHandler+0x10c>
 80046f6:	2304      	movs	r3, #4
 80046f8:	4a3d      	ldr	r2, [pc, #244]	; (80047f0 <HAL_DMA_IRQHandler+0x204>)
 80046fa:	6053      	str	r3, [r2, #4]
 80046fc:	e057      	b.n	80047ae <HAL_DMA_IRQHandler+0x1c2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a31      	ldr	r2, [pc, #196]	; (80047c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d04f      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x1bc>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2f      	ldr	r2, [pc, #188]	; (80047cc <HAL_DMA_IRQHandler+0x1e0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d048      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x1b8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2e      	ldr	r2, [pc, #184]	; (80047d0 <HAL_DMA_IRQHandler+0x1e4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d040      	beq.n	800479e <HAL_DMA_IRQHandler+0x1b2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d038      	beq.n	8004798 <HAL_DMA_IRQHandler+0x1ac>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <HAL_DMA_IRQHandler+0x1ec>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d030      	beq.n	8004792 <HAL_DMA_IRQHandler+0x1a6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a29      	ldr	r2, [pc, #164]	; (80047dc <HAL_DMA_IRQHandler+0x1f0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d028      	beq.n	800478c <HAL_DMA_IRQHandler+0x1a0>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d020      	beq.n	8004786 <HAL_DMA_IRQHandler+0x19a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <HAL_DMA_IRQHandler+0x1f4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_DMA_IRQHandler+0x196>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a24      	ldr	r2, [pc, #144]	; (80047e4 <HAL_DMA_IRQHandler+0x1f8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d012      	beq.n	800477e <HAL_DMA_IRQHandler+0x192>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <HAL_DMA_IRQHandler+0x1fc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00a      	beq.n	8004778 <HAL_DMA_IRQHandler+0x18c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a21      	ldr	r2, [pc, #132]	; (80047ec <HAL_DMA_IRQHandler+0x200>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d102      	bne.n	8004772 <HAL_DMA_IRQHandler+0x186>
 800476c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004770:	e01b      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 8004772:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004776:	e018      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 8004778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800477c:	e015      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	e013      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 8004782:	2304      	movs	r3, #4
 8004784:	e011      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 8004786:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800478a:	e00e      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 800478c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004790:	e00b      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 8004792:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004796:	e008      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 8004798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800479c:	e005      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 800479e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a2:	e002      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	e000      	b.n	80047aa <HAL_DMA_IRQHandler+0x1be>
 80047a8:	2304      	movs	r3, #4
 80047aa:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <HAL_DMA_IRQHandler+0x208>)
 80047ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8136 	beq.w	8004a24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80047c0:	e130      	b.n	8004a24 <HAL_DMA_IRQHandler+0x438>
 80047c2:	bf00      	nop
 80047c4:	40020080 	.word	0x40020080
 80047c8:	40020008 	.word	0x40020008
 80047cc:	4002001c 	.word	0x4002001c
 80047d0:	40020030 	.word	0x40020030
 80047d4:	40020044 	.word	0x40020044
 80047d8:	40020058 	.word	0x40020058
 80047dc:	4002006c 	.word	0x4002006c
 80047e0:	40020408 	.word	0x40020408
 80047e4:	4002041c 	.word	0x4002041c
 80047e8:	40020430 	.word	0x40020430
 80047ec:	40020444 	.word	0x40020444
 80047f0:	40020400 	.word	0x40020400
 80047f4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2202      	movs	r2, #2
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80dd 	beq.w	80049c4 <HAL_DMA_IRQHandler+0x3d8>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80d7 	beq.w	80049c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 020a 	bic.w	r2, r2, #10
 8004832:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b7b      	ldr	r3, [pc, #492]	; (8004a30 <HAL_DMA_IRQHandler+0x444>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d958      	bls.n	80048fa <HAL_DMA_IRQHandler+0x30e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a79      	ldr	r2, [pc, #484]	; (8004a34 <HAL_DMA_IRQHandler+0x448>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d04f      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x306>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a78      	ldr	r2, [pc, #480]	; (8004a38 <HAL_DMA_IRQHandler+0x44c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d048      	beq.n	80048ee <HAL_DMA_IRQHandler+0x302>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a76      	ldr	r2, [pc, #472]	; (8004a3c <HAL_DMA_IRQHandler+0x450>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d040      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x2fc>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a75      	ldr	r2, [pc, #468]	; (8004a40 <HAL_DMA_IRQHandler+0x454>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d038      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2f6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a73      	ldr	r2, [pc, #460]	; (8004a44 <HAL_DMA_IRQHandler+0x458>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d030      	beq.n	80048dc <HAL_DMA_IRQHandler+0x2f0>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a72      	ldr	r2, [pc, #456]	; (8004a48 <HAL_DMA_IRQHandler+0x45c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d028      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x2ea>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a69      	ldr	r2, [pc, #420]	; (8004a30 <HAL_DMA_IRQHandler+0x444>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d020      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x2e4>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6e      	ldr	r2, [pc, #440]	; (8004a4c <HAL_DMA_IRQHandler+0x460>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d019      	beq.n	80048cc <HAL_DMA_IRQHandler+0x2e0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a6c      	ldr	r2, [pc, #432]	; (8004a50 <HAL_DMA_IRQHandler+0x464>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d012      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x2dc>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6b      	ldr	r2, [pc, #428]	; (8004a54 <HAL_DMA_IRQHandler+0x468>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00a      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x2d6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a69      	ldr	r2, [pc, #420]	; (8004a58 <HAL_DMA_IRQHandler+0x46c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d102      	bne.n	80048bc <HAL_DMA_IRQHandler+0x2d0>
 80048b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ba:	e01b      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c0:	e018      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c6:	e015      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048c8:	2320      	movs	r3, #32
 80048ca:	e013      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e011      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d4:	e00e      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048da:	e00b      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e0:	e008      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e6:	e005      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ec:	e002      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048ee:	2320      	movs	r3, #32
 80048f0:	e000      	b.n	80048f4 <HAL_DMA_IRQHandler+0x308>
 80048f2:	2302      	movs	r3, #2
 80048f4:	4a59      	ldr	r2, [pc, #356]	; (8004a5c <HAL_DMA_IRQHandler+0x470>)
 80048f6:	6053      	str	r3, [r2, #4]
 80048f8:	e057      	b.n	80049aa <HAL_DMA_IRQHandler+0x3be>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4d      	ldr	r2, [pc, #308]	; (8004a34 <HAL_DMA_IRQHandler+0x448>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d04f      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x3b8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4b      	ldr	r2, [pc, #300]	; (8004a38 <HAL_DMA_IRQHandler+0x44c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d048      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x3b4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4a      	ldr	r2, [pc, #296]	; (8004a3c <HAL_DMA_IRQHandler+0x450>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d040      	beq.n	800499a <HAL_DMA_IRQHandler+0x3ae>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a48      	ldr	r2, [pc, #288]	; (8004a40 <HAL_DMA_IRQHandler+0x454>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d038      	beq.n	8004994 <HAL_DMA_IRQHandler+0x3a8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a47      	ldr	r2, [pc, #284]	; (8004a44 <HAL_DMA_IRQHandler+0x458>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d030      	beq.n	800498e <HAL_DMA_IRQHandler+0x3a2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a45      	ldr	r2, [pc, #276]	; (8004a48 <HAL_DMA_IRQHandler+0x45c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d028      	beq.n	8004988 <HAL_DMA_IRQHandler+0x39c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3d      	ldr	r2, [pc, #244]	; (8004a30 <HAL_DMA_IRQHandler+0x444>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d020      	beq.n	8004982 <HAL_DMA_IRQHandler+0x396>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a41      	ldr	r2, [pc, #260]	; (8004a4c <HAL_DMA_IRQHandler+0x460>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d019      	beq.n	800497e <HAL_DMA_IRQHandler+0x392>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a40      	ldr	r2, [pc, #256]	; (8004a50 <HAL_DMA_IRQHandler+0x464>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d012      	beq.n	800497a <HAL_DMA_IRQHandler+0x38e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <HAL_DMA_IRQHandler+0x468>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00a      	beq.n	8004974 <HAL_DMA_IRQHandler+0x388>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3d      	ldr	r2, [pc, #244]	; (8004a58 <HAL_DMA_IRQHandler+0x46c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d102      	bne.n	800496e <HAL_DMA_IRQHandler+0x382>
 8004968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496c:	e01b      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 800496e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004972:	e018      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 8004974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004978:	e015      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 800497a:	2320      	movs	r3, #32
 800497c:	e013      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 800497e:	2302      	movs	r3, #2
 8004980:	e011      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 8004982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004986:	e00e      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 8004988:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800498c:	e00b      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 800498e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004992:	e008      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 8004994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004998:	e005      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 800499a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499e:	e002      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 80049a0:	2320      	movs	r3, #32
 80049a2:	e000      	b.n	80049a6 <HAL_DMA_IRQHandler+0x3ba>
 80049a4:	2302      	movs	r3, #2
 80049a6:	4a2e      	ldr	r2, [pc, #184]	; (8004a60 <HAL_DMA_IRQHandler+0x474>)
 80049a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d034      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80049c2:	e02f      	b.n	8004a24 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2208      	movs	r2, #8
 80049ca:	409a      	lsls	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d028      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x43a>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d023      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 020e 	bic.w	r2, r2, #14
 80049ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	2101      	movs	r1, #1
 80049f8:	fa01 f202 	lsl.w	r2, r1, r2
 80049fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
    }
  }
  return;
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
}
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40020080 	.word	0x40020080
 8004a34:	40020008 	.word	0x40020008
 8004a38:	4002001c 	.word	0x4002001c
 8004a3c:	40020030 	.word	0x40020030
 8004a40:	40020044 	.word	0x40020044
 8004a44:	40020058 	.word	0x40020058
 8004a48:	4002006c 	.word	0x4002006c
 8004a4c:	40020408 	.word	0x40020408
 8004a50:	4002041c 	.word	0x4002041c
 8004a54:	40020430 	.word	0x40020430
 8004a58:	40020444 	.word	0x40020444
 8004a5c:	40020400 	.word	0x40020400
 8004a60:	40020000 	.word	0x40020000

08004a64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d108      	bne.n	8004aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004aa2:	e007      	b.n	8004ab4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	60da      	str	r2, [r3, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
	...

08004ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b08b      	sub	sp, #44	; 0x2c
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad2:	e179      	b.n	8004dc8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	f040 8168 	bne.w	8004dc2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4a96      	ldr	r2, [pc, #600]	; (8004d50 <HAL_GPIO_Init+0x290>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d05e      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004afc:	4a94      	ldr	r2, [pc, #592]	; (8004d50 <HAL_GPIO_Init+0x290>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d875      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b02:	4a94      	ldr	r2, [pc, #592]	; (8004d54 <HAL_GPIO_Init+0x294>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d058      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b08:	4a92      	ldr	r2, [pc, #584]	; (8004d54 <HAL_GPIO_Init+0x294>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d86f      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b0e:	4a92      	ldr	r2, [pc, #584]	; (8004d58 <HAL_GPIO_Init+0x298>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d052      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b14:	4a90      	ldr	r2, [pc, #576]	; (8004d58 <HAL_GPIO_Init+0x298>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d869      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b1a:	4a90      	ldr	r2, [pc, #576]	; (8004d5c <HAL_GPIO_Init+0x29c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d04c      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b20:	4a8e      	ldr	r2, [pc, #568]	; (8004d5c <HAL_GPIO_Init+0x29c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d863      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b26:	4a8e      	ldr	r2, [pc, #568]	; (8004d60 <HAL_GPIO_Init+0x2a0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d046      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
 8004b2c:	4a8c      	ldr	r2, [pc, #560]	; (8004d60 <HAL_GPIO_Init+0x2a0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d85d      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b32:	2b12      	cmp	r3, #18
 8004b34:	d82a      	bhi.n	8004b8c <HAL_GPIO_Init+0xcc>
 8004b36:	2b12      	cmp	r3, #18
 8004b38:	d859      	bhi.n	8004bee <HAL_GPIO_Init+0x12e>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_GPIO_Init+0x80>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004bbb 	.word	0x08004bbb
 8004b44:	08004b95 	.word	0x08004b95
 8004b48:	08004ba7 	.word	0x08004ba7
 8004b4c:	08004be9 	.word	0x08004be9
 8004b50:	08004bef 	.word	0x08004bef
 8004b54:	08004bef 	.word	0x08004bef
 8004b58:	08004bef 	.word	0x08004bef
 8004b5c:	08004bef 	.word	0x08004bef
 8004b60:	08004bef 	.word	0x08004bef
 8004b64:	08004bef 	.word	0x08004bef
 8004b68:	08004bef 	.word	0x08004bef
 8004b6c:	08004bef 	.word	0x08004bef
 8004b70:	08004bef 	.word	0x08004bef
 8004b74:	08004bef 	.word	0x08004bef
 8004b78:	08004bef 	.word	0x08004bef
 8004b7c:	08004bef 	.word	0x08004bef
 8004b80:	08004bef 	.word	0x08004bef
 8004b84:	08004b9d 	.word	0x08004b9d
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	4a75      	ldr	r2, [pc, #468]	; (8004d64 <HAL_GPIO_Init+0x2a4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b92:	e02c      	b.n	8004bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	623b      	str	r3, [r7, #32]
          break;
 8004b9a:	e029      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	623b      	str	r3, [r7, #32]
          break;
 8004ba4:	e024      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	3308      	adds	r3, #8
 8004bac:	623b      	str	r3, [r7, #32]
          break;
 8004bae:	e01f      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	623b      	str	r3, [r7, #32]
          break;
 8004bb8:	e01a      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	623b      	str	r3, [r7, #32]
          break;
 8004bc6:	e013      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d105      	bne.n	8004bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	611a      	str	r2, [r3, #16]
          break;
 8004bda:	e009      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	615a      	str	r2, [r3, #20]
          break;
 8004be6:	e003      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]
          break;
 8004bec:	e000      	b.n	8004bf0 <HAL_GPIO_Init+0x130>
          break;
 8004bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2bff      	cmp	r3, #255	; 0xff
 8004bf4:	d801      	bhi.n	8004bfa <HAL_GPIO_Init+0x13a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	e001      	b.n	8004bfe <HAL_GPIO_Init+0x13e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2bff      	cmp	r3, #255	; 0xff
 8004c04:	d802      	bhi.n	8004c0c <HAL_GPIO_Init+0x14c>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	e002      	b.n	8004c12 <HAL_GPIO_Init+0x152>
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	3b08      	subs	r3, #8
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	210f      	movs	r1, #15
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80c1 	beq.w	8004dc2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c40:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <HAL_GPIO_Init+0x2a8>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	4a48      	ldr	r2, [pc, #288]	; (8004d68 <HAL_GPIO_Init+0x2a8>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	6193      	str	r3, [r2, #24]
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_GPIO_Init+0x2a8>)
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c58:	4a44      	ldr	r2, [pc, #272]	; (8004d6c <HAL_GPIO_Init+0x2ac>)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	3302      	adds	r3, #2
 8004c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	220f      	movs	r2, #15
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <HAL_GPIO_Init+0x2b0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01f      	beq.n	8004cc4 <HAL_GPIO_Init+0x204>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <HAL_GPIO_Init+0x2b4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d019      	beq.n	8004cc0 <HAL_GPIO_Init+0x200>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3a      	ldr	r2, [pc, #232]	; (8004d78 <HAL_GPIO_Init+0x2b8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_GPIO_Init+0x1fc>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a39      	ldr	r2, [pc, #228]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00d      	beq.n	8004cb8 <HAL_GPIO_Init+0x1f8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_GPIO_Init+0x2c0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <HAL_GPIO_Init+0x1f4>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <HAL_GPIO_Init+0x2c4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_GPIO_Init+0x1f0>
 8004cac:	2305      	movs	r3, #5
 8004cae:	e00a      	b.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	e008      	b.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e006      	b.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e004      	b.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e002      	b.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	f002 0203 	and.w	r2, r2, #3
 8004ccc:	0092      	lsls	r2, r2, #2
 8004cce:	4093      	lsls	r3, r2
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cd6:	4925      	ldr	r1, [pc, #148]	; (8004d6c <HAL_GPIO_Init+0x2ac>)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	3302      	adds	r3, #2
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4924      	ldr	r1, [pc, #144]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	e006      	b.n	8004d0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	4920      	ldr	r1, [pc, #128]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	491a      	ldr	r1, [pc, #104]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	4916      	ldr	r1, [pc, #88]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d025      	beq.n	8004d8c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	4910      	ldr	r1, [pc, #64]	; (8004d88 <HAL_GPIO_Init+0x2c8>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
 8004d4c:	e025      	b.n	8004d9a <HAL_GPIO_Init+0x2da>
 8004d4e:	bf00      	nop
 8004d50:	10320000 	.word	0x10320000
 8004d54:	10310000 	.word	0x10310000
 8004d58:	10220000 	.word	0x10220000
 8004d5c:	10210000 	.word	0x10210000
 8004d60:	10120000 	.word	0x10120000
 8004d64:	10110000 	.word	0x10110000
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010800 	.word	0x40010800
 8004d74:	40010c00 	.word	0x40010c00
 8004d78:	40011000 	.word	0x40011000
 8004d7c:	40011400 	.word	0x40011400
 8004d80:	40011800 	.word	0x40011800
 8004d84:	40011c00 	.word	0x40011c00
 8004d88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <HAL_GPIO_Init+0x324>)
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	4913      	ldr	r1, [pc, #76]	; (8004de4 <HAL_GPIO_Init+0x324>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_GPIO_Init+0x324>)
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	490e      	ldr	r1, [pc, #56]	; (8004de4 <HAL_GPIO_Init+0x324>)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60cb      	str	r3, [r1, #12]
 8004db2:	e006      	b.n	8004dc2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_GPIO_Init+0x324>)
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	4909      	ldr	r1, [pc, #36]	; (8004de4 <HAL_GPIO_Init+0x324>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f47f ae7e 	bne.w	8004ad4 <HAL_GPIO_Init+0x14>
  }
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	372c      	adds	r7, #44	; 0x2c
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	40010400 	.word	0x40010400

08004de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
 8004df4:	4613      	mov	r3, r2
 8004df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004df8:	787b      	ldrb	r3, [r7, #1]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dfe:	887a      	ldrh	r2, [r7, #2]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e04:	e003      	b.n	8004e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	041a      	lsls	r2, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e12b      	b.n	8005082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fe fbf2 	bl	8003628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f000 fce6 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 8004e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4a81      	ldr	r2, [pc, #516]	; (800508c <HAL_I2C_Init+0x274>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d807      	bhi.n	8004e9c <HAL_I2C_Init+0x84>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a80      	ldr	r2, [pc, #512]	; (8005090 <HAL_I2C_Init+0x278>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bf94      	ite	ls
 8004e94:	2301      	movls	r3, #1
 8004e96:	2300      	movhi	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e006      	b.n	8004eaa <HAL_I2C_Init+0x92>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a7d      	ldr	r2, [pc, #500]	; (8005094 <HAL_I2C_Init+0x27c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bf94      	ite	ls
 8004ea4:	2301      	movls	r3, #1
 8004ea6:	2300      	movhi	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e0e7      	b.n	8005082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a78      	ldr	r2, [pc, #480]	; (8005098 <HAL_I2C_Init+0x280>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0c9b      	lsrs	r3, r3, #18
 8004ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4a6a      	ldr	r2, [pc, #424]	; (800508c <HAL_I2C_Init+0x274>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d802      	bhi.n	8004eec <HAL_I2C_Init+0xd4>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	e009      	b.n	8004f00 <HAL_I2C_Init+0xe8>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	4a69      	ldr	r2, [pc, #420]	; (800509c <HAL_I2C_Init+0x284>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	099b      	lsrs	r3, r3, #6
 8004efe:	3301      	adds	r3, #1
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	495c      	ldr	r1, [pc, #368]	; (800508c <HAL_I2C_Init+0x274>)
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	d819      	bhi.n	8004f54 <HAL_I2C_Init+0x13c>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1e59      	subs	r1, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f34:	400b      	ands	r3, r1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_I2C_Init+0x138>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1e59      	subs	r1, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4e:	e051      	b.n	8004ff4 <HAL_I2C_Init+0x1dc>
 8004f50:	2304      	movs	r3, #4
 8004f52:	e04f      	b.n	8004ff4 <HAL_I2C_Init+0x1dc>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d111      	bne.n	8004f80 <HAL_I2C_Init+0x168>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1e58      	subs	r0, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	440b      	add	r3, r1
 8004f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	e012      	b.n	8004fa6 <HAL_I2C_Init+0x18e>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1e58      	subs	r0, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6859      	ldr	r1, [r3, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	0099      	lsls	r1, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Init+0x196>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e022      	b.n	8004ff4 <HAL_I2C_Init+0x1dc>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_I2C_Init+0x1bc>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1e58      	subs	r0, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	440b      	add	r3, r1
 8004fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd2:	e00f      	b.n	8004ff4 <HAL_I2C_Init+0x1dc>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1e58      	subs	r0, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	0099      	lsls	r1, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fea:	3301      	adds	r3, #1
 8004fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	6809      	ldr	r1, [r1, #0]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6911      	ldr	r1, [r2, #16]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	430b      	orrs	r3, r1
 8005036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	000186a0 	.word	0x000186a0
 8005090:	001e847f 	.word	0x001e847f
 8005094:	003d08ff 	.word	0x003d08ff
 8005098:	431bde83 	.word	0x431bde83
 800509c:	10624dd3 	.word	0x10624dd3

080050a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e272      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8087 	beq.w	80051ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050c0:	4b92      	ldr	r3, [pc, #584]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d00c      	beq.n	80050e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050cc:	4b8f      	ldr	r3, [pc, #572]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 030c 	and.w	r3, r3, #12
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d112      	bne.n	80050fe <HAL_RCC_OscConfig+0x5e>
 80050d8:	4b8c      	ldr	r3, [pc, #560]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	d10b      	bne.n	80050fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e6:	4b89      	ldr	r3, [pc, #548]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d06c      	beq.n	80051cc <HAL_RCC_OscConfig+0x12c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d168      	bne.n	80051cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e24c      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x76>
 8005108:	4b80      	ldr	r3, [pc, #512]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a7f      	ldr	r2, [pc, #508]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 800510e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e02e      	b.n	8005174 <HAL_RCC_OscConfig+0xd4>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x98>
 800511e:	4b7b      	ldr	r3, [pc, #492]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a7a      	ldr	r2, [pc, #488]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b78      	ldr	r3, [pc, #480]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a77      	ldr	r2, [pc, #476]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e01d      	b.n	8005174 <HAL_RCC_OscConfig+0xd4>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0xbc>
 8005142:	4b72      	ldr	r3, [pc, #456]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a71      	ldr	r2, [pc, #452]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6e      	ldr	r2, [pc, #440]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00b      	b.n	8005174 <HAL_RCC_OscConfig+0xd4>
 800515c:	4b6b      	ldr	r3, [pc, #428]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6a      	ldr	r2, [pc, #424]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a67      	ldr	r2, [pc, #412]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 800516e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fe fee2 	bl	8003f44 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe fede 	bl	8003f44 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e200      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	4b5d      	ldr	r3, [pc, #372]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0xe4>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fe fece 	bl	8003f44 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fe feca 	bl	8003f44 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	; 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e1ec      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051be:	4b53      	ldr	r3, [pc, #332]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x10c>
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d063      	beq.n	80052a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051da:	4b4c      	ldr	r3, [pc, #304]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051e6:	4b49      	ldr	r3, [pc, #292]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d11c      	bne.n	800522c <HAL_RCC_OscConfig+0x18c>
 80051f2:	4b46      	ldr	r3, [pc, #280]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d116      	bne.n	800522c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_RCC_OscConfig+0x176>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e1c0      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	4b3d      	ldr	r3, [pc, #244]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4939      	ldr	r1, [pc, #228]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522a:	e03a      	b.n	80052a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d020      	beq.n	8005276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <HAL_RCC_OscConfig+0x270>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7fe fe83 	bl	8003f44 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005242:	f7fe fe7f 	bl	8003f44 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1a1      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005254:	4b2d      	ldr	r3, [pc, #180]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005260:	4b2a      	ldr	r3, [pc, #168]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4927      	ldr	r1, [pc, #156]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]
 8005274:	e015      	b.n	80052a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <HAL_RCC_OscConfig+0x270>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fe fe62 	bl	8003f44 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005284:	f7fe fe5e 	bl	8003f44 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e180      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d03a      	beq.n	8005324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d019      	beq.n	80052ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052b6:	4b17      	ldr	r3, [pc, #92]	; (8005314 <HAL_RCC_OscConfig+0x274>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052bc:	f7fe fe42 	bl	8003f44 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c4:	f7fe fe3e 	bl	8003f44 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e160      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <HAL_RCC_OscConfig+0x26c>)
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f000 fada 	bl	800589c <RCC_Delay>
 80052e8:	e01c      	b.n	8005324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_RCC_OscConfig+0x274>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f0:	f7fe fe28 	bl	8003f44 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f6:	e00f      	b.n	8005318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f8:	f7fe fe24 	bl	8003f44 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d908      	bls.n	8005318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e146      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	42420000 	.word	0x42420000
 8005314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	4b92      	ldr	r3, [pc, #584]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e9      	bne.n	80052f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a6 	beq.w	800547e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b8b      	ldr	r3, [pc, #556]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b88      	ldr	r3, [pc, #544]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	4a87      	ldr	r2, [pc, #540]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	61d3      	str	r3, [r2, #28]
 800534e:	4b85      	ldr	r3, [pc, #532]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535e:	4b82      	ldr	r3, [pc, #520]	; (8005568 <HAL_RCC_OscConfig+0x4c8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536a:	4b7f      	ldr	r3, [pc, #508]	; (8005568 <HAL_RCC_OscConfig+0x4c8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a7e      	ldr	r2, [pc, #504]	; (8005568 <HAL_RCC_OscConfig+0x4c8>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7fe fde5 	bl	8003f44 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fe fde1 	bl	8003f44 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b64      	cmp	r3, #100	; 0x64
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e103      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	4b75      	ldr	r3, [pc, #468]	; (8005568 <HAL_RCC_OscConfig+0x4c8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x312>
 80053a4:	4b6f      	ldr	r3, [pc, #444]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	4a6e      	ldr	r2, [pc, #440]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6213      	str	r3, [r2, #32]
 80053b0:	e02d      	b.n	800540e <HAL_RCC_OscConfig+0x36e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x334>
 80053ba:	4b6a      	ldr	r3, [pc, #424]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4a69      	ldr	r2, [pc, #420]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6213      	str	r3, [r2, #32]
 80053c6:	4b67      	ldr	r3, [pc, #412]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	4a66      	ldr	r2, [pc, #408]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053cc:	f023 0304 	bic.w	r3, r3, #4
 80053d0:	6213      	str	r3, [r2, #32]
 80053d2:	e01c      	b.n	800540e <HAL_RCC_OscConfig+0x36e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d10c      	bne.n	80053f6 <HAL_RCC_OscConfig+0x356>
 80053dc:	4b61      	ldr	r3, [pc, #388]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4a60      	ldr	r2, [pc, #384]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053e2:	f043 0304 	orr.w	r3, r3, #4
 80053e6:	6213      	str	r3, [r2, #32]
 80053e8:	4b5e      	ldr	r3, [pc, #376]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4a5d      	ldr	r2, [pc, #372]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6213      	str	r3, [r2, #32]
 80053f4:	e00b      	b.n	800540e <HAL_RCC_OscConfig+0x36e>
 80053f6:	4b5b      	ldr	r3, [pc, #364]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4a5a      	ldr	r2, [pc, #360]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	6213      	str	r3, [r2, #32]
 8005402:	4b58      	ldr	r3, [pc, #352]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	4a57      	ldr	r2, [pc, #348]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	f023 0304 	bic.w	r3, r3, #4
 800540c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005416:	f7fe fd95 	bl	8003f44 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541c:	e00a      	b.n	8005434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fe fd91 	bl	8003f44 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0b1      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005434:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0ee      	beq.n	800541e <HAL_RCC_OscConfig+0x37e>
 8005440:	e014      	b.n	800546c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005442:	f7fe fd7f 	bl	8003f44 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fe fd7b 	bl	8003f44 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e09b      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005460:	4b40      	ldr	r3, [pc, #256]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ee      	bne.n	800544a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005472:	4b3c      	ldr	r3, [pc, #240]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8087 	beq.w	8005596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005488:	4b36      	ldr	r3, [pc, #216]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b08      	cmp	r3, #8
 8005492:	d061      	beq.n	8005558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d146      	bne.n	800552a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <HAL_RCC_OscConfig+0x4cc>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a2:	f7fe fd4f 	bl	8003f44 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054aa:	f7fe fd4b 	bl	8003f44 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e06d      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054bc:	4b29      	ldr	r3, [pc, #164]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	d108      	bne.n	80054e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4921      	ldr	r1, [pc, #132]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e4:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a19      	ldr	r1, [r3, #32]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	430b      	orrs	r3, r1
 80054f6:	491b      	ldr	r1, [pc, #108]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054fc:	4b1b      	ldr	r3, [pc, #108]	; (800556c <HAL_RCC_OscConfig+0x4cc>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005502:	f7fe fd1f 	bl	8003f44 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800550a:	f7fe fd1b 	bl	8003f44 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e03d      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x46a>
 8005528:	e035      	b.n	8005596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <HAL_RCC_OscConfig+0x4cc>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fe fd08 	bl	8003f44 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005538:	f7fe fd04 	bl	8003f44 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e026      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCC_OscConfig+0x4c4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x498>
 8005556:	e01e      	b.n	8005596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d107      	bne.n	8005570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e019      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
 8005564:	40021000 	.word	0x40021000
 8005568:	40007000 	.word	0x40007000
 800556c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <HAL_RCC_OscConfig+0x500>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	429a      	cmp	r2, r3
 8005582:	d106      	bne.n	8005592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d001      	beq.n	8005596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000

080055a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0d0      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055b8:	4b6a      	ldr	r3, [pc, #424]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d910      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b67      	ldr	r3, [pc, #412]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	4965      	ldr	r1, [pc, #404]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b63      	ldr	r3, [pc, #396]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0b8      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800560a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005618:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a52      	ldr	r2, [pc, #328]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 800561e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	494d      	ldr	r1, [pc, #308]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d040      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564a:	4b47      	ldr	r3, [pc, #284]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d115      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e07f      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005662:	4b41      	ldr	r3, [pc, #260]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e073      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005672:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06b      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005682:	4b39      	ldr	r3, [pc, #228]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f023 0203 	bic.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4936      	ldr	r1, [pc, #216]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005694:	f7fe fc56 	bl	8003f44 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fe fc52 	bl	8003f44 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e053      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 020c 	and.w	r2, r3, #12
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1eb      	bne.n	800569c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056c4:	4b27      	ldr	r3, [pc, #156]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d210      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 0207 	bic.w	r2, r3, #7
 80056da:	4922      	ldr	r1, [pc, #136]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e032      	b.n	800575a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4916      	ldr	r1, [pc, #88]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	490e      	ldr	r1, [pc, #56]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005732:	f000 f821 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8005736:	4602      	mov	r2, r0
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	490a      	ldr	r1, [pc, #40]	; (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005744:	5ccb      	ldrb	r3, [r1, r3]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x1cc>)
 800574c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_ClockConfig+0x1d0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fbb4 	bl	8003ec0 <HAL_InitTick>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40022000 	.word	0x40022000
 8005768:	40021000 	.word	0x40021000
 800576c:	08009a64 	.word	0x08009a64
 8005770:	20000004 	.word	0x20000004
 8005774:	20000008 	.word	0x20000008

08005778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005778:	b490      	push	{r4, r7}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800577e:	4b29      	ldr	r3, [pc, #164]	; (8005824 <HAL_RCC_GetSysClockFreq+0xac>)
 8005780:	1d3c      	adds	r4, r7, #4
 8005782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005788:	f240 2301 	movw	r3, #513	; 0x201
 800578c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057a2:	4b21      	ldr	r3, [pc, #132]	; (8005828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d002      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x40>
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d003      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x46>
 80057b6:	e02b      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <HAL_RCC_GetSysClockFreq+0xb4>)
 80057ba:	623b      	str	r3, [r7, #32]
      break;
 80057bc:	e02b      	b.n	8005816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	0c9b      	lsrs	r3, r3, #18
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	3328      	adds	r3, #40	; 0x28
 80057c8:	443b      	add	r3, r7
 80057ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80057ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0c5b      	lsrs	r3, r3, #17
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	3328      	adds	r3, #40	; 0x28
 80057e6:	443b      	add	r3, r7
 80057e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4a0e      	ldr	r2, [pc, #56]	; (800582c <HAL_RCC_GetSysClockFreq+0xb4>)
 80057f2:	fb03 f202 	mul.w	r2, r3, r2
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	e004      	b.n	800580a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	623b      	str	r3, [r7, #32]
      break;
 800580e:	e002      	b.n	8005816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005810:	4b08      	ldr	r3, [pc, #32]	; (8005834 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005812:	623b      	str	r3, [r7, #32]
      break;
 8005814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005816:	6a3b      	ldr	r3, [r7, #32]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	; 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bc90      	pop	{r4, r7}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	08009a40 	.word	0x08009a40
 8005828:	40021000 	.word	0x40021000
 800582c:	00f42400 	.word	0x00f42400
 8005830:	003d0900 	.word	0x003d0900
 8005834:	007a1200 	.word	0x007a1200

08005838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800583c:	4b02      	ldr	r3, [pc, #8]	; (8005848 <HAL_RCC_GetHCLKFreq+0x10>)
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	20000004 	.word	0x20000004

0800584c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005850:	f7ff fff2 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005854:	4602      	mov	r2, r0
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	4903      	ldr	r1, [pc, #12]	; (8005870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005862:	5ccb      	ldrb	r3, [r1, r3]
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	08009a74 	.word	0x08009a74

08005874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005878:	f7ff ffde 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 800587c:	4602      	mov	r2, r0
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	0adb      	lsrs	r3, r3, #11
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4903      	ldr	r1, [pc, #12]	; (8005898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000
 8005898:	08009a74 	.word	0x08009a74

0800589c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <RCC_Delay+0x34>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <RCC_Delay+0x38>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	0a5b      	lsrs	r3, r3, #9
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058b8:	bf00      	nop
  }
  while (Delay --);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1e5a      	subs	r2, r3, #1
 80058be:	60fa      	str	r2, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f9      	bne.n	80058b8 <RCC_Delay+0x1c>
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	20000004 	.word	0x20000004
 80058d4:	10624dd3 	.word	0x10624dd3

080058d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e041      	b.n	800596e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fd fee2 	bl	80036c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f000 fd88 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e044      	b.n	8005a1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <HAL_TIM_Base_Start_IT+0xac>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x6c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1c      	ldr	r2, [pc, #112]	; (8005a28 <HAL_TIM_Base_Start_IT+0xb0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x6c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d00e      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x6c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_TIM_Base_Start_IT+0xb4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x6c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <HAL_TIM_Base_Start_IT+0xb8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x6c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <HAL_TIM_Base_Start_IT+0xbc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d111      	bne.n	8005a08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b06      	cmp	r3, #6
 80059f4:	d010      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a06:	e007      	b.n	8005a18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00

08005a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e041      	b.n	8005ace <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f839 	bl	8005ad6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 fcd8 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x24>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e022      	b.n	8005b52 <HAL_TIM_PWM_Start+0x6a>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d109      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x3e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e015      	b.n	8005b52 <HAL_TIM_PWM_Start+0x6a>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x58>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e008      	b.n	8005b52 <HAL_TIM_PWM_Start+0x6a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e072      	b.n	8005c40 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Start+0x82>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b68:	e013      	b.n	8005b92 <HAL_TIM_PWM_Start+0xaa>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start+0x92>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b78:	e00b      	b.n	8005b92 <HAL_TIM_PWM_Start+0xaa>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0xa2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b88:	e003      	b.n	8005b92 <HAL_TIM_PWM_Start+0xaa>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 ff02 	bl	80069a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <HAL_TIM_PWM_Start+0x160>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0xcc>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <HAL_TIM_PWM_Start+0x164>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIM_PWM_Start+0xd0>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_TIM_PWM_Start+0xd2>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <HAL_TIM_PWM_Start+0x160>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x122>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <HAL_TIM_PWM_Start+0x164>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x122>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bea:	d00e      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x122>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <HAL_TIM_PWM_Start+0x168>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x122>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <HAL_TIM_PWM_Start+0x16c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x122>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <HAL_TIM_PWM_Start+0x170>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d111      	bne.n	8005c2e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d010      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2c:	e007      	b.n	8005c3e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40013400 	.word	0x40013400
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800
 8005c58:	40000c00 	.word	0x40000c00

08005c5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e093      	b.n	8005d98 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fd fd6d 	bl	8003764 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 fbbb 	bl	800642c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cfc:	f023 030c 	bic.w	r3, r3, #12
 8005d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	011a      	lsls	r2, r3, #4
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	031b      	lsls	r3, r3, #12
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	4313      	orrs	r3, r2
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dd6:	7b7b      	ldrb	r3, [r7, #13]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d001      	beq.n	8005de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e069      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df0:	e031      	b.n	8005e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d110      	bne.n	8005e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d102      	bne.n	8005e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dfe:	7b3b      	ldrb	r3, [r7, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e055      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e18:	e01d      	b.n	8005e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d108      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d105      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e26:	7b7b      	ldrb	r3, [r7, #13]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d102      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e2c:	7b3b      	ldrb	r3, [r7, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03e      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0xc4>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d008      	beq.n	8005e74 <HAL_TIM_Encoder_Start+0xd4>
 8005e62:	e00f      	b.n	8005e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fd99 	bl	80069a4 <TIM_CCxChannelCmd>
      break;
 8005e72:	e016      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2104      	movs	r1, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd91 	bl	80069a4 <TIM_CCxChannelCmd>
      break;
 8005e82:	e00e      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fd89 	bl	80069a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2201      	movs	r2, #1
 8005e98:	2104      	movs	r1, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fd82 	bl	80069a4 <TIM_CCxChannelCmd>
      break;
 8005ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0202 	mvn.w	r2, #2
 8005ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa78 	bl	80063f4 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa6b 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fa7a 	bl	8006406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0204 	mvn.w	r2, #4
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa4e 	bl	80063f4 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa41 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa50 	bl	8006406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0208 	mvn.w	r2, #8
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa24 	bl	80063f4 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa17 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa26 	bl	8006406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0210 	mvn.w	r2, #16
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9fa 	bl	80063f4 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9ed 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9fc 	bl	8006406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0201 	mvn.w	r2, #1
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9c8 	bl	80063d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fd86 	bl	8006b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d10e      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d107      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9c0 	bl	8006418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0220 	mvn.w	r2, #32
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fd51 	bl	8006b66 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e0ac      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x174>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	f200 809f 	bhi.w	8006234 <HAL_TIM_PWM_ConfigChannel+0x168>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006131 	.word	0x08006131
 8006100:	08006235 	.word	0x08006235
 8006104:	08006235 	.word	0x08006235
 8006108:	08006235 	.word	0x08006235
 800610c:	08006171 	.word	0x08006171
 8006110:	08006235 	.word	0x08006235
 8006114:	08006235 	.word	0x08006235
 8006118:	08006235 	.word	0x08006235
 800611c:	080061b3 	.word	0x080061b3
 8006120:	08006235 	.word	0x08006235
 8006124:	08006235 	.word	0x08006235
 8006128:	08006235 	.word	0x08006235
 800612c:	080061f3 	.word	0x080061f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f9f2 	bl	8006520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0208 	orr.w	r2, r2, #8
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0204 	bic.w	r2, r2, #4
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	619a      	str	r2, [r3, #24]
      break;
 800616e:	e062      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fa42 	bl	8006600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6999      	ldr	r1, [r3, #24]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	021a      	lsls	r2, r3, #8
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	619a      	str	r2, [r3, #24]
      break;
 80061b0:	e041      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fa95 	bl	80066e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0208 	orr.w	r2, r2, #8
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0204 	bic.w	r2, r2, #4
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	61da      	str	r2, [r3, #28]
      break;
 80061f0:	e021      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fae9 	bl	80067d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	021a      	lsls	r2, r3, #8
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	61da      	str	r2, [r3, #28]
      break;
 8006232:	e000      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006234:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIM_ConfigClockSource+0x18>
 800625c:	2302      	movs	r3, #2
 800625e:	e0b3      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x180>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800627e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006286:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006298:	d03e      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0xd0>
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	f200 8087 	bhi.w	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	f000 8085 	beq.w	80063b4 <HAL_TIM_ConfigClockSource+0x16c>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d87f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062b0:	2b70      	cmp	r3, #112	; 0x70
 80062b2:	d01a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0xa2>
 80062b4:	2b70      	cmp	r3, #112	; 0x70
 80062b6:	d87b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062b8:	2b60      	cmp	r3, #96	; 0x60
 80062ba:	d050      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x116>
 80062bc:	2b60      	cmp	r3, #96	; 0x60
 80062be:	d877      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062c0:	2b50      	cmp	r3, #80	; 0x50
 80062c2:	d03c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0xf6>
 80062c4:	2b50      	cmp	r3, #80	; 0x50
 80062c6:	d873      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d058      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x136>
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d86f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062d0:	2b30      	cmp	r3, #48	; 0x30
 80062d2:	d064      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x156>
 80062d4:	2b30      	cmp	r3, #48	; 0x30
 80062d6:	d86b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d060      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x156>
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d867      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x156>
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d05a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062e8:	e062      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f000 fb34 	bl	8006966 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800630c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	609a      	str	r2, [r3, #8]
      break;
 8006316:	e04e      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6899      	ldr	r1, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f000 fb1d 	bl	8006966 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800633a:	609a      	str	r2, [r3, #8]
      break;
 800633c:	e03b      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fa94 	bl	8006878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2150      	movs	r1, #80	; 0x50
 8006356:	4618      	mov	r0, r3
 8006358:	f000 faeb 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 800635c:	e02b      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fab2 	bl	80068d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2160      	movs	r1, #96	; 0x60
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fadb 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 800637c:	e01b      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fa74 	bl	8006878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2140      	movs	r1, #64	; 0x40
 8006396:	4618      	mov	r0, r3
 8006398:	f000 facb 	bl	8006932 <TIM_ITRx_SetConfig>
      break;
 800639c:	e00b      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f000 fac2 	bl	8006932 <TIM_ITRx_SetConfig>
        break;
 80063ae:	e002      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80063b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr

08006418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
	...

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a33      	ldr	r2, [pc, #204]	; (800650c <TIM_Base_SetConfig+0xe0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a32      	ldr	r2, [pc, #200]	; (8006510 <TIM_Base_SetConfig+0xe4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00f      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d00b      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a2f      	ldr	r2, [pc, #188]	; (8006514 <TIM_Base_SetConfig+0xe8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a2e      	ldr	r2, [pc, #184]	; (8006518 <TIM_Base_SetConfig+0xec>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a2d      	ldr	r2, [pc, #180]	; (800651c <TIM_Base_SetConfig+0xf0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d108      	bne.n	800647e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a22      	ldr	r2, [pc, #136]	; (800650c <TIM_Base_SetConfig+0xe0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <TIM_Base_SetConfig+0x82>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a21      	ldr	r2, [pc, #132]	; (8006510 <TIM_Base_SetConfig+0xe4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00f      	beq.n	80064ae <TIM_Base_SetConfig+0x82>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006494:	d00b      	beq.n	80064ae <TIM_Base_SetConfig+0x82>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <TIM_Base_SetConfig+0xe8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_Base_SetConfig+0x82>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <TIM_Base_SetConfig+0xec>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_Base_SetConfig+0x82>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1c      	ldr	r2, [pc, #112]	; (800651c <TIM_Base_SetConfig+0xf0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d108      	bne.n	80064c0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a09      	ldr	r2, [pc, #36]	; (800650c <TIM_Base_SetConfig+0xe0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_Base_SetConfig+0xc8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a08      	ldr	r2, [pc, #32]	; (8006510 <TIM_Base_SetConfig+0xe4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d103      	bne.n	80064fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	615a      	str	r2, [r3, #20]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40000c00 	.word	0x40000c00

08006520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0302 	bic.w	r3, r3, #2
 8006568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a20      	ldr	r2, [pc, #128]	; (80065f8 <TIM_OC1_SetConfig+0xd8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_OC1_SetConfig+0x64>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <TIM_OC1_SetConfig+0xdc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d10c      	bne.n	800659e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0308 	bic.w	r3, r3, #8
 800658a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 0304 	bic.w	r3, r3, #4
 800659c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <TIM_OC1_SetConfig+0xd8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC1_SetConfig+0x8e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a14      	ldr	r2, [pc, #80]	; (80065fc <TIM_OC1_SetConfig+0xdc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d111      	bne.n	80065d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40013400 	.word	0x40013400

08006600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0210 	bic.w	r2, r3, #16
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0320 	bic.w	r3, r3, #32
 800664a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <TIM_OC2_SetConfig+0xe0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC2_SetConfig+0x68>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <TIM_OC2_SetConfig+0xe4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10d      	bne.n	8006684 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <TIM_OC2_SetConfig+0xe0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC2_SetConfig+0x94>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <TIM_OC2_SetConfig+0xe4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d113      	bne.n	80066bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800669a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40013400 	.word	0x40013400

080066e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <TIM_OC3_SetConfig+0xe0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_OC3_SetConfig+0x66>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a20      	ldr	r2, [pc, #128]	; (80067cc <TIM_OC3_SetConfig+0xe4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d10d      	bne.n	800676a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <TIM_OC3_SetConfig+0xe0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC3_SetConfig+0x92>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a15      	ldr	r2, [pc, #84]	; (80067cc <TIM_OC3_SetConfig+0xe4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d113      	bne.n	80067a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400

080067d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800681a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	031b      	lsls	r3, r3, #12
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a11      	ldr	r2, [pc, #68]	; (8006870 <TIM_OC4_SetConfig+0xa0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC4_SetConfig+0x68>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a10      	ldr	r2, [pc, #64]	; (8006874 <TIM_OC4_SetConfig+0xa4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d109      	bne.n	800684c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	019b      	lsls	r3, r3, #6
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400

08006878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 030a 	bic.w	r3, r3, #10
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f023 0210 	bic.w	r2, r3, #16
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	031b      	lsls	r3, r3, #12
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	621a      	str	r2, [r3, #32]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	f043 0307 	orr.w	r3, r3, #7
 8006954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr

08006966 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006980:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	021a      	lsls	r2, r3, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	431a      	orrs	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	609a      	str	r2, [r3, #8]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2201      	movs	r2, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	401a      	ands	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	bf00      	nop
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e050      	b.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	d00e      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10c      	bne.n	8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	40012c00 	.word	0x40012c00
 8006ab4:	40013400 	.word	0x40013400
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00

08006ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e03d      	b.n	8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr

08006b66 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e03f      	b.n	8006c1c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fc ff1d 	bl	80039f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	; 0x24
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fdde 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006be2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d17c      	bne.n	8006d3e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_UART_Transmit+0x2c>
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e075      	b.n	8006d40 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Transmit+0x3e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e06e      	b.n	8006d40 <HAL_UART_Transmit+0x11c>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2221      	movs	r2, #33	; 0x21
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c78:	f7fd f964 	bl	8003f44 <HAL_GetTick>
 8006c7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d108      	bne.n	8006ca6 <HAL_UART_Transmit+0x82>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	e003      	b.n	8006cae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006cb6:	e02a      	b.n	8006d0e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2180      	movs	r1, #128	; 0x80
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fb17 	bl	80072f6 <UART_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e036      	b.n	8006d40 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	3302      	adds	r3, #2
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e007      	b.n	8006d00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1cf      	bne.n	8006cb8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2140      	movs	r1, #64	; 0x40
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fae7 	bl	80072f6 <UART_WaitOnFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e006      	b.n	8006d40 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d11d      	bne.n	8006d9e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_UART_Receive_IT+0x26>
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e016      	b.n	8006da0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_UART_Receive_IT+0x38>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e00f      	b.n	8006da0 <HAL_UART_Receive_IT+0x58>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	461a      	mov	r2, r3
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 faf8 	bl	800738a <UART_Start_Receive_IT>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	e000      	b.n	8006da0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d11d      	bne.n	8006dfe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_UART_Receive_DMA+0x26>
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e016      	b.n	8006e00 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_UART_Receive_DMA+0x38>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e00f      	b.n	8006e00 <HAL_UART_Receive_DMA+0x58>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	461a      	mov	r2, r3
 8006df2:	68b9      	ldr	r1, [r7, #8]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fb01 	bl	80073fc <UART_Start_Receive_DMA>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	e000      	b.n	8006e00 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10d      	bne.n	8006e5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_UART_IRQHandler+0x52>
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fbf2 	bl	800763c <UART_Receive_IT>
      return;
 8006e58:	e17b      	b.n	8007152 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80b1 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x1bc>
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <HAL_UART_IRQHandler+0x70>
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80a6 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <HAL_UART_IRQHandler+0x90>
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	f043 0201 	orr.w	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_UART_IRQHandler+0xb0>
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	f043 0202 	orr.w	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <HAL_UART_IRQHandler+0xd0>
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f043 0204 	orr.w	r2, r3, #4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00f      	beq.n	8006f02 <HAL_UART_IRQHandler+0xfa>
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <HAL_UART_IRQHandler+0xee>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f043 0208 	orr.w	r2, r3, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 811e 	beq.w	8007148 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <HAL_UART_IRQHandler+0x11e>
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fb8b 	bl	800763c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <HAL_UART_IRQHandler+0x146>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d031      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 facd 	bl	80074ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d023      	beq.n	8006faa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695a      	ldr	r2, [r3, #20]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d013      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	4a76      	ldr	r2, [pc, #472]	; (8007158 <HAL_UART_IRQHandler+0x350>)
 8006f80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fd fa28 	bl	80043dc <HAL_DMA_Abort_IT>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	e00e      	b.n	8006fc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fc faec 	bl	8003580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	e00a      	b.n	8006fc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fc fae8 	bl	8003580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb0:	e006      	b.n	8006fc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc fae4 	bl	8003580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006fbe:	e0c3      	b.n	8007148 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	bf00      	nop
    return;
 8006fc2:	e0c1      	b.n	8007148 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	f040 80a1 	bne.w	8007110 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 809b 	beq.w	8007110 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8095 	beq.w	8007110 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d04e      	beq.n	80070a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007014:	8a3b      	ldrh	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8098 	beq.w	800714c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007020:	8a3a      	ldrh	r2, [r7, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	f080 8092 	bcs.w	800714c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8a3a      	ldrh	r2, [r7, #16]
 800702c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b20      	cmp	r3, #32
 8007036:	d02b      	beq.n	8007090 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007046:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0201 	bic.w	r2, r2, #1
 8007056:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007066:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0210 	bic.w	r2, r2, #16
 8007084:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	4618      	mov	r0, r3
 800708c:	f7fd f96b 	bl	8004366 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007098:	b29b      	uxth	r3, r3
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	b29b      	uxth	r3, r3
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f86d 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80070a6:	e051      	b.n	800714c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d047      	beq.n	8007150 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80070c0:	8a7b      	ldrh	r3, [r7, #18]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d044      	beq.n	8007150 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695a      	ldr	r2, [r3, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0210 	bic.w	r2, r2, #16
 8007102:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007104:	8a7b      	ldrh	r3, [r7, #18]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f839 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800710e:	e01f      	b.n	8007150 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d008      	beq.n	800712c <HAL_UART_IRQHandler+0x324>
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa22 	bl	800756e <UART_Transmit_IT>
    return;
 800712a:	e012      	b.n	8007152 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <HAL_UART_IRQHandler+0x34a>
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fa63 	bl	800760c <UART_EndTransmit_IT>
    return;
 8007146:	e004      	b.n	8007152 <HAL_UART_IRQHandler+0x34a>
    return;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <HAL_UART_IRQHandler+0x34a>
      return;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <HAL_UART_IRQHandler+0x34a>
      return;
 8007150:	bf00      	nop
  }
}
 8007152:	3728      	adds	r7, #40	; 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	08007547 	.word	0x08007547

0800715c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr

08007180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d12a      	bne.n	8007208 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695a      	ldr	r2, [r3, #20]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0210 	bic.w	r2, r2, #16
 8007206:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	2b01      	cmp	r3, #1
 800720e:	d106      	bne.n	800721e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007214:	4619      	mov	r1, r3
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff ffb2 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800721c:	e002      	b.n	8007224 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7fc f992 	bl	8003548 <HAL_UART_RxCpltCallback>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	2b01      	cmp	r3, #1
 8007240:	d108      	bne.n	8007254 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	b29b      	uxth	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ff97 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007252:	e002      	b.n	800725a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff ff8a 	bl	800716e <HAL_UART_RxHalfCpltCallback>
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b21      	cmp	r3, #33	; 0x21
 8007294:	d108      	bne.n	80072a8 <UART_DMAError+0x46>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80072a2:	68b8      	ldr	r0, [r7, #8]
 80072a4:	f000 f90e 	bl	80074c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b22      	cmp	r3, #34	; 0x22
 80072c8:	d108      	bne.n	80072dc <UART_DMAError+0x7a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f000 f909 	bl	80074ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	f043 0210 	orr.w	r2, r3, #16
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072e8:	68b8      	ldr	r0, [r7, #8]
 80072ea:	f7fc f949 	bl	8003580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007306:	e02c      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d028      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x30>
 8007316:	f7fc fe15 	bl	8003f44 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	429a      	cmp	r2, r3
 8007324:	d21d      	bcs.n	8007362 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007334:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	695a      	ldr	r2, [r3, #20]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e00f      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4013      	ands	r3, r2
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	429a      	cmp	r2, r3
 8007370:	bf0c      	ite	eq
 8007372:	2301      	moveq	r3, #1
 8007374:	2300      	movne	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	429a      	cmp	r2, r3
 800737e:	d0c3      	beq.n	8007308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	4613      	mov	r3, r2
 8007396:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	88fa      	ldrh	r2, [r7, #6]
 80073a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2222      	movs	r2, #34	; 0x22
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0220 	orr.w	r2, r2, #32
 80073ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2222      	movs	r2, #34	; 0x22
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <UART_Start_Receive_DMA+0xbc>)
 800742a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	4a22      	ldr	r2, [pc, #136]	; (80074bc <UART_Start_Receive_DMA+0xc0>)
 8007432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	4a21      	ldr	r2, [pc, #132]	; (80074c0 <UART_Start_Receive_DMA+0xc4>)
 800743a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	2200      	movs	r2, #0
 8007442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007444:	f107 0308 	add.w	r3, r7, #8
 8007448:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	f7fc ff24 	bl	80042a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800748c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	08007197 	.word	0x08007197
 80074bc:	0800722d 	.word	0x0800722d
 80074c0:	08007263 	.word	0x08007263

080074c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074da:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr

080074ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007504:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695a      	ldr	r2, [r3, #20]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	2b01      	cmp	r3, #1
 800751c:	d107      	bne.n	800752e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0210 	bic.w	r2, r2, #16
 800752c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7fc f80d 	bl	8003580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b21      	cmp	r3, #33	; 0x21
 8007580:	d13e      	bne.n	8007600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	d114      	bne.n	80075b6 <UART_Transmit_IT+0x48>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d110      	bne.n	80075b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	1c9a      	adds	r2, r3, #2
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	621a      	str	r2, [r3, #32]
 80075b4:	e008      	b.n	80075c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	1c59      	adds	r1, r3, #1
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6211      	str	r1, [r2, #32]
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4619      	mov	r1, r3
 80075d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e000      	b.n	8007602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007600:	2302      	movs	r3, #2
  }
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007622:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff fd95 	bl	800715c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b22      	cmp	r3, #34	; 0x22
 800764e:	f040 8099 	bne.w	8007784 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765a:	d117      	bne.n	800768c <UART_Receive_IT+0x50>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d113      	bne.n	800768c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	b29b      	uxth	r3, r3
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	b29a      	uxth	r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	1c9a      	adds	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	629a      	str	r2, [r3, #40]	; 0x28
 800768a:	e026      	b.n	80076da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769e:	d007      	beq.n	80076b0 <UART_Receive_IT+0x74>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <UART_Receive_IT+0x82>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e008      	b.n	80076d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4619      	mov	r1, r3
 80076e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d148      	bne.n	8007780 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0220 	bic.w	r2, r2, #32
 80076fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800770c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	2b01      	cmp	r3, #1
 800772c:	d123      	bne.n	8007776 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0210 	bic.w	r2, r2, #16
 8007742:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b10      	cmp	r3, #16
 8007750:	d10a      	bne.n	8007768 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fd06 	bl	8007180 <HAL_UARTEx_RxEventCallback>
 8007774:	e002      	b.n	800777c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fb fee6 	bl	8003548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e002      	b.n	8007786 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	e000      	b.n	8007786 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80077ca:	f023 030c 	bic.w	r3, r3, #12
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	430b      	orrs	r3, r1
 80077d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a2c      	ldr	r2, [pc, #176]	; (80078a4 <UART_SetConfig+0x114>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d103      	bne.n	8007800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80077f8:	f7fe f83c 	bl	8005874 <HAL_RCC_GetPCLK2Freq>
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	e002      	b.n	8007806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007800:	f7fe f824 	bl	800584c <HAL_RCC_GetPCLK1Freq>
 8007804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009a      	lsls	r2, r3, #2
 8007810:	441a      	add	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <UART_SetConfig+0x118>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	0119      	lsls	r1, r3, #4
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009a      	lsls	r2, r3, #2
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	fbb2 f2f3 	udiv	r2, r2, r3
 800783c:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <UART_SetConfig+0x118>)
 800783e:	fba3 0302 	umull	r0, r3, r3, r2
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	2064      	movs	r0, #100	; 0x64
 8007846:	fb00 f303 	mul.w	r3, r0, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	3332      	adds	r3, #50	; 0x32
 8007850:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <UART_SetConfig+0x118>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800785c:	4419      	add	r1, r3
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009a      	lsls	r2, r3, #2
 8007868:	441a      	add	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	fbb2 f2f3 	udiv	r2, r2, r3
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <UART_SetConfig+0x118>)
 8007876:	fba3 0302 	umull	r0, r3, r3, r2
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	2064      	movs	r0, #100	; 0x64
 800787e:	fb00 f303 	mul.w	r3, r0, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	3332      	adds	r3, #50	; 0x32
 8007888:	4a07      	ldr	r2, [pc, #28]	; (80078a8 <UART_SetConfig+0x118>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	440a      	add	r2, r1
 800789a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40013800 	.word	0x40013800
 80078a8:	51eb851f 	.word	0x51eb851f

080078ac <__assert_func>:
 80078ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ae:	4614      	mov	r4, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <__assert_func+0x2c>)
 80078b4:	4605      	mov	r5, r0
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68d8      	ldr	r0, [r3, #12]
 80078ba:	b14c      	cbz	r4, 80078d0 <__assert_func+0x24>
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <__assert_func+0x30>)
 80078be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078c2:	9100      	str	r1, [sp, #0]
 80078c4:	462b      	mov	r3, r5
 80078c6:	4906      	ldr	r1, [pc, #24]	; (80078e0 <__assert_func+0x34>)
 80078c8:	f000 f814 	bl	80078f4 <fiprintf>
 80078cc:	f000 fbfe 	bl	80080cc <abort>
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <__assert_func+0x38>)
 80078d2:	461c      	mov	r4, r3
 80078d4:	e7f3      	b.n	80078be <__assert_func+0x12>
 80078d6:	bf00      	nop
 80078d8:	20000010 	.word	0x20000010
 80078dc:	08009a7c 	.word	0x08009a7c
 80078e0:	08009a89 	.word	0x08009a89
 80078e4:	08009ab7 	.word	0x08009ab7

080078e8 <__errno>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	; (80078f0 <__errno+0x8>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000010 	.word	0x20000010

080078f4 <fiprintf>:
 80078f4:	b40e      	push	{r1, r2, r3}
 80078f6:	b503      	push	{r0, r1, lr}
 80078f8:	4601      	mov	r1, r0
 80078fa:	ab03      	add	r3, sp, #12
 80078fc:	4805      	ldr	r0, [pc, #20]	; (8007914 <fiprintf+0x20>)
 80078fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007902:	6800      	ldr	r0, [r0, #0]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	f000 f85b 	bl	80079c0 <_vfiprintf_r>
 800790a:	b002      	add	sp, #8
 800790c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007910:	b003      	add	sp, #12
 8007912:	4770      	bx	lr
 8007914:	20000010 	.word	0x20000010

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	2600      	movs	r6, #0
 800791c:	4d0c      	ldr	r5, [pc, #48]	; (8007950 <__libc_init_array+0x38>)
 800791e:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 8007920:	1b64      	subs	r4, r4, r5
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	f002 f850 	bl	80099cc <_init>
 800792c:	2600      	movs	r6, #0
 800792e:	4d0a      	ldr	r5, [pc, #40]	; (8007958 <__libc_init_array+0x40>)
 8007930:	4c0a      	ldr	r4, [pc, #40]	; (800795c <__libc_init_array+0x44>)
 8007932:	1b64      	subs	r4, r4, r5
 8007934:	10a4      	asrs	r4, r4, #2
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	08009d28 	.word	0x08009d28
 8007954:	08009d28 	.word	0x08009d28
 8007958:	08009d28 	.word	0x08009d28
 800795c:	08009d2c 	.word	0x08009d2c

08007960 <memset>:
 8007960:	4603      	mov	r3, r0
 8007962:	4402      	add	r2, r0
 8007964:	4293      	cmp	r3, r2
 8007966:	d100      	bne.n	800796a <memset+0xa>
 8007968:	4770      	bx	lr
 800796a:	f803 1b01 	strb.w	r1, [r3], #1
 800796e:	e7f9      	b.n	8007964 <memset+0x4>

08007970 <__sfputc_r>:
 8007970:	6893      	ldr	r3, [r2, #8]
 8007972:	b410      	push	{r4}
 8007974:	3b01      	subs	r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	6093      	str	r3, [r2, #8]
 800797a:	da07      	bge.n	800798c <__sfputc_r+0x1c>
 800797c:	6994      	ldr	r4, [r2, #24]
 800797e:	42a3      	cmp	r3, r4
 8007980:	db01      	blt.n	8007986 <__sfputc_r+0x16>
 8007982:	290a      	cmp	r1, #10
 8007984:	d102      	bne.n	800798c <__sfputc_r+0x1c>
 8007986:	bc10      	pop	{r4}
 8007988:	f000 bae0 	b.w	8007f4c <__swbuf_r>
 800798c:	6813      	ldr	r3, [r2, #0]
 800798e:	1c58      	adds	r0, r3, #1
 8007990:	6010      	str	r0, [r2, #0]
 8007992:	7019      	strb	r1, [r3, #0]
 8007994:	4608      	mov	r0, r1
 8007996:	bc10      	pop	{r4}
 8007998:	4770      	bx	lr

0800799a <__sfputs_r>:
 800799a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	18d5      	adds	r5, r2, r3
 80079a4:	42ac      	cmp	r4, r5
 80079a6:	d101      	bne.n	80079ac <__sfputs_r+0x12>
 80079a8:	2000      	movs	r0, #0
 80079aa:	e007      	b.n	80079bc <__sfputs_r+0x22>
 80079ac:	463a      	mov	r2, r7
 80079ae:	4630      	mov	r0, r6
 80079b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b4:	f7ff ffdc 	bl	8007970 <__sfputc_r>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d1f3      	bne.n	80079a4 <__sfputs_r+0xa>
 80079bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079c0 <_vfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	460d      	mov	r5, r1
 80079c6:	4614      	mov	r4, r2
 80079c8:	4698      	mov	r8, r3
 80079ca:	4606      	mov	r6, r0
 80079cc:	b09d      	sub	sp, #116	; 0x74
 80079ce:	b118      	cbz	r0, 80079d8 <_vfiprintf_r+0x18>
 80079d0:	6983      	ldr	r3, [r0, #24]
 80079d2:	b90b      	cbnz	r3, 80079d8 <_vfiprintf_r+0x18>
 80079d4:	f000 fc98 	bl	8008308 <__sinit>
 80079d8:	4b89      	ldr	r3, [pc, #548]	; (8007c00 <_vfiprintf_r+0x240>)
 80079da:	429d      	cmp	r5, r3
 80079dc:	d11b      	bne.n	8007a16 <_vfiprintf_r+0x56>
 80079de:	6875      	ldr	r5, [r6, #4]
 80079e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079e2:	07d9      	lsls	r1, r3, #31
 80079e4:	d405      	bmi.n	80079f2 <_vfiprintf_r+0x32>
 80079e6:	89ab      	ldrh	r3, [r5, #12]
 80079e8:	059a      	lsls	r2, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_vfiprintf_r+0x32>
 80079ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ee:	f000 fd29 	bl	8008444 <__retarget_lock_acquire_recursive>
 80079f2:	89ab      	ldrh	r3, [r5, #12]
 80079f4:	071b      	lsls	r3, r3, #28
 80079f6:	d501      	bpl.n	80079fc <_vfiprintf_r+0x3c>
 80079f8:	692b      	ldr	r3, [r5, #16]
 80079fa:	b9eb      	cbnz	r3, 8007a38 <_vfiprintf_r+0x78>
 80079fc:	4629      	mov	r1, r5
 80079fe:	4630      	mov	r0, r6
 8007a00:	f000 faf6 	bl	8007ff0 <__swsetup_r>
 8007a04:	b1c0      	cbz	r0, 8007a38 <_vfiprintf_r+0x78>
 8007a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a08:	07dc      	lsls	r4, r3, #31
 8007a0a:	d50e      	bpl.n	8007a2a <_vfiprintf_r+0x6a>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	b01d      	add	sp, #116	; 0x74
 8007a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a16:	4b7b      	ldr	r3, [pc, #492]	; (8007c04 <_vfiprintf_r+0x244>)
 8007a18:	429d      	cmp	r5, r3
 8007a1a:	d101      	bne.n	8007a20 <_vfiprintf_r+0x60>
 8007a1c:	68b5      	ldr	r5, [r6, #8]
 8007a1e:	e7df      	b.n	80079e0 <_vfiprintf_r+0x20>
 8007a20:	4b79      	ldr	r3, [pc, #484]	; (8007c08 <_vfiprintf_r+0x248>)
 8007a22:	429d      	cmp	r5, r3
 8007a24:	bf08      	it	eq
 8007a26:	68f5      	ldreq	r5, [r6, #12]
 8007a28:	e7da      	b.n	80079e0 <_vfiprintf_r+0x20>
 8007a2a:	89ab      	ldrh	r3, [r5, #12]
 8007a2c:	0598      	lsls	r0, r3, #22
 8007a2e:	d4ed      	bmi.n	8007a0c <_vfiprintf_r+0x4c>
 8007a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a32:	f000 fd08 	bl	8008446 <__retarget_lock_release_recursive>
 8007a36:	e7e9      	b.n	8007a0c <_vfiprintf_r+0x4c>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3c:	2320      	movs	r3, #32
 8007a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a42:	2330      	movs	r3, #48	; 0x30
 8007a44:	f04f 0901 	mov.w	r9, #1
 8007a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c0c <_vfiprintf_r+0x24c>
 8007a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a54:	4623      	mov	r3, r4
 8007a56:	469a      	mov	sl, r3
 8007a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5c:	b10a      	cbz	r2, 8007a62 <_vfiprintf_r+0xa2>
 8007a5e:	2a25      	cmp	r2, #37	; 0x25
 8007a60:	d1f9      	bne.n	8007a56 <_vfiprintf_r+0x96>
 8007a62:	ebba 0b04 	subs.w	fp, sl, r4
 8007a66:	d00b      	beq.n	8007a80 <_vfiprintf_r+0xc0>
 8007a68:	465b      	mov	r3, fp
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7ff ff93 	bl	800799a <__sfputs_r>
 8007a74:	3001      	adds	r0, #1
 8007a76:	f000 80aa 	beq.w	8007bce <_vfiprintf_r+0x20e>
 8007a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7c:	445a      	add	r2, fp
 8007a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a80:	f89a 3000 	ldrb.w	r3, [sl]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80a2 	beq.w	8007bce <_vfiprintf_r+0x20e>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a94:	f10a 0a01 	add.w	sl, sl, #1
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8007aa2:	4654      	mov	r4, sl
 8007aa4:	2205      	movs	r2, #5
 8007aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aaa:	4858      	ldr	r0, [pc, #352]	; (8007c0c <_vfiprintf_r+0x24c>)
 8007aac:	f000 fd32 	bl	8008514 <memchr>
 8007ab0:	9a04      	ldr	r2, [sp, #16]
 8007ab2:	b9d8      	cbnz	r0, 8007aec <_vfiprintf_r+0x12c>
 8007ab4:	06d1      	lsls	r1, r2, #27
 8007ab6:	bf44      	itt	mi
 8007ab8:	2320      	movmi	r3, #32
 8007aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007abe:	0713      	lsls	r3, r2, #28
 8007ac0:	bf44      	itt	mi
 8007ac2:	232b      	movmi	r3, #43	; 0x2b
 8007ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8007acc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ace:	d015      	beq.n	8007afc <_vfiprintf_r+0x13c>
 8007ad0:	4654      	mov	r4, sl
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f04f 0c0a 	mov.w	ip, #10
 8007ad8:	9a07      	ldr	r2, [sp, #28]
 8007ada:	4621      	mov	r1, r4
 8007adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae0:	3b30      	subs	r3, #48	; 0x30
 8007ae2:	2b09      	cmp	r3, #9
 8007ae4:	d94e      	bls.n	8007b84 <_vfiprintf_r+0x1c4>
 8007ae6:	b1b0      	cbz	r0, 8007b16 <_vfiprintf_r+0x156>
 8007ae8:	9207      	str	r2, [sp, #28]
 8007aea:	e014      	b.n	8007b16 <_vfiprintf_r+0x156>
 8007aec:	eba0 0308 	sub.w	r3, r0, r8
 8007af0:	fa09 f303 	lsl.w	r3, r9, r3
 8007af4:	4313      	orrs	r3, r2
 8007af6:	46a2      	mov	sl, r4
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	e7d2      	b.n	8007aa2 <_vfiprintf_r+0xe2>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	1d19      	adds	r1, r3, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	9103      	str	r1, [sp, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bfbb      	ittet	lt
 8007b08:	425b      	neglt	r3, r3
 8007b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b0e:	9307      	strge	r3, [sp, #28]
 8007b10:	9307      	strlt	r3, [sp, #28]
 8007b12:	bfb8      	it	lt
 8007b14:	9204      	strlt	r2, [sp, #16]
 8007b16:	7823      	ldrb	r3, [r4, #0]
 8007b18:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1a:	d10c      	bne.n	8007b36 <_vfiprintf_r+0x176>
 8007b1c:	7863      	ldrb	r3, [r4, #1]
 8007b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b20:	d135      	bne.n	8007b8e <_vfiprintf_r+0x1ce>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	3402      	adds	r4, #2
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9203      	str	r2, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfb8      	it	lt
 8007b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007c10 <_vfiprintf_r+0x250>
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	4650      	mov	r0, sl
 8007b3e:	7821      	ldrb	r1, [r4, #0]
 8007b40:	f000 fce8 	bl	8008514 <memchr>
 8007b44:	b140      	cbz	r0, 8007b58 <_vfiprintf_r+0x198>
 8007b46:	2340      	movs	r3, #64	; 0x40
 8007b48:	eba0 000a 	sub.w	r0, r0, sl
 8007b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	3401      	adds	r4, #1
 8007b54:	4303      	orrs	r3, r0
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5c:	2206      	movs	r2, #6
 8007b5e:	482d      	ldr	r0, [pc, #180]	; (8007c14 <_vfiprintf_r+0x254>)
 8007b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b64:	f000 fcd6 	bl	8008514 <memchr>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d03f      	beq.n	8007bec <_vfiprintf_r+0x22c>
 8007b6c:	4b2a      	ldr	r3, [pc, #168]	; (8007c18 <_vfiprintf_r+0x258>)
 8007b6e:	bb1b      	cbnz	r3, 8007bb8 <_vfiprintf_r+0x1f8>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	3307      	adds	r3, #7
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	3308      	adds	r3, #8
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	443b      	add	r3, r7
 8007b80:	9309      	str	r3, [sp, #36]	; 0x24
 8007b82:	e767      	b.n	8007a54 <_vfiprintf_r+0x94>
 8007b84:	460c      	mov	r4, r1
 8007b86:	2001      	movs	r0, #1
 8007b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8c:	e7a5      	b.n	8007ada <_vfiprintf_r+0x11a>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f04f 0c0a 	mov.w	ip, #10
 8007b94:	4619      	mov	r1, r3
 8007b96:	3401      	adds	r4, #1
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba0:	3a30      	subs	r2, #48	; 0x30
 8007ba2:	2a09      	cmp	r2, #9
 8007ba4:	d903      	bls.n	8007bae <_vfiprintf_r+0x1ee>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0c5      	beq.n	8007b36 <_vfiprintf_r+0x176>
 8007baa:	9105      	str	r1, [sp, #20]
 8007bac:	e7c3      	b.n	8007b36 <_vfiprintf_r+0x176>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb6:	e7f0      	b.n	8007b9a <_vfiprintf_r+0x1da>
 8007bb8:	ab03      	add	r3, sp, #12
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <_vfiprintf_r+0x25c>)
 8007bc2:	a904      	add	r1, sp, #16
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	4607      	mov	r7, r0
 8007bca:	1c78      	adds	r0, r7, #1
 8007bcc:	d1d6      	bne.n	8007b7c <_vfiprintf_r+0x1bc>
 8007bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bd0:	07d9      	lsls	r1, r3, #31
 8007bd2:	d405      	bmi.n	8007be0 <_vfiprintf_r+0x220>
 8007bd4:	89ab      	ldrh	r3, [r5, #12]
 8007bd6:	059a      	lsls	r2, r3, #22
 8007bd8:	d402      	bmi.n	8007be0 <_vfiprintf_r+0x220>
 8007bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bdc:	f000 fc33 	bl	8008446 <__retarget_lock_release_recursive>
 8007be0:	89ab      	ldrh	r3, [r5, #12]
 8007be2:	065b      	lsls	r3, r3, #25
 8007be4:	f53f af12 	bmi.w	8007a0c <_vfiprintf_r+0x4c>
 8007be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bea:	e711      	b.n	8007a10 <_vfiprintf_r+0x50>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <_vfiprintf_r+0x25c>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	f000 f882 	bl	8007d00 <_printf_i>
 8007bfc:	e7e4      	b.n	8007bc8 <_vfiprintf_r+0x208>
 8007bfe:	bf00      	nop
 8007c00:	08009b10 	.word	0x08009b10
 8007c04:	08009b30 	.word	0x08009b30
 8007c08:	08009af0 	.word	0x08009af0
 8007c0c:	08009abc 	.word	0x08009abc
 8007c10:	08009ac2 	.word	0x08009ac2
 8007c14:	08009ac6 	.word	0x08009ac6
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	0800799b 	.word	0x0800799b

08007c20 <_printf_common>:
 8007c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c24:	4616      	mov	r6, r2
 8007c26:	4699      	mov	r9, r3
 8007c28:	688a      	ldr	r2, [r1, #8]
 8007c2a:	690b      	ldr	r3, [r1, #16]
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	bfb8      	it	lt
 8007c32:	4613      	movlt	r3, r2
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c40:	b10a      	cbz	r2, 8007c46 <_printf_common+0x26>
 8007c42:	3301      	adds	r3, #1
 8007c44:	6033      	str	r3, [r6, #0]
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	0699      	lsls	r1, r3, #26
 8007c4a:	bf42      	ittt	mi
 8007c4c:	6833      	ldrmi	r3, [r6, #0]
 8007c4e:	3302      	addmi	r3, #2
 8007c50:	6033      	strmi	r3, [r6, #0]
 8007c52:	6825      	ldr	r5, [r4, #0]
 8007c54:	f015 0506 	ands.w	r5, r5, #6
 8007c58:	d106      	bne.n	8007c68 <_printf_common+0x48>
 8007c5a:	f104 0a19 	add.w	sl, r4, #25
 8007c5e:	68e3      	ldr	r3, [r4, #12]
 8007c60:	6832      	ldr	r2, [r6, #0]
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	42ab      	cmp	r3, r5
 8007c66:	dc28      	bgt.n	8007cba <_printf_common+0x9a>
 8007c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c6c:	1e13      	subs	r3, r2, #0
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	bf18      	it	ne
 8007c72:	2301      	movne	r3, #1
 8007c74:	0692      	lsls	r2, r2, #26
 8007c76:	d42d      	bmi.n	8007cd4 <_printf_common+0xb4>
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c80:	47c0      	blx	r8
 8007c82:	3001      	adds	r0, #1
 8007c84:	d020      	beq.n	8007cc8 <_printf_common+0xa8>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	68e5      	ldr	r5, [r4, #12]
 8007c8a:	f003 0306 	and.w	r3, r3, #6
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	bf18      	it	ne
 8007c92:	2500      	movne	r5, #0
 8007c94:	6832      	ldr	r2, [r6, #0]
 8007c96:	f04f 0600 	mov.w	r6, #0
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	bf08      	it	eq
 8007c9e:	1aad      	subeq	r5, r5, r2
 8007ca0:	6922      	ldr	r2, [r4, #16]
 8007ca2:	bf08      	it	eq
 8007ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bfc4      	itt	gt
 8007cac:	1a9b      	subgt	r3, r3, r2
 8007cae:	18ed      	addgt	r5, r5, r3
 8007cb0:	341a      	adds	r4, #26
 8007cb2:	42b5      	cmp	r5, r6
 8007cb4:	d11a      	bne.n	8007cec <_printf_common+0xcc>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e008      	b.n	8007ccc <_printf_common+0xac>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	47c0      	blx	r8
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d103      	bne.n	8007cd0 <_printf_common+0xb0>
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	e7c4      	b.n	8007c5e <_printf_common+0x3e>
 8007cd4:	2030      	movs	r0, #48	; 0x30
 8007cd6:	18e1      	adds	r1, r4, r3
 8007cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ce2:	4422      	add	r2, r4
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cea:	e7c5      	b.n	8007c78 <_printf_common+0x58>
 8007cec:	2301      	movs	r3, #1
 8007cee:	4622      	mov	r2, r4
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c0      	blx	r8
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d0e6      	beq.n	8007cc8 <_printf_common+0xa8>
 8007cfa:	3601      	adds	r6, #1
 8007cfc:	e7d9      	b.n	8007cb2 <_printf_common+0x92>
	...

08007d00 <_printf_i>:
 8007d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d04:	7e0f      	ldrb	r7, [r1, #24]
 8007d06:	4691      	mov	r9, r2
 8007d08:	2f78      	cmp	r7, #120	; 0x78
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	469a      	mov	sl, r3
 8007d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d16:	d807      	bhi.n	8007d28 <_printf_i+0x28>
 8007d18:	2f62      	cmp	r7, #98	; 0x62
 8007d1a:	d80a      	bhi.n	8007d32 <_printf_i+0x32>
 8007d1c:	2f00      	cmp	r7, #0
 8007d1e:	f000 80d9 	beq.w	8007ed4 <_printf_i+0x1d4>
 8007d22:	2f58      	cmp	r7, #88	; 0x58
 8007d24:	f000 80a4 	beq.w	8007e70 <_printf_i+0x170>
 8007d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d30:	e03a      	b.n	8007da8 <_printf_i+0xa8>
 8007d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d36:	2b15      	cmp	r3, #21
 8007d38:	d8f6      	bhi.n	8007d28 <_printf_i+0x28>
 8007d3a:	a101      	add	r1, pc, #4	; (adr r1, 8007d40 <_printf_i+0x40>)
 8007d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d40:	08007d99 	.word	0x08007d99
 8007d44:	08007dad 	.word	0x08007dad
 8007d48:	08007d29 	.word	0x08007d29
 8007d4c:	08007d29 	.word	0x08007d29
 8007d50:	08007d29 	.word	0x08007d29
 8007d54:	08007d29 	.word	0x08007d29
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007d29 	.word	0x08007d29
 8007d60:	08007d29 	.word	0x08007d29
 8007d64:	08007d29 	.word	0x08007d29
 8007d68:	08007d29 	.word	0x08007d29
 8007d6c:	08007ebb 	.word	0x08007ebb
 8007d70:	08007ddd 	.word	0x08007ddd
 8007d74:	08007e9d 	.word	0x08007e9d
 8007d78:	08007d29 	.word	0x08007d29
 8007d7c:	08007d29 	.word	0x08007d29
 8007d80:	08007edd 	.word	0x08007edd
 8007d84:	08007d29 	.word	0x08007d29
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007d29 	.word	0x08007d29
 8007d90:	08007d29 	.word	0x08007d29
 8007d94:	08007ea5 	.word	0x08007ea5
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	1d1a      	adds	r2, r3, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	602a      	str	r2, [r5, #0]
 8007da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0a4      	b.n	8007ef6 <_printf_i+0x1f6>
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	6829      	ldr	r1, [r5, #0]
 8007db0:	0606      	lsls	r6, r0, #24
 8007db2:	f101 0304 	add.w	r3, r1, #4
 8007db6:	d50a      	bpl.n	8007dce <_printf_i+0xce>
 8007db8:	680e      	ldr	r6, [r1, #0]
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	da03      	bge.n	8007dc8 <_printf_i+0xc8>
 8007dc0:	232d      	movs	r3, #45	; 0x2d
 8007dc2:	4276      	negs	r6, r6
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc8:	230a      	movs	r3, #10
 8007dca:	485e      	ldr	r0, [pc, #376]	; (8007f44 <_printf_i+0x244>)
 8007dcc:	e019      	b.n	8007e02 <_printf_i+0x102>
 8007dce:	680e      	ldr	r6, [r1, #0]
 8007dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	bf18      	it	ne
 8007dd8:	b236      	sxthne	r6, r6
 8007dda:	e7ef      	b.n	8007dbc <_printf_i+0xbc>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	6029      	str	r1, [r5, #0]
 8007de4:	0601      	lsls	r1, r0, #24
 8007de6:	d501      	bpl.n	8007dec <_printf_i+0xec>
 8007de8:	681e      	ldr	r6, [r3, #0]
 8007dea:	e002      	b.n	8007df2 <_printf_i+0xf2>
 8007dec:	0646      	lsls	r6, r0, #25
 8007dee:	d5fb      	bpl.n	8007de8 <_printf_i+0xe8>
 8007df0:	881e      	ldrh	r6, [r3, #0]
 8007df2:	2f6f      	cmp	r7, #111	; 0x6f
 8007df4:	bf0c      	ite	eq
 8007df6:	2308      	moveq	r3, #8
 8007df8:	230a      	movne	r3, #10
 8007dfa:	4852      	ldr	r0, [pc, #328]	; (8007f44 <_printf_i+0x244>)
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e02:	6865      	ldr	r5, [r4, #4]
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	bfa8      	it	ge
 8007e08:	6821      	ldrge	r1, [r4, #0]
 8007e0a:	60a5      	str	r5, [r4, #8]
 8007e0c:	bfa4      	itt	ge
 8007e0e:	f021 0104 	bicge.w	r1, r1, #4
 8007e12:	6021      	strge	r1, [r4, #0]
 8007e14:	b90e      	cbnz	r6, 8007e1a <_printf_i+0x11a>
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	d04d      	beq.n	8007eb6 <_printf_i+0x1b6>
 8007e1a:	4615      	mov	r5, r2
 8007e1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e20:	fb03 6711 	mls	r7, r3, r1, r6
 8007e24:	5dc7      	ldrb	r7, [r0, r7]
 8007e26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e2a:	4637      	mov	r7, r6
 8007e2c:	42bb      	cmp	r3, r7
 8007e2e:	460e      	mov	r6, r1
 8007e30:	d9f4      	bls.n	8007e1c <_printf_i+0x11c>
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d10b      	bne.n	8007e4e <_printf_i+0x14e>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	07de      	lsls	r6, r3, #31
 8007e3a:	d508      	bpl.n	8007e4e <_printf_i+0x14e>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	6861      	ldr	r1, [r4, #4]
 8007e40:	4299      	cmp	r1, r3
 8007e42:	bfde      	ittt	le
 8007e44:	2330      	movle	r3, #48	; 0x30
 8007e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e4e:	1b52      	subs	r2, r2, r5
 8007e50:	6122      	str	r2, [r4, #16]
 8007e52:	464b      	mov	r3, r9
 8007e54:	4621      	mov	r1, r4
 8007e56:	4640      	mov	r0, r8
 8007e58:	f8cd a000 	str.w	sl, [sp]
 8007e5c:	aa03      	add	r2, sp, #12
 8007e5e:	f7ff fedf 	bl	8007c20 <_printf_common>
 8007e62:	3001      	adds	r0, #1
 8007e64:	d14c      	bne.n	8007f00 <_printf_i+0x200>
 8007e66:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6a:	b004      	add	sp, #16
 8007e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e70:	4834      	ldr	r0, [pc, #208]	; (8007f44 <_printf_i+0x244>)
 8007e72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e76:	6829      	ldr	r1, [r5, #0]
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e7e:	6029      	str	r1, [r5, #0]
 8007e80:	061d      	lsls	r5, r3, #24
 8007e82:	d514      	bpl.n	8007eae <_printf_i+0x1ae>
 8007e84:	07df      	lsls	r7, r3, #31
 8007e86:	bf44      	itt	mi
 8007e88:	f043 0320 	orrmi.w	r3, r3, #32
 8007e8c:	6023      	strmi	r3, [r4, #0]
 8007e8e:	b91e      	cbnz	r6, 8007e98 <_printf_i+0x198>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	f023 0320 	bic.w	r3, r3, #32
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	2310      	movs	r3, #16
 8007e9a:	e7af      	b.n	8007dfc <_printf_i+0xfc>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	f043 0320 	orr.w	r3, r3, #32
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	2378      	movs	r3, #120	; 0x78
 8007ea6:	4828      	ldr	r0, [pc, #160]	; (8007f48 <_printf_i+0x248>)
 8007ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eac:	e7e3      	b.n	8007e76 <_printf_i+0x176>
 8007eae:	0659      	lsls	r1, r3, #25
 8007eb0:	bf48      	it	mi
 8007eb2:	b2b6      	uxthmi	r6, r6
 8007eb4:	e7e6      	b.n	8007e84 <_printf_i+0x184>
 8007eb6:	4615      	mov	r5, r2
 8007eb8:	e7bb      	b.n	8007e32 <_printf_i+0x132>
 8007eba:	682b      	ldr	r3, [r5, #0]
 8007ebc:	6826      	ldr	r6, [r4, #0]
 8007ebe:	1d18      	adds	r0, r3, #4
 8007ec0:	6961      	ldr	r1, [r4, #20]
 8007ec2:	6028      	str	r0, [r5, #0]
 8007ec4:	0635      	lsls	r5, r6, #24
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	d501      	bpl.n	8007ece <_printf_i+0x1ce>
 8007eca:	6019      	str	r1, [r3, #0]
 8007ecc:	e002      	b.n	8007ed4 <_printf_i+0x1d4>
 8007ece:	0670      	lsls	r0, r6, #25
 8007ed0:	d5fb      	bpl.n	8007eca <_printf_i+0x1ca>
 8007ed2:	8019      	strh	r1, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4615      	mov	r5, r2
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	e7ba      	b.n	8007e52 <_printf_i+0x152>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	2100      	movs	r1, #0
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	602a      	str	r2, [r5, #0]
 8007ee4:	681d      	ldr	r5, [r3, #0]
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 fb13 	bl	8008514 <memchr>
 8007eee:	b108      	cbz	r0, 8007ef4 <_printf_i+0x1f4>
 8007ef0:	1b40      	subs	r0, r0, r5
 8007ef2:	6060      	str	r0, [r4, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007efe:	e7a8      	b.n	8007e52 <_printf_i+0x152>
 8007f00:	462a      	mov	r2, r5
 8007f02:	4649      	mov	r1, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	47d0      	blx	sl
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d0ab      	beq.n	8007e66 <_printf_i+0x166>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	079b      	lsls	r3, r3, #30
 8007f12:	d413      	bmi.n	8007f3c <_printf_i+0x23c>
 8007f14:	68e0      	ldr	r0, [r4, #12]
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	4298      	cmp	r0, r3
 8007f1a:	bfb8      	it	lt
 8007f1c:	4618      	movlt	r0, r3
 8007f1e:	e7a4      	b.n	8007e6a <_printf_i+0x16a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4632      	mov	r2, r6
 8007f24:	4649      	mov	r1, r9
 8007f26:	4640      	mov	r0, r8
 8007f28:	47d0      	blx	sl
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d09b      	beq.n	8007e66 <_printf_i+0x166>
 8007f2e:	3501      	adds	r5, #1
 8007f30:	68e3      	ldr	r3, [r4, #12]
 8007f32:	9903      	ldr	r1, [sp, #12]
 8007f34:	1a5b      	subs	r3, r3, r1
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	dcf2      	bgt.n	8007f20 <_printf_i+0x220>
 8007f3a:	e7eb      	b.n	8007f14 <_printf_i+0x214>
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	f104 0619 	add.w	r6, r4, #25
 8007f42:	e7f5      	b.n	8007f30 <_printf_i+0x230>
 8007f44:	08009acd 	.word	0x08009acd
 8007f48:	08009ade 	.word	0x08009ade

08007f4c <__swbuf_r>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	460e      	mov	r6, r1
 8007f50:	4614      	mov	r4, r2
 8007f52:	4605      	mov	r5, r0
 8007f54:	b118      	cbz	r0, 8007f5e <__swbuf_r+0x12>
 8007f56:	6983      	ldr	r3, [r0, #24]
 8007f58:	b90b      	cbnz	r3, 8007f5e <__swbuf_r+0x12>
 8007f5a:	f000 f9d5 	bl	8008308 <__sinit>
 8007f5e:	4b21      	ldr	r3, [pc, #132]	; (8007fe4 <__swbuf_r+0x98>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d12b      	bne.n	8007fbc <__swbuf_r+0x70>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	69a3      	ldr	r3, [r4, #24]
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	071a      	lsls	r2, r3, #28
 8007f6e:	d52f      	bpl.n	8007fd0 <__swbuf_r+0x84>
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	b36b      	cbz	r3, 8007fd0 <__swbuf_r+0x84>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	b2f6      	uxtb	r6, r6
 8007f7a:	1ac0      	subs	r0, r0, r3
 8007f7c:	6963      	ldr	r3, [r4, #20]
 8007f7e:	4637      	mov	r7, r6
 8007f80:	4283      	cmp	r3, r0
 8007f82:	dc04      	bgt.n	8007f8e <__swbuf_r+0x42>
 8007f84:	4621      	mov	r1, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 f92a 	bl	80081e0 <_fflush_r>
 8007f8c:	bb30      	cbnz	r0, 8007fdc <__swbuf_r+0x90>
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	3001      	adds	r0, #1
 8007f92:	3b01      	subs	r3, #1
 8007f94:	60a3      	str	r3, [r4, #8]
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	6022      	str	r2, [r4, #0]
 8007f9c:	701e      	strb	r6, [r3, #0]
 8007f9e:	6963      	ldr	r3, [r4, #20]
 8007fa0:	4283      	cmp	r3, r0
 8007fa2:	d004      	beq.n	8007fae <__swbuf_r+0x62>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	07db      	lsls	r3, r3, #31
 8007fa8:	d506      	bpl.n	8007fb8 <__swbuf_r+0x6c>
 8007faa:	2e0a      	cmp	r6, #10
 8007fac:	d104      	bne.n	8007fb8 <__swbuf_r+0x6c>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 f915 	bl	80081e0 <_fflush_r>
 8007fb6:	b988      	cbnz	r0, 8007fdc <__swbuf_r+0x90>
 8007fb8:	4638      	mov	r0, r7
 8007fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <__swbuf_r+0x9c>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d101      	bne.n	8007fc6 <__swbuf_r+0x7a>
 8007fc2:	68ac      	ldr	r4, [r5, #8]
 8007fc4:	e7cf      	b.n	8007f66 <__swbuf_r+0x1a>
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <__swbuf_r+0xa0>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	bf08      	it	eq
 8007fcc:	68ec      	ldreq	r4, [r5, #12]
 8007fce:	e7ca      	b.n	8007f66 <__swbuf_r+0x1a>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f80c 	bl	8007ff0 <__swsetup_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0cb      	beq.n	8007f74 <__swbuf_r+0x28>
 8007fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe0:	e7ea      	b.n	8007fb8 <__swbuf_r+0x6c>
 8007fe2:	bf00      	nop
 8007fe4:	08009b10 	.word	0x08009b10
 8007fe8:	08009b30 	.word	0x08009b30
 8007fec:	08009af0 	.word	0x08009af0

08007ff0 <__swsetup_r>:
 8007ff0:	4b32      	ldr	r3, [pc, #200]	; (80080bc <__swsetup_r+0xcc>)
 8007ff2:	b570      	push	{r4, r5, r6, lr}
 8007ff4:	681d      	ldr	r5, [r3, #0]
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	b125      	cbz	r5, 8008006 <__swsetup_r+0x16>
 8007ffc:	69ab      	ldr	r3, [r5, #24]
 8007ffe:	b913      	cbnz	r3, 8008006 <__swsetup_r+0x16>
 8008000:	4628      	mov	r0, r5
 8008002:	f000 f981 	bl	8008308 <__sinit>
 8008006:	4b2e      	ldr	r3, [pc, #184]	; (80080c0 <__swsetup_r+0xd0>)
 8008008:	429c      	cmp	r4, r3
 800800a:	d10f      	bne.n	800802c <__swsetup_r+0x3c>
 800800c:	686c      	ldr	r4, [r5, #4]
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008014:	0719      	lsls	r1, r3, #28
 8008016:	d42c      	bmi.n	8008072 <__swsetup_r+0x82>
 8008018:	06dd      	lsls	r5, r3, #27
 800801a:	d411      	bmi.n	8008040 <__swsetup_r+0x50>
 800801c:	2309      	movs	r3, #9
 800801e:	6033      	str	r3, [r6, #0]
 8008020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	e03e      	b.n	80080aa <__swsetup_r+0xba>
 800802c:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <__swsetup_r+0xd4>)
 800802e:	429c      	cmp	r4, r3
 8008030:	d101      	bne.n	8008036 <__swsetup_r+0x46>
 8008032:	68ac      	ldr	r4, [r5, #8]
 8008034:	e7eb      	b.n	800800e <__swsetup_r+0x1e>
 8008036:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <__swsetup_r+0xd8>)
 8008038:	429c      	cmp	r4, r3
 800803a:	bf08      	it	eq
 800803c:	68ec      	ldreq	r4, [r5, #12]
 800803e:	e7e6      	b.n	800800e <__swsetup_r+0x1e>
 8008040:	0758      	lsls	r0, r3, #29
 8008042:	d512      	bpl.n	800806a <__swsetup_r+0x7a>
 8008044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008046:	b141      	cbz	r1, 800805a <__swsetup_r+0x6a>
 8008048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800804c:	4299      	cmp	r1, r3
 800804e:	d002      	beq.n	8008056 <__swsetup_r+0x66>
 8008050:	4630      	mov	r0, r6
 8008052:	f000 fa6d 	bl	8008530 <_free_r>
 8008056:	2300      	movs	r3, #0
 8008058:	6363      	str	r3, [r4, #52]	; 0x34
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	2300      	movs	r3, #0
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	f043 0308 	orr.w	r3, r3, #8
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	b94b      	cbnz	r3, 800808a <__swsetup_r+0x9a>
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800807c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008080:	d003      	beq.n	800808a <__swsetup_r+0x9a>
 8008082:	4621      	mov	r1, r4
 8008084:	4630      	mov	r0, r6
 8008086:	f000 fa05 	bl	8008494 <__smakebuf_r>
 800808a:	89a0      	ldrh	r0, [r4, #12]
 800808c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008090:	f010 0301 	ands.w	r3, r0, #1
 8008094:	d00a      	beq.n	80080ac <__swsetup_r+0xbc>
 8008096:	2300      	movs	r3, #0
 8008098:	60a3      	str	r3, [r4, #8]
 800809a:	6963      	ldr	r3, [r4, #20]
 800809c:	425b      	negs	r3, r3
 800809e:	61a3      	str	r3, [r4, #24]
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	b943      	cbnz	r3, 80080b6 <__swsetup_r+0xc6>
 80080a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080a8:	d1ba      	bne.n	8008020 <__swsetup_r+0x30>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	0781      	lsls	r1, r0, #30
 80080ae:	bf58      	it	pl
 80080b0:	6963      	ldrpl	r3, [r4, #20]
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	e7f4      	b.n	80080a0 <__swsetup_r+0xb0>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e7f7      	b.n	80080aa <__swsetup_r+0xba>
 80080ba:	bf00      	nop
 80080bc:	20000010 	.word	0x20000010
 80080c0:	08009b10 	.word	0x08009b10
 80080c4:	08009b30 	.word	0x08009b30
 80080c8:	08009af0 	.word	0x08009af0

080080cc <abort>:
 80080cc:	2006      	movs	r0, #6
 80080ce:	b508      	push	{r3, lr}
 80080d0:	f000 fb42 	bl	8008758 <raise>
 80080d4:	2001      	movs	r0, #1
 80080d6:	f7fb fe08 	bl	8003cea <_exit>
	...

080080dc <__sflush_r>:
 80080dc:	898a      	ldrh	r2, [r1, #12]
 80080de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e0:	4605      	mov	r5, r0
 80080e2:	0710      	lsls	r0, r2, #28
 80080e4:	460c      	mov	r4, r1
 80080e6:	d457      	bmi.n	8008198 <__sflush_r+0xbc>
 80080e8:	684b      	ldr	r3, [r1, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dc04      	bgt.n	80080f8 <__sflush_r+0x1c>
 80080ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	dc01      	bgt.n	80080f8 <__sflush_r+0x1c>
 80080f4:	2000      	movs	r0, #0
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d0fa      	beq.n	80080f4 <__sflush_r+0x18>
 80080fe:	2300      	movs	r3, #0
 8008100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008104:	682f      	ldr	r7, [r5, #0]
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	d032      	beq.n	8008170 <__sflush_r+0x94>
 800810a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	075a      	lsls	r2, r3, #29
 8008110:	d505      	bpl.n	800811e <__sflush_r+0x42>
 8008112:	6863      	ldr	r3, [r4, #4]
 8008114:	1ac0      	subs	r0, r0, r3
 8008116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008118:	b10b      	cbz	r3, 800811e <__sflush_r+0x42>
 800811a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800811c:	1ac0      	subs	r0, r0, r3
 800811e:	2300      	movs	r3, #0
 8008120:	4602      	mov	r2, r0
 8008122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008124:	4628      	mov	r0, r5
 8008126:	6a21      	ldr	r1, [r4, #32]
 8008128:	47b0      	blx	r6
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	d106      	bne.n	800813e <__sflush_r+0x62>
 8008130:	6829      	ldr	r1, [r5, #0]
 8008132:	291d      	cmp	r1, #29
 8008134:	d82c      	bhi.n	8008190 <__sflush_r+0xb4>
 8008136:	4a29      	ldr	r2, [pc, #164]	; (80081dc <__sflush_r+0x100>)
 8008138:	40ca      	lsrs	r2, r1
 800813a:	07d6      	lsls	r6, r2, #31
 800813c:	d528      	bpl.n	8008190 <__sflush_r+0xb4>
 800813e:	2200      	movs	r2, #0
 8008140:	6062      	str	r2, [r4, #4]
 8008142:	6922      	ldr	r2, [r4, #16]
 8008144:	04d9      	lsls	r1, r3, #19
 8008146:	6022      	str	r2, [r4, #0]
 8008148:	d504      	bpl.n	8008154 <__sflush_r+0x78>
 800814a:	1c42      	adds	r2, r0, #1
 800814c:	d101      	bne.n	8008152 <__sflush_r+0x76>
 800814e:	682b      	ldr	r3, [r5, #0]
 8008150:	b903      	cbnz	r3, 8008154 <__sflush_r+0x78>
 8008152:	6560      	str	r0, [r4, #84]	; 0x54
 8008154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008156:	602f      	str	r7, [r5, #0]
 8008158:	2900      	cmp	r1, #0
 800815a:	d0cb      	beq.n	80080f4 <__sflush_r+0x18>
 800815c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008160:	4299      	cmp	r1, r3
 8008162:	d002      	beq.n	800816a <__sflush_r+0x8e>
 8008164:	4628      	mov	r0, r5
 8008166:	f000 f9e3 	bl	8008530 <_free_r>
 800816a:	2000      	movs	r0, #0
 800816c:	6360      	str	r0, [r4, #52]	; 0x34
 800816e:	e7c2      	b.n	80080f6 <__sflush_r+0x1a>
 8008170:	6a21      	ldr	r1, [r4, #32]
 8008172:	2301      	movs	r3, #1
 8008174:	4628      	mov	r0, r5
 8008176:	47b0      	blx	r6
 8008178:	1c41      	adds	r1, r0, #1
 800817a:	d1c7      	bne.n	800810c <__sflush_r+0x30>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0c4      	beq.n	800810c <__sflush_r+0x30>
 8008182:	2b1d      	cmp	r3, #29
 8008184:	d001      	beq.n	800818a <__sflush_r+0xae>
 8008186:	2b16      	cmp	r3, #22
 8008188:	d101      	bne.n	800818e <__sflush_r+0xb2>
 800818a:	602f      	str	r7, [r5, #0]
 800818c:	e7b2      	b.n	80080f4 <__sflush_r+0x18>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	e7ae      	b.n	80080f6 <__sflush_r+0x1a>
 8008198:	690f      	ldr	r7, [r1, #16]
 800819a:	2f00      	cmp	r7, #0
 800819c:	d0aa      	beq.n	80080f4 <__sflush_r+0x18>
 800819e:	0793      	lsls	r3, r2, #30
 80081a0:	bf18      	it	ne
 80081a2:	2300      	movne	r3, #0
 80081a4:	680e      	ldr	r6, [r1, #0]
 80081a6:	bf08      	it	eq
 80081a8:	694b      	ldreq	r3, [r1, #20]
 80081aa:	1bf6      	subs	r6, r6, r7
 80081ac:	600f      	str	r7, [r1, #0]
 80081ae:	608b      	str	r3, [r1, #8]
 80081b0:	2e00      	cmp	r6, #0
 80081b2:	dd9f      	ble.n	80080f4 <__sflush_r+0x18>
 80081b4:	4633      	mov	r3, r6
 80081b6:	463a      	mov	r2, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	6a21      	ldr	r1, [r4, #32]
 80081bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80081c0:	47e0      	blx	ip
 80081c2:	2800      	cmp	r0, #0
 80081c4:	dc06      	bgt.n	80081d4 <__sflush_r+0xf8>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	e790      	b.n	80080f6 <__sflush_r+0x1a>
 80081d4:	4407      	add	r7, r0
 80081d6:	1a36      	subs	r6, r6, r0
 80081d8:	e7ea      	b.n	80081b0 <__sflush_r+0xd4>
 80081da:	bf00      	nop
 80081dc:	20400001 	.word	0x20400001

080081e0 <_fflush_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	690b      	ldr	r3, [r1, #16]
 80081e4:	4605      	mov	r5, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	b913      	cbnz	r3, 80081f0 <_fflush_r+0x10>
 80081ea:	2500      	movs	r5, #0
 80081ec:	4628      	mov	r0, r5
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	b118      	cbz	r0, 80081fa <_fflush_r+0x1a>
 80081f2:	6983      	ldr	r3, [r0, #24]
 80081f4:	b90b      	cbnz	r3, 80081fa <_fflush_r+0x1a>
 80081f6:	f000 f887 	bl	8008308 <__sinit>
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <_fflush_r+0x6c>)
 80081fc:	429c      	cmp	r4, r3
 80081fe:	d11b      	bne.n	8008238 <_fflush_r+0x58>
 8008200:	686c      	ldr	r4, [r5, #4]
 8008202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ef      	beq.n	80081ea <_fflush_r+0xa>
 800820a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800820c:	07d0      	lsls	r0, r2, #31
 800820e:	d404      	bmi.n	800821a <_fflush_r+0x3a>
 8008210:	0599      	lsls	r1, r3, #22
 8008212:	d402      	bmi.n	800821a <_fflush_r+0x3a>
 8008214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008216:	f000 f915 	bl	8008444 <__retarget_lock_acquire_recursive>
 800821a:	4628      	mov	r0, r5
 800821c:	4621      	mov	r1, r4
 800821e:	f7ff ff5d 	bl	80080dc <__sflush_r>
 8008222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008224:	4605      	mov	r5, r0
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d4e0      	bmi.n	80081ec <_fflush_r+0xc>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	d4dd      	bmi.n	80081ec <_fflush_r+0xc>
 8008230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008232:	f000 f908 	bl	8008446 <__retarget_lock_release_recursive>
 8008236:	e7d9      	b.n	80081ec <_fflush_r+0xc>
 8008238:	4b05      	ldr	r3, [pc, #20]	; (8008250 <_fflush_r+0x70>)
 800823a:	429c      	cmp	r4, r3
 800823c:	d101      	bne.n	8008242 <_fflush_r+0x62>
 800823e:	68ac      	ldr	r4, [r5, #8]
 8008240:	e7df      	b.n	8008202 <_fflush_r+0x22>
 8008242:	4b04      	ldr	r3, [pc, #16]	; (8008254 <_fflush_r+0x74>)
 8008244:	429c      	cmp	r4, r3
 8008246:	bf08      	it	eq
 8008248:	68ec      	ldreq	r4, [r5, #12]
 800824a:	e7da      	b.n	8008202 <_fflush_r+0x22>
 800824c:	08009b10 	.word	0x08009b10
 8008250:	08009b30 	.word	0x08009b30
 8008254:	08009af0 	.word	0x08009af0

08008258 <std>:
 8008258:	2300      	movs	r3, #0
 800825a:	b510      	push	{r4, lr}
 800825c:	4604      	mov	r4, r0
 800825e:	e9c0 3300 	strd	r3, r3, [r0]
 8008262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008266:	6083      	str	r3, [r0, #8]
 8008268:	8181      	strh	r1, [r0, #12]
 800826a:	6643      	str	r3, [r0, #100]	; 0x64
 800826c:	81c2      	strh	r2, [r0, #14]
 800826e:	6183      	str	r3, [r0, #24]
 8008270:	4619      	mov	r1, r3
 8008272:	2208      	movs	r2, #8
 8008274:	305c      	adds	r0, #92	; 0x5c
 8008276:	f7ff fb73 	bl	8007960 <memset>
 800827a:	4b05      	ldr	r3, [pc, #20]	; (8008290 <std+0x38>)
 800827c:	6224      	str	r4, [r4, #32]
 800827e:	6263      	str	r3, [r4, #36]	; 0x24
 8008280:	4b04      	ldr	r3, [pc, #16]	; (8008294 <std+0x3c>)
 8008282:	62a3      	str	r3, [r4, #40]	; 0x28
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <std+0x40>)
 8008286:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008288:	4b04      	ldr	r3, [pc, #16]	; (800829c <std+0x44>)
 800828a:	6323      	str	r3, [r4, #48]	; 0x30
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	08008791 	.word	0x08008791
 8008294:	080087b3 	.word	0x080087b3
 8008298:	080087eb 	.word	0x080087eb
 800829c:	0800880f 	.word	0x0800880f

080082a0 <_cleanup_r>:
 80082a0:	4901      	ldr	r1, [pc, #4]	; (80082a8 <_cleanup_r+0x8>)
 80082a2:	f000 b8af 	b.w	8008404 <_fwalk_reent>
 80082a6:	bf00      	nop
 80082a8:	080081e1 	.word	0x080081e1

080082ac <__sfmoreglue>:
 80082ac:	2268      	movs	r2, #104	; 0x68
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	1e4d      	subs	r5, r1, #1
 80082b2:	4355      	muls	r5, r2
 80082b4:	460e      	mov	r6, r1
 80082b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ba:	f000 f9a1 	bl	8008600 <_malloc_r>
 80082be:	4604      	mov	r4, r0
 80082c0:	b140      	cbz	r0, 80082d4 <__sfmoreglue+0x28>
 80082c2:	2100      	movs	r1, #0
 80082c4:	e9c0 1600 	strd	r1, r6, [r0]
 80082c8:	300c      	adds	r0, #12
 80082ca:	60a0      	str	r0, [r4, #8]
 80082cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082d0:	f7ff fb46 	bl	8007960 <memset>
 80082d4:	4620      	mov	r0, r4
 80082d6:	bd70      	pop	{r4, r5, r6, pc}

080082d8 <__sfp_lock_acquire>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sfp_lock_acquire+0x8>)
 80082da:	f000 b8b3 	b.w	8008444 <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	20000be1 	.word	0x20000be1

080082e4 <__sfp_lock_release>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__sfp_lock_release+0x8>)
 80082e6:	f000 b8ae 	b.w	8008446 <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	20000be1 	.word	0x20000be1

080082f0 <__sinit_lock_acquire>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__sinit_lock_acquire+0x8>)
 80082f2:	f000 b8a7 	b.w	8008444 <__retarget_lock_acquire_recursive>
 80082f6:	bf00      	nop
 80082f8:	20000be2 	.word	0x20000be2

080082fc <__sinit_lock_release>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__sinit_lock_release+0x8>)
 80082fe:	f000 b8a2 	b.w	8008446 <__retarget_lock_release_recursive>
 8008302:	bf00      	nop
 8008304:	20000be2 	.word	0x20000be2

08008308 <__sinit>:
 8008308:	b510      	push	{r4, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	f7ff fff0 	bl	80082f0 <__sinit_lock_acquire>
 8008310:	69a3      	ldr	r3, [r4, #24]
 8008312:	b11b      	cbz	r3, 800831c <__sinit+0x14>
 8008314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008318:	f7ff bff0 	b.w	80082fc <__sinit_lock_release>
 800831c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008320:	6523      	str	r3, [r4, #80]	; 0x50
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <__sinit+0x68>)
 8008324:	4a13      	ldr	r2, [pc, #76]	; (8008374 <__sinit+0x6c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	62a2      	str	r2, [r4, #40]	; 0x28
 800832a:	42a3      	cmp	r3, r4
 800832c:	bf08      	it	eq
 800832e:	2301      	moveq	r3, #1
 8008330:	4620      	mov	r0, r4
 8008332:	bf08      	it	eq
 8008334:	61a3      	streq	r3, [r4, #24]
 8008336:	f000 f81f 	bl	8008378 <__sfp>
 800833a:	6060      	str	r0, [r4, #4]
 800833c:	4620      	mov	r0, r4
 800833e:	f000 f81b 	bl	8008378 <__sfp>
 8008342:	60a0      	str	r0, [r4, #8]
 8008344:	4620      	mov	r0, r4
 8008346:	f000 f817 	bl	8008378 <__sfp>
 800834a:	2200      	movs	r2, #0
 800834c:	2104      	movs	r1, #4
 800834e:	60e0      	str	r0, [r4, #12]
 8008350:	6860      	ldr	r0, [r4, #4]
 8008352:	f7ff ff81 	bl	8008258 <std>
 8008356:	2201      	movs	r2, #1
 8008358:	2109      	movs	r1, #9
 800835a:	68a0      	ldr	r0, [r4, #8]
 800835c:	f7ff ff7c 	bl	8008258 <std>
 8008360:	2202      	movs	r2, #2
 8008362:	2112      	movs	r1, #18
 8008364:	68e0      	ldr	r0, [r4, #12]
 8008366:	f7ff ff77 	bl	8008258 <std>
 800836a:	2301      	movs	r3, #1
 800836c:	61a3      	str	r3, [r4, #24]
 800836e:	e7d1      	b.n	8008314 <__sinit+0xc>
 8008370:	08009ab8 	.word	0x08009ab8
 8008374:	080082a1 	.word	0x080082a1

08008378 <__sfp>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	4607      	mov	r7, r0
 800837c:	f7ff ffac 	bl	80082d8 <__sfp_lock_acquire>
 8008380:	4b1e      	ldr	r3, [pc, #120]	; (80083fc <__sfp+0x84>)
 8008382:	681e      	ldr	r6, [r3, #0]
 8008384:	69b3      	ldr	r3, [r6, #24]
 8008386:	b913      	cbnz	r3, 800838e <__sfp+0x16>
 8008388:	4630      	mov	r0, r6
 800838a:	f7ff ffbd 	bl	8008308 <__sinit>
 800838e:	3648      	adds	r6, #72	; 0x48
 8008390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008394:	3b01      	subs	r3, #1
 8008396:	d503      	bpl.n	80083a0 <__sfp+0x28>
 8008398:	6833      	ldr	r3, [r6, #0]
 800839a:	b30b      	cbz	r3, 80083e0 <__sfp+0x68>
 800839c:	6836      	ldr	r6, [r6, #0]
 800839e:	e7f7      	b.n	8008390 <__sfp+0x18>
 80083a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083a4:	b9d5      	cbnz	r5, 80083dc <__sfp+0x64>
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <__sfp+0x88>)
 80083a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083ac:	60e3      	str	r3, [r4, #12]
 80083ae:	6665      	str	r5, [r4, #100]	; 0x64
 80083b0:	f000 f847 	bl	8008442 <__retarget_lock_init_recursive>
 80083b4:	f7ff ff96 	bl	80082e4 <__sfp_lock_release>
 80083b8:	2208      	movs	r2, #8
 80083ba:	4629      	mov	r1, r5
 80083bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083c4:	6025      	str	r5, [r4, #0]
 80083c6:	61a5      	str	r5, [r4, #24]
 80083c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083cc:	f7ff fac8 	bl	8007960 <memset>
 80083d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083d8:	4620      	mov	r0, r4
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083dc:	3468      	adds	r4, #104	; 0x68
 80083de:	e7d9      	b.n	8008394 <__sfp+0x1c>
 80083e0:	2104      	movs	r1, #4
 80083e2:	4638      	mov	r0, r7
 80083e4:	f7ff ff62 	bl	80082ac <__sfmoreglue>
 80083e8:	4604      	mov	r4, r0
 80083ea:	6030      	str	r0, [r6, #0]
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d1d5      	bne.n	800839c <__sfp+0x24>
 80083f0:	f7ff ff78 	bl	80082e4 <__sfp_lock_release>
 80083f4:	230c      	movs	r3, #12
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	e7ee      	b.n	80083d8 <__sfp+0x60>
 80083fa:	bf00      	nop
 80083fc:	08009ab8 	.word	0x08009ab8
 8008400:	ffff0001 	.word	0xffff0001

08008404 <_fwalk_reent>:
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008408:	4606      	mov	r6, r0
 800840a:	4688      	mov	r8, r1
 800840c:	2700      	movs	r7, #0
 800840e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008416:	f1b9 0901 	subs.w	r9, r9, #1
 800841a:	d505      	bpl.n	8008428 <_fwalk_reent+0x24>
 800841c:	6824      	ldr	r4, [r4, #0]
 800841e:	2c00      	cmp	r4, #0
 8008420:	d1f7      	bne.n	8008412 <_fwalk_reent+0xe>
 8008422:	4638      	mov	r0, r7
 8008424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008428:	89ab      	ldrh	r3, [r5, #12]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d907      	bls.n	800843e <_fwalk_reent+0x3a>
 800842e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008432:	3301      	adds	r3, #1
 8008434:	d003      	beq.n	800843e <_fwalk_reent+0x3a>
 8008436:	4629      	mov	r1, r5
 8008438:	4630      	mov	r0, r6
 800843a:	47c0      	blx	r8
 800843c:	4307      	orrs	r7, r0
 800843e:	3568      	adds	r5, #104	; 0x68
 8008440:	e7e9      	b.n	8008416 <_fwalk_reent+0x12>

08008442 <__retarget_lock_init_recursive>:
 8008442:	4770      	bx	lr

08008444 <__retarget_lock_acquire_recursive>:
 8008444:	4770      	bx	lr

08008446 <__retarget_lock_release_recursive>:
 8008446:	4770      	bx	lr

08008448 <__swhatbuf_r>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	460e      	mov	r6, r1
 800844c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008450:	4614      	mov	r4, r2
 8008452:	2900      	cmp	r1, #0
 8008454:	461d      	mov	r5, r3
 8008456:	b096      	sub	sp, #88	; 0x58
 8008458:	da08      	bge.n	800846c <__swhatbuf_r+0x24>
 800845a:	2200      	movs	r2, #0
 800845c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008460:	602a      	str	r2, [r5, #0]
 8008462:	061a      	lsls	r2, r3, #24
 8008464:	d410      	bmi.n	8008488 <__swhatbuf_r+0x40>
 8008466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800846a:	e00e      	b.n	800848a <__swhatbuf_r+0x42>
 800846c:	466a      	mov	r2, sp
 800846e:	f000 f9f5 	bl	800885c <_fstat_r>
 8008472:	2800      	cmp	r0, #0
 8008474:	dbf1      	blt.n	800845a <__swhatbuf_r+0x12>
 8008476:	9a01      	ldr	r2, [sp, #4]
 8008478:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800847c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008480:	425a      	negs	r2, r3
 8008482:	415a      	adcs	r2, r3
 8008484:	602a      	str	r2, [r5, #0]
 8008486:	e7ee      	b.n	8008466 <__swhatbuf_r+0x1e>
 8008488:	2340      	movs	r3, #64	; 0x40
 800848a:	2000      	movs	r0, #0
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	b016      	add	sp, #88	; 0x58
 8008490:	bd70      	pop	{r4, r5, r6, pc}
	...

08008494 <__smakebuf_r>:
 8008494:	898b      	ldrh	r3, [r1, #12]
 8008496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008498:	079d      	lsls	r5, r3, #30
 800849a:	4606      	mov	r6, r0
 800849c:	460c      	mov	r4, r1
 800849e:	d507      	bpl.n	80084b0 <__smakebuf_r+0x1c>
 80084a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	2301      	movs	r3, #1
 80084aa:	6163      	str	r3, [r4, #20]
 80084ac:	b002      	add	sp, #8
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	466a      	mov	r2, sp
 80084b2:	ab01      	add	r3, sp, #4
 80084b4:	f7ff ffc8 	bl	8008448 <__swhatbuf_r>
 80084b8:	9900      	ldr	r1, [sp, #0]
 80084ba:	4605      	mov	r5, r0
 80084bc:	4630      	mov	r0, r6
 80084be:	f000 f89f 	bl	8008600 <_malloc_r>
 80084c2:	b948      	cbnz	r0, 80084d8 <__smakebuf_r+0x44>
 80084c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c8:	059a      	lsls	r2, r3, #22
 80084ca:	d4ef      	bmi.n	80084ac <__smakebuf_r+0x18>
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	f043 0302 	orr.w	r3, r3, #2
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	e7e3      	b.n	80084a0 <__smakebuf_r+0xc>
 80084d8:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <__smakebuf_r+0x7c>)
 80084da:	62b3      	str	r3, [r6, #40]	; 0x28
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	6020      	str	r0, [r4, #0]
 80084e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	6120      	str	r0, [r4, #16]
 80084ea:	6163      	str	r3, [r4, #20]
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	b15b      	cbz	r3, 8008508 <__smakebuf_r+0x74>
 80084f0:	4630      	mov	r0, r6
 80084f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084f6:	f000 f9c3 	bl	8008880 <_isatty_r>
 80084fa:	b128      	cbz	r0, 8008508 <__smakebuf_r+0x74>
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	89a0      	ldrh	r0, [r4, #12]
 800850a:	4305      	orrs	r5, r0
 800850c:	81a5      	strh	r5, [r4, #12]
 800850e:	e7cd      	b.n	80084ac <__smakebuf_r+0x18>
 8008510:	080082a1 	.word	0x080082a1

08008514 <memchr>:
 8008514:	4603      	mov	r3, r0
 8008516:	b510      	push	{r4, lr}
 8008518:	b2c9      	uxtb	r1, r1
 800851a:	4402      	add	r2, r0
 800851c:	4293      	cmp	r3, r2
 800851e:	4618      	mov	r0, r3
 8008520:	d101      	bne.n	8008526 <memchr+0x12>
 8008522:	2000      	movs	r0, #0
 8008524:	e003      	b.n	800852e <memchr+0x1a>
 8008526:	7804      	ldrb	r4, [r0, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	428c      	cmp	r4, r1
 800852c:	d1f6      	bne.n	800851c <memchr+0x8>
 800852e:	bd10      	pop	{r4, pc}

08008530 <_free_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4605      	mov	r5, r0
 8008534:	2900      	cmp	r1, #0
 8008536:	d040      	beq.n	80085ba <_free_r+0x8a>
 8008538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853c:	1f0c      	subs	r4, r1, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	18e4      	addlt	r4, r4, r3
 8008544:	f000 f9be 	bl	80088c4 <__malloc_lock>
 8008548:	4a1c      	ldr	r2, [pc, #112]	; (80085bc <_free_r+0x8c>)
 800854a:	6813      	ldr	r3, [r2, #0]
 800854c:	b933      	cbnz	r3, 800855c <_free_r+0x2c>
 800854e:	6063      	str	r3, [r4, #4]
 8008550:	6014      	str	r4, [r2, #0]
 8008552:	4628      	mov	r0, r5
 8008554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008558:	f000 b9ba 	b.w	80088d0 <__malloc_unlock>
 800855c:	42a3      	cmp	r3, r4
 800855e:	d908      	bls.n	8008572 <_free_r+0x42>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	1821      	adds	r1, r4, r0
 8008564:	428b      	cmp	r3, r1
 8008566:	bf01      	itttt	eq
 8008568:	6819      	ldreq	r1, [r3, #0]
 800856a:	685b      	ldreq	r3, [r3, #4]
 800856c:	1809      	addeq	r1, r1, r0
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	e7ed      	b.n	800854e <_free_r+0x1e>
 8008572:	461a      	mov	r2, r3
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	b10b      	cbz	r3, 800857c <_free_r+0x4c>
 8008578:	42a3      	cmp	r3, r4
 800857a:	d9fa      	bls.n	8008572 <_free_r+0x42>
 800857c:	6811      	ldr	r1, [r2, #0]
 800857e:	1850      	adds	r0, r2, r1
 8008580:	42a0      	cmp	r0, r4
 8008582:	d10b      	bne.n	800859c <_free_r+0x6c>
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	4401      	add	r1, r0
 8008588:	1850      	adds	r0, r2, r1
 800858a:	4283      	cmp	r3, r0
 800858c:	6011      	str	r1, [r2, #0]
 800858e:	d1e0      	bne.n	8008552 <_free_r+0x22>
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4401      	add	r1, r0
 8008596:	6011      	str	r1, [r2, #0]
 8008598:	6053      	str	r3, [r2, #4]
 800859a:	e7da      	b.n	8008552 <_free_r+0x22>
 800859c:	d902      	bls.n	80085a4 <_free_r+0x74>
 800859e:	230c      	movs	r3, #12
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	e7d6      	b.n	8008552 <_free_r+0x22>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	1821      	adds	r1, r4, r0
 80085a8:	428b      	cmp	r3, r1
 80085aa:	bf01      	itttt	eq
 80085ac:	6819      	ldreq	r1, [r3, #0]
 80085ae:	685b      	ldreq	r3, [r3, #4]
 80085b0:	1809      	addeq	r1, r1, r0
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	6063      	str	r3, [r4, #4]
 80085b6:	6054      	str	r4, [r2, #4]
 80085b8:	e7cb      	b.n	8008552 <_free_r+0x22>
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	20000be4 	.word	0x20000be4

080085c0 <sbrk_aligned>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	4e0e      	ldr	r6, [pc, #56]	; (80085fc <sbrk_aligned+0x3c>)
 80085c4:	460c      	mov	r4, r1
 80085c6:	6831      	ldr	r1, [r6, #0]
 80085c8:	4605      	mov	r5, r0
 80085ca:	b911      	cbnz	r1, 80085d2 <sbrk_aligned+0x12>
 80085cc:	f000 f88c 	bl	80086e8 <_sbrk_r>
 80085d0:	6030      	str	r0, [r6, #0]
 80085d2:	4621      	mov	r1, r4
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 f887 	bl	80086e8 <_sbrk_r>
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d00a      	beq.n	80085f4 <sbrk_aligned+0x34>
 80085de:	1cc4      	adds	r4, r0, #3
 80085e0:	f024 0403 	bic.w	r4, r4, #3
 80085e4:	42a0      	cmp	r0, r4
 80085e6:	d007      	beq.n	80085f8 <sbrk_aligned+0x38>
 80085e8:	1a21      	subs	r1, r4, r0
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 f87c 	bl	80086e8 <_sbrk_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d101      	bne.n	80085f8 <sbrk_aligned+0x38>
 80085f4:	f04f 34ff 	mov.w	r4, #4294967295
 80085f8:	4620      	mov	r0, r4
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	20000be8 	.word	0x20000be8

08008600 <_malloc_r>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	1ccd      	adds	r5, r1, #3
 8008606:	f025 0503 	bic.w	r5, r5, #3
 800860a:	3508      	adds	r5, #8
 800860c:	2d0c      	cmp	r5, #12
 800860e:	bf38      	it	cc
 8008610:	250c      	movcc	r5, #12
 8008612:	2d00      	cmp	r5, #0
 8008614:	4607      	mov	r7, r0
 8008616:	db01      	blt.n	800861c <_malloc_r+0x1c>
 8008618:	42a9      	cmp	r1, r5
 800861a:	d905      	bls.n	8008628 <_malloc_r+0x28>
 800861c:	230c      	movs	r3, #12
 800861e:	2600      	movs	r6, #0
 8008620:	603b      	str	r3, [r7, #0]
 8008622:	4630      	mov	r0, r6
 8008624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008628:	4e2e      	ldr	r6, [pc, #184]	; (80086e4 <_malloc_r+0xe4>)
 800862a:	f000 f94b 	bl	80088c4 <__malloc_lock>
 800862e:	6833      	ldr	r3, [r6, #0]
 8008630:	461c      	mov	r4, r3
 8008632:	bb34      	cbnz	r4, 8008682 <_malloc_r+0x82>
 8008634:	4629      	mov	r1, r5
 8008636:	4638      	mov	r0, r7
 8008638:	f7ff ffc2 	bl	80085c0 <sbrk_aligned>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	4604      	mov	r4, r0
 8008640:	d14d      	bne.n	80086de <_malloc_r+0xde>
 8008642:	6834      	ldr	r4, [r6, #0]
 8008644:	4626      	mov	r6, r4
 8008646:	2e00      	cmp	r6, #0
 8008648:	d140      	bne.n	80086cc <_malloc_r+0xcc>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	4631      	mov	r1, r6
 800864e:	4638      	mov	r0, r7
 8008650:	eb04 0803 	add.w	r8, r4, r3
 8008654:	f000 f848 	bl	80086e8 <_sbrk_r>
 8008658:	4580      	cmp	r8, r0
 800865a:	d13a      	bne.n	80086d2 <_malloc_r+0xd2>
 800865c:	6821      	ldr	r1, [r4, #0]
 800865e:	3503      	adds	r5, #3
 8008660:	1a6d      	subs	r5, r5, r1
 8008662:	f025 0503 	bic.w	r5, r5, #3
 8008666:	3508      	adds	r5, #8
 8008668:	2d0c      	cmp	r5, #12
 800866a:	bf38      	it	cc
 800866c:	250c      	movcc	r5, #12
 800866e:	4638      	mov	r0, r7
 8008670:	4629      	mov	r1, r5
 8008672:	f7ff ffa5 	bl	80085c0 <sbrk_aligned>
 8008676:	3001      	adds	r0, #1
 8008678:	d02b      	beq.n	80086d2 <_malloc_r+0xd2>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	442b      	add	r3, r5
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	e00e      	b.n	80086a0 <_malloc_r+0xa0>
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	1b52      	subs	r2, r2, r5
 8008686:	d41e      	bmi.n	80086c6 <_malloc_r+0xc6>
 8008688:	2a0b      	cmp	r2, #11
 800868a:	d916      	bls.n	80086ba <_malloc_r+0xba>
 800868c:	1961      	adds	r1, r4, r5
 800868e:	42a3      	cmp	r3, r4
 8008690:	6025      	str	r5, [r4, #0]
 8008692:	bf18      	it	ne
 8008694:	6059      	strne	r1, [r3, #4]
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	bf08      	it	eq
 800869a:	6031      	streq	r1, [r6, #0]
 800869c:	5162      	str	r2, [r4, r5]
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	4638      	mov	r0, r7
 80086a2:	f104 060b 	add.w	r6, r4, #11
 80086a6:	f000 f913 	bl	80088d0 <__malloc_unlock>
 80086aa:	f026 0607 	bic.w	r6, r6, #7
 80086ae:	1d23      	adds	r3, r4, #4
 80086b0:	1af2      	subs	r2, r6, r3
 80086b2:	d0b6      	beq.n	8008622 <_malloc_r+0x22>
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	50a3      	str	r3, [r4, r2]
 80086b8:	e7b3      	b.n	8008622 <_malloc_r+0x22>
 80086ba:	6862      	ldr	r2, [r4, #4]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	bf0c      	ite	eq
 80086c0:	6032      	streq	r2, [r6, #0]
 80086c2:	605a      	strne	r2, [r3, #4]
 80086c4:	e7ec      	b.n	80086a0 <_malloc_r+0xa0>
 80086c6:	4623      	mov	r3, r4
 80086c8:	6864      	ldr	r4, [r4, #4]
 80086ca:	e7b2      	b.n	8008632 <_malloc_r+0x32>
 80086cc:	4634      	mov	r4, r6
 80086ce:	6876      	ldr	r6, [r6, #4]
 80086d0:	e7b9      	b.n	8008646 <_malloc_r+0x46>
 80086d2:	230c      	movs	r3, #12
 80086d4:	4638      	mov	r0, r7
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	f000 f8fa 	bl	80088d0 <__malloc_unlock>
 80086dc:	e7a1      	b.n	8008622 <_malloc_r+0x22>
 80086de:	6025      	str	r5, [r4, #0]
 80086e0:	e7de      	b.n	80086a0 <_malloc_r+0xa0>
 80086e2:	bf00      	nop
 80086e4:	20000be4 	.word	0x20000be4

080086e8 <_sbrk_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	2300      	movs	r3, #0
 80086ec:	4d05      	ldr	r5, [pc, #20]	; (8008704 <_sbrk_r+0x1c>)
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7fb fb6c 	bl	8003dd0 <_sbrk>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_sbrk_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_sbrk_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	20000bec 	.word	0x20000bec

08008708 <_raise_r>:
 8008708:	291f      	cmp	r1, #31
 800870a:	b538      	push	{r3, r4, r5, lr}
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	d904      	bls.n	800871c <_raise_r+0x14>
 8008712:	2316      	movs	r3, #22
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800871e:	b112      	cbz	r2, 8008726 <_raise_r+0x1e>
 8008720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008724:	b94b      	cbnz	r3, 800873a <_raise_r+0x32>
 8008726:	4620      	mov	r0, r4
 8008728:	f000 f830 	bl	800878c <_getpid_r>
 800872c:	462a      	mov	r2, r5
 800872e:	4601      	mov	r1, r0
 8008730:	4620      	mov	r0, r4
 8008732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008736:	f000 b817 	b.w	8008768 <_kill_r>
 800873a:	2b01      	cmp	r3, #1
 800873c:	d00a      	beq.n	8008754 <_raise_r+0x4c>
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	d103      	bne.n	800874a <_raise_r+0x42>
 8008742:	2316      	movs	r3, #22
 8008744:	6003      	str	r3, [r0, #0]
 8008746:	2001      	movs	r0, #1
 8008748:	e7e7      	b.n	800871a <_raise_r+0x12>
 800874a:	2400      	movs	r4, #0
 800874c:	4628      	mov	r0, r5
 800874e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008752:	4798      	blx	r3
 8008754:	2000      	movs	r0, #0
 8008756:	e7e0      	b.n	800871a <_raise_r+0x12>

08008758 <raise>:
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <raise+0xc>)
 800875a:	4601      	mov	r1, r0
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	f7ff bfd3 	b.w	8008708 <_raise_r>
 8008762:	bf00      	nop
 8008764:	20000010 	.word	0x20000010

08008768 <_kill_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	2300      	movs	r3, #0
 800876c:	4d06      	ldr	r5, [pc, #24]	; (8008788 <_kill_r+0x20>)
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	f7fb faa8 	bl	8003cca <_kill>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d102      	bne.n	8008784 <_kill_r+0x1c>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b103      	cbz	r3, 8008784 <_kill_r+0x1c>
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	bd38      	pop	{r3, r4, r5, pc}
 8008786:	bf00      	nop
 8008788:	20000bec 	.word	0x20000bec

0800878c <_getpid_r>:
 800878c:	f7fb ba96 	b.w	8003cbc <_getpid>

08008790 <__sread>:
 8008790:	b510      	push	{r4, lr}
 8008792:	460c      	mov	r4, r1
 8008794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008798:	f000 f8a0 	bl	80088dc <_read_r>
 800879c:	2800      	cmp	r0, #0
 800879e:	bfab      	itete	ge
 80087a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087a2:	89a3      	ldrhlt	r3, [r4, #12]
 80087a4:	181b      	addge	r3, r3, r0
 80087a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087aa:	bfac      	ite	ge
 80087ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ae:	81a3      	strhlt	r3, [r4, #12]
 80087b0:	bd10      	pop	{r4, pc}

080087b2 <__swrite>:
 80087b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	461f      	mov	r7, r3
 80087b8:	898b      	ldrh	r3, [r1, #12]
 80087ba:	4605      	mov	r5, r0
 80087bc:	05db      	lsls	r3, r3, #23
 80087be:	460c      	mov	r4, r1
 80087c0:	4616      	mov	r6, r2
 80087c2:	d505      	bpl.n	80087d0 <__swrite+0x1e>
 80087c4:	2302      	movs	r3, #2
 80087c6:	2200      	movs	r2, #0
 80087c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087cc:	f000 f868 	bl	80088a0 <_lseek_r>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	4632      	mov	r2, r6
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	4628      	mov	r0, r5
 80087dc:	463b      	mov	r3, r7
 80087de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e6:	f000 b817 	b.w	8008818 <_write_r>

080087ea <__sseek>:
 80087ea:	b510      	push	{r4, lr}
 80087ec:	460c      	mov	r4, r1
 80087ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f2:	f000 f855 	bl	80088a0 <_lseek_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	bf15      	itete	ne
 80087fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80087fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008806:	81a3      	strheq	r3, [r4, #12]
 8008808:	bf18      	it	ne
 800880a:	81a3      	strhne	r3, [r4, #12]
 800880c:	bd10      	pop	{r4, pc}

0800880e <__sclose>:
 800880e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008812:	f000 b813 	b.w	800883c <_close_r>
	...

08008818 <_write_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	4611      	mov	r1, r2
 8008820:	2200      	movs	r2, #0
 8008822:	4d05      	ldr	r5, [pc, #20]	; (8008838 <_write_r+0x20>)
 8008824:	602a      	str	r2, [r5, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f7fb fa86 	bl	8003d38 <_write>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_write_r+0x1e>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_write_r+0x1e>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20000bec 	.word	0x20000bec

0800883c <_close_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	2300      	movs	r3, #0
 8008840:	4d05      	ldr	r5, [pc, #20]	; (8008858 <_close_r+0x1c>)
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7fb fa92 	bl	8003d70 <_close>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_close_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_close_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000bec 	.word	0x20000bec

0800885c <_fstat_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	2300      	movs	r3, #0
 8008860:	4d06      	ldr	r5, [pc, #24]	; (800887c <_fstat_r+0x20>)
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	4611      	mov	r1, r2
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	f7fb fa8c 	bl	8003d86 <_fstat>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d102      	bne.n	8008878 <_fstat_r+0x1c>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	b103      	cbz	r3, 8008878 <_fstat_r+0x1c>
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	bd38      	pop	{r3, r4, r5, pc}
 800887a:	bf00      	nop
 800887c:	20000bec 	.word	0x20000bec

08008880 <_isatty_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	2300      	movs	r3, #0
 8008884:	4d05      	ldr	r5, [pc, #20]	; (800889c <_isatty_r+0x1c>)
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	f7fb fa8a 	bl	8003da4 <_isatty>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_isatty_r+0x1a>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_isatty_r+0x1a>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	20000bec 	.word	0x20000bec

080088a0 <_lseek_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	2200      	movs	r2, #0
 80088aa:	4d05      	ldr	r5, [pc, #20]	; (80088c0 <_lseek_r+0x20>)
 80088ac:	602a      	str	r2, [r5, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f7fb fa82 	bl	8003db8 <_lseek>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_lseek_r+0x1e>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_lseek_r+0x1e>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	20000bec 	.word	0x20000bec

080088c4 <__malloc_lock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__malloc_lock+0x8>)
 80088c6:	f7ff bdbd 	b.w	8008444 <__retarget_lock_acquire_recursive>
 80088ca:	bf00      	nop
 80088cc:	20000be0 	.word	0x20000be0

080088d0 <__malloc_unlock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__malloc_unlock+0x8>)
 80088d2:	f7ff bdb8 	b.w	8008446 <__retarget_lock_release_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000be0 	.word	0x20000be0

080088dc <_read_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4604      	mov	r4, r0
 80088e0:	4608      	mov	r0, r1
 80088e2:	4611      	mov	r1, r2
 80088e4:	2200      	movs	r2, #0
 80088e6:	4d05      	ldr	r5, [pc, #20]	; (80088fc <_read_r+0x20>)
 80088e8:	602a      	str	r2, [r5, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7fb fa07 	bl	8003cfe <_read>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_read_r+0x1e>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_read_r+0x1e>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000bec 	.word	0x20000bec

08008900 <cos>:
 8008900:	b530      	push	{r4, r5, lr}
 8008902:	4a20      	ldr	r2, [pc, #128]	; (8008984 <cos+0x84>)
 8008904:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008908:	4293      	cmp	r3, r2
 800890a:	b087      	sub	sp, #28
 800890c:	dc06      	bgt.n	800891c <cos+0x1c>
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	b007      	add	sp, #28
 8008914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008918:	f000 baa2 	b.w	8008e60 <__kernel_cos>
 800891c:	4a1a      	ldr	r2, [pc, #104]	; (8008988 <cos+0x88>)
 800891e:	4293      	cmp	r3, r2
 8008920:	dd05      	ble.n	800892e <cos+0x2e>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	f7f7 fc83 	bl	8000230 <__aeabi_dsub>
 800892a:	b007      	add	sp, #28
 800892c:	bd30      	pop	{r4, r5, pc}
 800892e:	aa02      	add	r2, sp, #8
 8008930:	f000 f89e 	bl	8008a70 <__ieee754_rem_pio2>
 8008934:	f000 0003 	and.w	r0, r0, #3
 8008938:	2801      	cmp	r0, #1
 800893a:	d009      	beq.n	8008950 <cos+0x50>
 800893c:	2802      	cmp	r0, #2
 800893e:	d011      	beq.n	8008964 <cos+0x64>
 8008940:	b9b8      	cbnz	r0, 8008972 <cos+0x72>
 8008942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800894a:	f000 fa89 	bl	8008e60 <__kernel_cos>
 800894e:	e7ec      	b.n	800892a <cos+0x2a>
 8008950:	9000      	str	r0, [sp, #0]
 8008952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895a:	f000 fe81 	bl	8009660 <__kernel_sin>
 800895e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008962:	e7e2      	b.n	800892a <cos+0x2a>
 8008964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896c:	f000 fa78 	bl	8008e60 <__kernel_cos>
 8008970:	e7f5      	b.n	800895e <cos+0x5e>
 8008972:	2301      	movs	r3, #1
 8008974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800897e:	f000 fe6f 	bl	8009660 <__kernel_sin>
 8008982:	e7d2      	b.n	800892a <cos+0x2a>
 8008984:	3fe921fb 	.word	0x3fe921fb
 8008988:	7fefffff 	.word	0x7fefffff

0800898c <fabs>:
 800898c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008990:	4770      	bx	lr
	...

08008994 <sin>:
 8008994:	b530      	push	{r4, r5, lr}
 8008996:	4a20      	ldr	r2, [pc, #128]	; (8008a18 <sin+0x84>)
 8008998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800899c:	4293      	cmp	r3, r2
 800899e:	b087      	sub	sp, #28
 80089a0:	dc06      	bgt.n	80089b0 <sin+0x1c>
 80089a2:	2300      	movs	r3, #0
 80089a4:	2200      	movs	r2, #0
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2300      	movs	r3, #0
 80089aa:	f000 fe59 	bl	8009660 <__kernel_sin>
 80089ae:	e006      	b.n	80089be <sin+0x2a>
 80089b0:	4a1a      	ldr	r2, [pc, #104]	; (8008a1c <sin+0x88>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	dd05      	ble.n	80089c2 <sin+0x2e>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	f7f7 fc39 	bl	8000230 <__aeabi_dsub>
 80089be:	b007      	add	sp, #28
 80089c0:	bd30      	pop	{r4, r5, pc}
 80089c2:	aa02      	add	r2, sp, #8
 80089c4:	f000 f854 	bl	8008a70 <__ieee754_rem_pio2>
 80089c8:	f000 0003 	and.w	r0, r0, #3
 80089cc:	2801      	cmp	r0, #1
 80089ce:	d009      	beq.n	80089e4 <sin+0x50>
 80089d0:	2802      	cmp	r0, #2
 80089d2:	d00e      	beq.n	80089f2 <sin+0x5e>
 80089d4:	b9c0      	cbnz	r0, 8008a08 <sin+0x74>
 80089d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089da:	2301      	movs	r3, #1
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089e2:	e7e2      	b.n	80089aa <sin+0x16>
 80089e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ec:	f000 fa38 	bl	8008e60 <__kernel_cos>
 80089f0:	e7e5      	b.n	80089be <sin+0x2a>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089fe:	f000 fe2f 	bl	8009660 <__kernel_sin>
 8008a02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008a06:	e7da      	b.n	80089be <sin+0x2a>
 8008a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a10:	f000 fa26 	bl	8008e60 <__kernel_cos>
 8008a14:	e7f5      	b.n	8008a02 <sin+0x6e>
 8008a16:	bf00      	nop
 8008a18:	3fe921fb 	.word	0x3fe921fb
 8008a1c:	7fefffff 	.word	0x7fefffff

08008a20 <roundf>:
 8008a20:	b508      	push	{r3, lr}
 8008a22:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008a26:	3b7f      	subs	r3, #127	; 0x7f
 8008a28:	2b16      	cmp	r3, #22
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	dc14      	bgt.n	8008a5a <roundf+0x3a>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da07      	bge.n	8008a44 <roundf+0x24>
 8008a34:	3301      	adds	r3, #1
 8008a36:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8008a3a:	d101      	bne.n	8008a40 <roundf+0x20>
 8008a3c:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8008a40:	4608      	mov	r0, r1
 8008a42:	bd08      	pop	{r3, pc}
 8008a44:	4808      	ldr	r0, [pc, #32]	; (8008a68 <roundf+0x48>)
 8008a46:	4118      	asrs	r0, r3
 8008a48:	4201      	tst	r1, r0
 8008a4a:	d0f9      	beq.n	8008a40 <roundf+0x20>
 8008a4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a50:	4119      	asrs	r1, r3
 8008a52:	4411      	add	r1, r2
 8008a54:	ea21 0100 	bic.w	r1, r1, r0
 8008a58:	e7f2      	b.n	8008a40 <roundf+0x20>
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d1f0      	bne.n	8008a40 <roundf+0x20>
 8008a5e:	f7f8 f8b7 	bl	8000bd0 <__addsf3>
 8008a62:	4601      	mov	r1, r0
 8008a64:	e7ec      	b.n	8008a40 <roundf+0x20>
 8008a66:	bf00      	nop
 8008a68:	007fffff 	.word	0x007fffff
 8008a6c:	00000000 	.word	0x00000000

08008a70 <__ieee754_rem_pio2>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4614      	mov	r4, r2
 8008a76:	4ac4      	ldr	r2, [pc, #784]	; (8008d88 <__ieee754_rem_pio2+0x318>)
 8008a78:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008a7c:	b08d      	sub	sp, #52	; 0x34
 8008a7e:	4592      	cmp	sl, r2
 8008a80:	9104      	str	r1, [sp, #16]
 8008a82:	dc07      	bgt.n	8008a94 <__ieee754_rem_pio2+0x24>
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	e9c4 0100 	strd	r0, r1, [r4]
 8008a8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008a90:	2500      	movs	r5, #0
 8008a92:	e024      	b.n	8008ade <__ieee754_rem_pio2+0x6e>
 8008a94:	4abd      	ldr	r2, [pc, #756]	; (8008d8c <__ieee754_rem_pio2+0x31c>)
 8008a96:	4592      	cmp	sl, r2
 8008a98:	dc72      	bgt.n	8008b80 <__ieee754_rem_pio2+0x110>
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	4dbc      	ldr	r5, [pc, #752]	; (8008d90 <__ieee754_rem_pio2+0x320>)
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	a3ab      	add	r3, pc, #684	; (adr r3, 8008d50 <__ieee754_rem_pio2+0x2e0>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	dd36      	ble.n	8008b16 <__ieee754_rem_pio2+0xa6>
 8008aa8:	f7f7 fbc2 	bl	8000230 <__aeabi_dsub>
 8008aac:	45aa      	cmp	sl, r5
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	d018      	beq.n	8008ae6 <__ieee754_rem_pio2+0x76>
 8008ab4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x2e8>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fbb9 	bl	8000230 <__aeabi_dsub>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	e9c4 2300 	strd	r2, r3, [r4]
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fbb1 	bl	8000230 <__aeabi_dsub>
 8008ace:	a3a2      	add	r3, pc, #648	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x2e8>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fbac 	bl	8000230 <__aeabi_dsub>
 8008ad8:	2501      	movs	r5, #1
 8008ada:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	b00d      	add	sp, #52	; 0x34
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	a39e      	add	r3, pc, #632	; (adr r3, 8008d60 <__ieee754_rem_pio2+0x2f0>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fba0 	bl	8000230 <__aeabi_dsub>
 8008af0:	a39d      	add	r3, pc, #628	; (adr r3, 8008d68 <__ieee754_rem_pio2+0x2f8>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	4606      	mov	r6, r0
 8008af8:	460f      	mov	r7, r1
 8008afa:	f7f7 fb99 	bl	8000230 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4630      	mov	r0, r6
 8008b04:	e9c4 2300 	strd	r2, r3, [r4]
 8008b08:	4639      	mov	r1, r7
 8008b0a:	f7f7 fb91 	bl	8000230 <__aeabi_dsub>
 8008b0e:	a396      	add	r3, pc, #600	; (adr r3, 8008d68 <__ieee754_rem_pio2+0x2f8>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	e7de      	b.n	8008ad4 <__ieee754_rem_pio2+0x64>
 8008b16:	f7f7 fb8d 	bl	8000234 <__adddf3>
 8008b1a:	45aa      	cmp	sl, r5
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	d016      	beq.n	8008b50 <__ieee754_rem_pio2+0xe0>
 8008b22:	a38d      	add	r3, pc, #564	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x2e8>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fb84 	bl	8000234 <__adddf3>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4630      	mov	r0, r6
 8008b32:	e9c4 2300 	strd	r2, r3, [r4]
 8008b36:	4639      	mov	r1, r7
 8008b38:	f7f7 fb7a 	bl	8000230 <__aeabi_dsub>
 8008b3c:	a386      	add	r3, pc, #536	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x2e8>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fb77 	bl	8000234 <__adddf3>
 8008b46:	f04f 35ff 	mov.w	r5, #4294967295
 8008b4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b4e:	e7c6      	b.n	8008ade <__ieee754_rem_pio2+0x6e>
 8008b50:	a383      	add	r3, pc, #524	; (adr r3, 8008d60 <__ieee754_rem_pio2+0x2f0>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fb6d 	bl	8000234 <__adddf3>
 8008b5a:	a383      	add	r3, pc, #524	; (adr r3, 8008d68 <__ieee754_rem_pio2+0x2f8>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	4606      	mov	r6, r0
 8008b62:	460f      	mov	r7, r1
 8008b64:	f7f7 fb66 	bl	8000234 <__adddf3>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	e9c4 2300 	strd	r2, r3, [r4]
 8008b72:	4639      	mov	r1, r7
 8008b74:	f7f7 fb5c 	bl	8000230 <__aeabi_dsub>
 8008b78:	a37b      	add	r3, pc, #492	; (adr r3, 8008d68 <__ieee754_rem_pio2+0x2f8>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	e7e0      	b.n	8008b42 <__ieee754_rem_pio2+0xd2>
 8008b80:	4a84      	ldr	r2, [pc, #528]	; (8008d94 <__ieee754_rem_pio2+0x324>)
 8008b82:	4592      	cmp	sl, r2
 8008b84:	f300 80d5 	bgt.w	8008d32 <__ieee754_rem_pio2+0x2c2>
 8008b88:	f7ff ff00 	bl	800898c <fabs>
 8008b8c:	a378      	add	r3, pc, #480	; (adr r3, 8008d70 <__ieee754_rem_pio2+0x300>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	f7f7 fd03 	bl	80005a0 <__aeabi_dmul>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4b7e      	ldr	r3, [pc, #504]	; (8008d98 <__ieee754_rem_pio2+0x328>)
 8008b9e:	f7f7 fb49 	bl	8000234 <__adddf3>
 8008ba2:	f7f7 ff97 	bl	8000ad4 <__aeabi_d2iz>
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	f7f7 fc90 	bl	80004cc <__aeabi_i2d>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bb4:	a366      	add	r3, pc, #408	; (adr r3, 8008d50 <__ieee754_rem_pio2+0x2e0>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fcf1 	bl	80005a0 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7f7 fb33 	bl	8000230 <__aeabi_dsub>
 8008bca:	a363      	add	r3, pc, #396	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x2e8>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	4689      	mov	r9, r1
 8008bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd8:	f7f7 fce2 	bl	80005a0 <__aeabi_dmul>
 8008bdc:	2d1f      	cmp	r5, #31
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	dc0e      	bgt.n	8008c02 <__ieee754_rem_pio2+0x192>
 8008be4:	4b6d      	ldr	r3, [pc, #436]	; (8008d9c <__ieee754_rem_pio2+0x32c>)
 8008be6:	1e6a      	subs	r2, r5, #1
 8008be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bec:	4553      	cmp	r3, sl
 8008bee:	d008      	beq.n	8008c02 <__ieee754_rem_pio2+0x192>
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	f7f7 fb1a 	bl	8000230 <__aeabi_dsub>
 8008bfc:	e9c4 0100 	strd	r0, r1, [r4]
 8008c00:	e013      	b.n	8008c2a <__ieee754_rem_pio2+0x1ba>
 8008c02:	463b      	mov	r3, r7
 8008c04:	4632      	mov	r2, r6
 8008c06:	4640      	mov	r0, r8
 8008c08:	4649      	mov	r1, r9
 8008c0a:	f7f7 fb11 	bl	8000230 <__aeabi_dsub>
 8008c0e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c18:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008c1c:	f1ba 0f10 	cmp.w	sl, #16
 8008c20:	dc1f      	bgt.n	8008c62 <__ieee754_rem_pio2+0x1f2>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	e9c4 2300 	strd	r2, r3, [r4]
 8008c2a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4653      	mov	r3, sl
 8008c32:	4649      	mov	r1, r9
 8008c34:	f7f7 fafc 	bl	8000230 <__aeabi_dsub>
 8008c38:	4632      	mov	r2, r6
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	f7f7 faf8 	bl	8000230 <__aeabi_dsub>
 8008c40:	460b      	mov	r3, r1
 8008c42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c46:	9904      	ldr	r1, [sp, #16]
 8008c48:	4602      	mov	r2, r0
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	f6bf af47 	bge.w	8008ade <__ieee754_rem_pio2+0x6e>
 8008c50:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008c54:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008c58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	60e3      	str	r3, [r4, #12]
 8008c5e:	426d      	negs	r5, r5
 8008c60:	e73d      	b.n	8008ade <__ieee754_rem_pio2+0x6e>
 8008c62:	a33f      	add	r3, pc, #252	; (adr r3, 8008d60 <__ieee754_rem_pio2+0x2f0>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c6c:	f7f7 fc98 	bl	80005a0 <__aeabi_dmul>
 8008c70:	4606      	mov	r6, r0
 8008c72:	460f      	mov	r7, r1
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	f7f7 fad8 	bl	8000230 <__aeabi_dsub>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4682      	mov	sl, r0
 8008c86:	468b      	mov	fp, r1
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	f7f7 fad0 	bl	8000230 <__aeabi_dsub>
 8008c90:	4632      	mov	r2, r6
 8008c92:	463b      	mov	r3, r7
 8008c94:	f7f7 facc 	bl	8000230 <__aeabi_dsub>
 8008c98:	a333      	add	r3, pc, #204	; (adr r3, 8008d68 <__ieee754_rem_pio2+0x2f8>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ca6:	f7f7 fc7b 	bl	80005a0 <__aeabi_dmul>
 8008caa:	4632      	mov	r2, r6
 8008cac:	463b      	mov	r3, r7
 8008cae:	f7f7 fabf 	bl	8000230 <__aeabi_dsub>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460f      	mov	r7, r1
 8008cba:	4650      	mov	r0, sl
 8008cbc:	4659      	mov	r1, fp
 8008cbe:	f7f7 fab7 	bl	8000230 <__aeabi_dsub>
 8008cc2:	9a05      	ldr	r2, [sp, #20]
 8008cc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b31      	cmp	r3, #49	; 0x31
 8008ccc:	dc06      	bgt.n	8008cdc <__ieee754_rem_pio2+0x26c>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	46d0      	mov	r8, sl
 8008cd4:	46d9      	mov	r9, fp
 8008cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8008cda:	e7a6      	b.n	8008c2a <__ieee754_rem_pio2+0x1ba>
 8008cdc:	a326      	add	r3, pc, #152	; (adr r3, 8008d78 <__ieee754_rem_pio2+0x308>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ce6:	f7f7 fc5b 	bl	80005a0 <__aeabi_dmul>
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	f7f7 fa9b 	bl	8000230 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4680      	mov	r8, r0
 8008d00:	4689      	mov	r9, r1
 8008d02:	4650      	mov	r0, sl
 8008d04:	4659      	mov	r1, fp
 8008d06:	f7f7 fa93 	bl	8000230 <__aeabi_dsub>
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	f7f7 fa8f 	bl	8000230 <__aeabi_dsub>
 8008d12:	a31b      	add	r3, pc, #108	; (adr r3, 8008d80 <__ieee754_rem_pio2+0x310>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d20:	f7f7 fc3e 	bl	80005a0 <__aeabi_dmul>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	f7f7 fa82 	bl	8000230 <__aeabi_dsub>
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	e75e      	b.n	8008bf0 <__ieee754_rem_pio2+0x180>
 8008d32:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <__ieee754_rem_pio2+0x330>)
 8008d34:	4592      	cmp	sl, r2
 8008d36:	dd35      	ble.n	8008da4 <__ieee754_rem_pio2+0x334>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	f7f7 fa78 	bl	8000230 <__aeabi_dsub>
 8008d40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d44:	e9c4 0100 	strd	r0, r1, [r4]
 8008d48:	e6a2      	b.n	8008a90 <__ieee754_rem_pio2+0x20>
 8008d4a:	bf00      	nop
 8008d4c:	f3af 8000 	nop.w
 8008d50:	54400000 	.word	0x54400000
 8008d54:	3ff921fb 	.word	0x3ff921fb
 8008d58:	1a626331 	.word	0x1a626331
 8008d5c:	3dd0b461 	.word	0x3dd0b461
 8008d60:	1a600000 	.word	0x1a600000
 8008d64:	3dd0b461 	.word	0x3dd0b461
 8008d68:	2e037073 	.word	0x2e037073
 8008d6c:	3ba3198a 	.word	0x3ba3198a
 8008d70:	6dc9c883 	.word	0x6dc9c883
 8008d74:	3fe45f30 	.word	0x3fe45f30
 8008d78:	2e000000 	.word	0x2e000000
 8008d7c:	3ba3198a 	.word	0x3ba3198a
 8008d80:	252049c1 	.word	0x252049c1
 8008d84:	397b839a 	.word	0x397b839a
 8008d88:	3fe921fb 	.word	0x3fe921fb
 8008d8c:	4002d97b 	.word	0x4002d97b
 8008d90:	3ff921fb 	.word	0x3ff921fb
 8008d94:	413921fb 	.word	0x413921fb
 8008d98:	3fe00000 	.word	0x3fe00000
 8008d9c:	08009b50 	.word	0x08009b50
 8008da0:	7fefffff 	.word	0x7fefffff
 8008da4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008da8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008dac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008db0:	460f      	mov	r7, r1
 8008db2:	4606      	mov	r6, r0
 8008db4:	f7f7 fe8e 	bl	8000ad4 <__aeabi_d2iz>
 8008db8:	f7f7 fb88 	bl	80004cc <__aeabi_i2d>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dc8:	f7f7 fa32 	bl	8000230 <__aeabi_dsub>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <__ieee754_rem_pio2+0x3e8>)
 8008dd0:	f7f7 fbe6 	bl	80005a0 <__aeabi_dmul>
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	f7f7 fe7c 	bl	8000ad4 <__aeabi_d2iz>
 8008ddc:	f7f7 fb76 	bl	80004cc <__aeabi_i2d>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4630      	mov	r0, r6
 8008de6:	4639      	mov	r1, r7
 8008de8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008dec:	f7f7 fa20 	bl	8000230 <__aeabi_dsub>
 8008df0:	2200      	movs	r2, #0
 8008df2:	4b19      	ldr	r3, [pc, #100]	; (8008e58 <__ieee754_rem_pio2+0x3e8>)
 8008df4:	f7f7 fbd4 	bl	80005a0 <__aeabi_dmul>
 8008df8:	f04f 0803 	mov.w	r8, #3
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	2700      	movs	r7, #0
 8008e00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e04:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008e08:	4632      	mov	r2, r6
 8008e0a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008e0e:	463b      	mov	r3, r7
 8008e10:	46c2      	mov	sl, r8
 8008e12:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e16:	f7f7 fe2b 	bl	8000a70 <__aeabi_dcmpeq>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d1f4      	bne.n	8008e08 <__ieee754_rem_pio2+0x398>
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <__ieee754_rem_pio2+0x3ec>)
 8008e20:	462a      	mov	r2, r5
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	2302      	movs	r3, #2
 8008e26:	4621      	mov	r1, r4
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	a806      	add	r0, sp, #24
 8008e2c:	4653      	mov	r3, sl
 8008e2e:	f000 f8d5 	bl	8008fdc <__kernel_rem_pio2>
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	4605      	mov	r5, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f6bf ae51 	bge.w	8008ade <__ieee754_rem_pio2+0x6e>
 8008e3c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008e40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e44:	e9c4 2300 	strd	r2, r3, [r4]
 8008e48:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e50:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008e54:	e703      	b.n	8008c5e <__ieee754_rem_pio2+0x1ee>
 8008e56:	bf00      	nop
 8008e58:	41700000 	.word	0x41700000
 8008e5c:	08009bd0 	.word	0x08009bd0

08008e60 <__kernel_cos>:
 8008e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e68:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	e9cd 2300 	strd	r2, r3, [sp]
 8008e74:	da04      	bge.n	8008e80 <__kernel_cos+0x20>
 8008e76:	f7f7 fe2d 	bl	8000ad4 <__aeabi_d2iz>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	f000 8086 	beq.w	8008f8c <__kernel_cos+0x12c>
 8008e80:	4642      	mov	r2, r8
 8008e82:	463b      	mov	r3, r7
 8008e84:	4640      	mov	r0, r8
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fb8a 	bl	80005a0 <__aeabi_dmul>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4b4e      	ldr	r3, [pc, #312]	; (8008fc8 <__kernel_cos+0x168>)
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	f7f7 fb84 	bl	80005a0 <__aeabi_dmul>
 8008e98:	a33f      	add	r3, pc, #252	; (adr r3, 8008f98 <__kernel_cos+0x138>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	4682      	mov	sl, r0
 8008ea0:	468b      	mov	fp, r1
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7f7 fb7b 	bl	80005a0 <__aeabi_dmul>
 8008eaa:	a33d      	add	r3, pc, #244	; (adr r3, 8008fa0 <__kernel_cos+0x140>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 f9c0 	bl	8000234 <__adddf3>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	f7f7 fb72 	bl	80005a0 <__aeabi_dmul>
 8008ebc:	a33a      	add	r3, pc, #232	; (adr r3, 8008fa8 <__kernel_cos+0x148>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 f9b5 	bl	8000230 <__aeabi_dsub>
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	462b      	mov	r3, r5
 8008eca:	f7f7 fb69 	bl	80005a0 <__aeabi_dmul>
 8008ece:	a338      	add	r3, pc, #224	; (adr r3, 8008fb0 <__kernel_cos+0x150>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f7f7 f9ae 	bl	8000234 <__adddf3>
 8008ed8:	4622      	mov	r2, r4
 8008eda:	462b      	mov	r3, r5
 8008edc:	f7f7 fb60 	bl	80005a0 <__aeabi_dmul>
 8008ee0:	a335      	add	r3, pc, #212	; (adr r3, 8008fb8 <__kernel_cos+0x158>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 f9a3 	bl	8000230 <__aeabi_dsub>
 8008eea:	4622      	mov	r2, r4
 8008eec:	462b      	mov	r3, r5
 8008eee:	f7f7 fb57 	bl	80005a0 <__aeabi_dmul>
 8008ef2:	a333      	add	r3, pc, #204	; (adr r3, 8008fc0 <__kernel_cos+0x160>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 f99c 	bl	8000234 <__adddf3>
 8008efc:	4622      	mov	r2, r4
 8008efe:	462b      	mov	r3, r5
 8008f00:	f7f7 fb4e 	bl	80005a0 <__aeabi_dmul>
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	f7f7 fb4a 	bl	80005a0 <__aeabi_dmul>
 8008f0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f10:	4604      	mov	r4, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	4640      	mov	r0, r8
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 fb42 	bl	80005a0 <__aeabi_dmul>
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4629      	mov	r1, r5
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7f7 f984 	bl	8000230 <__aeabi_dsub>
 8008f28:	4b28      	ldr	r3, [pc, #160]	; (8008fcc <__kernel_cos+0x16c>)
 8008f2a:	4680      	mov	r8, r0
 8008f2c:	429e      	cmp	r6, r3
 8008f2e:	4689      	mov	r9, r1
 8008f30:	dc0e      	bgt.n	8008f50 <__kernel_cos+0xf0>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4650      	mov	r0, sl
 8008f38:	4659      	mov	r1, fp
 8008f3a:	f7f7 f979 	bl	8000230 <__aeabi_dsub>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	2000      	movs	r0, #0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4922      	ldr	r1, [pc, #136]	; (8008fd0 <__kernel_cos+0x170>)
 8008f46:	f7f7 f973 	bl	8000230 <__aeabi_dsub>
 8008f4a:	b003      	add	sp, #12
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	2400      	movs	r4, #0
 8008f52:	4b20      	ldr	r3, [pc, #128]	; (8008fd4 <__kernel_cos+0x174>)
 8008f54:	4622      	mov	r2, r4
 8008f56:	429e      	cmp	r6, r3
 8008f58:	bfcc      	ite	gt
 8008f5a:	4d1f      	ldrgt	r5, [pc, #124]	; (8008fd8 <__kernel_cos+0x178>)
 8008f5c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008f60:	462b      	mov	r3, r5
 8008f62:	2000      	movs	r0, #0
 8008f64:	491a      	ldr	r1, [pc, #104]	; (8008fd0 <__kernel_cos+0x170>)
 8008f66:	f7f7 f963 	bl	8000230 <__aeabi_dsub>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460f      	mov	r7, r1
 8008f70:	462b      	mov	r3, r5
 8008f72:	4650      	mov	r0, sl
 8008f74:	4659      	mov	r1, fp
 8008f76:	f7f7 f95b 	bl	8000230 <__aeabi_dsub>
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	f7f7 f957 	bl	8000230 <__aeabi_dsub>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	e7dc      	b.n	8008f46 <__kernel_cos+0xe6>
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	4910      	ldr	r1, [pc, #64]	; (8008fd0 <__kernel_cos+0x170>)
 8008f90:	e7db      	b.n	8008f4a <__kernel_cos+0xea>
 8008f92:	bf00      	nop
 8008f94:	f3af 8000 	nop.w
 8008f98:	be8838d4 	.word	0xbe8838d4
 8008f9c:	bda8fae9 	.word	0xbda8fae9
 8008fa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008fa4:	3e21ee9e 	.word	0x3e21ee9e
 8008fa8:	809c52ad 	.word	0x809c52ad
 8008fac:	3e927e4f 	.word	0x3e927e4f
 8008fb0:	19cb1590 	.word	0x19cb1590
 8008fb4:	3efa01a0 	.word	0x3efa01a0
 8008fb8:	16c15177 	.word	0x16c15177
 8008fbc:	3f56c16c 	.word	0x3f56c16c
 8008fc0:	5555554c 	.word	0x5555554c
 8008fc4:	3fa55555 	.word	0x3fa55555
 8008fc8:	3fe00000 	.word	0x3fe00000
 8008fcc:	3fd33332 	.word	0x3fd33332
 8008fd0:	3ff00000 	.word	0x3ff00000
 8008fd4:	3fe90000 	.word	0x3fe90000
 8008fd8:	3fd20000 	.word	0x3fd20000

08008fdc <__kernel_rem_pio2>:
 8008fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	9106      	str	r1, [sp, #24]
 8008fe8:	4bb6      	ldr	r3, [pc, #728]	; (80092c4 <__kernel_rem_pio2+0x2e8>)
 8008fea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008fec:	f112 0f14 	cmn.w	r2, #20
 8008ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ff4:	bfa8      	it	ge
 8008ff6:	1ed4      	subge	r4, r2, #3
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	9b08      	ldr	r3, [sp, #32]
 8008ffc:	bfb8      	it	lt
 8008ffe:	2400      	movlt	r4, #0
 8009000:	f103 33ff 	add.w	r3, r3, #4294967295
 8009004:	9307      	str	r3, [sp, #28]
 8009006:	bfa4      	itt	ge
 8009008:	2318      	movge	r3, #24
 800900a:	fb94 f4f3 	sdivge	r4, r4, r3
 800900e:	f06f 0317 	mvn.w	r3, #23
 8009012:	fb04 3303 	mla	r3, r4, r3, r3
 8009016:	eb03 0b02 	add.w	fp, r3, r2
 800901a:	9a07      	ldr	r2, [sp, #28]
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	1aa7      	subs	r7, r4, r2
 8009020:	eb03 0802 	add.w	r8, r3, r2
 8009024:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009026:	2500      	movs	r5, #0
 8009028:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800902c:	2200      	movs	r2, #0
 800902e:	2300      	movs	r3, #0
 8009030:	9009      	str	r0, [sp, #36]	; 0x24
 8009032:	ae20      	add	r6, sp, #128	; 0x80
 8009034:	4545      	cmp	r5, r8
 8009036:	dd14      	ble.n	8009062 <__kernel_rem_pio2+0x86>
 8009038:	f04f 0800 	mov.w	r8, #0
 800903c:	9a08      	ldr	r2, [sp, #32]
 800903e:	ab20      	add	r3, sp, #128	; 0x80
 8009040:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8009044:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8009048:	9b02      	ldr	r3, [sp, #8]
 800904a:	4598      	cmp	r8, r3
 800904c:	dc35      	bgt.n	80090ba <__kernel_rem_pio2+0xde>
 800904e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009050:	2200      	movs	r2, #0
 8009052:	f1a3 0908 	sub.w	r9, r3, #8
 8009056:	2300      	movs	r3, #0
 8009058:	462f      	mov	r7, r5
 800905a:	2600      	movs	r6, #0
 800905c:	e9cd 2300 	strd	r2, r3, [sp]
 8009060:	e01f      	b.n	80090a2 <__kernel_rem_pio2+0xc6>
 8009062:	42ef      	cmn	r7, r5
 8009064:	d40b      	bmi.n	800907e <__kernel_rem_pio2+0xa2>
 8009066:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800906a:	e9cd 2300 	strd	r2, r3, [sp]
 800906e:	f7f7 fa2d 	bl	80004cc <__aeabi_i2d>
 8009072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009076:	e8e6 0102 	strd	r0, r1, [r6], #8
 800907a:	3501      	adds	r5, #1
 800907c:	e7da      	b.n	8009034 <__kernel_rem_pio2+0x58>
 800907e:	4610      	mov	r0, r2
 8009080:	4619      	mov	r1, r3
 8009082:	e7f8      	b.n	8009076 <__kernel_rem_pio2+0x9a>
 8009084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009088:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800908c:	f7f7 fa88 	bl	80005a0 <__aeabi_dmul>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009098:	f7f7 f8cc 	bl	8000234 <__adddf3>
 800909c:	e9cd 0100 	strd	r0, r1, [sp]
 80090a0:	3601      	adds	r6, #1
 80090a2:	9b07      	ldr	r3, [sp, #28]
 80090a4:	3f08      	subs	r7, #8
 80090a6:	429e      	cmp	r6, r3
 80090a8:	ddec      	ble.n	8009084 <__kernel_rem_pio2+0xa8>
 80090aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ae:	f108 0801 	add.w	r8, r8, #1
 80090b2:	e8ea 2302 	strd	r2, r3, [sl], #8
 80090b6:	3508      	adds	r5, #8
 80090b8:	e7c6      	b.n	8009048 <__kernel_rem_pio2+0x6c>
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	aa0c      	add	r2, sp, #48	; 0x30
 80090be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80090c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80090c6:	9e02      	ldr	r6, [sp, #8]
 80090c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80090cc:	930a      	str	r3, [sp, #40]	; 0x28
 80090ce:	ab98      	add	r3, sp, #608	; 0x260
 80090d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090d4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80090d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80090da:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80090de:	46d0      	mov	r8, sl
 80090e0:	46b1      	mov	r9, r6
 80090e2:	af0c      	add	r7, sp, #48	; 0x30
 80090e4:	9700      	str	r7, [sp, #0]
 80090e6:	f1b9 0f00 	cmp.w	r9, #0
 80090ea:	f1a8 0808 	sub.w	r8, r8, #8
 80090ee:	dc71      	bgt.n	80091d4 <__kernel_rem_pio2+0x1f8>
 80090f0:	465a      	mov	r2, fp
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f000 fbeb 	bl	80098d0 <scalbn>
 80090fa:	2200      	movs	r2, #0
 80090fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	f7f7 fa4c 	bl	80005a0 <__aeabi_dmul>
 8009108:	f000 fb62 	bl	80097d0 <floor>
 800910c:	2200      	movs	r2, #0
 800910e:	4b6e      	ldr	r3, [pc, #440]	; (80092c8 <__kernel_rem_pio2+0x2ec>)
 8009110:	f7f7 fa46 	bl	80005a0 <__aeabi_dmul>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 f888 	bl	8000230 <__aeabi_dsub>
 8009120:	460d      	mov	r5, r1
 8009122:	4604      	mov	r4, r0
 8009124:	f7f7 fcd6 	bl	8000ad4 <__aeabi_d2iz>
 8009128:	9004      	str	r0, [sp, #16]
 800912a:	f7f7 f9cf 	bl	80004cc <__aeabi_i2d>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 f87b 	bl	8000230 <__aeabi_dsub>
 800913a:	f1bb 0f00 	cmp.w	fp, #0
 800913e:	4680      	mov	r8, r0
 8009140:	4689      	mov	r9, r1
 8009142:	dd70      	ble.n	8009226 <__kernel_rem_pio2+0x24a>
 8009144:	1e72      	subs	r2, r6, #1
 8009146:	ab0c      	add	r3, sp, #48	; 0x30
 8009148:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800914c:	9c04      	ldr	r4, [sp, #16]
 800914e:	f1cb 0118 	rsb	r1, fp, #24
 8009152:	fa40 f301 	asr.w	r3, r0, r1
 8009156:	441c      	add	r4, r3
 8009158:	408b      	lsls	r3, r1
 800915a:	1ac0      	subs	r0, r0, r3
 800915c:	ab0c      	add	r3, sp, #48	; 0x30
 800915e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009162:	f1cb 0317 	rsb	r3, fp, #23
 8009166:	9404      	str	r4, [sp, #16]
 8009168:	fa40 f303 	asr.w	r3, r0, r3
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	9b00      	ldr	r3, [sp, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	dd66      	ble.n	8009242 <__kernel_rem_pio2+0x266>
 8009174:	2200      	movs	r2, #0
 8009176:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800917a:	4614      	mov	r4, r2
 800917c:	9b04      	ldr	r3, [sp, #16]
 800917e:	3301      	adds	r3, #1
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	4296      	cmp	r6, r2
 8009184:	f300 80ac 	bgt.w	80092e0 <__kernel_rem_pio2+0x304>
 8009188:	f1bb 0f00 	cmp.w	fp, #0
 800918c:	dd07      	ble.n	800919e <__kernel_rem_pio2+0x1c2>
 800918e:	f1bb 0f01 	cmp.w	fp, #1
 8009192:	f000 80b4 	beq.w	80092fe <__kernel_rem_pio2+0x322>
 8009196:	f1bb 0f02 	cmp.w	fp, #2
 800919a:	f000 80ba 	beq.w	8009312 <__kernel_rem_pio2+0x336>
 800919e:	9b00      	ldr	r3, [sp, #0]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d14e      	bne.n	8009242 <__kernel_rem_pio2+0x266>
 80091a4:	4642      	mov	r2, r8
 80091a6:	464b      	mov	r3, r9
 80091a8:	2000      	movs	r0, #0
 80091aa:	4948      	ldr	r1, [pc, #288]	; (80092cc <__kernel_rem_pio2+0x2f0>)
 80091ac:	f7f7 f840 	bl	8000230 <__aeabi_dsub>
 80091b0:	4680      	mov	r8, r0
 80091b2:	4689      	mov	r9, r1
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	d044      	beq.n	8009242 <__kernel_rem_pio2+0x266>
 80091b8:	465a      	mov	r2, fp
 80091ba:	2000      	movs	r0, #0
 80091bc:	4943      	ldr	r1, [pc, #268]	; (80092cc <__kernel_rem_pio2+0x2f0>)
 80091be:	f000 fb87 	bl	80098d0 <scalbn>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 f831 	bl	8000230 <__aeabi_dsub>
 80091ce:	4680      	mov	r8, r0
 80091d0:	4689      	mov	r9, r1
 80091d2:	e036      	b.n	8009242 <__kernel_rem_pio2+0x266>
 80091d4:	2200      	movs	r2, #0
 80091d6:	4b3e      	ldr	r3, [pc, #248]	; (80092d0 <__kernel_rem_pio2+0x2f4>)
 80091d8:	4620      	mov	r0, r4
 80091da:	4629      	mov	r1, r5
 80091dc:	f7f7 f9e0 	bl	80005a0 <__aeabi_dmul>
 80091e0:	f7f7 fc78 	bl	8000ad4 <__aeabi_d2iz>
 80091e4:	f7f7 f972 	bl	80004cc <__aeabi_i2d>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091f0:	2200      	movs	r2, #0
 80091f2:	4b38      	ldr	r3, [pc, #224]	; (80092d4 <__kernel_rem_pio2+0x2f8>)
 80091f4:	f7f7 f9d4 	bl	80005a0 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f816 	bl	8000230 <__aeabi_dsub>
 8009204:	f7f7 fc66 	bl	8000ad4 <__aeabi_d2iz>
 8009208:	9b00      	ldr	r3, [sp, #0]
 800920a:	f109 39ff 	add.w	r9, r9, #4294967295
 800920e:	f843 0b04 	str.w	r0, [r3], #4
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009218:	e9d8 2300 	ldrd	r2, r3, [r8]
 800921c:	f7f7 f80a 	bl	8000234 <__adddf3>
 8009220:	4604      	mov	r4, r0
 8009222:	460d      	mov	r5, r1
 8009224:	e75f      	b.n	80090e6 <__kernel_rem_pio2+0x10a>
 8009226:	d105      	bne.n	8009234 <__kernel_rem_pio2+0x258>
 8009228:	1e73      	subs	r3, r6, #1
 800922a:	aa0c      	add	r2, sp, #48	; 0x30
 800922c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009230:	15c3      	asrs	r3, r0, #23
 8009232:	e79b      	b.n	800916c <__kernel_rem_pio2+0x190>
 8009234:	2200      	movs	r2, #0
 8009236:	4b28      	ldr	r3, [pc, #160]	; (80092d8 <__kernel_rem_pio2+0x2fc>)
 8009238:	f7f7 fc38 	bl	8000aac <__aeabi_dcmpge>
 800923c:	2800      	cmp	r0, #0
 800923e:	d13e      	bne.n	80092be <__kernel_rem_pio2+0x2e2>
 8009240:	9000      	str	r0, [sp, #0]
 8009242:	2200      	movs	r2, #0
 8009244:	2300      	movs	r3, #0
 8009246:	4640      	mov	r0, r8
 8009248:	4649      	mov	r1, r9
 800924a:	f7f7 fc11 	bl	8000a70 <__aeabi_dcmpeq>
 800924e:	2800      	cmp	r0, #0
 8009250:	f000 80b1 	beq.w	80093b6 <__kernel_rem_pio2+0x3da>
 8009254:	1e74      	subs	r4, r6, #1
 8009256:	4623      	mov	r3, r4
 8009258:	2200      	movs	r2, #0
 800925a:	9902      	ldr	r1, [sp, #8]
 800925c:	428b      	cmp	r3, r1
 800925e:	da5f      	bge.n	8009320 <__kernel_rem_pio2+0x344>
 8009260:	2a00      	cmp	r2, #0
 8009262:	d074      	beq.n	800934e <__kernel_rem_pio2+0x372>
 8009264:	ab0c      	add	r3, sp, #48	; 0x30
 8009266:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800926a:	f1ab 0b18 	sub.w	fp, fp, #24
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 809f 	beq.w	80093b2 <__kernel_rem_pio2+0x3d6>
 8009274:	465a      	mov	r2, fp
 8009276:	2000      	movs	r0, #0
 8009278:	4914      	ldr	r1, [pc, #80]	; (80092cc <__kernel_rem_pio2+0x2f0>)
 800927a:	f000 fb29 	bl	80098d0 <scalbn>
 800927e:	46a2      	mov	sl, r4
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	f04f 0800 	mov.w	r8, #0
 8009288:	ab70      	add	r3, sp, #448	; 0x1c0
 800928a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80092d0 <__kernel_rem_pio2+0x2f4>
 800928e:	00e5      	lsls	r5, r4, #3
 8009290:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009294:	f1ba 0f00 	cmp.w	sl, #0
 8009298:	f280 80c3 	bge.w	8009422 <__kernel_rem_pio2+0x446>
 800929c:	4626      	mov	r6, r4
 800929e:	2e00      	cmp	r6, #0
 80092a0:	f2c0 80f5 	blt.w	800948e <__kernel_rem_pio2+0x4b2>
 80092a4:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <__kernel_rem_pio2+0x300>)
 80092a6:	f04f 0a00 	mov.w	sl, #0
 80092aa:	9307      	str	r3, [sp, #28]
 80092ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80092ae:	f04f 0b00 	mov.w	fp, #0
 80092b2:	f04f 0800 	mov.w	r8, #0
 80092b6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80092ba:	1ba7      	subs	r7, r4, r6
 80092bc:	e0db      	b.n	8009476 <__kernel_rem_pio2+0x49a>
 80092be:	2302      	movs	r3, #2
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	e757      	b.n	8009174 <__kernel_rem_pio2+0x198>
 80092c4:	08009d18 	.word	0x08009d18
 80092c8:	40200000 	.word	0x40200000
 80092cc:	3ff00000 	.word	0x3ff00000
 80092d0:	3e700000 	.word	0x3e700000
 80092d4:	41700000 	.word	0x41700000
 80092d8:	3fe00000 	.word	0x3fe00000
 80092dc:	08009cd8 	.word	0x08009cd8
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	b944      	cbnz	r4, 80092f6 <__kernel_rem_pio2+0x31a>
 80092e4:	b11b      	cbz	r3, 80092ee <__kernel_rem_pio2+0x312>
 80092e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	2301      	movs	r3, #1
 80092ee:	461c      	mov	r4, r3
 80092f0:	3201      	adds	r2, #1
 80092f2:	3704      	adds	r7, #4
 80092f4:	e745      	b.n	8009182 <__kernel_rem_pio2+0x1a6>
 80092f6:	1acb      	subs	r3, r1, r3
 80092f8:	603b      	str	r3, [r7, #0]
 80092fa:	4623      	mov	r3, r4
 80092fc:	e7f7      	b.n	80092ee <__kernel_rem_pio2+0x312>
 80092fe:	1e72      	subs	r2, r6, #1
 8009300:	ab0c      	add	r3, sp, #48	; 0x30
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800930a:	a90c      	add	r1, sp, #48	; 0x30
 800930c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009310:	e745      	b.n	800919e <__kernel_rem_pio2+0x1c2>
 8009312:	1e72      	subs	r2, r6, #1
 8009314:	ab0c      	add	r3, sp, #48	; 0x30
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800931e:	e7f4      	b.n	800930a <__kernel_rem_pio2+0x32e>
 8009320:	a90c      	add	r1, sp, #48	; 0x30
 8009322:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009326:	3b01      	subs	r3, #1
 8009328:	430a      	orrs	r2, r1
 800932a:	e796      	b.n	800925a <__kernel_rem_pio2+0x27e>
 800932c:	3401      	adds	r4, #1
 800932e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009332:	2a00      	cmp	r2, #0
 8009334:	d0fa      	beq.n	800932c <__kernel_rem_pio2+0x350>
 8009336:	9b08      	ldr	r3, [sp, #32]
 8009338:	f106 0801 	add.w	r8, r6, #1
 800933c:	18f5      	adds	r5, r6, r3
 800933e:	ab20      	add	r3, sp, #128	; 0x80
 8009340:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009344:	4434      	add	r4, r6
 8009346:	4544      	cmp	r4, r8
 8009348:	da04      	bge.n	8009354 <__kernel_rem_pio2+0x378>
 800934a:	4626      	mov	r6, r4
 800934c:	e6bf      	b.n	80090ce <__kernel_rem_pio2+0xf2>
 800934e:	2401      	movs	r4, #1
 8009350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009352:	e7ec      	b.n	800932e <__kernel_rem_pio2+0x352>
 8009354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009356:	f04f 0900 	mov.w	r9, #0
 800935a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800935e:	f7f7 f8b5 	bl	80004cc <__aeabi_i2d>
 8009362:	2600      	movs	r6, #0
 8009364:	2700      	movs	r7, #0
 8009366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009368:	e9c5 0100 	strd	r0, r1, [r5]
 800936c:	3b08      	subs	r3, #8
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	9504      	str	r5, [sp, #16]
 8009372:	9b07      	ldr	r3, [sp, #28]
 8009374:	4599      	cmp	r9, r3
 8009376:	dd05      	ble.n	8009384 <__kernel_rem_pio2+0x3a8>
 8009378:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800937c:	f108 0801 	add.w	r8, r8, #1
 8009380:	3508      	adds	r5, #8
 8009382:	e7e0      	b.n	8009346 <__kernel_rem_pio2+0x36a>
 8009384:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009388:	9900      	ldr	r1, [sp, #0]
 800938a:	f109 0901 	add.w	r9, r9, #1
 800938e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009392:	9100      	str	r1, [sp, #0]
 8009394:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8009398:	f8cd c010 	str.w	ip, [sp, #16]
 800939c:	f7f7 f900 	bl	80005a0 <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4630      	mov	r0, r6
 80093a6:	4639      	mov	r1, r7
 80093a8:	f7f6 ff44 	bl	8000234 <__adddf3>
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	e7df      	b.n	8009372 <__kernel_rem_pio2+0x396>
 80093b2:	3c01      	subs	r4, #1
 80093b4:	e756      	b.n	8009264 <__kernel_rem_pio2+0x288>
 80093b6:	f1cb 0200 	rsb	r2, fp, #0
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	f000 fa87 	bl	80098d0 <scalbn>
 80093c2:	2200      	movs	r2, #0
 80093c4:	4ba4      	ldr	r3, [pc, #656]	; (8009658 <__kernel_rem_pio2+0x67c>)
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	f7f7 fb6f 	bl	8000aac <__aeabi_dcmpge>
 80093ce:	b1f8      	cbz	r0, 8009410 <__kernel_rem_pio2+0x434>
 80093d0:	2200      	movs	r2, #0
 80093d2:	4ba2      	ldr	r3, [pc, #648]	; (800965c <__kernel_rem_pio2+0x680>)
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 f8e2 	bl	80005a0 <__aeabi_dmul>
 80093dc:	f7f7 fb7a 	bl	8000ad4 <__aeabi_d2iz>
 80093e0:	4607      	mov	r7, r0
 80093e2:	f7f7 f873 	bl	80004cc <__aeabi_i2d>
 80093e6:	2200      	movs	r2, #0
 80093e8:	4b9b      	ldr	r3, [pc, #620]	; (8009658 <__kernel_rem_pio2+0x67c>)
 80093ea:	f7f7 f8d9 	bl	80005a0 <__aeabi_dmul>
 80093ee:	460b      	mov	r3, r1
 80093f0:	4602      	mov	r2, r0
 80093f2:	4629      	mov	r1, r5
 80093f4:	4620      	mov	r0, r4
 80093f6:	f7f6 ff1b 	bl	8000230 <__aeabi_dsub>
 80093fa:	f7f7 fb6b 	bl	8000ad4 <__aeabi_d2iz>
 80093fe:	1c74      	adds	r4, r6, #1
 8009400:	ab0c      	add	r3, sp, #48	; 0x30
 8009402:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009406:	f10b 0b18 	add.w	fp, fp, #24
 800940a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800940e:	e731      	b.n	8009274 <__kernel_rem_pio2+0x298>
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f7 fb5e 	bl	8000ad4 <__aeabi_d2iz>
 8009418:	ab0c      	add	r3, sp, #48	; 0x30
 800941a:	4634      	mov	r4, r6
 800941c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009420:	e728      	b.n	8009274 <__kernel_rem_pio2+0x298>
 8009422:	ab0c      	add	r3, sp, #48	; 0x30
 8009424:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009428:	f7f7 f850 	bl	80004cc <__aeabi_i2d>
 800942c:	4632      	mov	r2, r6
 800942e:	463b      	mov	r3, r7
 8009430:	f7f7 f8b6 	bl	80005a0 <__aeabi_dmul>
 8009434:	4642      	mov	r2, r8
 8009436:	e86b 0102 	strd	r0, r1, [fp], #-8
 800943a:	464b      	mov	r3, r9
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f7 f8ae 	bl	80005a0 <__aeabi_dmul>
 8009444:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009448:	4606      	mov	r6, r0
 800944a:	460f      	mov	r7, r1
 800944c:	e722      	b.n	8009294 <__kernel_rem_pio2+0x2b8>
 800944e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009452:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009456:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800945a:	f8cd c01c 	str.w	ip, [sp, #28]
 800945e:	f7f7 f89f 	bl	80005a0 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4650      	mov	r0, sl
 8009468:	4659      	mov	r1, fp
 800946a:	f7f6 fee3 	bl	8000234 <__adddf3>
 800946e:	4682      	mov	sl, r0
 8009470:	468b      	mov	fp, r1
 8009472:	f108 0801 	add.w	r8, r8, #1
 8009476:	9b02      	ldr	r3, [sp, #8]
 8009478:	4598      	cmp	r8, r3
 800947a:	dc01      	bgt.n	8009480 <__kernel_rem_pio2+0x4a4>
 800947c:	45b8      	cmp	r8, r7
 800947e:	dde6      	ble.n	800944e <__kernel_rem_pio2+0x472>
 8009480:	ab48      	add	r3, sp, #288	; 0x120
 8009482:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009486:	e9c7 ab00 	strd	sl, fp, [r7]
 800948a:	3e01      	subs	r6, #1
 800948c:	e707      	b.n	800929e <__kernel_rem_pio2+0x2c2>
 800948e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009490:	2b02      	cmp	r3, #2
 8009492:	dc09      	bgt.n	80094a8 <__kernel_rem_pio2+0x4cc>
 8009494:	2b00      	cmp	r3, #0
 8009496:	dc32      	bgt.n	80094fe <__kernel_rem_pio2+0x522>
 8009498:	d05a      	beq.n	8009550 <__kernel_rem_pio2+0x574>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	f003 0007 	and.w	r0, r3, #7
 80094a0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d1f5      	bne.n	800949a <__kernel_rem_pio2+0x4be>
 80094ae:	ab48      	add	r3, sp, #288	; 0x120
 80094b0:	441d      	add	r5, r3
 80094b2:	46aa      	mov	sl, r5
 80094b4:	46a3      	mov	fp, r4
 80094b6:	f1bb 0f00 	cmp.w	fp, #0
 80094ba:	dc76      	bgt.n	80095aa <__kernel_rem_pio2+0x5ce>
 80094bc:	46aa      	mov	sl, r5
 80094be:	46a3      	mov	fp, r4
 80094c0:	f1bb 0f01 	cmp.w	fp, #1
 80094c4:	f300 8090 	bgt.w	80095e8 <__kernel_rem_pio2+0x60c>
 80094c8:	2700      	movs	r7, #0
 80094ca:	463e      	mov	r6, r7
 80094cc:	2c01      	cmp	r4, #1
 80094ce:	f300 80aa 	bgt.w	8009626 <__kernel_rem_pio2+0x64a>
 80094d2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80094d6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80094da:	9b00      	ldr	r3, [sp, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f040 80ac 	bne.w	800963a <__kernel_rem_pio2+0x65e>
 80094e2:	4603      	mov	r3, r0
 80094e4:	462a      	mov	r2, r5
 80094e6:	9806      	ldr	r0, [sp, #24]
 80094e8:	e9c0 2300 	strd	r2, r3, [r0]
 80094ec:	4622      	mov	r2, r4
 80094ee:	460b      	mov	r3, r1
 80094f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80094f4:	463a      	mov	r2, r7
 80094f6:	4633      	mov	r3, r6
 80094f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80094fc:	e7cd      	b.n	800949a <__kernel_rem_pio2+0x4be>
 80094fe:	2000      	movs	r0, #0
 8009500:	46a0      	mov	r8, r4
 8009502:	4601      	mov	r1, r0
 8009504:	ab48      	add	r3, sp, #288	; 0x120
 8009506:	441d      	add	r5, r3
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	da3a      	bge.n	8009584 <__kernel_rem_pio2+0x5a8>
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d03e      	beq.n	8009592 <__kernel_rem_pio2+0x5b6>
 8009514:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009518:	4602      	mov	r2, r0
 800951a:	462b      	mov	r3, r5
 800951c:	9d06      	ldr	r5, [sp, #24]
 800951e:	2601      	movs	r6, #1
 8009520:	e9c5 2300 	strd	r2, r3, [r5]
 8009524:	460b      	mov	r3, r1
 8009526:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800952a:	f7f6 fe81 	bl	8000230 <__aeabi_dsub>
 800952e:	4684      	mov	ip, r0
 8009530:	460f      	mov	r7, r1
 8009532:	ad48      	add	r5, sp, #288	; 0x120
 8009534:	42b4      	cmp	r4, r6
 8009536:	f105 0508 	add.w	r5, r5, #8
 800953a:	da2c      	bge.n	8009596 <__kernel_rem_pio2+0x5ba>
 800953c:	9b00      	ldr	r3, [sp, #0]
 800953e:	b10b      	cbz	r3, 8009544 <__kernel_rem_pio2+0x568>
 8009540:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009544:	4662      	mov	r2, ip
 8009546:	463b      	mov	r3, r7
 8009548:	9906      	ldr	r1, [sp, #24]
 800954a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800954e:	e7a4      	b.n	800949a <__kernel_rem_pio2+0x4be>
 8009550:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009552:	ab48      	add	r3, sp, #288	; 0x120
 8009554:	4637      	mov	r7, r6
 8009556:	441d      	add	r5, r3
 8009558:	2c00      	cmp	r4, #0
 800955a:	da09      	bge.n	8009570 <__kernel_rem_pio2+0x594>
 800955c:	9b00      	ldr	r3, [sp, #0]
 800955e:	b10b      	cbz	r3, 8009564 <__kernel_rem_pio2+0x588>
 8009560:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009564:	4632      	mov	r2, r6
 8009566:	463b      	mov	r3, r7
 8009568:	9906      	ldr	r1, [sp, #24]
 800956a:	e9c1 2300 	strd	r2, r3, [r1]
 800956e:	e794      	b.n	800949a <__kernel_rem_pio2+0x4be>
 8009570:	4630      	mov	r0, r6
 8009572:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009576:	4639      	mov	r1, r7
 8009578:	f7f6 fe5c 	bl	8000234 <__adddf3>
 800957c:	3c01      	subs	r4, #1
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	e7e9      	b.n	8009558 <__kernel_rem_pio2+0x57c>
 8009584:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009588:	f7f6 fe54 	bl	8000234 <__adddf3>
 800958c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009590:	e7ba      	b.n	8009508 <__kernel_rem_pio2+0x52c>
 8009592:	460d      	mov	r5, r1
 8009594:	e7c0      	b.n	8009518 <__kernel_rem_pio2+0x53c>
 8009596:	4660      	mov	r0, ip
 8009598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800959c:	4639      	mov	r1, r7
 800959e:	f7f6 fe49 	bl	8000234 <__adddf3>
 80095a2:	3601      	adds	r6, #1
 80095a4:	4684      	mov	ip, r0
 80095a6:	460f      	mov	r7, r1
 80095a8:	e7c4      	b.n	8009534 <__kernel_rem_pio2+0x558>
 80095aa:	e9da 6700 	ldrd	r6, r7, [sl]
 80095ae:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80095b2:	4632      	mov	r2, r6
 80095b4:	463b      	mov	r3, r7
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f6 fe3b 	bl	8000234 <__adddf3>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c6:	4640      	mov	r0, r8
 80095c8:	4649      	mov	r1, r9
 80095ca:	f7f6 fe31 	bl	8000230 <__aeabi_dsub>
 80095ce:	4632      	mov	r2, r6
 80095d0:	463b      	mov	r3, r7
 80095d2:	f7f6 fe2f 	bl	8000234 <__adddf3>
 80095d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095da:	e86a 0102 	strd	r0, r1, [sl], #-8
 80095de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095e2:	e9ca 2300 	strd	r2, r3, [sl]
 80095e6:	e766      	b.n	80094b6 <__kernel_rem_pio2+0x4da>
 80095e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80095ec:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f6 fe1c 	bl	8000234 <__adddf3>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	f7f6 fe12 	bl	8000230 <__aeabi_dsub>
 800960c:	4642      	mov	r2, r8
 800960e:	464b      	mov	r3, r9
 8009610:	f7f6 fe10 	bl	8000234 <__adddf3>
 8009614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009618:	e86a 0102 	strd	r0, r1, [sl], #-8
 800961c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009620:	e9ca 2300 	strd	r2, r3, [sl]
 8009624:	e74c      	b.n	80094c0 <__kernel_rem_pio2+0x4e4>
 8009626:	4638      	mov	r0, r7
 8009628:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800962c:	4631      	mov	r1, r6
 800962e:	f7f6 fe01 	bl	8000234 <__adddf3>
 8009632:	3c01      	subs	r4, #1
 8009634:	4607      	mov	r7, r0
 8009636:	460e      	mov	r6, r1
 8009638:	e748      	b.n	80094cc <__kernel_rem_pio2+0x4f0>
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009640:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009644:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009648:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800964c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009650:	601d      	str	r5, [r3, #0]
 8009652:	615e      	str	r6, [r3, #20]
 8009654:	e721      	b.n	800949a <__kernel_rem_pio2+0x4be>
 8009656:	bf00      	nop
 8009658:	41700000 	.word	0x41700000
 800965c:	3e700000 	.word	0x3e700000

08009660 <__kernel_sin>:
 8009660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	e9cd 2300 	strd	r2, r3, [sp]
 800966a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800966e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009672:	4682      	mov	sl, r0
 8009674:	460c      	mov	r4, r1
 8009676:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009678:	da03      	bge.n	8009682 <__kernel_sin+0x22>
 800967a:	f7f7 fa2b 	bl	8000ad4 <__aeabi_d2iz>
 800967e:	2800      	cmp	r0, #0
 8009680:	d050      	beq.n	8009724 <__kernel_sin+0xc4>
 8009682:	4652      	mov	r2, sl
 8009684:	4623      	mov	r3, r4
 8009686:	4650      	mov	r0, sl
 8009688:	4621      	mov	r1, r4
 800968a:	f7f6 ff89 	bl	80005a0 <__aeabi_dmul>
 800968e:	4606      	mov	r6, r0
 8009690:	460f      	mov	r7, r1
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4650      	mov	r0, sl
 8009698:	4621      	mov	r1, r4
 800969a:	f7f6 ff81 	bl	80005a0 <__aeabi_dmul>
 800969e:	a33e      	add	r3, pc, #248	; (adr r3, 8009798 <__kernel_sin+0x138>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	4680      	mov	r8, r0
 80096a6:	4689      	mov	r9, r1
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f6 ff78 	bl	80005a0 <__aeabi_dmul>
 80096b0:	a33b      	add	r3, pc, #236	; (adr r3, 80097a0 <__kernel_sin+0x140>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 fdbb 	bl	8000230 <__aeabi_dsub>
 80096ba:	4632      	mov	r2, r6
 80096bc:	463b      	mov	r3, r7
 80096be:	f7f6 ff6f 	bl	80005a0 <__aeabi_dmul>
 80096c2:	a339      	add	r3, pc, #228	; (adr r3, 80097a8 <__kernel_sin+0x148>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 fdb4 	bl	8000234 <__adddf3>
 80096cc:	4632      	mov	r2, r6
 80096ce:	463b      	mov	r3, r7
 80096d0:	f7f6 ff66 	bl	80005a0 <__aeabi_dmul>
 80096d4:	a336      	add	r3, pc, #216	; (adr r3, 80097b0 <__kernel_sin+0x150>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 fda9 	bl	8000230 <__aeabi_dsub>
 80096de:	4632      	mov	r2, r6
 80096e0:	463b      	mov	r3, r7
 80096e2:	f7f6 ff5d 	bl	80005a0 <__aeabi_dmul>
 80096e6:	a334      	add	r3, pc, #208	; (adr r3, 80097b8 <__kernel_sin+0x158>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f7f6 fda2 	bl	8000234 <__adddf3>
 80096f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f4:	b9dd      	cbnz	r5, 800972e <__kernel_sin+0xce>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4630      	mov	r0, r6
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f6 ff4f 	bl	80005a0 <__aeabi_dmul>
 8009702:	a32f      	add	r3, pc, #188	; (adr r3, 80097c0 <__kernel_sin+0x160>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f7f6 fd92 	bl	8000230 <__aeabi_dsub>
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	f7f6 ff46 	bl	80005a0 <__aeabi_dmul>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4650      	mov	r0, sl
 800971a:	4621      	mov	r1, r4
 800971c:	f7f6 fd8a 	bl	8000234 <__adddf3>
 8009720:	4682      	mov	sl, r0
 8009722:	460c      	mov	r4, r1
 8009724:	4650      	mov	r0, sl
 8009726:	4621      	mov	r1, r4
 8009728:	b006      	add	sp, #24
 800972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972e:	2200      	movs	r2, #0
 8009730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009734:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <__kernel_sin+0x168>)
 8009736:	f7f6 ff33 	bl	80005a0 <__aeabi_dmul>
 800973a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800973e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009742:	4640      	mov	r0, r8
 8009744:	4649      	mov	r1, r9
 8009746:	f7f6 ff2b 	bl	80005a0 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009752:	f7f6 fd6d 	bl	8000230 <__aeabi_dsub>
 8009756:	4632      	mov	r2, r6
 8009758:	463b      	mov	r3, r7
 800975a:	f7f6 ff21 	bl	80005a0 <__aeabi_dmul>
 800975e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009762:	f7f6 fd65 	bl	8000230 <__aeabi_dsub>
 8009766:	a316      	add	r3, pc, #88	; (adr r3, 80097c0 <__kernel_sin+0x160>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	4606      	mov	r6, r0
 800976e:	460f      	mov	r7, r1
 8009770:	4640      	mov	r0, r8
 8009772:	4649      	mov	r1, r9
 8009774:	f7f6 ff14 	bl	80005a0 <__aeabi_dmul>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	4630      	mov	r0, r6
 800977e:	4639      	mov	r1, r7
 8009780:	f7f6 fd58 	bl	8000234 <__adddf3>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4650      	mov	r0, sl
 800978a:	4621      	mov	r1, r4
 800978c:	f7f6 fd50 	bl	8000230 <__aeabi_dsub>
 8009790:	e7c6      	b.n	8009720 <__kernel_sin+0xc0>
 8009792:	bf00      	nop
 8009794:	f3af 8000 	nop.w
 8009798:	5acfd57c 	.word	0x5acfd57c
 800979c:	3de5d93a 	.word	0x3de5d93a
 80097a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80097a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80097a8:	57b1fe7d 	.word	0x57b1fe7d
 80097ac:	3ec71de3 	.word	0x3ec71de3
 80097b0:	19c161d5 	.word	0x19c161d5
 80097b4:	3f2a01a0 	.word	0x3f2a01a0
 80097b8:	1110f8a6 	.word	0x1110f8a6
 80097bc:	3f811111 	.word	0x3f811111
 80097c0:	55555549 	.word	0x55555549
 80097c4:	3fc55555 	.word	0x3fc55555
 80097c8:	3fe00000 	.word	0x3fe00000
 80097cc:	00000000 	.word	0x00000000

080097d0 <floor>:
 80097d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80097d8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80097dc:	2e13      	cmp	r6, #19
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	4607      	mov	r7, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	4605      	mov	r5, r0
 80097e8:	dc33      	bgt.n	8009852 <floor+0x82>
 80097ea:	2e00      	cmp	r6, #0
 80097ec:	da14      	bge.n	8009818 <floor+0x48>
 80097ee:	a334      	add	r3, pc, #208	; (adr r3, 80098c0 <floor+0xf0>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f7f6 fd1e 	bl	8000234 <__adddf3>
 80097f8:	2200      	movs	r2, #0
 80097fa:	2300      	movs	r3, #0
 80097fc:	f7f7 f960 	bl	8000ac0 <__aeabi_dcmpgt>
 8009800:	b138      	cbz	r0, 8009812 <floor+0x42>
 8009802:	2c00      	cmp	r4, #0
 8009804:	da58      	bge.n	80098b8 <floor+0xe8>
 8009806:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800980a:	431d      	orrs	r5, r3
 800980c:	d001      	beq.n	8009812 <floor+0x42>
 800980e:	2500      	movs	r5, #0
 8009810:	4c2d      	ldr	r4, [pc, #180]	; (80098c8 <floor+0xf8>)
 8009812:	4623      	mov	r3, r4
 8009814:	462f      	mov	r7, r5
 8009816:	e025      	b.n	8009864 <floor+0x94>
 8009818:	4a2c      	ldr	r2, [pc, #176]	; (80098cc <floor+0xfc>)
 800981a:	fa42 f806 	asr.w	r8, r2, r6
 800981e:	ea01 0208 	and.w	r2, r1, r8
 8009822:	4302      	orrs	r2, r0
 8009824:	d01e      	beq.n	8009864 <floor+0x94>
 8009826:	a326      	add	r3, pc, #152	; (adr r3, 80098c0 <floor+0xf0>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fd02 	bl	8000234 <__adddf3>
 8009830:	2200      	movs	r2, #0
 8009832:	2300      	movs	r3, #0
 8009834:	f7f7 f944 	bl	8000ac0 <__aeabi_dcmpgt>
 8009838:	2800      	cmp	r0, #0
 800983a:	d0ea      	beq.n	8009812 <floor+0x42>
 800983c:	2c00      	cmp	r4, #0
 800983e:	bfbe      	ittt	lt
 8009840:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009844:	fa43 f606 	asrlt.w	r6, r3, r6
 8009848:	19a4      	addlt	r4, r4, r6
 800984a:	2500      	movs	r5, #0
 800984c:	ea24 0408 	bic.w	r4, r4, r8
 8009850:	e7df      	b.n	8009812 <floor+0x42>
 8009852:	2e33      	cmp	r6, #51	; 0x33
 8009854:	dd0a      	ble.n	800986c <floor+0x9c>
 8009856:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800985a:	d103      	bne.n	8009864 <floor+0x94>
 800985c:	f7f6 fcea 	bl	8000234 <__adddf3>
 8009860:	4607      	mov	r7, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4638      	mov	r0, r7
 8009866:	4619      	mov	r1, r3
 8009868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986c:	f04f 32ff 	mov.w	r2, #4294967295
 8009870:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009874:	fa22 f808 	lsr.w	r8, r2, r8
 8009878:	ea18 0f00 	tst.w	r8, r0
 800987c:	d0f2      	beq.n	8009864 <floor+0x94>
 800987e:	a310      	add	r3, pc, #64	; (adr r3, 80098c0 <floor+0xf0>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 fcd6 	bl	8000234 <__adddf3>
 8009888:	2200      	movs	r2, #0
 800988a:	2300      	movs	r3, #0
 800988c:	f7f7 f918 	bl	8000ac0 <__aeabi_dcmpgt>
 8009890:	2800      	cmp	r0, #0
 8009892:	d0be      	beq.n	8009812 <floor+0x42>
 8009894:	2c00      	cmp	r4, #0
 8009896:	da02      	bge.n	800989e <floor+0xce>
 8009898:	2e14      	cmp	r6, #20
 800989a:	d103      	bne.n	80098a4 <floor+0xd4>
 800989c:	3401      	adds	r4, #1
 800989e:	ea25 0508 	bic.w	r5, r5, r8
 80098a2:	e7b6      	b.n	8009812 <floor+0x42>
 80098a4:	2301      	movs	r3, #1
 80098a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80098aa:	fa03 f606 	lsl.w	r6, r3, r6
 80098ae:	4435      	add	r5, r6
 80098b0:	42bd      	cmp	r5, r7
 80098b2:	bf38      	it	cc
 80098b4:	18e4      	addcc	r4, r4, r3
 80098b6:	e7f2      	b.n	800989e <floor+0xce>
 80098b8:	2500      	movs	r5, #0
 80098ba:	462c      	mov	r4, r5
 80098bc:	e7a9      	b.n	8009812 <floor+0x42>
 80098be:	bf00      	nop
 80098c0:	8800759c 	.word	0x8800759c
 80098c4:	7e37e43c 	.word	0x7e37e43c
 80098c8:	bff00000 	.word	0xbff00000
 80098cc:	000fffff 	.word	0x000fffff

080098d0 <scalbn>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80098d6:	4604      	mov	r4, r0
 80098d8:	460d      	mov	r5, r1
 80098da:	4617      	mov	r7, r2
 80098dc:	460b      	mov	r3, r1
 80098de:	b996      	cbnz	r6, 8009906 <scalbn+0x36>
 80098e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098e4:	4303      	orrs	r3, r0
 80098e6:	d039      	beq.n	800995c <scalbn+0x8c>
 80098e8:	4b33      	ldr	r3, [pc, #204]	; (80099b8 <scalbn+0xe8>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	f7f6 fe58 	bl	80005a0 <__aeabi_dmul>
 80098f0:	4b32      	ldr	r3, [pc, #200]	; (80099bc <scalbn+0xec>)
 80098f2:	4604      	mov	r4, r0
 80098f4:	429f      	cmp	r7, r3
 80098f6:	460d      	mov	r5, r1
 80098f8:	da0f      	bge.n	800991a <scalbn+0x4a>
 80098fa:	a32b      	add	r3, pc, #172	; (adr r3, 80099a8 <scalbn+0xd8>)
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fe4e 	bl	80005a0 <__aeabi_dmul>
 8009904:	e006      	b.n	8009914 <scalbn+0x44>
 8009906:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800990a:	4296      	cmp	r6, r2
 800990c:	d10a      	bne.n	8009924 <scalbn+0x54>
 800990e:	4602      	mov	r2, r0
 8009910:	f7f6 fc90 	bl	8000234 <__adddf3>
 8009914:	4604      	mov	r4, r0
 8009916:	460d      	mov	r5, r1
 8009918:	e020      	b.n	800995c <scalbn+0x8c>
 800991a:	460b      	mov	r3, r1
 800991c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009920:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009924:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009928:	19b9      	adds	r1, r7, r6
 800992a:	4291      	cmp	r1, r2
 800992c:	dd0e      	ble.n	800994c <scalbn+0x7c>
 800992e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009932:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009936:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800993a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800993e:	4820      	ldr	r0, [pc, #128]	; (80099c0 <scalbn+0xf0>)
 8009940:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009944:	a31a      	add	r3, pc, #104	; (adr r3, 80099b0 <scalbn+0xe0>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	e7d9      	b.n	8009900 <scalbn+0x30>
 800994c:	2900      	cmp	r1, #0
 800994e:	dd08      	ble.n	8009962 <scalbn+0x92>
 8009950:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009958:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009962:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009966:	da12      	bge.n	800998e <scalbn+0xbe>
 8009968:	f24c 3350 	movw	r3, #50000	; 0xc350
 800996c:	429f      	cmp	r7, r3
 800996e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009972:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009976:	dcdc      	bgt.n	8009932 <scalbn+0x62>
 8009978:	a30b      	add	r3, pc, #44	; (adr r3, 80099a8 <scalbn+0xd8>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009982:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009986:	480f      	ldr	r0, [pc, #60]	; (80099c4 <scalbn+0xf4>)
 8009988:	f041 011f 	orr.w	r1, r1, #31
 800998c:	e7b8      	b.n	8009900 <scalbn+0x30>
 800998e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009992:	3136      	adds	r1, #54	; 0x36
 8009994:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009998:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	2200      	movs	r2, #0
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <scalbn+0xf8>)
 80099a4:	e7ac      	b.n	8009900 <scalbn+0x30>
 80099a6:	bf00      	nop
 80099a8:	c2f8f359 	.word	0xc2f8f359
 80099ac:	01a56e1f 	.word	0x01a56e1f
 80099b0:	8800759c 	.word	0x8800759c
 80099b4:	7e37e43c 	.word	0x7e37e43c
 80099b8:	43500000 	.word	0x43500000
 80099bc:	ffff3cb0 	.word	0xffff3cb0
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	c2f8f359 	.word	0xc2f8f359
 80099c8:	3c900000 	.word	0x3c900000

080099cc <_init>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr

080099d8 <_fini>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr
