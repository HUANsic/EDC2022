
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f40  08008f40  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008f40  08008f40  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f40  08008f40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f40  08008f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  20000074  08008fbc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  08008fbc  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ecb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b13  00000000  00000000  00031f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00035c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035ae  00000000  00000000  00036d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015762  00000000  00000000  0003a33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dcc3  00000000  00000000  0004faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005794  00000000  00000000  000ed7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	08008dc0 	.word	0x08008dc0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	08008dc0 	.word	0x08008dc0

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_frsub>:
 8000a64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	e002      	b.n	8000a70 <__addsf3>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fsub>:
 8000a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a70 <__addsf3>:
 8000a70:	0042      	lsls	r2, r0, #1
 8000a72:	bf1f      	itttt	ne
 8000a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a78:	ea92 0f03 	teqne	r2, r3
 8000a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a84:	d06a      	beq.n	8000b5c <__addsf3+0xec>
 8000a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8e:	bfc1      	itttt	gt
 8000a90:	18d2      	addgt	r2, r2, r3
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	4048      	eorgt	r0, r1
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	bfb8      	it	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	bf88      	it	hi
 8000aa0:	4770      	bxhi	lr
 8000aa2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4249      	negne	r1, r1
 8000ac2:	ea92 0f03 	teq	r2, r3
 8000ac6:	d03f      	beq.n	8000b48 <__addsf3+0xd8>
 8000ac8:	f1a2 0201 	sub.w	r2, r2, #1
 8000acc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad0:	eb10 000c 	adds.w	r0, r0, ip
 8000ad4:	f1c3 0320 	rsb	r3, r3, #32
 8000ad8:	fa01 f103 	lsl.w	r1, r1, r3
 8000adc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__addsf3+0x78>
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aec:	d313      	bcc.n	8000b16 <__addsf3+0xa6>
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d306      	bcc.n	8000b02 <__addsf3+0x92>
 8000af4:	0840      	lsrs	r0, r0, #1
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	f102 0201 	add.w	r2, r2, #1
 8000afe:	2afe      	cmp	r2, #254	; 0xfe
 8000b00:	d251      	bcs.n	8000ba6 <__addsf3+0x136>
 8000b02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0a:	bf08      	it	eq
 8000b0c:	f020 0001 	biceq.w	r0, r0, #1
 8000b10:	ea40 0003 	orr.w	r0, r0, r3
 8000b14:	4770      	bx	lr
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	eb40 0000 	adc.w	r0, r0, r0
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b24:	d2ed      	bcs.n	8000b02 <__addsf3+0x92>
 8000b26:	fab0 fc80 	clz	ip, r0
 8000b2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b36:	bfaa      	itet	ge
 8000b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b3c:	4252      	neglt	r2, r2
 8000b3e:	4318      	orrge	r0, r3
 8000b40:	bfbc      	itt	lt
 8000b42:	40d0      	lsrlt	r0, r2
 8000b44:	4318      	orrlt	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	f092 0f00 	teq	r2, #0
 8000b4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b50:	bf06      	itte	eq
 8000b52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b56:	3201      	addeq	r2, #1
 8000b58:	3b01      	subne	r3, #1
 8000b5a:	e7b5      	b.n	8000ac8 <__addsf3+0x58>
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d021      	beq.n	8000bb0 <__addsf3+0x140>
 8000b6c:	ea92 0f03 	teq	r2, r3
 8000b70:	d004      	beq.n	8000b7c <__addsf3+0x10c>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	bf08      	it	eq
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea90 0f01 	teq	r0, r1
 8000b80:	bf1c      	itt	ne
 8000b82:	2000      	movne	r0, #0
 8000b84:	4770      	bxne	lr
 8000b86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8a:	d104      	bne.n	8000b96 <__addsf3+0x126>
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	bf28      	it	cs
 8000b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9a:	bf3c      	itt	cc
 8000b9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bxcc	lr
 8000ba2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	4770      	bx	lr
 8000bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb4:	bf16      	itet	ne
 8000bb6:	4608      	movne	r0, r1
 8000bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bbc:	4601      	movne	r1, r0
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	bf06      	itte	eq
 8000bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc6:	ea90 0f01 	teqeq	r0, r1
 8000bca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_ui2f>:
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e004      	b.n	8000be0 <__aeabi_i2f+0x8>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_i2f>:
 8000bd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	bf48      	it	mi
 8000bde:	4240      	negmi	r0, r0
 8000be0:	ea5f 0c00 	movs.w	ip, r0
 8000be4:	bf08      	it	eq
 8000be6:	4770      	bxeq	lr
 8000be8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bec:	4601      	mov	r1, r0
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	e01c      	b.n	8000c2e <__aeabi_l2f+0x2a>

08000bf4 <__aeabi_ul2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e00a      	b.n	8000c18 <__aeabi_l2f+0x14>
 8000c02:	bf00      	nop

08000c04 <__aeabi_l2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	d502      	bpl.n	8000c18 <__aeabi_l2f+0x14>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	ea5f 0c01 	movs.w	ip, r1
 8000c1c:	bf02      	ittt	eq
 8000c1e:	4684      	moveq	ip, r0
 8000c20:	4601      	moveq	r1, r0
 8000c22:	2000      	moveq	r0, #0
 8000c24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c28:	bf08      	it	eq
 8000c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c32:	fabc f28c 	clz	r2, ip
 8000c36:	3a08      	subs	r2, #8
 8000c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c3c:	db10      	blt.n	8000c60 <__aeabi_l2f+0x5c>
 8000c3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c50:	fa20 f202 	lsr.w	r2, r0, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f102 0220 	add.w	r2, r2, #32
 8000c64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c70:	fa21 f202 	lsr.w	r2, r1, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fmul>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d06f      	beq.n	8000d78 <__aeabi_fmul+0xf8>
 8000c98:	441a      	add	r2, r3
 8000c9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca6:	d01e      	beq.n	8000ce6 <__aeabi_fmul+0x66>
 8000ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc0:	bf3e      	ittt	cc
 8000cc2:	0049      	lslcc	r1, r1, #1
 8000cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc8:	005b      	lslcc	r3, r3, #1
 8000cca:	ea40 0001 	orr.w	r0, r0, r1
 8000cce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd2:	2afd      	cmp	r2, #253	; 0xfd
 8000cd4:	d81d      	bhi.n	8000d12 <__aeabi_fmul+0x92>
 8000cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	0249      	lsleq	r1, r1, #9
 8000cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfa:	3a7f      	subs	r2, #127	; 0x7f
 8000cfc:	bfc2      	ittt	gt
 8000cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d06:	4770      	bxgt	lr
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	dc5d      	bgt.n	8000dd0 <__aeabi_fmul+0x150>
 8000d14:	f112 0f19 	cmn.w	r2, #25
 8000d18:	bfdc      	itt	le
 8000d1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bxle	lr
 8000d20:	f1c2 0200 	rsb	r2, r2, #0
 8000d24:	0041      	lsls	r1, r0, #1
 8000d26:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2a:	f1c2 0220 	rsb	r2, r2, #32
 8000d2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d36:	f140 0000 	adc.w	r0, r0, #0
 8000d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3e:	bf08      	it	eq
 8000d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d44:	4770      	bx	lr
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0040      	lsleq	r0, r0, #1
 8000d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d56:	3a01      	subeq	r2, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xce>
 8000d5a:	ea40 000c 	orr.w	r0, r0, ip
 8000d5e:	f093 0f00 	teq	r3, #0
 8000d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	bf02      	ittt	eq
 8000d68:	0049      	lsleq	r1, r1, #1
 8000d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6e:	3b01      	subeq	r3, #1
 8000d70:	d0f9      	beq.n	8000d66 <__aeabi_fmul+0xe6>
 8000d72:	ea41 010c 	orr.w	r1, r1, ip
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fmul+0x18>
 8000d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	bf18      	it	ne
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d00a      	beq.n	8000d9e <__aeabi_fmul+0x11e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1d8      	bne.n	8000d46 <__aeabi_fmul+0xc6>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	bf17      	itett	ne
 8000da4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da8:	4608      	moveq	r0, r1
 8000daa:	f091 0f00 	teqne	r1, #0
 8000dae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db2:	d014      	beq.n	8000dde <__aeabi_fmul+0x15e>
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d101      	bne.n	8000dbe <__aeabi_fmul+0x13e>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d10f      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dbe:	ea93 0f0c 	teq	r3, ip
 8000dc2:	d103      	bne.n	8000dcc <__aeabi_fmul+0x14c>
 8000dc4:	024b      	lsls	r3, r1, #9
 8000dc6:	bf18      	it	ne
 8000dc8:	4608      	movne	r0, r1
 8000dca:	d108      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	4770      	bx	lr
 8000dde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fdiv>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d069      	beq.n	8000ed4 <__aeabi_fdiv+0xec>
 8000e00:	eba2 0203 	sub.w	r2, r2, r3
 8000e04:	ea80 0c01 	eor.w	ip, r0, r1
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0e:	d037      	beq.n	8000e80 <__aeabi_fdiv+0x98>
 8000e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf38      	it	cc
 8000e24:	005b      	lslcc	r3, r3, #1
 8000e26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	bf24      	itt	cs
 8000e32:	1a5b      	subcs	r3, r3, r1
 8000e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4a:	bf24      	itt	cs
 8000e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	bf18      	it	ne
 8000e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6a:	d1e0      	bne.n	8000e2e <__aeabi_fdiv+0x46>
 8000e6c:	2afd      	cmp	r2, #253	; 0xfd
 8000e6e:	f63f af50 	bhi.w	8000d12 <__aeabi_fmul+0x92>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e78:	bf08      	it	eq
 8000e7a:	f020 0001 	biceq.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e88:	327f      	adds	r2, #127	; 0x7f
 8000e8a:	bfc2      	ittt	gt
 8000e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e94:	4770      	bxgt	lr
 8000e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	e737      	b.n	8000d12 <__aeabi_fmul+0x92>
 8000ea2:	f092 0f00 	teq	r2, #0
 8000ea6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0040      	lsleq	r0, r0, #1
 8000eae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb2:	3a01      	subeq	r2, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xc2>
 8000eb6:	ea40 000c 	orr.w	r0, r0, ip
 8000eba:	f093 0f00 	teq	r3, #0
 8000ebe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0049      	lsleq	r1, r1, #1
 8000ec6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eca:	3b01      	subeq	r3, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fdiv+0xda>
 8000ece:	ea41 010c 	orr.w	r1, r1, ip
 8000ed2:	e795      	b.n	8000e00 <__aeabi_fdiv+0x18>
 8000ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d108      	bne.n	8000ef0 <__aeabi_fdiv+0x108>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	f47f af7d 	bne.w	8000dde <__aeabi_fmul+0x15e>
 8000ee4:	ea93 0f0c 	teq	r3, ip
 8000ee8:	f47f af70 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e776      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000ef0:	ea93 0f0c 	teq	r3, ip
 8000ef4:	d104      	bne.n	8000f00 <__aeabi_fdiv+0x118>
 8000ef6:	024b      	lsls	r3, r1, #9
 8000ef8:	f43f af4c 	beq.w	8000d94 <__aeabi_fmul+0x114>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e76e      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f04:	bf18      	it	ne
 8000f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	d1ca      	bne.n	8000ea2 <__aeabi_fdiv+0xba>
 8000f0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f10:	f47f af5c 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000f14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f18:	f47f af3c 	bne.w	8000d94 <__aeabi_fmul+0x114>
 8000f1c:	e75f      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f1e:	bf00      	nop

08000f20 <__gesf2>:
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295
 8000f24:	e006      	b.n	8000f34 <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__lesf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	e002      	b.n	8000f34 <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__cmpsf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	bf18      	it	ne
 8000f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4a:	d011      	beq.n	8000f70 <__cmpsf2+0x40>
 8000f4c:	b001      	add	sp, #4
 8000f4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f52:	bf18      	it	ne
 8000f54:	ea90 0f01 	teqne	r0, r1
 8000f58:	bf58      	it	pl
 8000f5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5e:	bf88      	it	hi
 8000f60:	17c8      	asrhi	r0, r1, #31
 8000f62:	bf38      	it	cc
 8000f64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f68:	bf18      	it	ne
 8000f6a:	f040 0001 	orrne.w	r0, r0, #1
 8000f6e:	4770      	bx	lr
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	d102      	bne.n	8000f7c <__cmpsf2+0x4c>
 8000f76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7a:	d105      	bne.n	8000f88 <__cmpsf2+0x58>
 8000f7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f80:	d1e4      	bne.n	8000f4c <__cmpsf2+0x1c>
 8000f82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f86:	d0e1      	beq.n	8000f4c <__cmpsf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cfrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4661      	mov	r1, ip
 8000f96:	e7ff      	b.n	8000f98 <__aeabi_cfcmpeq>

08000f98 <__aeabi_cfcmpeq>:
 8000f98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9a:	f7ff ffc9 	bl	8000f30 <__cmpsf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	bf48      	it	mi
 8000fa2:	f110 0f00 	cmnmi.w	r0, #0
 8000fa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa8 <__aeabi_fcmpeq>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff fff4 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2001      	moveq	r0, #1
 8000fb4:	2000      	movne	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmplt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffea 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmple>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffe0 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fd8:	bf94      	ite	ls
 8000fda:	2001      	movls	r0, #1
 8000fdc:	2000      	movhi	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmpge>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffd2 	bl	8000f90 <__aeabi_cfrcmple>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpgt>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffc8 	bl	8000f90 <__aeabi_cfrcmple>
 8001000:	bf34      	ite	cc
 8001002:	2001      	movcc	r0, #1
 8001004:	2000      	movcs	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_f2uiz>:
 800100c:	0042      	lsls	r2, r0, #1
 800100e:	d20e      	bcs.n	800102e <__aeabi_f2uiz+0x22>
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001014:	d30b      	bcc.n	800102e <__aeabi_f2uiz+0x22>
 8001016:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d409      	bmi.n	8001034 <__aeabi_f2uiz+0x28>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr
 8001034:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001038:	d101      	bne.n	800103e <__aeabi_f2uiz+0x32>
 800103a:	0242      	lsls	r2, r0, #9
 800103c:	d102      	bne.n	8001044 <__aeabi_f2uiz+0x38>
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	4770      	bx	lr
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e026      	b.n	80010ac <huansic_jy62_init+0x60>

	if (!himu->huart)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e020      	b.n	80010ac <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800106a:	2003      	movs	r0, #3
 800106c:	f002 fe98 	bl	8003da0 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	230a      	movs	r3, #10
 8001076:	2203      	movs	r2, #3
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <huansic_jy62_init+0x68>)
 800107a:	f006 f80d 	bl	8007098 <HAL_UART_Transmit>

// instead, just use DMA
	himu->pending_alignment = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3334      	adds	r3, #52	; 0x34
 800108e:	2221      	movs	r2, #33	; 0x21
 8001090:	4619      	mov	r1, r3
 8001092:	f006 f8c3 	bl	800721c <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0204 	bic.w	r2, r2, #4
 80010a8:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000

080010b8 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if (!himu)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e112      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
 80010d2:	e0ed      	b.n	80012b0 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010de:	2b55      	cmp	r3, #85	; 0x55
 80010e0:	d01c      	beq.n	800111c <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3334      	adds	r3, #52	; 0x34
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f006 f861 	bl	80071bc <HAL_UART_Receive_IT>
			if (i) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	3b01      	subs	r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fa69 	bl	80015e0 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800110e:	f002 fe3d 	bl	8003d8c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8001118:	2305      	movs	r3, #5
 800111a:	e0e9      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001126:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	3301      	adds	r3, #1
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	4413      	add	r3, r2
 8001138:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3302      	adds	r3, #2
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	4413      	add	r3, r2
 800114a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	3303      	adds	r3, #3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	4413      	add	r3, r2
 800115c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3304      	adds	r3, #4
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	4413      	add	r3, r2
 800116e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	3305      	adds	r3, #5
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	4413      	add	r3, r2
 8001180:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	3306      	adds	r3, #6
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	4413      	add	r3, r2
 8001192:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	3307      	adds	r3, #7
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011a0:	7b7b      	ldrb	r3, [r7, #13]
 80011a2:	4413      	add	r3, r2
 80011a4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	3308      	adds	r3, #8
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	4413      	add	r3, r2
 80011b6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	3309      	adds	r3, #9
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	4413      	add	r3, r2
 80011c8:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	330a      	adds	r3, #10
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011d6:	7b7a      	ldrb	r2, [r7, #13]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d01c      	beq.n	8001216 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3334      	adds	r3, #52	; 0x34
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f005 ffe4 	bl	80071bc <HAL_UART_Receive_IT>
				if (i) {
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f9ec 	bl	80015e0 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001208:	f002 fdc0 	bl	8003d8c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8001212:	2304      	movs	r3, #4
 8001214:	e06c      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	3301      	adds	r3, #1
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001222:	2b51      	cmp	r3, #81	; 0x51
 8001224:	d105      	bne.n	8001232 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f8c4 	bl	80013b8 <__huansic_jy62_decode_accel>
 8001230:	e038      	b.n	80012a4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800123e:	2b52      	cmp	r3, #82	; 0x52
 8001240:	d105      	bne.n	800124e <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f920 	bl	800148c <__huansic_jy62_decode_omega>
 800124c:	e02a      	b.n	80012a4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800125a:	2b53      	cmp	r3, #83	; 0x53
 800125c:	d105      	bne.n	800126a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f966 	bl	8001534 <__huansic_jy62_decode_theta>
 8001268:	e01c      	b.n	80012a4 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3334      	adds	r3, #52	; 0x34
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f005 ff9d 	bl	80071bc <HAL_UART_Receive_IT>
				if (i) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3b01      	subs	r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f9a5 	bl	80015e0 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001296:	f002 fd79 	bl	8003d8c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80012a0:	2306      	movs	r3, #6
 80012a2:	e025      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	330b      	adds	r3, #11
 80012ae:	73bb      	strb	r3, [r7, #14]
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f67f af0e 	bls.w	80010d4 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 80012b8:	f002 fd68 	bl	8003d8c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 80012c2:	2102      	movs	r1, #2
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f98b 	bl	80015e0 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3334      	adds	r3, #52	; 0x34
 80012d2:	2221      	movs	r2, #33	; 0x21
 80012d4:	4619      	mov	r1, r3
 80012d6:	f005 ffa1 	bl	800721c <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0204 	bic.w	r2, r2, #4
 80012ec:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e029      	b.n	800135e <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001310:	2b55      	cmp	r3, #85	; 0x55
 8001312:	d00d      	beq.n	8001330 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3334      	adds	r3, #52	; 0x34
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f005 ff48 	bl	80071bc <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800132c:	2305      	movs	r3, #5
 800132e:	e016      	b.n	800135e <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3335      	adds	r3, #53	; 0x35
 8001340:	2220      	movs	r2, #32
 8001342:	4619      	mov	r1, r3
 8001344:	f005 ff6a 	bl	800721c <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0204 	bic.w	r2, r2, #4
 800135a:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 800135c:	2300      	movs	r3, #0
	}
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3334      	adds	r3, #52	; 0x34
 800137e:	2201      	movs	r2, #1
 8001380:	4619      	mov	r1, r3
 8001382:	f005 ff1b 	bl	80071bc <HAL_UART_Receive_IT>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3334      	adds	r3, #52	; 0x34
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	f005 ff07 	bl	80071bc <HAL_UART_Receive_IT>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e050      	b.n	800146c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	1cd9      	adds	r1, r3, #3
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	440b      	add	r3, r1
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013e6:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80013e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	3301      	adds	r3, #1
 80013f4:	0059      	lsls	r1, r3, #1
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	440b      	add	r3, r1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800140c:	b21a      	sxth	r2, r3
 800140e:	89bb      	ldrh	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8001414:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbdd 	bl	8000bd8 <__aeabi_i2f>
 800141e:	4603      	mov	r3, r0
 8001420:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fc2b 	bl	8000c80 <__aeabi_fmul>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f85f 	bl	80004f0 <__aeabi_f2d>
 8001432:	a313      	add	r3, pc, #76	; (adr r3, 8001480 <__huansic_jy62_decode_accel+0xc8>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f8b2 	bl	80005a0 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <__huansic_jy62_decode_accel+0xd0>)
 800144a:	f7ff f9d3 	bl	80007f4 <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	7bfc      	ldrb	r4, [r7, #15]
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fab4 	bl	80009c4 <__aeabi_d2f>
 800145c:	4601      	mov	r1, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	1ca2      	adds	r2, r4, #2
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d9ab      	bls.n	80013ca <__huansic_jy62_decode_accel+0x12>
	}
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	9999999a 	.word	0x9999999a
 8001484:	40239999 	.word	0x40239999
 8001488:	40e00000 	.word	0x40e00000

0800148c <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e03f      	b.n	800151e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	1cd9      	adds	r1, r3, #3
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ba:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80014bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3301      	adds	r3, #1
 80014c8:	0059      	lsls	r1, r3, #1
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 80014e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb73 	bl	8000bd8 <__aeabi_i2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	490e      	ldr	r1, [pc, #56]	; (8001530 <__huansic_jy62_decode_omega+0xa4>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fbc2 	bl	8000c80 <__aeabi_fmul>
 80014fc:	4603      	mov	r3, r0
 80014fe:	7bfc      	ldrb	r4, [r7, #15]
 8001500:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fc6f 	bl	8000de8 <__aeabi_fdiv>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	1d23      	adds	r3, r4, #4
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d9bc      	bls.n	800149e <__huansic_jy62_decode_omega+0x12>
	}
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	44fa0000 	.word	0x44fa0000

08001534 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e03f      	b.n	80015c6 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	1cd9      	adds	r1, r3, #3
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	440b      	add	r3, r1
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001562:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	0059      	lsls	r1, r3, #1
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	440b      	add	r3, r1
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001588:	b21a      	sxth	r2, r3
 800158a:	89bb      	ldrh	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 8001590:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fb1f 	bl	8000bd8 <__aeabi_i2f>
 800159a:	4603      	mov	r3, r0
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <__huansic_jy62_decode_theta+0xa4>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb6e 	bl	8000c80 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	7bfc      	ldrb	r4, [r7, #15]
 80015a8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fc1b 	bl	8000de8 <__aeabi_fdiv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f104 0208 	add.w	r2, r4, #8
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	3301      	adds	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d9bc      	bls.n	8001546 <__huansic_jy62_decode_theta+0x12>
	}
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	43340000 	.word	0x43340000
 80015dc:	00000000 	.word	0x00000000

080015e0 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	3308      	adds	r3, #8
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001602:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8001604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	3309      	adds	r3, #9
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001622:	b21a      	sxth	r2, r3
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	4313      	orrs	r3, r2
 8001628:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 800162a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fad2 	bl	8000bd8 <__aeabi_i2f>
 8001634:	4603      	mov	r3, r0
 8001636:	4910      	ldr	r1, [pc, #64]	; (8001678 <__huansic_jy62_decode_temp+0x98>)
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fbd5 	bl	8000de8 <__aeabi_fdiv>
 800163e:	4603      	mov	r3, r0
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff55 	bl	80004f0 <__aeabi_f2d>
 8001646:	a30a      	add	r3, pc, #40	; (adr r3, 8001670 <__huansic_jy62_decode_temp+0x90>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fdf2 	bl	8000234 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff f9b4 	bl	80009c4 <__aeabi_d2f>
 800165c:	4602      	mov	r2, r0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	0a3d70a4 	.word	0x0a3d70a4
 8001674:	404243d7 	.word	0x404243d7
 8001678:	43aa0000 	.word	0x43aa0000

0800167c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
	...

08001690 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	d101      	bne.n	80016a8 <huansic_order_new+0x18>
		return 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e046      	b.n	8001736 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e017      	b.n	80016de <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	4923      	ldr	r1, [pc, #140]	; (8001740 <huansic_order_new+0xb0>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3310      	adds	r3, #16
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <huansic_order_new+0xb0>)
 80016d4:	4413      	add	r3, r2
 80016d6:	e02e      	b.n	8001736 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	3301      	adds	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b3b      	cmp	r3, #59	; 0x3b
 80016e2:	d9e4      	bls.n	80016ae <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e021      	b.n	800172e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	4914      	ldr	r1, [pc, #80]	; (8001740 <huansic_order_new+0xb0>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	3310      	adds	r3, #16
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d112      	bne.n	8001728 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <huansic_order_new+0xb0>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4403      	add	r3, r0
 8001714:	3310      	adds	r3, #16
 8001716:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <huansic_order_new+0xb0>)
 8001724:	4413      	add	r3, r2
 8001726:	e006      	b.n	8001736 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b3b      	cmp	r3, #59	; 0x3b
 8001732:	d9da      	bls.n	80016ea <huansic_order_new+0x5a>
		}
	}

	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000090 	.word	0x20000090

08001744 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d103      	bne.n	800175e <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff90 	bl	800167c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 800175c:	e003      	b.n	8001766 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	611a      	str	r2, [r3, #16]
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <huansic_motor_init+0x1c>
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <huansic_motor_init+0x168>)
 8001782:	4a56      	ldr	r2, [pc, #344]	; (80018dc <huansic_motor_init+0x16c>)
 8001784:	210c      	movs	r1, #12
 8001786:	4856      	ldr	r0, [pc, #344]	; (80018e0 <huansic_motor_init+0x170>)
 8001788:	f006 faca 	bl	8007d20 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <huansic_motor_init+0x30>
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <huansic_motor_init+0x174>)
 8001796:	4a51      	ldr	r2, [pc, #324]	; (80018dc <huansic_motor_init+0x16c>)
 8001798:	210d      	movs	r1, #13
 800179a:	4851      	ldr	r0, [pc, #324]	; (80018e0 <huansic_motor_init+0x170>)
 800179c:	f006 fac0 	bl	8007d20 <__assert_func>
	assert(hmotor->dt);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fbfd 	bl	8000fa8 <__aeabi_fcmpeq>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <huansic_motor_init+0x50>
 80017b4:	4b4c      	ldr	r3, [pc, #304]	; (80018e8 <huansic_motor_init+0x178>)
 80017b6:	4a49      	ldr	r2, [pc, #292]	; (80018dc <huansic_motor_init+0x16c>)
 80017b8:	210e      	movs	r1, #14
 80017ba:	4849      	ldr	r0, [pc, #292]	; (80018e0 <huansic_motor_init+0x170>)
 80017bc:	f006 fab0 	bl	8007d20 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
 800180a:	e01c      	b.n	8001846 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d105      	bne.n	8001820 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
 800181e:	e012      	b.n	8001846 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d105      	bne.n	8001834 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
 8001832:	e008      	b.n	8001846 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d104      	bne.n	8001846 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d026      	beq.n	800189c <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
 8001860:	e01c      	b.n	800189c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b04      	cmp	r3, #4
 8001868:	d105      	bne.n	8001876 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
 8001874:	e012      	b.n	800189c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d105      	bne.n	800188a <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
 8001888:	e008      	b.n	800189c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d104      	bne.n	800189c <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	213c      	movs	r1, #60	; 0x3c
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fcb6 	bl	8006214 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f004 fb52 	bl	8005f5c <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f004 fb46 	bl	8005f5c <HAL_TIM_PWM_Start>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08008dd8 	.word	0x08008dd8
 80018dc:	08008e40 	.word	0x08008e40
 80018e0:	08008de8 	.word	0x08008de8
 80018e4:	08008e08 	.word	0x08008e08
 80018e8:	08008e1c 	.word	0x08008e1c

080018ec <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8001908:	8afb      	ldrh	r3, [r7, #22]
 800190a:	425b      	negs	r3, r3
 800190c:	b29b      	uxth	r3, r3
 800190e:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8001910:	8afa      	ldrh	r2, [r7, #22]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 800191c:	8afa      	ldrh	r2, [r7, #22]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001922:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f956 	bl	8000bd8 <__aeabi_i2f>
 800192c:	4602      	mov	r2, r0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f7ff fa57 	bl	8000de8 <__aeabi_fdiv>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff f88b 	bl	8000a6c <__aeabi_fsub>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff f886 	bl	8000a6c <__aeabi_fsub>
 8001960:	4603      	mov	r3, r0
 8001962:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f7ff f87c 	bl	8000a6c <__aeabi_fsub>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff f872 	bl	8000a70 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff f96e 	bl	8000c80 <__aeabi_fmul>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461c      	mov	r4, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7ff f964 	bl	8000c80 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4619      	mov	r1, r3
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff f857 	bl	8000a70 <__addsf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff f957 	bl	8000c80 <__aeabi_fmul>
 80019d2:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80019d4:	4619      	mov	r1, r3
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff f84a 	bl	8000a70 <__addsf3>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 80019e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fb07 	bl	8000ff8 <__aeabi_fcmpgt>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <huansic_motor_pid+0x10a>
 80019f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019f4:	e009      	b.n	8001a0a <huansic_motor_pid+0x11e>
 80019f6:	4954      	ldr	r1, [pc, #336]	; (8001b48 <huansic_motor_pid+0x25c>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fadf 	bl	8000fbc <__aeabi_fcmplt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <huansic_motor_pid+0x11c>
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <huansic_motor_pid+0x25c>)
 8001a06:	e000      	b.n	8001a0a <huansic_motor_pid+0x11e>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff faf1 	bl	8000ff8 <__aeabi_fcmpgt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d019      	beq.n	8001a50 <huansic_motor_pid+0x164>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f8d0 	bl	8000bd0 <__aeabi_ui2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff f923 	bl	8000c80 <__aeabi_fmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f007 f999 	bl	8008d74 <roundf>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fae1 	bl	800100c <__aeabi_f2uiz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	e000      	b.n	8001a52 <huansic_motor_pid+0x166>
 8001a50:	2300      	movs	r3, #0
 8001a52:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001a54:	f04f 0100 	mov.w	r1, #0
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff faaf 	bl	8000fbc <__aeabi_fcmplt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d019      	beq.n	8001a98 <huansic_motor_pid+0x1ac>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f8ac 	bl	8000bd0 <__aeabi_ui2f>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff f8ff 	bl	8000c80 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 f975 	bl	8008d74 <roundf>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fabd 	bl	800100c <__aeabi_f2uiz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	e000      	b.n	8001a9a <huansic_motor_pid+0x1ae>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <huansic_motor_pid+0x1c4>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	897a      	ldrh	r2, [r7, #10]
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
 8001aae:	e01c      	b.n	8001aea <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d105      	bne.n	8001ac4 <huansic_motor_pid+0x1d8>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	897a      	ldrh	r2, [r7, #10]
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac2:	e012      	b.n	8001aea <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d105      	bne.n	8001ad8 <huansic_motor_pid+0x1ec>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	897a      	ldrh	r2, [r7, #10]
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ad6:	e008      	b.n	8001aea <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b0c      	cmp	r3, #12
 8001ade:	d104      	bne.n	8001aea <huansic_motor_pid+0x1fe>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	897a      	ldrh	r2, [r7, #10]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d026      	beq.n	8001b40 <huansic_motor_pid+0x254>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <huansic_motor_pid+0x21a>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001b04:	e01c      	b.n	8001b40 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d105      	bne.n	8001b1a <huansic_motor_pid+0x22e>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b18:	e012      	b.n	8001b40 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d105      	bne.n	8001b2e <huansic_motor_pid+0x242>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b2c:	e008      	b.n	8001b40 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d104      	bne.n	8001b40 <huansic_motor_pid+0x254>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	893a      	ldrh	r2, [r7, #8]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	bf800000 	.word	0xbf800000

08001b4c <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]

}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2206      	movs	r2, #6
 8001b6c:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f103 010a 	add.w	r1, r3, #10
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7a5b      	ldrb	r3, [r3, #9]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f005 fb4c 	bl	800721c <HAL_UART_Receive_DMA>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7a99      	ldrb	r1, [r3, #10]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7adb      	ldrb	r3, [r3, #11]
 8001ba0:	404b      	eors	r3, r1
 8001ba2:	b2d9      	uxtb	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b1b      	ldrb	r3, [r3, #12]
 8001ba8:	404b      	eors	r3, r1
 8001baa:	b2d9      	uxtb	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7b5b      	ldrb	r3, [r3, #13]
 8001bb0:	404b      	eors	r3, r1
 8001bb2:	b2d9      	uxtb	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b9b      	ldrb	r3, [r3, #14]
 8001bb8:	404b      	eors	r3, r1
 8001bba:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e01d      	b.n	8001c00 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7a9b      	ldrb	r3, [r3, #10]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <huansic_xb_decodeHeader+0x4c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7a9b      	ldrb	r3, [r3, #10]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d001      	beq.n	8001bd8 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e013      	b.n	8001c00 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7a9a      	ldrb	r2, [r3, #10]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7b9a      	ldrb	r2, [r3, #14]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f103 010a 	add.w	r1, r3, #10
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a5b      	ldrb	r3, [r3, #9]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f005 fb0f 	bl	800721c <HAL_UART_Receive_DMA>
	return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	76fb      	strb	r3, [r7, #27]
 8001c14:	2300      	movs	r3, #0
 8001c16:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7a1b      	ldrb	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f040 816d 	bne.w	8001efc <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001c22:	7f7b      	ldrb	r3, [r7, #29]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	777a      	strb	r2, [r7, #29]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	7a9a      	ldrb	r2, [r3, #10]
 8001c30:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <huansic_xb_decodeBody+0x25c>)
 8001c32:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001c34:	7f7b      	ldrb	r3, [r7, #29]
 8001c36:	3301      	adds	r3, #1
 8001c38:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	77fb      	strb	r3, [r7, #31]
 8001c3e:	e075      	b.n	8001d2c <huansic_xb_decodeBody+0x124>
			index += 2;
 8001c40:	7f7b      	ldrb	r3, [r7, #29]
 8001c42:	3302      	adds	r3, #2
 8001c44:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001c46:	7f7b      	ldrb	r3, [r7, #29]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	777a      	strb	r2, [r7, #29]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	7a9b      	ldrb	r3, [r3, #10]
 8001c54:	021a      	lsls	r2, r3, #8
 8001c56:	7ffb      	ldrb	r3, [r7, #31]
 8001c58:	b211      	sxth	r1, r2
 8001c5a:	4a83      	ldr	r2, [pc, #524]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001c5c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001c60:	7f7b      	ldrb	r3, [r7, #29]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	777a      	strb	r2, [r7, #29]
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	7a9a      	ldrb	r2, [r3, #10]
 8001c6e:	7ffb      	ldrb	r3, [r7, #31]
 8001c70:	b211      	sxth	r1, r2
 8001c72:	4a7d      	ldr	r2, [pc, #500]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001c74:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001c78:	7f7b      	ldrb	r3, [r7, #29]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001c7e:	7f7b      	ldrb	r3, [r7, #29]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	777a      	strb	r2, [r7, #29]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	7a9b      	ldrb	r3, [r3, #10]
 8001c8c:	021a      	lsls	r2, r3, #8
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	b211      	sxth	r1, r2
 8001c92:	4a75      	ldr	r2, [pc, #468]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	460a      	mov	r2, r1
 8001c9a:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001c9c:	7f7b      	ldrb	r3, [r7, #29]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	7a9a      	ldrb	r2, [r3, #10]
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	b211      	sxth	r1, r2
 8001ca8:	4a6f      	ldr	r2, [pc, #444]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	460a      	mov	r2, r1
 8001cb0:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001cb2:	7f7b      	ldrb	r3, [r7, #29]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001cb8:	7f7b      	ldrb	r3, [r7, #29]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	777a      	strb	r2, [r7, #29]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	7a9b      	ldrb	r3, [r3, #10]
 8001cc6:	021a      	lsls	r2, r3, #8
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	b211      	sxth	r1, r2
 8001ccc:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001cd6:	7f7b      	ldrb	r3, [r7, #29]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	7a9a      	ldrb	r2, [r3, #10]
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	b211      	sxth	r1, r2
 8001ce2:	4a61      	ldr	r2, [pc, #388]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	460a      	mov	r2, r1
 8001cea:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001cec:	7f7b      	ldrb	r3, [r7, #29]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001cf2:	7f7b      	ldrb	r3, [r7, #29]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	777a      	strb	r2, [r7, #29]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	7a9b      	ldrb	r3, [r3, #10]
 8001d00:	021a      	lsls	r2, r3, #8
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	b211      	sxth	r1, r2
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001d10:	7f7b      	ldrb	r3, [r7, #29]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	7a9a      	ldrb	r2, [r3, #10]
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	b211      	sxth	r1, r2
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <huansic_xb_decodeBody+0x260>)
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	460a      	mov	r2, r1
 8001d24:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	77fb      	strb	r3, [r7, #31]
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d986      	bls.n	8001c40 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001d32:	7f7b      	ldrb	r3, [r7, #29]
 8001d34:	3301      	adds	r3, #1
 8001d36:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001d38:	7f7b      	ldrb	r3, [r7, #29]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	777a      	strb	r2, [r7, #29]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	7a9b      	ldrb	r3, [r3, #10]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d4a:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001d4c:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d54:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	777a      	strb	r2, [r7, #29]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	7a9b      	ldrb	r3, [r3, #10]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d6e:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	4a3d      	ldr	r2, [pc, #244]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d78:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d7a:	7f7b      	ldrb	r3, [r7, #29]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	777a      	strb	r2, [r7, #29]
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	7a9b      	ldrb	r3, [r3, #10]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	4a36      	ldr	r2, [pc, #216]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d92:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001d9c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d9e:	7f7b      	ldrb	r3, [r7, #29]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	777a      	strb	r2, [r7, #29]
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	7a9b      	ldrb	r3, [r3, #10]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <huansic_xb_decodeBody+0x264>)
 8001db6:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8001db8:	7f7b      	ldrb	r3, [r7, #29]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	7a9b      	ldrb	r3, [r3, #10]
 8001dc0:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	77fb      	strb	r3, [r7, #31]
 8001dc6:	e03e      	b.n	8001e46 <huansic_xb_decodeBody+0x23e>
			index += 2;
 8001dc8:	7f7b      	ldrb	r3, [r7, #29]
 8001dca:	3302      	adds	r3, #2
 8001dcc:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001dce:	7f7b      	ldrb	r3, [r7, #29]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	777a      	strb	r2, [r7, #29]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	7a9b      	ldrb	r3, [r3, #10]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
 8001de0:	b211      	sxth	r1, r2
 8001de2:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <huansic_xb_decodeBody+0x268>)
 8001de4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8001de8:	7f7b      	ldrb	r3, [r7, #29]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	777a      	strb	r2, [r7, #29]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	7a9a      	ldrb	r2, [r3, #10]
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	b211      	sxth	r1, r2
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <huansic_xb_decodeBody+0x268>)
 8001dfc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001e00:	7f7b      	ldrb	r3, [r7, #29]
 8001e02:	3302      	adds	r3, #2
 8001e04:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001e06:	7f7b      	ldrb	r3, [r7, #29]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	777a      	strb	r2, [r7, #29]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	7a9b      	ldrb	r3, [r3, #10]
 8001e14:	021a      	lsls	r2, r3, #8
 8001e16:	7ffb      	ldrb	r3, [r7, #31]
 8001e18:	b211      	sxth	r1, r2
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <huansic_xb_decodeBody+0x268>)
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	460a      	mov	r2, r1
 8001e22:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8001e24:	7f7b      	ldrb	r3, [r7, #29]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	777a      	strb	r2, [r7, #29]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	7a9a      	ldrb	r2, [r3, #10]
 8001e32:	7ffb      	ldrb	r3, [r7, #31]
 8001e34:	b211      	sxth	r1, r2
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <huansic_xb_decodeBody+0x268>)
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
 8001e42:	3301      	adds	r3, #1
 8001e44:	77fb      	strb	r3, [r7, #31]
 8001e46:	7ffa      	ldrb	r2, [r7, #31]
 8001e48:	7efb      	ldrb	r3, [r7, #27]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3bc      	bcc.n	8001dc8 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8001e4e:	7f7b      	ldrb	r3, [r7, #29]
 8001e50:	3301      	adds	r3, #1
 8001e52:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8001e54:	7f7b      	ldrb	r3, [r7, #29]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	7a9b      	ldrb	r3, [r3, #10]
 8001e5c:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	77fb      	strb	r3, [r7, #31]
 8001e62:	e046      	b.n	8001ef2 <huansic_xb_decodeBody+0x2ea>
 8001e64:	20000b60 	.word	0x20000b60
 8001e68:	20000b6c 	.word	0x20000b6c
 8001e6c:	20000b64 	.word	0x20000b64
 8001e70:	20000b94 	.word	0x20000b94
			index += 2;
 8001e74:	7f7b      	ldrb	r3, [r7, #29]
 8001e76:	3302      	adds	r3, #2
 8001e78:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001e7a:	7f7b      	ldrb	r3, [r7, #29]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	777a      	strb	r2, [r7, #29]
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	7a9b      	ldrb	r3, [r3, #10]
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	b211      	sxth	r1, r2
 8001e8e:	4a9f      	ldr	r2, [pc, #636]	; (800210c <huansic_xb_decodeBody+0x504>)
 8001e90:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8001e94:	7f7b      	ldrb	r3, [r7, #29]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	777a      	strb	r2, [r7, #29]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	7a9a      	ldrb	r2, [r3, #10]
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	b211      	sxth	r1, r2
 8001ea6:	4a99      	ldr	r2, [pc, #612]	; (800210c <huansic_xb_decodeBody+0x504>)
 8001ea8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001eac:	7f7b      	ldrb	r3, [r7, #29]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001eb2:	7f7b      	ldrb	r3, [r7, #29]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	777a      	strb	r2, [r7, #29]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	7a9b      	ldrb	r3, [r3, #10]
 8001ec0:	021a      	lsls	r2, r3, #8
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	b211      	sxth	r1, r2
 8001ec6:	4a91      	ldr	r2, [pc, #580]	; (800210c <huansic_xb_decodeBody+0x504>)
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	460a      	mov	r2, r1
 8001ece:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8001ed0:	7f7b      	ldrb	r3, [r7, #29]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	777a      	strb	r2, [r7, #29]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	7a9a      	ldrb	r2, [r3, #10]
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	b211      	sxth	r1, r2
 8001ee2:	4a8a      	ldr	r2, [pc, #552]	; (800210c <huansic_xb_decodeBody+0x504>)
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	460a      	mov	r2, r1
 8001eea:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001eec:	7ffb      	ldrb	r3, [r7, #31]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
 8001ef2:	7ffa      	ldrb	r2, [r7, #31]
 8001ef4:	7efb      	ldrb	r3, [r7, #27]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3bc      	bcc.n	8001e74 <huansic_xb_decodeBody+0x26c>
 8001efa:	e31a      	b.n	8002532 <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7a1b      	ldrb	r3, [r3, #8]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	f040 8316 	bne.w	8002532 <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	777a      	strb	r2, [r7, #29]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	7a9a      	ldrb	r2, [r3, #10]
 8001f14:	4b7e      	ldr	r3, [pc, #504]	; (8002110 <huansic_xb_decodeBody+0x508>)
 8001f16:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8001f18:	7f7b      	ldrb	r3, [r7, #29]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	777a      	strb	r2, [r7, #29]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	7a9b      	ldrb	r3, [r3, #10]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f2a:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8001f2c:	4b79      	ldr	r3, [pc, #484]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	4a78      	ldr	r2, [pc, #480]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f34:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	777a      	strb	r2, [r7, #29]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	7a9b      	ldrb	r3, [r3, #10]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	4a71      	ldr	r2, [pc, #452]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f4e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001f50:	4b70      	ldr	r3, [pc, #448]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	4a6f      	ldr	r2, [pc, #444]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f58:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001f5a:	7f7b      	ldrb	r3, [r7, #29]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	777a      	strb	r2, [r7, #29]
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	7a9b      	ldrb	r3, [r3, #10]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	4a68      	ldr	r2, [pc, #416]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f72:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001f74:	4b67      	ldr	r3, [pc, #412]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f7c:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001f7e:	7f7b      	ldrb	r3, [r7, #29]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	777a      	strb	r2, [r7, #29]
 8001f84:	461a      	mov	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	7a9b      	ldrb	r3, [r3, #10]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	4a5f      	ldr	r2, [pc, #380]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f96:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8001f98:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <huansic_xb_decodeBody+0x510>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <huansic_xb_decodeBody+0x50c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	4a5e      	ldr	r2, [pc, #376]	; (800211c <huansic_xb_decodeBody+0x514>)
 8001fa4:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8001fa6:	7f7b      	ldrb	r3, [r7, #29]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	777a      	strb	r2, [r7, #29]
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	7a9b      	ldrb	r3, [r3, #10]
 8001fb4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001fbc:	7f7b      	ldrb	r3, [r7, #29]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	777a      	strb	r2, [r7, #29]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	7a9b      	ldrb	r3, [r3, #10]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001fd8:	7f7b      	ldrb	r3, [r7, #29]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	777a      	strb	r2, [r7, #29]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	7a9b      	ldrb	r3, [r3, #10]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001ff4:	7f7b      	ldrb	r3, [r7, #29]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	777a      	strb	r2, [r7, #29]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	7a9b      	ldrb	r3, [r3, #10]
 8002002:	461a      	mov	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <huansic_xb_decodeBody+0x518>)
 8002012:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8002014:	7f7b      	ldrb	r3, [r7, #29]
 8002016:	3302      	adds	r3, #2
 8002018:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 800201a:	7f7b      	ldrb	r3, [r7, #29]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	777a      	strb	r2, [r7, #29]
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	7a9b      	ldrb	r3, [r3, #10]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <huansic_xb_decodeBody+0x51c>)
 800202e:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8002030:	7f7b      	ldrb	r3, [r7, #29]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	777a      	strb	r2, [r7, #29]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	7a9b      	ldrb	r3, [r3, #10]
 800203e:	b21a      	sxth	r2, r3
 8002040:	4b38      	ldr	r3, [pc, #224]	; (8002124 <huansic_xb_decodeBody+0x51c>)
 8002042:	801a      	strh	r2, [r3, #0]
		index += 2;
 8002044:	7f7b      	ldrb	r3, [r7, #29]
 8002046:	3302      	adds	r3, #2
 8002048:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 800204a:	7f7b      	ldrb	r3, [r7, #29]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	777a      	strb	r2, [r7, #29]
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	7a9b      	ldrb	r3, [r3, #10]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <huansic_xb_decodeBody+0x51c>)
 800205e:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8002060:	7f7b      	ldrb	r3, [r7, #29]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	777a      	strb	r2, [r7, #29]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	7a9b      	ldrb	r3, [r3, #10]
 800206e:	b21a      	sxth	r2, r3
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <huansic_xb_decodeBody+0x51c>)
 8002072:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8002074:	7f7b      	ldrb	r3, [r7, #29]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	777a      	strb	r2, [r7, #29]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	7a9b      	ldrb	r3, [r3, #10]
 8002082:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800208a:	7f7b      	ldrb	r3, [r7, #29]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	777a      	strb	r2, [r7, #29]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	7a9b      	ldrb	r3, [r3, #10]
 8002098:	461a      	mov	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80020a6:	7f7b      	ldrb	r3, [r7, #29]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	777a      	strb	r2, [r7, #29]
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	7a9b      	ldrb	r3, [r3, #10]
 80020b4:	461a      	mov	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80020c2:	7f7b      	ldrb	r3, [r7, #29]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	777a      	strb	r2, [r7, #29]
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	7a9b      	ldrb	r3, [r3, #10]
 80020d0:	461a      	mov	r2, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <huansic_xb_decodeBody+0x520>)
 80020e0:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <huansic_xb_decodeBody+0x524>)
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ec:	6018      	str	r0, [r3, #0]
 80020ee:	3304      	adds	r3, #4
 80020f0:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 80020f6:	7f7b      	ldrb	r3, [r7, #29]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	777a      	strb	r2, [r7, #29]
 80020fc:	461a      	mov	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	7a9b      	ldrb	r3, [r3, #10]
 8002104:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002106:	2300      	movs	r3, #0
 8002108:	77fb      	strb	r3, [r7, #31]
 800210a:	e0fd      	b.n	8002308 <huansic_xb_decodeBody+0x700>
 800210c:	20000ba0 	.word	0x20000ba0
 8002110:	20000b61 	.word	0x20000b61
 8002114:	20000b68 	.word	0x20000b68
 8002118:	20000b64 	.word	0x20000b64
 800211c:	20000bd0 	.word	0x20000bd0
 8002120:	20000bc8 	.word	0x20000bc8
 8002124:	20000bc0 	.word	0x20000bc0
 8002128:	20000bcc 	.word	0x20000bcc
 800212c:	08008e28 	.word	0x08008e28
			temp = hxb->buffer[index + 24];
 8002130:	7f7b      	ldrb	r3, [r7, #29]
 8002132:	3318      	adds	r3, #24
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	7a9b      	ldrb	r3, [r3, #10]
 800213a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 8002142:	7f7b      	ldrb	r3, [r7, #29]
 8002144:	3319      	adds	r3, #25
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	7a9b      	ldrb	r3, [r3, #10]
 800214c:	461a      	mov	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 800215a:	7f7b      	ldrb	r3, [r7, #29]
 800215c:	331a      	adds	r3, #26
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	7a9b      	ldrb	r3, [r3, #10]
 8002164:	461a      	mov	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 8002172:	7f7b      	ldrb	r3, [r7, #29]
 8002174:	331b      	adds	r3, #27
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	7a9b      	ldrb	r3, [r3, #10]
 800217c:	461a      	mov	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	b25b      	sxtb	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fa81 	bl	8001690 <huansic_order_new>
 800218e:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 8002196:	7f7b      	ldrb	r3, [r7, #29]
 8002198:	331c      	adds	r3, #28
 800219a:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fcd3 	bl	8001b4c <custom_order_new_failed>
				continue;
 80021a6:	e0ac      	b.n	8002302 <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80021a8:	7f7b      	ldrb	r3, [r7, #29]
 80021aa:	3302      	adds	r3, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	7a9b      	ldrb	r3, [r3, #10]
 80021b2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	7f7b      	ldrb	r3, [r7, #29]
 80021b8:	3303      	adds	r3, #3
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	440b      	add	r3, r1
 80021be:	7a9b      	ldrb	r3, [r3, #10]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80021ca:	7f7b      	ldrb	r3, [r7, #29]
 80021cc:	3306      	adds	r3, #6
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	7a9b      	ldrb	r3, [r3, #10]
 80021d4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	7f7b      	ldrb	r3, [r7, #29]
 80021da:	3307      	adds	r3, #7
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	440b      	add	r3, r1
 80021e0:	7a9b      	ldrb	r3, [r3, #10]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80021ec:	7f7b      	ldrb	r3, [r7, #29]
 80021ee:	330a      	adds	r3, #10
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	7a9b      	ldrb	r3, [r3, #10]
 80021f6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	7f7b      	ldrb	r3, [r7, #29]
 80021fc:	330b      	adds	r3, #11
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	440b      	add	r3, r1
 8002202:	7a9b      	ldrb	r3, [r3, #10]
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 800220e:	7f7b      	ldrb	r3, [r7, #29]
 8002210:	330e      	adds	r3, #14
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	7a9b      	ldrb	r3, [r3, #10]
 8002218:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 800221a:	b21a      	sxth	r2, r3
 800221c:	7f7b      	ldrb	r3, [r7, #29]
 800221e:	330f      	adds	r3, #15
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	440b      	add	r3, r1
 8002224:	7a9b      	ldrb	r3, [r3, #10]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8002230:	7f7b      	ldrb	r3, [r7, #29]
 8002232:	3310      	adds	r3, #16
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8002242:	7f7b      	ldrb	r3, [r7, #29]
 8002244:	3311      	adds	r3, #17
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	7a9b      	ldrb	r3, [r3, #10]
 800224c:	461a      	mov	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 800225a:	7f7b      	ldrb	r3, [r7, #29]
 800225c:	3312      	adds	r3, #18
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	7a9b      	ldrb	r3, [r3, #10]
 8002264:	461a      	mov	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002272:	7f7b      	ldrb	r3, [r7, #29]
 8002274:	3313      	adds	r3, #19
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	7a9b      	ldrb	r3, [r3, #10]
 800227c:	461a      	mov	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800228a:	7f7b      	ldrb	r3, [r7, #29]
 800228c:	3314      	adds	r3, #20
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	7a9b      	ldrb	r3, [r3, #10]
 8002294:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800229c:	7f7b      	ldrb	r3, [r7, #29]
 800229e:	3315      	adds	r3, #21
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	7a9b      	ldrb	r3, [r3, #10]
 80022a6:	461a      	mov	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80022b4:	7f7b      	ldrb	r3, [r7, #29]
 80022b6:	3316      	adds	r3, #22
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	7a9b      	ldrb	r3, [r3, #10]
 80022be:	461a      	mov	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80022cc:	7f7b      	ldrb	r3, [r7, #29]
 80022ce:	3317      	adds	r3, #23
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	7a9b      	ldrb	r3, [r3, #10]
 80022d6:	461a      	mov	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 80022e8:	7f7b      	ldrb	r3, [r7, #29]
 80022ea:	331c      	adds	r3, #28
 80022ec:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	7f3b      	ldrb	r3, [r7, #28]
 80022f4:	1c59      	adds	r1, r3, #1
 80022f6:	7739      	strb	r1, [r7, #28]
 80022f8:	b252      	sxtb	r2, r2
 80022fa:	3320      	adds	r3, #32
 80022fc:	443b      	add	r3, r7
 80022fe:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8002302:	7ffb      	ldrb	r3, [r7, #31]
 8002304:	3301      	adds	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
 8002308:	7ffa      	ldrb	r2, [r7, #31]
 800230a:	7efb      	ldrb	r3, [r7, #27]
 800230c:	429a      	cmp	r2, r3
 800230e:	f4ff af0f 	bcc.w	8002130 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 8002312:	2300      	movs	r3, #0
 8002314:	77fb      	strb	r3, [r7, #31]
 8002316:	e02d      	b.n	8002374 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	4a90      	ldr	r2, [pc, #576]	; (800255c <huansic_xb_decodeBody+0x954>)
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d022      	beq.n	800236e <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 8002328:	2300      	movs	r3, #0
 800232a:	77bb      	strb	r3, [r7, #30]
 800232c:	e011      	b.n	8002352 <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 800232e:	7ffb      	ldrb	r3, [r7, #31]
 8002330:	4a8a      	ldr	r2, [pc, #552]	; (800255c <huansic_xb_decodeBody+0x954>)
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	7fba      	ldrb	r2, [r7, #30]
 800233a:	3220      	adds	r2, #32
 800233c:	443a      	add	r2, r7
 800233e:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 8002342:	4293      	cmp	r3, r2
 8002344:	d102      	bne.n	800234c <huansic_xb_decodeBody+0x744>
						j = 255;
 8002346:	23ff      	movs	r3, #255	; 0xff
 8002348:	77bb      	strb	r3, [r7, #30]
						break;
 800234a:	e006      	b.n	800235a <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 800234c:	7fbb      	ldrb	r3, [r7, #30]
 800234e:	3301      	adds	r3, #1
 8002350:	77bb      	strb	r3, [r7, #30]
 8002352:	7ffa      	ldrb	r2, [r7, #31]
 8002354:	7f3b      	ldrb	r3, [r7, #28]
 8002356:	429a      	cmp	r2, r3
 8002358:	d3e9      	bcc.n	800232e <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 800235a:	7fbb      	ldrb	r3, [r7, #30]
 800235c:	2bff      	cmp	r3, #255	; 0xff
 800235e:	d006      	beq.n	800236e <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	4a7e      	ldr	r2, [pc, #504]	; (800255c <huansic_xb_decodeBody+0x954>)
 8002364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f9eb 	bl	8001744 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 800236e:	7ffb      	ldrb	r3, [r7, #31]
 8002370:	3301      	adds	r3, #1
 8002372:	77fb      	strb	r3, [r7, #31]
 8002374:	7ffb      	ldrb	r3, [r7, #31]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d9ce      	bls.n	8002318 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 800237a:	7f7b      	ldrb	r3, [r7, #29]
 800237c:	3318      	adds	r3, #24
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	7a9b      	ldrb	r3, [r3, #10]
 8002384:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	3319      	adds	r3, #25
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	7a9b      	ldrb	r3, [r3, #10]
 8002396:	461a      	mov	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 80023a4:	7f7b      	ldrb	r3, [r7, #29]
 80023a6:	331a      	adds	r3, #26
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	7a9b      	ldrb	r3, [r3, #10]
 80023ae:	461a      	mov	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 80023bc:	7f7b      	ldrb	r3, [r7, #29]
 80023be:	331b      	adds	r3, #27
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	7a9b      	ldrb	r3, [r3, #10]
 80023c6:	461a      	mov	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f95c 	bl	8001690 <huansic_order_new>
 80023d8:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <huansic_xb_decodeBody+0x7ea>
			index += 28;
 80023e0:	7f7b      	ldrb	r3, [r7, #29]
 80023e2:	331c      	adds	r3, #28
 80023e4:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fbae 	bl	8001b4c <custom_order_new_failed>
 80023f0:	e09f      	b.n	8002532 <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80023f2:	7f7b      	ldrb	r3, [r7, #29]
 80023f4:	3302      	adds	r3, #2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	7a9b      	ldrb	r3, [r3, #10]
 80023fc:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80023fe:	b21a      	sxth	r2, r3
 8002400:	7f7b      	ldrb	r3, [r7, #29]
 8002402:	3303      	adds	r3, #3
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	440b      	add	r3, r1
 8002408:	7a9b      	ldrb	r3, [r3, #10]
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002414:	7f7b      	ldrb	r3, [r7, #29]
 8002416:	3306      	adds	r3, #6
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	7a9b      	ldrb	r3, [r3, #10]
 800241e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002420:	b21a      	sxth	r2, r3
 8002422:	7f7b      	ldrb	r3, [r7, #29]
 8002424:	3307      	adds	r3, #7
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	440b      	add	r3, r1
 800242a:	7a9b      	ldrb	r3, [r3, #10]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002436:	7f7b      	ldrb	r3, [r7, #29]
 8002438:	330a      	adds	r3, #10
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	7a9b      	ldrb	r3, [r3, #10]
 8002440:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8002442:	b21a      	sxth	r2, r3
 8002444:	7f7b      	ldrb	r3, [r7, #29]
 8002446:	330b      	adds	r3, #11
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	440b      	add	r3, r1
 800244c:	7a9b      	ldrb	r3, [r3, #10]
 800244e:	b21b      	sxth	r3, r3
 8002450:	4313      	orrs	r3, r2
 8002452:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002458:	7f7b      	ldrb	r3, [r7, #29]
 800245a:	330e      	adds	r3, #14
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	7a9b      	ldrb	r3, [r3, #10]
 8002462:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002464:	b21a      	sxth	r2, r3
 8002466:	7f7b      	ldrb	r3, [r7, #29]
 8002468:	330f      	adds	r3, #15
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	440b      	add	r3, r1
 800246e:	7a9b      	ldrb	r3, [r3, #10]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 800247a:	7f7b      	ldrb	r3, [r7, #29]
 800247c:	3310      	adds	r3, #16
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	7a9b      	ldrb	r3, [r3, #10]
 8002484:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800248c:	7f7b      	ldrb	r3, [r7, #29]
 800248e:	3311      	adds	r3, #17
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	7a9b      	ldrb	r3, [r3, #10]
 8002496:	461a      	mov	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80024a4:	7f7b      	ldrb	r3, [r7, #29]
 80024a6:	3312      	adds	r3, #18
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	7a9b      	ldrb	r3, [r3, #10]
 80024ae:	461a      	mov	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80024bc:	7f7b      	ldrb	r3, [r7, #29]
 80024be:	3313      	adds	r3, #19
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	7a9b      	ldrb	r3, [r3, #10]
 80024c6:	461a      	mov	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 80024d4:	7f7b      	ldrb	r3, [r7, #29]
 80024d6:	3314      	adds	r3, #20
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	7a9b      	ldrb	r3, [r3, #10]
 80024de:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80024e6:	7f7b      	ldrb	r3, [r7, #29]
 80024e8:	3315      	adds	r3, #21
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	7a9b      	ldrb	r3, [r3, #10]
 80024f0:	461a      	mov	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80024fe:	7f7b      	ldrb	r3, [r7, #29]
 8002500:	3316      	adds	r3, #22
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	7a9b      	ldrb	r3, [r3, #10]
 8002508:	461a      	mov	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002516:	7f7b      	ldrb	r3, [r7, #29]
 8002518:	3317      	adds	r3, #23
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	7a9b      	ldrb	r3, [r3, #10]
 8002520:	461a      	mov	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2206      	movs	r2, #6
 8002536:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f103 010a 	add.w	r1, r3, #10
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7a5b      	ldrb	r3, [r3, #9]
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	f004 fe64 	bl	800721c <HAL_UART_Receive_DMA>
}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000bac 	.word	0x20000bac

08002560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002566:	f001 fbb9 	bl	8003cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800256a:	f000 f8b5 	bl	80026d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256e:	f000 fcaf 	bl	8002ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002572:	f000 fc87 	bl	8002e84 <MX_DMA_Init>
  MX_I2C1_Init();
 8002576:	f000 f8f5 	bl	8002764 <MX_I2C1_Init>
  MX_TIM1_Init();
 800257a:	f000 f921 	bl	80027c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800257e:	f000 f9e3 	bl	8002948 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002582:	f000 fa35 	bl	80029f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002586:	f000 fa87 	bl	8002a98 <MX_TIM4_Init>
  MX_TIM5_Init();
 800258a:	f000 fad9 	bl	8002b40 <MX_TIM5_Init>
  MX_TIM8_Init();
 800258e:	f000 fb61 	bl	8002c54 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002592:	f000 fc23 	bl	8002ddc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002596:	f000 fc4b 	bl	8002e30 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800259a:	f000 fb25 	bl	8002be8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	cmotor_lf.encoderInverted = 1;
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <main+0x148>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <main+0x14c>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 80025ae:	f000 fce5 	bl	8002f7c <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 80025b2:	f000 fd17 	bl	8002fe4 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 80025b6:	f000 fd49 	bl	800304c <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 80025ba:	f000 fd7b 	bl	80030b4 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 80025be:	f000 fdad 	bl	800311c <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 80025c2:	f000 fdb9 	bl	8003138 <HUAN_ZIGBEE_Init>
	ssd1306_Init();
 80025c6:	f000 fe3b 	bl	8003240 <ssd1306_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 80025ca:	2014      	movs	r0, #20
 80025cc:	f001 fbe8 	bl	8003da0 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80025d0:	4837      	ldr	r0, [pc, #220]	; (80026b0 <main+0x150>)
 80025d2:	f003 fc0b 	bl	8005dec <HAL_TIM_Base_Start_IT>

	initangleZ = himu.theta[2];
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <main+0x154>)
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	4a37      	ldr	r2, [pc, #220]	; (80026b8 <main+0x158>)
 80025dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	myCoord.x = 0;
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <main+0x15c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <main+0x15c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 10;
 80025ea:	230a      	movs	r3, #10
 80025ec:	80bb      	strh	r3, [r7, #4]
	goal.y = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	80fb      	strh	r3, [r7, #6]
	uint8_t isArrived = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	72fb      	strb	r3, [r7, #11]
	float angleZ = 0.0;
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
//		HAL_Delay(1000);
//		chao_move_angle(90, 2000);

//    	isArrived = GotoDestination(goal); //暂时不用管，还没有调通
//    	if (isArrived == 1) break;
    	angleZ = himu.theta[2] - initangleZ;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <main+0x154>)
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <main+0x158>)
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fa30 	bl	8000a6c <__aeabi_fsub>
 800260c:	4603      	mov	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]
    	while(angleZ < -180)
 8002610:	e005      	b.n	800261e <main+0xbe>
    	{
    		angleZ += 360;
 8002612:	492b      	ldr	r1, [pc, #172]	; (80026c0 <main+0x160>)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7fe fa2b 	bl	8000a70 <__addsf3>
 800261a:	4603      	mov	r3, r0
 800261c:	60fb      	str	r3, [r7, #12]
    	while(angleZ < -180)
 800261e:	4929      	ldr	r1, [pc, #164]	; (80026c4 <main+0x164>)
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7fe fccb 	bl	8000fbc <__aeabi_fcmplt>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f2      	bne.n	8002612 <main+0xb2>
    	}
    	while(angleZ > 180)
 800262c:	e005      	b.n	800263a <main+0xda>
    	{
    		angleZ -= 360;
 800262e:	4924      	ldr	r1, [pc, #144]	; (80026c0 <main+0x160>)
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7fe fa1b 	bl	8000a6c <__aeabi_fsub>
 8002636:	4603      	mov	r3, r0
 8002638:	60fb      	str	r3, [r7, #12]
    	while(angleZ > 180)
 800263a:	4923      	ldr	r1, [pc, #140]	; (80026c8 <main+0x168>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7fe fcdb 	bl	8000ff8 <__aeabi_fcmpgt>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f2      	bne.n	800262e <main+0xce>
    	}

		while(!gameStatus){		// if the game is not running
 8002648:	e008      	b.n	800265c <main+0xfc>
	    	LED1_ON;
 800264a:	2201      	movs	r2, #1
 800264c:	2101      	movs	r1, #1
 800264e:	481f      	ldr	r0, [pc, #124]	; (80026cc <main+0x16c>)
 8002650:	f002 faee 	bl	8004c30 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8002654:	2064      	movs	r0, #100	; 0x64
 8002656:	f001 fba3 	bl	8003da0 <HAL_Delay>
			break;
 800265a:	e003      	b.n	8002664 <main+0x104>
		while(!gameStatus){		// if the game is not running
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <main+0x170>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f2      	beq.n	800264a <main+0xea>
		}

		while (gameStage == 0) {		// pre-match
 8002664:	e003      	b.n	800266e <main+0x10e>
			if (!gameStatus)	// if the game stopped
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <main+0x170>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <main+0x118>
		while (gameStage == 0) {		// pre-match
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <main+0x174>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f7      	beq.n	8002666 <main+0x106>
 8002676:	e005      	b.n	8002684 <main+0x124>
				break;
 8002678:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 800267a:	e003      	b.n	8002684 <main+0x124>
			if (!gameStatus)	// if the game stopped
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <main+0x170>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <main+0x12e>
		while (gameStage == 1){			// first-half
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <main+0x174>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d0f7      	beq.n	800267c <main+0x11c>
 800268c:	e005      	b.n	800269a <main+0x13a>
				break;
 800268e:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 8002690:	e003      	b.n	800269a <main+0x13a>
			if (!gameStatus)	// if the game stopped
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <main+0x170>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <main+0x144>
		while (gameStage == 2){			// second-half
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <main+0x174>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d0f7      	beq.n	8002692 <main+0x132>
 80026a2:	e7ab      	b.n	80025fc <main+0x9c>
				break;
 80026a4:	bf00      	nop
    	angleZ = himu.theta[2] - initangleZ;
 80026a6:	e7a9      	b.n	80025fc <main+0x9c>
 80026a8:	2000098c 	.word	0x2000098c
 80026ac:	20000a04 	.word	0x20000a04
 80026b0:	200007ec 	.word	0x200007ec
 80026b4:	20000a7c 	.word	0x20000a7c
 80026b8:	20000bc4 	.word	0x20000bc4
 80026bc:	20000bc0 	.word	0x20000bc0
 80026c0:	43b40000 	.word	0x43b40000
 80026c4:	c3340000 	.word	0xc3340000
 80026c8:	43340000 	.word	0x43340000
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	20000b61 	.word	0x20000b61
 80026d4:	20000b60 	.word	0x20000b60

080026d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	; 0x40
 80026dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026de:	f107 0318 	add.w	r3, r7, #24
 80026e2:	2228      	movs	r2, #40	; 0x28
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f005 fb74 	bl	8007dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800270a:	2301      	movs	r3, #1
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270e:	2302      	movs	r3, #2
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002718:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271e:	f107 0318 	add.w	r3, r7, #24
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fef6 	bl	8005514 <HAL_RCC_OscConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800272e:	f000 fd49 	bl	80031c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002732:	230f      	movs	r3, #15
 8002734:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002736:	2302      	movs	r3, #2
 8002738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2102      	movs	r1, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f963 	bl	8005a18 <HAL_RCC_ClockConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002758:	f000 fd34 	bl	80031c4 <Error_Handler>
  }
}
 800275c:	bf00      	nop
 800275e:	3740      	adds	r7, #64	; 0x40
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <MX_I2C1_Init+0x50>)
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <MX_I2C1_Init+0x54>)
 800276c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800276e:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <MX_I2C1_Init+0x50>)
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <MX_I2C1_Init+0x58>)
 8002772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <MX_I2C1_Init+0x50>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <MX_I2C1_Init+0x50>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <MX_I2C1_Init+0x50>)
 8002782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <MX_I2C1_Init+0x50>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <MX_I2C1_Init+0x50>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <MX_I2C1_Init+0x50>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <MX_I2C1_Init+0x50>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027a0:	4804      	ldr	r0, [pc, #16]	; (80027b4 <MX_I2C1_Init+0x50>)
 80027a2:	f002 fa5d 	bl	8004c60 <HAL_I2C_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027ac:	f000 fd0a 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000630 	.word	0x20000630
 80027b8:	40005400 	.word	0x40005400
 80027bc:	000186a0 	.word	0x000186a0

080027c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b096      	sub	sp, #88	; 0x58
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	611a      	str	r2, [r3, #16]
 80027ee:	615a      	str	r2, [r3, #20]
 80027f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2220      	movs	r2, #32
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f005 faeb 	bl	8007dd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <MX_TIM1_Init+0x180>)
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <MX_TIM1_Init+0x184>)
 8002802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002804:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <MX_TIM1_Init+0x180>)
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <MX_TIM1_Init+0x180>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <MX_TIM1_Init+0x180>)
 8002812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002816:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002818:	4b49      	ldr	r3, [pc, #292]	; (8002940 <MX_TIM1_Init+0x180>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800281e:	4b48      	ldr	r3, [pc, #288]	; (8002940 <MX_TIM1_Init+0x180>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <MX_TIM1_Init+0x180>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800282a:	4845      	ldr	r0, [pc, #276]	; (8002940 <MX_TIM1_Init+0x180>)
 800282c:	f003 fa8e 	bl	8005d4c <HAL_TIM_Base_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002836:	f000 fcc5 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800283a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002844:	4619      	mov	r1, r3
 8002846:	483e      	ldr	r0, [pc, #248]	; (8002940 <MX_TIM1_Init+0x180>)
 8002848:	f003 ff38 	bl	80066bc <HAL_TIM_ConfigClockSource>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002852:	f000 fcb7 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002856:	483a      	ldr	r0, [pc, #232]	; (8002940 <MX_TIM1_Init+0x180>)
 8002858:	f003 fb28 	bl	8005eac <HAL_TIM_PWM_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002862:	f000 fcaf 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800286e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002872:	4619      	mov	r1, r3
 8002874:	4832      	ldr	r0, [pc, #200]	; (8002940 <MX_TIM1_Init+0x180>)
 8002876:	f004 faf3 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002880:	f000 fca0 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002884:	2360      	movs	r3, #96	; 0x60
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	4825      	ldr	r0, [pc, #148]	; (8002940 <MX_TIM1_Init+0x180>)
 80028aa:	f003 fe49 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028b4:	f000 fc86 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	2204      	movs	r2, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	481f      	ldr	r0, [pc, #124]	; (8002940 <MX_TIM1_Init+0x180>)
 80028c2:	f003 fe3d 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80028cc:	f000 fc7a 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	2208      	movs	r2, #8
 80028d6:	4619      	mov	r1, r3
 80028d8:	4819      	ldr	r0, [pc, #100]	; (8002940 <MX_TIM1_Init+0x180>)
 80028da:	f003 fe31 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80028e4:	f000 fc6e 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	220c      	movs	r2, #12
 80028ee:	4619      	mov	r1, r3
 80028f0:	4813      	ldr	r0, [pc, #76]	; (8002940 <MX_TIM1_Init+0x180>)
 80028f2:	f003 fe25 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80028fc:	f000 fc62 	bl	80031c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002918:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4807      	ldr	r0, [pc, #28]	; (8002940 <MX_TIM1_Init+0x180>)
 8002924:	f004 fb08 	bl	8006f38 <HAL_TIMEx_ConfigBreakDeadTime>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800292e:	f000 fc49 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <MX_TIM1_Init+0x180>)
 8002934:	f000 ff2a 	bl	800378c <HAL_TIM_MspPostInit>

}
 8002938:	bf00      	nop
 800293a:	3758      	adds	r7, #88	; 0x58
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000684 	.word	0x20000684
 8002944:	40012c00 	.word	0x40012c00

08002948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f005 fa3c 	bl	8007dd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <MX_TIM2_Init+0xa4>)
 8002966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800296a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <MX_TIM2_Init+0xa4>)
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <MX_TIM2_Init+0xa4>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <MX_TIM2_Init+0xa4>)
 800297a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800297e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <MX_TIM2_Init+0xa4>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <MX_TIM2_Init+0xa4>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800298c:	2301      	movs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002994:	2301      	movs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029a4:	2301      	movs	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029b0:	f107 030c 	add.w	r3, r7, #12
 80029b4:	4619      	mov	r1, r3
 80029b6:	480d      	ldr	r0, [pc, #52]	; (80029ec <MX_TIM2_Init+0xa4>)
 80029b8:	f003 fb8a 	bl	80060d0 <HAL_TIM_Encoder_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029c2:	f000 fbff 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4806      	ldr	r0, [pc, #24]	; (80029ec <MX_TIM2_Init+0xa4>)
 80029d4:	f004 fa44 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029de:	f000 fbf1 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	3730      	adds	r7, #48	; 0x30
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200006cc 	.word	0x200006cc

080029f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f005 f9e8 	bl	8007dd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <MX_TIM3_Init+0xa4>)
 8002a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a5e:	f003 fb37 	bl	80060d0 <HAL_TIM_Encoder_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a68:	f000 fbac 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <MX_TIM3_Init+0xa0>)
 8002a7a:	f004 f9f1 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a84:	f000 fb9e 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	3730      	adds	r7, #48	; 0x30
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000714 	.word	0x20000714
 8002a94:	40000400 	.word	0x40000400

08002a98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f005 f994 	bl	8007dd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <MX_TIM4_Init+0xa4>)
 8002ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002acc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002af2:	2301      	movs	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	4619      	mov	r1, r3
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002b06:	f003 fae3 	bl	80060d0 <HAL_TIM_Encoder_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b10:	f000 fb58 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_TIM4_Init+0xa0>)
 8002b22:	f004 f99d 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b2c:	f000 fb4a 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000075c 	.word	0x2000075c
 8002b3c:	40000800 	.word	0x40000800

08002b40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f005 f940 	bl	8007dd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <MX_TIM5_Init+0xa4>)
 8002b60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002bae:	f003 fa8f 	bl	80060d0 <HAL_TIM_Encoder_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002bb8:	f000 fb04 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_TIM5_Init+0xa0>)
 8002bca:	f004 f949 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002bd4:	f000 faf6 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	3730      	adds	r7, #48	; 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200007a4 	.word	0x200007a4
 8002be4:	40000c00 	.word	0x40000c00

08002be8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bee:	463b      	mov	r3, r7
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <MX_TIM6_Init+0x68>)
 8002bfa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002bfe:	2247      	movs	r2, #71	; 0x47
 8002c00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002c0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002c0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c16:	480d      	ldr	r0, [pc, #52]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002c18:	f003 f898 	bl	8005d4c <HAL_TIM_Base_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002c22:	f000 facf 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c2e:	463b      	mov	r3, r7
 8002c30:	4619      	mov	r1, r3
 8002c32:	4806      	ldr	r0, [pc, #24]	; (8002c4c <MX_TIM6_Init+0x64>)
 8002c34:	f004 f914 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c3e:	f000 fac1 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200007ec 	.word	0x200007ec
 8002c50:	40001000 	.word	0x40001000

08002c54 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b096      	sub	sp, #88	; 0x58
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	615a      	str	r2, [r3, #20]
 8002c84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2220      	movs	r2, #32
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 f8a1 	bl	8007dd4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c92:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002c94:	4a50      	ldr	r2, [pc, #320]	; (8002dd8 <MX_TIM8_Init+0x184>)
 8002c96:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002caa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cac:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cb2:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cbe:	4845      	ldr	r0, [pc, #276]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002cc0:	f003 f844 	bl	8005d4c <HAL_TIM_Base_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002cca:	f000 fa7b 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cd8:	4619      	mov	r1, r3
 8002cda:	483e      	ldr	r0, [pc, #248]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002cdc:	f003 fcee 	bl	80066bc <HAL_TIM_ConfigClockSource>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002ce6:	f000 fa6d 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cea:	483a      	ldr	r0, [pc, #232]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002cec:	f003 f8de 	bl	8005eac <HAL_TIM_PWM_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002cf6:	f000 fa65 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d06:	4619      	mov	r1, r3
 8002d08:	4832      	ldr	r0, [pc, #200]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002d0a:	f004 f8a9 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002d14:	f000 fa56 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d18:	2360      	movs	r3, #96	; 0x60
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d24:	2300      	movs	r3, #0
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4825      	ldr	r0, [pc, #148]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002d3e:	f003 fbff 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002d48:	f000 fa3c 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d50:	2204      	movs	r2, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	481f      	ldr	r0, [pc, #124]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002d56:	f003 fbf3 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002d60:	f000 fa30 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4819      	ldr	r0, [pc, #100]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002d6e:	f003 fbe7 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002d78:	f000 fa24 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	220c      	movs	r2, #12
 8002d82:	4619      	mov	r1, r3
 8002d84:	4813      	ldr	r0, [pc, #76]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002d86:	f003 fbdb 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002d90:	f000 fa18 	bl	80031c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002db8:	f004 f8be 	bl	8006f38 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002dc2:	f000 f9ff 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002dc6:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <MX_TIM8_Init+0x180>)
 8002dc8:	f000 fce0 	bl	800378c <HAL_TIM_MspPostInit>

}
 8002dcc:	bf00      	nop
 8002dce:	3758      	adds	r7, #88	; 0x58
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000834 	.word	0x20000834
 8002dd8:	40013400 	.word	0x40013400

08002ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <MX_USART2_UART_Init+0x50>)
 8002de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <MX_USART2_UART_Init+0x4c>)
 8002e14:	f004 f8f3 	bl	8006ffe <HAL_UART_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e1e:	f000 f9d1 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000087c 	.word	0x2000087c
 8002e2c:	40004400 	.word	0x40004400

08002e30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <MX_USART3_UART_Init+0x50>)
 8002e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e56:	220c      	movs	r2, #12
 8002e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_USART3_UART_Init+0x4c>)
 8002e68:	f004 f8c9 	bl	8006ffe <HAL_UART_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e72:	f000 f9a7 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200008c0 	.word	0x200008c0
 8002e80:	40004800 	.word	0x40004800

08002e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <MX_DMA_Init+0x48>)
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <MX_DMA_Init+0x48>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6153      	str	r3, [r2, #20]
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <MX_DMA_Init+0x48>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	200d      	movs	r0, #13
 8002ea8:	f001 f875 	bl	8003f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002eac:	200d      	movs	r0, #13
 8002eae:	f001 f88e 	bl	8003fce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	2010      	movs	r0, #16
 8002eb8:	f001 f86d 	bl	8003f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002ebc:	2010      	movs	r0, #16
 8002ebe:	f001 f886 	bl	8003fce <HAL_NVIC_EnableIRQ>

}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	6193      	str	r3, [r2, #24]
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f1a:	f043 0308 	orr.w	r3, r3, #8
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f32:	f043 0310 	orr.w	r3, r3, #16
 8002f36:	6193      	str	r3, [r2, #24]
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_GPIO_Init+0xa4>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2107      	movs	r1, #7
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <MX_GPIO_Init+0xa8>)
 8002f4a:	f001 fe71 	bl	8004c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002f4e:	2307      	movs	r3, #7
 8002f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	4619      	mov	r1, r3
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <MX_GPIO_Init+0xa8>)
 8002f66:	f001 fccf 	bl	8004908 <HAL_GPIO_Init>

}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010c00 	.word	0x40010c00

08002f7c <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HUAN_MOTOR1_Init+0x50>)
 8002f84:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002f88:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HUAN_MOTOR1_Init+0x54>)
 8002f8a:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HUAN_MOTOR1_Init+0x58>)
 8002f90:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002f94:	220c      	movs	r2, #12
 8002f96:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <HUAN_MOTOR1_Init+0x58>)
 8002f9c:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HUAN_MOTOR1_Init+0x5c>)
 8002fb0:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002fb4:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HUAN_MOTOR1_Init+0x60>)
 8002fb6:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HUAN_MOTOR1_Init+0x64>)
 8002fbc:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8002fbe:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <HUAN_MOTOR1_Init+0x4c>)
 8002fc0:	f7fe fbd6 	bl	8001770 <huansic_motor_init>
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	2000098c 	.word	0x2000098c
 8002fcc:	200006cc 	.word	0x200006cc
 8002fd0:	3d4ccccd 	.word	0x3d4ccccd
 8002fd4:	20000684 	.word	0x20000684
 8002fd8:	399d4952 	.word	0x399d4952
 8002fdc:	37a7c5ac 	.word	0x37a7c5ac
 8002fe0:	387ba882 	.word	0x387ba882

08002fe4 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <HUAN_MOTOR2_Init+0x50>)
 8002fec:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HUAN_MOTOR2_Init+0x54>)
 8002ff2:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8002ff6:	4a11      	ldr	r2, [pc, #68]	; (800303c <HUAN_MOTOR2_Init+0x58>)
 8002ff8:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HUAN_MOTOR2_Init+0x58>)
 8003004:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8003008:	2204      	movs	r2, #4
 800300a:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HUAN_MOTOR2_Init+0x5c>)
 8003018:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HUAN_MOTOR2_Init+0x60>)
 800301e:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HUAN_MOTOR2_Init+0x64>)
 8003024:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 8003026:	4802      	ldr	r0, [pc, #8]	; (8003030 <HUAN_MOTOR2_Init+0x4c>)
 8003028:	f7fe fba2 	bl	8001770 <huansic_motor_init>
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200009c8 	.word	0x200009c8
 8003034:	2000075c 	.word	0x2000075c
 8003038:	3d4ccccd 	.word	0x3d4ccccd
 800303c:	20000684 	.word	0x20000684
 8003040:	399d4952 	.word	0x399d4952
 8003044:	37a7c5ac 	.word	0x37a7c5ac
 8003048:	387ba882 	.word	0x387ba882

0800304c <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <HUAN_MOTOR3_Init+0x50>)
 8003054:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HUAN_MOTOR3_Init+0x54>)
 800305a:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 800305e:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HUAN_MOTOR3_Init+0x58>)
 8003060:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003064:	220c      	movs	r2, #12
 8003066:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 800306a:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <HUAN_MOTOR3_Init+0x58>)
 800306c:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003070:	2208      	movs	r2, #8
 8003072:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HUAN_MOTOR3_Init+0x5c>)
 8003080:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HUAN_MOTOR3_Init+0x60>)
 8003086:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <HUAN_MOTOR3_Init+0x64>)
 800308c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 800308e:	4802      	ldr	r0, [pc, #8]	; (8003098 <HUAN_MOTOR3_Init+0x4c>)
 8003090:	f7fe fb6e 	bl	8001770 <huansic_motor_init>
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000a04 	.word	0x20000a04
 800309c:	20000714 	.word	0x20000714
 80030a0:	3d4ccccd 	.word	0x3d4ccccd
 80030a4:	20000834 	.word	0x20000834
 80030a8:	399d4952 	.word	0x399d4952
 80030ac:	37a7c5ac 	.word	0x37a7c5ac
 80030b0:	387ba882 	.word	0x387ba882

080030b4 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HUAN_MOTOR4_Init+0x50>)
 80030bc:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HUAN_MOTOR4_Init+0x54>)
 80030c2:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030c6:	4a11      	ldr	r2, [pc, #68]	; (800310c <HUAN_MOTOR4_Init+0x58>)
 80030c8:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HUAN_MOTOR4_Init+0x58>)
 80030d4:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030d8:	2204      	movs	r2, #4
 80030da:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <HUAN_MOTOR4_Init+0x5c>)
 80030e8:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030ec:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HUAN_MOTOR4_Init+0x60>)
 80030ee:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HUAN_MOTOR4_Init+0x64>)
 80030f4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 80030f6:	4802      	ldr	r0, [pc, #8]	; (8003100 <HUAN_MOTOR4_Init+0x4c>)
 80030f8:	f7fe fb3a 	bl	8001770 <huansic_motor_init>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000a40 	.word	0x20000a40
 8003104:	200007a4 	.word	0x200007a4
 8003108:	3d4ccccd 	.word	0x3d4ccccd
 800310c:	20000834 	.word	0x20000834
 8003110:	399d4952 	.word	0x399d4952
 8003114:	37a7c5ac 	.word	0x37a7c5ac
 8003118:	387ba882 	.word	0x387ba882

0800311c <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HUAN_IMU_Init+0x14>)
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HUAN_IMU_Init+0x18>)
 8003124:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8003126:	4802      	ldr	r0, [pc, #8]	; (8003130 <HUAN_IMU_Init+0x14>)
 8003128:	f7fd ff90 	bl	800104c <huansic_jy62_init>
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000a7c 	.word	0x20000a7c
 8003134:	200008c0 	.word	0x200008c0

08003138 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HUAN_ZIGBEE_Init+0x14>)
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HUAN_ZIGBEE_Init+0x18>)
 8003140:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <HUAN_ZIGBEE_Init+0x14>)
 8003144:	f7fe fd0c 	bl	8001b60 <huansic_xb_init>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000ad4 	.word	0x20000ad4
 8003150:	2000087c 	.word	0x2000087c

08003154 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_UART_RxCpltCallback+0x34>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d10b      	bne.n	800317e <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_UART_RxCpltCallback+0x34>)
 8003168:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 8003170:	4805      	ldr	r0, [pc, #20]	; (8003188 <HAL_UART_RxCpltCallback+0x34>)
 8003172:	f7fe f8c1 	bl	80012f8 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 8003176:	e002      	b.n	800317e <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <HAL_UART_RxCpltCallback+0x34>)
 800317a:	f7fd ff9d 	bl	80010b8 <huansic_jy62_dma_isr>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000a7c 	.word	0x20000a7c

0800318c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_UART_ErrorCallback+0x34>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d10b      	bne.n	80031b6 <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_UART_ErrorCallback+0x34>)
 80031a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 80031a8:	4805      	ldr	r0, [pc, #20]	; (80031c0 <HAL_UART_ErrorCallback+0x34>)
 80031aa:	f7fe f8f0 	bl	800138e <huansic_jy62_error>
		else
			huansic_jy62_dma_error(&himu);
	} /*else if(){

	}*/
}
 80031ae:	e002      	b.n	80031b6 <HAL_UART_ErrorCallback+0x2a>
			huansic_jy62_dma_error(&himu);
 80031b0:	4803      	ldr	r0, [pc, #12]	; (80031c0 <HAL_UART_ErrorCallback+0x34>)
 80031b2:	f7fe f8d8 	bl	8001366 <huansic_jy62_dma_error>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000a7c 	.word	0x20000a7c

080031c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c8:	b672      	cpsid	i
}
 80031ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031cc:	e7fe      	b.n	80031cc <Error_Handler+0x8>

080031ce <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
	...

080031dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	2301      	movs	r3, #1
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	1dfb      	adds	r3, r7, #7
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2301      	movs	r3, #1
 80031f6:	2200      	movs	r2, #0
 80031f8:	2178      	movs	r1, #120	; 0x78
 80031fa:	4803      	ldr	r0, [pc, #12]	; (8003208 <ssd1306_WriteCommand+0x2c>)
 80031fc:	f001 fe74 	bl	8004ee8 <HAL_I2C_Mem_Write>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000630 	.word	0x20000630

0800320c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af04      	add	r7, sp, #16
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f04f 32ff 	mov.w	r2, #4294967295
 800321e:	9202      	str	r2, [sp, #8]
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2301      	movs	r3, #1
 8003228:	2240      	movs	r2, #64	; 0x40
 800322a:	2178      	movs	r1, #120	; 0x78
 800322c:	4803      	ldr	r0, [pc, #12]	; (800323c <ssd1306_WriteData+0x30>)
 800322e:	f001 fe5b 	bl	8004ee8 <HAL_I2C_Mem_Write>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000630 	.word	0x20000630

08003240 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003244:	f7ff ffc3 	bl	80031ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003248:	2064      	movs	r0, #100	; 0x64
 800324a:	f000 fda9 	bl	8003da0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f8be 	bl	80033d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003254:	2020      	movs	r0, #32
 8003256:	f7ff ffc1 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800325a:	2000      	movs	r0, #0
 800325c:	f7ff ffbe 	bl	80031dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003260:	20b0      	movs	r0, #176	; 0xb0
 8003262:	f7ff ffbb 	bl	80031dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003266:	20c8      	movs	r0, #200	; 0xc8
 8003268:	f7ff ffb8 	bl	80031dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800326c:	2000      	movs	r0, #0
 800326e:	f7ff ffb5 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003272:	2010      	movs	r0, #16
 8003274:	f7ff ffb2 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003278:	2040      	movs	r0, #64	; 0x40
 800327a:	f7ff ffaf 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800327e:	20ff      	movs	r0, #255	; 0xff
 8003280:	f000 f892 	bl	80033a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003284:	20a1      	movs	r0, #161	; 0xa1
 8003286:	f7ff ffa9 	bl	80031dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800328a:	20a6      	movs	r0, #166	; 0xa6
 800328c:	f7ff ffa6 	bl	80031dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003290:	20a8      	movs	r0, #168	; 0xa8
 8003292:	f7ff ffa3 	bl	80031dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8003296:	201f      	movs	r0, #31
 8003298:	f7ff ffa0 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800329c:	20a4      	movs	r0, #164	; 0xa4
 800329e:	f7ff ff9d 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80032a2:	20d3      	movs	r0, #211	; 0xd3
 80032a4:	f7ff ff9a 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7ff ff97 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80032ae:	20d5      	movs	r0, #213	; 0xd5
 80032b0:	f7ff ff94 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80032b4:	20f0      	movs	r0, #240	; 0xf0
 80032b6:	f7ff ff91 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80032ba:	20d9      	movs	r0, #217	; 0xd9
 80032bc:	f7ff ff8e 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80032c0:	2022      	movs	r0, #34	; 0x22
 80032c2:	f7ff ff8b 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80032c6:	20da      	movs	r0, #218	; 0xda
 80032c8:	f7ff ff88 	bl	80031dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80032cc:	2002      	movs	r0, #2
 80032ce:	f7ff ff85 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80032d2:	20db      	movs	r0, #219	; 0xdb
 80032d4:	f7ff ff82 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80032d8:	2020      	movs	r0, #32
 80032da:	f7ff ff7f 	bl	80031dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80032de:	208d      	movs	r0, #141	; 0x8d
 80032e0:	f7ff ff7c 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80032e4:	2014      	movs	r0, #20
 80032e6:	f7ff ff79 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80032ea:	2001      	movs	r0, #1
 80032ec:	f000 f870 	bl	80033d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f000 f80f 	bl	8003314 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80032f6:	f000 f82f 	bl	8003358 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <ssd1306_Init+0xd0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <ssd1306_Init+0xd0>)
 8003302:	2200      	movs	r2, #0
 8003304:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003306:	4b02      	ldr	r3, [pc, #8]	; (8003310 <ssd1306_Init+0xd0>)
 8003308:	2201      	movs	r2, #1
 800330a:	711a      	strb	r2, [r3, #4]
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000dd4 	.word	0x20000dd4

08003314 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e00d      	b.n	8003340 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <ssd1306_Fill+0x1a>
 800332a:	2100      	movs	r1, #0
 800332c:	e000      	b.n	8003330 <ssd1306_Fill+0x1c>
 800332e:	21ff      	movs	r1, #255	; 0xff
 8003330:	4a08      	ldr	r2, [pc, #32]	; (8003354 <ssd1306_Fill+0x40>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	460a      	mov	r2, r1
 8003338:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3301      	adds	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d3ed      	bcc.n	8003324 <ssd1306_Fill+0x10>
    }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000bd4 	.word	0x20000bd4

08003358 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800335e:	2300      	movs	r3, #0
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	e016      	b.n	8003392 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	3b50      	subs	r3, #80	; 0x50
 8003368:	b2db      	uxtb	r3, r3
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff36 	bl	80031dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003370:	2000      	movs	r0, #0
 8003372:	f7ff ff33 	bl	80031dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003376:	2010      	movs	r0, #16
 8003378:	f7ff ff30 	bl	80031dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	01db      	lsls	r3, r3, #7
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <ssd1306_UpdateScreen+0x4c>)
 8003382:	4413      	add	r3, r2
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff40 	bl	800320c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	3301      	adds	r3, #1
 8003390:	71fb      	strb	r3, [r7, #7]
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d9e5      	bls.n	8003364 <ssd1306_UpdateScreen+0xc>
    }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000bd4 	.word	0x20000bd4

080033a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80033b2:	2381      	movs	r3, #129	; 0x81
 80033b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff0f 	bl	80031dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff0b 	bl	80031dc <ssd1306_WriteCommand>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80033e0:	23af      	movs	r3, #175	; 0xaf
 80033e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <ssd1306_SetDisplayOn+0x38>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	715a      	strb	r2, [r3, #5]
 80033ea:	e004      	b.n	80033f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80033ec:	23ae      	movs	r3, #174	; 0xae
 80033ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <ssd1306_SetDisplayOn+0x38>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff feef 	bl	80031dc <ssd1306_WriteCommand>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000dd4 	.word	0x20000dd4

0800340c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_MspInit+0x5c>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_MspInit+0x5c>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6193      	str	r3, [r2, #24]
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_MspInit+0x5c>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_MspInit+0x5c>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <HAL_MspInit+0x5c>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	61d3      	str	r3, [r2, #28]
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_MspInit+0x5c>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_MspInit+0x60>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_MspInit+0x60>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40021000 	.word	0x40021000
 800346c:	40010000 	.word	0x40010000

08003470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_I2C_MspInit+0x90>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d132      	bne.n	80034f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_I2C_MspInit+0x94>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_I2C_MspInit+0x94>)
 8003496:	f043 0308 	orr.w	r3, r3, #8
 800349a:	6193      	str	r3, [r2, #24]
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_I2C_MspInit+0x94>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ae:	2312      	movs	r3, #18
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b2:	2303      	movs	r3, #3
 80034b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4812      	ldr	r0, [pc, #72]	; (8003508 <HAL_I2C_MspInit+0x98>)
 80034be:	f001 fa23 	bl	8004908 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_I2C_MspInit+0x9c>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	4a0c      	ldr	r2, [pc, #48]	; (800350c <HAL_I2C_MspInit+0x9c>)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_I2C_MspInit+0x94>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a08      	ldr	r2, [pc, #32]	; (8003504 <HAL_I2C_MspInit+0x94>)
 80034e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034e8:	61d3      	str	r3, [r2, #28]
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_I2C_MspInit+0x94>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40005400 	.word	0x40005400
 8003504:	40021000 	.word	0x40021000
 8003508:	40010c00 	.word	0x40010c00
 800350c:	40010000 	.word	0x40010000

08003510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1f      	ldr	r2, [pc, #124]	; (800359c <HAL_TIM_Base_MspInit+0x8c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10c      	bne.n	800353c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003522:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800352c:	6193      	str	r3, [r2, #24]
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800353a:	e02a      	b.n	8003592 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_TIM_Base_MspInit+0x94>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d114      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003546:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 800354c:	f043 0310 	orr.w	r3, r3, #16
 8003550:	61d3      	str	r3, [r2, #28]
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2101      	movs	r1, #1
 8003562:	2036      	movs	r0, #54	; 0x36
 8003564:	f000 fd17 	bl	8003f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003568:	2036      	movs	r0, #54	; 0x36
 800356a:	f000 fd30 	bl	8003fce <HAL_NVIC_EnableIRQ>
}
 800356e:	e010      	b.n	8003592 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <HAL_TIM_Base_MspInit+0x98>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10b      	bne.n	8003592 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003584:	6193      	str	r3, [r2, #24]
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_TIM_Base_MspInit+0x90>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40001000 	.word	0x40001000
 80035a8:	40013400 	.word	0x40013400

080035ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b090      	sub	sp, #64	; 0x40
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d14f      	bne.n	800366c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035cc:	4b68      	ldr	r3, [pc, #416]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a67      	ldr	r2, [pc, #412]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	61d3      	str	r3, [r2, #28]
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	4b62      	ldr	r3, [pc, #392]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4a61      	ldr	r2, [pc, #388]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6193      	str	r3, [r2, #24]
 80035f0:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fc:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	4a5b      	ldr	r2, [pc, #364]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	6193      	str	r3, [r2, #24]
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361a:	2300      	movs	r3, #0
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003626:	4619      	mov	r1, r3
 8003628:	4852      	ldr	r0, [pc, #328]	; (8003774 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800362a:	f001 f96d 	bl	8004908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800362e:	2308      	movs	r3, #8
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003632:	2300      	movs	r3, #0
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363e:	4619      	mov	r1, r3
 8003640:	484d      	ldr	r0, [pc, #308]	; (8003778 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003642:	f001 f961 	bl	8004908 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003646:	4b4d      	ldr	r3, [pc, #308]	; (800377c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003664:	4a45      	ldr	r2, [pc, #276]	; (800377c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800366a:	e07c      	b.n	8003766 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a43      	ldr	r2, [pc, #268]	; (8003780 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d124      	bne.n	80036c0 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	61d3      	str	r3, [r2, #28]
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	4a37      	ldr	r2, [pc, #220]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	6193      	str	r3, [r2, #24]
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036a6:	23c0      	movs	r3, #192	; 0xc0
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036aa:	2300      	movs	r3, #0
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b6:	4619      	mov	r1, r3
 80036b8:	482e      	ldr	r0, [pc, #184]	; (8003774 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80036ba:	f001 f925 	bl	8004908 <HAL_GPIO_Init>
}
 80036be:	e052      	b.n	8003766 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d124      	bne.n	8003714 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a28      	ldr	r2, [pc, #160]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	61d3      	str	r3, [r2, #28]
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e2:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	6193      	str	r3, [r2, #24]
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036fa:	23c0      	movs	r3, #192	; 0xc0
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	2300      	movs	r3, #0
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800370a:	4619      	mov	r1, r3
 800370c:	481a      	ldr	r0, [pc, #104]	; (8003778 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800370e:	f001 f8fb 	bl	8004908 <HAL_GPIO_Init>
}
 8003712:	e028      	b.n	8003766 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d123      	bne.n	8003766 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	61d3      	str	r3, [r2, #28]
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6193      	str	r3, [r2, #24]
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800374e:	2303      	movs	r3, #3
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003752:	2300      	movs	r3, #0
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800375e:	4619      	mov	r1, r3
 8003760:	4804      	ldr	r0, [pc, #16]	; (8003774 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003762:	f001 f8d1 	bl	8004908 <HAL_GPIO_Init>
}
 8003766:	bf00      	nop
 8003768:	3740      	adds	r7, #64	; 0x40
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40010800 	.word	0x40010800
 8003778:	40010c00 	.word	0x40010c00
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00

0800378c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_TIM_MspPostInit+0x98>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d119      	bne.n	80037e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_TIM_MspPostInit+0x9c>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_TIM_MspPostInit+0x9c>)
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	6193      	str	r3, [r2, #24]
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_TIM_MspPostInit+0x9c>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80037c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80037c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ce:	2302      	movs	r3, #2
 80037d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4619      	mov	r1, r3
 80037d8:	4814      	ldr	r0, [pc, #80]	; (800382c <HAL_TIM_MspPostInit+0xa0>)
 80037da:	f001 f895 	bl	8004908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80037de:	e01d      	b.n	800381c <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIM_MspPostInit+0xa4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d118      	bne.n	800381c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <HAL_TIM_MspPostInit+0x9c>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_TIM_MspPostInit+0x9c>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6193      	str	r3, [r2, #24]
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_TIM_MspPostInit+0x9c>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003802:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380c:	2302      	movs	r3, #2
 800380e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4619      	mov	r1, r3
 8003816:	4807      	ldr	r0, [pc, #28]	; (8003834 <HAL_TIM_MspPostInit+0xa8>)
 8003818:	f001 f876 	bl	8004908 <HAL_GPIO_Init>
}
 800381c:	bf00      	nop
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40021000 	.word	0x40021000
 800382c:	40010800 	.word	0x40010800
 8003830:	40013400 	.word	0x40013400
 8003834:	40011000 	.word	0x40011000

08003838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6a      	ldr	r2, [pc, #424]	; (80039fc <HAL_UART_MspInit+0x1c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d156      	bne.n	8003906 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003858:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	4a68      	ldr	r2, [pc, #416]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 800385e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003862:	61d3      	str	r3, [r2, #28]
 8003864:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003870:	4b63      	ldr	r3, [pc, #396]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a62      	ldr	r2, [pc, #392]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003888:	2304      	movs	r3, #4
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 031c 	add.w	r3, r7, #28
 8003898:	4619      	mov	r1, r3
 800389a:	485a      	ldr	r0, [pc, #360]	; (8003a04 <HAL_UART_MspInit+0x1cc>)
 800389c:	f001 f834 	bl	8004908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 80038a0:	2308      	movs	r3, #8
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	4619      	mov	r1, r3
 80038b2:	4854      	ldr	r0, [pc, #336]	; (8003a04 <HAL_UART_MspInit+0x1cc>)
 80038b4:	f001 f828 	bl	8004908 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038ba:	4a54      	ldr	r2, [pc, #336]	; (8003a0c <HAL_UART_MspInit+0x1d4>)
 80038bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038be:	4b52      	ldr	r3, [pc, #328]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038ca:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d0:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038de:	2200      	movs	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038e2:	4b49      	ldr	r3, [pc, #292]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038e8:	4847      	ldr	r0, [pc, #284]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038ea:	f000 fb8b 	bl	8004004 <HAL_DMA_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80038f4:	f7ff fc66 	bl	80031c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a43      	ldr	r2, [pc, #268]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
 80038fe:	4a42      	ldr	r2, [pc, #264]	; (8003a08 <HAL_UART_MspInit+0x1d0>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003904:	e076      	b.n	80039f4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <HAL_UART_MspInit+0x1d8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d171      	bne.n	80039f4 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 8003916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003928:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 800392e:	f043 0310 	orr.w	r3, r3, #16
 8003932:	6193      	str	r3, [r2, #24]
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <HAL_UART_MspInit+0x1c8>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8003940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800394a:	2303      	movs	r3, #3
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4619      	mov	r1, r3
 8003954:	482f      	ldr	r0, [pc, #188]	; (8003a14 <HAL_UART_MspInit+0x1dc>)
 8003956:	f000 ffd7 	bl	8004908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 800395a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4829      	ldr	r0, [pc, #164]	; (8003a14 <HAL_UART_MspInit+0x1dc>)
 8003970:	f000 ffca 	bl	8004908 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_UART_MspInit+0x1e0>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	f043 0310 	orr.w	r3, r3, #16
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003992:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <HAL_UART_MspInit+0x1e0>)
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <HAL_UART_MspInit+0x1e8>)
 800399c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039c8:	4814      	ldr	r0, [pc, #80]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039ca:	f000 fb1b 	bl	8004004 <HAL_DMA_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80039d4:	f7ff fbf6 	bl	80031c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_UART_MspInit+0x1e4>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2102      	movs	r1, #2
 80039e8:	2027      	movs	r0, #39	; 0x27
 80039ea:	f000 fad4 	bl	8003f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039ee:	2027      	movs	r0, #39	; 0x27
 80039f0:	f000 faed 	bl	8003fce <HAL_NVIC_EnableIRQ>
}
 80039f4:	bf00      	nop
 80039f6:	3730      	adds	r7, #48	; 0x30
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40004400 	.word	0x40004400
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40010800 	.word	0x40010800
 8003a08:	20000904 	.word	0x20000904
 8003a0c:	4002006c 	.word	0x4002006c
 8003a10:	40004800 	.word	0x40004800
 8003a14:	40011000 	.word	0x40011000
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	20000948 	.word	0x20000948
 8003a20:	40020030 	.word	0x40020030

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a6a:	f000 f97d 	bl	8003d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Channel3_IRQHandler+0x10>)
 8003a7a:	f000 fcdb 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000948 	.word	0x20000948

08003a88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <DMA1_Channel6_IRQHandler+0x24>)
 8003a8e:	7a1b      	ldrb	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8003a94:	4805      	ldr	r0, [pc, #20]	; (8003aac <DMA1_Channel6_IRQHandler+0x24>)
 8003a96:	f7fe f879 	bl	8001b8c <huansic_xb_decodeHeader>
 8003a9a:	e002      	b.n	8003aa2 <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8003a9c:	4803      	ldr	r0, [pc, #12]	; (8003aac <DMA1_Channel6_IRQHandler+0x24>)
 8003a9e:	f7fe f8b3 	bl	8001c08 <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003aa2:	4803      	ldr	r0, [pc, #12]	; (8003ab0 <DMA1_Channel6_IRQHandler+0x28>)
 8003aa4:	f000 fcc6 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000ad4 	.word	0x20000ad4
 8003ab0:	20000904 	.word	0x20000904

08003ab4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <USART3_IRQHandler+0x10>)
 8003aba:	f003 fbdf 	bl	800727c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200008c0 	.word	0x200008c0

08003ac8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8003acc:	4808      	ldr	r0, [pc, #32]	; (8003af0 <TIM6_IRQHandler+0x28>)
 8003ace:	f7fd ff0d 	bl	80018ec <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8003ad2:	4808      	ldr	r0, [pc, #32]	; (8003af4 <TIM6_IRQHandler+0x2c>)
 8003ad4:	f7fd ff0a 	bl	80018ec <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8003ad8:	4807      	ldr	r0, [pc, #28]	; (8003af8 <TIM6_IRQHandler+0x30>)
 8003ada:	f7fd ff07 	bl	80018ec <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8003ade:	4807      	ldr	r0, [pc, #28]	; (8003afc <TIM6_IRQHandler+0x34>)
 8003ae0:	f7fd ff04 	bl	80018ec <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ae4:	4806      	ldr	r0, [pc, #24]	; (8003b00 <TIM6_IRQHandler+0x38>)
 8003ae6:	f002 fc23 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000098c 	.word	0x2000098c
 8003af4:	200009c8 	.word	0x200009c8
 8003af8:	20000a04 	.word	0x20000a04
 8003afc:	20000a40 	.word	0x20000a40
 8003b00:	200007ec 	.word	0x200007ec

08003b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
	return 1;
 8003b08:	2301      	movs	r3, #1
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <_kill>:

int _kill(int pid, int sig)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b1c:	f004 f91e 	bl	8007d5c <__errno>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2216      	movs	r2, #22
 8003b24:	601a      	str	r2, [r3, #0]
	return -1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_exit>:

void _exit (int status)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ffe7 	bl	8003b12 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b44:	e7fe      	b.n	8003b44 <_exit+0x12>

08003b46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e00a      	b.n	8003b6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b58:	f3af 8000 	nop.w
 8003b5c:	4601      	mov	r1, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	60ba      	str	r2, [r7, #8]
 8003b64:	b2ca      	uxtb	r2, r1
 8003b66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	dbf0      	blt.n	8003b58 <_read+0x12>
	}

return len;
 8003b76:	687b      	ldr	r3, [r7, #4]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e009      	b.n	8003ba6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	60ba      	str	r2, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	dbf1      	blt.n	8003b92 <_write+0x12>
	}
	return len;
 8003bae:	687b      	ldr	r3, [r7, #4]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_close>:

int _close(int file)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	return -1;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bde:	605a      	str	r2, [r3, #4]
	return 0;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <_isatty>:

int _isatty(int file)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	return 1;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <_sbrk+0x5c>)
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <_sbrk+0x60>)
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <_sbrk+0x64>)
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <_sbrk+0x68>)
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <_sbrk+0x64>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d207      	bcs.n	8003c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c48:	f004 f888 	bl	8007d5c <__errno>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	220c      	movs	r2, #12
 8003c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	e009      	b.n	8003c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <_sbrk+0x64>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <_sbrk+0x64>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <_sbrk+0x64>)
 8003c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	2000c000 	.word	0x2000c000
 8003c78:	00000400 	.word	0x00000400
 8003c7c:	20000ddc 	.word	0x20000ddc
 8003c80:	20000df8 	.word	0x20000df8

08003c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c90:	480c      	ldr	r0, [pc, #48]	; (8003cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c92:	490d      	ldr	r1, [pc, #52]	; (8003cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c98:	e002      	b.n	8003ca0 <LoopCopyDataInit>

08003c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c9e:	3304      	adds	r3, #4

08003ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ca4:	d3f9      	bcc.n	8003c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ca8:	4c0a      	ldr	r4, [pc, #40]	; (8003cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cac:	e001      	b.n	8003cb2 <LoopFillZerobss>

08003cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cb0:	3204      	adds	r2, #4

08003cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cb4:	d3fb      	bcc.n	8003cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cb6:	f7ff ffe5 	bl	8003c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cba:	f004 f867 	bl	8007d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cbe:	f7fe fc4f 	bl	8002560 <main>
  bx lr
 8003cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8003cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003ccc:	08008f48 	.word	0x08008f48
  ldr r2, =_sbss
 8003cd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003cd4:	20000df4 	.word	0x20000df4

08003cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cd8:	e7fe      	b.n	8003cd8 <ADC1_2_IRQHandler>
	...

08003cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_Init+0x28>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_Init+0x28>)
 8003ce6:	f043 0310 	orr.w	r3, r3, #16
 8003cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 f947 	bl	8003f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf2:	200f      	movs	r0, #15
 8003cf4:	f000 f808 	bl	8003d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf8:	f7ff fb88 	bl	800340c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40022000 	.word	0x40022000

08003d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_InitTick+0x54>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <HAL_InitTick+0x58>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f95f 	bl	8003fea <HAL_SYSTICK_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00e      	b.n	8003d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d80a      	bhi.n	8003d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f000 f927 	bl	8003f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <HAL_InitTick+0x5c>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	2000000c 	.word	0x2000000c
 8003d64:	20000008 	.word	0x20000008

08003d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_IncTick+0x1c>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_IncTick+0x20>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <HAL_IncTick+0x20>)
 8003d7a:	6013      	str	r3, [r2, #0]
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	2000000c 	.word	0x2000000c
 8003d88:	20000de0 	.word	0x20000de0

08003d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <HAL_GetTick+0x10>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000de0 	.word	0x20000de0

08003da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_GetTick>
 8003dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d005      	beq.n	8003dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_Delay+0x44>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dc6:	bf00      	nop
 8003dc8:	f7ff ffe0 	bl	8003d8c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d8f7      	bhi.n	8003dc8 <HAL_Delay+0x28>
  {
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000000c 	.word	0x2000000c

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4906      	ldr	r1, [pc, #24]	; (8003e80 <__NVIC_EnableIRQ+0x34>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0a      	blt.n	8003eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	490c      	ldr	r1, [pc, #48]	; (8003ed0 <__NVIC_SetPriority+0x4c>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eac:	e00a      	b.n	8003ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <__NVIC_SetPriority+0x50>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	761a      	strb	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e100 	.word	0xe000e100
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf28      	it	cs
 8003ef6:	2304      	movcs	r3, #4
 8003ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d902      	bls.n	8003f08 <NVIC_EncodePriority+0x30>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3b03      	subs	r3, #3
 8003f06:	e000      	b.n	8003f0a <NVIC_EncodePriority+0x32>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f20:	f04f 31ff 	mov.w	r1, #4294967295
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	4313      	orrs	r3, r2
         );
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	; 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f4c:	d301      	bcc.n	8003f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e00f      	b.n	8003f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <SysTick_Config+0x40>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	f7ff ff90 	bl	8003e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <SysTick_Config+0x40>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <SysTick_Config+0x40>)
 8003f6c:	2207      	movs	r2, #7
 8003f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	e000e010 	.word	0xe000e010

08003f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff2d 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa8:	f7ff ff42 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	f7ff ff90 	bl	8003ed8 <NVIC_EncodePriority>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff5f 	bl	8003e84 <__NVIC_SetPriority>
}
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff35 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff ffa2 	bl	8003f3c <SysTick_Config>
 8003ff8:	4603      	mov	r3, r0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e059      	b.n	80040ce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_DMA_Init+0xd4>)
 8004022:	429a      	cmp	r2, r3
 8004024:	d80f      	bhi.n	8004046 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <HAL_DMA_Init+0xd8>)
 800402e:	4413      	add	r3, r2
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <HAL_DMA_Init+0xdc>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	009a      	lsls	r2, r3, #2
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_DMA_Init+0xe0>)
 8004042:	63da      	str	r2, [r3, #60]	; 0x3c
 8004044:	e00e      	b.n	8004064 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_DMA_Init+0xe4>)
 800404e:	4413      	add	r3, r2
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_DMA_Init+0xdc>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_DMA_Init+0xe8>)
 8004062:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800407a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800407e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	40020407 	.word	0x40020407
 80040dc:	bffdfff8 	.word	0xbffdfff8
 80040e0:	cccccccd 	.word	0xcccccccd
 80040e4:	40020000 	.word	0x40020000
 80040e8:	bffdfbf8 	.word	0xbffdfbf8
 80040ec:	40020400 	.word	0x40020400

080040f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_DMA_Start_IT+0x20>
 800410c:	2302      	movs	r3, #2
 800410e:	e04a      	b.n	80041a6 <HAL_DMA_Start_IT+0xb6>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800411e:	2b01      	cmp	r3, #1
 8004120:	d13a      	bne.n	8004198 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fbb0 	bl	80048ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020e 	orr.w	r2, r2, #14
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e00f      	b.n	8004186 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0204 	bic.w	r2, r2, #4
 8004174:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 020a 	orr.w	r2, r2, #10
 8004184:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e005      	b.n	80041a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2204      	movs	r2, #4
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e020      	b.n	8004218 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 020e 	bic.w	r2, r2, #14
 80041e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
	...

08004224 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004236:	2b02      	cmp	r3, #2
 8004238:	d005      	beq.n	8004246 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e0d6      	b.n	80043f4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 020e 	bic.w	r2, r2, #14
 8004254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	4b64      	ldr	r3, [pc, #400]	; (8004400 <HAL_DMA_Abort_IT+0x1dc>)
 800426e:	429a      	cmp	r2, r3
 8004270:	d958      	bls.n	8004324 <HAL_DMA_Abort_IT+0x100>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a63      	ldr	r2, [pc, #396]	; (8004404 <HAL_DMA_Abort_IT+0x1e0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d04f      	beq.n	800431c <HAL_DMA_Abort_IT+0xf8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a61      	ldr	r2, [pc, #388]	; (8004408 <HAL_DMA_Abort_IT+0x1e4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d048      	beq.n	8004318 <HAL_DMA_Abort_IT+0xf4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a60      	ldr	r2, [pc, #384]	; (800440c <HAL_DMA_Abort_IT+0x1e8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d040      	beq.n	8004312 <HAL_DMA_Abort_IT+0xee>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5e      	ldr	r2, [pc, #376]	; (8004410 <HAL_DMA_Abort_IT+0x1ec>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d038      	beq.n	800430c <HAL_DMA_Abort_IT+0xe8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a5d      	ldr	r2, [pc, #372]	; (8004414 <HAL_DMA_Abort_IT+0x1f0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d030      	beq.n	8004306 <HAL_DMA_Abort_IT+0xe2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <HAL_DMA_Abort_IT+0x1f4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d028      	beq.n	8004300 <HAL_DMA_Abort_IT+0xdc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a53      	ldr	r2, [pc, #332]	; (8004400 <HAL_DMA_Abort_IT+0x1dc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d020      	beq.n	80042fa <HAL_DMA_Abort_IT+0xd6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a57      	ldr	r2, [pc, #348]	; (800441c <HAL_DMA_Abort_IT+0x1f8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d019      	beq.n	80042f6 <HAL_DMA_Abort_IT+0xd2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_DMA_Abort_IT+0x1fc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d012      	beq.n	80042f2 <HAL_DMA_Abort_IT+0xce>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a54      	ldr	r2, [pc, #336]	; (8004424 <HAL_DMA_Abort_IT+0x200>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00a      	beq.n	80042ec <HAL_DMA_Abort_IT+0xc8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a53      	ldr	r2, [pc, #332]	; (8004428 <HAL_DMA_Abort_IT+0x204>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d102      	bne.n	80042e6 <HAL_DMA_Abort_IT+0xc2>
 80042e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e4:	e01b      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 80042e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ea:	e018      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 80042ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f0:	e015      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 80042f2:	2310      	movs	r3, #16
 80042f4:	e013      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e011      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 80042fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042fe:	e00e      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 8004300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004304:	e00b      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 8004306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800430a:	e008      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 800430c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004310:	e005      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 8004312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004316:	e002      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 8004318:	2310      	movs	r3, #16
 800431a:	e000      	b.n	800431e <HAL_DMA_Abort_IT+0xfa>
 800431c:	2301      	movs	r3, #1
 800431e:	4a43      	ldr	r2, [pc, #268]	; (800442c <HAL_DMA_Abort_IT+0x208>)
 8004320:	6053      	str	r3, [r2, #4]
 8004322:	e057      	b.n	80043d4 <HAL_DMA_Abort_IT+0x1b0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_DMA_Abort_IT+0x1e0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d04f      	beq.n	80043ce <HAL_DMA_Abort_IT+0x1aa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a35      	ldr	r2, [pc, #212]	; (8004408 <HAL_DMA_Abort_IT+0x1e4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d048      	beq.n	80043ca <HAL_DMA_Abort_IT+0x1a6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a33      	ldr	r2, [pc, #204]	; (800440c <HAL_DMA_Abort_IT+0x1e8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d040      	beq.n	80043c4 <HAL_DMA_Abort_IT+0x1a0>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a32      	ldr	r2, [pc, #200]	; (8004410 <HAL_DMA_Abort_IT+0x1ec>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d038      	beq.n	80043be <HAL_DMA_Abort_IT+0x19a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a30      	ldr	r2, [pc, #192]	; (8004414 <HAL_DMA_Abort_IT+0x1f0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d030      	beq.n	80043b8 <HAL_DMA_Abort_IT+0x194>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2f      	ldr	r2, [pc, #188]	; (8004418 <HAL_DMA_Abort_IT+0x1f4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d028      	beq.n	80043b2 <HAL_DMA_Abort_IT+0x18e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <HAL_DMA_Abort_IT+0x1dc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d020      	beq.n	80043ac <HAL_DMA_Abort_IT+0x188>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2b      	ldr	r2, [pc, #172]	; (800441c <HAL_DMA_Abort_IT+0x1f8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d019      	beq.n	80043a8 <HAL_DMA_Abort_IT+0x184>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a29      	ldr	r2, [pc, #164]	; (8004420 <HAL_DMA_Abort_IT+0x1fc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d012      	beq.n	80043a4 <HAL_DMA_Abort_IT+0x180>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a28      	ldr	r2, [pc, #160]	; (8004424 <HAL_DMA_Abort_IT+0x200>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00a      	beq.n	800439e <HAL_DMA_Abort_IT+0x17a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <HAL_DMA_Abort_IT+0x204>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d102      	bne.n	8004398 <HAL_DMA_Abort_IT+0x174>
 8004392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004396:	e01b      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 8004398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800439c:	e018      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 800439e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043a2:	e015      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043a4:	2310      	movs	r3, #16
 80043a6:	e013      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e011      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b0:	e00e      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043b6:	e00b      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043bc:	e008      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c2:	e005      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c8:	e002      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043ca:	2310      	movs	r3, #16
 80043cc:	e000      	b.n	80043d0 <HAL_DMA_Abort_IT+0x1ac>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4a17      	ldr	r2, [pc, #92]	; (8004430 <HAL_DMA_Abort_IT+0x20c>)
 80043d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
    } 
  }
  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40020080 	.word	0x40020080
 8004404:	40020008 	.word	0x40020008
 8004408:	4002001c 	.word	0x4002001c
 800440c:	40020030 	.word	0x40020030
 8004410:	40020044 	.word	0x40020044
 8004414:	40020058 	.word	0x40020058
 8004418:	4002006c 	.word	0x4002006c
 800441c:	40020408 	.word	0x40020408
 8004420:	4002041c 	.word	0x4002041c
 8004424:	40020430 	.word	0x40020430
 8004428:	40020444 	.word	0x40020444
 800442c:	40020400 	.word	0x40020400
 8004430:	40020000 	.word	0x40020000

08004434 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2204      	movs	r2, #4
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80f1 	beq.w	8004640 <HAL_DMA_IRQHandler+0x20c>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80eb 	beq.w	8004640 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	4b5f      	ldr	r3, [pc, #380]	; (800460c <HAL_DMA_IRQHandler+0x1d8>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d958      	bls.n	8004546 <HAL_DMA_IRQHandler+0x112>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a5d      	ldr	r2, [pc, #372]	; (8004610 <HAL_DMA_IRQHandler+0x1dc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d04f      	beq.n	800453e <HAL_DMA_IRQHandler+0x10a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a5c      	ldr	r2, [pc, #368]	; (8004614 <HAL_DMA_IRQHandler+0x1e0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d048      	beq.n	800453a <HAL_DMA_IRQHandler+0x106>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5a      	ldr	r2, [pc, #360]	; (8004618 <HAL_DMA_IRQHandler+0x1e4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d040      	beq.n	8004534 <HAL_DMA_IRQHandler+0x100>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a59      	ldr	r2, [pc, #356]	; (800461c <HAL_DMA_IRQHandler+0x1e8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d038      	beq.n	800452e <HAL_DMA_IRQHandler+0xfa>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a57      	ldr	r2, [pc, #348]	; (8004620 <HAL_DMA_IRQHandler+0x1ec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d030      	beq.n	8004528 <HAL_DMA_IRQHandler+0xf4>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a56      	ldr	r2, [pc, #344]	; (8004624 <HAL_DMA_IRQHandler+0x1f0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d028      	beq.n	8004522 <HAL_DMA_IRQHandler+0xee>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a4d      	ldr	r2, [pc, #308]	; (800460c <HAL_DMA_IRQHandler+0x1d8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d020      	beq.n	800451c <HAL_DMA_IRQHandler+0xe8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a52      	ldr	r2, [pc, #328]	; (8004628 <HAL_DMA_IRQHandler+0x1f4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d019      	beq.n	8004518 <HAL_DMA_IRQHandler+0xe4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a50      	ldr	r2, [pc, #320]	; (800462c <HAL_DMA_IRQHandler+0x1f8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d012      	beq.n	8004514 <HAL_DMA_IRQHandler+0xe0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4f      	ldr	r2, [pc, #316]	; (8004630 <HAL_DMA_IRQHandler+0x1fc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00a      	beq.n	800450e <HAL_DMA_IRQHandler+0xda>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a4d      	ldr	r2, [pc, #308]	; (8004634 <HAL_DMA_IRQHandler+0x200>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d102      	bne.n	8004508 <HAL_DMA_IRQHandler+0xd4>
 8004502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004506:	e01b      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 8004508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800450c:	e018      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 800450e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004512:	e015      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	e013      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 8004518:	2304      	movs	r3, #4
 800451a:	e011      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 800451c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004520:	e00e      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 8004522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004526:	e00b      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 8004528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800452c:	e008      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 800452e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004532:	e005      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	e002      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 800453a:	2340      	movs	r3, #64	; 0x40
 800453c:	e000      	b.n	8004540 <HAL_DMA_IRQHandler+0x10c>
 800453e:	2304      	movs	r3, #4
 8004540:	4a3d      	ldr	r2, [pc, #244]	; (8004638 <HAL_DMA_IRQHandler+0x204>)
 8004542:	6053      	str	r3, [r2, #4]
 8004544:	e057      	b.n	80045f6 <HAL_DMA_IRQHandler+0x1c2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a31      	ldr	r2, [pc, #196]	; (8004610 <HAL_DMA_IRQHandler+0x1dc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d04f      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x1bc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2f      	ldr	r2, [pc, #188]	; (8004614 <HAL_DMA_IRQHandler+0x1e0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d048      	beq.n	80045ec <HAL_DMA_IRQHandler+0x1b8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2e      	ldr	r2, [pc, #184]	; (8004618 <HAL_DMA_IRQHandler+0x1e4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d040      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x1b2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_DMA_IRQHandler+0x1e8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d038      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x1ac>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2b      	ldr	r2, [pc, #172]	; (8004620 <HAL_DMA_IRQHandler+0x1ec>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d030      	beq.n	80045da <HAL_DMA_IRQHandler+0x1a6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_DMA_IRQHandler+0x1f0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d028      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x1a0>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a21      	ldr	r2, [pc, #132]	; (800460c <HAL_DMA_IRQHandler+0x1d8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d020      	beq.n	80045ce <HAL_DMA_IRQHandler+0x19a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_DMA_IRQHandler+0x1f4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d019      	beq.n	80045ca <HAL_DMA_IRQHandler+0x196>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a24      	ldr	r2, [pc, #144]	; (800462c <HAL_DMA_IRQHandler+0x1f8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d012      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x192>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_IRQHandler+0x1fc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00a      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x18c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <HAL_DMA_IRQHandler+0x200>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d102      	bne.n	80045ba <HAL_DMA_IRQHandler+0x186>
 80045b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045b8:	e01b      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045be:	e018      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c4:	e015      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	e013      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045ca:	2304      	movs	r3, #4
 80045cc:	e011      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045d2:	e00e      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045d8:	e00b      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045de:	e008      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045e4:	e005      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ea:	e002      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	e000      	b.n	80045f2 <HAL_DMA_IRQHandler+0x1be>
 80045f0:	2304      	movs	r3, #4
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <HAL_DMA_IRQHandler+0x208>)
 80045f4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8136 	beq.w	800486c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004608:	e130      	b.n	800486c <HAL_DMA_IRQHandler+0x438>
 800460a:	bf00      	nop
 800460c:	40020080 	.word	0x40020080
 8004610:	40020008 	.word	0x40020008
 8004614:	4002001c 	.word	0x4002001c
 8004618:	40020030 	.word	0x40020030
 800461c:	40020044 	.word	0x40020044
 8004620:	40020058 	.word	0x40020058
 8004624:	4002006c 	.word	0x4002006c
 8004628:	40020408 	.word	0x40020408
 800462c:	4002041c 	.word	0x4002041c
 8004630:	40020430 	.word	0x40020430
 8004634:	40020444 	.word	0x40020444
 8004638:	40020400 	.word	0x40020400
 800463c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	2202      	movs	r2, #2
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80dd 	beq.w	800480c <HAL_DMA_IRQHandler+0x3d8>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80d7 	beq.w	800480c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020a 	bic.w	r2, r2, #10
 800467a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	4b7b      	ldr	r3, [pc, #492]	; (8004878 <HAL_DMA_IRQHandler+0x444>)
 800468c:	429a      	cmp	r2, r3
 800468e:	d958      	bls.n	8004742 <HAL_DMA_IRQHandler+0x30e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a79      	ldr	r2, [pc, #484]	; (800487c <HAL_DMA_IRQHandler+0x448>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d04f      	beq.n	800473a <HAL_DMA_IRQHandler+0x306>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a78      	ldr	r2, [pc, #480]	; (8004880 <HAL_DMA_IRQHandler+0x44c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d048      	beq.n	8004736 <HAL_DMA_IRQHandler+0x302>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a76      	ldr	r2, [pc, #472]	; (8004884 <HAL_DMA_IRQHandler+0x450>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d040      	beq.n	8004730 <HAL_DMA_IRQHandler+0x2fc>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a75      	ldr	r2, [pc, #468]	; (8004888 <HAL_DMA_IRQHandler+0x454>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d038      	beq.n	800472a <HAL_DMA_IRQHandler+0x2f6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a73      	ldr	r2, [pc, #460]	; (800488c <HAL_DMA_IRQHandler+0x458>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d030      	beq.n	8004724 <HAL_DMA_IRQHandler+0x2f0>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a72      	ldr	r2, [pc, #456]	; (8004890 <HAL_DMA_IRQHandler+0x45c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d028      	beq.n	800471e <HAL_DMA_IRQHandler+0x2ea>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a69      	ldr	r2, [pc, #420]	; (8004878 <HAL_DMA_IRQHandler+0x444>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d020      	beq.n	8004718 <HAL_DMA_IRQHandler+0x2e4>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6e      	ldr	r2, [pc, #440]	; (8004894 <HAL_DMA_IRQHandler+0x460>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d019      	beq.n	8004714 <HAL_DMA_IRQHandler+0x2e0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6c      	ldr	r2, [pc, #432]	; (8004898 <HAL_DMA_IRQHandler+0x464>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d012      	beq.n	8004710 <HAL_DMA_IRQHandler+0x2dc>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6b      	ldr	r2, [pc, #428]	; (800489c <HAL_DMA_IRQHandler+0x468>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00a      	beq.n	800470a <HAL_DMA_IRQHandler+0x2d6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a69      	ldr	r2, [pc, #420]	; (80048a0 <HAL_DMA_IRQHandler+0x46c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d102      	bne.n	8004704 <HAL_DMA_IRQHandler+0x2d0>
 80046fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004702:	e01b      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004708:	e018      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 800470a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800470e:	e015      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004710:	2320      	movs	r3, #32
 8004712:	e013      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004714:	2302      	movs	r3, #2
 8004716:	e011      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800471c:	e00e      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 800471e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004722:	e00b      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004728:	e008      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 800472a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800472e:	e005      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004734:	e002      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 8004736:	2320      	movs	r3, #32
 8004738:	e000      	b.n	800473c <HAL_DMA_IRQHandler+0x308>
 800473a:	2302      	movs	r3, #2
 800473c:	4a59      	ldr	r2, [pc, #356]	; (80048a4 <HAL_DMA_IRQHandler+0x470>)
 800473e:	6053      	str	r3, [r2, #4]
 8004740:	e057      	b.n	80047f2 <HAL_DMA_IRQHandler+0x3be>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a4d      	ldr	r2, [pc, #308]	; (800487c <HAL_DMA_IRQHandler+0x448>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04f      	beq.n	80047ec <HAL_DMA_IRQHandler+0x3b8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a4b      	ldr	r2, [pc, #300]	; (8004880 <HAL_DMA_IRQHandler+0x44c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d048      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x3b4>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <HAL_DMA_IRQHandler+0x450>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3ae>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a48      	ldr	r2, [pc, #288]	; (8004888 <HAL_DMA_IRQHandler+0x454>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d038      	beq.n	80047dc <HAL_DMA_IRQHandler+0x3a8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a47      	ldr	r2, [pc, #284]	; (800488c <HAL_DMA_IRQHandler+0x458>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d030      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3a2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a45      	ldr	r2, [pc, #276]	; (8004890 <HAL_DMA_IRQHandler+0x45c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d028      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x39c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3d      	ldr	r2, [pc, #244]	; (8004878 <HAL_DMA_IRQHandler+0x444>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d020      	beq.n	80047ca <HAL_DMA_IRQHandler+0x396>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a41      	ldr	r2, [pc, #260]	; (8004894 <HAL_DMA_IRQHandler+0x460>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d019      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x392>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a40      	ldr	r2, [pc, #256]	; (8004898 <HAL_DMA_IRQHandler+0x464>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d012      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x38e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a3e      	ldr	r2, [pc, #248]	; (800489c <HAL_DMA_IRQHandler+0x468>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00a      	beq.n	80047bc <HAL_DMA_IRQHandler+0x388>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a3d      	ldr	r2, [pc, #244]	; (80048a0 <HAL_DMA_IRQHandler+0x46c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d102      	bne.n	80047b6 <HAL_DMA_IRQHandler+0x382>
 80047b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047b4:	e01b      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ba:	e018      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c0:	e015      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047c2:	2320      	movs	r3, #32
 80047c4:	e013      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e011      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ce:	e00e      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047d4:	e00b      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047da:	e008      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047e0:	e005      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e6:	e002      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047e8:	2320      	movs	r3, #32
 80047ea:	e000      	b.n	80047ee <HAL_DMA_IRQHandler+0x3ba>
 80047ec:	2302      	movs	r3, #2
 80047ee:	4a2e      	ldr	r2, [pc, #184]	; (80048a8 <HAL_DMA_IRQHandler+0x474>)
 80047f0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d034      	beq.n	800486c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800480a:	e02f      	b.n	800486c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2208      	movs	r2, #8
 8004812:	409a      	lsls	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d028      	beq.n	800486e <HAL_DMA_IRQHandler+0x43a>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d023      	beq.n	800486e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 020e 	bic.w	r2, r2, #14
 8004834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f202 	lsl.w	r2, r1, r2
 8004844:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
    }
  }
  return;
 800486c:	bf00      	nop
 800486e:	bf00      	nop
}
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40020080 	.word	0x40020080
 800487c:	40020008 	.word	0x40020008
 8004880:	4002001c 	.word	0x4002001c
 8004884:	40020030 	.word	0x40020030
 8004888:	40020044 	.word	0x40020044
 800488c:	40020058 	.word	0x40020058
 8004890:	4002006c 	.word	0x4002006c
 8004894:	40020408 	.word	0x40020408
 8004898:	4002041c 	.word	0x4002041c
 800489c:	40020430 	.word	0x40020430
 80048a0:	40020444 	.word	0x40020444
 80048a4:	40020400 	.word	0x40020400
 80048a8:	40020000 	.word	0x40020000

080048ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	2101      	movs	r1, #1
 80048c4:	fa01 f202 	lsl.w	r2, r1, r2
 80048c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d108      	bne.n	80048ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048ea:	e007      	b.n	80048fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
	...

08004908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004908:	b480      	push	{r7}
 800490a:	b08b      	sub	sp, #44	; 0x2c
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800491a:	e179      	b.n	8004c10 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800491c:	2201      	movs	r2, #1
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	429a      	cmp	r2, r3
 8004936:	f040 8168 	bne.w	8004c0a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4a96      	ldr	r2, [pc, #600]	; (8004b98 <HAL_GPIO_Init+0x290>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d05e      	beq.n	8004a02 <HAL_GPIO_Init+0xfa>
 8004944:	4a94      	ldr	r2, [pc, #592]	; (8004b98 <HAL_GPIO_Init+0x290>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d875      	bhi.n	8004a36 <HAL_GPIO_Init+0x12e>
 800494a:	4a94      	ldr	r2, [pc, #592]	; (8004b9c <HAL_GPIO_Init+0x294>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d058      	beq.n	8004a02 <HAL_GPIO_Init+0xfa>
 8004950:	4a92      	ldr	r2, [pc, #584]	; (8004b9c <HAL_GPIO_Init+0x294>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d86f      	bhi.n	8004a36 <HAL_GPIO_Init+0x12e>
 8004956:	4a92      	ldr	r2, [pc, #584]	; (8004ba0 <HAL_GPIO_Init+0x298>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d052      	beq.n	8004a02 <HAL_GPIO_Init+0xfa>
 800495c:	4a90      	ldr	r2, [pc, #576]	; (8004ba0 <HAL_GPIO_Init+0x298>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d869      	bhi.n	8004a36 <HAL_GPIO_Init+0x12e>
 8004962:	4a90      	ldr	r2, [pc, #576]	; (8004ba4 <HAL_GPIO_Init+0x29c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d04c      	beq.n	8004a02 <HAL_GPIO_Init+0xfa>
 8004968:	4a8e      	ldr	r2, [pc, #568]	; (8004ba4 <HAL_GPIO_Init+0x29c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d863      	bhi.n	8004a36 <HAL_GPIO_Init+0x12e>
 800496e:	4a8e      	ldr	r2, [pc, #568]	; (8004ba8 <HAL_GPIO_Init+0x2a0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d046      	beq.n	8004a02 <HAL_GPIO_Init+0xfa>
 8004974:	4a8c      	ldr	r2, [pc, #560]	; (8004ba8 <HAL_GPIO_Init+0x2a0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d85d      	bhi.n	8004a36 <HAL_GPIO_Init+0x12e>
 800497a:	2b12      	cmp	r3, #18
 800497c:	d82a      	bhi.n	80049d4 <HAL_GPIO_Init+0xcc>
 800497e:	2b12      	cmp	r3, #18
 8004980:	d859      	bhi.n	8004a36 <HAL_GPIO_Init+0x12e>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_GPIO_Init+0x80>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004a03 	.word	0x08004a03
 800498c:	080049dd 	.word	0x080049dd
 8004990:	080049ef 	.word	0x080049ef
 8004994:	08004a31 	.word	0x08004a31
 8004998:	08004a37 	.word	0x08004a37
 800499c:	08004a37 	.word	0x08004a37
 80049a0:	08004a37 	.word	0x08004a37
 80049a4:	08004a37 	.word	0x08004a37
 80049a8:	08004a37 	.word	0x08004a37
 80049ac:	08004a37 	.word	0x08004a37
 80049b0:	08004a37 	.word	0x08004a37
 80049b4:	08004a37 	.word	0x08004a37
 80049b8:	08004a37 	.word	0x08004a37
 80049bc:	08004a37 	.word	0x08004a37
 80049c0:	08004a37 	.word	0x08004a37
 80049c4:	08004a37 	.word	0x08004a37
 80049c8:	08004a37 	.word	0x08004a37
 80049cc:	080049e5 	.word	0x080049e5
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	4a75      	ldr	r2, [pc, #468]	; (8004bac <HAL_GPIO_Init+0x2a4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049da:	e02c      	b.n	8004a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	623b      	str	r3, [r7, #32]
          break;
 80049e2:	e029      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	3304      	adds	r3, #4
 80049ea:	623b      	str	r3, [r7, #32]
          break;
 80049ec:	e024      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	3308      	adds	r3, #8
 80049f4:	623b      	str	r3, [r7, #32]
          break;
 80049f6:	e01f      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	330c      	adds	r3, #12
 80049fe:	623b      	str	r3, [r7, #32]
          break;
 8004a00:	e01a      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	623b      	str	r3, [r7, #32]
          break;
 8004a0e:	e013      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a18:	2308      	movs	r3, #8
 8004a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	611a      	str	r2, [r3, #16]
          break;
 8004a22:	e009      	b.n	8004a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a24:	2308      	movs	r3, #8
 8004a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	615a      	str	r2, [r3, #20]
          break;
 8004a2e:	e003      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a30:	2300      	movs	r3, #0
 8004a32:	623b      	str	r3, [r7, #32]
          break;
 8004a34:	e000      	b.n	8004a38 <HAL_GPIO_Init+0x130>
          break;
 8004a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2bff      	cmp	r3, #255	; 0xff
 8004a3c:	d801      	bhi.n	8004a42 <HAL_GPIO_Init+0x13a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	e001      	b.n	8004a46 <HAL_GPIO_Init+0x13e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2bff      	cmp	r3, #255	; 0xff
 8004a4c:	d802      	bhi.n	8004a54 <HAL_GPIO_Init+0x14c>
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	e002      	b.n	8004a5a <HAL_GPIO_Init+0x152>
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	3b08      	subs	r3, #8
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	210f      	movs	r1, #15
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	6a39      	ldr	r1, [r7, #32]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80c1 	beq.w	8004c0a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a88:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <HAL_GPIO_Init+0x2a8>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	4a48      	ldr	r2, [pc, #288]	; (8004bb0 <HAL_GPIO_Init+0x2a8>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	6193      	str	r3, [r2, #24]
 8004a94:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_GPIO_Init+0x2a8>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004aa0:	4a44      	ldr	r2, [pc, #272]	; (8004bb4 <HAL_GPIO_Init+0x2ac>)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	089b      	lsrs	r3, r3, #2
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <HAL_GPIO_Init+0x2b0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01f      	beq.n	8004b0c <HAL_GPIO_Init+0x204>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <HAL_GPIO_Init+0x2b4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d019      	beq.n	8004b08 <HAL_GPIO_Init+0x200>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <HAL_GPIO_Init+0x2b8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_GPIO_Init+0x1fc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a39      	ldr	r2, [pc, #228]	; (8004bc4 <HAL_GPIO_Init+0x2bc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00d      	beq.n	8004b00 <HAL_GPIO_Init+0x1f8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a38      	ldr	r2, [pc, #224]	; (8004bc8 <HAL_GPIO_Init+0x2c0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <HAL_GPIO_Init+0x1f4>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <HAL_GPIO_Init+0x2c4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d101      	bne.n	8004af8 <HAL_GPIO_Init+0x1f0>
 8004af4:	2305      	movs	r3, #5
 8004af6:	e00a      	b.n	8004b0e <HAL_GPIO_Init+0x206>
 8004af8:	2306      	movs	r3, #6
 8004afa:	e008      	b.n	8004b0e <HAL_GPIO_Init+0x206>
 8004afc:	2304      	movs	r3, #4
 8004afe:	e006      	b.n	8004b0e <HAL_GPIO_Init+0x206>
 8004b00:	2303      	movs	r3, #3
 8004b02:	e004      	b.n	8004b0e <HAL_GPIO_Init+0x206>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e002      	b.n	8004b0e <HAL_GPIO_Init+0x206>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_GPIO_Init+0x206>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	f002 0203 	and.w	r2, r2, #3
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	4093      	lsls	r3, r2
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b1e:	4925      	ldr	r1, [pc, #148]	; (8004bb4 <HAL_GPIO_Init+0x2ac>)
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	3302      	adds	r3, #2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4924      	ldr	r1, [pc, #144]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]
 8004b44:	e006      	b.n	8004b54 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	4920      	ldr	r1, [pc, #128]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	491a      	ldr	r1, [pc, #104]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d025      	beq.n	8004bd4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4910      	ldr	r1, [pc, #64]	; (8004bd0 <HAL_GPIO_Init+0x2c8>)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]
 8004b94:	e025      	b.n	8004be2 <HAL_GPIO_Init+0x2da>
 8004b96:	bf00      	nop
 8004b98:	10320000 	.word	0x10320000
 8004b9c:	10310000 	.word	0x10310000
 8004ba0:	10220000 	.word	0x10220000
 8004ba4:	10210000 	.word	0x10210000
 8004ba8:	10120000 	.word	0x10120000
 8004bac:	10110000 	.word	0x10110000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010800 	.word	0x40010800
 8004bbc:	40010c00 	.word	0x40010c00
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	40011800 	.word	0x40011800
 8004bcc:	40011c00 	.word	0x40011c00
 8004bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bd4:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	4913      	ldr	r1, [pc, #76]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	490e      	ldr	r1, [pc, #56]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60cb      	str	r3, [r1, #12]
 8004bfa:	e006      	b.n	8004c0a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	4909      	ldr	r1, [pc, #36]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f47f ae7e 	bne.w	800491c <HAL_GPIO_Init+0x14>
  }
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	372c      	adds	r7, #44	; 0x2c
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	40010400 	.word	0x40010400

08004c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c40:	787b      	ldrb	r3, [r7, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c4c:	e003      	b.n	8004c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	041a      	lsls	r2, r3, #16
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e12b      	b.n	8004eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fe fbf2 	bl	8003470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2224      	movs	r2, #36	; 0x24
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f000 fffc 	bl	8005cc0 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4a81      	ldr	r2, [pc, #516]	; (8004ed4 <HAL_I2C_Init+0x274>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d807      	bhi.n	8004ce4 <HAL_I2C_Init+0x84>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a80      	ldr	r2, [pc, #512]	; (8004ed8 <HAL_I2C_Init+0x278>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	bf94      	ite	ls
 8004cdc:	2301      	movls	r3, #1
 8004cde:	2300      	movhi	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e006      	b.n	8004cf2 <HAL_I2C_Init+0x92>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a7d      	ldr	r2, [pc, #500]	; (8004edc <HAL_I2C_Init+0x27c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	bf94      	ite	ls
 8004cec:	2301      	movls	r3, #1
 8004cee:	2300      	movhi	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0e7      	b.n	8004eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a78      	ldr	r2, [pc, #480]	; (8004ee0 <HAL_I2C_Init+0x280>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	0c9b      	lsrs	r3, r3, #18
 8004d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a6a      	ldr	r2, [pc, #424]	; (8004ed4 <HAL_I2C_Init+0x274>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d802      	bhi.n	8004d34 <HAL_I2C_Init+0xd4>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3301      	adds	r3, #1
 8004d32:	e009      	b.n	8004d48 <HAL_I2C_Init+0xe8>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	4a69      	ldr	r2, [pc, #420]	; (8004ee4 <HAL_I2C_Init+0x284>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	099b      	lsrs	r3, r3, #6
 8004d46:	3301      	adds	r3, #1
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	495c      	ldr	r1, [pc, #368]	; (8004ed4 <HAL_I2C_Init+0x274>)
 8004d64:	428b      	cmp	r3, r1
 8004d66:	d819      	bhi.n	8004d9c <HAL_I2C_Init+0x13c>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1e59      	subs	r1, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d76:	1c59      	adds	r1, r3, #1
 8004d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_I2C_Init+0x138>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1e59      	subs	r1, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d96:	e051      	b.n	8004e3c <HAL_I2C_Init+0x1dc>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	e04f      	b.n	8004e3c <HAL_I2C_Init+0x1dc>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d111      	bne.n	8004dc8 <HAL_I2C_Init+0x168>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1e58      	subs	r0, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	440b      	add	r3, r1
 8004db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e012      	b.n	8004dee <HAL_I2C_Init+0x18e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	1e58      	subs	r0, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	0099      	lsls	r1, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dde:	3301      	adds	r3, #1
 8004de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Init+0x196>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e022      	b.n	8004e3c <HAL_I2C_Init+0x1dc>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10e      	bne.n	8004e1c <HAL_I2C_Init+0x1bc>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1e58      	subs	r0, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	440b      	add	r3, r1
 8004e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e10:	3301      	adds	r3, #1
 8004e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	e00f      	b.n	8004e3c <HAL_I2C_Init+0x1dc>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1e58      	subs	r0, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	0099      	lsls	r1, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e32:	3301      	adds	r3, #1
 8004e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	6809      	ldr	r1, [r1, #0]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6911      	ldr	r1, [r2, #16]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68d2      	ldr	r2, [r2, #12]
 8004e76:	4311      	orrs	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	000186a0 	.word	0x000186a0
 8004ed8:	001e847f 	.word	0x001e847f
 8004edc:	003d08ff 	.word	0x003d08ff
 8004ee0:	431bde83 	.word	0x431bde83
 8004ee4:	10624dd3 	.word	0x10624dd3

08004ee8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	460b      	mov	r3, r1
 8004efc:	813b      	strh	r3, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f02:	f7fe ff43 	bl	8003d8c <HAL_GetTick>
 8004f06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	f040 80d9 	bne.w	80050c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	2319      	movs	r3, #25
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	496d      	ldr	r1, [pc, #436]	; (80050d4 <HAL_I2C_Mem_Write+0x1ec>)
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f971 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0cc      	b.n	80050ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_I2C_Mem_Write+0x56>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e0c5      	b.n	80050ca <HAL_I2C_Mem_Write+0x1e2>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d007      	beq.n	8004f64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2221      	movs	r2, #33	; 0x21
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2240      	movs	r2, #64	; 0x40
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a3a      	ldr	r2, [r7, #32]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a4d      	ldr	r2, [pc, #308]	; (80050d8 <HAL_I2C_Mem_Write+0x1f0>)
 8004fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fa6:	88f8      	ldrh	r0, [r7, #6]
 8004fa8:	893a      	ldrh	r2, [r7, #8]
 8004faa:	8979      	ldrh	r1, [r7, #10]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f890 	bl	80050dc <I2C_RequestMemoryWrite>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d052      	beq.n	8005068 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e081      	b.n	80050ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f9f2 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d107      	bne.n	8004fee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06b      	b.n	80050ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d11b      	bne.n	8005068 <HAL_I2C_Mem_Write+0x180>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d017      	beq.n	8005068 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1aa      	bne.n	8004fc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f9de 	bl	8005436 <I2C_WaitOnBTFFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	2b04      	cmp	r3, #4
 8005086:	d107      	bne.n	8005098 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e016      	b.n	80050ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	00100002 	.word	0x00100002
 80050d8:	ffff0000 	.word	0xffff0000

080050dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	461a      	mov	r2, r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	817b      	strh	r3, [r7, #10]
 80050ee:	460b      	mov	r3, r1
 80050f0:	813b      	strh	r3, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	2200      	movs	r2, #0
 800510e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f878 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d103      	bne.n	8005136 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e05f      	b.n	80051fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	492d      	ldr	r1, [pc, #180]	; (8005204 <I2C_RequestMemoryWrite+0x128>)
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f8b0 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e04c      	b.n	80051fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	6a39      	ldr	r1, [r7, #32]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f91a 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	2b04      	cmp	r3, #4
 800518c:	d107      	bne.n	800519e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e02b      	b.n	80051fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a8:	893b      	ldrh	r3, [r7, #8]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]
 80051b2:	e021      	b.n	80051f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051b4:	893b      	ldrh	r3, [r7, #8]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	6a39      	ldr	r1, [r7, #32]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f8f4 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d107      	bne.n	80051ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e005      	b.n	80051fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ee:	893b      	ldrh	r3, [r7, #8]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	00010002 	.word	0x00010002

08005208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005218:	e025      	b.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d021      	beq.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fe fdb3 	bl	8003d8c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e023      	b.n	80052ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10d      	bne.n	800528c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	e00c      	b.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d0b6      	beq.n	800521a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c4:	e051      	b.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d4:	d123      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f043 0204 	orr.w	r2, r3, #4
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e046      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d021      	beq.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fe fd31 	bl	8003d8c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d116      	bne.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e020      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10c      	bne.n	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	43da      	mvns	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e00b      	b.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	43da      	mvns	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d18d      	bne.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	e02d      	b.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f878 	bl	80054b8 <I2C_IsAcknowledgeFailed>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e02d      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d021      	beq.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fe fcd7 	bl	8003d8c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d116      	bne.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e007      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d1ca      	bne.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005442:	e02d      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f837 	bl	80054b8 <I2C_IsAcknowledgeFailed>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e02d      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d021      	beq.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545c:	f7fe fc96 	bl	8003d8c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e007      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d1ca      	bne.n	8005444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d11b      	bne.n	8005508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f043 0204 	orr.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e272      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8087 	beq.w	8005642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005534:	4b92      	ldr	r3, [pc, #584]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b04      	cmp	r3, #4
 800553e:	d00c      	beq.n	800555a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005540:	4b8f      	ldr	r3, [pc, #572]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b08      	cmp	r3, #8
 800554a:	d112      	bne.n	8005572 <HAL_RCC_OscConfig+0x5e>
 800554c:	4b8c      	ldr	r3, [pc, #560]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d10b      	bne.n	8005572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555a:	4b89      	ldr	r3, [pc, #548]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d06c      	beq.n	8005640 <HAL_RCC_OscConfig+0x12c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d168      	bne.n	8005640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e24c      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557a:	d106      	bne.n	800558a <HAL_RCC_OscConfig+0x76>
 800557c:	4b80      	ldr	r3, [pc, #512]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7f      	ldr	r2, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e02e      	b.n	80055e8 <HAL_RCC_OscConfig+0xd4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <HAL_RCC_OscConfig+0x98>
 8005592:	4b7b      	ldr	r3, [pc, #492]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a7a      	ldr	r2, [pc, #488]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b78      	ldr	r3, [pc, #480]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a77      	ldr	r2, [pc, #476]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e01d      	b.n	80055e8 <HAL_RCC_OscConfig+0xd4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0xbc>
 80055b6:	4b72      	ldr	r3, [pc, #456]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a71      	ldr	r2, [pc, #452]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4b6f      	ldr	r3, [pc, #444]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a6e      	ldr	r2, [pc, #440]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0xd4>
 80055d0:	4b6b      	ldr	r3, [pc, #428]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a6a      	ldr	r2, [pc, #424]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4b68      	ldr	r3, [pc, #416]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a67      	ldr	r2, [pc, #412]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80055e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d013      	beq.n	8005618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fe fbcc 	bl	8003d8c <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f8:	f7fe fbc8 	bl	8003d8c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e200      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560a:	4b5d      	ldr	r3, [pc, #372]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0xe4>
 8005616:	e014      	b.n	8005642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fe fbb8 	bl	8003d8c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fe fbb4 	bl	8003d8c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e1ec      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005632:	4b53      	ldr	r3, [pc, #332]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x10c>
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d063      	beq.n	8005716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800564e:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800565a:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b08      	cmp	r3, #8
 8005664:	d11c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x18c>
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d116      	bne.n	80056a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005672:	4b43      	ldr	r3, [pc, #268]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_RCC_OscConfig+0x176>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e1c0      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568a:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4939      	ldr	r1, [pc, #228]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569e:	e03a      	b.n	8005716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a8:	4b36      	ldr	r3, [pc, #216]	; (8005784 <HAL_RCC_OscConfig+0x270>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fe fb6d 	bl	8003d8c <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b6:	f7fe fb69 	bl	8003d8c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e1a1      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c8:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d4:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4927      	ldr	r1, [pc, #156]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]
 80056e8:	e015      	b.n	8005716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_RCC_OscConfig+0x270>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fe fb4c 	bl	8003d8c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fe fb48 	bl	8003d8c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e180      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d03a      	beq.n	8005798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d019      	beq.n	800575e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572a:	4b17      	ldr	r3, [pc, #92]	; (8005788 <HAL_RCC_OscConfig+0x274>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005730:	f7fe fb2c 	bl	8003d8c <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005738:	f7fe fb28 	bl	8003d8c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e160      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <HAL_RCC_OscConfig+0x26c>)
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005756:	2001      	movs	r0, #1
 8005758:	f000 fada 	bl	8005d10 <RCC_Delay>
 800575c:	e01c      	b.n	8005798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_RCC_OscConfig+0x274>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005764:	f7fe fb12 	bl	8003d8c <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576a:	e00f      	b.n	800578c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576c:	f7fe fb0e 	bl	8003d8c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d908      	bls.n	800578c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e146      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	42420000 	.word	0x42420000
 8005788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578c:	4b92      	ldr	r3, [pc, #584]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e9      	bne.n	800576c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a6 	beq.w	80058f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057aa:	4b8b      	ldr	r3, [pc, #556]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	4b88      	ldr	r3, [pc, #544]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4a87      	ldr	r2, [pc, #540]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c0:	61d3      	str	r3, [r2, #28]
 80057c2:	4b85      	ldr	r3, [pc, #532]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d2:	4b82      	ldr	r3, [pc, #520]	; (80059dc <HAL_RCC_OscConfig+0x4c8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d118      	bne.n	8005810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057de:	4b7f      	ldr	r3, [pc, #508]	; (80059dc <HAL_RCC_OscConfig+0x4c8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a7e      	ldr	r2, [pc, #504]	; (80059dc <HAL_RCC_OscConfig+0x4c8>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ea:	f7fe facf 	bl	8003d8c <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f2:	f7fe facb 	bl	8003d8c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b64      	cmp	r3, #100	; 0x64
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e103      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005804:	4b75      	ldr	r3, [pc, #468]	; (80059dc <HAL_RCC_OscConfig+0x4c8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <HAL_RCC_OscConfig+0x312>
 8005818:	4b6f      	ldr	r3, [pc, #444]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4a6e      	ldr	r2, [pc, #440]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6213      	str	r3, [r2, #32]
 8005824:	e02d      	b.n	8005882 <HAL_RCC_OscConfig+0x36e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x334>
 800582e:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4a69      	ldr	r2, [pc, #420]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	6213      	str	r3, [r2, #32]
 800583a:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	4a66      	ldr	r2, [pc, #408]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	6213      	str	r3, [r2, #32]
 8005846:	e01c      	b.n	8005882 <HAL_RCC_OscConfig+0x36e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b05      	cmp	r3, #5
 800584e:	d10c      	bne.n	800586a <HAL_RCC_OscConfig+0x356>
 8005850:	4b61      	ldr	r3, [pc, #388]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	4a60      	ldr	r2, [pc, #384]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6213      	str	r3, [r2, #32]
 800585c:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	4a5d      	ldr	r2, [pc, #372]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6213      	str	r3, [r2, #32]
 8005868:	e00b      	b.n	8005882 <HAL_RCC_OscConfig+0x36e>
 800586a:	4b5b      	ldr	r3, [pc, #364]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4a5a      	ldr	r2, [pc, #360]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6213      	str	r3, [r2, #32]
 8005876:	4b58      	ldr	r3, [pc, #352]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4a57      	ldr	r2, [pc, #348]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588a:	f7fe fa7f 	bl	8003d8c <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fe fa7b 	bl	8003d8c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e0b1      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a8:	4b4b      	ldr	r3, [pc, #300]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ee      	beq.n	8005892 <HAL_RCC_OscConfig+0x37e>
 80058b4:	e014      	b.n	80058e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b6:	f7fe fa69 	bl	8003d8c <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fe fa65 	bl	8003d8c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e09b      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d4:	4b40      	ldr	r3, [pc, #256]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ee      	bne.n	80058be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4a3b      	ldr	r2, [pc, #236]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8087 	beq.w	8005a0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 030c 	and.w	r3, r3, #12
 8005904:	2b08      	cmp	r3, #8
 8005906:	d061      	beq.n	80059cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d146      	bne.n	800599e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <HAL_RCC_OscConfig+0x4cc>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005916:	f7fe fa39 	bl	8003d8c <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591e:	f7fe fa35 	bl	8003d8c <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e06d      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d108      	bne.n	8005958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	4921      	ldr	r1, [pc, #132]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005954:	4313      	orrs	r3, r2
 8005956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a19      	ldr	r1, [r3, #32]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	430b      	orrs	r3, r1
 800596a:	491b      	ldr	r1, [pc, #108]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005970:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_RCC_OscConfig+0x4cc>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fe fa09 	bl	8003d8c <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597e:	f7fe fa05 	bl	8003d8c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e03d      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x46a>
 800599c:	e035      	b.n	8005a0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_RCC_OscConfig+0x4cc>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fe f9f2 	bl	8003d8c <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fe f9ee 	bl	8003d8c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e026      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x498>
 80059ca:	e01e      	b.n	8005a0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e019      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40007000 	.word	0x40007000
 80059e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_OscConfig+0x500>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d106      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000

08005a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0d0      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b6a      	ldr	r3, [pc, #424]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d910      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b67      	ldr	r3, [pc, #412]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	4965      	ldr	r1, [pc, #404]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0b8      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a74:	4b59      	ldr	r3, [pc, #356]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a58      	ldr	r2, [pc, #352]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a8c:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a52      	ldr	r2, [pc, #328]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	4b50      	ldr	r3, [pc, #320]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	494d      	ldr	r1, [pc, #308]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d040      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d115      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad6:	4b41      	ldr	r3, [pc, #260]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e073      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae6:	4b3d      	ldr	r3, [pc, #244]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e06b      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f023 0203 	bic.w	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4936      	ldr	r1, [pc, #216]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b08:	f7fe f940 	bl	8003d8c <HAL_GetTick>
 8005b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b10:	f7fe f93c 	bl	8003d8c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e053      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 020c 	and.w	r2, r3, #12
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d1eb      	bne.n	8005b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d210      	bcs.n	8005b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f023 0207 	bic.w	r2, r3, #7
 8005b4e:	4922      	ldr	r1, [pc, #136]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e032      	b.n	8005bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4916      	ldr	r1, [pc, #88]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	490e      	ldr	r1, [pc, #56]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ba6:	f000 f821 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_ClockConfig+0x1c4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	490a      	ldr	r1, [pc, #40]	; (8005be0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb8:	5ccb      	ldrb	r3, [r1, r3]
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1cc>)
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <HAL_RCC_ClockConfig+0x1d0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe f89e 	bl	8003d08 <HAL_InitTick>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40022000 	.word	0x40022000
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	08008e54 	.word	0x08008e54
 8005be4:	20000004 	.word	0x20000004
 8005be8:	20000008 	.word	0x20000008

08005bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	b490      	push	{r4, r7}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005bf2:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <HAL_RCC_GetSysClockFreq+0xac>)
 8005bf4:	1d3c      	adds	r4, r7, #4
 8005bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005bfc:	f240 2301 	movw	r3, #513	; 0x201
 8005c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c16:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d002      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x40>
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d003      	beq.n	8005c32 <HAL_RCC_GetSysClockFreq+0x46>
 8005c2a:	e02b      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c2e:	623b      	str	r3, [r7, #32]
      break;
 8005c30:	e02b      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	0c9b      	lsrs	r3, r3, #18
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3328      	adds	r3, #40	; 0x28
 8005c3c:	443b      	add	r3, r7
 8005c3e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c42:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d012      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	0c5b      	lsrs	r3, r3, #17
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	3328      	adds	r3, #40	; 0x28
 8005c5a:	443b      	add	r3, r7
 8005c5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c66:	fb03 f202 	mul.w	r2, r3, r2
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	e004      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4a0b      	ldr	r2, [pc, #44]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	623b      	str	r3, [r7, #32]
      break;
 8005c82:	e002      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c84:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c86:	623b      	str	r3, [r7, #32]
      break;
 8005c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc90      	pop	{r4, r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	08008e30 	.word	0x08008e30
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	00f42400 	.word	0x00f42400
 8005ca4:	003d0900 	.word	0x003d0900
 8005ca8:	007a1200 	.word	0x007a1200

08005cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb0:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	20000004 	.word	0x20000004

08005cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cc4:	f7ff fff2 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	4903      	ldr	r1, [pc, #12]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd6:	5ccb      	ldrb	r3, [r1, r3]
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	08008e64 	.word	0x08008e64

08005ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cec:	f7ff ffde 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	0adb      	lsrs	r3, r3, #11
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	4903      	ldr	r1, [pc, #12]	; (8005d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	08008e64 	.word	0x08008e64

08005d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <RCC_Delay+0x34>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a0a      	ldr	r2, [pc, #40]	; (8005d48 <RCC_Delay+0x38>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	0a5b      	lsrs	r3, r3, #9
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d2c:	bf00      	nop
  }
  while (Delay --);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	60fa      	str	r2, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f9      	bne.n	8005d2c <RCC_Delay+0x1c>
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr
 8005d44:	20000004 	.word	0x20000004
 8005d48:	10624dd3 	.word	0x10624dd3

08005d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e041      	b.n	8005de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fd fbcc 	bl	8003510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fd88 	bl	80068a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e044      	b.n	8005e8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <HAL_TIM_Base_Start_IT+0xac>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <HAL_TIM_Base_Start_IT+0xb0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d00e      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a15      	ldr	r2, [pc, #84]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d111      	bne.n	8005e7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d010      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	e007      	b.n	8005e8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00

08005eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e041      	b.n	8005f42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f839 	bl	8005f4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 fcd8 	bl	80068a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <HAL_TIM_PWM_Start+0x24>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e022      	b.n	8005fc6 <HAL_TIM_PWM_Start+0x6a>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d109      	bne.n	8005f9a <HAL_TIM_PWM_Start+0x3e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e015      	b.n	8005fc6 <HAL_TIM_PWM_Start+0x6a>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d109      	bne.n	8005fb4 <HAL_TIM_PWM_Start+0x58>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	bf14      	ite	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	2300      	moveq	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e008      	b.n	8005fc6 <HAL_TIM_PWM_Start+0x6a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e072      	b.n	80060b4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_PWM_Start+0x82>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fdc:	e013      	b.n	8006006 <HAL_TIM_PWM_Start+0xaa>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0x92>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fec:	e00b      	b.n	8006006 <HAL_TIM_PWM_Start+0xaa>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_PWM_Start+0xa2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ffc:	e003      	b.n	8006006 <HAL_TIM_PWM_Start+0xaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2201      	movs	r2, #1
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff02 	bl	8006e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a28      	ldr	r2, [pc, #160]	; (80060bc <HAL_TIM_PWM_Start+0x160>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIM_PWM_Start+0xcc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a27      	ldr	r2, [pc, #156]	; (80060c0 <HAL_TIM_PWM_Start+0x164>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d101      	bne.n	800602c <HAL_TIM_PWM_Start+0xd0>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_TIM_PWM_Start+0xd2>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <HAL_TIM_PWM_Start+0x160>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d018      	beq.n	800607e <HAL_TIM_PWM_Start+0x122>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <HAL_TIM_PWM_Start+0x164>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_TIM_PWM_Start+0x122>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d00e      	beq.n	800607e <HAL_TIM_PWM_Start+0x122>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_TIM_PWM_Start+0x168>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_TIM_PWM_Start+0x122>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <HAL_TIM_PWM_Start+0x16c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_TIM_PWM_Start+0x122>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a14      	ldr	r2, [pc, #80]	; (80060cc <HAL_TIM_PWM_Start+0x170>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d111      	bne.n	80060a2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b06      	cmp	r3, #6
 800608e:	d010      	beq.n	80060b2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	e007      	b.n	80060b2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40013400 	.word	0x40013400
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00

080060d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e093      	b.n	800620c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fd fa57 	bl	80035ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006114:	f023 0307 	bic.w	r3, r3, #7
 8006118:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 fbbb 	bl	80068a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	4313      	orrs	r3, r2
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006170:	f023 030c 	bic.w	r3, r3, #12
 8006174:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800617c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	4313      	orrs	r3, r2
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	011a      	lsls	r2, r3, #4
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	031b      	lsls	r3, r3, #12
 80061a0:	4313      	orrs	r3, r2
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	4313      	orrs	r3, r2
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006224:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800622c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006234:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800623c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d110      	bne.n	8006266 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d102      	bne.n	8006250 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800624a:	7b7b      	ldrb	r3, [r7, #13]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d001      	beq.n	8006254 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e069      	b.n	8006328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006264:	e031      	b.n	80062ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b04      	cmp	r3, #4
 800626a:	d110      	bne.n	800628e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d102      	bne.n	8006278 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006272:	7b3b      	ldrb	r3, [r7, #12]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d001      	beq.n	800627c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e055      	b.n	8006328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800628c:	e01d      	b.n	80062ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d108      	bne.n	80062a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800629a:	7b7b      	ldrb	r3, [r7, #13]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d102      	bne.n	80062a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062a0:	7b3b      	ldrb	r3, [r7, #12]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d001      	beq.n	80062aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e03e      	b.n	8006328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_TIM_Encoder_Start+0xc4>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d008      	beq.n	80062e8 <HAL_TIM_Encoder_Start+0xd4>
 80062d6:	e00f      	b.n	80062f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2201      	movs	r2, #1
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fd99 	bl	8006e18 <TIM_CCxChannelCmd>
      break;
 80062e6:	e016      	b.n	8006316 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2201      	movs	r2, #1
 80062ee:	2104      	movs	r1, #4
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd91 	bl	8006e18 <TIM_CCxChannelCmd>
      break;
 80062f6:	e00e      	b.n	8006316 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2201      	movs	r2, #1
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fd89 	bl	8006e18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	2104      	movs	r1, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fd82 	bl	8006e18 <TIM_CCxChannelCmd>
      break;
 8006314:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d122      	bne.n	800638c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d11b      	bne.n	800638c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0202 	mvn.w	r2, #2
 800635c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa78 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 8006378:	e005      	b.n	8006386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa6b 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fa7a 	bl	800687a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b04      	cmp	r3, #4
 8006398:	d122      	bne.n	80063e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d11b      	bne.n	80063e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0204 	mvn.w	r2, #4
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa4e 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa41 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fa50 	bl	800687a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d122      	bne.n	8006434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d11b      	bne.n	8006434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0208 	mvn.w	r2, #8
 8006404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2204      	movs	r2, #4
 800640a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa24 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 8006420:	e005      	b.n	800642e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa17 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fa26 	bl	800687a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0310 	and.w	r3, r3, #16
 800643e:	2b10      	cmp	r3, #16
 8006440:	d122      	bne.n	8006488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b10      	cmp	r3, #16
 800644e:	d11b      	bne.n	8006488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0210 	mvn.w	r2, #16
 8006458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2208      	movs	r2, #8
 800645e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9fa 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9ed 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9fc 	bl	800687a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10e      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d107      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0201 	mvn.w	r2, #1
 80064ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9c8 	bl	8006844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064be:	2b80      	cmp	r3, #128	; 0x80
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fd86 	bl	8006fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9c0 	bl	800688c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b20      	cmp	r3, #32
 8006518:	d10e      	bne.n	8006538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b20      	cmp	r3, #32
 8006526:	d107      	bne.n	8006538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0220 	mvn.w	r2, #32
 8006530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fd51 	bl	8006fda <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006556:	2302      	movs	r3, #2
 8006558:	e0ac      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b0c      	cmp	r3, #12
 8006566:	f200 809f 	bhi.w	80066a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080066a9 	.word	0x080066a9
 8006578:	080066a9 	.word	0x080066a9
 800657c:	080066a9 	.word	0x080066a9
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080066a9 	.word	0x080066a9
 8006588:	080066a9 	.word	0x080066a9
 800658c:	080066a9 	.word	0x080066a9
 8006590:	08006627 	.word	0x08006627
 8006594:	080066a9 	.word	0x080066a9
 8006598:	080066a9 	.word	0x080066a9
 800659c:	080066a9 	.word	0x080066a9
 80065a0:	08006667 	.word	0x08006667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f9f2 	bl	8006994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0208 	orr.w	r2, r2, #8
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0204 	bic.w	r2, r2, #4
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	619a      	str	r2, [r3, #24]
      break;
 80065e2:	e062      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fa42 	bl	8006a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	619a      	str	r2, [r3, #24]
      break;
 8006624:	e041      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fa95 	bl	8006b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0208 	orr.w	r2, r2, #8
 8006640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0204 	bic.w	r2, r2, #4
 8006650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	61da      	str	r2, [r3, #28]
      break;
 8006664:	e021      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fae9 	bl	8006c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69d9      	ldr	r1, [r3, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	021a      	lsls	r2, r3, #8
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	61da      	str	r2, [r3, #28]
      break;
 80066a6:	e000      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80066a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIM_ConfigClockSource+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e0b3      	b.n	800683c <HAL_TIM_ConfigClockSource+0x180>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670c:	d03e      	beq.n	800678c <HAL_TIM_ConfigClockSource+0xd0>
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006712:	f200 8087 	bhi.w	8006824 <HAL_TIM_ConfigClockSource+0x168>
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	f000 8085 	beq.w	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 800671e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006722:	d87f      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d01a      	beq.n	800675e <HAL_TIM_ConfigClockSource+0xa2>
 8006728:	2b70      	cmp	r3, #112	; 0x70
 800672a:	d87b      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d050      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x116>
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d877      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 8006734:	2b50      	cmp	r3, #80	; 0x50
 8006736:	d03c      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0xf6>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d873      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d058      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x136>
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d86f      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d064      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x156>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d86b      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 800674c:	2b20      	cmp	r3, #32
 800674e:	d060      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x156>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d867      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d05c      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x156>
 8006758:	2b10      	cmp	r3, #16
 800675a:	d05a      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800675c:	e062      	b.n	8006824 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6899      	ldr	r1, [r3, #8]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f000 fb34 	bl	8006dda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006780:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	609a      	str	r2, [r3, #8]
      break;
 800678a:	e04e      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6899      	ldr	r1, [r3, #8]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f000 fb1d 	bl	8006dda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ae:	609a      	str	r2, [r3, #8]
      break;
 80067b0:	e03b      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6859      	ldr	r1, [r3, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	461a      	mov	r2, r3
 80067c0:	f000 fa94 	bl	8006cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2150      	movs	r1, #80	; 0x50
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 faeb 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 80067d0:	e02b      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6859      	ldr	r1, [r3, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	461a      	mov	r2, r3
 80067e0:	f000 fab2 	bl	8006d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2160      	movs	r1, #96	; 0x60
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fadb 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 80067f0:	e01b      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6859      	ldr	r1, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	461a      	mov	r2, r3
 8006800:	f000 fa74 	bl	8006cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2140      	movs	r1, #64	; 0x40
 800680a:	4618      	mov	r0, r3
 800680c:	f000 facb 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006810:	e00b      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f000 fac2 	bl	8006da6 <TIM_ITRx_SetConfig>
        break;
 8006822:	e002      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006828:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
	...

080068a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a33      	ldr	r2, [pc, #204]	; (8006980 <TIM_Base_SetConfig+0xe0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a32      	ldr	r2, [pc, #200]	; (8006984 <TIM_Base_SetConfig+0xe4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00f      	beq.n	80068e0 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d00b      	beq.n	80068e0 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <TIM_Base_SetConfig+0xe8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a2e      	ldr	r2, [pc, #184]	; (800698c <TIM_Base_SetConfig+0xec>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <TIM_Base_SetConfig+0xf0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d108      	bne.n	80068f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <TIM_Base_SetConfig+0xe0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a21      	ldr	r2, [pc, #132]	; (8006984 <TIM_Base_SetConfig+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00f      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d00b      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <TIM_Base_SetConfig+0xe8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1d      	ldr	r2, [pc, #116]	; (800698c <TIM_Base_SetConfig+0xec>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_Base_SetConfig+0x82>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <TIM_Base_SetConfig+0xf0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d108      	bne.n	8006934 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <TIM_Base_SetConfig+0xe0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_Base_SetConfig+0xc8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a08      	ldr	r2, [pc, #32]	; (8006984 <TIM_Base_SetConfig+0xe4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d103      	bne.n	8006970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	615a      	str	r2, [r3, #20]
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr
 8006980:	40012c00 	.word	0x40012c00
 8006984:	40013400 	.word	0x40013400
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00

08006994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0201 	bic.w	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0302 	bic.w	r3, r3, #2
 80069dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a20      	ldr	r2, [pc, #128]	; (8006a6c <TIM_OC1_SetConfig+0xd8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_OC1_SetConfig+0x64>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <TIM_OC1_SetConfig+0xdc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10c      	bne.n	8006a12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0308 	bic.w	r3, r3, #8
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <TIM_OC1_SetConfig+0xd8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d003      	beq.n	8006a22 <TIM_OC1_SetConfig+0x8e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <TIM_OC1_SetConfig+0xdc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d111      	bne.n	8006a46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400

08006a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0210 	bic.w	r2, r3, #16
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0320 	bic.w	r3, r3, #32
 8006abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <TIM_OC2_SetConfig+0xe0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_OC2_SetConfig+0x68>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <TIM_OC2_SetConfig+0xe4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d10d      	bne.n	8006af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <TIM_OC2_SetConfig+0xe0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x94>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a15      	ldr	r2, [pc, #84]	; (8006b58 <TIM_OC2_SetConfig+0xe4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d113      	bne.n	8006b30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40013400 	.word	0x40013400

08006b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a21      	ldr	r2, [pc, #132]	; (8006c3c <TIM_OC3_SetConfig+0xe0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_OC3_SetConfig+0x66>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <TIM_OC3_SetConfig+0xe4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d10d      	bne.n	8006bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <TIM_OC3_SetConfig+0xe0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_OC3_SetConfig+0x92>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <TIM_OC3_SetConfig+0xe4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d113      	bne.n	8006c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	40013400 	.word	0x40013400

08006c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	031b      	lsls	r3, r3, #12
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a11      	ldr	r2, [pc, #68]	; (8006ce4 <TIM_OC4_SetConfig+0xa0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC4_SetConfig+0x68>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a10      	ldr	r2, [pc, #64]	; (8006ce8 <TIM_OC4_SetConfig+0xa4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d109      	bne.n	8006cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40013400 	.word	0x40013400

08006cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f023 0201 	bic.w	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f023 030a 	bic.w	r3, r3, #10
 8006d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f023 0210 	bic.w	r2, r3, #16
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	031b      	lsls	r3, r3, #12
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	621a      	str	r2, [r3, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f043 0307 	orr.w	r3, r3, #7
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	609a      	str	r2, [r3, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	021a      	lsls	r2, r3, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	609a      	str	r2, [r3, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e050      	b.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ece:	d00e      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a15      	ldr	r2, [pc, #84]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a12      	ldr	r2, [pc, #72]	; (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10c      	bne.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40013400 	.word	0x40013400
 8006f2c:	40000400 	.word	0x40000400
 8006f30:	40000800 	.word	0x40000800
 8006f34:	40000c00 	.word	0x40000c00

08006f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e03d      	b.n	8006fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e03f      	b.n	8007090 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fc fc07 	bl	8003838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2224      	movs	r2, #36	; 0x24
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007040:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fdde 	bl	8007c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007056:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007066:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007076:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d17c      	bne.n	80071b2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_UART_Transmit+0x2c>
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e075      	b.n	80071b4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_UART_Transmit+0x3e>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e06e      	b.n	80071b4 <HAL_UART_Transmit+0x11c>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2221      	movs	r2, #33	; 0x21
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ec:	f7fc fe4e 	bl	8003d8c <HAL_GetTick>
 80070f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	d108      	bne.n	800711a <HAL_UART_Transmit+0x82>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	e003      	b.n	8007122 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800712a:	e02a      	b.n	8007182 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fb17 	bl	800776a <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e036      	b.n	80071b4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800715a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	3302      	adds	r3, #2
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	e007      	b.n	8007174 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1cf      	bne.n	800712c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2200      	movs	r2, #0
 8007194:	2140      	movs	r1, #64	; 0x40
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fae7 	bl	800776a <UART_WaitOnFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e006      	b.n	80071b4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e000      	b.n	80071b4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071b2:	2302      	movs	r3, #2
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3720      	adds	r7, #32
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d11d      	bne.n	8007212 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_UART_Receive_IT+0x26>
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e016      	b.n	8007214 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Receive_IT+0x38>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e00f      	b.n	8007214 <HAL_UART_Receive_IT+0x58>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	461a      	mov	r2, r3
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 faf8 	bl	80077fe <UART_Start_Receive_IT>
 800720e:	4603      	mov	r3, r0
 8007210:	e000      	b.n	8007214 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b20      	cmp	r3, #32
 8007234:	d11d      	bne.n	8007272 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_UART_Receive_DMA+0x26>
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e016      	b.n	8007274 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_UART_Receive_DMA+0x38>
 8007250:	2302      	movs	r3, #2
 8007252:	e00f      	b.n	8007274 <HAL_UART_Receive_DMA+0x58>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	461a      	mov	r2, r3
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fb01 	bl	8007870 <UART_Start_Receive_DMA>
 800726e:	4603      	mov	r3, r0
 8007270:	e000      	b.n	8007274 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007272:	2302      	movs	r3, #2
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800729c:	2300      	movs	r3, #0
 800729e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_UART_IRQHandler+0x52>
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fbf2 	bl	8007ab0 <UART_Receive_IT>
      return;
 80072cc:	e17b      	b.n	80075c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 80b1 	beq.w	8007438 <HAL_UART_IRQHandler+0x1bc>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <HAL_UART_IRQHandler+0x70>
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80a6 	beq.w	8007438 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <HAL_UART_IRQHandler+0x90>
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	f043 0201 	orr.w	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_UART_IRQHandler+0xb0>
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d005      	beq.n	800732c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	f043 0202 	orr.w	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <HAL_UART_IRQHandler+0xd0>
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	f043 0204 	orr.w	r2, r3, #4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00f      	beq.n	8007376 <HAL_UART_IRQHandler+0xfa>
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <HAL_UART_IRQHandler+0xee>
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f043 0208 	orr.w	r2, r3, #8
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 811e 	beq.w	80075bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <HAL_UART_IRQHandler+0x11e>
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fb8b 	bl	8007ab0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <HAL_UART_IRQHandler+0x146>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d031      	beq.n	8007426 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 facd 	bl	8007962 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d023      	beq.n	800741e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4a76      	ldr	r2, [pc, #472]	; (80075cc <HAL_UART_IRQHandler+0x350>)
 80073f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fc ff12 	bl	8004224 <HAL_DMA_Abort_IT>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00e      	b.n	8007434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fb feb8 	bl	800318c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e00a      	b.n	8007434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fb feb4 	bl	800318c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e006      	b.n	8007434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fb feb0 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007432:	e0c3      	b.n	80075bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	bf00      	nop
    return;
 8007436:	e0c1      	b.n	80075bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	2b01      	cmp	r3, #1
 800743e:	f040 80a1 	bne.w	8007584 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 809b 	beq.w	8007584 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8095 	beq.w	8007584 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d04e      	beq.n	800751c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007488:	8a3b      	ldrh	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8098 	beq.w	80075c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007494:	8a3a      	ldrh	r2, [r7, #16]
 8007496:	429a      	cmp	r2, r3
 8007498:	f080 8092 	bcs.w	80075c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8a3a      	ldrh	r2, [r7, #16]
 80074a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d02b      	beq.n	8007504 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0210 	bic.w	r2, r2, #16
 80074f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fc fe55 	bl	80041ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800750c:	b29b      	uxth	r3, r3
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	b29b      	uxth	r3, r3
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f86d 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800751a:	e051      	b.n	80075c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007524:	b29b      	uxth	r3, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800752e:	b29b      	uxth	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d047      	beq.n	80075c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007534:	8a7b      	ldrh	r3, [r7, #18]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d044      	beq.n	80075c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007548:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0210 	bic.w	r2, r2, #16
 8007576:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007578:	8a7b      	ldrh	r3, [r7, #18]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f839 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007582:	e01f      	b.n	80075c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_UART_IRQHandler+0x324>
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa22 	bl	80079e2 <UART_Transmit_IT>
    return;
 800759e:	e012      	b.n	80075c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00d      	beq.n	80075c6 <HAL_UART_IRQHandler+0x34a>
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa63 	bl	8007a80 <UART_EndTransmit_IT>
    return;
 80075ba:	e004      	b.n	80075c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80075bc:	bf00      	nop
 80075be:	e002      	b.n	80075c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80075c4:	bf00      	nop
  }
}
 80075c6:	3728      	adds	r7, #40	; 0x28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	080079bb 	.word	0x080079bb

080075d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12a      	bne.n	800767c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800763a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695a      	ldr	r2, [r3, #20]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695a      	ldr	r2, [r3, #20]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	2b01      	cmp	r3, #1
 800766a:	d107      	bne.n	800767c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0210 	bic.w	r2, r2, #16
 800767a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	2b01      	cmp	r3, #1
 8007682:	d106      	bne.n	8007692 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007688:	4619      	mov	r1, r3
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff ffb2 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007690:	e002      	b.n	8007698 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f7fb fd5e 	bl	8003154 <HAL_UART_RxCpltCallback>
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d108      	bne.n	80076c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff ff97 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076c6:	e002      	b.n	80076ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff ff8a 	bl	80075e2 <HAL_UART_RxHalfCpltCallback>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bf14      	ite	ne
 80076f6:	2301      	movne	r3, #1
 80076f8:	2300      	moveq	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b21      	cmp	r3, #33	; 0x21
 8007708:	d108      	bne.n	800771c <UART_DMAError+0x46>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007716:	68b8      	ldr	r0, [r7, #8]
 8007718:	f000 f90e 	bl	8007938 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	bf14      	ite	ne
 800772a:	2301      	movne	r3, #1
 800772c:	2300      	moveq	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b22      	cmp	r3, #34	; 0x22
 800773c:	d108      	bne.n	8007750 <UART_DMAError+0x7a>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800774a:	68b8      	ldr	r0, [r7, #8]
 800774c:	f000 f909 	bl	8007962 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	f043 0210 	orr.w	r2, r3, #16
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800775c:	68b8      	ldr	r0, [r7, #8]
 800775e:	f7fb fd15 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777a:	e02c      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d028      	beq.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0x30>
 800778a:	f7fc faff 	bl	8003d8c <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	429a      	cmp	r2, r3
 8007798:	d21d      	bcs.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695a      	ldr	r2, [r3, #20]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0201 	bic.w	r2, r2, #1
 80077b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2220      	movs	r2, #32
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e00f      	b.n	80077f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4013      	ands	r3, r2
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	bf0c      	ite	eq
 80077e6:	2301      	moveq	r3, #1
 80077e8:	2300      	movne	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d0c3      	beq.n	800777c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	4613      	mov	r3, r2
 800780a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2222      	movs	r2, #34	; 0x22
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007842:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0220 	orr.w	r2, r2, #32
 8007862:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr

08007870 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2222      	movs	r2, #34	; 0x22
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	4a23      	ldr	r2, [pc, #140]	; (800792c <UART_Start_Receive_DMA+0xbc>)
 800789e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	4a22      	ldr	r2, [pc, #136]	; (8007930 <UART_Start_Receive_DMA+0xc0>)
 80078a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	4a21      	ldr	r2, [pc, #132]	; (8007934 <UART_Start_Receive_DMA+0xc4>)
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	2200      	movs	r2, #0
 80078b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80078b8:	f107 0308 	add.w	r3, r7, #8
 80078bc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	f7fc fc0e 	bl	80040f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0201 	orr.w	r2, r2, #1
 8007910:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007920:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	0800760b 	.word	0x0800760b
 8007930:	080076a1 	.word	0x080076a1
 8007934:	080076d7 	.word	0x080076d7

08007938 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800794e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr

08007962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007978:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	695a      	ldr	r2, [r3, #20]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	2b01      	cmp	r3, #1
 8007990:	d107      	bne.n	80079a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0210 	bic.w	r2, r2, #16
 80079a0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr

080079ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7fb fbd9 	bl	800318c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b21      	cmp	r3, #33	; 0x21
 80079f4:	d13e      	bne.n	8007a74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fe:	d114      	bne.n	8007a2a <UART_Transmit_IT+0x48>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d110      	bne.n	8007a2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	1c9a      	adds	r2, r3, #2
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	621a      	str	r2, [r3, #32]
 8007a28:	e008      	b.n	8007a3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	1c59      	adds	r1, r3, #1
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6211      	str	r1, [r2, #32]
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10f      	bne.n	8007a70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	e000      	b.n	8007a76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a74:	2302      	movs	r3, #2
  }
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr

08007a80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff fd95 	bl	80075d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b22      	cmp	r3, #34	; 0x22
 8007ac2:	f040 8099 	bne.w	8007bf8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ace:	d117      	bne.n	8007b00 <UART_Receive_IT+0x50>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d113      	bne.n	8007b00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	1c9a      	adds	r2, r3, #2
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	629a      	str	r2, [r3, #40]	; 0x28
 8007afe:	e026      	b.n	8007b4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b12:	d007      	beq.n	8007b24 <UART_Receive_IT+0x74>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <UART_Receive_IT+0x82>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	e008      	b.n	8007b44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d148      	bne.n	8007bf4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0220 	bic.w	r2, r2, #32
 8007b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0201 	bic.w	r2, r2, #1
 8007b90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d123      	bne.n	8007bea <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0210 	bic.w	r2, r2, #16
 8007bb6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d10a      	bne.n	8007bdc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff fd06 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8007be8:	e002      	b.n	8007bf0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fb fab2 	bl	8003154 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e002      	b.n	8007bfa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	e000      	b.n	8007bfa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007bf8:	2302      	movs	r3, #2
  }
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c3e:	f023 030c 	bic.w	r3, r3, #12
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6812      	ldr	r2, [r2, #0]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a2c      	ldr	r2, [pc, #176]	; (8007d18 <UART_SetConfig+0x114>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d103      	bne.n	8007c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c6c:	f7fe f83c 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	e002      	b.n	8007c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe f824 	bl	8005cc0 <HAL_RCC_GetPCLK1Freq>
 8007c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009a      	lsls	r2, r3, #2
 8007c84:	441a      	add	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	4a22      	ldr	r2, [pc, #136]	; (8007d1c <UART_SetConfig+0x118>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	0119      	lsls	r1, r3, #4
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009a      	lsls	r2, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cb0:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <UART_SetConfig+0x118>)
 8007cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8007cb6:	095b      	lsrs	r3, r3, #5
 8007cb8:	2064      	movs	r0, #100	; 0x64
 8007cba:	fb00 f303 	mul.w	r3, r0, r3
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	3332      	adds	r3, #50	; 0x32
 8007cc4:	4a15      	ldr	r2, [pc, #84]	; (8007d1c <UART_SetConfig+0x118>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cd0:	4419      	add	r1, r3
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009a      	lsls	r2, r3, #2
 8007cdc:	441a      	add	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <UART_SetConfig+0x118>)
 8007cea:	fba3 0302 	umull	r0, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2064      	movs	r0, #100	; 0x64
 8007cf2:	fb00 f303 	mul.w	r3, r0, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	3332      	adds	r3, #50	; 0x32
 8007cfc:	4a07      	ldr	r2, [pc, #28]	; (8007d1c <UART_SetConfig+0x118>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	40013800 	.word	0x40013800
 8007d1c:	51eb851f 	.word	0x51eb851f

08007d20 <__assert_func>:
 8007d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d22:	4614      	mov	r4, r2
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <__assert_func+0x2c>)
 8007d28:	4605      	mov	r5, r0
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68d8      	ldr	r0, [r3, #12]
 8007d2e:	b14c      	cbz	r4, 8007d44 <__assert_func+0x24>
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <__assert_func+0x30>)
 8007d32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d36:	9100      	str	r1, [sp, #0]
 8007d38:	462b      	mov	r3, r5
 8007d3a:	4906      	ldr	r1, [pc, #24]	; (8007d54 <__assert_func+0x34>)
 8007d3c:	f000 f814 	bl	8007d68 <fiprintf>
 8007d40:	f000 fbfe 	bl	8008540 <abort>
 8007d44:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <__assert_func+0x38>)
 8007d46:	461c      	mov	r4, r3
 8007d48:	e7f3      	b.n	8007d32 <__assert_func+0x12>
 8007d4a:	bf00      	nop
 8007d4c:	20000010 	.word	0x20000010
 8007d50:	08008e6c 	.word	0x08008e6c
 8007d54:	08008e79 	.word	0x08008e79
 8007d58:	08008ea7 	.word	0x08008ea7

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000010 	.word	0x20000010

08007d68 <fiprintf>:
 8007d68:	b40e      	push	{r1, r2, r3}
 8007d6a:	b503      	push	{r0, r1, lr}
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	ab03      	add	r3, sp, #12
 8007d70:	4805      	ldr	r0, [pc, #20]	; (8007d88 <fiprintf+0x20>)
 8007d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	f000 f85b 	bl	8007e34 <_vfiprintf_r>
 8007d7e:	b002      	add	sp, #8
 8007d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d84:	b003      	add	sp, #12
 8007d86:	4770      	bx	lr
 8007d88:	20000010 	.word	0x20000010

08007d8c <__libc_init_array>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	2600      	movs	r6, #0
 8007d90:	4d0c      	ldr	r5, [pc, #48]	; (8007dc4 <__libc_init_array+0x38>)
 8007d92:	4c0d      	ldr	r4, [pc, #52]	; (8007dc8 <__libc_init_array+0x3c>)
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	d109      	bne.n	8007db0 <__libc_init_array+0x24>
 8007d9c:	f001 f810 	bl	8008dc0 <_init>
 8007da0:	2600      	movs	r6, #0
 8007da2:	4d0a      	ldr	r5, [pc, #40]	; (8007dcc <__libc_init_array+0x40>)
 8007da4:	4c0a      	ldr	r4, [pc, #40]	; (8007dd0 <__libc_init_array+0x44>)
 8007da6:	1b64      	subs	r4, r4, r5
 8007da8:	10a4      	asrs	r4, r4, #2
 8007daa:	42a6      	cmp	r6, r4
 8007dac:	d105      	bne.n	8007dba <__libc_init_array+0x2e>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db4:	4798      	blx	r3
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7ee      	b.n	8007d98 <__libc_init_array+0xc>
 8007dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbe:	4798      	blx	r3
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	e7f2      	b.n	8007daa <__libc_init_array+0x1e>
 8007dc4:	08008f40 	.word	0x08008f40
 8007dc8:	08008f40 	.word	0x08008f40
 8007dcc:	08008f40 	.word	0x08008f40
 8007dd0:	08008f44 	.word	0x08008f44

08007dd4 <memset>:
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4402      	add	r2, r0
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d100      	bne.n	8007dde <memset+0xa>
 8007ddc:	4770      	bx	lr
 8007dde:	f803 1b01 	strb.w	r1, [r3], #1
 8007de2:	e7f9      	b.n	8007dd8 <memset+0x4>

08007de4 <__sfputc_r>:
 8007de4:	6893      	ldr	r3, [r2, #8]
 8007de6:	b410      	push	{r4}
 8007de8:	3b01      	subs	r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	6093      	str	r3, [r2, #8]
 8007dee:	da07      	bge.n	8007e00 <__sfputc_r+0x1c>
 8007df0:	6994      	ldr	r4, [r2, #24]
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	db01      	blt.n	8007dfa <__sfputc_r+0x16>
 8007df6:	290a      	cmp	r1, #10
 8007df8:	d102      	bne.n	8007e00 <__sfputc_r+0x1c>
 8007dfa:	bc10      	pop	{r4}
 8007dfc:	f000 bae0 	b.w	80083c0 <__swbuf_r>
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	1c58      	adds	r0, r3, #1
 8007e04:	6010      	str	r0, [r2, #0]
 8007e06:	7019      	strb	r1, [r3, #0]
 8007e08:	4608      	mov	r0, r1
 8007e0a:	bc10      	pop	{r4}
 8007e0c:	4770      	bx	lr

08007e0e <__sfputs_r>:
 8007e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e10:	4606      	mov	r6, r0
 8007e12:	460f      	mov	r7, r1
 8007e14:	4614      	mov	r4, r2
 8007e16:	18d5      	adds	r5, r2, r3
 8007e18:	42ac      	cmp	r4, r5
 8007e1a:	d101      	bne.n	8007e20 <__sfputs_r+0x12>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e007      	b.n	8007e30 <__sfputs_r+0x22>
 8007e20:	463a      	mov	r2, r7
 8007e22:	4630      	mov	r0, r6
 8007e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e28:	f7ff ffdc 	bl	8007de4 <__sfputc_r>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d1f3      	bne.n	8007e18 <__sfputs_r+0xa>
 8007e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e34 <_vfiprintf_r>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	460d      	mov	r5, r1
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	4698      	mov	r8, r3
 8007e3e:	4606      	mov	r6, r0
 8007e40:	b09d      	sub	sp, #116	; 0x74
 8007e42:	b118      	cbz	r0, 8007e4c <_vfiprintf_r+0x18>
 8007e44:	6983      	ldr	r3, [r0, #24]
 8007e46:	b90b      	cbnz	r3, 8007e4c <_vfiprintf_r+0x18>
 8007e48:	f000 fc98 	bl	800877c <__sinit>
 8007e4c:	4b89      	ldr	r3, [pc, #548]	; (8008074 <_vfiprintf_r+0x240>)
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	d11b      	bne.n	8007e8a <_vfiprintf_r+0x56>
 8007e52:	6875      	ldr	r5, [r6, #4]
 8007e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e56:	07d9      	lsls	r1, r3, #31
 8007e58:	d405      	bmi.n	8007e66 <_vfiprintf_r+0x32>
 8007e5a:	89ab      	ldrh	r3, [r5, #12]
 8007e5c:	059a      	lsls	r2, r3, #22
 8007e5e:	d402      	bmi.n	8007e66 <_vfiprintf_r+0x32>
 8007e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e62:	f000 fd29 	bl	80088b8 <__retarget_lock_acquire_recursive>
 8007e66:	89ab      	ldrh	r3, [r5, #12]
 8007e68:	071b      	lsls	r3, r3, #28
 8007e6a:	d501      	bpl.n	8007e70 <_vfiprintf_r+0x3c>
 8007e6c:	692b      	ldr	r3, [r5, #16]
 8007e6e:	b9eb      	cbnz	r3, 8007eac <_vfiprintf_r+0x78>
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f000 faf6 	bl	8008464 <__swsetup_r>
 8007e78:	b1c0      	cbz	r0, 8007eac <_vfiprintf_r+0x78>
 8007e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e7c:	07dc      	lsls	r4, r3, #31
 8007e7e:	d50e      	bpl.n	8007e9e <_vfiprintf_r+0x6a>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	b01d      	add	sp, #116	; 0x74
 8007e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8a:	4b7b      	ldr	r3, [pc, #492]	; (8008078 <_vfiprintf_r+0x244>)
 8007e8c:	429d      	cmp	r5, r3
 8007e8e:	d101      	bne.n	8007e94 <_vfiprintf_r+0x60>
 8007e90:	68b5      	ldr	r5, [r6, #8]
 8007e92:	e7df      	b.n	8007e54 <_vfiprintf_r+0x20>
 8007e94:	4b79      	ldr	r3, [pc, #484]	; (800807c <_vfiprintf_r+0x248>)
 8007e96:	429d      	cmp	r5, r3
 8007e98:	bf08      	it	eq
 8007e9a:	68f5      	ldreq	r5, [r6, #12]
 8007e9c:	e7da      	b.n	8007e54 <_vfiprintf_r+0x20>
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	0598      	lsls	r0, r3, #22
 8007ea2:	d4ed      	bmi.n	8007e80 <_vfiprintf_r+0x4c>
 8007ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ea6:	f000 fd08 	bl	80088ba <__retarget_lock_release_recursive>
 8007eaa:	e7e9      	b.n	8007e80 <_vfiprintf_r+0x4c>
 8007eac:	2300      	movs	r3, #0
 8007eae:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eb6:	2330      	movs	r3, #48	; 0x30
 8007eb8:	f04f 0901 	mov.w	r9, #1
 8007ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008080 <_vfiprintf_r+0x24c>
 8007ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec8:	4623      	mov	r3, r4
 8007eca:	469a      	mov	sl, r3
 8007ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed0:	b10a      	cbz	r2, 8007ed6 <_vfiprintf_r+0xa2>
 8007ed2:	2a25      	cmp	r2, #37	; 0x25
 8007ed4:	d1f9      	bne.n	8007eca <_vfiprintf_r+0x96>
 8007ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eda:	d00b      	beq.n	8007ef4 <_vfiprintf_r+0xc0>
 8007edc:	465b      	mov	r3, fp
 8007ede:	4622      	mov	r2, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ff93 	bl	8007e0e <__sfputs_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f000 80aa 	beq.w	8008042 <_vfiprintf_r+0x20e>
 8007eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef0:	445a      	add	r2, fp
 8007ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80a2 	beq.w	8008042 <_vfiprintf_r+0x20e>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295
 8007f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f08:	f10a 0a01 	add.w	sl, sl, #1
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	9307      	str	r3, [sp, #28]
 8007f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f14:	931a      	str	r3, [sp, #104]	; 0x68
 8007f16:	4654      	mov	r4, sl
 8007f18:	2205      	movs	r2, #5
 8007f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1e:	4858      	ldr	r0, [pc, #352]	; (8008080 <_vfiprintf_r+0x24c>)
 8007f20:	f000 fd32 	bl	8008988 <memchr>
 8007f24:	9a04      	ldr	r2, [sp, #16]
 8007f26:	b9d8      	cbnz	r0, 8007f60 <_vfiprintf_r+0x12c>
 8007f28:	06d1      	lsls	r1, r2, #27
 8007f2a:	bf44      	itt	mi
 8007f2c:	2320      	movmi	r3, #32
 8007f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f32:	0713      	lsls	r3, r2, #28
 8007f34:	bf44      	itt	mi
 8007f36:	232b      	movmi	r3, #43	; 0x2b
 8007f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f40:	2b2a      	cmp	r3, #42	; 0x2a
 8007f42:	d015      	beq.n	8007f70 <_vfiprintf_r+0x13c>
 8007f44:	4654      	mov	r4, sl
 8007f46:	2000      	movs	r0, #0
 8007f48:	f04f 0c0a 	mov.w	ip, #10
 8007f4c:	9a07      	ldr	r2, [sp, #28]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f54:	3b30      	subs	r3, #48	; 0x30
 8007f56:	2b09      	cmp	r3, #9
 8007f58:	d94e      	bls.n	8007ff8 <_vfiprintf_r+0x1c4>
 8007f5a:	b1b0      	cbz	r0, 8007f8a <_vfiprintf_r+0x156>
 8007f5c:	9207      	str	r2, [sp, #28]
 8007f5e:	e014      	b.n	8007f8a <_vfiprintf_r+0x156>
 8007f60:	eba0 0308 	sub.w	r3, r0, r8
 8007f64:	fa09 f303 	lsl.w	r3, r9, r3
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	46a2      	mov	sl, r4
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	e7d2      	b.n	8007f16 <_vfiprintf_r+0xe2>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	1d19      	adds	r1, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	9103      	str	r1, [sp, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfbb      	ittet	lt
 8007f7c:	425b      	neglt	r3, r3
 8007f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f82:	9307      	strge	r3, [sp, #28]
 8007f84:	9307      	strlt	r3, [sp, #28]
 8007f86:	bfb8      	it	lt
 8007f88:	9204      	strlt	r2, [sp, #16]
 8007f8a:	7823      	ldrb	r3, [r4, #0]
 8007f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8e:	d10c      	bne.n	8007faa <_vfiprintf_r+0x176>
 8007f90:	7863      	ldrb	r3, [r4, #1]
 8007f92:	2b2a      	cmp	r3, #42	; 0x2a
 8007f94:	d135      	bne.n	8008002 <_vfiprintf_r+0x1ce>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	3402      	adds	r4, #2
 8007f9a:	1d1a      	adds	r2, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	9203      	str	r2, [sp, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bfb8      	it	lt
 8007fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fa8:	9305      	str	r3, [sp, #20]
 8007faa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008084 <_vfiprintf_r+0x250>
 8007fae:	2203      	movs	r2, #3
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	7821      	ldrb	r1, [r4, #0]
 8007fb4:	f000 fce8 	bl	8008988 <memchr>
 8007fb8:	b140      	cbz	r0, 8007fcc <_vfiprintf_r+0x198>
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	eba0 000a 	sub.w	r0, r0, sl
 8007fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fc4:	9b04      	ldr	r3, [sp, #16]
 8007fc6:	3401      	adds	r4, #1
 8007fc8:	4303      	orrs	r3, r0
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	2206      	movs	r2, #6
 8007fd2:	482d      	ldr	r0, [pc, #180]	; (8008088 <_vfiprintf_r+0x254>)
 8007fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fd8:	f000 fcd6 	bl	8008988 <memchr>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d03f      	beq.n	8008060 <_vfiprintf_r+0x22c>
 8007fe0:	4b2a      	ldr	r3, [pc, #168]	; (800808c <_vfiprintf_r+0x258>)
 8007fe2:	bb1b      	cbnz	r3, 800802c <_vfiprintf_r+0x1f8>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	3307      	adds	r3, #7
 8007fe8:	f023 0307 	bic.w	r3, r3, #7
 8007fec:	3308      	adds	r3, #8
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	443b      	add	r3, r7
 8007ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff6:	e767      	b.n	8007ec8 <_vfiprintf_r+0x94>
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008000:	e7a5      	b.n	8007f4e <_vfiprintf_r+0x11a>
 8008002:	2300      	movs	r3, #0
 8008004:	f04f 0c0a 	mov.w	ip, #10
 8008008:	4619      	mov	r1, r3
 800800a:	3401      	adds	r4, #1
 800800c:	9305      	str	r3, [sp, #20]
 800800e:	4620      	mov	r0, r4
 8008010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008014:	3a30      	subs	r2, #48	; 0x30
 8008016:	2a09      	cmp	r2, #9
 8008018:	d903      	bls.n	8008022 <_vfiprintf_r+0x1ee>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0c5      	beq.n	8007faa <_vfiprintf_r+0x176>
 800801e:	9105      	str	r1, [sp, #20]
 8008020:	e7c3      	b.n	8007faa <_vfiprintf_r+0x176>
 8008022:	4604      	mov	r4, r0
 8008024:	2301      	movs	r3, #1
 8008026:	fb0c 2101 	mla	r1, ip, r1, r2
 800802a:	e7f0      	b.n	800800e <_vfiprintf_r+0x1da>
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	462a      	mov	r2, r5
 8008032:	4630      	mov	r0, r6
 8008034:	4b16      	ldr	r3, [pc, #88]	; (8008090 <_vfiprintf_r+0x25c>)
 8008036:	a904      	add	r1, sp, #16
 8008038:	f3af 8000 	nop.w
 800803c:	4607      	mov	r7, r0
 800803e:	1c78      	adds	r0, r7, #1
 8008040:	d1d6      	bne.n	8007ff0 <_vfiprintf_r+0x1bc>
 8008042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008044:	07d9      	lsls	r1, r3, #31
 8008046:	d405      	bmi.n	8008054 <_vfiprintf_r+0x220>
 8008048:	89ab      	ldrh	r3, [r5, #12]
 800804a:	059a      	lsls	r2, r3, #22
 800804c:	d402      	bmi.n	8008054 <_vfiprintf_r+0x220>
 800804e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008050:	f000 fc33 	bl	80088ba <__retarget_lock_release_recursive>
 8008054:	89ab      	ldrh	r3, [r5, #12]
 8008056:	065b      	lsls	r3, r3, #25
 8008058:	f53f af12 	bmi.w	8007e80 <_vfiprintf_r+0x4c>
 800805c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800805e:	e711      	b.n	8007e84 <_vfiprintf_r+0x50>
 8008060:	ab03      	add	r3, sp, #12
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	462a      	mov	r2, r5
 8008066:	4630      	mov	r0, r6
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <_vfiprintf_r+0x25c>)
 800806a:	a904      	add	r1, sp, #16
 800806c:	f000 f882 	bl	8008174 <_printf_i>
 8008070:	e7e4      	b.n	800803c <_vfiprintf_r+0x208>
 8008072:	bf00      	nop
 8008074:	08008f00 	.word	0x08008f00
 8008078:	08008f20 	.word	0x08008f20
 800807c:	08008ee0 	.word	0x08008ee0
 8008080:	08008eac 	.word	0x08008eac
 8008084:	08008eb2 	.word	0x08008eb2
 8008088:	08008eb6 	.word	0x08008eb6
 800808c:	00000000 	.word	0x00000000
 8008090:	08007e0f 	.word	0x08007e0f

08008094 <_printf_common>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	4616      	mov	r6, r2
 800809a:	4699      	mov	r9, r3
 800809c:	688a      	ldr	r2, [r1, #8]
 800809e:	690b      	ldr	r3, [r1, #16]
 80080a0:	4607      	mov	r7, r0
 80080a2:	4293      	cmp	r3, r2
 80080a4:	bfb8      	it	lt
 80080a6:	4613      	movlt	r3, r2
 80080a8:	6033      	str	r3, [r6, #0]
 80080aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ae:	460c      	mov	r4, r1
 80080b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080b4:	b10a      	cbz	r2, 80080ba <_printf_common+0x26>
 80080b6:	3301      	adds	r3, #1
 80080b8:	6033      	str	r3, [r6, #0]
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	0699      	lsls	r1, r3, #26
 80080be:	bf42      	ittt	mi
 80080c0:	6833      	ldrmi	r3, [r6, #0]
 80080c2:	3302      	addmi	r3, #2
 80080c4:	6033      	strmi	r3, [r6, #0]
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	f015 0506 	ands.w	r5, r5, #6
 80080cc:	d106      	bne.n	80080dc <_printf_common+0x48>
 80080ce:	f104 0a19 	add.w	sl, r4, #25
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	6832      	ldr	r2, [r6, #0]
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dc28      	bgt.n	800812e <_printf_common+0x9a>
 80080dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080e0:	1e13      	subs	r3, r2, #0
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	bf18      	it	ne
 80080e6:	2301      	movne	r3, #1
 80080e8:	0692      	lsls	r2, r2, #26
 80080ea:	d42d      	bmi.n	8008148 <_printf_common+0xb4>
 80080ec:	4649      	mov	r1, r9
 80080ee:	4638      	mov	r0, r7
 80080f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080f4:	47c0      	blx	r8
 80080f6:	3001      	adds	r0, #1
 80080f8:	d020      	beq.n	800813c <_printf_common+0xa8>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	68e5      	ldr	r5, [r4, #12]
 80080fe:	f003 0306 	and.w	r3, r3, #6
 8008102:	2b04      	cmp	r3, #4
 8008104:	bf18      	it	ne
 8008106:	2500      	movne	r5, #0
 8008108:	6832      	ldr	r2, [r6, #0]
 800810a:	f04f 0600 	mov.w	r6, #0
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	bf08      	it	eq
 8008112:	1aad      	subeq	r5, r5, r2
 8008114:	6922      	ldr	r2, [r4, #16]
 8008116:	bf08      	it	eq
 8008118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800811c:	4293      	cmp	r3, r2
 800811e:	bfc4      	itt	gt
 8008120:	1a9b      	subgt	r3, r3, r2
 8008122:	18ed      	addgt	r5, r5, r3
 8008124:	341a      	adds	r4, #26
 8008126:	42b5      	cmp	r5, r6
 8008128:	d11a      	bne.n	8008160 <_printf_common+0xcc>
 800812a:	2000      	movs	r0, #0
 800812c:	e008      	b.n	8008140 <_printf_common+0xac>
 800812e:	2301      	movs	r3, #1
 8008130:	4652      	mov	r2, sl
 8008132:	4649      	mov	r1, r9
 8008134:	4638      	mov	r0, r7
 8008136:	47c0      	blx	r8
 8008138:	3001      	adds	r0, #1
 800813a:	d103      	bne.n	8008144 <_printf_common+0xb0>
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008144:	3501      	adds	r5, #1
 8008146:	e7c4      	b.n	80080d2 <_printf_common+0x3e>
 8008148:	2030      	movs	r0, #48	; 0x30
 800814a:	18e1      	adds	r1, r4, r3
 800814c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008156:	4422      	add	r2, r4
 8008158:	3302      	adds	r3, #2
 800815a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800815e:	e7c5      	b.n	80080ec <_printf_common+0x58>
 8008160:	2301      	movs	r3, #1
 8008162:	4622      	mov	r2, r4
 8008164:	4649      	mov	r1, r9
 8008166:	4638      	mov	r0, r7
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d0e6      	beq.n	800813c <_printf_common+0xa8>
 800816e:	3601      	adds	r6, #1
 8008170:	e7d9      	b.n	8008126 <_printf_common+0x92>
	...

08008174 <_printf_i>:
 8008174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	7e0f      	ldrb	r7, [r1, #24]
 800817a:	4691      	mov	r9, r2
 800817c:	2f78      	cmp	r7, #120	; 0x78
 800817e:	4680      	mov	r8, r0
 8008180:	460c      	mov	r4, r1
 8008182:	469a      	mov	sl, r3
 8008184:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800818a:	d807      	bhi.n	800819c <_printf_i+0x28>
 800818c:	2f62      	cmp	r7, #98	; 0x62
 800818e:	d80a      	bhi.n	80081a6 <_printf_i+0x32>
 8008190:	2f00      	cmp	r7, #0
 8008192:	f000 80d9 	beq.w	8008348 <_printf_i+0x1d4>
 8008196:	2f58      	cmp	r7, #88	; 0x58
 8008198:	f000 80a4 	beq.w	80082e4 <_printf_i+0x170>
 800819c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081a4:	e03a      	b.n	800821c <_printf_i+0xa8>
 80081a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081aa:	2b15      	cmp	r3, #21
 80081ac:	d8f6      	bhi.n	800819c <_printf_i+0x28>
 80081ae:	a101      	add	r1, pc, #4	; (adr r1, 80081b4 <_printf_i+0x40>)
 80081b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081b4:	0800820d 	.word	0x0800820d
 80081b8:	08008221 	.word	0x08008221
 80081bc:	0800819d 	.word	0x0800819d
 80081c0:	0800819d 	.word	0x0800819d
 80081c4:	0800819d 	.word	0x0800819d
 80081c8:	0800819d 	.word	0x0800819d
 80081cc:	08008221 	.word	0x08008221
 80081d0:	0800819d 	.word	0x0800819d
 80081d4:	0800819d 	.word	0x0800819d
 80081d8:	0800819d 	.word	0x0800819d
 80081dc:	0800819d 	.word	0x0800819d
 80081e0:	0800832f 	.word	0x0800832f
 80081e4:	08008251 	.word	0x08008251
 80081e8:	08008311 	.word	0x08008311
 80081ec:	0800819d 	.word	0x0800819d
 80081f0:	0800819d 	.word	0x0800819d
 80081f4:	08008351 	.word	0x08008351
 80081f8:	0800819d 	.word	0x0800819d
 80081fc:	08008251 	.word	0x08008251
 8008200:	0800819d 	.word	0x0800819d
 8008204:	0800819d 	.word	0x0800819d
 8008208:	08008319 	.word	0x08008319
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	1d1a      	adds	r2, r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	602a      	str	r2, [r5, #0]
 8008214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800821c:	2301      	movs	r3, #1
 800821e:	e0a4      	b.n	800836a <_printf_i+0x1f6>
 8008220:	6820      	ldr	r0, [r4, #0]
 8008222:	6829      	ldr	r1, [r5, #0]
 8008224:	0606      	lsls	r6, r0, #24
 8008226:	f101 0304 	add.w	r3, r1, #4
 800822a:	d50a      	bpl.n	8008242 <_printf_i+0xce>
 800822c:	680e      	ldr	r6, [r1, #0]
 800822e:	602b      	str	r3, [r5, #0]
 8008230:	2e00      	cmp	r6, #0
 8008232:	da03      	bge.n	800823c <_printf_i+0xc8>
 8008234:	232d      	movs	r3, #45	; 0x2d
 8008236:	4276      	negs	r6, r6
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	230a      	movs	r3, #10
 800823e:	485e      	ldr	r0, [pc, #376]	; (80083b8 <_printf_i+0x244>)
 8008240:	e019      	b.n	8008276 <_printf_i+0x102>
 8008242:	680e      	ldr	r6, [r1, #0]
 8008244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	bf18      	it	ne
 800824c:	b236      	sxthne	r6, r6
 800824e:	e7ef      	b.n	8008230 <_printf_i+0xbc>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	6820      	ldr	r0, [r4, #0]
 8008254:	1d19      	adds	r1, r3, #4
 8008256:	6029      	str	r1, [r5, #0]
 8008258:	0601      	lsls	r1, r0, #24
 800825a:	d501      	bpl.n	8008260 <_printf_i+0xec>
 800825c:	681e      	ldr	r6, [r3, #0]
 800825e:	e002      	b.n	8008266 <_printf_i+0xf2>
 8008260:	0646      	lsls	r6, r0, #25
 8008262:	d5fb      	bpl.n	800825c <_printf_i+0xe8>
 8008264:	881e      	ldrh	r6, [r3, #0]
 8008266:	2f6f      	cmp	r7, #111	; 0x6f
 8008268:	bf0c      	ite	eq
 800826a:	2308      	moveq	r3, #8
 800826c:	230a      	movne	r3, #10
 800826e:	4852      	ldr	r0, [pc, #328]	; (80083b8 <_printf_i+0x244>)
 8008270:	2100      	movs	r1, #0
 8008272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008276:	6865      	ldr	r5, [r4, #4]
 8008278:	2d00      	cmp	r5, #0
 800827a:	bfa8      	it	ge
 800827c:	6821      	ldrge	r1, [r4, #0]
 800827e:	60a5      	str	r5, [r4, #8]
 8008280:	bfa4      	itt	ge
 8008282:	f021 0104 	bicge.w	r1, r1, #4
 8008286:	6021      	strge	r1, [r4, #0]
 8008288:	b90e      	cbnz	r6, 800828e <_printf_i+0x11a>
 800828a:	2d00      	cmp	r5, #0
 800828c:	d04d      	beq.n	800832a <_printf_i+0x1b6>
 800828e:	4615      	mov	r5, r2
 8008290:	fbb6 f1f3 	udiv	r1, r6, r3
 8008294:	fb03 6711 	mls	r7, r3, r1, r6
 8008298:	5dc7      	ldrb	r7, [r0, r7]
 800829a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800829e:	4637      	mov	r7, r6
 80082a0:	42bb      	cmp	r3, r7
 80082a2:	460e      	mov	r6, r1
 80082a4:	d9f4      	bls.n	8008290 <_printf_i+0x11c>
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d10b      	bne.n	80082c2 <_printf_i+0x14e>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	07de      	lsls	r6, r3, #31
 80082ae:	d508      	bpl.n	80082c2 <_printf_i+0x14e>
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	6861      	ldr	r1, [r4, #4]
 80082b4:	4299      	cmp	r1, r3
 80082b6:	bfde      	ittt	le
 80082b8:	2330      	movle	r3, #48	; 0x30
 80082ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082c2:	1b52      	subs	r2, r2, r5
 80082c4:	6122      	str	r2, [r4, #16]
 80082c6:	464b      	mov	r3, r9
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f8cd a000 	str.w	sl, [sp]
 80082d0:	aa03      	add	r2, sp, #12
 80082d2:	f7ff fedf 	bl	8008094 <_printf_common>
 80082d6:	3001      	adds	r0, #1
 80082d8:	d14c      	bne.n	8008374 <_printf_i+0x200>
 80082da:	f04f 30ff 	mov.w	r0, #4294967295
 80082de:	b004      	add	sp, #16
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	4834      	ldr	r0, [pc, #208]	; (80083b8 <_printf_i+0x244>)
 80082e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082ea:	6829      	ldr	r1, [r5, #0]
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80082f2:	6029      	str	r1, [r5, #0]
 80082f4:	061d      	lsls	r5, r3, #24
 80082f6:	d514      	bpl.n	8008322 <_printf_i+0x1ae>
 80082f8:	07df      	lsls	r7, r3, #31
 80082fa:	bf44      	itt	mi
 80082fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008300:	6023      	strmi	r3, [r4, #0]
 8008302:	b91e      	cbnz	r6, 800830c <_printf_i+0x198>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	f023 0320 	bic.w	r3, r3, #32
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	2310      	movs	r3, #16
 800830e:	e7af      	b.n	8008270 <_printf_i+0xfc>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	f043 0320 	orr.w	r3, r3, #32
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	2378      	movs	r3, #120	; 0x78
 800831a:	4828      	ldr	r0, [pc, #160]	; (80083bc <_printf_i+0x248>)
 800831c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008320:	e7e3      	b.n	80082ea <_printf_i+0x176>
 8008322:	0659      	lsls	r1, r3, #25
 8008324:	bf48      	it	mi
 8008326:	b2b6      	uxthmi	r6, r6
 8008328:	e7e6      	b.n	80082f8 <_printf_i+0x184>
 800832a:	4615      	mov	r5, r2
 800832c:	e7bb      	b.n	80082a6 <_printf_i+0x132>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	6826      	ldr	r6, [r4, #0]
 8008332:	1d18      	adds	r0, r3, #4
 8008334:	6961      	ldr	r1, [r4, #20]
 8008336:	6028      	str	r0, [r5, #0]
 8008338:	0635      	lsls	r5, r6, #24
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	d501      	bpl.n	8008342 <_printf_i+0x1ce>
 800833e:	6019      	str	r1, [r3, #0]
 8008340:	e002      	b.n	8008348 <_printf_i+0x1d4>
 8008342:	0670      	lsls	r0, r6, #25
 8008344:	d5fb      	bpl.n	800833e <_printf_i+0x1ca>
 8008346:	8019      	strh	r1, [r3, #0]
 8008348:	2300      	movs	r3, #0
 800834a:	4615      	mov	r5, r2
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	e7ba      	b.n	80082c6 <_printf_i+0x152>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	2100      	movs	r1, #0
 8008354:	1d1a      	adds	r2, r3, #4
 8008356:	602a      	str	r2, [r5, #0]
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	6862      	ldr	r2, [r4, #4]
 800835c:	4628      	mov	r0, r5
 800835e:	f000 fb13 	bl	8008988 <memchr>
 8008362:	b108      	cbz	r0, 8008368 <_printf_i+0x1f4>
 8008364:	1b40      	subs	r0, r0, r5
 8008366:	6060      	str	r0, [r4, #4]
 8008368:	6863      	ldr	r3, [r4, #4]
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	2300      	movs	r3, #0
 800836e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008372:	e7a8      	b.n	80082c6 <_printf_i+0x152>
 8008374:	462a      	mov	r2, r5
 8008376:	4649      	mov	r1, r9
 8008378:	4640      	mov	r0, r8
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	47d0      	blx	sl
 800837e:	3001      	adds	r0, #1
 8008380:	d0ab      	beq.n	80082da <_printf_i+0x166>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	079b      	lsls	r3, r3, #30
 8008386:	d413      	bmi.n	80083b0 <_printf_i+0x23c>
 8008388:	68e0      	ldr	r0, [r4, #12]
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	4298      	cmp	r0, r3
 800838e:	bfb8      	it	lt
 8008390:	4618      	movlt	r0, r3
 8008392:	e7a4      	b.n	80082de <_printf_i+0x16a>
 8008394:	2301      	movs	r3, #1
 8008396:	4632      	mov	r2, r6
 8008398:	4649      	mov	r1, r9
 800839a:	4640      	mov	r0, r8
 800839c:	47d0      	blx	sl
 800839e:	3001      	adds	r0, #1
 80083a0:	d09b      	beq.n	80082da <_printf_i+0x166>
 80083a2:	3501      	adds	r5, #1
 80083a4:	68e3      	ldr	r3, [r4, #12]
 80083a6:	9903      	ldr	r1, [sp, #12]
 80083a8:	1a5b      	subs	r3, r3, r1
 80083aa:	42ab      	cmp	r3, r5
 80083ac:	dcf2      	bgt.n	8008394 <_printf_i+0x220>
 80083ae:	e7eb      	b.n	8008388 <_printf_i+0x214>
 80083b0:	2500      	movs	r5, #0
 80083b2:	f104 0619 	add.w	r6, r4, #25
 80083b6:	e7f5      	b.n	80083a4 <_printf_i+0x230>
 80083b8:	08008ebd 	.word	0x08008ebd
 80083bc:	08008ece 	.word	0x08008ece

080083c0 <__swbuf_r>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	460e      	mov	r6, r1
 80083c4:	4614      	mov	r4, r2
 80083c6:	4605      	mov	r5, r0
 80083c8:	b118      	cbz	r0, 80083d2 <__swbuf_r+0x12>
 80083ca:	6983      	ldr	r3, [r0, #24]
 80083cc:	b90b      	cbnz	r3, 80083d2 <__swbuf_r+0x12>
 80083ce:	f000 f9d5 	bl	800877c <__sinit>
 80083d2:	4b21      	ldr	r3, [pc, #132]	; (8008458 <__swbuf_r+0x98>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d12b      	bne.n	8008430 <__swbuf_r+0x70>
 80083d8:	686c      	ldr	r4, [r5, #4]
 80083da:	69a3      	ldr	r3, [r4, #24]
 80083dc:	60a3      	str	r3, [r4, #8]
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	071a      	lsls	r2, r3, #28
 80083e2:	d52f      	bpl.n	8008444 <__swbuf_r+0x84>
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	b36b      	cbz	r3, 8008444 <__swbuf_r+0x84>
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	b2f6      	uxtb	r6, r6
 80083ee:	1ac0      	subs	r0, r0, r3
 80083f0:	6963      	ldr	r3, [r4, #20]
 80083f2:	4637      	mov	r7, r6
 80083f4:	4283      	cmp	r3, r0
 80083f6:	dc04      	bgt.n	8008402 <__swbuf_r+0x42>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f92a 	bl	8008654 <_fflush_r>
 8008400:	bb30      	cbnz	r0, 8008450 <__swbuf_r+0x90>
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	3001      	adds	r0, #1
 8008406:	3b01      	subs	r3, #1
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	701e      	strb	r6, [r3, #0]
 8008412:	6963      	ldr	r3, [r4, #20]
 8008414:	4283      	cmp	r3, r0
 8008416:	d004      	beq.n	8008422 <__swbuf_r+0x62>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	07db      	lsls	r3, r3, #31
 800841c:	d506      	bpl.n	800842c <__swbuf_r+0x6c>
 800841e:	2e0a      	cmp	r6, #10
 8008420:	d104      	bne.n	800842c <__swbuf_r+0x6c>
 8008422:	4621      	mov	r1, r4
 8008424:	4628      	mov	r0, r5
 8008426:	f000 f915 	bl	8008654 <_fflush_r>
 800842a:	b988      	cbnz	r0, 8008450 <__swbuf_r+0x90>
 800842c:	4638      	mov	r0, r7
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <__swbuf_r+0x9c>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d101      	bne.n	800843a <__swbuf_r+0x7a>
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	e7cf      	b.n	80083da <__swbuf_r+0x1a>
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <__swbuf_r+0xa0>)
 800843c:	429c      	cmp	r4, r3
 800843e:	bf08      	it	eq
 8008440:	68ec      	ldreq	r4, [r5, #12]
 8008442:	e7ca      	b.n	80083da <__swbuf_r+0x1a>
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f80c 	bl	8008464 <__swsetup_r>
 800844c:	2800      	cmp	r0, #0
 800844e:	d0cb      	beq.n	80083e8 <__swbuf_r+0x28>
 8008450:	f04f 37ff 	mov.w	r7, #4294967295
 8008454:	e7ea      	b.n	800842c <__swbuf_r+0x6c>
 8008456:	bf00      	nop
 8008458:	08008f00 	.word	0x08008f00
 800845c:	08008f20 	.word	0x08008f20
 8008460:	08008ee0 	.word	0x08008ee0

08008464 <__swsetup_r>:
 8008464:	4b32      	ldr	r3, [pc, #200]	; (8008530 <__swsetup_r+0xcc>)
 8008466:	b570      	push	{r4, r5, r6, lr}
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	4606      	mov	r6, r0
 800846c:	460c      	mov	r4, r1
 800846e:	b125      	cbz	r5, 800847a <__swsetup_r+0x16>
 8008470:	69ab      	ldr	r3, [r5, #24]
 8008472:	b913      	cbnz	r3, 800847a <__swsetup_r+0x16>
 8008474:	4628      	mov	r0, r5
 8008476:	f000 f981 	bl	800877c <__sinit>
 800847a:	4b2e      	ldr	r3, [pc, #184]	; (8008534 <__swsetup_r+0xd0>)
 800847c:	429c      	cmp	r4, r3
 800847e:	d10f      	bne.n	80084a0 <__swsetup_r+0x3c>
 8008480:	686c      	ldr	r4, [r5, #4]
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008488:	0719      	lsls	r1, r3, #28
 800848a:	d42c      	bmi.n	80084e6 <__swsetup_r+0x82>
 800848c:	06dd      	lsls	r5, r3, #27
 800848e:	d411      	bmi.n	80084b4 <__swsetup_r+0x50>
 8008490:	2309      	movs	r3, #9
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	e03e      	b.n	800851e <__swsetup_r+0xba>
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <__swsetup_r+0xd4>)
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d101      	bne.n	80084aa <__swsetup_r+0x46>
 80084a6:	68ac      	ldr	r4, [r5, #8]
 80084a8:	e7eb      	b.n	8008482 <__swsetup_r+0x1e>
 80084aa:	4b24      	ldr	r3, [pc, #144]	; (800853c <__swsetup_r+0xd8>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	bf08      	it	eq
 80084b0:	68ec      	ldreq	r4, [r5, #12]
 80084b2:	e7e6      	b.n	8008482 <__swsetup_r+0x1e>
 80084b4:	0758      	lsls	r0, r3, #29
 80084b6:	d512      	bpl.n	80084de <__swsetup_r+0x7a>
 80084b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ba:	b141      	cbz	r1, 80084ce <__swsetup_r+0x6a>
 80084bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084c0:	4299      	cmp	r1, r3
 80084c2:	d002      	beq.n	80084ca <__swsetup_r+0x66>
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 fa6d 	bl	80089a4 <_free_r>
 80084ca:	2300      	movs	r3, #0
 80084cc:	6363      	str	r3, [r4, #52]	; 0x34
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	2300      	movs	r3, #0
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	f043 0308 	orr.w	r3, r3, #8
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	b94b      	cbnz	r3, 80084fe <__swsetup_r+0x9a>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f4:	d003      	beq.n	80084fe <__swsetup_r+0x9a>
 80084f6:	4621      	mov	r1, r4
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 fa05 	bl	8008908 <__smakebuf_r>
 80084fe:	89a0      	ldrh	r0, [r4, #12]
 8008500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008504:	f010 0301 	ands.w	r3, r0, #1
 8008508:	d00a      	beq.n	8008520 <__swsetup_r+0xbc>
 800850a:	2300      	movs	r3, #0
 800850c:	60a3      	str	r3, [r4, #8]
 800850e:	6963      	ldr	r3, [r4, #20]
 8008510:	425b      	negs	r3, r3
 8008512:	61a3      	str	r3, [r4, #24]
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	b943      	cbnz	r3, 800852a <__swsetup_r+0xc6>
 8008518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800851c:	d1ba      	bne.n	8008494 <__swsetup_r+0x30>
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	0781      	lsls	r1, r0, #30
 8008522:	bf58      	it	pl
 8008524:	6963      	ldrpl	r3, [r4, #20]
 8008526:	60a3      	str	r3, [r4, #8]
 8008528:	e7f4      	b.n	8008514 <__swsetup_r+0xb0>
 800852a:	2000      	movs	r0, #0
 800852c:	e7f7      	b.n	800851e <__swsetup_r+0xba>
 800852e:	bf00      	nop
 8008530:	20000010 	.word	0x20000010
 8008534:	08008f00 	.word	0x08008f00
 8008538:	08008f20 	.word	0x08008f20
 800853c:	08008ee0 	.word	0x08008ee0

08008540 <abort>:
 8008540:	2006      	movs	r0, #6
 8008542:	b508      	push	{r3, lr}
 8008544:	f000 fb42 	bl	8008bcc <raise>
 8008548:	2001      	movs	r0, #1
 800854a:	f7fb faf2 	bl	8003b32 <_exit>
	...

08008550 <__sflush_r>:
 8008550:	898a      	ldrh	r2, [r1, #12]
 8008552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008554:	4605      	mov	r5, r0
 8008556:	0710      	lsls	r0, r2, #28
 8008558:	460c      	mov	r4, r1
 800855a:	d457      	bmi.n	800860c <__sflush_r+0xbc>
 800855c:	684b      	ldr	r3, [r1, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	dc04      	bgt.n	800856c <__sflush_r+0x1c>
 8008562:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc01      	bgt.n	800856c <__sflush_r+0x1c>
 8008568:	2000      	movs	r0, #0
 800856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800856c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800856e:	2e00      	cmp	r6, #0
 8008570:	d0fa      	beq.n	8008568 <__sflush_r+0x18>
 8008572:	2300      	movs	r3, #0
 8008574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008578:	682f      	ldr	r7, [r5, #0]
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	d032      	beq.n	80085e4 <__sflush_r+0x94>
 800857e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	075a      	lsls	r2, r3, #29
 8008584:	d505      	bpl.n	8008592 <__sflush_r+0x42>
 8008586:	6863      	ldr	r3, [r4, #4]
 8008588:	1ac0      	subs	r0, r0, r3
 800858a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800858c:	b10b      	cbz	r3, 8008592 <__sflush_r+0x42>
 800858e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008590:	1ac0      	subs	r0, r0, r3
 8008592:	2300      	movs	r3, #0
 8008594:	4602      	mov	r2, r0
 8008596:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008598:	4628      	mov	r0, r5
 800859a:	6a21      	ldr	r1, [r4, #32]
 800859c:	47b0      	blx	r6
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	d106      	bne.n	80085b2 <__sflush_r+0x62>
 80085a4:	6829      	ldr	r1, [r5, #0]
 80085a6:	291d      	cmp	r1, #29
 80085a8:	d82c      	bhi.n	8008604 <__sflush_r+0xb4>
 80085aa:	4a29      	ldr	r2, [pc, #164]	; (8008650 <__sflush_r+0x100>)
 80085ac:	40ca      	lsrs	r2, r1
 80085ae:	07d6      	lsls	r6, r2, #31
 80085b0:	d528      	bpl.n	8008604 <__sflush_r+0xb4>
 80085b2:	2200      	movs	r2, #0
 80085b4:	6062      	str	r2, [r4, #4]
 80085b6:	6922      	ldr	r2, [r4, #16]
 80085b8:	04d9      	lsls	r1, r3, #19
 80085ba:	6022      	str	r2, [r4, #0]
 80085bc:	d504      	bpl.n	80085c8 <__sflush_r+0x78>
 80085be:	1c42      	adds	r2, r0, #1
 80085c0:	d101      	bne.n	80085c6 <__sflush_r+0x76>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b903      	cbnz	r3, 80085c8 <__sflush_r+0x78>
 80085c6:	6560      	str	r0, [r4, #84]	; 0x54
 80085c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ca:	602f      	str	r7, [r5, #0]
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d0cb      	beq.n	8008568 <__sflush_r+0x18>
 80085d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d4:	4299      	cmp	r1, r3
 80085d6:	d002      	beq.n	80085de <__sflush_r+0x8e>
 80085d8:	4628      	mov	r0, r5
 80085da:	f000 f9e3 	bl	80089a4 <_free_r>
 80085de:	2000      	movs	r0, #0
 80085e0:	6360      	str	r0, [r4, #52]	; 0x34
 80085e2:	e7c2      	b.n	800856a <__sflush_r+0x1a>
 80085e4:	6a21      	ldr	r1, [r4, #32]
 80085e6:	2301      	movs	r3, #1
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b0      	blx	r6
 80085ec:	1c41      	adds	r1, r0, #1
 80085ee:	d1c7      	bne.n	8008580 <__sflush_r+0x30>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0c4      	beq.n	8008580 <__sflush_r+0x30>
 80085f6:	2b1d      	cmp	r3, #29
 80085f8:	d001      	beq.n	80085fe <__sflush_r+0xae>
 80085fa:	2b16      	cmp	r3, #22
 80085fc:	d101      	bne.n	8008602 <__sflush_r+0xb2>
 80085fe:	602f      	str	r7, [r5, #0]
 8008600:	e7b2      	b.n	8008568 <__sflush_r+0x18>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	e7ae      	b.n	800856a <__sflush_r+0x1a>
 800860c:	690f      	ldr	r7, [r1, #16]
 800860e:	2f00      	cmp	r7, #0
 8008610:	d0aa      	beq.n	8008568 <__sflush_r+0x18>
 8008612:	0793      	lsls	r3, r2, #30
 8008614:	bf18      	it	ne
 8008616:	2300      	movne	r3, #0
 8008618:	680e      	ldr	r6, [r1, #0]
 800861a:	bf08      	it	eq
 800861c:	694b      	ldreq	r3, [r1, #20]
 800861e:	1bf6      	subs	r6, r6, r7
 8008620:	600f      	str	r7, [r1, #0]
 8008622:	608b      	str	r3, [r1, #8]
 8008624:	2e00      	cmp	r6, #0
 8008626:	dd9f      	ble.n	8008568 <__sflush_r+0x18>
 8008628:	4633      	mov	r3, r6
 800862a:	463a      	mov	r2, r7
 800862c:	4628      	mov	r0, r5
 800862e:	6a21      	ldr	r1, [r4, #32]
 8008630:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008634:	47e0      	blx	ip
 8008636:	2800      	cmp	r0, #0
 8008638:	dc06      	bgt.n	8008648 <__sflush_r+0xf8>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	e790      	b.n	800856a <__sflush_r+0x1a>
 8008648:	4407      	add	r7, r0
 800864a:	1a36      	subs	r6, r6, r0
 800864c:	e7ea      	b.n	8008624 <__sflush_r+0xd4>
 800864e:	bf00      	nop
 8008650:	20400001 	.word	0x20400001

08008654 <_fflush_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	690b      	ldr	r3, [r1, #16]
 8008658:	4605      	mov	r5, r0
 800865a:	460c      	mov	r4, r1
 800865c:	b913      	cbnz	r3, 8008664 <_fflush_r+0x10>
 800865e:	2500      	movs	r5, #0
 8008660:	4628      	mov	r0, r5
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	b118      	cbz	r0, 800866e <_fflush_r+0x1a>
 8008666:	6983      	ldr	r3, [r0, #24]
 8008668:	b90b      	cbnz	r3, 800866e <_fflush_r+0x1a>
 800866a:	f000 f887 	bl	800877c <__sinit>
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <_fflush_r+0x6c>)
 8008670:	429c      	cmp	r4, r3
 8008672:	d11b      	bne.n	80086ac <_fflush_r+0x58>
 8008674:	686c      	ldr	r4, [r5, #4]
 8008676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0ef      	beq.n	800865e <_fflush_r+0xa>
 800867e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008680:	07d0      	lsls	r0, r2, #31
 8008682:	d404      	bmi.n	800868e <_fflush_r+0x3a>
 8008684:	0599      	lsls	r1, r3, #22
 8008686:	d402      	bmi.n	800868e <_fflush_r+0x3a>
 8008688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868a:	f000 f915 	bl	80088b8 <__retarget_lock_acquire_recursive>
 800868e:	4628      	mov	r0, r5
 8008690:	4621      	mov	r1, r4
 8008692:	f7ff ff5d 	bl	8008550 <__sflush_r>
 8008696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008698:	4605      	mov	r5, r0
 800869a:	07da      	lsls	r2, r3, #31
 800869c:	d4e0      	bmi.n	8008660 <_fflush_r+0xc>
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	059b      	lsls	r3, r3, #22
 80086a2:	d4dd      	bmi.n	8008660 <_fflush_r+0xc>
 80086a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086a6:	f000 f908 	bl	80088ba <__retarget_lock_release_recursive>
 80086aa:	e7d9      	b.n	8008660 <_fflush_r+0xc>
 80086ac:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <_fflush_r+0x70>)
 80086ae:	429c      	cmp	r4, r3
 80086b0:	d101      	bne.n	80086b6 <_fflush_r+0x62>
 80086b2:	68ac      	ldr	r4, [r5, #8]
 80086b4:	e7df      	b.n	8008676 <_fflush_r+0x22>
 80086b6:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <_fflush_r+0x74>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	bf08      	it	eq
 80086bc:	68ec      	ldreq	r4, [r5, #12]
 80086be:	e7da      	b.n	8008676 <_fflush_r+0x22>
 80086c0:	08008f00 	.word	0x08008f00
 80086c4:	08008f20 	.word	0x08008f20
 80086c8:	08008ee0 	.word	0x08008ee0

080086cc <std>:
 80086cc:	2300      	movs	r3, #0
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	e9c0 3300 	strd	r3, r3, [r0]
 80086d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086da:	6083      	str	r3, [r0, #8]
 80086dc:	8181      	strh	r1, [r0, #12]
 80086de:	6643      	str	r3, [r0, #100]	; 0x64
 80086e0:	81c2      	strh	r2, [r0, #14]
 80086e2:	6183      	str	r3, [r0, #24]
 80086e4:	4619      	mov	r1, r3
 80086e6:	2208      	movs	r2, #8
 80086e8:	305c      	adds	r0, #92	; 0x5c
 80086ea:	f7ff fb73 	bl	8007dd4 <memset>
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <std+0x38>)
 80086f0:	6224      	str	r4, [r4, #32]
 80086f2:	6263      	str	r3, [r4, #36]	; 0x24
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <std+0x3c>)
 80086f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <std+0x40>)
 80086fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <std+0x44>)
 80086fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008700:	bd10      	pop	{r4, pc}
 8008702:	bf00      	nop
 8008704:	08008c05 	.word	0x08008c05
 8008708:	08008c27 	.word	0x08008c27
 800870c:	08008c5f 	.word	0x08008c5f
 8008710:	08008c83 	.word	0x08008c83

08008714 <_cleanup_r>:
 8008714:	4901      	ldr	r1, [pc, #4]	; (800871c <_cleanup_r+0x8>)
 8008716:	f000 b8af 	b.w	8008878 <_fwalk_reent>
 800871a:	bf00      	nop
 800871c:	08008655 	.word	0x08008655

08008720 <__sfmoreglue>:
 8008720:	2268      	movs	r2, #104	; 0x68
 8008722:	b570      	push	{r4, r5, r6, lr}
 8008724:	1e4d      	subs	r5, r1, #1
 8008726:	4355      	muls	r5, r2
 8008728:	460e      	mov	r6, r1
 800872a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800872e:	f000 f9a1 	bl	8008a74 <_malloc_r>
 8008732:	4604      	mov	r4, r0
 8008734:	b140      	cbz	r0, 8008748 <__sfmoreglue+0x28>
 8008736:	2100      	movs	r1, #0
 8008738:	e9c0 1600 	strd	r1, r6, [r0]
 800873c:	300c      	adds	r0, #12
 800873e:	60a0      	str	r0, [r4, #8]
 8008740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008744:	f7ff fb46 	bl	8007dd4 <memset>
 8008748:	4620      	mov	r0, r4
 800874a:	bd70      	pop	{r4, r5, r6, pc}

0800874c <__sfp_lock_acquire>:
 800874c:	4801      	ldr	r0, [pc, #4]	; (8008754 <__sfp_lock_acquire+0x8>)
 800874e:	f000 b8b3 	b.w	80088b8 <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	20000de5 	.word	0x20000de5

08008758 <__sfp_lock_release>:
 8008758:	4801      	ldr	r0, [pc, #4]	; (8008760 <__sfp_lock_release+0x8>)
 800875a:	f000 b8ae 	b.w	80088ba <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	20000de5 	.word	0x20000de5

08008764 <__sinit_lock_acquire>:
 8008764:	4801      	ldr	r0, [pc, #4]	; (800876c <__sinit_lock_acquire+0x8>)
 8008766:	f000 b8a7 	b.w	80088b8 <__retarget_lock_acquire_recursive>
 800876a:	bf00      	nop
 800876c:	20000de6 	.word	0x20000de6

08008770 <__sinit_lock_release>:
 8008770:	4801      	ldr	r0, [pc, #4]	; (8008778 <__sinit_lock_release+0x8>)
 8008772:	f000 b8a2 	b.w	80088ba <__retarget_lock_release_recursive>
 8008776:	bf00      	nop
 8008778:	20000de6 	.word	0x20000de6

0800877c <__sinit>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	f7ff fff0 	bl	8008764 <__sinit_lock_acquire>
 8008784:	69a3      	ldr	r3, [r4, #24]
 8008786:	b11b      	cbz	r3, 8008790 <__sinit+0x14>
 8008788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800878c:	f7ff bff0 	b.w	8008770 <__sinit_lock_release>
 8008790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008794:	6523      	str	r3, [r4, #80]	; 0x50
 8008796:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <__sinit+0x68>)
 8008798:	4a13      	ldr	r2, [pc, #76]	; (80087e8 <__sinit+0x6c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	62a2      	str	r2, [r4, #40]	; 0x28
 800879e:	42a3      	cmp	r3, r4
 80087a0:	bf08      	it	eq
 80087a2:	2301      	moveq	r3, #1
 80087a4:	4620      	mov	r0, r4
 80087a6:	bf08      	it	eq
 80087a8:	61a3      	streq	r3, [r4, #24]
 80087aa:	f000 f81f 	bl	80087ec <__sfp>
 80087ae:	6060      	str	r0, [r4, #4]
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 f81b 	bl	80087ec <__sfp>
 80087b6:	60a0      	str	r0, [r4, #8]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 f817 	bl	80087ec <__sfp>
 80087be:	2200      	movs	r2, #0
 80087c0:	2104      	movs	r1, #4
 80087c2:	60e0      	str	r0, [r4, #12]
 80087c4:	6860      	ldr	r0, [r4, #4]
 80087c6:	f7ff ff81 	bl	80086cc <std>
 80087ca:	2201      	movs	r2, #1
 80087cc:	2109      	movs	r1, #9
 80087ce:	68a0      	ldr	r0, [r4, #8]
 80087d0:	f7ff ff7c 	bl	80086cc <std>
 80087d4:	2202      	movs	r2, #2
 80087d6:	2112      	movs	r1, #18
 80087d8:	68e0      	ldr	r0, [r4, #12]
 80087da:	f7ff ff77 	bl	80086cc <std>
 80087de:	2301      	movs	r3, #1
 80087e0:	61a3      	str	r3, [r4, #24]
 80087e2:	e7d1      	b.n	8008788 <__sinit+0xc>
 80087e4:	08008ea8 	.word	0x08008ea8
 80087e8:	08008715 	.word	0x08008715

080087ec <__sfp>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	4607      	mov	r7, r0
 80087f0:	f7ff ffac 	bl	800874c <__sfp_lock_acquire>
 80087f4:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <__sfp+0x84>)
 80087f6:	681e      	ldr	r6, [r3, #0]
 80087f8:	69b3      	ldr	r3, [r6, #24]
 80087fa:	b913      	cbnz	r3, 8008802 <__sfp+0x16>
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff ffbd 	bl	800877c <__sinit>
 8008802:	3648      	adds	r6, #72	; 0x48
 8008804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008808:	3b01      	subs	r3, #1
 800880a:	d503      	bpl.n	8008814 <__sfp+0x28>
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	b30b      	cbz	r3, 8008854 <__sfp+0x68>
 8008810:	6836      	ldr	r6, [r6, #0]
 8008812:	e7f7      	b.n	8008804 <__sfp+0x18>
 8008814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008818:	b9d5      	cbnz	r5, 8008850 <__sfp+0x64>
 800881a:	4b16      	ldr	r3, [pc, #88]	; (8008874 <__sfp+0x88>)
 800881c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008820:	60e3      	str	r3, [r4, #12]
 8008822:	6665      	str	r5, [r4, #100]	; 0x64
 8008824:	f000 f847 	bl	80088b6 <__retarget_lock_init_recursive>
 8008828:	f7ff ff96 	bl	8008758 <__sfp_lock_release>
 800882c:	2208      	movs	r2, #8
 800882e:	4629      	mov	r1, r5
 8008830:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008834:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008838:	6025      	str	r5, [r4, #0]
 800883a:	61a5      	str	r5, [r4, #24]
 800883c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008840:	f7ff fac8 	bl	8007dd4 <memset>
 8008844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800884c:	4620      	mov	r0, r4
 800884e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008850:	3468      	adds	r4, #104	; 0x68
 8008852:	e7d9      	b.n	8008808 <__sfp+0x1c>
 8008854:	2104      	movs	r1, #4
 8008856:	4638      	mov	r0, r7
 8008858:	f7ff ff62 	bl	8008720 <__sfmoreglue>
 800885c:	4604      	mov	r4, r0
 800885e:	6030      	str	r0, [r6, #0]
 8008860:	2800      	cmp	r0, #0
 8008862:	d1d5      	bne.n	8008810 <__sfp+0x24>
 8008864:	f7ff ff78 	bl	8008758 <__sfp_lock_release>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	e7ee      	b.n	800884c <__sfp+0x60>
 800886e:	bf00      	nop
 8008870:	08008ea8 	.word	0x08008ea8
 8008874:	ffff0001 	.word	0xffff0001

08008878 <_fwalk_reent>:
 8008878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800887c:	4606      	mov	r6, r0
 800887e:	4688      	mov	r8, r1
 8008880:	2700      	movs	r7, #0
 8008882:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800888a:	f1b9 0901 	subs.w	r9, r9, #1
 800888e:	d505      	bpl.n	800889c <_fwalk_reent+0x24>
 8008890:	6824      	ldr	r4, [r4, #0]
 8008892:	2c00      	cmp	r4, #0
 8008894:	d1f7      	bne.n	8008886 <_fwalk_reent+0xe>
 8008896:	4638      	mov	r0, r7
 8008898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889c:	89ab      	ldrh	r3, [r5, #12]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d907      	bls.n	80088b2 <_fwalk_reent+0x3a>
 80088a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a6:	3301      	adds	r3, #1
 80088a8:	d003      	beq.n	80088b2 <_fwalk_reent+0x3a>
 80088aa:	4629      	mov	r1, r5
 80088ac:	4630      	mov	r0, r6
 80088ae:	47c0      	blx	r8
 80088b0:	4307      	orrs	r7, r0
 80088b2:	3568      	adds	r5, #104	; 0x68
 80088b4:	e7e9      	b.n	800888a <_fwalk_reent+0x12>

080088b6 <__retarget_lock_init_recursive>:
 80088b6:	4770      	bx	lr

080088b8 <__retarget_lock_acquire_recursive>:
 80088b8:	4770      	bx	lr

080088ba <__retarget_lock_release_recursive>:
 80088ba:	4770      	bx	lr

080088bc <__swhatbuf_r>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	460e      	mov	r6, r1
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	4614      	mov	r4, r2
 80088c6:	2900      	cmp	r1, #0
 80088c8:	461d      	mov	r5, r3
 80088ca:	b096      	sub	sp, #88	; 0x58
 80088cc:	da08      	bge.n	80088e0 <__swhatbuf_r+0x24>
 80088ce:	2200      	movs	r2, #0
 80088d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80088d4:	602a      	str	r2, [r5, #0]
 80088d6:	061a      	lsls	r2, r3, #24
 80088d8:	d410      	bmi.n	80088fc <__swhatbuf_r+0x40>
 80088da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088de:	e00e      	b.n	80088fe <__swhatbuf_r+0x42>
 80088e0:	466a      	mov	r2, sp
 80088e2:	f000 f9f5 	bl	8008cd0 <_fstat_r>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	dbf1      	blt.n	80088ce <__swhatbuf_r+0x12>
 80088ea:	9a01      	ldr	r2, [sp, #4]
 80088ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088f4:	425a      	negs	r2, r3
 80088f6:	415a      	adcs	r2, r3
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	e7ee      	b.n	80088da <__swhatbuf_r+0x1e>
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	2000      	movs	r0, #0
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	b016      	add	sp, #88	; 0x58
 8008904:	bd70      	pop	{r4, r5, r6, pc}
	...

08008908 <__smakebuf_r>:
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800890c:	079d      	lsls	r5, r3, #30
 800890e:	4606      	mov	r6, r0
 8008910:	460c      	mov	r4, r1
 8008912:	d507      	bpl.n	8008924 <__smakebuf_r+0x1c>
 8008914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	2301      	movs	r3, #1
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	b002      	add	sp, #8
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	466a      	mov	r2, sp
 8008926:	ab01      	add	r3, sp, #4
 8008928:	f7ff ffc8 	bl	80088bc <__swhatbuf_r>
 800892c:	9900      	ldr	r1, [sp, #0]
 800892e:	4605      	mov	r5, r0
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f89f 	bl	8008a74 <_malloc_r>
 8008936:	b948      	cbnz	r0, 800894c <__smakebuf_r+0x44>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	059a      	lsls	r2, r3, #22
 800893e:	d4ef      	bmi.n	8008920 <__smakebuf_r+0x18>
 8008940:	f023 0303 	bic.w	r3, r3, #3
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e7e3      	b.n	8008914 <__smakebuf_r+0xc>
 800894c:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <__smakebuf_r+0x7c>)
 800894e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	9b00      	ldr	r3, [sp, #0]
 800895c:	6120      	str	r0, [r4, #16]
 800895e:	6163      	str	r3, [r4, #20]
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	b15b      	cbz	r3, 800897c <__smakebuf_r+0x74>
 8008964:	4630      	mov	r0, r6
 8008966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896a:	f000 f9c3 	bl	8008cf4 <_isatty_r>
 800896e:	b128      	cbz	r0, 800897c <__smakebuf_r+0x74>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	89a0      	ldrh	r0, [r4, #12]
 800897e:	4305      	orrs	r5, r0
 8008980:	81a5      	strh	r5, [r4, #12]
 8008982:	e7cd      	b.n	8008920 <__smakebuf_r+0x18>
 8008984:	08008715 	.word	0x08008715

08008988 <memchr>:
 8008988:	4603      	mov	r3, r0
 800898a:	b510      	push	{r4, lr}
 800898c:	b2c9      	uxtb	r1, r1
 800898e:	4402      	add	r2, r0
 8008990:	4293      	cmp	r3, r2
 8008992:	4618      	mov	r0, r3
 8008994:	d101      	bne.n	800899a <memchr+0x12>
 8008996:	2000      	movs	r0, #0
 8008998:	e003      	b.n	80089a2 <memchr+0x1a>
 800899a:	7804      	ldrb	r4, [r0, #0]
 800899c:	3301      	adds	r3, #1
 800899e:	428c      	cmp	r4, r1
 80089a0:	d1f6      	bne.n	8008990 <memchr+0x8>
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <_free_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4605      	mov	r5, r0
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d040      	beq.n	8008a2e <_free_r+0x8a>
 80089ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b0:	1f0c      	subs	r4, r1, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfb8      	it	lt
 80089b6:	18e4      	addlt	r4, r4, r3
 80089b8:	f000 f9be 	bl	8008d38 <__malloc_lock>
 80089bc:	4a1c      	ldr	r2, [pc, #112]	; (8008a30 <_free_r+0x8c>)
 80089be:	6813      	ldr	r3, [r2, #0]
 80089c0:	b933      	cbnz	r3, 80089d0 <_free_r+0x2c>
 80089c2:	6063      	str	r3, [r4, #4]
 80089c4:	6014      	str	r4, [r2, #0]
 80089c6:	4628      	mov	r0, r5
 80089c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089cc:	f000 b9ba 	b.w	8008d44 <__malloc_unlock>
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	d908      	bls.n	80089e6 <_free_r+0x42>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	1821      	adds	r1, r4, r0
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf01      	itttt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	1809      	addeq	r1, r1, r0
 80089e2:	6021      	streq	r1, [r4, #0]
 80089e4:	e7ed      	b.n	80089c2 <_free_r+0x1e>
 80089e6:	461a      	mov	r2, r3
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	b10b      	cbz	r3, 80089f0 <_free_r+0x4c>
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d9fa      	bls.n	80089e6 <_free_r+0x42>
 80089f0:	6811      	ldr	r1, [r2, #0]
 80089f2:	1850      	adds	r0, r2, r1
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d10b      	bne.n	8008a10 <_free_r+0x6c>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	4401      	add	r1, r0
 80089fc:	1850      	adds	r0, r2, r1
 80089fe:	4283      	cmp	r3, r0
 8008a00:	6011      	str	r1, [r2, #0]
 8008a02:	d1e0      	bne.n	80089c6 <_free_r+0x22>
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	4401      	add	r1, r0
 8008a0a:	6011      	str	r1, [r2, #0]
 8008a0c:	6053      	str	r3, [r2, #4]
 8008a0e:	e7da      	b.n	80089c6 <_free_r+0x22>
 8008a10:	d902      	bls.n	8008a18 <_free_r+0x74>
 8008a12:	230c      	movs	r3, #12
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	e7d6      	b.n	80089c6 <_free_r+0x22>
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	1821      	adds	r1, r4, r0
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	bf01      	itttt	eq
 8008a20:	6819      	ldreq	r1, [r3, #0]
 8008a22:	685b      	ldreq	r3, [r3, #4]
 8008a24:	1809      	addeq	r1, r1, r0
 8008a26:	6021      	streq	r1, [r4, #0]
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	6054      	str	r4, [r2, #4]
 8008a2c:	e7cb      	b.n	80089c6 <_free_r+0x22>
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	20000de8 	.word	0x20000de8

08008a34 <sbrk_aligned>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4e0e      	ldr	r6, [pc, #56]	; (8008a70 <sbrk_aligned+0x3c>)
 8008a38:	460c      	mov	r4, r1
 8008a3a:	6831      	ldr	r1, [r6, #0]
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	b911      	cbnz	r1, 8008a46 <sbrk_aligned+0x12>
 8008a40:	f000 f88c 	bl	8008b5c <_sbrk_r>
 8008a44:	6030      	str	r0, [r6, #0]
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f887 	bl	8008b5c <_sbrk_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	d00a      	beq.n	8008a68 <sbrk_aligned+0x34>
 8008a52:	1cc4      	adds	r4, r0, #3
 8008a54:	f024 0403 	bic.w	r4, r4, #3
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d007      	beq.n	8008a6c <sbrk_aligned+0x38>
 8008a5c:	1a21      	subs	r1, r4, r0
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f87c 	bl	8008b5c <_sbrk_r>
 8008a64:	3001      	adds	r0, #1
 8008a66:	d101      	bne.n	8008a6c <sbrk_aligned+0x38>
 8008a68:	f04f 34ff 	mov.w	r4, #4294967295
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	20000dec 	.word	0x20000dec

08008a74 <_malloc_r>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	1ccd      	adds	r5, r1, #3
 8008a7a:	f025 0503 	bic.w	r5, r5, #3
 8008a7e:	3508      	adds	r5, #8
 8008a80:	2d0c      	cmp	r5, #12
 8008a82:	bf38      	it	cc
 8008a84:	250c      	movcc	r5, #12
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	4607      	mov	r7, r0
 8008a8a:	db01      	blt.n	8008a90 <_malloc_r+0x1c>
 8008a8c:	42a9      	cmp	r1, r5
 8008a8e:	d905      	bls.n	8008a9c <_malloc_r+0x28>
 8008a90:	230c      	movs	r3, #12
 8008a92:	2600      	movs	r6, #0
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4630      	mov	r0, r6
 8008a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9c:	4e2e      	ldr	r6, [pc, #184]	; (8008b58 <_malloc_r+0xe4>)
 8008a9e:	f000 f94b 	bl	8008d38 <__malloc_lock>
 8008aa2:	6833      	ldr	r3, [r6, #0]
 8008aa4:	461c      	mov	r4, r3
 8008aa6:	bb34      	cbnz	r4, 8008af6 <_malloc_r+0x82>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7ff ffc2 	bl	8008a34 <sbrk_aligned>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	d14d      	bne.n	8008b52 <_malloc_r+0xde>
 8008ab6:	6834      	ldr	r4, [r6, #0]
 8008ab8:	4626      	mov	r6, r4
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	d140      	bne.n	8008b40 <_malloc_r+0xcc>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	eb04 0803 	add.w	r8, r4, r3
 8008ac8:	f000 f848 	bl	8008b5c <_sbrk_r>
 8008acc:	4580      	cmp	r8, r0
 8008ace:	d13a      	bne.n	8008b46 <_malloc_r+0xd2>
 8008ad0:	6821      	ldr	r1, [r4, #0]
 8008ad2:	3503      	adds	r5, #3
 8008ad4:	1a6d      	subs	r5, r5, r1
 8008ad6:	f025 0503 	bic.w	r5, r5, #3
 8008ada:	3508      	adds	r5, #8
 8008adc:	2d0c      	cmp	r5, #12
 8008ade:	bf38      	it	cc
 8008ae0:	250c      	movcc	r5, #12
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7ff ffa5 	bl	8008a34 <sbrk_aligned>
 8008aea:	3001      	adds	r0, #1
 8008aec:	d02b      	beq.n	8008b46 <_malloc_r+0xd2>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	442b      	add	r3, r5
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	e00e      	b.n	8008b14 <_malloc_r+0xa0>
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	1b52      	subs	r2, r2, r5
 8008afa:	d41e      	bmi.n	8008b3a <_malloc_r+0xc6>
 8008afc:	2a0b      	cmp	r2, #11
 8008afe:	d916      	bls.n	8008b2e <_malloc_r+0xba>
 8008b00:	1961      	adds	r1, r4, r5
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	6025      	str	r5, [r4, #0]
 8008b06:	bf18      	it	ne
 8008b08:	6059      	strne	r1, [r3, #4]
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	bf08      	it	eq
 8008b0e:	6031      	streq	r1, [r6, #0]
 8008b10:	5162      	str	r2, [r4, r5]
 8008b12:	604b      	str	r3, [r1, #4]
 8008b14:	4638      	mov	r0, r7
 8008b16:	f104 060b 	add.w	r6, r4, #11
 8008b1a:	f000 f913 	bl	8008d44 <__malloc_unlock>
 8008b1e:	f026 0607 	bic.w	r6, r6, #7
 8008b22:	1d23      	adds	r3, r4, #4
 8008b24:	1af2      	subs	r2, r6, r3
 8008b26:	d0b6      	beq.n	8008a96 <_malloc_r+0x22>
 8008b28:	1b9b      	subs	r3, r3, r6
 8008b2a:	50a3      	str	r3, [r4, r2]
 8008b2c:	e7b3      	b.n	8008a96 <_malloc_r+0x22>
 8008b2e:	6862      	ldr	r2, [r4, #4]
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	bf0c      	ite	eq
 8008b34:	6032      	streq	r2, [r6, #0]
 8008b36:	605a      	strne	r2, [r3, #4]
 8008b38:	e7ec      	b.n	8008b14 <_malloc_r+0xa0>
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	6864      	ldr	r4, [r4, #4]
 8008b3e:	e7b2      	b.n	8008aa6 <_malloc_r+0x32>
 8008b40:	4634      	mov	r4, r6
 8008b42:	6876      	ldr	r6, [r6, #4]
 8008b44:	e7b9      	b.n	8008aba <_malloc_r+0x46>
 8008b46:	230c      	movs	r3, #12
 8008b48:	4638      	mov	r0, r7
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	f000 f8fa 	bl	8008d44 <__malloc_unlock>
 8008b50:	e7a1      	b.n	8008a96 <_malloc_r+0x22>
 8008b52:	6025      	str	r5, [r4, #0]
 8008b54:	e7de      	b.n	8008b14 <_malloc_r+0xa0>
 8008b56:	bf00      	nop
 8008b58:	20000de8 	.word	0x20000de8

08008b5c <_sbrk_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	2300      	movs	r3, #0
 8008b60:	4d05      	ldr	r5, [pc, #20]	; (8008b78 <_sbrk_r+0x1c>)
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7fb f856 	bl	8003c18 <_sbrk>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_sbrk_r+0x1a>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_sbrk_r+0x1a>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000df0 	.word	0x20000df0

08008b7c <_raise_r>:
 8008b7c:	291f      	cmp	r1, #31
 8008b7e:	b538      	push	{r3, r4, r5, lr}
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	d904      	bls.n	8008b90 <_raise_r+0x14>
 8008b86:	2316      	movs	r3, #22
 8008b88:	6003      	str	r3, [r0, #0]
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b92:	b112      	cbz	r2, 8008b9a <_raise_r+0x1e>
 8008b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b98:	b94b      	cbnz	r3, 8008bae <_raise_r+0x32>
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 f830 	bl	8008c00 <_getpid_r>
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008baa:	f000 b817 	b.w	8008bdc <_kill_r>
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d00a      	beq.n	8008bc8 <_raise_r+0x4c>
 8008bb2:	1c59      	adds	r1, r3, #1
 8008bb4:	d103      	bne.n	8008bbe <_raise_r+0x42>
 8008bb6:	2316      	movs	r3, #22
 8008bb8:	6003      	str	r3, [r0, #0]
 8008bba:	2001      	movs	r0, #1
 8008bbc:	e7e7      	b.n	8008b8e <_raise_r+0x12>
 8008bbe:	2400      	movs	r4, #0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bc6:	4798      	blx	r3
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e7e0      	b.n	8008b8e <_raise_r+0x12>

08008bcc <raise>:
 8008bcc:	4b02      	ldr	r3, [pc, #8]	; (8008bd8 <raise+0xc>)
 8008bce:	4601      	mov	r1, r0
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f7ff bfd3 	b.w	8008b7c <_raise_r>
 8008bd6:	bf00      	nop
 8008bd8:	20000010 	.word	0x20000010

08008bdc <_kill_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	2300      	movs	r3, #0
 8008be0:	4d06      	ldr	r5, [pc, #24]	; (8008bfc <_kill_r+0x20>)
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f7fa ff92 	bl	8003b12 <_kill>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d102      	bne.n	8008bf8 <_kill_r+0x1c>
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b103      	cbz	r3, 8008bf8 <_kill_r+0x1c>
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000df0 	.word	0x20000df0

08008c00 <_getpid_r>:
 8008c00:	f7fa bf80 	b.w	8003b04 <_getpid>

08008c04 <__sread>:
 8008c04:	b510      	push	{r4, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	f000 f8a0 	bl	8008d50 <_read_r>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	bfab      	itete	ge
 8008c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c16:	89a3      	ldrhlt	r3, [r4, #12]
 8008c18:	181b      	addge	r3, r3, r0
 8008c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c1e:	bfac      	ite	ge
 8008c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c22:	81a3      	strhlt	r3, [r4, #12]
 8008c24:	bd10      	pop	{r4, pc}

08008c26 <__swrite>:
 8008c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2a:	461f      	mov	r7, r3
 8008c2c:	898b      	ldrh	r3, [r1, #12]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	05db      	lsls	r3, r3, #23
 8008c32:	460c      	mov	r4, r1
 8008c34:	4616      	mov	r6, r2
 8008c36:	d505      	bpl.n	8008c44 <__swrite+0x1e>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c40:	f000 f868 	bl	8008d14 <_lseek_r>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	4632      	mov	r2, r6
 8008c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	4628      	mov	r0, r5
 8008c50:	463b      	mov	r3, r7
 8008c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	f000 b817 	b.w	8008c8c <_write_r>

08008c5e <__sseek>:
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	460c      	mov	r4, r1
 8008c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c66:	f000 f855 	bl	8008d14 <_lseek_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	bf15      	itete	ne
 8008c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c7a:	81a3      	strheq	r3, [r4, #12]
 8008c7c:	bf18      	it	ne
 8008c7e:	81a3      	strhne	r3, [r4, #12]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__sclose>:
 8008c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c86:	f000 b813 	b.w	8008cb0 <_close_r>
	...

08008c8c <_write_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	2200      	movs	r2, #0
 8008c96:	4d05      	ldr	r5, [pc, #20]	; (8008cac <_write_r+0x20>)
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f7fa ff70 	bl	8003b80 <_write>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_write_r+0x1e>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_write_r+0x1e>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20000df0 	.word	0x20000df0

08008cb0 <_close_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4d05      	ldr	r5, [pc, #20]	; (8008ccc <_close_r+0x1c>)
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fa ff7c 	bl	8003bb8 <_close>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_close_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_close_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20000df0 	.word	0x20000df0

08008cd0 <_fstat_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4d06      	ldr	r5, [pc, #24]	; (8008cf0 <_fstat_r+0x20>)
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	4611      	mov	r1, r2
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	f7fa ff76 	bl	8003bce <_fstat>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d102      	bne.n	8008cec <_fstat_r+0x1c>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	b103      	cbz	r3, 8008cec <_fstat_r+0x1c>
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000df0 	.word	0x20000df0

08008cf4 <_isatty_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	4d05      	ldr	r5, [pc, #20]	; (8008d10 <_isatty_r+0x1c>)
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	4608      	mov	r0, r1
 8008cfe:	602b      	str	r3, [r5, #0]
 8008d00:	f7fa ff74 	bl	8003bec <_isatty>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	d102      	bne.n	8008d0e <_isatty_r+0x1a>
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	b103      	cbz	r3, 8008d0e <_isatty_r+0x1a>
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	20000df0 	.word	0x20000df0

08008d14 <_lseek_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4d05      	ldr	r5, [pc, #20]	; (8008d34 <_lseek_r+0x20>)
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	f7fa ff6c 	bl	8003c00 <_lseek>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_lseek_r+0x1e>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_lseek_r+0x1e>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20000df0 	.word	0x20000df0

08008d38 <__malloc_lock>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__malloc_lock+0x8>)
 8008d3a:	f7ff bdbd 	b.w	80088b8 <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	20000de4 	.word	0x20000de4

08008d44 <__malloc_unlock>:
 8008d44:	4801      	ldr	r0, [pc, #4]	; (8008d4c <__malloc_unlock+0x8>)
 8008d46:	f7ff bdb8 	b.w	80088ba <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	20000de4 	.word	0x20000de4

08008d50 <_read_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4d05      	ldr	r5, [pc, #20]	; (8008d70 <_read_r+0x20>)
 8008d5c:	602a      	str	r2, [r5, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f7fa fef1 	bl	8003b46 <_read>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_read_r+0x1e>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_read_r+0x1e>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	20000df0 	.word	0x20000df0

08008d74 <roundf>:
 8008d74:	b508      	push	{r3, lr}
 8008d76:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008d7a:	3b7f      	subs	r3, #127	; 0x7f
 8008d7c:	2b16      	cmp	r3, #22
 8008d7e:	4601      	mov	r1, r0
 8008d80:	4602      	mov	r2, r0
 8008d82:	dc14      	bgt.n	8008dae <roundf+0x3a>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da07      	bge.n	8008d98 <roundf+0x24>
 8008d88:	3301      	adds	r3, #1
 8008d8a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8008d8e:	d101      	bne.n	8008d94 <roundf+0x20>
 8008d90:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8008d94:	4608      	mov	r0, r1
 8008d96:	bd08      	pop	{r3, pc}
 8008d98:	4808      	ldr	r0, [pc, #32]	; (8008dbc <roundf+0x48>)
 8008d9a:	4118      	asrs	r0, r3
 8008d9c:	4201      	tst	r1, r0
 8008d9e:	d0f9      	beq.n	8008d94 <roundf+0x20>
 8008da0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008da4:	4119      	asrs	r1, r3
 8008da6:	4411      	add	r1, r2
 8008da8:	ea21 0100 	bic.w	r1, r1, r0
 8008dac:	e7f2      	b.n	8008d94 <roundf+0x20>
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d1f0      	bne.n	8008d94 <roundf+0x20>
 8008db2:	f7f7 fe5d 	bl	8000a70 <__addsf3>
 8008db6:	4601      	mov	r1, r0
 8008db8:	e7ec      	b.n	8008d94 <roundf+0x20>
 8008dba:	bf00      	nop
 8008dbc:	007fffff 	.word	0x007fffff

08008dc0 <_init>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	bf00      	nop
 8008dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc6:	bc08      	pop	{r3}
 8008dc8:	469e      	mov	lr, r3
 8008dca:	4770      	bx	lr

08008dcc <_fini>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	bf00      	nop
 8008dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd2:	bc08      	pop	{r3}
 8008dd4:	469e      	mov	lr, r3
 8008dd6:	4770      	bx	lr
