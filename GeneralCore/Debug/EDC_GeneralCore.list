
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c44  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08008e30  08008e30  00018e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009170  08009170  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009170  08009170  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009170  08009170  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  20000074  080091ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  080091ec  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011771  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  0003180e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00034178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  000352a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a8f  00000000  00000000  000362e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f6c  00000000  00000000  00039d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da45  00000000  00000000  0004ece3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  000ec778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	08008e14 	.word	0x08008e14

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	08008e14 	.word	0x08008e14

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2uiz>:
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	d20e      	bcs.n	800118e <__aeabi_f2uiz+0x22>
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30b      	bcc.n	800118e <__aeabi_f2uiz+0x22>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d409      	bmi.n	8001194 <__aeabi_f2uiz+0x28>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	fa23 f002 	lsr.w	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr
 8001194:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001198:	d101      	bne.n	800119e <__aeabi_f2uiz+0x32>
 800119a:	0242      	lsls	r2, r0, #9
 800119c:	d102      	bne.n	80011a4 <__aeabi_f2uiz+0x38>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	4770      	bx	lr
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <chao_move_angle>:
		}
	}
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed){
 80011b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 80011bc:	4984      	ldr	r1, [pc, #528]	; (80013d0 <chao_move_angle+0x220>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fec2 	bl	8000f48 <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f992 	bl	80004f0 <__aeabi_f2d>
 80011cc:	a37e      	add	r3, pc, #504	; (adr r3, 80013c8 <chao_move_angle+0x218>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f9e5 	bl	80005a0 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fca1 	bl	8000b24 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff f982 	bl	80004f0 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff f97d 	bl	80004f0 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f006 fda3 	bl	8007d48 <cos>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f9c9 	bl	80005a0 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4690      	mov	r8, r2
 8001214:	4699      	mov	r9, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f96a 	bl	80004f0 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f965 	bl	80004f0 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f006 fdd5 	bl	8007ddc <sin>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f9b1 	bl	80005a0 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4640      	mov	r0, r8
 8001244:	4649      	mov	r1, r9
 8001246:	f7fe fff3 	bl	8000230 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc67 	bl	8000b24 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <chao_move_angle+0x224>)
 800125a:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff f947 	bl	80004f0 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff f942 	bl	80004f0 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f006 fd68 	bl	8007d48 <cos>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f98e 	bl	80005a0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff f92f 	bl	80004f0 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f92a 	bl	80004f0 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f006 fd9a 	bl	8007ddc <sin>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f976 	bl	80005a0 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4640      	mov	r0, r8
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffba 	bl	8000234 <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc2c 	bl	8000b24 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <chao_move_angle+0x228>)
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff f90c 	bl	80004f0 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff f907 	bl	80004f0 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f006 fd2d 	bl	8007d48 <cos>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f953 	bl	80005a0 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4690      	mov	r8, r2
 8001300:	4699      	mov	r9, r3
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff f8f4 	bl	80004f0 <__aeabi_f2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff f8ef 	bl	80004f0 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f006 fd5f 	bl	8007ddc <sin>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f93b 	bl	80005a0 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4640      	mov	r0, r8
 8001330:	4649      	mov	r1, r9
 8001332:	f7fe ff7f 	bl	8000234 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbf1 	bl	8000b24 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <chao_move_angle+0x22c>)
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f7ff f8d1 	bl	80004f0 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff f8cc 	bl	80004f0 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f006 fcf2 	bl	8007d48 <cos>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff f918 	bl	80005a0 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4690      	mov	r8, r2
 8001376:	4699      	mov	r9, r3
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff f8b9 	bl	80004f0 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff f8b4 	bl	80004f0 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f006 fd24 	bl	8007ddc <sin>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff f900 	bl	80005a0 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4640      	mov	r0, r8
 80013a6:	4649      	mov	r1, r9
 80013a8:	f7fe ff42 	bl	8000230 <__aeabi_dsub>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fbb6 	bl	8000b24 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <chao_move_angle+0x230>)
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c8:	54442d18 	.word	0x54442d18
 80013cc:	400921fb 	.word	0x400921fb
 80013d0:	43340000 	.word	0x43340000
 80013d4:	2000098c 	.word	0x2000098c
 80013d8:	200009c8 	.word	0x200009c8
 80013dc:	20000a04 	.word	0x20000a04
 80013e0:	20000a40 	.word	0x20000a40

080013e4 <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d038      	beq.n	8001464 <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d036      	beq.n	8001468 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f838 	bl	8001470 <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 8001448:	f002 fc10 	bl	8003c6c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	332c      	adds	r3, #44	; 0x2c
 800145a:	220b      	movs	r2, #11
 800145c:	4619      	mov	r1, r3
 800145e:	f005 f9c5 	bl	80067ec <HAL_UART_Receive_DMA>
 8001462:	e002      	b.n	800146a <huansic_jy62_init+0x86>
	if(!hjy62) return;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 8001468:	bf00      	nop
}
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	2203      	movs	r2, #3
 8001482:	4903      	ldr	r1, [pc, #12]	; (8001490 <huansic_jy62_resetAngle+0x20>)
 8001484:	f005 f920 	bl	80066c8 <HAL_UART_Transmit>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	00000000 	.word	0x00000000

08001498 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014a6:	2b55      	cmp	r3, #85	; 0x55
 80014a8:	f040 8212 	bne.w	80018d0 <huansic_jy62_decodePackage+0x438>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014b8:	4413      	add	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014c2:	4413      	add	r3, r2
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80014cc:	4413      	add	r3, r2
 80014ce:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014d6:	4413      	add	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014e0:	4413      	add	r3, r2
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014ea:	4413      	add	r3, r2
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014f4:	4413      	add	r3, r2
 80014f6:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014fe:	4413      	add	r3, r2
 8001500:	b2da      	uxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001508:	4413      	add	r3, r2
 800150a:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 81dd 	bne.w	80018d4 <huansic_jy62_decodePackage+0x43c>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001520:	2b51      	cmp	r3, #81	; 0x51
 8001522:	f040 8091 	bne.w	8001648 <huansic_jy62_decodePackage+0x1b0>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0 * 9.81;
 800153c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffc3 	bl	80004cc <__aeabi_i2d>
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	4b9d      	ldr	r3, [pc, #628]	; (80017c0 <huansic_jy62_decodePackage+0x328>)
 800154c:	f7ff f952 	bl	80007f4 <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <huansic_jy62_decodePackage+0x32c>)
 800155e:	f7ff f81f 	bl	80005a0 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	a391      	add	r3, pc, #580	; (adr r3, 80017b0 <huansic_jy62_decodePackage+0x318>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff f816 	bl	80005a0 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fad2 	bl	8000b24 <__aeabi_d2f>
 8001580:	4602      	mov	r2, r0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0 * 9.81;
 800159c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff93 	bl	80004cc <__aeabi_i2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <huansic_jy62_decodePackage+0x328>)
 80015ac:	f7ff f922 	bl	80007f4 <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <huansic_jy62_decodePackage+0x32c>)
 80015be:	f7fe ffef 	bl	80005a0 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a379      	add	r3, pc, #484	; (adr r3, 80017b0 <huansic_jy62_decodePackage+0x318>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7fe ffe6 	bl	80005a0 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff faa2 	bl	8000b24 <__aeabi_d2f>
 80015e0:	4602      	mov	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0 * 9.81;
 80015fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff63 	bl	80004cc <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <huansic_jy62_decodePackage+0x328>)
 800160c:	f7ff f8f2 	bl	80007f4 <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <huansic_jy62_decodePackage+0x32c>)
 800161e:	f7fe ffbf 	bl	80005a0 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a361      	add	r3, pc, #388	; (adr r3, 80017b0 <huansic_jy62_decodePackage+0x318>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe ffb6 	bl	80005a0 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa72 	bl	8000b24 <__aeabi_d2f>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	e13d      	b.n	80018c4 <huansic_jy62_decodePackage+0x42c>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800164e:	2b52      	cmp	r3, #82	; 0x52
 8001650:	f040 80be 	bne.w	80017d0 <huansic_jy62_decodePackage+0x338>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800166a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff2c 	bl	80004cc <__aeabi_i2d>
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <huansic_jy62_decodePackage+0x328>)
 800167a:	f7ff f8bb 	bl	80007f4 <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <huansic_jy62_decodePackage+0x330>)
 800168c:	f7fe ff88 	bl	80005a0 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <huansic_jy62_decodePackage+0x334>)
 800169e:	f7ff f8a9 	bl	80007f4 <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	a343      	add	r3, pc, #268	; (adr r3, 80017b8 <huansic_jy62_decodePackage+0x320>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ff76 	bl	80005a0 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa32 	bl	8000b24 <__aeabi_d2f>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80016dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fef3 	bl	80004cc <__aeabi_i2d>
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <huansic_jy62_decodePackage+0x328>)
 80016ec:	f7ff f882 	bl	80007f4 <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <huansic_jy62_decodePackage+0x330>)
 80016fe:	f7fe ff4f 	bl	80005a0 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <huansic_jy62_decodePackage+0x334>)
 8001710:	f7ff f870 	bl	80007f4 <__aeabi_ddiv>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	a326      	add	r3, pc, #152	; (adr r3, 80017b8 <huansic_jy62_decodePackage+0x320>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe ff3d 	bl	80005a0 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f9f9 	bl	8000b24 <__aeabi_d2f>
 8001732:	4602      	mov	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800174e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe feba 	bl	80004cc <__aeabi_i2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <huansic_jy62_decodePackage+0x328>)
 800175e:	f7ff f849 	bl	80007f4 <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <huansic_jy62_decodePackage+0x330>)
 8001770:	f7fe ff16 	bl	80005a0 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <huansic_jy62_decodePackage+0x334>)
 8001782:	f7ff f837 	bl	80007f4 <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	a30a      	add	r3, pc, #40	; (adr r3, 80017b8 <huansic_jy62_decodePackage+0x320>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe ff04 	bl	80005a0 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f9c0 	bl	8000b24 <__aeabi_d2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
 80017aa:	e08b      	b.n	80018c4 <huansic_jy62_decodePackage+0x42c>
 80017ac:	f3af 8000 	nop.w
 80017b0:	51eb851f 	.word	0x51eb851f
 80017b4:	40239eb8 	.word	0x40239eb8
 80017b8:	54442d18 	.word	0x54442d18
 80017bc:	400921fb 	.word	0x400921fb
 80017c0:	40e00000 	.word	0x40e00000
 80017c4:	40300000 	.word	0x40300000
 80017c8:	409f4000 	.word	0x409f4000
 80017cc:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80017d6:	2b53      	cmp	r3, #83	; 0x53
 80017d8:	d174      	bne.n	80018c4 <huansic_jy62_decodePackage+0x42c>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 80017f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe69 	bl	80004cc <__aeabi_i2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <huansic_jy62_decodePackage+0x450>)
 8001800:	f7fe fff8 	bl	80007f4 <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	a334      	add	r3, pc, #208	; (adr r3, 80018e0 <huansic_jy62_decodePackage+0x448>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fec5 	bl	80005a0 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f981 	bl	8000b24 <__aeabi_d2f>
 8001822:	4602      	mov	r2, r0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 800183e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe42 	bl	80004cc <__aeabi_i2d>
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <huansic_jy62_decodePackage+0x450>)
 800184e:	f7fe ffd1 	bl	80007f4 <__aeabi_ddiv>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a321      	add	r3, pc, #132	; (adr r3, 80018e0 <huansic_jy62_decodePackage+0x448>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fe9e 	bl	80005a0 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f95a 	bl	8000b24 <__aeabi_d2f>
 8001870:	4602      	mov	r2, r0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 800188c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe1b 	bl	80004cc <__aeabi_i2d>
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <huansic_jy62_decodePackage+0x450>)
 800189c:	f7fe ffaa 	bl	80007f4 <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	a30d      	add	r3, pc, #52	; (adr r3, 80018e0 <huansic_jy62_decodePackage+0x448>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fe77 	bl	80005a0 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f933 	bl	8000b24 <__aeabi_d2f>
 80018be:	4602      	mov	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 80018c4:	f002 f9d2 	bl	8003c6c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
 80018ce:	e002      	b.n	80018d6 <huansic_jy62_decodePackage+0x43e>
		return;
 80018d0:	bf00      	nop
 80018d2:	e000      	b.n	80018d6 <huansic_jy62_decodePackage+0x43e>
		return;
 80018d4:	bf00      	nop
}
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	f3af 8000 	nop.w
 80018e0:	54442d18 	.word	0x54442d18
 80018e4:	400921fb 	.word	0x400921fb
 80018e8:	40e00000 	.word	0x40e00000

080018ec <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	332c      	adds	r3, #44	; 0x2c
 80018fc:	220b      	movs	r2, #11
 80018fe:	4619      	mov	r1, r3
 8001900:	f004 ff74 	bl	80067ec <HAL_UART_Receive_DMA>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
	...

08001920 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001932:	d101      	bne.n	8001938 <huansic_order_new+0x18>
		return 0;
 8001934:	2300      	movs	r3, #0
 8001936:	e046      	b.n	80019c6 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e017      	b.n	800196e <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	4923      	ldr	r1, [pc, #140]	; (80019d0 <huansic_order_new+0xb0>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3310      	adds	r3, #16
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	429a      	cmp	r2, r3
 8001956:	d107      	bne.n	8001968 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <huansic_order_new+0xb0>)
 8001964:	4413      	add	r3, r2
 8001966:	e02e      	b.n	80019c6 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b3b      	cmp	r3, #59	; 0x3b
 8001972:	d9e4      	bls.n	800193e <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e021      	b.n	80019be <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	4914      	ldr	r1, [pc, #80]	; (80019d0 <huansic_order_new+0xb0>)
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3310      	adds	r3, #16
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d112      	bne.n	80019b8 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <huansic_order_new+0xb0>)
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4403      	add	r3, r0
 80019a4:	3310      	adds	r3, #16
 80019a6:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <huansic_order_new+0xb0>)
 80019b4:	4413      	add	r3, r2
 80019b6:	e006      	b.n	80019c6 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	3301      	adds	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	2b3b      	cmp	r3, #59	; 0x3b
 80019c2:	d9da      	bls.n	800197a <huansic_order_new+0x5a>
		}
	}

	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000090 	.word	0x20000090

080019d4 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d103      	bne.n	80019ee <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff90 	bl	800190c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 80019ec:	e003      	b.n	80019f6 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <huansic_motor_init+0x1c>
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <huansic_motor_init+0x168>)
 8001a12:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <huansic_motor_init+0x16c>)
 8001a14:	210c      	movs	r1, #12
 8001a16:	4856      	ldr	r0, [pc, #344]	; (8001b70 <huansic_motor_init+0x170>)
 8001a18:	f005 f96c 	bl	8006cf4 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <huansic_motor_init+0x30>
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <huansic_motor_init+0x174>)
 8001a26:	4a51      	ldr	r2, [pc, #324]	; (8001b6c <huansic_motor_init+0x16c>)
 8001a28:	210d      	movs	r1, #13
 8001a2a:	4851      	ldr	r0, [pc, #324]	; (8001b70 <huansic_motor_init+0x170>)
 8001a2c:	f005 f962 	bl	8006cf4 <__assert_func>
	assert(hmotor->dt);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fb65 	bl	8001108 <__aeabi_fcmpeq>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <huansic_motor_init+0x50>
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <huansic_motor_init+0x178>)
 8001a46:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <huansic_motor_init+0x16c>)
 8001a48:	210e      	movs	r1, #14
 8001a4a:	4849      	ldr	r0, [pc, #292]	; (8001b70 <huansic_motor_init+0x170>)
 8001a4c:	f005 f952 	bl	8006cf4 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	849a      	strh	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9a:	e01c      	b.n	8001ad6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d105      	bne.n	8001ab0 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	e012      	b.n	8001ad6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d105      	bne.n	8001ac4 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac2:	e008      	b.n	8001ad6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d104      	bne.n	8001ad6 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d026      	beq.n	8001b2c <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
 8001af0:	e01c      	b.n	8001b2c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d105      	bne.n	8001b06 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
 8001b04:	e012      	b.n	8001b2c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d105      	bne.n	8001b1a <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b18:	e008      	b.n	8001b2c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d104      	bne.n	8001b2c <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	213c      	movs	r1, #60	; 0x3c
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fe86 	bl	8005844 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f003 fd22 	bl	800558c <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f003 fd16 	bl	800558c <HAL_TIM_PWM_Start>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08008e30 	.word	0x08008e30
 8001b6c:	08008e98 	.word	0x08008e98
 8001b70:	08008e40 	.word	0x08008e40
 8001b74:	08008e60 	.word	0x08008e60
 8001b78:	08008e74 	.word	0x08008e74

08001b7c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	int16_t diffTick = (0x0FFFF & hmotor->counter->Instance->CNT) - hmotor->lastTick;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	82fb      	strh	r3, [r7, #22]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	849a      	strh	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001ba6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f8c4 	bl	8000d38 <__aeabi_i2f>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7ff f9c5 	bl	8000f48 <__aeabi_fdiv>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f7fe fff9 	bl	8000bcc <__aeabi_fsub>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7fe fff4 	bl	8000bcc <__aeabi_fsub>
 8001be4:	4603      	mov	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7fe ffea 	bl	8000bcc <__aeabi_fsub>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7fe ffe0 	bl	8000bd0 <__addsf3>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f7ff f8dc 	bl	8000de0 <__aeabi_fmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461c      	mov	r4, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f7ff f8d2 	bl	8000de0 <__aeabi_fmul>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7fe ffc5 	bl	8000bd0 <__addsf3>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f8c5 	bl	8000de0 <__aeabi_fmul>
 8001c56:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7fe ffb8 	bl	8000bd0 <__addsf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8001c64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff fa75 	bl	8001158 <__aeabi_fcmpgt>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <huansic_motor_pid+0xfe>
 8001c74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c78:	e009      	b.n	8001c8e <huansic_motor_pid+0x112>
 8001c7a:	4954      	ldr	r1, [pc, #336]	; (8001dcc <huansic_motor_pid+0x250>)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fa4d 	bl	800111c <__aeabi_fcmplt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <huansic_motor_pid+0x110>
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <huansic_motor_pid+0x250>)
 8001c8a:	e000      	b.n	8001c8e <huansic_motor_pid+0x112>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fa5f 	bl	8001158 <__aeabi_fcmpgt>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d019      	beq.n	8001cd4 <huansic_motor_pid+0x158>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f83e 	bl	8000d30 <__aeabi_ui2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff f891 	bl	8000de0 <__aeabi_fmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 f8d1 	bl	8007e68 <roundf>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fa4f 	bl	800116c <__aeabi_f2uiz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	e000      	b.n	8001cd6 <huansic_motor_pid+0x15a>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff fa1d 	bl	800111c <__aeabi_fcmplt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d019      	beq.n	8001d1c <huansic_motor_pid+0x1a0>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f81a 	bl	8000d30 <__aeabi_ui2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff f86d 	bl	8000de0 <__aeabi_fmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 f8ad 	bl	8007e68 <roundf>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fa2b 	bl	800116c <__aeabi_f2uiz>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	e000      	b.n	8001d1e <huansic_motor_pid+0x1a2>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <huansic_motor_pid+0x1b8>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	897a      	ldrh	r2, [r7, #10]
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
 8001d32:	e01c      	b.n	8001d6e <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d105      	bne.n	8001d48 <huansic_motor_pid+0x1cc>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	897a      	ldrh	r2, [r7, #10]
 8001d44:	639a      	str	r2, [r3, #56]	; 0x38
 8001d46:	e012      	b.n	8001d6e <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d105      	bne.n	8001d5c <huansic_motor_pid+0x1e0>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	897a      	ldrh	r2, [r7, #10]
 8001d58:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d5a:	e008      	b.n	8001d6e <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d104      	bne.n	8001d6e <huansic_motor_pid+0x1f2>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	897a      	ldrh	r2, [r7, #10]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d026      	beq.n	8001dc4 <huansic_motor_pid+0x248>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <huansic_motor_pid+0x20e>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	893a      	ldrh	r2, [r7, #8]
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001d88:	e01c      	b.n	8001dc4 <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d105      	bne.n	8001d9e <huansic_motor_pid+0x222>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	893a      	ldrh	r2, [r7, #8]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d9c:	e012      	b.n	8001dc4 <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d105      	bne.n	8001db2 <huansic_motor_pid+0x236>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	893a      	ldrh	r2, [r7, #8]
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001db0:	e008      	b.n	8001dc4 <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d104      	bne.n	8001dc4 <huansic_motor_pid+0x248>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	893a      	ldrh	r2, [r7, #8]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	bf800000 	.word	0xbf800000

08001dd0 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]

}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2206      	movs	r2, #6
 8001df0:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f103 010a 	add.w	r1, r3, #10
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7a5b      	ldrb	r3, [r3, #9]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	f004 fcf2 	bl	80067ec <HAL_UART_Receive_DMA>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7a99      	ldrb	r1, [r3, #10]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7adb      	ldrb	r3, [r3, #11]
 8001e24:	404b      	eors	r3, r1
 8001e26:	b2d9      	uxtb	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7b1b      	ldrb	r3, [r3, #12]
 8001e2c:	404b      	eors	r3, r1
 8001e2e:	b2d9      	uxtb	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7b5b      	ldrb	r3, [r3, #13]
 8001e34:	404b      	eors	r3, r1
 8001e36:	b2d9      	uxtb	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7b9b      	ldrb	r3, [r3, #14]
 8001e3c:	404b      	eors	r3, r1
 8001e3e:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e01d      	b.n	8001e84 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7a9b      	ldrb	r3, [r3, #10]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <huansic_xb_decodeHeader+0x4c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7a9b      	ldrb	r3, [r3, #10]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d001      	beq.n	8001e5c <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e013      	b.n	8001e84 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7a9a      	ldrb	r2, [r3, #10]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7b9a      	ldrb	r2, [r3, #14]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 010a 	add.w	r1, r3, #10
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7a5b      	ldrb	r3, [r3, #9]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f004 fcb5 	bl	80067ec <HAL_UART_Receive_DMA>
	return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	76fb      	strb	r3, [r7, #27]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7a1b      	ldrb	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	f040 816d 	bne.w	8002180 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001ea6:	7f7b      	ldrb	r3, [r7, #29]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	777a      	strb	r2, [r7, #29]
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	7a9a      	ldrb	r2, [r3, #10]
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <huansic_xb_decodeBody+0x25c>)
 8001eb6:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001eb8:	7f7b      	ldrb	r3, [r7, #29]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	77fb      	strb	r3, [r7, #31]
 8001ec2:	e075      	b.n	8001fb0 <huansic_xb_decodeBody+0x124>
			index += 2;
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001eca:	7f7b      	ldrb	r3, [r7, #29]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	777a      	strb	r2, [r7, #29]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	7a9b      	ldrb	r3, [r3, #10]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	b211      	sxth	r1, r2
 8001ede:	4a83      	ldr	r2, [pc, #524]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001ee0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001ee4:	7f7b      	ldrb	r3, [r7, #29]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	777a      	strb	r2, [r7, #29]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	7a9a      	ldrb	r2, [r3, #10]
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
 8001ef4:	b211      	sxth	r1, r2
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001ef8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001efc:	7f7b      	ldrb	r3, [r7, #29]
 8001efe:	3302      	adds	r3, #2
 8001f00:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001f02:	7f7b      	ldrb	r3, [r7, #29]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	777a      	strb	r2, [r7, #29]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	7a9b      	ldrb	r3, [r3, #10]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	b211      	sxth	r1, r2
 8001f16:	4a75      	ldr	r2, [pc, #468]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001f20:	7f7b      	ldrb	r3, [r7, #29]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	7a9a      	ldrb	r2, [r3, #10]
 8001f28:	7ffb      	ldrb	r3, [r7, #31]
 8001f2a:	b211      	sxth	r1, r2
 8001f2c:	4a6f      	ldr	r2, [pc, #444]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	460a      	mov	r2, r1
 8001f34:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001f3c:	7f7b      	ldrb	r3, [r7, #29]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	777a      	strb	r2, [r7, #29]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	7a9b      	ldrb	r3, [r3, #10]
 8001f4a:	021a      	lsls	r2, r3, #8
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	b211      	sxth	r1, r2
 8001f50:	4a66      	ldr	r2, [pc, #408]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	460a      	mov	r2, r1
 8001f58:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001f5a:	7f7b      	ldrb	r3, [r7, #29]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	7a9a      	ldrb	r2, [r3, #10]
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
 8001f64:	b211      	sxth	r1, r2
 8001f66:	4a61      	ldr	r2, [pc, #388]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001f70:	7f7b      	ldrb	r3, [r7, #29]
 8001f72:	3302      	adds	r3, #2
 8001f74:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001f76:	7f7b      	ldrb	r3, [r7, #29]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	777a      	strb	r2, [r7, #29]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	7a9b      	ldrb	r3, [r3, #10]
 8001f84:	021a      	lsls	r2, r3, #8
 8001f86:	7ffb      	ldrb	r3, [r7, #31]
 8001f88:	b211      	sxth	r1, r2
 8001f8a:	4a58      	ldr	r2, [pc, #352]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	460a      	mov	r2, r1
 8001f92:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001f94:	7f7b      	ldrb	r3, [r7, #29]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	7a9a      	ldrb	r2, [r3, #10]
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
 8001f9e:	b211      	sxth	r1, r2
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <huansic_xb_decodeBody+0x260>)
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	460a      	mov	r2, r1
 8001fa8:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	3301      	adds	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d986      	bls.n	8001ec4 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001fb6:	7f7b      	ldrb	r3, [r7, #29]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001fbc:	7f7b      	ldrb	r3, [r7, #29]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	777a      	strb	r2, [r7, #29]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	7a9b      	ldrb	r3, [r3, #10]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001fce:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001fd8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001fda:	7f7b      	ldrb	r3, [r7, #29]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	777a      	strb	r2, [r7, #29]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	7a9b      	ldrb	r3, [r3, #10]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	4a3f      	ldr	r2, [pc, #252]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001ff2:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8001ffc:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001ffe:	7f7b      	ldrb	r3, [r7, #29]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	777a      	strb	r2, [r7, #29]
 8002004:	461a      	mov	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	7a9b      	ldrb	r3, [r3, #10]
 800200c:	461a      	mov	r2, r3
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	4a36      	ldr	r2, [pc, #216]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8002016:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8002020:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002022:	7f7b      	ldrb	r3, [r7, #29]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	777a      	strb	r2, [r7, #29]
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	7a9b      	ldrb	r3, [r3, #10]
 8002030:	461a      	mov	r2, r3
 8002032:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	4a2d      	ldr	r2, [pc, #180]	; (80020f0 <huansic_xb_decodeBody+0x264>)
 800203a:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 800203c:	7f7b      	ldrb	r3, [r7, #29]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	7a9b      	ldrb	r3, [r3, #10]
 8002044:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002046:	2300      	movs	r3, #0
 8002048:	77fb      	strb	r3, [r7, #31]
 800204a:	e03e      	b.n	80020ca <huansic_xb_decodeBody+0x23e>
			index += 2;
 800204c:	7f7b      	ldrb	r3, [r7, #29]
 800204e:	3302      	adds	r3, #2
 8002050:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002052:	7f7b      	ldrb	r3, [r7, #29]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	777a      	strb	r2, [r7, #29]
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	7a9b      	ldrb	r3, [r3, #10]
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	b211      	sxth	r1, r2
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <huansic_xb_decodeBody+0x268>)
 8002068:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 800206c:	7f7b      	ldrb	r3, [r7, #29]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	777a      	strb	r2, [r7, #29]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	7a9a      	ldrb	r2, [r3, #10]
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	b211      	sxth	r1, r2
 800207e:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <huansic_xb_decodeBody+0x268>)
 8002080:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002084:	7f7b      	ldrb	r3, [r7, #29]
 8002086:	3302      	adds	r3, #2
 8002088:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 800208a:	7f7b      	ldrb	r3, [r7, #29]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	777a      	strb	r2, [r7, #29]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	7a9b      	ldrb	r3, [r3, #10]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	b211      	sxth	r1, r2
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <huansic_xb_decodeBody+0x268>)
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	460a      	mov	r2, r1
 80020a6:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 80020a8:	7f7b      	ldrb	r3, [r7, #29]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	777a      	strb	r2, [r7, #29]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	7a9a      	ldrb	r2, [r3, #10]
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	b211      	sxth	r1, r2
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <huansic_xb_decodeBody+0x268>)
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	460a      	mov	r2, r1
 80020c2:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
 80020c6:	3301      	adds	r3, #1
 80020c8:	77fb      	strb	r3, [r7, #31]
 80020ca:	7ffa      	ldrb	r2, [r7, #31]
 80020cc:	7efb      	ldrb	r3, [r7, #27]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3bc      	bcc.n	800204c <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 80020d2:	7f7b      	ldrb	r3, [r7, #29]
 80020d4:	3301      	adds	r3, #1
 80020d6:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 80020d8:	7f7b      	ldrb	r3, [r7, #29]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	7a9b      	ldrb	r3, [r3, #10]
 80020e0:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80020e2:	2300      	movs	r3, #0
 80020e4:	77fb      	strb	r3, [r7, #31]
 80020e6:	e046      	b.n	8002176 <huansic_xb_decodeBody+0x2ea>
 80020e8:	20000b40 	.word	0x20000b40
 80020ec:	20000b4c 	.word	0x20000b4c
 80020f0:	20000b44 	.word	0x20000b44
 80020f4:	20000b74 	.word	0x20000b74
			index += 2;
 80020f8:	7f7b      	ldrb	r3, [r7, #29]
 80020fa:	3302      	adds	r3, #2
 80020fc:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 80020fe:	7f7b      	ldrb	r3, [r7, #29]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	777a      	strb	r2, [r7, #29]
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	7a9b      	ldrb	r3, [r3, #10]
 800210c:	021a      	lsls	r2, r3, #8
 800210e:	7ffb      	ldrb	r3, [r7, #31]
 8002110:	b211      	sxth	r1, r2
 8002112:	4a9f      	ldr	r2, [pc, #636]	; (8002390 <huansic_xb_decodeBody+0x504>)
 8002114:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002118:	7f7b      	ldrb	r3, [r7, #29]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	777a      	strb	r2, [r7, #29]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	7a9a      	ldrb	r2, [r3, #10]
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	b211      	sxth	r1, r2
 800212a:	4a99      	ldr	r2, [pc, #612]	; (8002390 <huansic_xb_decodeBody+0x504>)
 800212c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002130:	7f7b      	ldrb	r3, [r7, #29]
 8002132:	3302      	adds	r3, #2
 8002134:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002136:	7f7b      	ldrb	r3, [r7, #29]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	777a      	strb	r2, [r7, #29]
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	7a9b      	ldrb	r3, [r3, #10]
 8002144:	021a      	lsls	r2, r3, #8
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	b211      	sxth	r1, r2
 800214a:	4a91      	ldr	r2, [pc, #580]	; (8002390 <huansic_xb_decodeBody+0x504>)
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002154:	7f7b      	ldrb	r3, [r7, #29]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	777a      	strb	r2, [r7, #29]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	7a9a      	ldrb	r2, [r3, #10]
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	b211      	sxth	r1, r2
 8002166:	4a8a      	ldr	r2, [pc, #552]	; (8002390 <huansic_xb_decodeBody+0x504>)
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	460a      	mov	r2, r1
 800216e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	3301      	adds	r3, #1
 8002174:	77fb      	strb	r3, [r7, #31]
 8002176:	7ffa      	ldrb	r2, [r7, #31]
 8002178:	7efb      	ldrb	r3, [r7, #27]
 800217a:	429a      	cmp	r2, r3
 800217c:	d3bc      	bcc.n	80020f8 <huansic_xb_decodeBody+0x26c>
 800217e:	e31a      	b.n	80027b6 <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7a1b      	ldrb	r3, [r3, #8]
 8002184:	2b05      	cmp	r3, #5
 8002186:	f040 8316 	bne.w	80027b6 <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 800218a:	7f7b      	ldrb	r3, [r7, #29]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	777a      	strb	r2, [r7, #29]
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	7a9a      	ldrb	r2, [r3, #10]
 8002198:	4b7e      	ldr	r3, [pc, #504]	; (8002394 <huansic_xb_decodeBody+0x508>)
 800219a:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 800219c:	7f7b      	ldrb	r3, [r7, #29]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	777a      	strb	r2, [r7, #29]
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	7a9b      	ldrb	r3, [r3, #10]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021ae:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 80021b0:	4b79      	ldr	r3, [pc, #484]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	4a78      	ldr	r2, [pc, #480]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021b8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80021ba:	7f7b      	ldrb	r3, [r7, #29]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	777a      	strb	r2, [r7, #29]
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	7a9b      	ldrb	r3, [r3, #10]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b73      	ldr	r3, [pc, #460]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	4a71      	ldr	r2, [pc, #452]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021d2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80021d4:	4b70      	ldr	r3, [pc, #448]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	4a6f      	ldr	r2, [pc, #444]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021dc:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80021de:	7f7b      	ldrb	r3, [r7, #29]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	777a      	strb	r2, [r7, #29]
 80021e4:	461a      	mov	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	7a9b      	ldrb	r3, [r3, #10]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	4a68      	ldr	r2, [pc, #416]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021f6:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80021f8:	4b67      	ldr	r3, [pc, #412]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	4a66      	ldr	r2, [pc, #408]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 8002200:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002202:	7f7b      	ldrb	r3, [r7, #29]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	777a      	strb	r2, [r7, #29]
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	7a9b      	ldrb	r3, [r3, #10]
 8002210:	461a      	mov	r2, r3
 8002212:	4b61      	ldr	r3, [pc, #388]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 800221a:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 800221c:	4b5f      	ldr	r3, [pc, #380]	; (800239c <huansic_xb_decodeBody+0x510>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <huansic_xb_decodeBody+0x50c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	4a5e      	ldr	r2, [pc, #376]	; (80023a0 <huansic_xb_decodeBody+0x514>)
 8002228:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 800222a:	7f7b      	ldrb	r3, [r7, #29]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	777a      	strb	r2, [r7, #29]
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	7a9b      	ldrb	r3, [r3, #10]
 8002238:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002240:	7f7b      	ldrb	r3, [r7, #29]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	777a      	strb	r2, [r7, #29]
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	7a9b      	ldrb	r3, [r3, #10]
 800224e:	461a      	mov	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800225c:	7f7b      	ldrb	r3, [r7, #29]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	777a      	strb	r2, [r7, #29]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	7a9b      	ldrb	r3, [r3, #10]
 800226a:	461a      	mov	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002278:	7f7b      	ldrb	r3, [r7, #29]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	777a      	strb	r2, [r7, #29]
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	7a9b      	ldrb	r3, [r3, #10]
 8002286:	461a      	mov	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <huansic_xb_decodeBody+0x518>)
 8002296:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8002298:	7f7b      	ldrb	r3, [r7, #29]
 800229a:	3302      	adds	r3, #2
 800229c:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 800229e:	7f7b      	ldrb	r3, [r7, #29]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	777a      	strb	r2, [r7, #29]
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	7a9b      	ldrb	r3, [r3, #10]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <huansic_xb_decodeBody+0x51c>)
 80022b2:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 80022b4:	7f7b      	ldrb	r3, [r7, #29]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	777a      	strb	r2, [r7, #29]
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	7a9b      	ldrb	r3, [r3, #10]
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <huansic_xb_decodeBody+0x51c>)
 80022c6:	801a      	strh	r2, [r3, #0]
		index += 2;
 80022c8:	7f7b      	ldrb	r3, [r7, #29]
 80022ca:	3302      	adds	r3, #2
 80022cc:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80022ce:	7f7b      	ldrb	r3, [r7, #29]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	777a      	strb	r2, [r7, #29]
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	7a9b      	ldrb	r3, [r3, #10]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <huansic_xb_decodeBody+0x51c>)
 80022e2:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 80022e4:	7f7b      	ldrb	r3, [r7, #29]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	777a      	strb	r2, [r7, #29]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	7a9b      	ldrb	r3, [r3, #10]
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <huansic_xb_decodeBody+0x51c>)
 80022f6:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 80022f8:	7f7b      	ldrb	r3, [r7, #29]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	777a      	strb	r2, [r7, #29]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	7a9b      	ldrb	r3, [r3, #10]
 8002306:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800230e:	7f7b      	ldrb	r3, [r7, #29]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	777a      	strb	r2, [r7, #29]
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	7a9b      	ldrb	r3, [r3, #10]
 800231c:	461a      	mov	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800232a:	7f7b      	ldrb	r3, [r7, #29]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	777a      	strb	r2, [r7, #29]
 8002330:	461a      	mov	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	7a9b      	ldrb	r3, [r3, #10]
 8002338:	461a      	mov	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002346:	7f7b      	ldrb	r3, [r7, #29]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	777a      	strb	r2, [r7, #29]
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	7a9b      	ldrb	r3, [r3, #10]
 8002354:	461a      	mov	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <huansic_xb_decodeBody+0x520>)
 8002364:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <huansic_xb_decodeBody+0x524>)
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002370:	6018      	str	r0, [r3, #0]
 8002372:	3304      	adds	r3, #4
 8002374:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 800237a:	7f7b      	ldrb	r3, [r7, #29]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	777a      	strb	r2, [r7, #29]
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	7a9b      	ldrb	r3, [r3, #10]
 8002388:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800238a:	2300      	movs	r3, #0
 800238c:	77fb      	strb	r3, [r7, #31]
 800238e:	e0fd      	b.n	800258c <huansic_xb_decodeBody+0x700>
 8002390:	20000b80 	.word	0x20000b80
 8002394:	20000b41 	.word	0x20000b41
 8002398:	20000b48 	.word	0x20000b48
 800239c:	20000b44 	.word	0x20000b44
 80023a0:	20000bac 	.word	0x20000bac
 80023a4:	20000ba4 	.word	0x20000ba4
 80023a8:	20000ba0 	.word	0x20000ba0
 80023ac:	20000ba8 	.word	0x20000ba8
 80023b0:	08008e80 	.word	0x08008e80
			temp = hxb->buffer[index + 24];
 80023b4:	7f7b      	ldrb	r3, [r7, #29]
 80023b6:	3318      	adds	r3, #24
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	7a9b      	ldrb	r3, [r3, #10]
 80023be:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80023c6:	7f7b      	ldrb	r3, [r7, #29]
 80023c8:	3319      	adds	r3, #25
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	7a9b      	ldrb	r3, [r3, #10]
 80023d0:	461a      	mov	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80023de:	7f7b      	ldrb	r3, [r7, #29]
 80023e0:	331a      	adds	r3, #26
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	7a9b      	ldrb	r3, [r3, #10]
 80023e8:	461a      	mov	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 80023f6:	7f7b      	ldrb	r3, [r7, #29]
 80023f8:	331b      	adds	r3, #27
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	7a9b      	ldrb	r3, [r3, #10]
 8002400:	461a      	mov	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	b25b      	sxtb	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fa87 	bl	8001920 <huansic_order_new>
 8002412:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <huansic_xb_decodeBody+0x5a0>
				index += 28;
 800241a:	7f7b      	ldrb	r3, [r7, #29]
 800241c:	331c      	adds	r3, #28
 800241e:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fcd3 	bl	8001dd0 <custom_order_new_failed>
				continue;
 800242a:	e0ac      	b.n	8002586 <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800242c:	7f7b      	ldrb	r3, [r7, #29]
 800242e:	3302      	adds	r3, #2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	7a9b      	ldrb	r3, [r3, #10]
 8002436:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002438:	b21a      	sxth	r2, r3
 800243a:	7f7b      	ldrb	r3, [r7, #29]
 800243c:	3303      	adds	r3, #3
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	440b      	add	r3, r1
 8002442:	7a9b      	ldrb	r3, [r3, #10]
 8002444:	b21b      	sxth	r3, r3
 8002446:	4313      	orrs	r3, r2
 8002448:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800244e:	7f7b      	ldrb	r3, [r7, #29]
 8002450:	3306      	adds	r3, #6
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	7a9b      	ldrb	r3, [r3, #10]
 8002458:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800245a:	b21a      	sxth	r2, r3
 800245c:	7f7b      	ldrb	r3, [r7, #29]
 800245e:	3307      	adds	r3, #7
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	440b      	add	r3, r1
 8002464:	7a9b      	ldrb	r3, [r3, #10]
 8002466:	b21b      	sxth	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002470:	7f7b      	ldrb	r3, [r7, #29]
 8002472:	330a      	adds	r3, #10
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	7a9b      	ldrb	r3, [r3, #10]
 800247a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 800247c:	b21a      	sxth	r2, r3
 800247e:	7f7b      	ldrb	r3, [r7, #29]
 8002480:	330b      	adds	r3, #11
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	440b      	add	r3, r1
 8002486:	7a9b      	ldrb	r3, [r3, #10]
 8002488:	b21b      	sxth	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002492:	7f7b      	ldrb	r3, [r7, #29]
 8002494:	330e      	adds	r3, #14
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	7a9b      	ldrb	r3, [r3, #10]
 800249c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 800249e:	b21a      	sxth	r2, r3
 80024a0:	7f7b      	ldrb	r3, [r7, #29]
 80024a2:	330f      	adds	r3, #15
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	440b      	add	r3, r1
 80024a8:	7a9b      	ldrb	r3, [r3, #10]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80024b4:	7f7b      	ldrb	r3, [r7, #29]
 80024b6:	3310      	adds	r3, #16
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	7a9b      	ldrb	r3, [r3, #10]
 80024be:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80024c6:	7f7b      	ldrb	r3, [r7, #29]
 80024c8:	3311      	adds	r3, #17
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	7a9b      	ldrb	r3, [r3, #10]
 80024d0:	461a      	mov	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80024de:	7f7b      	ldrb	r3, [r7, #29]
 80024e0:	3312      	adds	r3, #18
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	7a9b      	ldrb	r3, [r3, #10]
 80024e8:	461a      	mov	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80024f6:	7f7b      	ldrb	r3, [r7, #29]
 80024f8:	3313      	adds	r3, #19
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	7a9b      	ldrb	r3, [r3, #10]
 8002500:	461a      	mov	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800250e:	7f7b      	ldrb	r3, [r7, #29]
 8002510:	3314      	adds	r3, #20
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	7a9b      	ldrb	r3, [r3, #10]
 8002518:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002520:	7f7b      	ldrb	r3, [r7, #29]
 8002522:	3315      	adds	r3, #21
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	7a9b      	ldrb	r3, [r3, #10]
 800252a:	461a      	mov	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002538:	7f7b      	ldrb	r3, [r7, #29]
 800253a:	3316      	adds	r3, #22
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	7a9b      	ldrb	r3, [r3, #10]
 8002542:	461a      	mov	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002550:	7f7b      	ldrb	r3, [r7, #29]
 8002552:	3317      	adds	r3, #23
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	7a9b      	ldrb	r3, [r3, #10]
 800255a:	461a      	mov	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 800256c:	7f7b      	ldrb	r3, [r7, #29]
 800256e:	331c      	adds	r3, #28
 8002570:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	7f3b      	ldrb	r3, [r7, #28]
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	7739      	strb	r1, [r7, #28]
 800257c:	b252      	sxtb	r2, r2
 800257e:	3320      	adds	r3, #32
 8002580:	443b      	add	r3, r7
 8002582:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	3301      	adds	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	7ffa      	ldrb	r2, [r7, #31]
 800258e:	7efb      	ldrb	r3, [r7, #27]
 8002590:	429a      	cmp	r2, r3
 8002592:	f4ff af0f 	bcc.w	80023b4 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 8002596:	2300      	movs	r3, #0
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e02d      	b.n	80025f8 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 800259c:	7ffb      	ldrb	r3, [r7, #31]
 800259e:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <huansic_xb_decodeBody+0x954>)
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d022      	beq.n	80025f2 <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	77bb      	strb	r3, [r7, #30]
 80025b0:	e011      	b.n	80025d6 <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80025b2:	7ffb      	ldrb	r3, [r7, #31]
 80025b4:	4a8a      	ldr	r2, [pc, #552]	; (80027e0 <huansic_xb_decodeBody+0x954>)
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	7fba      	ldrb	r2, [r7, #30]
 80025be:	3220      	adds	r2, #32
 80025c0:	443a      	add	r2, r7
 80025c2:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d102      	bne.n	80025d0 <huansic_xb_decodeBody+0x744>
						j = 255;
 80025ca:	23ff      	movs	r3, #255	; 0xff
 80025cc:	77bb      	strb	r3, [r7, #30]
						break;
 80025ce:	e006      	b.n	80025de <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 80025d0:	7fbb      	ldrb	r3, [r7, #30]
 80025d2:	3301      	adds	r3, #1
 80025d4:	77bb      	strb	r3, [r7, #30]
 80025d6:	7ffa      	ldrb	r2, [r7, #31]
 80025d8:	7f3b      	ldrb	r3, [r7, #28]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3e9      	bcc.n	80025b2 <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 80025de:	7fbb      	ldrb	r3, [r7, #30]
 80025e0:	2bff      	cmp	r3, #255	; 0xff
 80025e2:	d006      	beq.n	80025f2 <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
 80025e6:	4a7e      	ldr	r2, [pc, #504]	; (80027e0 <huansic_xb_decodeBody+0x954>)
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff f9f1 	bl	80019d4 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	3301      	adds	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]
 80025f8:	7ffb      	ldrb	r3, [r7, #31]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d9ce      	bls.n	800259c <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 80025fe:	7f7b      	ldrb	r3, [r7, #29]
 8002600:	3318      	adds	r3, #24
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	7a9b      	ldrb	r3, [r3, #10]
 8002608:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8002610:	7f7b      	ldrb	r3, [r7, #29]
 8002612:	3319      	adds	r3, #25
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	7a9b      	ldrb	r3, [r3, #10]
 800261a:	461a      	mov	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002628:	7f7b      	ldrb	r3, [r7, #29]
 800262a:	331a      	adds	r3, #26
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	7a9b      	ldrb	r3, [r3, #10]
 8002632:	461a      	mov	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8002640:	7f7b      	ldrb	r3, [r7, #29]
 8002642:	331b      	adds	r3, #27
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	7a9b      	ldrb	r3, [r3, #10]
 800264a:	461a      	mov	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	b25b      	sxtb	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f962 	bl	8001920 <huansic_order_new>
 800265c:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d108      	bne.n	8002676 <huansic_xb_decodeBody+0x7ea>
			index += 28;
 8002664:	7f7b      	ldrb	r3, [r7, #29]
 8002666:	331c      	adds	r3, #28
 8002668:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fbae 	bl	8001dd0 <custom_order_new_failed>
 8002674:	e09f      	b.n	80027b6 <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002676:	7f7b      	ldrb	r3, [r7, #29]
 8002678:	3302      	adds	r3, #2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	7a9b      	ldrb	r3, [r3, #10]
 8002680:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002682:	b21a      	sxth	r2, r3
 8002684:	7f7b      	ldrb	r3, [r7, #29]
 8002686:	3303      	adds	r3, #3
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	440b      	add	r3, r1
 800268c:	7a9b      	ldrb	r3, [r3, #10]
 800268e:	b21b      	sxth	r3, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002698:	7f7b      	ldrb	r3, [r7, #29]
 800269a:	3306      	adds	r3, #6
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	7a9b      	ldrb	r3, [r3, #10]
 80026a2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	7f7b      	ldrb	r3, [r7, #29]
 80026a8:	3307      	adds	r3, #7
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	440b      	add	r3, r1
 80026ae:	7a9b      	ldrb	r3, [r3, #10]
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80026ba:	7f7b      	ldrb	r3, [r7, #29]
 80026bc:	330a      	adds	r3, #10
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	7a9b      	ldrb	r3, [r3, #10]
 80026c4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	7f7b      	ldrb	r3, [r7, #29]
 80026ca:	330b      	adds	r3, #11
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	440b      	add	r3, r1
 80026d0:	7a9b      	ldrb	r3, [r3, #10]
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80026dc:	7f7b      	ldrb	r3, [r7, #29]
 80026de:	330e      	adds	r3, #14
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	7a9b      	ldrb	r3, [r3, #10]
 80026e6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	7f7b      	ldrb	r3, [r7, #29]
 80026ec:	330f      	adds	r3, #15
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	440b      	add	r3, r1
 80026f2:	7a9b      	ldrb	r3, [r3, #10]
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80026fe:	7f7b      	ldrb	r3, [r7, #29]
 8002700:	3310      	adds	r3, #16
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	7a9b      	ldrb	r3, [r3, #10]
 8002708:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8002710:	7f7b      	ldrb	r3, [r7, #29]
 8002712:	3311      	adds	r3, #17
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	7a9b      	ldrb	r3, [r3, #10]
 800271a:	461a      	mov	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002728:	7f7b      	ldrb	r3, [r7, #29]
 800272a:	3312      	adds	r3, #18
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	7a9b      	ldrb	r3, [r3, #10]
 8002732:	461a      	mov	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002740:	7f7b      	ldrb	r3, [r7, #29]
 8002742:	3313      	adds	r3, #19
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	7a9b      	ldrb	r3, [r3, #10]
 800274a:	461a      	mov	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002758:	7f7b      	ldrb	r3, [r7, #29]
 800275a:	3314      	adds	r3, #20
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	7a9b      	ldrb	r3, [r3, #10]
 8002762:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800276a:	7f7b      	ldrb	r3, [r7, #29]
 800276c:	3315      	adds	r3, #21
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	7a9b      	ldrb	r3, [r3, #10]
 8002774:	461a      	mov	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002782:	7f7b      	ldrb	r3, [r7, #29]
 8002784:	3316      	adds	r3, #22
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	7a9b      	ldrb	r3, [r3, #10]
 800278c:	461a      	mov	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 800279a:	7f7b      	ldrb	r3, [r7, #29]
 800279c:	3317      	adds	r3, #23
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	7a9b      	ldrb	r3, [r3, #10]
 80027a4:	461a      	mov	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2206      	movs	r2, #6
 80027ba:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 010a 	add.w	r1, r3, #10
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7a5b      	ldrb	r3, [r3, #9]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	f004 f80a 	bl	80067ec <HAL_UART_Receive_DMA>
}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000b8c 	.word	0x20000b8c

080027e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e8:	f001 f9e8 	bl	8003bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ec:	f000 f854 	bl	8002898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f0:	f000 fc4e 	bl	8003090 <MX_GPIO_Init>
  MX_DMA_Init();
 80027f4:	f000 fc26 	bl	8003044 <MX_DMA_Init>
  MX_I2C1_Init();
 80027f8:	f000 f894 	bl	8002924 <MX_I2C1_Init>
  MX_TIM1_Init();
 80027fc:	f000 f8c0 	bl	8002980 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002800:	f000 f982 	bl	8002b08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002804:	f000 f9d4 	bl	8002bb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002808:	f000 fa26 	bl	8002c58 <MX_TIM4_Init>
  MX_TIM5_Init();
 800280c:	f000 fa78 	bl	8002d00 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002810:	f000 fb00 	bl	8002e14 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002814:	f000 fbc2 	bl	8002f9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002818:	f000 fbea 	bl	8002ff0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800281c:	f000 fac4 	bl	8002da8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //Motor init
	HUAN_MOTOR1_Init();
 8002820:	f000 fc8c 	bl	800313c <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8002824:	f000 fcba 	bl	800319c <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8002828:	f000 fce8 	bl	80031fc <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 800282c:	f000 fd16 	bl	800325c <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8002830:	f000 fd44 	bl	80032bc <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8002834:	f000 fd50 	bl	80032d8 <HUAN_ZIGBEE_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer
	HAL_TIM_Base_Start_IT(&htim6);
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <main+0xa0>)
 800283a:	f002 fdef 	bl	800541c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(2000);
 800283e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002842:	f001 fa1d 	bl	8003c80 <HAL_Delay>
		chao_move_angle(0, 4000);
 8002846:	4910      	ldr	r1, [pc, #64]	; (8002888 <main+0xa4>)
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f7fe fcb0 	bl	80011b0 <chao_move_angle>

		HAL_Delay(2000);
 8002850:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002854:	f001 fa14 	bl	8003c80 <HAL_Delay>
		chao_move_angle(90, 4000);
 8002858:	490b      	ldr	r1, [pc, #44]	; (8002888 <main+0xa4>)
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <main+0xa8>)
 800285c:	f7fe fca8 	bl	80011b0 <chao_move_angle>

		HAL_Delay(2000);
 8002860:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002864:	f001 fa0c 	bl	8003c80 <HAL_Delay>
		chao_move_angle(180, 4000);
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <main+0xa4>)
 800286a:	4809      	ldr	r0, [pc, #36]	; (8002890 <main+0xac>)
 800286c:	f7fe fca0 	bl	80011b0 <chao_move_angle>

		HAL_Delay(2000);
 8002870:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002874:	f001 fa04 	bl	8003c80 <HAL_Delay>
		chao_move_angle(270, 4000);
 8002878:	4903      	ldr	r1, [pc, #12]	; (8002888 <main+0xa4>)
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <main+0xb0>)
 800287c:	f7fe fc98 	bl	80011b0 <chao_move_angle>
		HAL_Delay(2000);
 8002880:	e7dd      	b.n	800283e <main+0x5a>
 8002882:	bf00      	nop
 8002884:	200007ec 	.word	0x200007ec
 8002888:	457a0000 	.word	0x457a0000
 800288c:	42b40000 	.word	0x42b40000
 8002890:	43340000 	.word	0x43340000
 8002894:	43870000 	.word	0x43870000

08002898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b090      	sub	sp, #64	; 0x40
 800289c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800289e:	f107 0318 	add.w	r3, r7, #24
 80028a2:	2228      	movs	r2, #40	; 0x28
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fa7e 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80028c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ca:	2301      	movs	r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ce:	2302      	movs	r3, #2
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 f92e 	bl	8004b44 <HAL_RCC_OscConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80028ee:	f000 fd01 	bl	80032f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f2:	230f      	movs	r3, #15
 80028f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f6:	2302      	movs	r3, #2
 80028f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f002 fb9b 	bl	8005048 <HAL_RCC_ClockConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002918:	f000 fcec 	bl	80032f4 <Error_Handler>
  }
}
 800291c:	bf00      	nop
 800291e:	3740      	adds	r7, #64	; 0x40
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <MX_I2C1_Init+0x50>)
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <MX_I2C1_Init+0x54>)
 800292c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_I2C1_Init+0x50>)
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <MX_I2C1_Init+0x58>)
 8002932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <MX_I2C1_Init+0x50>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_I2C1_Init+0x50>)
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <MX_I2C1_Init+0x50>)
 8002942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <MX_I2C1_Init+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <MX_I2C1_Init+0x50>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <MX_I2C1_Init+0x50>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_I2C1_Init+0x50>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <MX_I2C1_Init+0x50>)
 8002962:	f001 ffab 	bl	80048bc <HAL_I2C_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800296c:	f000 fcc2 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000630 	.word	0x20000630
 8002978:	40005400 	.word	0x40005400
 800297c:	000186a0 	.word	0x000186a0

08002980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b096      	sub	sp, #88	; 0x58
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800299e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2220      	movs	r2, #32
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 f9f5 	bl	8006da8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029be:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <MX_TIM1_Init+0x184>)
 80029c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029c4:	4b4e      	ldr	r3, [pc, #312]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b4d      	ldr	r3, [pc, #308]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50 * 72 - 1;
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029d2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80029d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d8:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029de:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029ea:	4845      	ldr	r0, [pc, #276]	; (8002b00 <MX_TIM1_Init+0x180>)
 80029ec:	f002 fcc6 	bl	800537c <HAL_TIM_Base_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029f6:	f000 fc7d 	bl	80032f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a04:	4619      	mov	r1, r3
 8002a06:	483e      	ldr	r0, [pc, #248]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002a08:	f003 f970 	bl	8005cec <HAL_TIM_ConfigClockSource>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a12:	f000 fc6f 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a16:	483a      	ldr	r0, [pc, #232]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002a18:	f002 fd60 	bl	80054dc <HAL_TIM_PWM_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a22:	f000 fc67 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a32:	4619      	mov	r1, r3
 8002a34:	4832      	ldr	r0, [pc, #200]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002a36:	f003 fd2b 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a40:	f000 fc58 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a44:	2360      	movs	r3, #96	; 0x60
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	2200      	movs	r2, #0
 8002a66:	4619      	mov	r1, r3
 8002a68:	4825      	ldr	r0, [pc, #148]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002a6a:	f003 f881 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002a74:	f000 fc3e 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481f      	ldr	r0, [pc, #124]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002a82:	f003 f875 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002a8c:	f000 fc32 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a94:	2208      	movs	r2, #8
 8002a96:	4619      	mov	r1, r3
 8002a98:	4819      	ldr	r0, [pc, #100]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002a9a:	f003 f869 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002aa4:	f000 fc26 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	220c      	movs	r2, #12
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4813      	ldr	r0, [pc, #76]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002ab2:	f003 f85d 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002abc:	f000 fc1a 	bl	80032f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4807      	ldr	r0, [pc, #28]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002ae4:	f003 fd40 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002aee:	f000 fc01 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002af2:	4803      	ldr	r0, [pc, #12]	; (8002b00 <MX_TIM1_Init+0x180>)
 8002af4:	f000 fdc4 	bl	8003680 <HAL_TIM_MspPostInit>

}
 8002af8:	bf00      	nop
 8002afa:	3758      	adds	r7, #88	; 0x58
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000684 	.word	0x20000684
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 f946 	bl	8006da8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b54:	2301      	movs	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b64:	2301      	movs	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	4619      	mov	r1, r3
 8002b76:	480d      	ldr	r0, [pc, #52]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b78:	f002 fdc2 	bl	8005700 <HAL_TIM_Encoder_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b82:	f000 fbb7 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <MX_TIM2_Init+0xa4>)
 8002b94:	f003 fc7c 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b9e:	f000 fba9 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	3730      	adds	r7, #48	; 0x30
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200006cc 	.word	0x200006cc

08002bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 f8f2 	bl	8006da8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002bce:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <MX_TIM3_Init+0xa4>)
 8002bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002c06:	2302      	movs	r3, #2
 8002c08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002c1e:	f002 fd6f 	bl	8005700 <HAL_TIM_Encoder_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c28:	f000 fb64 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_TIM3_Init+0xa0>)
 8002c3a:	f003 fc29 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c44:	f000 fb56 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3730      	adds	r7, #48	; 0x30
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000714 	.word	0x20000714
 8002c54:	40000400 	.word	0x40000400

08002c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	2224      	movs	r2, #36	; 0x24
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 f89e 	bl	8006da8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002c76:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <MX_TIM4_Init+0xa4>)
 8002c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002cc6:	f002 fd1b 	bl	8005700 <HAL_TIM_Encoder_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002cd0:	f000 fb10 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_TIM4_Init+0xa0>)
 8002ce2:	f003 fbd5 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002cec:	f000 fb02 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	2000075c 	.word	0x2000075c
 8002cfc:	40000800 	.word	0x40000800

08002d00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 f84a 	bl	8006da8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d1e:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <MX_TIM5_Init+0xa4>)
 8002d20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d42:	2303      	movs	r3, #3
 8002d44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d6e:	f002 fcc7 	bl	8005700 <HAL_TIM_Encoder_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d78:	f000 fabc 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_TIM5_Init+0xa0>)
 8002d8a:	f003 fb81 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002d94:	f000 faae 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	3730      	adds	r7, #48	; 0x30
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200007a4 	.word	0x200007a4
 8002da4:	40000c00 	.word	0x40000c00

08002da8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dae:	463b      	mov	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <MX_TIM6_Init+0x68>)
 8002dba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002dbe:	2247      	movs	r2, #71	; 0x47
 8002dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002dca:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002dce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002dd6:	480d      	ldr	r0, [pc, #52]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002dd8:	f002 fad0 	bl	800537c <HAL_TIM_Base_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002de2:	f000 fa87 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002dee:	463b      	mov	r3, r7
 8002df0:	4619      	mov	r1, r3
 8002df2:	4806      	ldr	r0, [pc, #24]	; (8002e0c <MX_TIM6_Init+0x64>)
 8002df4:	f003 fb4c 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002dfe:	f000 fa79 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200007ec 	.word	0x200007ec
 8002e10:	40001000 	.word	0x40001000

08002e14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b096      	sub	sp, #88	; 0x58
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	2220      	movs	r2, #32
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 ffab 	bl	8006da8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e52:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e54:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <MX_TIM8_Init+0x184>)
 8002e56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e58:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5e:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50 * 72 - 1;
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e66:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002e6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6c:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e72:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e7e:	4845      	ldr	r0, [pc, #276]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e80:	f002 fa7c 	bl	800537c <HAL_TIM_Base_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002e8a:	f000 fa33 	bl	80032f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e98:	4619      	mov	r1, r3
 8002e9a:	483e      	ldr	r0, [pc, #248]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002e9c:	f002 ff26 	bl	8005cec <HAL_TIM_ConfigClockSource>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002ea6:	f000 fa25 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002eaa:	483a      	ldr	r0, [pc, #232]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002eac:	f002 fb16 	bl	80054dc <HAL_TIM_PWM_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002eb6:	f000 fa1d 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ec2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4832      	ldr	r0, [pc, #200]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002eca:	f003 fae1 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002ed4:	f000 fa0e 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed8:	2360      	movs	r3, #96	; 0x60
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4619      	mov	r1, r3
 8002efc:	4825      	ldr	r0, [pc, #148]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002efe:	f002 fe37 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002f08:	f000 f9f4 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f10:	2204      	movs	r2, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	481f      	ldr	r0, [pc, #124]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002f16:	f002 fe2b 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002f20:	f000 f9e8 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f28:	2208      	movs	r2, #8
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4819      	ldr	r0, [pc, #100]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002f2e:	f002 fe1f 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002f38:	f000 f9dc 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f40:	220c      	movs	r2, #12
 8002f42:	4619      	mov	r1, r3
 8002f44:	4813      	ldr	r0, [pc, #76]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002f46:	f002 fe13 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002f50:	f000 f9d0 	bl	80032f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4807      	ldr	r0, [pc, #28]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002f78:	f003 faf6 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002f82:	f000 f9b7 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <MX_TIM8_Init+0x180>)
 8002f88:	f000 fb7a 	bl	8003680 <HAL_TIM_MspPostInit>

}
 8002f8c:	bf00      	nop
 8002f8e:	3758      	adds	r7, #88	; 0x58
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000834 	.word	0x20000834
 8002f98:	40013400 	.word	0x40013400

08002f9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <MX_USART2_UART_Init+0x50>)
 8002fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <MX_USART2_UART_Init+0x4c>)
 8002fd4:	f003 fb2b 	bl	800662e <HAL_UART_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fde:	f000 f989 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2000087c 	.word	0x2000087c
 8002fec:	40004400 	.word	0x40004400

08002ff0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <MX_USART3_UART_Init+0x50>)
 8002ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8002ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <MX_USART3_UART_Init+0x4c>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8003016:	220c      	movs	r2, #12
 8003018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <MX_USART3_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003026:	4805      	ldr	r0, [pc, #20]	; (800303c <MX_USART3_UART_Init+0x4c>)
 8003028:	f003 fb01 	bl	800662e <HAL_UART_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003032:	f000 f95f 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200008c0 	.word	0x200008c0
 8003040:	40004800 	.word	0x40004800

08003044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_DMA_Init+0x48>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <MX_DMA_Init+0x48>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6153      	str	r3, [r2, #20]
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <MX_DMA_Init+0x48>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2102      	movs	r1, #2
 8003066:	200d      	movs	r0, #13
 8003068:	f000 ff05 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800306c:	200d      	movs	r0, #13
 800306e:	f000 ff1e 	bl	8003eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2102      	movs	r1, #2
 8003076:	2010      	movs	r0, #16
 8003078:	f000 fefd 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800307c:	2010      	movs	r0, #16
 800307e:	f000 ff16 	bl	8003eae <HAL_NVIC_EnableIRQ>

}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030aa:	f043 0320 	orr.w	r3, r3, #32
 80030ae:	6193      	str	r3, [r2, #24]
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a10      	ldr	r2, [pc, #64]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030f2:	f043 0310 	orr.w	r3, r3, #16
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_GPIO_Init+0xa4>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003104:	2200      	movs	r2, #0
 8003106:	2107      	movs	r1, #7
 8003108:	480b      	ldr	r0, [pc, #44]	; (8003138 <MX_GPIO_Init+0xa8>)
 800310a:	f001 fbbf 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800310e:	2307      	movs	r3, #7
 8003110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003112:	2301      	movs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2302      	movs	r3, #2
 800311c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	4619      	mov	r1, r3
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <MX_GPIO_Init+0xa8>)
 8003126:	f001 fa1d 	bl	8004564 <HAL_GPIO_Init>

}
 800312a:	bf00      	nop
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	40010c00 	.word	0x40010c00

0800313c <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HUAN_MOTOR1_Init+0x48>)
 8003144:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003148:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HUAN_MOTOR1_Init+0x4c>)
 800314a:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 800314e:	4a0f      	ldr	r2, [pc, #60]	; (800318c <HUAN_MOTOR1_Init+0x50>)
 8003150:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8003152:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003154:	220c      	movs	r2, #12
 8003156:	60da      	str	r2, [r3, #12]
	cmotor_lf.negTimer = &htim1;
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <HUAN_MOTOR1_Init+0x50>)
 800315c:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003160:	2208      	movs	r2, #8
 8003162:	611a      	str	r2, [r3, #16]
	cmotor_lf.kp = 0.0003;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <HUAN_MOTOR1_Init+0x54>)
 8003168:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 800316c:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HUAN_MOTOR1_Init+0x58>)
 800316e:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HUAN_MOTOR1_Init+0x5c>)
 8003174:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8003176:	4802      	ldr	r0, [pc, #8]	; (8003180 <HUAN_MOTOR1_Init+0x44>)
 8003178:	f7fe fc42 	bl	8001a00 <huansic_motor_init>
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	2000098c 	.word	0x2000098c
 8003184:	200006cc 	.word	0x200006cc
 8003188:	3d4ccccd 	.word	0x3d4ccccd
 800318c:	20000684 	.word	0x20000684
 8003190:	399d4952 	.word	0x399d4952
 8003194:	37a7c5ac 	.word	0x37a7c5ac
 8003198:	387ba882 	.word	0x387ba882

0800319c <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031a2:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HUAN_MOTOR2_Init+0x48>)
 80031a4:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <HUAN_MOTOR2_Init+0x4c>)
 80031aa:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031ae:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HUAN_MOTOR2_Init+0x50>)
 80031b0:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <HUAN_MOTOR2_Init+0x50>)
 80031bc:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031c0:	2204      	movs	r2, #4
 80031c2:	611a      	str	r2, [r3, #16]
	cmotor_rf.kp = 0.0003;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HUAN_MOTOR2_Init+0x54>)
 80031c8:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031cc:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <HUAN_MOTOR2_Init+0x58>)
 80031ce:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HUAN_MOTOR2_Init+0x5c>)
 80031d4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <HUAN_MOTOR2_Init+0x44>)
 80031d8:	f7fe fc12 	bl	8001a00 <huansic_motor_init>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200009c8 	.word	0x200009c8
 80031e4:	2000075c 	.word	0x2000075c
 80031e8:	3d4ccccd 	.word	0x3d4ccccd
 80031ec:	20000684 	.word	0x20000684
 80031f0:	399d4952 	.word	0x399d4952
 80031f4:	37a7c5ac 	.word	0x37a7c5ac
 80031f8:	387ba882 	.word	0x387ba882

080031fc <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <HUAN_MOTOR3_Init+0x48>)
 8003204:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003208:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 800320a:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HUAN_MOTOR3_Init+0x50>)
 8003210:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003214:	220c      	movs	r2, #12
 8003216:	60da      	str	r2, [r3, #12]
	cmotor_lb.negTimer = &htim8;
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <HUAN_MOTOR3_Init+0x50>)
 800321c:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003220:	2208      	movs	r2, #8
 8003222:	611a      	str	r2, [r3, #16]
	cmotor_lb.kp = 0.0003;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HUAN_MOTOR3_Init+0x54>)
 8003228:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 800322c:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HUAN_MOTOR3_Init+0x58>)
 800322e:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HUAN_MOTOR3_Init+0x5c>)
 8003234:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8003236:	4802      	ldr	r0, [pc, #8]	; (8003240 <HUAN_MOTOR3_Init+0x44>)
 8003238:	f7fe fbe2 	bl	8001a00 <huansic_motor_init>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000a04 	.word	0x20000a04
 8003244:	20000714 	.word	0x20000714
 8003248:	3d4ccccd 	.word	0x3d4ccccd
 800324c:	20000834 	.word	0x20000834
 8003250:	399d4952 	.word	0x399d4952
 8003254:	37a7c5ac 	.word	0x37a7c5ac
 8003258:	387ba882 	.word	0x387ba882

0800325c <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <HUAN_MOTOR4_Init+0x48>)
 8003264:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003268:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <HUAN_MOTOR4_Init+0x4c>)
 800326a:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <HUAN_MOTOR4_Init+0x50>)
 8003270:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <HUAN_MOTOR4_Init+0x50>)
 800327c:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003280:	2204      	movs	r2, #4
 8003282:	611a      	str	r2, [r3, #16]
	cmotor_rb.kp = 0.0003;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HUAN_MOTOR4_Init+0x54>)
 8003288:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 800328c:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HUAN_MOTOR4_Init+0x58>)
 800328e:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HUAN_MOTOR4_Init+0x5c>)
 8003294:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 8003296:	4802      	ldr	r0, [pc, #8]	; (80032a0 <HUAN_MOTOR4_Init+0x44>)
 8003298:	f7fe fbb2 	bl	8001a00 <huansic_motor_init>
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000a40 	.word	0x20000a40
 80032a4:	200007a4 	.word	0x200007a4
 80032a8:	3d4ccccd 	.word	0x3d4ccccd
 80032ac:	20000834 	.word	0x20000834
 80032b0:	399d4952 	.word	0x399d4952
 80032b4:	37a7c5ac 	.word	0x37a7c5ac
 80032b8:	387ba882 	.word	0x387ba882

080032bc <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	himu.uartPort = &huart3;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HUAN_IMU_Init+0x14>)
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HUAN_IMU_Init+0x18>)
 80032c4:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 80032c6:	4802      	ldr	r0, [pc, #8]	; (80032d0 <HUAN_IMU_Init+0x14>)
 80032c8:	f7fe f88c 	bl	80013e4 <huansic_jy62_init>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000a7c 	.word	0x20000a7c
 80032d4:	200008c0 	.word	0x200008c0

080032d8 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HUAN_ZIGBEE_Init+0x14>)
 80032de:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <HUAN_ZIGBEE_Init+0x18>)
 80032e0:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 80032e2:	4802      	ldr	r0, [pc, #8]	; (80032ec <HUAN_ZIGBEE_Init+0x14>)
 80032e4:	f7fe fd7e 	bl	8001de4 <huansic_xb_init>
}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000ab4 	.word	0x20000ab4
 80032f0:	2000087c 	.word	0x2000087c

080032f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f8:	b672      	cpsid	i
}
 80032fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032fc:	e7fe      	b.n	80032fc <Error_Handler+0x8>
	...

08003300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_MspInit+0x5c>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	4a14      	ldr	r2, [pc, #80]	; (800335c <HAL_MspInit+0x5c>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6193      	str	r3, [r2, #24]
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_MspInit+0x5c>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_MspInit+0x5c>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_MspInit+0x5c>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	61d3      	str	r3, [r2, #28]
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_MspInit+0x5c>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_MspInit+0x60>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_MspInit+0x60>)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	40021000 	.word	0x40021000
 8003360:	40010000 	.word	0x40010000

08003364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_I2C_MspInit+0x90>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d132      	bne.n	80033ea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003384:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_I2C_MspInit+0x94>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_I2C_MspInit+0x94>)
 800338a:	f043 0308 	orr.w	r3, r3, #8
 800338e:	6193      	str	r3, [r2, #24]
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_I2C_MspInit+0x94>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800339c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a2:	2312      	movs	r3, #18
 80033a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4619      	mov	r1, r3
 80033b0:	4812      	ldr	r0, [pc, #72]	; (80033fc <HAL_I2C_MspInit+0x98>)
 80033b2:	f001 f8d7 	bl	8004564 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_I2C_MspInit+0x9c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	4a0c      	ldr	r2, [pc, #48]	; (8003400 <HAL_I2C_MspInit+0x9c>)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_I2C_MspInit+0x94>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_I2C_MspInit+0x94>)
 80033d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033dc:	61d3      	str	r3, [r2, #28]
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_I2C_MspInit+0x94>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	; 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40005400 	.word	0x40005400
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010c00 	.word	0x40010c00
 8003400:	40010000 	.word	0x40010000

08003404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_TIM_Base_MspInit+0x8c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10c      	bne.n	8003430 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003416:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 800341c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003420:	6193      	str	r3, [r2, #24]
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800342e:	e02a      	b.n	8003486 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_TIM_Base_MspInit+0x94>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d114      	bne.n	8003464 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800343a:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4a15      	ldr	r2, [pc, #84]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 8003440:	f043 0310 	orr.w	r3, r3, #16
 8003444:	61d3      	str	r3, [r2, #28]
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2101      	movs	r1, #1
 8003456:	2036      	movs	r0, #54	; 0x36
 8003458:	f000 fd0d 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800345c:	2036      	movs	r0, #54	; 0x36
 800345e:	f000 fd26 	bl	8003eae <HAL_NVIC_EnableIRQ>
}
 8003462:	e010      	b.n	8003486 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0c      	ldr	r2, [pc, #48]	; (800349c <HAL_TIM_Base_MspInit+0x98>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10b      	bne.n	8003486 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 8003474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003478:	6193      	str	r3, [r2, #24]
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_TIM_Base_MspInit+0x90>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40021000 	.word	0x40021000
 8003498:	40001000 	.word	0x40001000
 800349c:	40013400 	.word	0x40013400

080034a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b090      	sub	sp, #64	; 0x40
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d14f      	bne.n	8003560 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4a67      	ldr	r2, [pc, #412]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	61d3      	str	r3, [r2, #28]
 80034cc:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d8:	4b62      	ldr	r3, [pc, #392]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	4a61      	ldr	r2, [pc, #388]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6193      	str	r3, [r2, #24]
 80034e4:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f0:	4b5c      	ldr	r3, [pc, #368]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	4a5b      	ldr	r2, [pc, #364]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6193      	str	r3, [r2, #24]
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350e:	2300      	movs	r3, #0
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800351a:	4619      	mov	r1, r3
 800351c:	4852      	ldr	r0, [pc, #328]	; (8003668 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800351e:	f001 f821 	bl	8004564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003522:	2308      	movs	r3, #8
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003526:	2300      	movs	r3, #0
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003532:	4619      	mov	r1, r3
 8003534:	484d      	ldr	r0, [pc, #308]	; (800366c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003536:	f001 f815 	bl	8004564 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800353a:	4b4d      	ldr	r3, [pc, #308]	; (8003670 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	4a45      	ldr	r2, [pc, #276]	; (8003670 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800355e:	e07c      	b.n	800365a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d124      	bne.n	80035b4 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800356a:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a3d      	ldr	r2, [pc, #244]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	61d3      	str	r3, [r2, #28]
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	4a37      	ldr	r2, [pc, #220]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6193      	str	r3, [r2, #24]
 800358e:	4b35      	ldr	r3, [pc, #212]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800359a:	23c0      	movs	r3, #192	; 0xc0
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359e:	2300      	movs	r3, #0
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035aa:	4619      	mov	r1, r3
 80035ac:	482e      	ldr	r0, [pc, #184]	; (8003668 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80035ae:	f000 ffd9 	bl	8004564 <HAL_GPIO_Init>
}
 80035b2:	e052      	b.n	800365a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2f      	ldr	r2, [pc, #188]	; (8003678 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d124      	bne.n	8003608 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035be:	4b29      	ldr	r3, [pc, #164]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4a28      	ldr	r2, [pc, #160]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	61d3      	str	r3, [r2, #28]
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	4a22      	ldr	r2, [pc, #136]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	6193      	str	r3, [r2, #24]
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035ee:	23c0      	movs	r3, #192	; 0xc0
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f2:	2300      	movs	r3, #0
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035fe:	4619      	mov	r1, r3
 8003600:	481a      	ldr	r0, [pc, #104]	; (800366c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003602:	f000 ffaf 	bl	8004564 <HAL_GPIO_Init>
}
 8003606:	e028      	b.n	800365a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d123      	bne.n	800365a <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	61d3      	str	r3, [r2, #28]
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	6193      	str	r3, [r2, #24]
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003642:	2303      	movs	r3, #3
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003646:	2300      	movs	r3, #0
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003652:	4619      	mov	r1, r3
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003656:	f000 ff85 	bl	8004564 <HAL_GPIO_Init>
}
 800365a:	bf00      	nop
 800365c:	3740      	adds	r7, #64	; 0x40
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40010800 	.word	0x40010800
 800366c:	40010c00 	.word	0x40010c00
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00

08003680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0310 	add.w	r3, r7, #16
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_MspPostInit+0x98>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d119      	bne.n	80036d4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_TIM_MspPostInit+0x9c>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_TIM_MspPostInit+0x9c>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_TIM_MspPostInit+0x9c>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80036b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	4619      	mov	r1, r3
 80036cc:	4814      	ldr	r0, [pc, #80]	; (8003720 <HAL_TIM_MspPostInit+0xa0>)
 80036ce:	f000 ff49 	bl	8004564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80036d2:	e01d      	b.n	8003710 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_TIM_MspPostInit+0xa4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d118      	bne.n	8003710 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_TIM_MspPostInit+0x9c>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <HAL_TIM_MspPostInit+0x9c>)
 80036e4:	f043 0310 	orr.w	r3, r3, #16
 80036e8:	6193      	str	r3, [r2, #24]
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_TIM_MspPostInit+0x9c>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80036f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80036fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2302      	movs	r3, #2
 80036fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2302      	movs	r3, #2
 8003702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003704:	f107 0310 	add.w	r3, r7, #16
 8003708:	4619      	mov	r1, r3
 800370a:	4807      	ldr	r0, [pc, #28]	; (8003728 <HAL_TIM_MspPostInit+0xa8>)
 800370c:	f000 ff2a 	bl	8004564 <HAL_GPIO_Init>
}
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40021000 	.word	0x40021000
 8003720:	40010800 	.word	0x40010800
 8003724:	40013400 	.word	0x40013400
 8003728:	40011000 	.word	0x40011000

0800372c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a66      	ldr	r2, [pc, #408]	; (80038e0 <HAL_UART_MspInit+0x1b4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d156      	bne.n	80037fa <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800374c:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	4a64      	ldr	r2, [pc, #400]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003756:	61d3      	str	r3, [r2, #28]
 8003758:	4b62      	ldr	r3, [pc, #392]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003764:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6193      	str	r3, [r2, #24]
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 800377c:	2304      	movs	r3, #4
 800377e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003784:	2303      	movs	r3, #3
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	4619      	mov	r1, r3
 800378e:	4856      	ldr	r0, [pc, #344]	; (80038e8 <HAL_UART_MspInit+0x1bc>)
 8003790:	f000 fee8 	bl	8004564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8003794:	2308      	movs	r3, #8
 8003796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	4850      	ldr	r0, [pc, #320]	; (80038e8 <HAL_UART_MspInit+0x1bc>)
 80037a8:	f000 fedc 	bl	8004564 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037ae:	4a50      	ldr	r2, [pc, #320]	; (80038f0 <HAL_UART_MspInit+0x1c4>)
 80037b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b2:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037be:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c4:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ca:	4b48      	ldr	r3, [pc, #288]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80037d0:	4b46      	ldr	r3, [pc, #280]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037d6:	4b45      	ldr	r3, [pc, #276]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037dc:	4843      	ldr	r0, [pc, #268]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037de:	f000 fb81 	bl	8003ee4 <HAL_DMA_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80037e8:	f7ff fd84 	bl	80032f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3f      	ldr	r2, [pc, #252]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
 80037f2:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <HAL_UART_MspInit+0x1c0>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037f8:	e06e      	b.n	80038d8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <HAL_UART_MspInit+0x1c8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d169      	bne.n	80038d8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003804:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a36      	ldr	r2, [pc, #216]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 800380a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380e:	61d3      	str	r3, [r2, #28]
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4a30      	ldr	r2, [pc, #192]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 8003822:	f043 0310 	orr.w	r3, r3, #16
 8003826:	6193      	str	r3, [r2, #24]
 8003828:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <HAL_UART_MspInit+0x1b8>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8003834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8003842:	f107 031c 	add.w	r3, r7, #28
 8003846:	4619      	mov	r1, r3
 8003848:	482b      	ldr	r0, [pc, #172]	; (80038f8 <HAL_UART_MspInit+0x1cc>)
 800384a:	f000 fe8b 	bl	8004564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 800384e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003854:	2300      	movs	r3, #0
 8003856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	4619      	mov	r1, r3
 8003862:	4825      	ldr	r0, [pc, #148]	; (80038f8 <HAL_UART_MspInit+0x1cc>)
 8003864:	f000 fe7e 	bl	8004564 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_UART_MspInit+0x1d0>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	f043 0310 	orr.w	r3, r3, #16
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <HAL_UART_MspInit+0x1d0>)
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_UART_MspInit+0x1d8>)
 8003890:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038bc:	4810      	ldr	r0, [pc, #64]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038be:	f000 fb11 	bl	8003ee4 <HAL_DMA_Init>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80038c8:	f7ff fd14 	bl	80032f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
 80038d2:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_UART_MspInit+0x1d4>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80038d8:	bf00      	nop
 80038da:	3730      	adds	r7, #48	; 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40010800 	.word	0x40010800
 80038ec:	20000904 	.word	0x20000904
 80038f0:	4002006c 	.word	0x4002006c
 80038f4:	40004800 	.word	0x40004800
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40010000 	.word	0x40010000
 8003900:	20000948 	.word	0x20000948
 8003904:	40020030 	.word	0x40020030

08003908 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800390c:	e7fe      	b.n	800390c <NMI_Handler+0x4>

0800390e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8003912:	e7fe      	b.n	8003912 <HardFault_Handler+0x4>

08003914 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003918:	e7fe      	b.n	8003918 <MemManage_Handler+0x4>

0800391a <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800391e:	e7fe      	b.n	800391e <BusFault_Handler+0x4>

08003920 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8003924:	e7fe      	b.n	8003924 <UsageFault_Handler+0x4>

08003926 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800394e:	f000 f97b 	bl	8003c48 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 800395c:	4805      	ldr	r0, [pc, #20]	; (8003974 <DMA1_Channel3_IRQHandler+0x1c>)
 800395e:	f7fd fd9b 	bl	8001498 <huansic_jy62_decodePackage>
	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003962:	4805      	ldr	r0, [pc, #20]	; (8003978 <DMA1_Channel3_IRQHandler+0x20>)
 8003964:	f000 fb94 	bl	8004090 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <DMA1_Channel3_IRQHandler+0x1c>)
 800396a:	f7fd ffbf 	bl	80018ec <huansic_jy62_setDMA>
	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000a7c 	.word	0x20000a7c
 8003978:	20000948 	.word	0x20000948

0800397c <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <DMA1_Channel6_IRQHandler+0x24>)
 8003982:	7a1b      	ldrb	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8003988:	4805      	ldr	r0, [pc, #20]	; (80039a0 <DMA1_Channel6_IRQHandler+0x24>)
 800398a:	f7fe fa41 	bl	8001e10 <huansic_xb_decodeHeader>
 800398e:	e002      	b.n	8003996 <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8003990:	4803      	ldr	r0, [pc, #12]	; (80039a0 <DMA1_Channel6_IRQHandler+0x24>)
 8003992:	f7fe fa7b 	bl	8001e8c <huansic_xb_decodeBody>
	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <DMA1_Channel6_IRQHandler+0x28>)
 8003998:	f000 fb7a 	bl	8004090 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000ab4 	.word	0x20000ab4
 80039a4:	20000904 	.word	0x20000904

080039a8 <TIM6_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt.
 */
void TIM6_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 80039ac:	4808      	ldr	r0, [pc, #32]	; (80039d0 <TIM6_IRQHandler+0x28>)
 80039ae:	f7fe f8e5 	bl	8001b7c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 80039b2:	4808      	ldr	r0, [pc, #32]	; (80039d4 <TIM6_IRQHandler+0x2c>)
 80039b4:	f7fe f8e2 	bl	8001b7c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 80039b8:	4807      	ldr	r0, [pc, #28]	; (80039d8 <TIM6_IRQHandler+0x30>)
 80039ba:	f7fe f8df 	bl	8001b7c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 80039be:	4807      	ldr	r0, [pc, #28]	; (80039dc <TIM6_IRQHandler+0x34>)
 80039c0:	f7fe f8dc 	bl	8001b7c <huansic_motor_pid>
	/* USER CODE END TIM6_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 80039c4:	4806      	ldr	r0, [pc, #24]	; (80039e0 <TIM6_IRQHandler+0x38>)
 80039c6:	f001 ffcb 	bl	8005960 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_IRQn 1 */

	/* USER CODE END TIM6_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000098c 	.word	0x2000098c
 80039d4:	200009c8 	.word	0x200009c8
 80039d8:	20000a04 	.word	0x20000a04
 80039dc:	20000a40 	.word	0x20000a40
 80039e0:	200007ec 	.word	0x200007ec

080039e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	return 1;
 80039e8:	2301      	movs	r3, #1
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <_kill>:

int _kill(int pid, int sig)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039fc:	f003 f998 	bl	8006d30 <__errno>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2216      	movs	r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
	return -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_exit>:

void _exit (int status)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ffe7 	bl	80039f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a24:	e7fe      	b.n	8003a24 <_exit+0x12>

08003a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e00a      	b.n	8003a4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a38:	f3af 8000 	nop.w
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	b2ca      	uxtb	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbf0      	blt.n	8003a38 <_read+0x12>
	}

return len;
 8003a56:	687b      	ldr	r3, [r7, #4]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e009      	b.n	8003a86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	60ba      	str	r2, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	dbf1      	blt.n	8003a72 <_write+0x12>
	}
	return len;
 8003a8e:	687b      	ldr	r3, [r7, #4]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_close>:

int _close(int file)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	return -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003abe:	605a      	str	r2, [r3, #4]
	return 0;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <_isatty>:

int _isatty(int file)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
	return 0;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <_sbrk+0x5c>)
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <_sbrk+0x60>)
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <_sbrk+0x64>)
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <_sbrk+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <_sbrk+0x64>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d207      	bcs.n	8003b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b28:	f003 f902 	bl	8006d30 <__errno>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	220c      	movs	r2, #12
 8003b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e009      	b.n	8003b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <_sbrk+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <_sbrk+0x64>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <_sbrk+0x64>)
 8003b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	2000c000 	.word	0x2000c000
 8003b58:	00000400 	.word	0x00000400
 8003b5c:	20000bb0 	.word	0x20000bb0
 8003b60:	20000bc8 	.word	0x20000bc8

08003b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <Reset_Handler>:
 8003b70:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <LoopFillZerobss+0x12>)
 8003b72:	490d      	ldr	r1, [pc, #52]	; (8003ba8 <LoopFillZerobss+0x16>)
 8003b74:	4a0d      	ldr	r2, [pc, #52]	; (8003bac <LoopFillZerobss+0x1a>)
 8003b76:	2300      	movs	r3, #0
 8003b78:	e002      	b.n	8003b80 <LoopCopyDataInit>

08003b7a <CopyDataInit>:
 8003b7a:	58d4      	ldr	r4, [r2, r3]
 8003b7c:	50c4      	str	r4, [r0, r3]
 8003b7e:	3304      	adds	r3, #4

08003b80 <LoopCopyDataInit>:
 8003b80:	18c4      	adds	r4, r0, r3
 8003b82:	428c      	cmp	r4, r1
 8003b84:	d3f9      	bcc.n	8003b7a <CopyDataInit>
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <LoopFillZerobss+0x1e>)
 8003b88:	4c0a      	ldr	r4, [pc, #40]	; (8003bb4 <LoopFillZerobss+0x22>)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e001      	b.n	8003b92 <LoopFillZerobss>

08003b8e <FillZerobss>:
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	3204      	adds	r2, #4

08003b92 <LoopFillZerobss>:
 8003b92:	42a2      	cmp	r2, r4
 8003b94:	d3fb      	bcc.n	8003b8e <FillZerobss>
 8003b96:	f7ff ffe5 	bl	8003b64 <SystemInit>
 8003b9a:	f003 f8e1 	bl	8006d60 <__libc_init_array>
 8003b9e:	f7fe fe21 	bl	80027e4 <main>
 8003ba2:	4770      	bx	lr
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000074 	.word	0x20000074
 8003bac:	08009178 	.word	0x08009178
 8003bb0:	20000074 	.word	0x20000074
 8003bb4:	20000bc8 	.word	0x20000bc8

08003bb8 <ADC1_2_IRQHandler>:
 8003bb8:	e7fe      	b.n	8003bb8 <ADC1_2_IRQHandler>
	...

08003bbc <HAL_Init>:
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_Init+0x28>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_Init+0x28>)
 8003bc6:	f043 0310 	orr.w	r3, r3, #16
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f000 f947 	bl	8003e60 <HAL_NVIC_SetPriorityGrouping>
 8003bd2:	200f      	movs	r0, #15
 8003bd4:	f000 f808 	bl	8003be8 <HAL_InitTick>
 8003bd8:	f7ff fb92 	bl	8003300 <HAL_MspInit>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_InitTick>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_InitTick+0x54>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_InitTick+0x58>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f95f 	bl	8003eca <HAL_SYSTICK_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_InitTick+0x2e>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00e      	b.n	8003c34 <HAL_InitTick+0x4c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d80a      	bhi.n	8003c32 <HAL_InitTick+0x4a>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	f000 f927 	bl	8003e76 <HAL_NVIC_SetPriority>
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <HAL_InitTick+0x5c>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_InitTick+0x4c>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000004 	.word	0x20000004
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	20000008 	.word	0x20000008

08003c48 <HAL_IncTick>:
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_IncTick+0x1c>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_IncTick+0x20>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_IncTick+0x20>)
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	2000000c 	.word	0x2000000c
 8003c68:	20000bb4 	.word	0x20000bb4

08003c6c <HAL_GetTick>:
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <HAL_GetTick+0x10>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	20000bb4 	.word	0x20000bb4

08003c80 <HAL_Delay>:
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d005      	beq.n	8003ca6 <HAL_Delay+0x26>
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_Delay+0x44>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	bf00      	nop
 8003ca8:	f7ff ffe0 	bl	8003c6c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d8f7      	bhi.n	8003ca8 <HAL_Delay+0x28>
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <__NVIC_SetPriorityGrouping>:
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4906      	ldr	r1, [pc, #24]	; (8003d60 <__NVIC_EnableIRQ+0x34>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_SetPriority>:
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db0a      	blt.n	8003d8e <__NVIC_SetPriority+0x2a>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	490c      	ldr	r1, [pc, #48]	; (8003db0 <__NVIC_SetPriority+0x4c>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	0112      	lsls	r2, r2, #4
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	440b      	add	r3, r1
 8003d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003d8c:	e00a      	b.n	8003da4 <__NVIC_SetPriority+0x40>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4908      	ldr	r1, [pc, #32]	; (8003db4 <__NVIC_SetPriority+0x50>)
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	0112      	lsls	r2, r2, #4
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	440b      	add	r3, r1
 8003da2:	761a      	strb	r2, [r3, #24]
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000e100 	.word	0xe000e100
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <NVIC_EncodePriority>:
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f1c3 0307 	rsb	r3, r3, #7
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	bf28      	it	cs
 8003dd6:	2304      	movcs	r3, #4
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d902      	bls.n	8003de8 <NVIC_EncodePriority+0x30>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3b03      	subs	r3, #3
 8003de6:	e000      	b.n	8003dea <NVIC_EncodePriority+0x32>
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	f04f 31ff 	mov.w	r1, #4294967295
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	43d9      	mvns	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	400b      	ands	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <SysTick_Config>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e2c:	d301      	bcc.n	8003e32 <SysTick_Config+0x16>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00f      	b.n	8003e52 <SysTick_Config+0x36>
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <SysTick_Config+0x40>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	6053      	str	r3, [r2, #4]
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f7ff ff90 	bl	8003d64 <__NVIC_SetPriority>
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <SysTick_Config+0x40>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <SysTick_Config+0x40>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	2300      	movs	r3, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010

08003e60 <HAL_NVIC_SetPriorityGrouping>:
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff2d 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_SetPriority>:
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	f7ff ff42 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e8c:	6178      	str	r0, [r7, #20]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff90 	bl	8003db8 <NVIC_EncodePriority>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff5f 	bl	8003d64 <__NVIC_SetPriority>
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_EnableIRQ>:
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	71fb      	strb	r3, [r7, #7]
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff35 	bl	8003d2c <__NVIC_EnableIRQ>
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SYSTICK_Config>:
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ffa2 	bl	8003e1c <SysTick_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_DMA_Init>:
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_DMA_Init+0x16>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e059      	b.n	8003fae <HAL_DMA_Init+0xca>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_DMA_Init+0xd4>)
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d80f      	bhi.n	8003f26 <HAL_DMA_Init+0x42>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_DMA_Init+0xd8>)
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <HAL_DMA_Init+0xdc>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	009a      	lsls	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <HAL_DMA_Init+0xe0>)
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f24:	e00e      	b.n	8003f44 <HAL_DMA_Init+0x60>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_DMA_Init+0xe4>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_DMA_Init+0xdc>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	009a      	lsls	r2, r3, #2
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_DMA_Init+0xe8>)
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2020 	strb.w	r2, [r3, #32]
 8003fac:	2300      	movs	r3, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40020407 	.word	0x40020407
 8003fbc:	bffdfff8 	.word	0xbffdfff8
 8003fc0:	cccccccd 	.word	0xcccccccd
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	bffdfbf8 	.word	0xbffdfbf8
 8003fcc:	40020400 	.word	0x40020400

08003fd0 <HAL_DMA_Start_IT>:
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMA_Start_IT+0x20>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e04a      	b.n	8004086 <HAL_DMA_Start_IT+0xb6>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2020 	strb.w	r2, [r3, #32]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d13a      	bne.n	8004078 <HAL_DMA_Start_IT+0xa8>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa6e 	bl	8004508 <DMA_SetConfig>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_DMA_Start_IT+0x76>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 020e 	orr.w	r2, r2, #14
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e00f      	b.n	8004066 <HAL_DMA_Start_IT+0x96>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0204 	bic.w	r2, r2, #4
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 020a 	orr.w	r2, r2, #10
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e005      	b.n	8004084 <HAL_DMA_Start_IT+0xb4>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2020 	strb.w	r2, [r3, #32]
 8004080:	2302      	movs	r3, #2
 8004082:	75fb      	strb	r3, [r7, #23]
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_DMA_IRQHandler>:
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2204      	movs	r2, #4
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80f1 	beq.w	800429c <HAL_DMA_IRQHandler+0x20c>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80eb 	beq.w	800429c <HAL_DMA_IRQHandler+0x20c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x54>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0204 	bic.w	r2, r2, #4
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <HAL_DMA_IRQHandler+0x1d8>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d958      	bls.n	80041a2 <HAL_DMA_IRQHandler+0x112>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a5d      	ldr	r2, [pc, #372]	; (800426c <HAL_DMA_IRQHandler+0x1dc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d04f      	beq.n	800419a <HAL_DMA_IRQHandler+0x10a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a5c      	ldr	r2, [pc, #368]	; (8004270 <HAL_DMA_IRQHandler+0x1e0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d048      	beq.n	8004196 <HAL_DMA_IRQHandler+0x106>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5a      	ldr	r2, [pc, #360]	; (8004274 <HAL_DMA_IRQHandler+0x1e4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d040      	beq.n	8004190 <HAL_DMA_IRQHandler+0x100>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a59      	ldr	r2, [pc, #356]	; (8004278 <HAL_DMA_IRQHandler+0x1e8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d038      	beq.n	800418a <HAL_DMA_IRQHandler+0xfa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a57      	ldr	r2, [pc, #348]	; (800427c <HAL_DMA_IRQHandler+0x1ec>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d030      	beq.n	8004184 <HAL_DMA_IRQHandler+0xf4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a56      	ldr	r2, [pc, #344]	; (8004280 <HAL_DMA_IRQHandler+0x1f0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d028      	beq.n	800417e <HAL_DMA_IRQHandler+0xee>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a4d      	ldr	r2, [pc, #308]	; (8004268 <HAL_DMA_IRQHandler+0x1d8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d020      	beq.n	8004178 <HAL_DMA_IRQHandler+0xe8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_DMA_IRQHandler+0x1f4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d019      	beq.n	8004174 <HAL_DMA_IRQHandler+0xe4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a50      	ldr	r2, [pc, #320]	; (8004288 <HAL_DMA_IRQHandler+0x1f8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d012      	beq.n	8004170 <HAL_DMA_IRQHandler+0xe0>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4f      	ldr	r2, [pc, #316]	; (800428c <HAL_DMA_IRQHandler+0x1fc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00a      	beq.n	800416a <HAL_DMA_IRQHandler+0xda>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a4d      	ldr	r2, [pc, #308]	; (8004290 <HAL_DMA_IRQHandler+0x200>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d102      	bne.n	8004164 <HAL_DMA_IRQHandler+0xd4>
 800415e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004162:	e01b      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004164:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004168:	e018      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 800416a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416e:	e015      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	e013      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004174:	2304      	movs	r3, #4
 8004176:	e011      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004178:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800417c:	e00e      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 800417e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004182:	e00b      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004188:	e008      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 800418a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800418e:	e005      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004194:	e002      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	e000      	b.n	800419c <HAL_DMA_IRQHandler+0x10c>
 800419a:	2304      	movs	r3, #4
 800419c:	4a3d      	ldr	r2, [pc, #244]	; (8004294 <HAL_DMA_IRQHandler+0x204>)
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	e057      	b.n	8004252 <HAL_DMA_IRQHandler+0x1c2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a31      	ldr	r2, [pc, #196]	; (800426c <HAL_DMA_IRQHandler+0x1dc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d04f      	beq.n	800424c <HAL_DMA_IRQHandler+0x1bc>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2f      	ldr	r2, [pc, #188]	; (8004270 <HAL_DMA_IRQHandler+0x1e0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d048      	beq.n	8004248 <HAL_DMA_IRQHandler+0x1b8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2e      	ldr	r2, [pc, #184]	; (8004274 <HAL_DMA_IRQHandler+0x1e4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d040      	beq.n	8004242 <HAL_DMA_IRQHandler+0x1b2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <HAL_DMA_IRQHandler+0x1e8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d038      	beq.n	800423c <HAL_DMA_IRQHandler+0x1ac>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2b      	ldr	r2, [pc, #172]	; (800427c <HAL_DMA_IRQHandler+0x1ec>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d030      	beq.n	8004236 <HAL_DMA_IRQHandler+0x1a6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a29      	ldr	r2, [pc, #164]	; (8004280 <HAL_DMA_IRQHandler+0x1f0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d028      	beq.n	8004230 <HAL_DMA_IRQHandler+0x1a0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_DMA_IRQHandler+0x1d8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d020      	beq.n	800422a <HAL_DMA_IRQHandler+0x19a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a25      	ldr	r2, [pc, #148]	; (8004284 <HAL_DMA_IRQHandler+0x1f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d019      	beq.n	8004226 <HAL_DMA_IRQHandler+0x196>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a24      	ldr	r2, [pc, #144]	; (8004288 <HAL_DMA_IRQHandler+0x1f8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d012      	beq.n	8004222 <HAL_DMA_IRQHandler+0x192>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_DMA_IRQHandler+0x1fc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00a      	beq.n	800421c <HAL_DMA_IRQHandler+0x18c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_DMA_IRQHandler+0x200>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d102      	bne.n	8004216 <HAL_DMA_IRQHandler+0x186>
 8004210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004214:	e01b      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004216:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800421a:	e018      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 800421c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004220:	e015      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004222:	2340      	movs	r3, #64	; 0x40
 8004224:	e013      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004226:	2304      	movs	r3, #4
 8004228:	e011      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 800422a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800422e:	e00e      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004230:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004234:	e00b      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004236:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800423a:	e008      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 800423c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004240:	e005      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004246:	e002      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 8004248:	2340      	movs	r3, #64	; 0x40
 800424a:	e000      	b.n	800424e <HAL_DMA_IRQHandler+0x1be>
 800424c:	2304      	movs	r3, #4
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <HAL_DMA_IRQHandler+0x208>)
 8004250:	6053      	str	r3, [r2, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8136 	beq.w	80044c8 <HAL_DMA_IRQHandler+0x438>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
 8004264:	e130      	b.n	80044c8 <HAL_DMA_IRQHandler+0x438>
 8004266:	bf00      	nop
 8004268:	40020080 	.word	0x40020080
 800426c:	40020008 	.word	0x40020008
 8004270:	4002001c 	.word	0x4002001c
 8004274:	40020030 	.word	0x40020030
 8004278:	40020044 	.word	0x40020044
 800427c:	40020058 	.word	0x40020058
 8004280:	4002006c 	.word	0x4002006c
 8004284:	40020408 	.word	0x40020408
 8004288:	4002041c 	.word	0x4002041c
 800428c:	40020430 	.word	0x40020430
 8004290:	40020444 	.word	0x40020444
 8004294:	40020400 	.word	0x40020400
 8004298:	40020000 	.word	0x40020000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2202      	movs	r2, #2
 80042a2:	409a      	lsls	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80dd 	beq.w	8004468 <HAL_DMA_IRQHandler+0x3d8>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80d7 	beq.w	8004468 <HAL_DMA_IRQHandler+0x3d8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x250>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 020a 	bic.w	r2, r2, #10
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b7b      	ldr	r3, [pc, #492]	; (80044d4 <HAL_DMA_IRQHandler+0x444>)
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d958      	bls.n	800439e <HAL_DMA_IRQHandler+0x30e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a79      	ldr	r2, [pc, #484]	; (80044d8 <HAL_DMA_IRQHandler+0x448>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d04f      	beq.n	8004396 <HAL_DMA_IRQHandler+0x306>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a78      	ldr	r2, [pc, #480]	; (80044dc <HAL_DMA_IRQHandler+0x44c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d048      	beq.n	8004392 <HAL_DMA_IRQHandler+0x302>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a76      	ldr	r2, [pc, #472]	; (80044e0 <HAL_DMA_IRQHandler+0x450>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d040      	beq.n	800438c <HAL_DMA_IRQHandler+0x2fc>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a75      	ldr	r2, [pc, #468]	; (80044e4 <HAL_DMA_IRQHandler+0x454>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d038      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2f6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a73      	ldr	r2, [pc, #460]	; (80044e8 <HAL_DMA_IRQHandler+0x458>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d030      	beq.n	8004380 <HAL_DMA_IRQHandler+0x2f0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a72      	ldr	r2, [pc, #456]	; (80044ec <HAL_DMA_IRQHandler+0x45c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d028      	beq.n	800437a <HAL_DMA_IRQHandler+0x2ea>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <HAL_DMA_IRQHandler+0x444>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d020      	beq.n	8004374 <HAL_DMA_IRQHandler+0x2e4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_DMA_IRQHandler+0x460>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d019      	beq.n	8004370 <HAL_DMA_IRQHandler+0x2e0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6c      	ldr	r2, [pc, #432]	; (80044f4 <HAL_DMA_IRQHandler+0x464>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d012      	beq.n	800436c <HAL_DMA_IRQHandler+0x2dc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <HAL_DMA_IRQHandler+0x468>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00a      	beq.n	8004366 <HAL_DMA_IRQHandler+0x2d6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a69      	ldr	r2, [pc, #420]	; (80044fc <HAL_DMA_IRQHandler+0x46c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d102      	bne.n	8004360 <HAL_DMA_IRQHandler+0x2d0>
 800435a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800435e:	e01b      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004364:	e018      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800436a:	e015      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 800436c:	2320      	movs	r3, #32
 800436e:	e013      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004370:	2302      	movs	r3, #2
 8004372:	e011      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004378:	e00e      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 800437a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800437e:	e00b      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004384:	e008      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800438a:	e005      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 800438c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004390:	e002      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004392:	2320      	movs	r3, #32
 8004394:	e000      	b.n	8004398 <HAL_DMA_IRQHandler+0x308>
 8004396:	2302      	movs	r3, #2
 8004398:	4a59      	ldr	r2, [pc, #356]	; (8004500 <HAL_DMA_IRQHandler+0x470>)
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e057      	b.n	800444e <HAL_DMA_IRQHandler+0x3be>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4d      	ldr	r2, [pc, #308]	; (80044d8 <HAL_DMA_IRQHandler+0x448>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04f      	beq.n	8004448 <HAL_DMA_IRQHandler+0x3b8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4b      	ldr	r2, [pc, #300]	; (80044dc <HAL_DMA_IRQHandler+0x44c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d048      	beq.n	8004444 <HAL_DMA_IRQHandler+0x3b4>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a4a      	ldr	r2, [pc, #296]	; (80044e0 <HAL_DMA_IRQHandler+0x450>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <HAL_DMA_IRQHandler+0x3ae>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a48      	ldr	r2, [pc, #288]	; (80044e4 <HAL_DMA_IRQHandler+0x454>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d038      	beq.n	8004438 <HAL_DMA_IRQHandler+0x3a8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a47      	ldr	r2, [pc, #284]	; (80044e8 <HAL_DMA_IRQHandler+0x458>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d030      	beq.n	8004432 <HAL_DMA_IRQHandler+0x3a2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a45      	ldr	r2, [pc, #276]	; (80044ec <HAL_DMA_IRQHandler+0x45c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d028      	beq.n	800442c <HAL_DMA_IRQHandler+0x39c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3d      	ldr	r2, [pc, #244]	; (80044d4 <HAL_DMA_IRQHandler+0x444>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d020      	beq.n	8004426 <HAL_DMA_IRQHandler+0x396>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a41      	ldr	r2, [pc, #260]	; (80044f0 <HAL_DMA_IRQHandler+0x460>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d019      	beq.n	8004422 <HAL_DMA_IRQHandler+0x392>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <HAL_DMA_IRQHandler+0x464>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d012      	beq.n	800441e <HAL_DMA_IRQHandler+0x38e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3e      	ldr	r2, [pc, #248]	; (80044f8 <HAL_DMA_IRQHandler+0x468>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00a      	beq.n	8004418 <HAL_DMA_IRQHandler+0x388>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3d      	ldr	r2, [pc, #244]	; (80044fc <HAL_DMA_IRQHandler+0x46c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d102      	bne.n	8004412 <HAL_DMA_IRQHandler+0x382>
 800440c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004410:	e01b      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004416:	e018      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800441c:	e015      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 800441e:	2320      	movs	r3, #32
 8004420:	e013      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004422:	2302      	movs	r3, #2
 8004424:	e011      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442a:	e00e      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 800442c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004430:	e00b      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004436:	e008      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800443c:	e005      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 800443e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004442:	e002      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004444:	2320      	movs	r3, #32
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0x3ba>
 8004448:	2302      	movs	r3, #2
 800444a:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <HAL_DMA_IRQHandler+0x474>)
 800444c:	6053      	str	r3, [r2, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2020 	strb.w	r2, [r3, #32]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d034      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x438>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
 8004466:	e02f      	b.n	80044c8 <HAL_DMA_IRQHandler+0x438>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2208      	movs	r2, #8
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d028      	beq.n	80044ca <HAL_DMA_IRQHandler+0x43a>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d023      	beq.n	80044ca <HAL_DMA_IRQHandler+0x43a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 020e 	bic.w	r2, r2, #14
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f202 	lsl.w	r2, r1, r2
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2020 	strb.w	r2, [r3, #32]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_DMA_IRQHandler+0x43a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40020080 	.word	0x40020080
 80044d8:	40020008 	.word	0x40020008
 80044dc:	4002001c 	.word	0x4002001c
 80044e0:	40020030 	.word	0x40020030
 80044e4:	40020044 	.word	0x40020044
 80044e8:	40020058 	.word	0x40020058
 80044ec:	4002006c 	.word	0x4002006c
 80044f0:	40020408 	.word	0x40020408
 80044f4:	4002041c 	.word	0x4002041c
 80044f8:	40020430 	.word	0x40020430
 80044fc:	40020444 	.word	0x40020444
 8004500:	40020400 	.word	0x40020400
 8004504:	40020000 	.word	0x40020000

08004508 <DMA_SetConfig>:
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f202 	lsl.w	r2, r1, r2
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b10      	cmp	r3, #16
 8004534:	d108      	bne.n	8004548 <DMA_SetConfig+0x40>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	e007      	b.n	8004558 <DMA_SetConfig+0x50>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
	...

08004564 <HAL_GPIO_Init>:
 8004564:	b480      	push	{r7}
 8004566:	b08b      	sub	sp, #44	; 0x2c
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	2300      	movs	r3, #0
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	e179      	b.n	800486c <HAL_GPIO_Init+0x308>
 8004578:	2201      	movs	r2, #1
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	429a      	cmp	r2, r3
 8004592:	f040 8168 	bne.w	8004866 <HAL_GPIO_Init+0x302>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4a96      	ldr	r2, [pc, #600]	; (80047f4 <HAL_GPIO_Init+0x290>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d05e      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045a0:	4a94      	ldr	r2, [pc, #592]	; (80047f4 <HAL_GPIO_Init+0x290>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d875      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045a6:	4a94      	ldr	r2, [pc, #592]	; (80047f8 <HAL_GPIO_Init+0x294>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d058      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045ac:	4a92      	ldr	r2, [pc, #584]	; (80047f8 <HAL_GPIO_Init+0x294>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d86f      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045b2:	4a92      	ldr	r2, [pc, #584]	; (80047fc <HAL_GPIO_Init+0x298>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d052      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045b8:	4a90      	ldr	r2, [pc, #576]	; (80047fc <HAL_GPIO_Init+0x298>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d869      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045be:	4a90      	ldr	r2, [pc, #576]	; (8004800 <HAL_GPIO_Init+0x29c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04c      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045c4:	4a8e      	ldr	r2, [pc, #568]	; (8004800 <HAL_GPIO_Init+0x29c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d863      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045ca:	4a8e      	ldr	r2, [pc, #568]	; (8004804 <HAL_GPIO_Init+0x2a0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d046      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045d0:	4a8c      	ldr	r2, [pc, #560]	; (8004804 <HAL_GPIO_Init+0x2a0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d85d      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045d6:	2b12      	cmp	r3, #18
 80045d8:	d82a      	bhi.n	8004630 <HAL_GPIO_Init+0xcc>
 80045da:	2b12      	cmp	r3, #18
 80045dc:	d859      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_GPIO_Init+0x80>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	0800465f 	.word	0x0800465f
 80045e8:	08004639 	.word	0x08004639
 80045ec:	0800464b 	.word	0x0800464b
 80045f0:	0800468d 	.word	0x0800468d
 80045f4:	08004693 	.word	0x08004693
 80045f8:	08004693 	.word	0x08004693
 80045fc:	08004693 	.word	0x08004693
 8004600:	08004693 	.word	0x08004693
 8004604:	08004693 	.word	0x08004693
 8004608:	08004693 	.word	0x08004693
 800460c:	08004693 	.word	0x08004693
 8004610:	08004693 	.word	0x08004693
 8004614:	08004693 	.word	0x08004693
 8004618:	08004693 	.word	0x08004693
 800461c:	08004693 	.word	0x08004693
 8004620:	08004693 	.word	0x08004693
 8004624:	08004693 	.word	0x08004693
 8004628:	08004641 	.word	0x08004641
 800462c:	08004655 	.word	0x08004655
 8004630:	4a75      	ldr	r2, [pc, #468]	; (8004808 <HAL_GPIO_Init+0x2a4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 8004636:	e02c      	b.n	8004692 <HAL_GPIO_Init+0x12e>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	623b      	str	r3, [r7, #32]
 800463e:	e029      	b.n	8004694 <HAL_GPIO_Init+0x130>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	3304      	adds	r3, #4
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	e024      	b.n	8004694 <HAL_GPIO_Init+0x130>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	3308      	adds	r3, #8
 8004650:	623b      	str	r3, [r7, #32]
 8004652:	e01f      	b.n	8004694 <HAL_GPIO_Init+0x130>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	330c      	adds	r3, #12
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	e01a      	b.n	8004694 <HAL_GPIO_Init+0x130>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_GPIO_Init+0x108>
 8004666:	2304      	movs	r3, #4
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	e013      	b.n	8004694 <HAL_GPIO_Init+0x130>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_GPIO_Init+0x11c>
 8004674:	2308      	movs	r3, #8
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	611a      	str	r2, [r3, #16]
 800467e:	e009      	b.n	8004694 <HAL_GPIO_Init+0x130>
 8004680:	2308      	movs	r3, #8
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	615a      	str	r2, [r3, #20]
 800468a:	e003      	b.n	8004694 <HAL_GPIO_Init+0x130>
 800468c:	2300      	movs	r3, #0
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	e000      	b.n	8004694 <HAL_GPIO_Init+0x130>
 8004692:	bf00      	nop
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2bff      	cmp	r3, #255	; 0xff
 8004698:	d801      	bhi.n	800469e <HAL_GPIO_Init+0x13a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	e001      	b.n	80046a2 <HAL_GPIO_Init+0x13e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2bff      	cmp	r3, #255	; 0xff
 80046a8:	d802      	bhi.n	80046b0 <HAL_GPIO_Init+0x14c>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	e002      	b.n	80046b6 <HAL_GPIO_Init+0x152>
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	3b08      	subs	r3, #8
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	210f      	movs	r1, #15
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	6a39      	ldr	r1, [r7, #32]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	431a      	orrs	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80c1 	beq.w	8004866 <HAL_GPIO_Init+0x302>
 80046e4:	4b49      	ldr	r3, [pc, #292]	; (800480c <HAL_GPIO_Init+0x2a8>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4a48      	ldr	r2, [pc, #288]	; (800480c <HAL_GPIO_Init+0x2a8>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6193      	str	r3, [r2, #24]
 80046f0:	4b46      	ldr	r3, [pc, #280]	; (800480c <HAL_GPIO_Init+0x2a8>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a44      	ldr	r2, [pc, #272]	; (8004810 <HAL_GPIO_Init+0x2ac>)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	3302      	adds	r3, #2
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	220f      	movs	r2, #15
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <HAL_GPIO_Init+0x2b0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01f      	beq.n	8004768 <HAL_GPIO_Init+0x204>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3b      	ldr	r2, [pc, #236]	; (8004818 <HAL_GPIO_Init+0x2b4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d019      	beq.n	8004764 <HAL_GPIO_Init+0x200>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3a      	ldr	r2, [pc, #232]	; (800481c <HAL_GPIO_Init+0x2b8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <HAL_GPIO_Init+0x1fc>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a39      	ldr	r2, [pc, #228]	; (8004820 <HAL_GPIO_Init+0x2bc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00d      	beq.n	800475c <HAL_GPIO_Init+0x1f8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a38      	ldr	r2, [pc, #224]	; (8004824 <HAL_GPIO_Init+0x2c0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <HAL_GPIO_Init+0x1f4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a37      	ldr	r2, [pc, #220]	; (8004828 <HAL_GPIO_Init+0x2c4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d101      	bne.n	8004754 <HAL_GPIO_Init+0x1f0>
 8004750:	2305      	movs	r3, #5
 8004752:	e00a      	b.n	800476a <HAL_GPIO_Init+0x206>
 8004754:	2306      	movs	r3, #6
 8004756:	e008      	b.n	800476a <HAL_GPIO_Init+0x206>
 8004758:	2304      	movs	r3, #4
 800475a:	e006      	b.n	800476a <HAL_GPIO_Init+0x206>
 800475c:	2303      	movs	r3, #3
 800475e:	e004      	b.n	800476a <HAL_GPIO_Init+0x206>
 8004760:	2302      	movs	r3, #2
 8004762:	e002      	b.n	800476a <HAL_GPIO_Init+0x206>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_GPIO_Init+0x206>
 8004768:	2300      	movs	r3, #0
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	f002 0203 	and.w	r2, r2, #3
 8004770:	0092      	lsls	r2, r2, #2
 8004772:	4093      	lsls	r3, r2
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4925      	ldr	r1, [pc, #148]	; (8004810 <HAL_GPIO_Init+0x2ac>)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	3302      	adds	r3, #2
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <HAL_GPIO_Init+0x23e>
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_GPIO_Init+0x2c8>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4924      	ldr	r1, [pc, #144]	; (800482c <HAL_GPIO_Init+0x2c8>)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e006      	b.n	80047b0 <HAL_GPIO_Init+0x24c>
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	4920      	ldr	r1, [pc, #128]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <HAL_GPIO_Init+0x266>
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	491a      	ldr	r1, [pc, #104]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
 80047c8:	e006      	b.n	80047d8 <HAL_GPIO_Init+0x274>
 80047ca:	4b18      	ldr	r3, [pc, #96]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	4916      	ldr	r1, [pc, #88]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d025      	beq.n	8004830 <HAL_GPIO_Init+0x2cc>
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	4910      	ldr	r1, [pc, #64]	; (800482c <HAL_GPIO_Init+0x2c8>)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]
 80047f0:	e025      	b.n	800483e <HAL_GPIO_Init+0x2da>
 80047f2:	bf00      	nop
 80047f4:	10320000 	.word	0x10320000
 80047f8:	10310000 	.word	0x10310000
 80047fc:	10220000 	.word	0x10220000
 8004800:	10210000 	.word	0x10210000
 8004804:	10120000 	.word	0x10120000
 8004808:	10110000 	.word	0x10110000
 800480c:	40021000 	.word	0x40021000
 8004810:	40010000 	.word	0x40010000
 8004814:	40010800 	.word	0x40010800
 8004818:	40010c00 	.word	0x40010c00
 800481c:	40011000 	.word	0x40011000
 8004820:	40011400 	.word	0x40011400
 8004824:	40011800 	.word	0x40011800
 8004828:	40011c00 	.word	0x40011c00
 800482c:	40010400 	.word	0x40010400
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_GPIO_Init+0x324>)
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	43db      	mvns	r3, r3
 8004838:	4913      	ldr	r1, [pc, #76]	; (8004888 <HAL_GPIO_Init+0x324>)
 800483a:	4013      	ands	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_GPIO_Init+0x2f4>
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HAL_GPIO_Init+0x324>)
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	490e      	ldr	r1, [pc, #56]	; (8004888 <HAL_GPIO_Init+0x324>)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	60cb      	str	r3, [r1, #12]
 8004856:	e006      	b.n	8004866 <HAL_GPIO_Init+0x302>
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_GPIO_Init+0x324>)
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	43db      	mvns	r3, r3
 8004860:	4909      	ldr	r1, [pc, #36]	; (8004888 <HAL_GPIO_Init+0x324>)
 8004862:	4013      	ands	r3, r2
 8004864:	60cb      	str	r3, [r1, #12]
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	3301      	adds	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	f47f ae7e 	bne.w	8004578 <HAL_GPIO_Init+0x14>
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	372c      	adds	r7, #44	; 0x2c
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_GPIO_WritePin>:
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
 8004898:	4613      	mov	r3, r2
 800489a:	707b      	strb	r3, [r7, #1]
 800489c:	787b      	ldrb	r3, [r7, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_WritePin+0x1e>
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]
 80048a8:	e003      	b.n	80048b2 <HAL_GPIO_WritePin+0x26>
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <HAL_I2C_Init>:
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_I2C_Init+0x12>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e12b      	b.n	8004b26 <HAL_I2C_Init+0x26a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_I2C_Init+0x2c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fe fd3e 	bl	8003364 <HAL_I2C_MspInit>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	; 0x24
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f000 fce6 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4a81      	ldr	r2, [pc, #516]	; (8004b30 <HAL_I2C_Init+0x274>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d807      	bhi.n	8004940 <HAL_I2C_Init+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_I2C_Init+0x278>)
 8004934:	4293      	cmp	r3, r2
 8004936:	bf94      	ite	ls
 8004938:	2301      	movls	r3, #1
 800493a:	2300      	movhi	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e006      	b.n	800494e <HAL_I2C_Init+0x92>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a7d      	ldr	r2, [pc, #500]	; (8004b38 <HAL_I2C_Init+0x27c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	bf94      	ite	ls
 8004948:	2301      	movls	r3, #1
 800494a:	2300      	movhi	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Init+0x9a>
 8004952:	2301      	movs	r3, #1
 8004954:	e0e7      	b.n	8004b26 <HAL_I2C_Init+0x26a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a78      	ldr	r2, [pc, #480]	; (8004b3c <HAL_I2C_Init+0x280>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0c9b      	lsrs	r3, r3, #18
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a6a      	ldr	r2, [pc, #424]	; (8004b30 <HAL_I2C_Init+0x274>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d802      	bhi.n	8004990 <HAL_I2C_Init+0xd4>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3301      	adds	r3, #1
 800498e:	e009      	b.n	80049a4 <HAL_I2C_Init+0xe8>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	4a69      	ldr	r2, [pc, #420]	; (8004b40 <HAL_I2C_Init+0x284>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	3301      	adds	r3, #1
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6213      	str	r3, [r2, #32]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	495c      	ldr	r1, [pc, #368]	; (8004b30 <HAL_I2C_Init+0x274>)
 80049c0:	428b      	cmp	r3, r1
 80049c2:	d819      	bhi.n	80049f8 <HAL_I2C_Init+0x13c>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1e59      	subs	r1, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049d8:	400b      	ands	r3, r1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_I2C_Init+0x138>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1e59      	subs	r1, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f2:	e051      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 80049f4:	2304      	movs	r3, #4
 80049f6:	e04f      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d111      	bne.n	8004a24 <HAL_I2C_Init+0x168>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1e58      	subs	r0, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e012      	b.n	8004a4a <HAL_I2C_Init+0x18e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1e58      	subs	r0, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	0099      	lsls	r1, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Init+0x196>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e022      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10e      	bne.n	8004a78 <HAL_I2C_Init+0x1bc>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1e58      	subs	r0, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	440b      	add	r3, r1
 8004a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	e00f      	b.n	8004a98 <HAL_I2C_Init+0x1dc>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1e58      	subs	r0, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	0099      	lsls	r1, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	6809      	ldr	r1, [r1, #0]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61cb      	str	r3, [r1, #28]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6911      	ldr	r1, [r2, #16]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	4311      	orrs	r1, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b24:	2300      	movs	r3, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	000186a0 	.word	0x000186a0
 8004b34:	001e847f 	.word	0x001e847f
 8004b38:	003d08ff 	.word	0x003d08ff
 8004b3c:	431bde83 	.word	0x431bde83
 8004b40:	10624dd3 	.word	0x10624dd3

08004b44 <HAL_RCC_OscConfig>:
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_OscConfig+0x12>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e272      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8087 	beq.w	8004c72 <HAL_RCC_OscConfig+0x12e>
 8004b64:	4b92      	ldr	r3, [pc, #584]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x46>
 8004b70:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d112      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
 8004b7c:	4b8c      	ldr	r3, [pc, #560]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d10b      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
 8004b8a:	4b89      	ldr	r3, [pc, #548]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d06c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x12c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d168      	bne.n	8004c70 <HAL_RCC_OscConfig+0x12c>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e24c      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x76>
 8004bac:	4b80      	ldr	r3, [pc, #512]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7f      	ldr	r2, [pc, #508]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e02e      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x98>
 8004bc2:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7a      	ldr	r2, [pc, #488]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a77      	ldr	r2, [pc, #476]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e01d      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0xbc>
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a71      	ldr	r2, [pc, #452]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b6f      	ldr	r3, [pc, #444]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6e      	ldr	r2, [pc, #440]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004c00:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6a      	ldr	r2, [pc, #424]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a67      	ldr	r2, [pc, #412]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCC_OscConfig+0x104>
 8004c20:	f7ff f824 	bl	8003c6c <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xf6>
 8004c28:	f7ff f820 	bl	8003c6c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xf6>
 8004c36:	2303      	movs	r3, #3
 8004c38:	e200      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe4>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
 8004c48:	f7ff f810 	bl	8003c6c <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x11e>
 8004c50:	f7ff f80c 	bl	8003c6c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x11e>
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1ec      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004c62:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x10c>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
 8004c70:	bf00      	nop
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d063      	beq.n	8004d46 <HAL_RCC_OscConfig+0x202>
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x15e>
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d11c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e1c0      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4939      	ldr	r1, [pc, #228]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
 8004cce:	e03a      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f7fe ffc5 	bl	8003c6c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
 8004ce6:	f7fe ffc1 	bl	8003c6c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e1a1      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1a2>
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4927      	ldr	r1, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f7fe ffa4 	bl	8003c6c <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
 8004d28:	f7fe ffa0 	bl	8003c6c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
 8004d36:	2303      	movs	r3, #3
 8004d38:	e180      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1e4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03a      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x284>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HAL_RCC_OscConfig+0x24a>
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	f7fe ff84 	bl	8003c6c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x236>
 8004d68:	f7fe ff80 	bl	8003c6c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x236>
 8004d76:	2303      	movs	r3, #3
 8004d78:	e160      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0x224>
 8004d86:	2001      	movs	r0, #1
 8004d88:	f000 fada 	bl	8005340 <RCC_Delay>
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x284>
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f7fe ff6a 	bl	8003c6c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCC_OscConfig+0x278>
 8004d9c:	f7fe ff66 	bl	8003c6c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_OscConfig+0x278>
 8004daa:	2303      	movs	r3, #3
 8004dac:	e146      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	42420000 	.word	0x42420000
 8004db8:	42420480 	.word	0x42420480
 8004dbc:	4b92      	ldr	r3, [pc, #584]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e9      	bne.n	8004d9c <HAL_RCC_OscConfig+0x258>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a6 	beq.w	8004f22 <HAL_RCC_OscConfig+0x3de>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
 8004dda:	4b8b      	ldr	r3, [pc, #556]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2be>
 8004de6:	4b88      	ldr	r3, [pc, #544]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a87      	ldr	r2, [pc, #540]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]
 8004df2:	4b85      	ldr	r3, [pc, #532]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
 8004e02:	4b82      	ldr	r3, [pc, #520]	; (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2fc>
 8004e0e:	4b7f      	ldr	r3, [pc, #508]	; (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7e      	ldr	r2, [pc, #504]	; (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	f7fe ff27 	bl	8003c6c <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
 8004e22:	f7fe ff23 	bl	8003c6c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b64      	cmp	r3, #100	; 0x64
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
 8004e30:	2303      	movs	r3, #3
 8004e32:	e103      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004e34:	4b75      	ldr	r3, [pc, #468]	; (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2de>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x312>
 8004e48:	4b6f      	ldr	r3, [pc, #444]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a6e      	ldr	r2, [pc, #440]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	e02d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x334>
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	4a69      	ldr	r2, [pc, #420]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6213      	str	r3, [r2, #32]
 8004e6a:	4b67      	ldr	r3, [pc, #412]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a66      	ldr	r2, [pc, #408]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6213      	str	r3, [r2, #32]
 8004e76:	e01c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x356>
 8004e80:	4b61      	ldr	r3, [pc, #388]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	4a60      	ldr	r2, [pc, #384]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6213      	str	r3, [r2, #32]
 8004e8c:	4b5e      	ldr	r3, [pc, #376]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a5d      	ldr	r2, [pc, #372]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6213      	str	r3, [r2, #32]
 8004e98:	e00b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e9a:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4a5a      	ldr	r2, [pc, #360]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6213      	str	r3, [r2, #32]
 8004ea6:	4b58      	ldr	r3, [pc, #352]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4a57      	ldr	r2, [pc, #348]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6213      	str	r3, [r2, #32]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x3a2>
 8004eba:	f7fe fed7 	bl	8003c6c <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x394>
 8004ec2:	f7fe fed3 	bl	8003c6c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x394>
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0b1      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004ed8:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x37e>
 8004ee4:	e014      	b.n	8004f10 <HAL_RCC_OscConfig+0x3cc>
 8004ee6:	f7fe fec1 	bl	8003c6c <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
 8004eee:	f7fe febd 	bl	8003c6c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
 8004f00:	2303      	movs	r3, #3
 8004f02:	e09b      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004f04:	4b40      	ldr	r3, [pc, #256]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ee      	bne.n	8004eee <HAL_RCC_OscConfig+0x3aa>
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3de>
 8004f16:	4b3c      	ldr	r3, [pc, #240]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8087 	beq.w	800503a <HAL_RCC_OscConfig+0x4f6>
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d061      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4b8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d146      	bne.n	8004fce <HAL_RCC_OscConfig+0x48a>
 8004f40:	4b33      	ldr	r3, [pc, #204]	; (8005010 <HAL_RCC_OscConfig+0x4cc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f7fe fe91 	bl	8003c6c <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x41c>
 8004f4e:	f7fe fe8d 	bl	8003c6c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x41c>
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e06d      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004f60:	4b29      	ldr	r3, [pc, #164]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x40a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d108      	bne.n	8004f88 <HAL_RCC_OscConfig+0x444>
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	4921      	ldr	r1, [pc, #132]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a19      	ldr	r1, [r3, #32]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	491b      	ldr	r1, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_RCC_OscConfig+0x4cc>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f7fe fe61 	bl	8003c6c <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
 8004fae:	f7fe fe5d 	bl	8003c6c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e03d      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004fc0:	4b11      	ldr	r3, [pc, #68]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x46a>
 8004fcc:	e035      	b.n	800503a <HAL_RCC_OscConfig+0x4f6>
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <HAL_RCC_OscConfig+0x4cc>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f7fe fe4a 	bl	8003c6c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4aa>
 8004fdc:	f7fe fe46 	bl	8003c6c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4aa>
 8004fea:	2303      	movs	r3, #3
 8004fec:	e026      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x498>
 8004ffa:	e01e      	b.n	800503a <HAL_RCC_OscConfig+0x4f6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <HAL_RCC_OscConfig+0x4d0>
 8005004:	2301      	movs	r3, #1
 8005006:	e019      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8005008:	40021000 	.word	0x40021000
 800500c:	40007000 	.word	0x40007000
 8005010:	42420060 	.word	0x42420060
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_OscConfig+0x500>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	429a      	cmp	r2, r3
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x4f2>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	429a      	cmp	r2, r3
 8005034:	d001      	beq.n	800503a <HAL_RCC_OscConfig+0x4f6>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 800503a:	2300      	movs	r3, #0
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_RCC_ClockConfig>:
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
 8005058:	2301      	movs	r3, #1
 800505a:	e0d0      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 800505c:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d910      	bls.n	800508c <HAL_RCC_ClockConfig+0x44>
 800506a:	4b67      	ldr	r3, [pc, #412]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 0207 	bic.w	r2, r3, #7
 8005072:	4965      	ldr	r1, [pc, #404]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
 800507a:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x44>
 8005088:	2301      	movs	r3, #1
 800508a:	e0b8      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_ClockConfig+0x92>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x68>
 80050a4:	4b59      	ldr	r3, [pc, #356]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a58      	ldr	r2, [pc, #352]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050ae:	6053      	str	r3, [r2, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x80>
 80050bc:	4b53      	ldr	r3, [pc, #332]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a52      	ldr	r2, [pc, #328]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050c6:	6053      	str	r3, [r2, #4]
 80050c8:	4b50      	ldr	r3, [pc, #320]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	494d      	ldr	r1, [pc, #308]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d040      	beq.n	8005168 <HAL_RCC_ClockConfig+0x120>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xb6>
 80050ee:	4b47      	ldr	r3, [pc, #284]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d115      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0xce>
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
 8005112:	2301      	movs	r3, #1
 8005114:	e073      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 8005116:	4b3d      	ldr	r3, [pc, #244]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
 8005122:	2301      	movs	r3, #1
 8005124:	e06b      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f023 0203 	bic.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4936      	ldr	r1, [pc, #216]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]
 8005138:	f7fe fd98 	bl	8003c6c <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x10e>
 8005140:	f7fe fd94 	bl	8003c6c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x10e>
 8005152:	2303      	movs	r3, #3
 8005154:	e053      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 8005156:	4b2d      	ldr	r3, [pc, #180]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 020c 	and.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	429a      	cmp	r2, r3
 8005166:	d1eb      	bne.n	8005140 <HAL_RCC_ClockConfig+0xf8>
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d210      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x150>
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	4922      	ldr	r1, [pc, #136]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
 8005186:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x150>
 8005194:	2301      	movs	r3, #1
 8005196:	e032      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x16e>
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4916      	ldr	r1, [pc, #88]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	604b      	str	r3, [r1, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x18e>
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490e      	ldr	r1, [pc, #56]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]
 80051d6:	f000 f821 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490a      	ldr	r1, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1cc>)
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1d0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fcf6 	bl	8003be8 <HAL_InitTick>
 80051fc:	2300      	movs	r3, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40022000 	.word	0x40022000
 800520c:	40021000 	.word	0x40021000
 8005210:	08008eac 	.word	0x08008eac
 8005214:	20000004 	.word	0x20000004
 8005218:	20000008 	.word	0x20000008

0800521c <HAL_RCC_GetSysClockFreq>:
 800521c:	b490      	push	{r4, r7}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	4b29      	ldr	r3, [pc, #164]	; (80052c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005224:	1d3c      	adds	r4, r7, #4
 8005226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800522c:	f240 2301 	movw	r3, #513	; 0x201
 8005230:	803b      	strh	r3, [r7, #0]
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	2300      	movs	r3, #0
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b04      	cmp	r3, #4
 8005254:	d002      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x40>
 8005256:	2b08      	cmp	r3, #8
 8005258:	d003      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x46>
 800525a:	e02b      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x98>
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	e02b      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x9e>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	0c9b      	lsrs	r3, r3, #18
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	3328      	adds	r3, #40	; 0x28
 800526c:	443b      	add	r3, r7
 800526e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d012      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x88>
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	0c5b      	lsrs	r3, r3, #17
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	3328      	adds	r3, #40	; 0x28
 800528a:	443b      	add	r3, r7
 800528c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005296:	fb03 f202 	mul.w	r2, r3, r2
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	e004      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x92>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	e002      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x9e>
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	bf00      	nop
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc90      	pop	{r4, r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	08008e88 	.word	0x08008e88
 80052cc:	40021000 	.word	0x40021000
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	003d0900 	.word	0x003d0900
 80052d8:	007a1200 	.word	0x007a1200

080052dc <HAL_RCC_GetHCLKFreq>:
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <HAL_RCC_GetHCLKFreq+0x10>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	20000004 	.word	0x20000004

080052f0 <HAL_RCC_GetPCLK1Freq>:
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	f7ff fff2 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	08008ebc 	.word	0x08008ebc

08005318 <HAL_RCC_GetPCLK2Freq>:
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
 800531c:	f7ff ffde 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	0adb      	lsrs	r3, r3, #11
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4903      	ldr	r1, [pc, #12]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40021000 	.word	0x40021000
 800533c:	08008ebc 	.word	0x08008ebc

08005340 <RCC_Delay>:
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <RCC_Delay+0x34>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <RCC_Delay+0x38>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0a5b      	lsrs	r3, r3, #9
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	bf00      	nop
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	60fa      	str	r2, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f9      	bne.n	800535c <RCC_Delay+0x1c>
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	20000004 	.word	0x20000004
 8005378:	10624dd3 	.word	0x10624dd3

0800537c <HAL_TIM_Base_Init>:
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_Base_Init+0x12>
 800538a:	2301      	movs	r3, #1
 800538c:	e041      	b.n	8005412 <HAL_TIM_Base_Init+0x96>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_Base_Init+0x2c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fe f82e 	bl	8003404 <HAL_TIM_Base_MspInit>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 fd88 	bl	8005ed0 <TIM_Base_SetConfig>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005410:	2300      	movs	r3, #0
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_Base_Start_IT>:
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
 8005430:	2301      	movs	r3, #1
 8005432:	e044      	b.n	80054be <HAL_TIM_Base_Start_IT+0xa2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <HAL_TIM_Base_Start_IT+0xac>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <HAL_TIM_Base_Start_IT+0xb0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <HAL_TIM_Base_Start_IT+0xb8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x6c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_TIM_Base_Start_IT+0x90>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d010      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0xa0>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e007      	b.n	80054bc <HAL_TIM_Base_Start_IT+0xa0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40013400 	.word	0x40013400
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00

080054dc <HAL_TIM_PWM_Init>:
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_Init+0x12>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e041      	b.n	8005572 <HAL_TIM_PWM_Init+0x96>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_TIM_PWM_Init+0x2c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f839 	bl	800557a <HAL_TIM_PWM_MspInit>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 fcd8 	bl	8005ed0 <TIM_Base_SetConfig>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005570:	2300      	movs	r3, #0
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_PWM_MspInit>:
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_PWM_Start>:
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <HAL_TIM_PWM_Start+0x24>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e022      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d109      	bne.n	80055ca <HAL_TIM_PWM_Start+0x3e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e015      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d109      	bne.n	80055e4 <HAL_TIM_PWM_Start+0x58>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e008      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_TIM_PWM_Start+0x72>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e072      	b.n	80056e4 <HAL_TIM_PWM_Start+0x158>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0x82>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560c:	e013      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0x92>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	e00b      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562c:	e003      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 ff02 	bl	8006448 <TIM_CCxChannelCmd>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a28      	ldr	r2, [pc, #160]	; (80056ec <HAL_TIM_PWM_Start+0x160>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_TIM_PWM_Start+0xcc>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a27      	ldr	r2, [pc, #156]	; (80056f0 <HAL_TIM_PWM_Start+0x164>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_TIM_PWM_Start+0xd0>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_TIM_PWM_Start+0xd2>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_TIM_PWM_Start+0xe6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005670:	645a      	str	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_TIM_PWM_Start+0x160>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_TIM_PWM_Start+0x122>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_TIM_PWM_Start+0x164>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_TIM_PWM_Start+0x122>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d00e      	beq.n	80056ae <HAL_TIM_PWM_Start+0x122>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <HAL_TIM_PWM_Start+0x168>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_TIM_PWM_Start+0x122>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <HAL_TIM_PWM_Start+0x16c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_TIM_PWM_Start+0x122>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a14      	ldr	r2, [pc, #80]	; (80056fc <HAL_TIM_PWM_Start+0x170>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <HAL_TIM_PWM_Start+0x146>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d010      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x156>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e007      	b.n	80056e2 <HAL_TIM_PWM_Start+0x156>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40013400 	.word	0x40013400
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00

08005700 <HAL_TIM_Encoder_Init>:
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_TIM_Encoder_Init+0x14>
 8005710:	2301      	movs	r3, #1
 8005712:	e093      	b.n	800583c <HAL_TIM_Encoder_Init+0x13c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_TIM_Encoder_Init+0x2e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fd feb9 	bl	80034a0 <HAL_TIM_Encoder_MspInit>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005744:	f023 0307 	bic.w	r3, r3, #7
 8005748:	6093      	str	r3, [r2, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f000 fbbb 	bl	8005ed0 <TIM_Base_SetConfig>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	4313      	orrs	r3, r2
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057a0:	f023 030c 	bic.w	r3, r3, #12
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	4313      	orrs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	4313      	orrs	r3, r2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	4313      	orrs	r3, r2
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	619a      	str	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800583a:	2300      	movs	r3, #0
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_Encoder_Start>:
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800585c:	73bb      	strb	r3, [r7, #14]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005864:	737b      	strb	r3, [r7, #13]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800586c:	733b      	strb	r3, [r7, #12]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d110      	bne.n	8005896 <HAL_TIM_Encoder_Start+0x52>
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d102      	bne.n	8005880 <HAL_TIM_Encoder_Start+0x3c>
 800587a:	7b7b      	ldrb	r3, [r7, #13]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <HAL_TIM_Encoder_Start+0x40>
 8005880:	2301      	movs	r3, #1
 8005882:	e069      	b.n	8005958 <HAL_TIM_Encoder_Start+0x114>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005894:	e031      	b.n	80058fa <HAL_TIM_Encoder_Start+0xb6>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d110      	bne.n	80058be <HAL_TIM_Encoder_Start+0x7a>
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <HAL_TIM_Encoder_Start+0x64>
 80058a2:	7b3b      	ldrb	r3, [r7, #12]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d001      	beq.n	80058ac <HAL_TIM_Encoder_Start+0x68>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e055      	b.n	8005958 <HAL_TIM_Encoder_Start+0x114>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058bc:	e01d      	b.n	80058fa <HAL_TIM_Encoder_Start+0xb6>
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d108      	bne.n	80058d6 <HAL_TIM_Encoder_Start+0x92>
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d105      	bne.n	80058d6 <HAL_TIM_Encoder_Start+0x92>
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d102      	bne.n	80058d6 <HAL_TIM_Encoder_Start+0x92>
 80058d0:	7b3b      	ldrb	r3, [r7, #12]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d001      	beq.n	80058da <HAL_TIM_Encoder_Start+0x96>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e03e      	b.n	8005958 <HAL_TIM_Encoder_Start+0x114>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_TIM_Encoder_Start+0xc4>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b04      	cmp	r3, #4
 8005904:	d008      	beq.n	8005918 <HAL_TIM_Encoder_Start+0xd4>
 8005906:	e00f      	b.n	8005928 <HAL_TIM_Encoder_Start+0xe4>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2201      	movs	r2, #1
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fd99 	bl	8006448 <TIM_CCxChannelCmd>
 8005916:	e016      	b.n	8005946 <HAL_TIM_Encoder_Start+0x102>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2201      	movs	r2, #1
 800591e:	2104      	movs	r1, #4
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fd91 	bl	8006448 <TIM_CCxChannelCmd>
 8005926:	e00e      	b.n	8005946 <HAL_TIM_Encoder_Start+0x102>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2201      	movs	r2, #1
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fd89 	bl	8006448 <TIM_CCxChannelCmd>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	2104      	movs	r1, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fd82 	bl	8006448 <TIM_CCxChannelCmd>
 8005944:	bf00      	nop
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	2300      	movs	r3, #0
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_IRQHandler>:
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b02      	cmp	r3, #2
 8005974:	d122      	bne.n	80059bc <HAL_TIM_IRQHandler+0x5c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d11b      	bne.n	80059bc <HAL_TIM_IRQHandler+0x5c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0202 	mvn.w	r2, #2
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	771a      	strb	r2, [r3, #28]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_IRQHandler+0x4a>
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa78 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 80059a8:	e005      	b.n	80059b6 <HAL_TIM_IRQHandler+0x56>
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa6b 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fa7a 	bl	8005eaa <HAL_TIM_PWM_PulseFinishedCallback>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0xb0>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0xb0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0204 	mvn.w	r2, #4
 80059e0:	611a      	str	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	771a      	strb	r2, [r3, #28]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x9e>
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa4e 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xaa>
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa41 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa50 	bl	8005eaa <HAL_TIM_PWM_PulseFinishedCallback>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x104>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x104>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0208 	mvn.w	r2, #8
 8005a34:	611a      	str	r2, [r3, #16]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	771a      	strb	r2, [r3, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0xf2>
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa24 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0xfe>
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa17 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fa26 	bl	8005eaa <HAL_TIM_PWM_PulseFinishedCallback>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b10      	cmp	r3, #16
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x158>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x158>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0210 	mvn.w	r2, #16
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	771a      	strb	r2, [r3, #28]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x146>
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f9fa 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0x152>
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9ed 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f9fc 	bl	8005eaa <HAL_TIM_PWM_PulseFinishedCallback>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10e      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x184>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x184>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0201 	mvn.w	r2, #1
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9c8 	bl	8005e74 <HAL_TIM_PeriodElapsedCallback>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d10e      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x1b0>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d107      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x1b0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b08:	611a      	str	r2, [r3, #16]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fd86 	bl	800661c <HAL_TIMEx_BreakCallback>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1dc>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1dc>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b34:	611a      	str	r2, [r3, #16]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f9c0 	bl	8005ebc <HAL_TIM_TriggerCallback>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x208>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x208>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0220 	mvn.w	r2, #32
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fd51 	bl	800660a <HAL_TIMEx_CommutCallback>
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_PWM_ConfigChannel>:
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e0ac      	b.n	8005ce4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	f200 809f 	bhi.w	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005cd9 	.word	0x08005cd9
 8005ba8:	08005cd9 	.word	0x08005cd9
 8005bac:	08005cd9 	.word	0x08005cd9
 8005bb0:	08005c15 	.word	0x08005c15
 8005bb4:	08005cd9 	.word	0x08005cd9
 8005bb8:	08005cd9 	.word	0x08005cd9
 8005bbc:	08005cd9 	.word	0x08005cd9
 8005bc0:	08005c57 	.word	0x08005c57
 8005bc4:	08005cd9 	.word	0x08005cd9
 8005bc8:	08005cd9 	.word	0x08005cd9
 8005bcc:	08005cd9 	.word	0x08005cd9
 8005bd0:	08005c97 	.word	0x08005c97
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f9f2 	bl	8005fc4 <TIM_OC1_SetConfig>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0208 	orr.w	r2, r2, #8
 8005bee:	619a      	str	r2, [r3, #24]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0204 	bic.w	r2, r2, #4
 8005bfe:	619a      	str	r2, [r3, #24]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6999      	ldr	r1, [r3, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	619a      	str	r2, [r3, #24]
 8005c12:	e062      	b.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fa42 	bl	80060a4 <TIM_OC2_SetConfig>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2e:	619a      	str	r2, [r3, #24]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3e:	619a      	str	r2, [r3, #24]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6999      	ldr	r1, [r3, #24]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	619a      	str	r2, [r3, #24]
 8005c54:	e041      	b.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fa95 	bl	800618c <TIM_OC3_SetConfig>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0208 	orr.w	r2, r2, #8
 8005c70:	61da      	str	r2, [r3, #28]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0204 	bic.w	r2, r2, #4
 8005c80:	61da      	str	r2, [r3, #28]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69d9      	ldr	r1, [r3, #28]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	61da      	str	r2, [r3, #28]
 8005c94:	e021      	b.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fae9 	bl	8006274 <TIM_OC4_SetConfig>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb0:	61da      	str	r2, [r3, #28]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc0:	61da      	str	r2, [r3, #28]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69d9      	ldr	r1, [r3, #28]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	021a      	lsls	r2, r3, #8
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	61da      	str	r2, [r3, #28]
 8005cd6:	e000      	b.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005cd8:	bf00      	nop
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIM_ConfigClockSource>:
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_TIM_ConfigClockSource+0x18>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e0b3      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x180>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3c:	d03e      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0xd0>
 8005d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d42:	f200 8087 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4a:	f000 8085 	beq.w	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d87f      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d54:	2b70      	cmp	r3, #112	; 0x70
 8005d56:	d01a      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0xa2>
 8005d58:	2b70      	cmp	r3, #112	; 0x70
 8005d5a:	d87b      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d5c:	2b60      	cmp	r3, #96	; 0x60
 8005d5e:	d050      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x116>
 8005d60:	2b60      	cmp	r3, #96	; 0x60
 8005d62:	d877      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d64:	2b50      	cmp	r3, #80	; 0x50
 8005d66:	d03c      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0xf6>
 8005d68:	2b50      	cmp	r3, #80	; 0x50
 8005d6a:	d873      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d058      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x136>
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d86f      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d74:	2b30      	cmp	r3, #48	; 0x30
 8005d76:	d064      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x156>
 8005d78:	2b30      	cmp	r3, #48	; 0x30
 8005d7a:	d86b      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d060      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x156>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d867      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d05c      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x156>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d05a      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x156>
 8005d8c:	e062      	b.n	8005e54 <HAL_TIM_ConfigClockSource+0x168>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f000 fb34 	bl	800640a <TIM_ETR_SetConfig>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	609a      	str	r2, [r3, #8]
 8005dba:	e04e      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6899      	ldr	r1, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f000 fb1d 	bl	800640a <TIM_ETR_SetConfig>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	e03b      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 fa94 	bl	800631c <TIM_TI1_ConfigInputStage>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2150      	movs	r1, #80	; 0x50
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 faeb 	bl	80063d6 <TIM_ITRx_SetConfig>
 8005e00:	e02b      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6859      	ldr	r1, [r3, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f000 fab2 	bl	8006378 <TIM_TI2_ConfigInputStage>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2160      	movs	r1, #96	; 0x60
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fadb 	bl	80063d6 <TIM_ITRx_SetConfig>
 8005e20:	e01b      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6859      	ldr	r1, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f000 fa74 	bl	800631c <TIM_TI1_ConfigInputStage>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2140      	movs	r1, #64	; 0x40
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 facb 	bl	80063d6 <TIM_ITRx_SetConfig>
 8005e40:	e00b      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f000 fac2 	bl	80063d6 <TIM_ITRx_SetConfig>
 8005e52:	e002      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005e54:	bf00      	nop
 8005e56:	e000      	b.n	8005e5a <HAL_TIM_ConfigClockSource+0x16e>
 8005e58:	bf00      	nop
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_TIM_PeriodElapsedCallback>:
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIM_IC_CaptureCallback>:
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <HAL_TIM_PWM_PulseFinishedCallback>:
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_TriggerCallback>:
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
	...

08005ed0 <TIM_Base_SetConfig>:
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <TIM_Base_SetConfig+0xe0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a32      	ldr	r2, [pc, #200]	; (8005fb4 <TIM_Base_SetConfig+0xe4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00f      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef6:	d00b      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <TIM_Base_SetConfig+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <TIM_Base_SetConfig+0xec>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <TIM_Base_SetConfig+0xf0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d108      	bne.n	8005f22 <TIM_Base_SetConfig+0x52>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <TIM_Base_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <TIM_Base_SetConfig+0x82>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <TIM_Base_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00f      	beq.n	8005f52 <TIM_Base_SetConfig+0x82>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d00b      	beq.n	8005f52 <TIM_Base_SetConfig+0x82>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1e      	ldr	r2, [pc, #120]	; (8005fb8 <TIM_Base_SetConfig+0xe8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <TIM_Base_SetConfig+0x82>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1d      	ldr	r2, [pc, #116]	; (8005fbc <TIM_Base_SetConfig+0xec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_Base_SetConfig+0x82>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1c      	ldr	r2, [pc, #112]	; (8005fc0 <TIM_Base_SetConfig+0xf0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <TIM_Base_SetConfig+0x94>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <TIM_Base_SetConfig+0xe0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0xc8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <TIM_Base_SetConfig+0xe4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d103      	bne.n	8005fa0 <TIM_Base_SetConfig+0xd0>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	615a      	str	r2, [r3, #20]
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800
 8005fc0:	40000c00 	.word	0x40000c00

08005fc4 <TIM_OC1_SetConfig>:
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0302 	bic.w	r3, r3, #2
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a20      	ldr	r2, [pc, #128]	; (800609c <TIM_OC1_SetConfig+0xd8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC1_SetConfig+0x64>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <TIM_OC1_SetConfig+0xdc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0x7e>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a15      	ldr	r2, [pc, #84]	; (800609c <TIM_OC1_SetConfig+0xd8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_OC1_SetConfig+0x8e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <TIM_OC1_SetConfig+0xdc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <TIM_OC1_SetConfig+0xb2>
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	; 0x34
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40013400 	.word	0x40013400

080060a4 <TIM_OC2_SetConfig>:
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	621a      	str	r2, [r3, #32]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0320 	bic.w	r3, r3, #32
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a21      	ldr	r2, [pc, #132]	; (8006184 <TIM_OC2_SetConfig+0xe0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC2_SetConfig+0x68>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a20      	ldr	r2, [pc, #128]	; (8006188 <TIM_OC2_SetConfig+0xe4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10d      	bne.n	8006128 <TIM_OC2_SetConfig+0x84>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a16      	ldr	r2, [pc, #88]	; (8006184 <TIM_OC2_SetConfig+0xe0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC2_SetConfig+0x94>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <TIM_OC2_SetConfig+0xe4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d113      	bne.n	8006160 <TIM_OC2_SetConfig+0xbc>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	619a      	str	r2, [r3, #24]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400

0800618c <TIM_OC3_SetConfig>:
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_OC3_SetConfig+0x66>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10d      	bne.n	800620e <TIM_OC3_SetConfig+0x82>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a16      	ldr	r2, [pc, #88]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0x92>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xba>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	; 0x3c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40013400 	.word	0x40013400

08006274 <TIM_OC4_SetConfig>:
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	031b      	lsls	r3, r3, #12
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a11      	ldr	r2, [pc, #68]	; (8006314 <TIM_OC4_SetConfig+0xa0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x68>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <TIM_OC4_SetConfig+0xa4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d109      	bne.n	80062f0 <TIM_OC4_SetConfig+0x7c>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40013400 	.word	0x40013400

0800631c <TIM_TI1_ConfigInputStage>:
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 030a 	bic.w	r3, r3, #10
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	619a      	str	r2, [r3, #24]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <TIM_TI2_ConfigInputStage>:
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 0210 	bic.w	r2, r3, #16
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	031b      	lsls	r3, r3, #12
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	619a      	str	r2, [r3, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	621a      	str	r2, [r3, #32]
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <TIM_ITRx_SetConfig>:
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f043 0307 	orr.w	r3, r3, #7
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <TIM_ETR_SetConfig>:
 800640a:	b480      	push	{r7}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	021a      	lsls	r2, r3, #8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	431a      	orrs	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	609a      	str	r2, [r3, #8]
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <TIM_CCxChannelCmd>:
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	2201      	movs	r2, #1
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1a      	ldr	r2, [r3, #32]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	43db      	mvns	r3, r3
 800646a:	401a      	ands	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	621a      	str	r2, [r3, #32]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1a      	ldr	r2, [r3, #32]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	fa01 f303 	lsl.w	r3, r1, r3
 8006480:	431a      	orrs	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e050      	b.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d00e      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a12      	ldr	r2, [pc, #72]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d10c      	bne.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4313      	orrs	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	609a      	str	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006548:	2300      	movs	r3, #0
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800
 8006564:	40000c00 	.word	0x40000c00

08006568 <HAL_TIMEx_ConfigBreakDeadTime>:
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006580:	2302      	movs	r3, #2
 8006582:	e03d      	b.n	8006600 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	645a      	str	r2, [r3, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065fe:	2300      	movs	r3, #0
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <HAL_TIMEx_CommutCallback>:
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_BreakCallback>:
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <HAL_UART_Init>:
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_UART_Init+0x12>
 800663c:	2301      	movs	r3, #1
 800663e:	e03f      	b.n	80066c0 <HAL_UART_Init+0x92>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_UART_Init+0x2c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fd f869 	bl	800372c <HAL_UART_MspInit>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2224      	movs	r2, #36	; 0x24
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fab0 	bl	8006bd8 <UART_SetConfig>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006686:	611a      	str	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006696:	615a      	str	r2, [r3, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	641a      	str	r2, [r3, #64]	; 0x40
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066be:	2300      	movs	r3, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Transmit>:
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	80fb      	strh	r3, [r7, #6]
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d17c      	bne.n	80067e2 <HAL_UART_Transmit+0x11a>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_UART_Transmit+0x2c>
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Transmit+0x30>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e075      	b.n	80067e4 <HAL_UART_Transmit+0x11c>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_UART_Transmit+0x3e>
 8006702:	2302      	movs	r3, #2
 8006704:	e06e      	b.n	80067e4 <HAL_UART_Transmit+0x11c>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	641a      	str	r2, [r3, #64]	; 0x40
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2221      	movs	r2, #33	; 0x21
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800671c:	f7fd faa6 	bl	8003c6c <HAL_GetTick>
 8006720:	6178      	str	r0, [r7, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	849a      	strh	r2, [r3, #36]	; 0x24
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	84da      	strh	r2, [r3, #38]	; 0x26
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d108      	bne.n	800674a <HAL_UART_Transmit+0x82>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_UART_Transmit+0x82>
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	e003      	b.n	8006752 <HAL_UART_Transmit+0x8a>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800675a:	e02a      	b.n	80067b2 <HAL_UART_Transmit+0xea>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f946 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <HAL_UART_Transmit+0xae>
 8006772:	2303      	movs	r3, #3
 8006774:	e036      	b.n	80067e4 <HAL_UART_Transmit+0x11c>
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <HAL_UART_Transmit+0xcc>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	3302      	adds	r3, #2
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	e007      	b.n	80067a4 <HAL_UART_Transmit+0xdc>
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	84da      	strh	r2, [r3, #38]	; 0x26
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1cf      	bne.n	800675c <HAL_UART_Transmit+0x94>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2140      	movs	r1, #64	; 0x40
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f916 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_Transmit+0x10e>
 80067d2:	2303      	movs	r3, #3
 80067d4:	e006      	b.n	80067e4 <HAL_UART_Transmit+0x11c>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067de:	2300      	movs	r3, #0
 80067e0:	e000      	b.n	80067e4 <HAL_UART_Transmit+0x11c>
 80067e2:	2302      	movs	r3, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Receive_DMA>:
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b20      	cmp	r3, #32
 8006804:	d11d      	bne.n	8006842 <HAL_UART_Receive_DMA+0x56>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_UART_Receive_DMA+0x26>
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_UART_Receive_DMA+0x2a>
 8006812:	2301      	movs	r3, #1
 8006814:	e016      	b.n	8006844 <HAL_UART_Receive_DMA+0x58>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_UART_Receive_DMA+0x38>
 8006820:	2302      	movs	r3, #2
 8006822:	e00f      	b.n	8006844 <HAL_UART_Receive_DMA+0x58>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	461a      	mov	r2, r3
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f927 	bl	8006a8c <UART_Start_Receive_DMA>
 800683e:	4603      	mov	r3, r0
 8006840:	e000      	b.n	8006844 <HAL_UART_Receive_DMA+0x58>
 8006842:	2302      	movs	r3, #2
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_UART_RxCpltCallback>:
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <HAL_UART_RxHalfCpltCallback>:
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <HAL_UART_ErrorCallback>:
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <HAL_UARTEx_RxEventCallback>:
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	807b      	strh	r3, [r7, #2]
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <UART_DMAReceiveCplt>:
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d12a      	bne.n	800690a <UART_DMAReceiveCplt+0x72>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	85da      	strh	r2, [r3, #46]	; 0x2e
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	615a      	str	r2, [r3, #20]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695a      	ldr	r2, [r3, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e8:	615a      	str	r2, [r3, #20]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <UART_DMAReceiveCplt+0x72>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0210 	bic.w	r2, r2, #16
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	2b01      	cmp	r3, #1
 8006910:	d106      	bne.n	8006920 <UART_DMAReceiveCplt+0x88>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006916:	4619      	mov	r1, r3
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ffb2 	bl	8006882 <HAL_UARTEx_RxEventCallback>
 800691e:	e002      	b.n	8006926 <UART_DMAReceiveCplt+0x8e>
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ff93 	bl	800684c <HAL_UART_RxCpltCallback>
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <UART_DMARxHalfCplt>:
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	2b01      	cmp	r3, #1
 8006942:	d108      	bne.n	8006956 <UART_DMARxHalfCplt+0x28>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	b29b      	uxth	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff97 	bl	8006882 <HAL_UARTEx_RxEventCallback>
 8006954:	e002      	b.n	800695c <UART_DMARxHalfCplt+0x2e>
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ff81 	bl	800685e <HAL_UART_RxHalfCpltCallback>
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <UART_DMAError>:
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b21      	cmp	r3, #33	; 0x21
 8006996:	d108      	bne.n	80069aa <UART_DMAError+0x46>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <UART_DMAError+0x46>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2200      	movs	r2, #0
 80069a2:	84da      	strh	r2, [r3, #38]	; 0x26
 80069a4:	68b8      	ldr	r0, [r7, #8]
 80069a6:	f000 f8d5 	bl	8006b54 <UART_EndTxTransfer>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b22      	cmp	r3, #34	; 0x22
 80069ca:	d108      	bne.n	80069de <UART_DMAError+0x7a>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <UART_DMAError+0x7a>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2200      	movs	r2, #0
 80069d6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80069d8:	68b8      	ldr	r0, [r7, #8]
 80069da:	f000 f8d0 	bl	8006b7e <UART_EndRxTransfer>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f043 0210 	orr.w	r2, r3, #16
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
 80069ea:	68b8      	ldr	r0, [r7, #8]
 80069ec:	f7ff ff40 	bl	8006870 <HAL_UART_ErrorCallback>
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_WaitOnFlagUntilTimeout>:
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	71fb      	strb	r3, [r7, #7]
 8006a08:	e02c      	b.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x6c>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d028      	beq.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x6c>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a18:	f7fd f928 	bl	8003c6c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d21d      	bcs.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x6c>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a36:	60da      	str	r2, [r3, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0201 	bic.w	r2, r2, #1
 8006a46:	615a      	str	r2, [r3, #20]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a60:	2303      	movs	r3, #3
 8006a62:	e00f      	b.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8c>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	bf0c      	ite	eq
 8006a74:	2301      	moveq	r3, #1
 8006a76:	2300      	movne	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d0c3      	beq.n	8006a0a <UART_WaitOnFlagUntilTimeout+0x12>
 8006a82:	2300      	movs	r3, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_Start_Receive_DMA>:
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2222      	movs	r2, #34	; 0x22
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	4a23      	ldr	r2, [pc, #140]	; (8006b48 <UART_Start_Receive_DMA+0xbc>)
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <UART_Start_Receive_DMA+0xc0>)
 8006ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	4a21      	ldr	r2, [pc, #132]	; (8006b50 <UART_Start_Receive_DMA+0xc4>)
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	635a      	str	r2, [r3, #52]	; 0x34
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	f7fd fa70 	bl	8003fd0 <HAL_DMA_Start_IT>
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	695a      	ldr	r2, [r3, #20]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	615a      	str	r2, [r3, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3c:	615a      	str	r2, [r3, #20]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	08006899 	.word	0x08006899
 8006b4c:	0800692f 	.word	0x0800692f
 8006b50:	08006965 	.word	0x08006965

08006b54 <UART_EndTxTransfer>:
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <UART_EndRxTransfer>:
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	615a      	str	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d107      	bne.n	8006bbe <UART_EndRxTransfer+0x40>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0210 	bic.w	r2, r2, #16
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
	...

08006bd8 <UART_SetConfig>:
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	611a      	str	r2, [r3, #16]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c12:	f023 030c 	bic.w	r3, r3, #12
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	60d3      	str	r3, [r2, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	615a      	str	r2, [r3, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2c      	ldr	r2, [pc, #176]	; (8006cec <UART_SetConfig+0x114>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d103      	bne.n	8006c48 <UART_SetConfig+0x70>
 8006c40:	f7fe fb6a 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	e002      	b.n	8006c4e <UART_SetConfig+0x76>
 8006c48:	f7fe fb52 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009a      	lsls	r2, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <UART_SetConfig+0x118>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	0119      	lsls	r1, r3, #4
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009a      	lsls	r2, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <UART_SetConfig+0x118>)
 8006c86:	fba3 0302 	umull	r0, r3, r3, r2
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2064      	movs	r0, #100	; 0x64
 8006c8e:	fb00 f303 	mul.w	r3, r0, r3
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	3332      	adds	r3, #50	; 0x32
 8006c98:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <UART_SetConfig+0x118>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ca4:	4419      	add	r1, r3
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009a      	lsls	r2, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <UART_SetConfig+0x118>)
 8006cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2064      	movs	r0, #100	; 0x64
 8006cc6:	fb00 f303 	mul.w	r3, r0, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	3332      	adds	r3, #50	; 0x32
 8006cd0:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <UART_SetConfig+0x118>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	f003 020f 	and.w	r2, r3, #15
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40013800 	.word	0x40013800
 8006cf0:	51eb851f 	.word	0x51eb851f

08006cf4 <__assert_func>:
 8006cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <__assert_func+0x2c>)
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68d8      	ldr	r0, [r3, #12]
 8006d02:	b14c      	cbz	r4, 8006d18 <__assert_func+0x24>
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <__assert_func+0x30>)
 8006d06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d0a:	9100      	str	r1, [sp, #0]
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	4906      	ldr	r1, [pc, #24]	; (8006d28 <__assert_func+0x34>)
 8006d10:	f000 f814 	bl	8006d3c <fiprintf>
 8006d14:	f000 fbfe 	bl	8007514 <abort>
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <__assert_func+0x38>)
 8006d1a:	461c      	mov	r4, r3
 8006d1c:	e7f3      	b.n	8006d06 <__assert_func+0x12>
 8006d1e:	bf00      	nop
 8006d20:	20000010 	.word	0x20000010
 8006d24:	08008ec4 	.word	0x08008ec4
 8006d28:	08008ed1 	.word	0x08008ed1
 8006d2c:	08008eff 	.word	0x08008eff

08006d30 <__errno>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <__errno+0x8>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000010 	.word	0x20000010

08006d3c <fiprintf>:
 8006d3c:	b40e      	push	{r1, r2, r3}
 8006d3e:	b503      	push	{r0, r1, lr}
 8006d40:	4601      	mov	r1, r0
 8006d42:	ab03      	add	r3, sp, #12
 8006d44:	4805      	ldr	r0, [pc, #20]	; (8006d5c <fiprintf+0x20>)
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	f000 f85b 	bl	8006e08 <_vfiprintf_r>
 8006d52:	b002      	add	sp, #8
 8006d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d58:	b003      	add	sp, #12
 8006d5a:	4770      	bx	lr
 8006d5c:	20000010 	.word	0x20000010

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	2600      	movs	r6, #0
 8006d64:	4d0c      	ldr	r5, [pc, #48]	; (8006d98 <__libc_init_array+0x38>)
 8006d66:	4c0d      	ldr	r4, [pc, #52]	; (8006d9c <__libc_init_array+0x3c>)
 8006d68:	1b64      	subs	r4, r4, r5
 8006d6a:	10a4      	asrs	r4, r4, #2
 8006d6c:	42a6      	cmp	r6, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	f002 f850 	bl	8008e14 <_init>
 8006d74:	2600      	movs	r6, #0
 8006d76:	4d0a      	ldr	r5, [pc, #40]	; (8006da0 <__libc_init_array+0x40>)
 8006d78:	4c0a      	ldr	r4, [pc, #40]	; (8006da4 <__libc_init_array+0x44>)
 8006d7a:	1b64      	subs	r4, r4, r5
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	42a6      	cmp	r6, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d88:	4798      	blx	r3
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d92:	4798      	blx	r3
 8006d94:	3601      	adds	r6, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	08009170 	.word	0x08009170
 8006d9c:	08009170 	.word	0x08009170
 8006da0:	08009170 	.word	0x08009170
 8006da4:	08009174 	.word	0x08009174

08006da8 <memset>:
 8006da8:	4603      	mov	r3, r0
 8006daa:	4402      	add	r2, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <__sfputc_r>:
 8006db8:	6893      	ldr	r3, [r2, #8]
 8006dba:	b410      	push	{r4}
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	6093      	str	r3, [r2, #8]
 8006dc2:	da07      	bge.n	8006dd4 <__sfputc_r+0x1c>
 8006dc4:	6994      	ldr	r4, [r2, #24]
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	db01      	blt.n	8006dce <__sfputc_r+0x16>
 8006dca:	290a      	cmp	r1, #10
 8006dcc:	d102      	bne.n	8006dd4 <__sfputc_r+0x1c>
 8006dce:	bc10      	pop	{r4}
 8006dd0:	f000 bae0 	b.w	8007394 <__swbuf_r>
 8006dd4:	6813      	ldr	r3, [r2, #0]
 8006dd6:	1c58      	adds	r0, r3, #1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	bc10      	pop	{r4}
 8006de0:	4770      	bx	lr

08006de2 <__sfputs_r>:
 8006de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de4:	4606      	mov	r6, r0
 8006de6:	460f      	mov	r7, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	18d5      	adds	r5, r2, r3
 8006dec:	42ac      	cmp	r4, r5
 8006dee:	d101      	bne.n	8006df4 <__sfputs_r+0x12>
 8006df0:	2000      	movs	r0, #0
 8006df2:	e007      	b.n	8006e04 <__sfputs_r+0x22>
 8006df4:	463a      	mov	r2, r7
 8006df6:	4630      	mov	r0, r6
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	f7ff ffdc 	bl	8006db8 <__sfputc_r>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d1f3      	bne.n	8006dec <__sfputs_r+0xa>
 8006e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e08 <_vfiprintf_r>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	4614      	mov	r4, r2
 8006e10:	4698      	mov	r8, r3
 8006e12:	4606      	mov	r6, r0
 8006e14:	b09d      	sub	sp, #116	; 0x74
 8006e16:	b118      	cbz	r0, 8006e20 <_vfiprintf_r+0x18>
 8006e18:	6983      	ldr	r3, [r0, #24]
 8006e1a:	b90b      	cbnz	r3, 8006e20 <_vfiprintf_r+0x18>
 8006e1c:	f000 fc98 	bl	8007750 <__sinit>
 8006e20:	4b89      	ldr	r3, [pc, #548]	; (8007048 <_vfiprintf_r+0x240>)
 8006e22:	429d      	cmp	r5, r3
 8006e24:	d11b      	bne.n	8006e5e <_vfiprintf_r+0x56>
 8006e26:	6875      	ldr	r5, [r6, #4]
 8006e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x32>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x32>
 8006e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e36:	f000 fd29 	bl	800788c <__retarget_lock_acquire_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d501      	bpl.n	8006e44 <_vfiprintf_r+0x3c>
 8006e40:	692b      	ldr	r3, [r5, #16]
 8006e42:	b9eb      	cbnz	r3, 8006e80 <_vfiprintf_r+0x78>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 faf6 	bl	8007438 <__swsetup_r>
 8006e4c:	b1c0      	cbz	r0, 8006e80 <_vfiprintf_r+0x78>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e50:	07dc      	lsls	r4, r3, #31
 8006e52:	d50e      	bpl.n	8006e72 <_vfiprintf_r+0x6a>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b01d      	add	sp, #116	; 0x74
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	4b7b      	ldr	r3, [pc, #492]	; (800704c <_vfiprintf_r+0x244>)
 8006e60:	429d      	cmp	r5, r3
 8006e62:	d101      	bne.n	8006e68 <_vfiprintf_r+0x60>
 8006e64:	68b5      	ldr	r5, [r6, #8]
 8006e66:	e7df      	b.n	8006e28 <_vfiprintf_r+0x20>
 8006e68:	4b79      	ldr	r3, [pc, #484]	; (8007050 <_vfiprintf_r+0x248>)
 8006e6a:	429d      	cmp	r5, r3
 8006e6c:	bf08      	it	eq
 8006e6e:	68f5      	ldreq	r5, [r6, #12]
 8006e70:	e7da      	b.n	8006e28 <_vfiprintf_r+0x20>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	0598      	lsls	r0, r3, #22
 8006e76:	d4ed      	bmi.n	8006e54 <_vfiprintf_r+0x4c>
 8006e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e7a:	f000 fd08 	bl	800788e <__retarget_lock_release_recursive>
 8006e7e:	e7e9      	b.n	8006e54 <_vfiprintf_r+0x4c>
 8006e80:	2300      	movs	r3, #0
 8006e82:	9309      	str	r3, [sp, #36]	; 0x24
 8006e84:	2320      	movs	r3, #32
 8006e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e8a:	2330      	movs	r3, #48	; 0x30
 8006e8c:	f04f 0901 	mov.w	r9, #1
 8006e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007054 <_vfiprintf_r+0x24c>
 8006e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	469a      	mov	sl, r3
 8006ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea4:	b10a      	cbz	r2, 8006eaa <_vfiprintf_r+0xa2>
 8006ea6:	2a25      	cmp	r2, #37	; 0x25
 8006ea8:	d1f9      	bne.n	8006e9e <_vfiprintf_r+0x96>
 8006eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8006eae:	d00b      	beq.n	8006ec8 <_vfiprintf_r+0xc0>
 8006eb0:	465b      	mov	r3, fp
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff93 	bl	8006de2 <__sfputs_r>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f000 80aa 	beq.w	8007016 <_vfiprintf_r+0x20e>
 8006ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec4:	445a      	add	r2, fp
 8006ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80a2 	beq.w	8007016 <_vfiprintf_r+0x20e>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006edc:	f10a 0a01 	add.w	sl, sl, #1
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	9307      	str	r3, [sp, #28]
 8006ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eea:	4654      	mov	r4, sl
 8006eec:	2205      	movs	r2, #5
 8006eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef2:	4858      	ldr	r0, [pc, #352]	; (8007054 <_vfiprintf_r+0x24c>)
 8006ef4:	f000 fd32 	bl	800795c <memchr>
 8006ef8:	9a04      	ldr	r2, [sp, #16]
 8006efa:	b9d8      	cbnz	r0, 8006f34 <_vfiprintf_r+0x12c>
 8006efc:	06d1      	lsls	r1, r2, #27
 8006efe:	bf44      	itt	mi
 8006f00:	2320      	movmi	r3, #32
 8006f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f06:	0713      	lsls	r3, r2, #28
 8006f08:	bf44      	itt	mi
 8006f0a:	232b      	movmi	r3, #43	; 0x2b
 8006f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f10:	f89a 3000 	ldrb.w	r3, [sl]
 8006f14:	2b2a      	cmp	r3, #42	; 0x2a
 8006f16:	d015      	beq.n	8006f44 <_vfiprintf_r+0x13c>
 8006f18:	4654      	mov	r4, sl
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	f04f 0c0a 	mov.w	ip, #10
 8006f20:	9a07      	ldr	r2, [sp, #28]
 8006f22:	4621      	mov	r1, r4
 8006f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f28:	3b30      	subs	r3, #48	; 0x30
 8006f2a:	2b09      	cmp	r3, #9
 8006f2c:	d94e      	bls.n	8006fcc <_vfiprintf_r+0x1c4>
 8006f2e:	b1b0      	cbz	r0, 8006f5e <_vfiprintf_r+0x156>
 8006f30:	9207      	str	r2, [sp, #28]
 8006f32:	e014      	b.n	8006f5e <_vfiprintf_r+0x156>
 8006f34:	eba0 0308 	sub.w	r3, r0, r8
 8006f38:	fa09 f303 	lsl.w	r3, r9, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	46a2      	mov	sl, r4
 8006f40:	9304      	str	r3, [sp, #16]
 8006f42:	e7d2      	b.n	8006eea <_vfiprintf_r+0xe2>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	1d19      	adds	r1, r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	9103      	str	r1, [sp, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfbb      	ittet	lt
 8006f50:	425b      	neglt	r3, r3
 8006f52:	f042 0202 	orrlt.w	r2, r2, #2
 8006f56:	9307      	strge	r3, [sp, #28]
 8006f58:	9307      	strlt	r3, [sp, #28]
 8006f5a:	bfb8      	it	lt
 8006f5c:	9204      	strlt	r2, [sp, #16]
 8006f5e:	7823      	ldrb	r3, [r4, #0]
 8006f60:	2b2e      	cmp	r3, #46	; 0x2e
 8006f62:	d10c      	bne.n	8006f7e <_vfiprintf_r+0x176>
 8006f64:	7863      	ldrb	r3, [r4, #1]
 8006f66:	2b2a      	cmp	r3, #42	; 0x2a
 8006f68:	d135      	bne.n	8006fd6 <_vfiprintf_r+0x1ce>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	3402      	adds	r4, #2
 8006f6e:	1d1a      	adds	r2, r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	9203      	str	r2, [sp, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bfb8      	it	lt
 8006f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007058 <_vfiprintf_r+0x250>
 8006f82:	2203      	movs	r2, #3
 8006f84:	4650      	mov	r0, sl
 8006f86:	7821      	ldrb	r1, [r4, #0]
 8006f88:	f000 fce8 	bl	800795c <memchr>
 8006f8c:	b140      	cbz	r0, 8006fa0 <_vfiprintf_r+0x198>
 8006f8e:	2340      	movs	r3, #64	; 0x40
 8006f90:	eba0 000a 	sub.w	r0, r0, sl
 8006f94:	fa03 f000 	lsl.w	r0, r3, r0
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	4303      	orrs	r3, r0
 8006f9e:	9304      	str	r3, [sp, #16]
 8006fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa4:	2206      	movs	r2, #6
 8006fa6:	482d      	ldr	r0, [pc, #180]	; (800705c <_vfiprintf_r+0x254>)
 8006fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fac:	f000 fcd6 	bl	800795c <memchr>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d03f      	beq.n	8007034 <_vfiprintf_r+0x22c>
 8006fb4:	4b2a      	ldr	r3, [pc, #168]	; (8007060 <_vfiprintf_r+0x258>)
 8006fb6:	bb1b      	cbnz	r3, 8007000 <_vfiprintf_r+0x1f8>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	3307      	adds	r3, #7
 8006fbc:	f023 0307 	bic.w	r3, r3, #7
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	443b      	add	r3, r7
 8006fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fca:	e767      	b.n	8006e9c <_vfiprintf_r+0x94>
 8006fcc:	460c      	mov	r4, r1
 8006fce:	2001      	movs	r0, #1
 8006fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd4:	e7a5      	b.n	8006f22 <_vfiprintf_r+0x11a>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f04f 0c0a 	mov.w	ip, #10
 8006fdc:	4619      	mov	r1, r3
 8006fde:	3401      	adds	r4, #1
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe8:	3a30      	subs	r2, #48	; 0x30
 8006fea:	2a09      	cmp	r2, #9
 8006fec:	d903      	bls.n	8006ff6 <_vfiprintf_r+0x1ee>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0c5      	beq.n	8006f7e <_vfiprintf_r+0x176>
 8006ff2:	9105      	str	r1, [sp, #20]
 8006ff4:	e7c3      	b.n	8006f7e <_vfiprintf_r+0x176>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ffe:	e7f0      	b.n	8006fe2 <_vfiprintf_r+0x1da>
 8007000:	ab03      	add	r3, sp, #12
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	462a      	mov	r2, r5
 8007006:	4630      	mov	r0, r6
 8007008:	4b16      	ldr	r3, [pc, #88]	; (8007064 <_vfiprintf_r+0x25c>)
 800700a:	a904      	add	r1, sp, #16
 800700c:	f3af 8000 	nop.w
 8007010:	4607      	mov	r7, r0
 8007012:	1c78      	adds	r0, r7, #1
 8007014:	d1d6      	bne.n	8006fc4 <_vfiprintf_r+0x1bc>
 8007016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007018:	07d9      	lsls	r1, r3, #31
 800701a:	d405      	bmi.n	8007028 <_vfiprintf_r+0x220>
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	059a      	lsls	r2, r3, #22
 8007020:	d402      	bmi.n	8007028 <_vfiprintf_r+0x220>
 8007022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007024:	f000 fc33 	bl	800788e <__retarget_lock_release_recursive>
 8007028:	89ab      	ldrh	r3, [r5, #12]
 800702a:	065b      	lsls	r3, r3, #25
 800702c:	f53f af12 	bmi.w	8006e54 <_vfiprintf_r+0x4c>
 8007030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007032:	e711      	b.n	8006e58 <_vfiprintf_r+0x50>
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4630      	mov	r0, r6
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <_vfiprintf_r+0x25c>)
 800703e:	a904      	add	r1, sp, #16
 8007040:	f000 f882 	bl	8007148 <_printf_i>
 8007044:	e7e4      	b.n	8007010 <_vfiprintf_r+0x208>
 8007046:	bf00      	nop
 8007048:	08008f58 	.word	0x08008f58
 800704c:	08008f78 	.word	0x08008f78
 8007050:	08008f38 	.word	0x08008f38
 8007054:	08008f04 	.word	0x08008f04
 8007058:	08008f0a 	.word	0x08008f0a
 800705c:	08008f0e 	.word	0x08008f0e
 8007060:	00000000 	.word	0x00000000
 8007064:	08006de3 	.word	0x08006de3

08007068 <_printf_common>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	4616      	mov	r6, r2
 800706e:	4699      	mov	r9, r3
 8007070:	688a      	ldr	r2, [r1, #8]
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	4607      	mov	r7, r0
 8007076:	4293      	cmp	r3, r2
 8007078:	bfb8      	it	lt
 800707a:	4613      	movlt	r3, r2
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007082:	460c      	mov	r4, r1
 8007084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007088:	b10a      	cbz	r2, 800708e <_printf_common+0x26>
 800708a:	3301      	adds	r3, #1
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	0699      	lsls	r1, r3, #26
 8007092:	bf42      	ittt	mi
 8007094:	6833      	ldrmi	r3, [r6, #0]
 8007096:	3302      	addmi	r3, #2
 8007098:	6033      	strmi	r3, [r6, #0]
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f015 0506 	ands.w	r5, r5, #6
 80070a0:	d106      	bne.n	80070b0 <_printf_common+0x48>
 80070a2:	f104 0a19 	add.w	sl, r4, #25
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	6832      	ldr	r2, [r6, #0]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc28      	bgt.n	8007102 <_printf_common+0x9a>
 80070b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b4:	1e13      	subs	r3, r2, #0
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d42d      	bmi.n	800711c <_printf_common+0xb4>
 80070c0:	4649      	mov	r1, r9
 80070c2:	4638      	mov	r0, r7
 80070c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d020      	beq.n	8007110 <_printf_common+0xa8>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	68e5      	ldr	r5, [r4, #12]
 80070d2:	f003 0306 	and.w	r3, r3, #6
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	bf18      	it	ne
 80070da:	2500      	movne	r5, #0
 80070dc:	6832      	ldr	r2, [r6, #0]
 80070de:	f04f 0600 	mov.w	r6, #0
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	bf08      	it	eq
 80070e6:	1aad      	subeq	r5, r5, r2
 80070e8:	6922      	ldr	r2, [r4, #16]
 80070ea:	bf08      	it	eq
 80070ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f0:	4293      	cmp	r3, r2
 80070f2:	bfc4      	itt	gt
 80070f4:	1a9b      	subgt	r3, r3, r2
 80070f6:	18ed      	addgt	r5, r5, r3
 80070f8:	341a      	adds	r4, #26
 80070fa:	42b5      	cmp	r5, r6
 80070fc:	d11a      	bne.n	8007134 <_printf_common+0xcc>
 80070fe:	2000      	movs	r0, #0
 8007100:	e008      	b.n	8007114 <_printf_common+0xac>
 8007102:	2301      	movs	r3, #1
 8007104:	4652      	mov	r2, sl
 8007106:	4649      	mov	r1, r9
 8007108:	4638      	mov	r0, r7
 800710a:	47c0      	blx	r8
 800710c:	3001      	adds	r0, #1
 800710e:	d103      	bne.n	8007118 <_printf_common+0xb0>
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	3501      	adds	r5, #1
 800711a:	e7c4      	b.n	80070a6 <_printf_common+0x3e>
 800711c:	2030      	movs	r0, #48	; 0x30
 800711e:	18e1      	adds	r1, r4, r3
 8007120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800712a:	4422      	add	r2, r4
 800712c:	3302      	adds	r3, #2
 800712e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007132:	e7c5      	b.n	80070c0 <_printf_common+0x58>
 8007134:	2301      	movs	r3, #1
 8007136:	4622      	mov	r2, r4
 8007138:	4649      	mov	r1, r9
 800713a:	4638      	mov	r0, r7
 800713c:	47c0      	blx	r8
 800713e:	3001      	adds	r0, #1
 8007140:	d0e6      	beq.n	8007110 <_printf_common+0xa8>
 8007142:	3601      	adds	r6, #1
 8007144:	e7d9      	b.n	80070fa <_printf_common+0x92>
	...

08007148 <_printf_i>:
 8007148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	7e0f      	ldrb	r7, [r1, #24]
 800714e:	4691      	mov	r9, r2
 8007150:	2f78      	cmp	r7, #120	; 0x78
 8007152:	4680      	mov	r8, r0
 8007154:	460c      	mov	r4, r1
 8007156:	469a      	mov	sl, r3
 8007158:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800715a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715e:	d807      	bhi.n	8007170 <_printf_i+0x28>
 8007160:	2f62      	cmp	r7, #98	; 0x62
 8007162:	d80a      	bhi.n	800717a <_printf_i+0x32>
 8007164:	2f00      	cmp	r7, #0
 8007166:	f000 80d9 	beq.w	800731c <_printf_i+0x1d4>
 800716a:	2f58      	cmp	r7, #88	; 0x58
 800716c:	f000 80a4 	beq.w	80072b8 <_printf_i+0x170>
 8007170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007178:	e03a      	b.n	80071f0 <_printf_i+0xa8>
 800717a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717e:	2b15      	cmp	r3, #21
 8007180:	d8f6      	bhi.n	8007170 <_printf_i+0x28>
 8007182:	a101      	add	r1, pc, #4	; (adr r1, 8007188 <_printf_i+0x40>)
 8007184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007188:	080071e1 	.word	0x080071e1
 800718c:	080071f5 	.word	0x080071f5
 8007190:	08007171 	.word	0x08007171
 8007194:	08007171 	.word	0x08007171
 8007198:	08007171 	.word	0x08007171
 800719c:	08007171 	.word	0x08007171
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	08007171 	.word	0x08007171
 80071a8:	08007171 	.word	0x08007171
 80071ac:	08007171 	.word	0x08007171
 80071b0:	08007171 	.word	0x08007171
 80071b4:	08007303 	.word	0x08007303
 80071b8:	08007225 	.word	0x08007225
 80071bc:	080072e5 	.word	0x080072e5
 80071c0:	08007171 	.word	0x08007171
 80071c4:	08007171 	.word	0x08007171
 80071c8:	08007325 	.word	0x08007325
 80071cc:	08007171 	.word	0x08007171
 80071d0:	08007225 	.word	0x08007225
 80071d4:	08007171 	.word	0x08007171
 80071d8:	08007171 	.word	0x08007171
 80071dc:	080072ed 	.word	0x080072ed
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	602a      	str	r2, [r5, #0]
 80071e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0a4      	b.n	800733e <_printf_i+0x1f6>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	6829      	ldr	r1, [r5, #0]
 80071f8:	0606      	lsls	r6, r0, #24
 80071fa:	f101 0304 	add.w	r3, r1, #4
 80071fe:	d50a      	bpl.n	8007216 <_printf_i+0xce>
 8007200:	680e      	ldr	r6, [r1, #0]
 8007202:	602b      	str	r3, [r5, #0]
 8007204:	2e00      	cmp	r6, #0
 8007206:	da03      	bge.n	8007210 <_printf_i+0xc8>
 8007208:	232d      	movs	r3, #45	; 0x2d
 800720a:	4276      	negs	r6, r6
 800720c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007210:	230a      	movs	r3, #10
 8007212:	485e      	ldr	r0, [pc, #376]	; (800738c <_printf_i+0x244>)
 8007214:	e019      	b.n	800724a <_printf_i+0x102>
 8007216:	680e      	ldr	r6, [r1, #0]
 8007218:	f010 0f40 	tst.w	r0, #64	; 0x40
 800721c:	602b      	str	r3, [r5, #0]
 800721e:	bf18      	it	ne
 8007220:	b236      	sxthne	r6, r6
 8007222:	e7ef      	b.n	8007204 <_printf_i+0xbc>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	6820      	ldr	r0, [r4, #0]
 8007228:	1d19      	adds	r1, r3, #4
 800722a:	6029      	str	r1, [r5, #0]
 800722c:	0601      	lsls	r1, r0, #24
 800722e:	d501      	bpl.n	8007234 <_printf_i+0xec>
 8007230:	681e      	ldr	r6, [r3, #0]
 8007232:	e002      	b.n	800723a <_printf_i+0xf2>
 8007234:	0646      	lsls	r6, r0, #25
 8007236:	d5fb      	bpl.n	8007230 <_printf_i+0xe8>
 8007238:	881e      	ldrh	r6, [r3, #0]
 800723a:	2f6f      	cmp	r7, #111	; 0x6f
 800723c:	bf0c      	ite	eq
 800723e:	2308      	moveq	r3, #8
 8007240:	230a      	movne	r3, #10
 8007242:	4852      	ldr	r0, [pc, #328]	; (800738c <_printf_i+0x244>)
 8007244:	2100      	movs	r1, #0
 8007246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800724a:	6865      	ldr	r5, [r4, #4]
 800724c:	2d00      	cmp	r5, #0
 800724e:	bfa8      	it	ge
 8007250:	6821      	ldrge	r1, [r4, #0]
 8007252:	60a5      	str	r5, [r4, #8]
 8007254:	bfa4      	itt	ge
 8007256:	f021 0104 	bicge.w	r1, r1, #4
 800725a:	6021      	strge	r1, [r4, #0]
 800725c:	b90e      	cbnz	r6, 8007262 <_printf_i+0x11a>
 800725e:	2d00      	cmp	r5, #0
 8007260:	d04d      	beq.n	80072fe <_printf_i+0x1b6>
 8007262:	4615      	mov	r5, r2
 8007264:	fbb6 f1f3 	udiv	r1, r6, r3
 8007268:	fb03 6711 	mls	r7, r3, r1, r6
 800726c:	5dc7      	ldrb	r7, [r0, r7]
 800726e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007272:	4637      	mov	r7, r6
 8007274:	42bb      	cmp	r3, r7
 8007276:	460e      	mov	r6, r1
 8007278:	d9f4      	bls.n	8007264 <_printf_i+0x11c>
 800727a:	2b08      	cmp	r3, #8
 800727c:	d10b      	bne.n	8007296 <_printf_i+0x14e>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	07de      	lsls	r6, r3, #31
 8007282:	d508      	bpl.n	8007296 <_printf_i+0x14e>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	6861      	ldr	r1, [r4, #4]
 8007288:	4299      	cmp	r1, r3
 800728a:	bfde      	ittt	le
 800728c:	2330      	movle	r3, #48	; 0x30
 800728e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007292:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007296:	1b52      	subs	r2, r2, r5
 8007298:	6122      	str	r2, [r4, #16]
 800729a:	464b      	mov	r3, r9
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f8cd a000 	str.w	sl, [sp]
 80072a4:	aa03      	add	r2, sp, #12
 80072a6:	f7ff fedf 	bl	8007068 <_printf_common>
 80072aa:	3001      	adds	r0, #1
 80072ac:	d14c      	bne.n	8007348 <_printf_i+0x200>
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	b004      	add	sp, #16
 80072b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b8:	4834      	ldr	r0, [pc, #208]	; (800738c <_printf_i+0x244>)
 80072ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072be:	6829      	ldr	r1, [r5, #0]
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c6:	6029      	str	r1, [r5, #0]
 80072c8:	061d      	lsls	r5, r3, #24
 80072ca:	d514      	bpl.n	80072f6 <_printf_i+0x1ae>
 80072cc:	07df      	lsls	r7, r3, #31
 80072ce:	bf44      	itt	mi
 80072d0:	f043 0320 	orrmi.w	r3, r3, #32
 80072d4:	6023      	strmi	r3, [r4, #0]
 80072d6:	b91e      	cbnz	r6, 80072e0 <_printf_i+0x198>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	f023 0320 	bic.w	r3, r3, #32
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	2310      	movs	r3, #16
 80072e2:	e7af      	b.n	8007244 <_printf_i+0xfc>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	f043 0320 	orr.w	r3, r3, #32
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	2378      	movs	r3, #120	; 0x78
 80072ee:	4828      	ldr	r0, [pc, #160]	; (8007390 <_printf_i+0x248>)
 80072f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072f4:	e7e3      	b.n	80072be <_printf_i+0x176>
 80072f6:	0659      	lsls	r1, r3, #25
 80072f8:	bf48      	it	mi
 80072fa:	b2b6      	uxthmi	r6, r6
 80072fc:	e7e6      	b.n	80072cc <_printf_i+0x184>
 80072fe:	4615      	mov	r5, r2
 8007300:	e7bb      	b.n	800727a <_printf_i+0x132>
 8007302:	682b      	ldr	r3, [r5, #0]
 8007304:	6826      	ldr	r6, [r4, #0]
 8007306:	1d18      	adds	r0, r3, #4
 8007308:	6961      	ldr	r1, [r4, #20]
 800730a:	6028      	str	r0, [r5, #0]
 800730c:	0635      	lsls	r5, r6, #24
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	d501      	bpl.n	8007316 <_printf_i+0x1ce>
 8007312:	6019      	str	r1, [r3, #0]
 8007314:	e002      	b.n	800731c <_printf_i+0x1d4>
 8007316:	0670      	lsls	r0, r6, #25
 8007318:	d5fb      	bpl.n	8007312 <_printf_i+0x1ca>
 800731a:	8019      	strh	r1, [r3, #0]
 800731c:	2300      	movs	r3, #0
 800731e:	4615      	mov	r5, r2
 8007320:	6123      	str	r3, [r4, #16]
 8007322:	e7ba      	b.n	800729a <_printf_i+0x152>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	2100      	movs	r1, #0
 8007328:	1d1a      	adds	r2, r3, #4
 800732a:	602a      	str	r2, [r5, #0]
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	6862      	ldr	r2, [r4, #4]
 8007330:	4628      	mov	r0, r5
 8007332:	f000 fb13 	bl	800795c <memchr>
 8007336:	b108      	cbz	r0, 800733c <_printf_i+0x1f4>
 8007338:	1b40      	subs	r0, r0, r5
 800733a:	6060      	str	r0, [r4, #4]
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	2300      	movs	r3, #0
 8007342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007346:	e7a8      	b.n	800729a <_printf_i+0x152>
 8007348:	462a      	mov	r2, r5
 800734a:	4649      	mov	r1, r9
 800734c:	4640      	mov	r0, r8
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	47d0      	blx	sl
 8007352:	3001      	adds	r0, #1
 8007354:	d0ab      	beq.n	80072ae <_printf_i+0x166>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	079b      	lsls	r3, r3, #30
 800735a:	d413      	bmi.n	8007384 <_printf_i+0x23c>
 800735c:	68e0      	ldr	r0, [r4, #12]
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	4298      	cmp	r0, r3
 8007362:	bfb8      	it	lt
 8007364:	4618      	movlt	r0, r3
 8007366:	e7a4      	b.n	80072b2 <_printf_i+0x16a>
 8007368:	2301      	movs	r3, #1
 800736a:	4632      	mov	r2, r6
 800736c:	4649      	mov	r1, r9
 800736e:	4640      	mov	r0, r8
 8007370:	47d0      	blx	sl
 8007372:	3001      	adds	r0, #1
 8007374:	d09b      	beq.n	80072ae <_printf_i+0x166>
 8007376:	3501      	adds	r5, #1
 8007378:	68e3      	ldr	r3, [r4, #12]
 800737a:	9903      	ldr	r1, [sp, #12]
 800737c:	1a5b      	subs	r3, r3, r1
 800737e:	42ab      	cmp	r3, r5
 8007380:	dcf2      	bgt.n	8007368 <_printf_i+0x220>
 8007382:	e7eb      	b.n	800735c <_printf_i+0x214>
 8007384:	2500      	movs	r5, #0
 8007386:	f104 0619 	add.w	r6, r4, #25
 800738a:	e7f5      	b.n	8007378 <_printf_i+0x230>
 800738c:	08008f15 	.word	0x08008f15
 8007390:	08008f26 	.word	0x08008f26

08007394 <__swbuf_r>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	460e      	mov	r6, r1
 8007398:	4614      	mov	r4, r2
 800739a:	4605      	mov	r5, r0
 800739c:	b118      	cbz	r0, 80073a6 <__swbuf_r+0x12>
 800739e:	6983      	ldr	r3, [r0, #24]
 80073a0:	b90b      	cbnz	r3, 80073a6 <__swbuf_r+0x12>
 80073a2:	f000 f9d5 	bl	8007750 <__sinit>
 80073a6:	4b21      	ldr	r3, [pc, #132]	; (800742c <__swbuf_r+0x98>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d12b      	bne.n	8007404 <__swbuf_r+0x70>
 80073ac:	686c      	ldr	r4, [r5, #4]
 80073ae:	69a3      	ldr	r3, [r4, #24]
 80073b0:	60a3      	str	r3, [r4, #8]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	071a      	lsls	r2, r3, #28
 80073b6:	d52f      	bpl.n	8007418 <__swbuf_r+0x84>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	b36b      	cbz	r3, 8007418 <__swbuf_r+0x84>
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	6820      	ldr	r0, [r4, #0]
 80073c0:	b2f6      	uxtb	r6, r6
 80073c2:	1ac0      	subs	r0, r0, r3
 80073c4:	6963      	ldr	r3, [r4, #20]
 80073c6:	4637      	mov	r7, r6
 80073c8:	4283      	cmp	r3, r0
 80073ca:	dc04      	bgt.n	80073d6 <__swbuf_r+0x42>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f92a 	bl	8007628 <_fflush_r>
 80073d4:	bb30      	cbnz	r0, 8007424 <__swbuf_r+0x90>
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	3001      	adds	r0, #1
 80073da:	3b01      	subs	r3, #1
 80073dc:	60a3      	str	r3, [r4, #8]
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	6022      	str	r2, [r4, #0]
 80073e4:	701e      	strb	r6, [r3, #0]
 80073e6:	6963      	ldr	r3, [r4, #20]
 80073e8:	4283      	cmp	r3, r0
 80073ea:	d004      	beq.n	80073f6 <__swbuf_r+0x62>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	07db      	lsls	r3, r3, #31
 80073f0:	d506      	bpl.n	8007400 <__swbuf_r+0x6c>
 80073f2:	2e0a      	cmp	r6, #10
 80073f4:	d104      	bne.n	8007400 <__swbuf_r+0x6c>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 f915 	bl	8007628 <_fflush_r>
 80073fe:	b988      	cbnz	r0, 8007424 <__swbuf_r+0x90>
 8007400:	4638      	mov	r0, r7
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007404:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <__swbuf_r+0x9c>)
 8007406:	429c      	cmp	r4, r3
 8007408:	d101      	bne.n	800740e <__swbuf_r+0x7a>
 800740a:	68ac      	ldr	r4, [r5, #8]
 800740c:	e7cf      	b.n	80073ae <__swbuf_r+0x1a>
 800740e:	4b09      	ldr	r3, [pc, #36]	; (8007434 <__swbuf_r+0xa0>)
 8007410:	429c      	cmp	r4, r3
 8007412:	bf08      	it	eq
 8007414:	68ec      	ldreq	r4, [r5, #12]
 8007416:	e7ca      	b.n	80073ae <__swbuf_r+0x1a>
 8007418:	4621      	mov	r1, r4
 800741a:	4628      	mov	r0, r5
 800741c:	f000 f80c 	bl	8007438 <__swsetup_r>
 8007420:	2800      	cmp	r0, #0
 8007422:	d0cb      	beq.n	80073bc <__swbuf_r+0x28>
 8007424:	f04f 37ff 	mov.w	r7, #4294967295
 8007428:	e7ea      	b.n	8007400 <__swbuf_r+0x6c>
 800742a:	bf00      	nop
 800742c:	08008f58 	.word	0x08008f58
 8007430:	08008f78 	.word	0x08008f78
 8007434:	08008f38 	.word	0x08008f38

08007438 <__swsetup_r>:
 8007438:	4b32      	ldr	r3, [pc, #200]	; (8007504 <__swsetup_r+0xcc>)
 800743a:	b570      	push	{r4, r5, r6, lr}
 800743c:	681d      	ldr	r5, [r3, #0]
 800743e:	4606      	mov	r6, r0
 8007440:	460c      	mov	r4, r1
 8007442:	b125      	cbz	r5, 800744e <__swsetup_r+0x16>
 8007444:	69ab      	ldr	r3, [r5, #24]
 8007446:	b913      	cbnz	r3, 800744e <__swsetup_r+0x16>
 8007448:	4628      	mov	r0, r5
 800744a:	f000 f981 	bl	8007750 <__sinit>
 800744e:	4b2e      	ldr	r3, [pc, #184]	; (8007508 <__swsetup_r+0xd0>)
 8007450:	429c      	cmp	r4, r3
 8007452:	d10f      	bne.n	8007474 <__swsetup_r+0x3c>
 8007454:	686c      	ldr	r4, [r5, #4]
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	d42c      	bmi.n	80074ba <__swsetup_r+0x82>
 8007460:	06dd      	lsls	r5, r3, #27
 8007462:	d411      	bmi.n	8007488 <__swsetup_r+0x50>
 8007464:	2309      	movs	r3, #9
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	e03e      	b.n	80074f2 <__swsetup_r+0xba>
 8007474:	4b25      	ldr	r3, [pc, #148]	; (800750c <__swsetup_r+0xd4>)
 8007476:	429c      	cmp	r4, r3
 8007478:	d101      	bne.n	800747e <__swsetup_r+0x46>
 800747a:	68ac      	ldr	r4, [r5, #8]
 800747c:	e7eb      	b.n	8007456 <__swsetup_r+0x1e>
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <__swsetup_r+0xd8>)
 8007480:	429c      	cmp	r4, r3
 8007482:	bf08      	it	eq
 8007484:	68ec      	ldreq	r4, [r5, #12]
 8007486:	e7e6      	b.n	8007456 <__swsetup_r+0x1e>
 8007488:	0758      	lsls	r0, r3, #29
 800748a:	d512      	bpl.n	80074b2 <__swsetup_r+0x7a>
 800748c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748e:	b141      	cbz	r1, 80074a2 <__swsetup_r+0x6a>
 8007490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007494:	4299      	cmp	r1, r3
 8007496:	d002      	beq.n	800749e <__swsetup_r+0x66>
 8007498:	4630      	mov	r0, r6
 800749a:	f000 fa6d 	bl	8007978 <_free_r>
 800749e:	2300      	movs	r3, #0
 80074a0:	6363      	str	r3, [r4, #52]	; 0x34
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6063      	str	r3, [r4, #4]
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	f043 0308 	orr.w	r3, r3, #8
 80074b8:	81a3      	strh	r3, [r4, #12]
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	b94b      	cbnz	r3, 80074d2 <__swsetup_r+0x9a>
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c8:	d003      	beq.n	80074d2 <__swsetup_r+0x9a>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 fa05 	bl	80078dc <__smakebuf_r>
 80074d2:	89a0      	ldrh	r0, [r4, #12]
 80074d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d8:	f010 0301 	ands.w	r3, r0, #1
 80074dc:	d00a      	beq.n	80074f4 <__swsetup_r+0xbc>
 80074de:	2300      	movs	r3, #0
 80074e0:	60a3      	str	r3, [r4, #8]
 80074e2:	6963      	ldr	r3, [r4, #20]
 80074e4:	425b      	negs	r3, r3
 80074e6:	61a3      	str	r3, [r4, #24]
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	b943      	cbnz	r3, 80074fe <__swsetup_r+0xc6>
 80074ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074f0:	d1ba      	bne.n	8007468 <__swsetup_r+0x30>
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	0781      	lsls	r1, r0, #30
 80074f6:	bf58      	it	pl
 80074f8:	6963      	ldrpl	r3, [r4, #20]
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	e7f4      	b.n	80074e8 <__swsetup_r+0xb0>
 80074fe:	2000      	movs	r0, #0
 8007500:	e7f7      	b.n	80074f2 <__swsetup_r+0xba>
 8007502:	bf00      	nop
 8007504:	20000010 	.word	0x20000010
 8007508:	08008f58 	.word	0x08008f58
 800750c:	08008f78 	.word	0x08008f78
 8007510:	08008f38 	.word	0x08008f38

08007514 <abort>:
 8007514:	2006      	movs	r0, #6
 8007516:	b508      	push	{r3, lr}
 8007518:	f000 fb42 	bl	8007ba0 <raise>
 800751c:	2001      	movs	r0, #1
 800751e:	f7fc fa78 	bl	8003a12 <_exit>
	...

08007524 <__sflush_r>:
 8007524:	898a      	ldrh	r2, [r1, #12]
 8007526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007528:	4605      	mov	r5, r0
 800752a:	0710      	lsls	r0, r2, #28
 800752c:	460c      	mov	r4, r1
 800752e:	d457      	bmi.n	80075e0 <__sflush_r+0xbc>
 8007530:	684b      	ldr	r3, [r1, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dc04      	bgt.n	8007540 <__sflush_r+0x1c>
 8007536:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	dc01      	bgt.n	8007540 <__sflush_r+0x1c>
 800753c:	2000      	movs	r0, #0
 800753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007542:	2e00      	cmp	r6, #0
 8007544:	d0fa      	beq.n	800753c <__sflush_r+0x18>
 8007546:	2300      	movs	r3, #0
 8007548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800754c:	682f      	ldr	r7, [r5, #0]
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	d032      	beq.n	80075b8 <__sflush_r+0x94>
 8007552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	075a      	lsls	r2, r3, #29
 8007558:	d505      	bpl.n	8007566 <__sflush_r+0x42>
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	1ac0      	subs	r0, r0, r3
 800755e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007560:	b10b      	cbz	r3, 8007566 <__sflush_r+0x42>
 8007562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007564:	1ac0      	subs	r0, r0, r3
 8007566:	2300      	movs	r3, #0
 8007568:	4602      	mov	r2, r0
 800756a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800756c:	4628      	mov	r0, r5
 800756e:	6a21      	ldr	r1, [r4, #32]
 8007570:	47b0      	blx	r6
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	d106      	bne.n	8007586 <__sflush_r+0x62>
 8007578:	6829      	ldr	r1, [r5, #0]
 800757a:	291d      	cmp	r1, #29
 800757c:	d82c      	bhi.n	80075d8 <__sflush_r+0xb4>
 800757e:	4a29      	ldr	r2, [pc, #164]	; (8007624 <__sflush_r+0x100>)
 8007580:	40ca      	lsrs	r2, r1
 8007582:	07d6      	lsls	r6, r2, #31
 8007584:	d528      	bpl.n	80075d8 <__sflush_r+0xb4>
 8007586:	2200      	movs	r2, #0
 8007588:	6062      	str	r2, [r4, #4]
 800758a:	6922      	ldr	r2, [r4, #16]
 800758c:	04d9      	lsls	r1, r3, #19
 800758e:	6022      	str	r2, [r4, #0]
 8007590:	d504      	bpl.n	800759c <__sflush_r+0x78>
 8007592:	1c42      	adds	r2, r0, #1
 8007594:	d101      	bne.n	800759a <__sflush_r+0x76>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	b903      	cbnz	r3, 800759c <__sflush_r+0x78>
 800759a:	6560      	str	r0, [r4, #84]	; 0x54
 800759c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800759e:	602f      	str	r7, [r5, #0]
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d0cb      	beq.n	800753c <__sflush_r+0x18>
 80075a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075a8:	4299      	cmp	r1, r3
 80075aa:	d002      	beq.n	80075b2 <__sflush_r+0x8e>
 80075ac:	4628      	mov	r0, r5
 80075ae:	f000 f9e3 	bl	8007978 <_free_r>
 80075b2:	2000      	movs	r0, #0
 80075b4:	6360      	str	r0, [r4, #52]	; 0x34
 80075b6:	e7c2      	b.n	800753e <__sflush_r+0x1a>
 80075b8:	6a21      	ldr	r1, [r4, #32]
 80075ba:	2301      	movs	r3, #1
 80075bc:	4628      	mov	r0, r5
 80075be:	47b0      	blx	r6
 80075c0:	1c41      	adds	r1, r0, #1
 80075c2:	d1c7      	bne.n	8007554 <__sflush_r+0x30>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0c4      	beq.n	8007554 <__sflush_r+0x30>
 80075ca:	2b1d      	cmp	r3, #29
 80075cc:	d001      	beq.n	80075d2 <__sflush_r+0xae>
 80075ce:	2b16      	cmp	r3, #22
 80075d0:	d101      	bne.n	80075d6 <__sflush_r+0xb2>
 80075d2:	602f      	str	r7, [r5, #0]
 80075d4:	e7b2      	b.n	800753c <__sflush_r+0x18>
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	e7ae      	b.n	800753e <__sflush_r+0x1a>
 80075e0:	690f      	ldr	r7, [r1, #16]
 80075e2:	2f00      	cmp	r7, #0
 80075e4:	d0aa      	beq.n	800753c <__sflush_r+0x18>
 80075e6:	0793      	lsls	r3, r2, #30
 80075e8:	bf18      	it	ne
 80075ea:	2300      	movne	r3, #0
 80075ec:	680e      	ldr	r6, [r1, #0]
 80075ee:	bf08      	it	eq
 80075f0:	694b      	ldreq	r3, [r1, #20]
 80075f2:	1bf6      	subs	r6, r6, r7
 80075f4:	600f      	str	r7, [r1, #0]
 80075f6:	608b      	str	r3, [r1, #8]
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	dd9f      	ble.n	800753c <__sflush_r+0x18>
 80075fc:	4633      	mov	r3, r6
 80075fe:	463a      	mov	r2, r7
 8007600:	4628      	mov	r0, r5
 8007602:	6a21      	ldr	r1, [r4, #32]
 8007604:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007608:	47e0      	blx	ip
 800760a:	2800      	cmp	r0, #0
 800760c:	dc06      	bgt.n	800761c <__sflush_r+0xf8>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	e790      	b.n	800753e <__sflush_r+0x1a>
 800761c:	4407      	add	r7, r0
 800761e:	1a36      	subs	r6, r6, r0
 8007620:	e7ea      	b.n	80075f8 <__sflush_r+0xd4>
 8007622:	bf00      	nop
 8007624:	20400001 	.word	0x20400001

08007628 <_fflush_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	690b      	ldr	r3, [r1, #16]
 800762c:	4605      	mov	r5, r0
 800762e:	460c      	mov	r4, r1
 8007630:	b913      	cbnz	r3, 8007638 <_fflush_r+0x10>
 8007632:	2500      	movs	r5, #0
 8007634:	4628      	mov	r0, r5
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	b118      	cbz	r0, 8007642 <_fflush_r+0x1a>
 800763a:	6983      	ldr	r3, [r0, #24]
 800763c:	b90b      	cbnz	r3, 8007642 <_fflush_r+0x1a>
 800763e:	f000 f887 	bl	8007750 <__sinit>
 8007642:	4b14      	ldr	r3, [pc, #80]	; (8007694 <_fflush_r+0x6c>)
 8007644:	429c      	cmp	r4, r3
 8007646:	d11b      	bne.n	8007680 <_fflush_r+0x58>
 8007648:	686c      	ldr	r4, [r5, #4]
 800764a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0ef      	beq.n	8007632 <_fflush_r+0xa>
 8007652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007654:	07d0      	lsls	r0, r2, #31
 8007656:	d404      	bmi.n	8007662 <_fflush_r+0x3a>
 8007658:	0599      	lsls	r1, r3, #22
 800765a:	d402      	bmi.n	8007662 <_fflush_r+0x3a>
 800765c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800765e:	f000 f915 	bl	800788c <__retarget_lock_acquire_recursive>
 8007662:	4628      	mov	r0, r5
 8007664:	4621      	mov	r1, r4
 8007666:	f7ff ff5d 	bl	8007524 <__sflush_r>
 800766a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800766c:	4605      	mov	r5, r0
 800766e:	07da      	lsls	r2, r3, #31
 8007670:	d4e0      	bmi.n	8007634 <_fflush_r+0xc>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	059b      	lsls	r3, r3, #22
 8007676:	d4dd      	bmi.n	8007634 <_fflush_r+0xc>
 8007678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800767a:	f000 f908 	bl	800788e <__retarget_lock_release_recursive>
 800767e:	e7d9      	b.n	8007634 <_fflush_r+0xc>
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <_fflush_r+0x70>)
 8007682:	429c      	cmp	r4, r3
 8007684:	d101      	bne.n	800768a <_fflush_r+0x62>
 8007686:	68ac      	ldr	r4, [r5, #8]
 8007688:	e7df      	b.n	800764a <_fflush_r+0x22>
 800768a:	4b04      	ldr	r3, [pc, #16]	; (800769c <_fflush_r+0x74>)
 800768c:	429c      	cmp	r4, r3
 800768e:	bf08      	it	eq
 8007690:	68ec      	ldreq	r4, [r5, #12]
 8007692:	e7da      	b.n	800764a <_fflush_r+0x22>
 8007694:	08008f58 	.word	0x08008f58
 8007698:	08008f78 	.word	0x08008f78
 800769c:	08008f38 	.word	0x08008f38

080076a0 <std>:
 80076a0:	2300      	movs	r3, #0
 80076a2:	b510      	push	{r4, lr}
 80076a4:	4604      	mov	r4, r0
 80076a6:	e9c0 3300 	strd	r3, r3, [r0]
 80076aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ae:	6083      	str	r3, [r0, #8]
 80076b0:	8181      	strh	r1, [r0, #12]
 80076b2:	6643      	str	r3, [r0, #100]	; 0x64
 80076b4:	81c2      	strh	r2, [r0, #14]
 80076b6:	6183      	str	r3, [r0, #24]
 80076b8:	4619      	mov	r1, r3
 80076ba:	2208      	movs	r2, #8
 80076bc:	305c      	adds	r0, #92	; 0x5c
 80076be:	f7ff fb73 	bl	8006da8 <memset>
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <std+0x38>)
 80076c4:	6224      	str	r4, [r4, #32]
 80076c6:	6263      	str	r3, [r4, #36]	; 0x24
 80076c8:	4b04      	ldr	r3, [pc, #16]	; (80076dc <std+0x3c>)
 80076ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <std+0x40>)
 80076ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <std+0x44>)
 80076d2:	6323      	str	r3, [r4, #48]	; 0x30
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	bf00      	nop
 80076d8:	08007bd9 	.word	0x08007bd9
 80076dc:	08007bfb 	.word	0x08007bfb
 80076e0:	08007c33 	.word	0x08007c33
 80076e4:	08007c57 	.word	0x08007c57

080076e8 <_cleanup_r>:
 80076e8:	4901      	ldr	r1, [pc, #4]	; (80076f0 <_cleanup_r+0x8>)
 80076ea:	f000 b8af 	b.w	800784c <_fwalk_reent>
 80076ee:	bf00      	nop
 80076f0:	08007629 	.word	0x08007629

080076f4 <__sfmoreglue>:
 80076f4:	2268      	movs	r2, #104	; 0x68
 80076f6:	b570      	push	{r4, r5, r6, lr}
 80076f8:	1e4d      	subs	r5, r1, #1
 80076fa:	4355      	muls	r5, r2
 80076fc:	460e      	mov	r6, r1
 80076fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007702:	f000 f9a1 	bl	8007a48 <_malloc_r>
 8007706:	4604      	mov	r4, r0
 8007708:	b140      	cbz	r0, 800771c <__sfmoreglue+0x28>
 800770a:	2100      	movs	r1, #0
 800770c:	e9c0 1600 	strd	r1, r6, [r0]
 8007710:	300c      	adds	r0, #12
 8007712:	60a0      	str	r0, [r4, #8]
 8007714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007718:	f7ff fb46 	bl	8006da8 <memset>
 800771c:	4620      	mov	r0, r4
 800771e:	bd70      	pop	{r4, r5, r6, pc}

08007720 <__sfp_lock_acquire>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__sfp_lock_acquire+0x8>)
 8007722:	f000 b8b3 	b.w	800788c <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20000bb9 	.word	0x20000bb9

0800772c <__sfp_lock_release>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sfp_lock_release+0x8>)
 800772e:	f000 b8ae 	b.w	800788e <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20000bb9 	.word	0x20000bb9

08007738 <__sinit_lock_acquire>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__sinit_lock_acquire+0x8>)
 800773a:	f000 b8a7 	b.w	800788c <__retarget_lock_acquire_recursive>
 800773e:	bf00      	nop
 8007740:	20000bba 	.word	0x20000bba

08007744 <__sinit_lock_release>:
 8007744:	4801      	ldr	r0, [pc, #4]	; (800774c <__sinit_lock_release+0x8>)
 8007746:	f000 b8a2 	b.w	800788e <__retarget_lock_release_recursive>
 800774a:	bf00      	nop
 800774c:	20000bba 	.word	0x20000bba

08007750 <__sinit>:
 8007750:	b510      	push	{r4, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	f7ff fff0 	bl	8007738 <__sinit_lock_acquire>
 8007758:	69a3      	ldr	r3, [r4, #24]
 800775a:	b11b      	cbz	r3, 8007764 <__sinit+0x14>
 800775c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007760:	f7ff bff0 	b.w	8007744 <__sinit_lock_release>
 8007764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007768:	6523      	str	r3, [r4, #80]	; 0x50
 800776a:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <__sinit+0x68>)
 800776c:	4a13      	ldr	r2, [pc, #76]	; (80077bc <__sinit+0x6c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	62a2      	str	r2, [r4, #40]	; 0x28
 8007772:	42a3      	cmp	r3, r4
 8007774:	bf08      	it	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	4620      	mov	r0, r4
 800777a:	bf08      	it	eq
 800777c:	61a3      	streq	r3, [r4, #24]
 800777e:	f000 f81f 	bl	80077c0 <__sfp>
 8007782:	6060      	str	r0, [r4, #4]
 8007784:	4620      	mov	r0, r4
 8007786:	f000 f81b 	bl	80077c0 <__sfp>
 800778a:	60a0      	str	r0, [r4, #8]
 800778c:	4620      	mov	r0, r4
 800778e:	f000 f817 	bl	80077c0 <__sfp>
 8007792:	2200      	movs	r2, #0
 8007794:	2104      	movs	r1, #4
 8007796:	60e0      	str	r0, [r4, #12]
 8007798:	6860      	ldr	r0, [r4, #4]
 800779a:	f7ff ff81 	bl	80076a0 <std>
 800779e:	2201      	movs	r2, #1
 80077a0:	2109      	movs	r1, #9
 80077a2:	68a0      	ldr	r0, [r4, #8]
 80077a4:	f7ff ff7c 	bl	80076a0 <std>
 80077a8:	2202      	movs	r2, #2
 80077aa:	2112      	movs	r1, #18
 80077ac:	68e0      	ldr	r0, [r4, #12]
 80077ae:	f7ff ff77 	bl	80076a0 <std>
 80077b2:	2301      	movs	r3, #1
 80077b4:	61a3      	str	r3, [r4, #24]
 80077b6:	e7d1      	b.n	800775c <__sinit+0xc>
 80077b8:	08008f00 	.word	0x08008f00
 80077bc:	080076e9 	.word	0x080076e9

080077c0 <__sfp>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	4607      	mov	r7, r0
 80077c4:	f7ff ffac 	bl	8007720 <__sfp_lock_acquire>
 80077c8:	4b1e      	ldr	r3, [pc, #120]	; (8007844 <__sfp+0x84>)
 80077ca:	681e      	ldr	r6, [r3, #0]
 80077cc:	69b3      	ldr	r3, [r6, #24]
 80077ce:	b913      	cbnz	r3, 80077d6 <__sfp+0x16>
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ffbd 	bl	8007750 <__sinit>
 80077d6:	3648      	adds	r6, #72	; 0x48
 80077d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077dc:	3b01      	subs	r3, #1
 80077de:	d503      	bpl.n	80077e8 <__sfp+0x28>
 80077e0:	6833      	ldr	r3, [r6, #0]
 80077e2:	b30b      	cbz	r3, 8007828 <__sfp+0x68>
 80077e4:	6836      	ldr	r6, [r6, #0]
 80077e6:	e7f7      	b.n	80077d8 <__sfp+0x18>
 80077e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077ec:	b9d5      	cbnz	r5, 8007824 <__sfp+0x64>
 80077ee:	4b16      	ldr	r3, [pc, #88]	; (8007848 <__sfp+0x88>)
 80077f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077f4:	60e3      	str	r3, [r4, #12]
 80077f6:	6665      	str	r5, [r4, #100]	; 0x64
 80077f8:	f000 f847 	bl	800788a <__retarget_lock_init_recursive>
 80077fc:	f7ff ff96 	bl	800772c <__sfp_lock_release>
 8007800:	2208      	movs	r2, #8
 8007802:	4629      	mov	r1, r5
 8007804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800780c:	6025      	str	r5, [r4, #0]
 800780e:	61a5      	str	r5, [r4, #24]
 8007810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007814:	f7ff fac8 	bl	8006da8 <memset>
 8007818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800781c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007820:	4620      	mov	r0, r4
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	3468      	adds	r4, #104	; 0x68
 8007826:	e7d9      	b.n	80077dc <__sfp+0x1c>
 8007828:	2104      	movs	r1, #4
 800782a:	4638      	mov	r0, r7
 800782c:	f7ff ff62 	bl	80076f4 <__sfmoreglue>
 8007830:	4604      	mov	r4, r0
 8007832:	6030      	str	r0, [r6, #0]
 8007834:	2800      	cmp	r0, #0
 8007836:	d1d5      	bne.n	80077e4 <__sfp+0x24>
 8007838:	f7ff ff78 	bl	800772c <__sfp_lock_release>
 800783c:	230c      	movs	r3, #12
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	e7ee      	b.n	8007820 <__sfp+0x60>
 8007842:	bf00      	nop
 8007844:	08008f00 	.word	0x08008f00
 8007848:	ffff0001 	.word	0xffff0001

0800784c <_fwalk_reent>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4606      	mov	r6, r0
 8007852:	4688      	mov	r8, r1
 8007854:	2700      	movs	r7, #0
 8007856:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800785a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800785e:	f1b9 0901 	subs.w	r9, r9, #1
 8007862:	d505      	bpl.n	8007870 <_fwalk_reent+0x24>
 8007864:	6824      	ldr	r4, [r4, #0]
 8007866:	2c00      	cmp	r4, #0
 8007868:	d1f7      	bne.n	800785a <_fwalk_reent+0xe>
 800786a:	4638      	mov	r0, r7
 800786c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007870:	89ab      	ldrh	r3, [r5, #12]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d907      	bls.n	8007886 <_fwalk_reent+0x3a>
 8007876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800787a:	3301      	adds	r3, #1
 800787c:	d003      	beq.n	8007886 <_fwalk_reent+0x3a>
 800787e:	4629      	mov	r1, r5
 8007880:	4630      	mov	r0, r6
 8007882:	47c0      	blx	r8
 8007884:	4307      	orrs	r7, r0
 8007886:	3568      	adds	r5, #104	; 0x68
 8007888:	e7e9      	b.n	800785e <_fwalk_reent+0x12>

0800788a <__retarget_lock_init_recursive>:
 800788a:	4770      	bx	lr

0800788c <__retarget_lock_acquire_recursive>:
 800788c:	4770      	bx	lr

0800788e <__retarget_lock_release_recursive>:
 800788e:	4770      	bx	lr

08007890 <__swhatbuf_r>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	460e      	mov	r6, r1
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	4614      	mov	r4, r2
 800789a:	2900      	cmp	r1, #0
 800789c:	461d      	mov	r5, r3
 800789e:	b096      	sub	sp, #88	; 0x58
 80078a0:	da08      	bge.n	80078b4 <__swhatbuf_r+0x24>
 80078a2:	2200      	movs	r2, #0
 80078a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	061a      	lsls	r2, r3, #24
 80078ac:	d410      	bmi.n	80078d0 <__swhatbuf_r+0x40>
 80078ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b2:	e00e      	b.n	80078d2 <__swhatbuf_r+0x42>
 80078b4:	466a      	mov	r2, sp
 80078b6:	f000 f9f5 	bl	8007ca4 <_fstat_r>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	dbf1      	blt.n	80078a2 <__swhatbuf_r+0x12>
 80078be:	9a01      	ldr	r2, [sp, #4]
 80078c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078c8:	425a      	negs	r2, r3
 80078ca:	415a      	adcs	r2, r3
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	e7ee      	b.n	80078ae <__swhatbuf_r+0x1e>
 80078d0:	2340      	movs	r3, #64	; 0x40
 80078d2:	2000      	movs	r0, #0
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	b016      	add	sp, #88	; 0x58
 80078d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080078dc <__smakebuf_r>:
 80078dc:	898b      	ldrh	r3, [r1, #12]
 80078de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078e0:	079d      	lsls	r5, r3, #30
 80078e2:	4606      	mov	r6, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	d507      	bpl.n	80078f8 <__smakebuf_r+0x1c>
 80078e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	6123      	str	r3, [r4, #16]
 80078f0:	2301      	movs	r3, #1
 80078f2:	6163      	str	r3, [r4, #20]
 80078f4:	b002      	add	sp, #8
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	466a      	mov	r2, sp
 80078fa:	ab01      	add	r3, sp, #4
 80078fc:	f7ff ffc8 	bl	8007890 <__swhatbuf_r>
 8007900:	9900      	ldr	r1, [sp, #0]
 8007902:	4605      	mov	r5, r0
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f89f 	bl	8007a48 <_malloc_r>
 800790a:	b948      	cbnz	r0, 8007920 <__smakebuf_r+0x44>
 800790c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007910:	059a      	lsls	r2, r3, #22
 8007912:	d4ef      	bmi.n	80078f4 <__smakebuf_r+0x18>
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	f043 0302 	orr.w	r3, r3, #2
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	e7e3      	b.n	80078e8 <__smakebuf_r+0xc>
 8007920:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <__smakebuf_r+0x7c>)
 8007922:	62b3      	str	r3, [r6, #40]	; 0x28
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	9b00      	ldr	r3, [sp, #0]
 8007930:	6120      	str	r0, [r4, #16]
 8007932:	6163      	str	r3, [r4, #20]
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	b15b      	cbz	r3, 8007950 <__smakebuf_r+0x74>
 8007938:	4630      	mov	r0, r6
 800793a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793e:	f000 f9c3 	bl	8007cc8 <_isatty_r>
 8007942:	b128      	cbz	r0, 8007950 <__smakebuf_r+0x74>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	f043 0301 	orr.w	r3, r3, #1
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	89a0      	ldrh	r0, [r4, #12]
 8007952:	4305      	orrs	r5, r0
 8007954:	81a5      	strh	r5, [r4, #12]
 8007956:	e7cd      	b.n	80078f4 <__smakebuf_r+0x18>
 8007958:	080076e9 	.word	0x080076e9

0800795c <memchr>:
 800795c:	4603      	mov	r3, r0
 800795e:	b510      	push	{r4, lr}
 8007960:	b2c9      	uxtb	r1, r1
 8007962:	4402      	add	r2, r0
 8007964:	4293      	cmp	r3, r2
 8007966:	4618      	mov	r0, r3
 8007968:	d101      	bne.n	800796e <memchr+0x12>
 800796a:	2000      	movs	r0, #0
 800796c:	e003      	b.n	8007976 <memchr+0x1a>
 800796e:	7804      	ldrb	r4, [r0, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	428c      	cmp	r4, r1
 8007974:	d1f6      	bne.n	8007964 <memchr+0x8>
 8007976:	bd10      	pop	{r4, pc}

08007978 <_free_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	2900      	cmp	r1, #0
 800797e:	d040      	beq.n	8007a02 <_free_r+0x8a>
 8007980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007984:	1f0c      	subs	r4, r1, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfb8      	it	lt
 800798a:	18e4      	addlt	r4, r4, r3
 800798c:	f000 f9be 	bl	8007d0c <__malloc_lock>
 8007990:	4a1c      	ldr	r2, [pc, #112]	; (8007a04 <_free_r+0x8c>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x2c>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	4628      	mov	r0, r5
 800799c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a0:	f000 b9ba 	b.w	8007d18 <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x42>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	1821      	adds	r1, r4, r0
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1809      	addeq	r1, r1, r0
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x1e>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x4c>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x42>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1850      	adds	r0, r2, r1
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x6c>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	4401      	add	r1, r0
 80079d0:	1850      	adds	r0, r2, r1
 80079d2:	4283      	cmp	r3, r0
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x22>
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	4401      	add	r1, r0
 80079de:	6011      	str	r1, [r2, #0]
 80079e0:	6053      	str	r3, [r2, #4]
 80079e2:	e7da      	b.n	800799a <_free_r+0x22>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x74>
 80079e6:	230c      	movs	r3, #12
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x22>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf01      	itttt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	1809      	addeq	r1, r1, r0
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	6063      	str	r3, [r4, #4]
 80079fe:	6054      	str	r4, [r2, #4]
 8007a00:	e7cb      	b.n	800799a <_free_r+0x22>
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	20000bbc 	.word	0x20000bbc

08007a08 <sbrk_aligned>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4e0e      	ldr	r6, [pc, #56]	; (8007a44 <sbrk_aligned+0x3c>)
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	6831      	ldr	r1, [r6, #0]
 8007a10:	4605      	mov	r5, r0
 8007a12:	b911      	cbnz	r1, 8007a1a <sbrk_aligned+0x12>
 8007a14:	f000 f88c 	bl	8007b30 <_sbrk_r>
 8007a18:	6030      	str	r0, [r6, #0]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 f887 	bl	8007b30 <_sbrk_r>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d00a      	beq.n	8007a3c <sbrk_aligned+0x34>
 8007a26:	1cc4      	adds	r4, r0, #3
 8007a28:	f024 0403 	bic.w	r4, r4, #3
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d007      	beq.n	8007a40 <sbrk_aligned+0x38>
 8007a30:	1a21      	subs	r1, r4, r0
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 f87c 	bl	8007b30 <_sbrk_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d101      	bne.n	8007a40 <sbrk_aligned+0x38>
 8007a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a40:	4620      	mov	r0, r4
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	20000bc0 	.word	0x20000bc0

08007a48 <_malloc_r>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	1ccd      	adds	r5, r1, #3
 8007a4e:	f025 0503 	bic.w	r5, r5, #3
 8007a52:	3508      	adds	r5, #8
 8007a54:	2d0c      	cmp	r5, #12
 8007a56:	bf38      	it	cc
 8007a58:	250c      	movcc	r5, #12
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	db01      	blt.n	8007a64 <_malloc_r+0x1c>
 8007a60:	42a9      	cmp	r1, r5
 8007a62:	d905      	bls.n	8007a70 <_malloc_r+0x28>
 8007a64:	230c      	movs	r3, #12
 8007a66:	2600      	movs	r6, #0
 8007a68:	603b      	str	r3, [r7, #0]
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a70:	4e2e      	ldr	r6, [pc, #184]	; (8007b2c <_malloc_r+0xe4>)
 8007a72:	f000 f94b 	bl	8007d0c <__malloc_lock>
 8007a76:	6833      	ldr	r3, [r6, #0]
 8007a78:	461c      	mov	r4, r3
 8007a7a:	bb34      	cbnz	r4, 8007aca <_malloc_r+0x82>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff ffc2 	bl	8007a08 <sbrk_aligned>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	4604      	mov	r4, r0
 8007a88:	d14d      	bne.n	8007b26 <_malloc_r+0xde>
 8007a8a:	6834      	ldr	r4, [r6, #0]
 8007a8c:	4626      	mov	r6, r4
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d140      	bne.n	8007b14 <_malloc_r+0xcc>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	4631      	mov	r1, r6
 8007a96:	4638      	mov	r0, r7
 8007a98:	eb04 0803 	add.w	r8, r4, r3
 8007a9c:	f000 f848 	bl	8007b30 <_sbrk_r>
 8007aa0:	4580      	cmp	r8, r0
 8007aa2:	d13a      	bne.n	8007b1a <_malloc_r+0xd2>
 8007aa4:	6821      	ldr	r1, [r4, #0]
 8007aa6:	3503      	adds	r5, #3
 8007aa8:	1a6d      	subs	r5, r5, r1
 8007aaa:	f025 0503 	bic.w	r5, r5, #3
 8007aae:	3508      	adds	r5, #8
 8007ab0:	2d0c      	cmp	r5, #12
 8007ab2:	bf38      	it	cc
 8007ab4:	250c      	movcc	r5, #12
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7ff ffa5 	bl	8007a08 <sbrk_aligned>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d02b      	beq.n	8007b1a <_malloc_r+0xd2>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	442b      	add	r3, r5
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	e00e      	b.n	8007ae8 <_malloc_r+0xa0>
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	1b52      	subs	r2, r2, r5
 8007ace:	d41e      	bmi.n	8007b0e <_malloc_r+0xc6>
 8007ad0:	2a0b      	cmp	r2, #11
 8007ad2:	d916      	bls.n	8007b02 <_malloc_r+0xba>
 8007ad4:	1961      	adds	r1, r4, r5
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	6025      	str	r5, [r4, #0]
 8007ada:	bf18      	it	ne
 8007adc:	6059      	strne	r1, [r3, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	bf08      	it	eq
 8007ae2:	6031      	streq	r1, [r6, #0]
 8007ae4:	5162      	str	r2, [r4, r5]
 8007ae6:	604b      	str	r3, [r1, #4]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f104 060b 	add.w	r6, r4, #11
 8007aee:	f000 f913 	bl	8007d18 <__malloc_unlock>
 8007af2:	f026 0607 	bic.w	r6, r6, #7
 8007af6:	1d23      	adds	r3, r4, #4
 8007af8:	1af2      	subs	r2, r6, r3
 8007afa:	d0b6      	beq.n	8007a6a <_malloc_r+0x22>
 8007afc:	1b9b      	subs	r3, r3, r6
 8007afe:	50a3      	str	r3, [r4, r2]
 8007b00:	e7b3      	b.n	8007a6a <_malloc_r+0x22>
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	bf0c      	ite	eq
 8007b08:	6032      	streq	r2, [r6, #0]
 8007b0a:	605a      	strne	r2, [r3, #4]
 8007b0c:	e7ec      	b.n	8007ae8 <_malloc_r+0xa0>
 8007b0e:	4623      	mov	r3, r4
 8007b10:	6864      	ldr	r4, [r4, #4]
 8007b12:	e7b2      	b.n	8007a7a <_malloc_r+0x32>
 8007b14:	4634      	mov	r4, r6
 8007b16:	6876      	ldr	r6, [r6, #4]
 8007b18:	e7b9      	b.n	8007a8e <_malloc_r+0x46>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	f000 f8fa 	bl	8007d18 <__malloc_unlock>
 8007b24:	e7a1      	b.n	8007a6a <_malloc_r+0x22>
 8007b26:	6025      	str	r5, [r4, #0]
 8007b28:	e7de      	b.n	8007ae8 <_malloc_r+0xa0>
 8007b2a:	bf00      	nop
 8007b2c:	20000bbc 	.word	0x20000bbc

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	2300      	movs	r3, #0
 8007b34:	4d05      	ldr	r5, [pc, #20]	; (8007b4c <_sbrk_r+0x1c>)
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fb ffdc 	bl	8003af8 <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000bc4 	.word	0x20000bc4

08007b50 <_raise_r>:
 8007b50:	291f      	cmp	r1, #31
 8007b52:	b538      	push	{r3, r4, r5, lr}
 8007b54:	4604      	mov	r4, r0
 8007b56:	460d      	mov	r5, r1
 8007b58:	d904      	bls.n	8007b64 <_raise_r+0x14>
 8007b5a:	2316      	movs	r3, #22
 8007b5c:	6003      	str	r3, [r0, #0]
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b66:	b112      	cbz	r2, 8007b6e <_raise_r+0x1e>
 8007b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b6c:	b94b      	cbnz	r3, 8007b82 <_raise_r+0x32>
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 f830 	bl	8007bd4 <_getpid_r>
 8007b74:	462a      	mov	r2, r5
 8007b76:	4601      	mov	r1, r0
 8007b78:	4620      	mov	r0, r4
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f000 b817 	b.w	8007bb0 <_kill_r>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d00a      	beq.n	8007b9c <_raise_r+0x4c>
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	d103      	bne.n	8007b92 <_raise_r+0x42>
 8007b8a:	2316      	movs	r3, #22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	2001      	movs	r0, #1
 8007b90:	e7e7      	b.n	8007b62 <_raise_r+0x12>
 8007b92:	2400      	movs	r4, #0
 8007b94:	4628      	mov	r0, r5
 8007b96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b9a:	4798      	blx	r3
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e7e0      	b.n	8007b62 <_raise_r+0x12>

08007ba0 <raise>:
 8007ba0:	4b02      	ldr	r3, [pc, #8]	; (8007bac <raise+0xc>)
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	f7ff bfd3 	b.w	8007b50 <_raise_r>
 8007baa:	bf00      	nop
 8007bac:	20000010 	.word	0x20000010

08007bb0 <_kill_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_kill_r+0x20>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7fb ff18 	bl	80039f2 <_kill>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_kill_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_kill_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000bc4 	.word	0x20000bc4

08007bd4 <_getpid_r>:
 8007bd4:	f7fb bf06 	b.w	80039e4 <_getpid>

08007bd8 <__sread>:
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be0:	f000 f8a0 	bl	8007d24 <_read_r>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	bfab      	itete	ge
 8007be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bea:	89a3      	ldrhlt	r3, [r4, #12]
 8007bec:	181b      	addge	r3, r3, r0
 8007bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bf2:	bfac      	ite	ge
 8007bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bf6:	81a3      	strhlt	r3, [r4, #12]
 8007bf8:	bd10      	pop	{r4, pc}

08007bfa <__swrite>:
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	461f      	mov	r7, r3
 8007c00:	898b      	ldrh	r3, [r1, #12]
 8007c02:	4605      	mov	r5, r0
 8007c04:	05db      	lsls	r3, r3, #23
 8007c06:	460c      	mov	r4, r1
 8007c08:	4616      	mov	r6, r2
 8007c0a:	d505      	bpl.n	8007c18 <__swrite+0x1e>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	f000 f868 	bl	8007ce8 <_lseek_r>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	4632      	mov	r2, r6
 8007c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	4628      	mov	r0, r5
 8007c24:	463b      	mov	r3, r7
 8007c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	f000 b817 	b.w	8007c60 <_write_r>

08007c32 <__sseek>:
 8007c32:	b510      	push	{r4, lr}
 8007c34:	460c      	mov	r4, r1
 8007c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3a:	f000 f855 	bl	8007ce8 <_lseek_r>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	bf15      	itete	ne
 8007c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c4e:	81a3      	strheq	r3, [r4, #12]
 8007c50:	bf18      	it	ne
 8007c52:	81a3      	strhne	r3, [r4, #12]
 8007c54:	bd10      	pop	{r4, pc}

08007c56 <__sclose>:
 8007c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5a:	f000 b813 	b.w	8007c84 <_close_r>
	...

08007c60 <_write_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4d05      	ldr	r5, [pc, #20]	; (8007c80 <_write_r+0x20>)
 8007c6c:	602a      	str	r2, [r5, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f7fb fef6 	bl	8003a60 <_write>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_write_r+0x1e>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_write_r+0x1e>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000bc4 	.word	0x20000bc4

08007c84 <_close_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	2300      	movs	r3, #0
 8007c88:	4d05      	ldr	r5, [pc, #20]	; (8007ca0 <_close_r+0x1c>)
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7fb ff02 	bl	8003a98 <_close>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_close_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_close_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000bc4 	.word	0x20000bc4

08007ca4 <_fstat_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4d06      	ldr	r5, [pc, #24]	; (8007cc4 <_fstat_r+0x20>)
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	f7fb fefc 	bl	8003aae <_fstat>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d102      	bne.n	8007cc0 <_fstat_r+0x1c>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	b103      	cbz	r3, 8007cc0 <_fstat_r+0x1c>
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000bc4 	.word	0x20000bc4

08007cc8 <_isatty_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4d05      	ldr	r5, [pc, #20]	; (8007ce4 <_isatty_r+0x1c>)
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7fb fefa 	bl	8003acc <_isatty>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_isatty_r+0x1a>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_isatty_r+0x1a>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	20000bc4 	.word	0x20000bc4

08007ce8 <_lseek_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4d05      	ldr	r5, [pc, #20]	; (8007d08 <_lseek_r+0x20>)
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7fb fef2 	bl	8003ae0 <_lseek>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_lseek_r+0x1e>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_lseek_r+0x1e>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000bc4 	.word	0x20000bc4

08007d0c <__malloc_lock>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	; (8007d14 <__malloc_lock+0x8>)
 8007d0e:	f7ff bdbd 	b.w	800788c <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	20000bb8 	.word	0x20000bb8

08007d18 <__malloc_unlock>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__malloc_unlock+0x8>)
 8007d1a:	f7ff bdb8 	b.w	800788e <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20000bb8 	.word	0x20000bb8

08007d24 <_read_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4d05      	ldr	r5, [pc, #20]	; (8007d44 <_read_r+0x20>)
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7fb fe77 	bl	8003a26 <_read>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_read_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_read_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20000bc4 	.word	0x20000bc4

08007d48 <cos>:
 8007d48:	b530      	push	{r4, r5, lr}
 8007d4a:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <cos+0x84>)
 8007d4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d50:	4293      	cmp	r3, r2
 8007d52:	b087      	sub	sp, #28
 8007d54:	dc06      	bgt.n	8007d64 <cos+0x1c>
 8007d56:	2200      	movs	r2, #0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	b007      	add	sp, #28
 8007d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d60:	f000 baa2 	b.w	80082a8 <__kernel_cos>
 8007d64:	4a1a      	ldr	r2, [pc, #104]	; (8007dd0 <cos+0x88>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	dd05      	ble.n	8007d76 <cos+0x2e>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	f7f8 fa5f 	bl	8000230 <__aeabi_dsub>
 8007d72:	b007      	add	sp, #28
 8007d74:	bd30      	pop	{r4, r5, pc}
 8007d76:	aa02      	add	r2, sp, #8
 8007d78:	f000 f89e 	bl	8007eb8 <__ieee754_rem_pio2>
 8007d7c:	f000 0003 	and.w	r0, r0, #3
 8007d80:	2801      	cmp	r0, #1
 8007d82:	d009      	beq.n	8007d98 <cos+0x50>
 8007d84:	2802      	cmp	r0, #2
 8007d86:	d011      	beq.n	8007dac <cos+0x64>
 8007d88:	b9b8      	cbnz	r0, 8007dba <cos+0x72>
 8007d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d92:	f000 fa89 	bl	80082a8 <__kernel_cos>
 8007d96:	e7ec      	b.n	8007d72 <cos+0x2a>
 8007d98:	9000      	str	r0, [sp, #0]
 8007d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da2:	f000 fe81 	bl	8008aa8 <__kernel_sin>
 8007da6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007daa:	e7e2      	b.n	8007d72 <cos+0x2a>
 8007dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db4:	f000 fa78 	bl	80082a8 <__kernel_cos>
 8007db8:	e7f5      	b.n	8007da6 <cos+0x5e>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc6:	f000 fe6f 	bl	8008aa8 <__kernel_sin>
 8007dca:	e7d2      	b.n	8007d72 <cos+0x2a>
 8007dcc:	3fe921fb 	.word	0x3fe921fb
 8007dd0:	7fefffff 	.word	0x7fefffff

08007dd4 <fabs>:
 8007dd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007dd8:	4770      	bx	lr
	...

08007ddc <sin>:
 8007ddc:	b530      	push	{r4, r5, lr}
 8007dde:	4a20      	ldr	r2, [pc, #128]	; (8007e60 <sin+0x84>)
 8007de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007de4:	4293      	cmp	r3, r2
 8007de6:	b087      	sub	sp, #28
 8007de8:	dc06      	bgt.n	8007df8 <sin+0x1c>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2200      	movs	r2, #0
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	2300      	movs	r3, #0
 8007df2:	f000 fe59 	bl	8008aa8 <__kernel_sin>
 8007df6:	e006      	b.n	8007e06 <sin+0x2a>
 8007df8:	4a1a      	ldr	r2, [pc, #104]	; (8007e64 <sin+0x88>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	dd05      	ble.n	8007e0a <sin+0x2e>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	f7f8 fa15 	bl	8000230 <__aeabi_dsub>
 8007e06:	b007      	add	sp, #28
 8007e08:	bd30      	pop	{r4, r5, pc}
 8007e0a:	aa02      	add	r2, sp, #8
 8007e0c:	f000 f854 	bl	8007eb8 <__ieee754_rem_pio2>
 8007e10:	f000 0003 	and.w	r0, r0, #3
 8007e14:	2801      	cmp	r0, #1
 8007e16:	d009      	beq.n	8007e2c <sin+0x50>
 8007e18:	2802      	cmp	r0, #2
 8007e1a:	d00e      	beq.n	8007e3a <sin+0x5e>
 8007e1c:	b9c0      	cbnz	r0, 8007e50 <sin+0x74>
 8007e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e22:	2301      	movs	r3, #1
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e2a:	e7e2      	b.n	8007df2 <sin+0x16>
 8007e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e34:	f000 fa38 	bl	80082a8 <__kernel_cos>
 8007e38:	e7e5      	b.n	8007e06 <sin+0x2a>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e46:	f000 fe2f 	bl	8008aa8 <__kernel_sin>
 8007e4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007e4e:	e7da      	b.n	8007e06 <sin+0x2a>
 8007e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e58:	f000 fa26 	bl	80082a8 <__kernel_cos>
 8007e5c:	e7f5      	b.n	8007e4a <sin+0x6e>
 8007e5e:	bf00      	nop
 8007e60:	3fe921fb 	.word	0x3fe921fb
 8007e64:	7fefffff 	.word	0x7fefffff

08007e68 <roundf>:
 8007e68:	b508      	push	{r3, lr}
 8007e6a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007e6e:	3b7f      	subs	r3, #127	; 0x7f
 8007e70:	2b16      	cmp	r3, #22
 8007e72:	4601      	mov	r1, r0
 8007e74:	4602      	mov	r2, r0
 8007e76:	dc14      	bgt.n	8007ea2 <roundf+0x3a>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da07      	bge.n	8007e8c <roundf+0x24>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8007e82:	d101      	bne.n	8007e88 <roundf+0x20>
 8007e84:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8007e88:	4608      	mov	r0, r1
 8007e8a:	bd08      	pop	{r3, pc}
 8007e8c:	4808      	ldr	r0, [pc, #32]	; (8007eb0 <roundf+0x48>)
 8007e8e:	4118      	asrs	r0, r3
 8007e90:	4201      	tst	r1, r0
 8007e92:	d0f9      	beq.n	8007e88 <roundf+0x20>
 8007e94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e98:	4119      	asrs	r1, r3
 8007e9a:	4411      	add	r1, r2
 8007e9c:	ea21 0100 	bic.w	r1, r1, r0
 8007ea0:	e7f2      	b.n	8007e88 <roundf+0x20>
 8007ea2:	2b80      	cmp	r3, #128	; 0x80
 8007ea4:	d1f0      	bne.n	8007e88 <roundf+0x20>
 8007ea6:	f7f8 fe93 	bl	8000bd0 <__addsf3>
 8007eaa:	4601      	mov	r1, r0
 8007eac:	e7ec      	b.n	8007e88 <roundf+0x20>
 8007eae:	bf00      	nop
 8007eb0:	007fffff 	.word	0x007fffff
 8007eb4:	00000000 	.word	0x00000000

08007eb8 <__ieee754_rem_pio2>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	4ac4      	ldr	r2, [pc, #784]	; (80081d0 <__ieee754_rem_pio2+0x318>)
 8007ec0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007ec4:	b08d      	sub	sp, #52	; 0x34
 8007ec6:	4592      	cmp	sl, r2
 8007ec8:	9104      	str	r1, [sp, #16]
 8007eca:	dc07      	bgt.n	8007edc <__ieee754_rem_pio2+0x24>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e9c4 0100 	strd	r0, r1, [r4]
 8007ed4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007ed8:	2500      	movs	r5, #0
 8007eda:	e024      	b.n	8007f26 <__ieee754_rem_pio2+0x6e>
 8007edc:	4abd      	ldr	r2, [pc, #756]	; (80081d4 <__ieee754_rem_pio2+0x31c>)
 8007ede:	4592      	cmp	sl, r2
 8007ee0:	dc72      	bgt.n	8007fc8 <__ieee754_rem_pio2+0x110>
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	4dbc      	ldr	r5, [pc, #752]	; (80081d8 <__ieee754_rem_pio2+0x320>)
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008198 <__ieee754_rem_pio2+0x2e0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	dd36      	ble.n	8007f5e <__ieee754_rem_pio2+0xa6>
 8007ef0:	f7f8 f99e 	bl	8000230 <__aeabi_dsub>
 8007ef4:	45aa      	cmp	sl, r5
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460f      	mov	r7, r1
 8007efa:	d018      	beq.n	8007f2e <__ieee754_rem_pio2+0x76>
 8007efc:	a3a8      	add	r3, pc, #672	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x2e8>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f995 	bl	8000230 <__aeabi_dsub>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	e9c4 2300 	strd	r2, r3, [r4]
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 f98d 	bl	8000230 <__aeabi_dsub>
 8007f16:	a3a2      	add	r3, pc, #648	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x2e8>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f988 	bl	8000230 <__aeabi_dsub>
 8007f20:	2501      	movs	r5, #1
 8007f22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f26:	4628      	mov	r0, r5
 8007f28:	b00d      	add	sp, #52	; 0x34
 8007f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2e:	a39e      	add	r3, pc, #632	; (adr r3, 80081a8 <__ieee754_rem_pio2+0x2f0>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 f97c 	bl	8000230 <__aeabi_dsub>
 8007f38:	a39d      	add	r3, pc, #628	; (adr r3, 80081b0 <__ieee754_rem_pio2+0x2f8>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	f7f8 f975 	bl	8000230 <__aeabi_dsub>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	e9c4 2300 	strd	r2, r3, [r4]
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 f96d 	bl	8000230 <__aeabi_dsub>
 8007f56:	a396      	add	r3, pc, #600	; (adr r3, 80081b0 <__ieee754_rem_pio2+0x2f8>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	e7de      	b.n	8007f1c <__ieee754_rem_pio2+0x64>
 8007f5e:	f7f8 f969 	bl	8000234 <__adddf3>
 8007f62:	45aa      	cmp	sl, r5
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	d016      	beq.n	8007f98 <__ieee754_rem_pio2+0xe0>
 8007f6a:	a38d      	add	r3, pc, #564	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x2e8>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f960 	bl	8000234 <__adddf3>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4630      	mov	r0, r6
 8007f7a:	e9c4 2300 	strd	r2, r3, [r4]
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 f956 	bl	8000230 <__aeabi_dsub>
 8007f84:	a386      	add	r3, pc, #536	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x2e8>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f953 	bl	8000234 <__adddf3>
 8007f8e:	f04f 35ff 	mov.w	r5, #4294967295
 8007f92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f96:	e7c6      	b.n	8007f26 <__ieee754_rem_pio2+0x6e>
 8007f98:	a383      	add	r3, pc, #524	; (adr r3, 80081a8 <__ieee754_rem_pio2+0x2f0>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f949 	bl	8000234 <__adddf3>
 8007fa2:	a383      	add	r3, pc, #524	; (adr r3, 80081b0 <__ieee754_rem_pio2+0x2f8>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	4606      	mov	r6, r0
 8007faa:	460f      	mov	r7, r1
 8007fac:	f7f8 f942 	bl	8000234 <__adddf3>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	e9c4 2300 	strd	r2, r3, [r4]
 8007fba:	4639      	mov	r1, r7
 8007fbc:	f7f8 f938 	bl	8000230 <__aeabi_dsub>
 8007fc0:	a37b      	add	r3, pc, #492	; (adr r3, 80081b0 <__ieee754_rem_pio2+0x2f8>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	e7e0      	b.n	8007f8a <__ieee754_rem_pio2+0xd2>
 8007fc8:	4a84      	ldr	r2, [pc, #528]	; (80081dc <__ieee754_rem_pio2+0x324>)
 8007fca:	4592      	cmp	sl, r2
 8007fcc:	f300 80d5 	bgt.w	800817a <__ieee754_rem_pio2+0x2c2>
 8007fd0:	f7ff ff00 	bl	8007dd4 <fabs>
 8007fd4:	a378      	add	r3, pc, #480	; (adr r3, 80081b8 <__ieee754_rem_pio2+0x300>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	f7f8 fadf 	bl	80005a0 <__aeabi_dmul>
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4b7e      	ldr	r3, [pc, #504]	; (80081e0 <__ieee754_rem_pio2+0x328>)
 8007fe6:	f7f8 f925 	bl	8000234 <__adddf3>
 8007fea:	f7f8 fd73 	bl	8000ad4 <__aeabi_d2iz>
 8007fee:	4605      	mov	r5, r0
 8007ff0:	f7f8 fa6c 	bl	80004cc <__aeabi_i2d>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ffc:	a366      	add	r3, pc, #408	; (adr r3, 8008198 <__ieee754_rem_pio2+0x2e0>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 facd 	bl	80005a0 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4630      	mov	r0, r6
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 f90f 	bl	8000230 <__aeabi_dsub>
 8008012:	a363      	add	r3, pc, #396	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x2e8>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	4680      	mov	r8, r0
 800801a:	4689      	mov	r9, r1
 800801c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008020:	f7f8 fabe 	bl	80005a0 <__aeabi_dmul>
 8008024:	2d1f      	cmp	r5, #31
 8008026:	4606      	mov	r6, r0
 8008028:	460f      	mov	r7, r1
 800802a:	dc0e      	bgt.n	800804a <__ieee754_rem_pio2+0x192>
 800802c:	4b6d      	ldr	r3, [pc, #436]	; (80081e4 <__ieee754_rem_pio2+0x32c>)
 800802e:	1e6a      	subs	r2, r5, #1
 8008030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008034:	4553      	cmp	r3, sl
 8008036:	d008      	beq.n	800804a <__ieee754_rem_pio2+0x192>
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	4640      	mov	r0, r8
 800803e:	4649      	mov	r1, r9
 8008040:	f7f8 f8f6 	bl	8000230 <__aeabi_dsub>
 8008044:	e9c4 0100 	strd	r0, r1, [r4]
 8008048:	e013      	b.n	8008072 <__ieee754_rem_pio2+0x1ba>
 800804a:	463b      	mov	r3, r7
 800804c:	4632      	mov	r2, r6
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f7f8 f8ed 	bl	8000230 <__aeabi_dsub>
 8008056:	ea4f 532a 	mov.w	r3, sl, asr #20
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008060:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008064:	f1ba 0f10 	cmp.w	sl, #16
 8008068:	dc1f      	bgt.n	80080aa <__ieee754_rem_pio2+0x1f2>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	e9c4 2300 	strd	r2, r3, [r4]
 8008072:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008076:	4640      	mov	r0, r8
 8008078:	4653      	mov	r3, sl
 800807a:	4649      	mov	r1, r9
 800807c:	f7f8 f8d8 	bl	8000230 <__aeabi_dsub>
 8008080:	4632      	mov	r2, r6
 8008082:	463b      	mov	r3, r7
 8008084:	f7f8 f8d4 	bl	8000230 <__aeabi_dsub>
 8008088:	460b      	mov	r3, r1
 800808a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800808e:	9904      	ldr	r1, [sp, #16]
 8008090:	4602      	mov	r2, r0
 8008092:	2900      	cmp	r1, #0
 8008094:	f6bf af47 	bge.w	8007f26 <__ieee754_rem_pio2+0x6e>
 8008098:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800809c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80080a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80080a4:	60e3      	str	r3, [r4, #12]
 80080a6:	426d      	negs	r5, r5
 80080a8:	e73d      	b.n	8007f26 <__ieee754_rem_pio2+0x6e>
 80080aa:	a33f      	add	r3, pc, #252	; (adr r3, 80081a8 <__ieee754_rem_pio2+0x2f0>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b4:	f7f8 fa74 	bl	80005a0 <__aeabi_dmul>
 80080b8:	4606      	mov	r6, r0
 80080ba:	460f      	mov	r7, r1
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4640      	mov	r0, r8
 80080c2:	4649      	mov	r1, r9
 80080c4:	f7f8 f8b4 	bl	8000230 <__aeabi_dsub>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4682      	mov	sl, r0
 80080ce:	468b      	mov	fp, r1
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 f8ac 	bl	8000230 <__aeabi_dsub>
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	f7f8 f8a8 	bl	8000230 <__aeabi_dsub>
 80080e0:	a333      	add	r3, pc, #204	; (adr r3, 80081b0 <__ieee754_rem_pio2+0x2f8>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	4606      	mov	r6, r0
 80080e8:	460f      	mov	r7, r1
 80080ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ee:	f7f8 fa57 	bl	80005a0 <__aeabi_dmul>
 80080f2:	4632      	mov	r2, r6
 80080f4:	463b      	mov	r3, r7
 80080f6:	f7f8 f89b 	bl	8000230 <__aeabi_dsub>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	4650      	mov	r0, sl
 8008104:	4659      	mov	r1, fp
 8008106:	f7f8 f893 	bl	8000230 <__aeabi_dsub>
 800810a:	9a05      	ldr	r2, [sp, #20]
 800810c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b31      	cmp	r3, #49	; 0x31
 8008114:	dc06      	bgt.n	8008124 <__ieee754_rem_pio2+0x26c>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	46d0      	mov	r8, sl
 800811c:	46d9      	mov	r9, fp
 800811e:	e9c4 2300 	strd	r2, r3, [r4]
 8008122:	e7a6      	b.n	8008072 <__ieee754_rem_pio2+0x1ba>
 8008124:	a326      	add	r3, pc, #152	; (adr r3, 80081c0 <__ieee754_rem_pio2+0x308>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800812e:	f7f8 fa37 	bl	80005a0 <__aeabi_dmul>
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4650      	mov	r0, sl
 800813c:	4659      	mov	r1, fp
 800813e:	f7f8 f877 	bl	8000230 <__aeabi_dsub>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4680      	mov	r8, r0
 8008148:	4689      	mov	r9, r1
 800814a:	4650      	mov	r0, sl
 800814c:	4659      	mov	r1, fp
 800814e:	f7f8 f86f 	bl	8000230 <__aeabi_dsub>
 8008152:	4632      	mov	r2, r6
 8008154:	463b      	mov	r3, r7
 8008156:	f7f8 f86b 	bl	8000230 <__aeabi_dsub>
 800815a:	a31b      	add	r3, pc, #108	; (adr r3, 80081c8 <__ieee754_rem_pio2+0x310>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008168:	f7f8 fa1a 	bl	80005a0 <__aeabi_dmul>
 800816c:	4632      	mov	r2, r6
 800816e:	463b      	mov	r3, r7
 8008170:	f7f8 f85e 	bl	8000230 <__aeabi_dsub>
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	e75e      	b.n	8008038 <__ieee754_rem_pio2+0x180>
 800817a:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <__ieee754_rem_pio2+0x330>)
 800817c:	4592      	cmp	sl, r2
 800817e:	dd35      	ble.n	80081ec <__ieee754_rem_pio2+0x334>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	f7f8 f854 	bl	8000230 <__aeabi_dsub>
 8008188:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800818c:	e9c4 0100 	strd	r0, r1, [r4]
 8008190:	e6a2      	b.n	8007ed8 <__ieee754_rem_pio2+0x20>
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
 8008198:	54400000 	.word	0x54400000
 800819c:	3ff921fb 	.word	0x3ff921fb
 80081a0:	1a626331 	.word	0x1a626331
 80081a4:	3dd0b461 	.word	0x3dd0b461
 80081a8:	1a600000 	.word	0x1a600000
 80081ac:	3dd0b461 	.word	0x3dd0b461
 80081b0:	2e037073 	.word	0x2e037073
 80081b4:	3ba3198a 	.word	0x3ba3198a
 80081b8:	6dc9c883 	.word	0x6dc9c883
 80081bc:	3fe45f30 	.word	0x3fe45f30
 80081c0:	2e000000 	.word	0x2e000000
 80081c4:	3ba3198a 	.word	0x3ba3198a
 80081c8:	252049c1 	.word	0x252049c1
 80081cc:	397b839a 	.word	0x397b839a
 80081d0:	3fe921fb 	.word	0x3fe921fb
 80081d4:	4002d97b 	.word	0x4002d97b
 80081d8:	3ff921fb 	.word	0x3ff921fb
 80081dc:	413921fb 	.word	0x413921fb
 80081e0:	3fe00000 	.word	0x3fe00000
 80081e4:	08008f98 	.word	0x08008f98
 80081e8:	7fefffff 	.word	0x7fefffff
 80081ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 80081f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80081f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80081f8:	460f      	mov	r7, r1
 80081fa:	4606      	mov	r6, r0
 80081fc:	f7f8 fc6a 	bl	8000ad4 <__aeabi_d2iz>
 8008200:	f7f8 f964 	bl	80004cc <__aeabi_i2d>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008210:	f7f8 f80e 	bl	8000230 <__aeabi_dsub>
 8008214:	2200      	movs	r2, #0
 8008216:	4b22      	ldr	r3, [pc, #136]	; (80082a0 <__ieee754_rem_pio2+0x3e8>)
 8008218:	f7f8 f9c2 	bl	80005a0 <__aeabi_dmul>
 800821c:	460f      	mov	r7, r1
 800821e:	4606      	mov	r6, r0
 8008220:	f7f8 fc58 	bl	8000ad4 <__aeabi_d2iz>
 8008224:	f7f8 f952 	bl	80004cc <__aeabi_i2d>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008234:	f7f7 fffc 	bl	8000230 <__aeabi_dsub>
 8008238:	2200      	movs	r2, #0
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <__ieee754_rem_pio2+0x3e8>)
 800823c:	f7f8 f9b0 	bl	80005a0 <__aeabi_dmul>
 8008240:	f04f 0803 	mov.w	r8, #3
 8008244:	2600      	movs	r6, #0
 8008246:	2700      	movs	r7, #0
 8008248:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800824c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008250:	4632      	mov	r2, r6
 8008252:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008256:	463b      	mov	r3, r7
 8008258:	46c2      	mov	sl, r8
 800825a:	f108 38ff 	add.w	r8, r8, #4294967295
 800825e:	f7f8 fc07 	bl	8000a70 <__aeabi_dcmpeq>
 8008262:	2800      	cmp	r0, #0
 8008264:	d1f4      	bne.n	8008250 <__ieee754_rem_pio2+0x398>
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <__ieee754_rem_pio2+0x3ec>)
 8008268:	462a      	mov	r2, r5
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	2302      	movs	r3, #2
 800826e:	4621      	mov	r1, r4
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	a806      	add	r0, sp, #24
 8008274:	4653      	mov	r3, sl
 8008276:	f000 f8d5 	bl	8008424 <__kernel_rem_pio2>
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	4605      	mov	r5, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	f6bf ae51 	bge.w	8007f26 <__ieee754_rem_pio2+0x6e>
 8008284:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800828c:	e9c4 2300 	strd	r2, r3, [r4]
 8008290:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008298:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800829c:	e703      	b.n	80080a6 <__ieee754_rem_pio2+0x1ee>
 800829e:	bf00      	nop
 80082a0:	41700000 	.word	0x41700000
 80082a4:	08009018 	.word	0x08009018

080082a8 <__kernel_cos>:
 80082a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80082b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80082b4:	4680      	mov	r8, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	e9cd 2300 	strd	r2, r3, [sp]
 80082bc:	da04      	bge.n	80082c8 <__kernel_cos+0x20>
 80082be:	f7f8 fc09 	bl	8000ad4 <__aeabi_d2iz>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f000 8086 	beq.w	80083d4 <__kernel_cos+0x12c>
 80082c8:	4642      	mov	r2, r8
 80082ca:	463b      	mov	r3, r7
 80082cc:	4640      	mov	r0, r8
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 f966 	bl	80005a0 <__aeabi_dmul>
 80082d4:	2200      	movs	r2, #0
 80082d6:	4b4e      	ldr	r3, [pc, #312]	; (8008410 <__kernel_cos+0x168>)
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	f7f8 f960 	bl	80005a0 <__aeabi_dmul>
 80082e0:	a33f      	add	r3, pc, #252	; (adr r3, 80083e0 <__kernel_cos+0x138>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	4682      	mov	sl, r0
 80082e8:	468b      	mov	fp, r1
 80082ea:	4620      	mov	r0, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	f7f8 f957 	bl	80005a0 <__aeabi_dmul>
 80082f2:	a33d      	add	r3, pc, #244	; (adr r3, 80083e8 <__kernel_cos+0x140>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ff9c 	bl	8000234 <__adddf3>
 80082fc:	4622      	mov	r2, r4
 80082fe:	462b      	mov	r3, r5
 8008300:	f7f8 f94e 	bl	80005a0 <__aeabi_dmul>
 8008304:	a33a      	add	r3, pc, #232	; (adr r3, 80083f0 <__kernel_cos+0x148>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ff91 	bl	8000230 <__aeabi_dsub>
 800830e:	4622      	mov	r2, r4
 8008310:	462b      	mov	r3, r5
 8008312:	f7f8 f945 	bl	80005a0 <__aeabi_dmul>
 8008316:	a338      	add	r3, pc, #224	; (adr r3, 80083f8 <__kernel_cos+0x150>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f7 ff8a 	bl	8000234 <__adddf3>
 8008320:	4622      	mov	r2, r4
 8008322:	462b      	mov	r3, r5
 8008324:	f7f8 f93c 	bl	80005a0 <__aeabi_dmul>
 8008328:	a335      	add	r3, pc, #212	; (adr r3, 8008400 <__kernel_cos+0x158>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f7 ff7f 	bl	8000230 <__aeabi_dsub>
 8008332:	4622      	mov	r2, r4
 8008334:	462b      	mov	r3, r5
 8008336:	f7f8 f933 	bl	80005a0 <__aeabi_dmul>
 800833a:	a333      	add	r3, pc, #204	; (adr r3, 8008408 <__kernel_cos+0x160>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f7f7 ff78 	bl	8000234 <__adddf3>
 8008344:	4622      	mov	r2, r4
 8008346:	462b      	mov	r3, r5
 8008348:	f7f8 f92a 	bl	80005a0 <__aeabi_dmul>
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f8 f926 	bl	80005a0 <__aeabi_dmul>
 8008354:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008358:	4604      	mov	r4, r0
 800835a:	460d      	mov	r5, r1
 800835c:	4640      	mov	r0, r8
 800835e:	4639      	mov	r1, r7
 8008360:	f7f8 f91e 	bl	80005a0 <__aeabi_dmul>
 8008364:	460b      	mov	r3, r1
 8008366:	4602      	mov	r2, r0
 8008368:	4629      	mov	r1, r5
 800836a:	4620      	mov	r0, r4
 800836c:	f7f7 ff60 	bl	8000230 <__aeabi_dsub>
 8008370:	4b28      	ldr	r3, [pc, #160]	; (8008414 <__kernel_cos+0x16c>)
 8008372:	4680      	mov	r8, r0
 8008374:	429e      	cmp	r6, r3
 8008376:	4689      	mov	r9, r1
 8008378:	dc0e      	bgt.n	8008398 <__kernel_cos+0xf0>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4650      	mov	r0, sl
 8008380:	4659      	mov	r1, fp
 8008382:	f7f7 ff55 	bl	8000230 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	2000      	movs	r0, #0
 800838a:	460b      	mov	r3, r1
 800838c:	4922      	ldr	r1, [pc, #136]	; (8008418 <__kernel_cos+0x170>)
 800838e:	f7f7 ff4f 	bl	8000230 <__aeabi_dsub>
 8008392:	b003      	add	sp, #12
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	2400      	movs	r4, #0
 800839a:	4b20      	ldr	r3, [pc, #128]	; (800841c <__kernel_cos+0x174>)
 800839c:	4622      	mov	r2, r4
 800839e:	429e      	cmp	r6, r3
 80083a0:	bfcc      	ite	gt
 80083a2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008420 <__kernel_cos+0x178>)
 80083a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80083a8:	462b      	mov	r3, r5
 80083aa:	2000      	movs	r0, #0
 80083ac:	491a      	ldr	r1, [pc, #104]	; (8008418 <__kernel_cos+0x170>)
 80083ae:	f7f7 ff3f 	bl	8000230 <__aeabi_dsub>
 80083b2:	4622      	mov	r2, r4
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	462b      	mov	r3, r5
 80083ba:	4650      	mov	r0, sl
 80083bc:	4659      	mov	r1, fp
 80083be:	f7f7 ff37 	bl	8000230 <__aeabi_dsub>
 80083c2:	4642      	mov	r2, r8
 80083c4:	464b      	mov	r3, r9
 80083c6:	f7f7 ff33 	bl	8000230 <__aeabi_dsub>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	e7dc      	b.n	800838e <__kernel_cos+0xe6>
 80083d4:	2000      	movs	r0, #0
 80083d6:	4910      	ldr	r1, [pc, #64]	; (8008418 <__kernel_cos+0x170>)
 80083d8:	e7db      	b.n	8008392 <__kernel_cos+0xea>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	be8838d4 	.word	0xbe8838d4
 80083e4:	bda8fae9 	.word	0xbda8fae9
 80083e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80083ec:	3e21ee9e 	.word	0x3e21ee9e
 80083f0:	809c52ad 	.word	0x809c52ad
 80083f4:	3e927e4f 	.word	0x3e927e4f
 80083f8:	19cb1590 	.word	0x19cb1590
 80083fc:	3efa01a0 	.word	0x3efa01a0
 8008400:	16c15177 	.word	0x16c15177
 8008404:	3f56c16c 	.word	0x3f56c16c
 8008408:	5555554c 	.word	0x5555554c
 800840c:	3fa55555 	.word	0x3fa55555
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	3fd33332 	.word	0x3fd33332
 8008418:	3ff00000 	.word	0x3ff00000
 800841c:	3fe90000 	.word	0x3fe90000
 8008420:	3fd20000 	.word	0x3fd20000

08008424 <__kernel_rem_pio2>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800842c:	9308      	str	r3, [sp, #32]
 800842e:	9106      	str	r1, [sp, #24]
 8008430:	4bb6      	ldr	r3, [pc, #728]	; (800870c <__kernel_rem_pio2+0x2e8>)
 8008432:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008434:	f112 0f14 	cmn.w	r2, #20
 8008438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800843c:	bfa8      	it	ge
 800843e:	1ed4      	subge	r4, r2, #3
 8008440:	9302      	str	r3, [sp, #8]
 8008442:	9b08      	ldr	r3, [sp, #32]
 8008444:	bfb8      	it	lt
 8008446:	2400      	movlt	r4, #0
 8008448:	f103 33ff 	add.w	r3, r3, #4294967295
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	bfa4      	itt	ge
 8008450:	2318      	movge	r3, #24
 8008452:	fb94 f4f3 	sdivge	r4, r4, r3
 8008456:	f06f 0317 	mvn.w	r3, #23
 800845a:	fb04 3303 	mla	r3, r4, r3, r3
 800845e:	eb03 0b02 	add.w	fp, r3, r2
 8008462:	9a07      	ldr	r2, [sp, #28]
 8008464:	9b02      	ldr	r3, [sp, #8]
 8008466:	1aa7      	subs	r7, r4, r2
 8008468:	eb03 0802 	add.w	r8, r3, r2
 800846c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800846e:	2500      	movs	r5, #0
 8008470:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008474:	2200      	movs	r2, #0
 8008476:	2300      	movs	r3, #0
 8008478:	9009      	str	r0, [sp, #36]	; 0x24
 800847a:	ae20      	add	r6, sp, #128	; 0x80
 800847c:	4545      	cmp	r5, r8
 800847e:	dd14      	ble.n	80084aa <__kernel_rem_pio2+0x86>
 8008480:	f04f 0800 	mov.w	r8, #0
 8008484:	9a08      	ldr	r2, [sp, #32]
 8008486:	ab20      	add	r3, sp, #128	; 0x80
 8008488:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800848c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	4598      	cmp	r8, r3
 8008494:	dc35      	bgt.n	8008502 <__kernel_rem_pio2+0xde>
 8008496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008498:	2200      	movs	r2, #0
 800849a:	f1a3 0908 	sub.w	r9, r3, #8
 800849e:	2300      	movs	r3, #0
 80084a0:	462f      	mov	r7, r5
 80084a2:	2600      	movs	r6, #0
 80084a4:	e9cd 2300 	strd	r2, r3, [sp]
 80084a8:	e01f      	b.n	80084ea <__kernel_rem_pio2+0xc6>
 80084aa:	42ef      	cmn	r7, r5
 80084ac:	d40b      	bmi.n	80084c6 <__kernel_rem_pio2+0xa2>
 80084ae:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80084b2:	e9cd 2300 	strd	r2, r3, [sp]
 80084b6:	f7f8 f809 	bl	80004cc <__aeabi_i2d>
 80084ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084be:	e8e6 0102 	strd	r0, r1, [r6], #8
 80084c2:	3501      	adds	r5, #1
 80084c4:	e7da      	b.n	800847c <__kernel_rem_pio2+0x58>
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	e7f8      	b.n	80084be <__kernel_rem_pio2+0x9a>
 80084cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80084d4:	f7f8 f864 	bl	80005a0 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e0:	f7f7 fea8 	bl	8000234 <__adddf3>
 80084e4:	e9cd 0100 	strd	r0, r1, [sp]
 80084e8:	3601      	adds	r6, #1
 80084ea:	9b07      	ldr	r3, [sp, #28]
 80084ec:	3f08      	subs	r7, #8
 80084ee:	429e      	cmp	r6, r3
 80084f0:	ddec      	ble.n	80084cc <__kernel_rem_pio2+0xa8>
 80084f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084f6:	f108 0801 	add.w	r8, r8, #1
 80084fa:	e8ea 2302 	strd	r2, r3, [sl], #8
 80084fe:	3508      	adds	r5, #8
 8008500:	e7c6      	b.n	8008490 <__kernel_rem_pio2+0x6c>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	aa0c      	add	r2, sp, #48	; 0x30
 8008506:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800850a:	930b      	str	r3, [sp, #44]	; 0x2c
 800850c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800850e:	9e02      	ldr	r6, [sp, #8]
 8008510:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008514:	930a      	str	r3, [sp, #40]	; 0x28
 8008516:	ab98      	add	r3, sp, #608	; 0x260
 8008518:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800851c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008520:	ab70      	add	r3, sp, #448	; 0x1c0
 8008522:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008526:	46d0      	mov	r8, sl
 8008528:	46b1      	mov	r9, r6
 800852a:	af0c      	add	r7, sp, #48	; 0x30
 800852c:	9700      	str	r7, [sp, #0]
 800852e:	f1b9 0f00 	cmp.w	r9, #0
 8008532:	f1a8 0808 	sub.w	r8, r8, #8
 8008536:	dc71      	bgt.n	800861c <__kernel_rem_pio2+0x1f8>
 8008538:	465a      	mov	r2, fp
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	f000 fbeb 	bl	8008d18 <scalbn>
 8008542:	2200      	movs	r2, #0
 8008544:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	f7f8 f828 	bl	80005a0 <__aeabi_dmul>
 8008550:	f000 fb62 	bl	8008c18 <floor>
 8008554:	2200      	movs	r2, #0
 8008556:	4b6e      	ldr	r3, [pc, #440]	; (8008710 <__kernel_rem_pio2+0x2ec>)
 8008558:	f7f8 f822 	bl	80005a0 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4620      	mov	r0, r4
 8008562:	4629      	mov	r1, r5
 8008564:	f7f7 fe64 	bl	8000230 <__aeabi_dsub>
 8008568:	460d      	mov	r5, r1
 800856a:	4604      	mov	r4, r0
 800856c:	f7f8 fab2 	bl	8000ad4 <__aeabi_d2iz>
 8008570:	9004      	str	r0, [sp, #16]
 8008572:	f7f7 ffab 	bl	80004cc <__aeabi_i2d>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f7 fe57 	bl	8000230 <__aeabi_dsub>
 8008582:	f1bb 0f00 	cmp.w	fp, #0
 8008586:	4680      	mov	r8, r0
 8008588:	4689      	mov	r9, r1
 800858a:	dd70      	ble.n	800866e <__kernel_rem_pio2+0x24a>
 800858c:	1e72      	subs	r2, r6, #1
 800858e:	ab0c      	add	r3, sp, #48	; 0x30
 8008590:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008594:	9c04      	ldr	r4, [sp, #16]
 8008596:	f1cb 0118 	rsb	r1, fp, #24
 800859a:	fa40 f301 	asr.w	r3, r0, r1
 800859e:	441c      	add	r4, r3
 80085a0:	408b      	lsls	r3, r1
 80085a2:	1ac0      	subs	r0, r0, r3
 80085a4:	ab0c      	add	r3, sp, #48	; 0x30
 80085a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80085aa:	f1cb 0317 	rsb	r3, fp, #23
 80085ae:	9404      	str	r4, [sp, #16]
 80085b0:	fa40 f303 	asr.w	r3, r0, r3
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dd66      	ble.n	800868a <__kernel_rem_pio2+0x266>
 80085bc:	2200      	movs	r2, #0
 80085be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80085c2:	4614      	mov	r4, r2
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	4296      	cmp	r6, r2
 80085cc:	f300 80ac 	bgt.w	8008728 <__kernel_rem_pio2+0x304>
 80085d0:	f1bb 0f00 	cmp.w	fp, #0
 80085d4:	dd07      	ble.n	80085e6 <__kernel_rem_pio2+0x1c2>
 80085d6:	f1bb 0f01 	cmp.w	fp, #1
 80085da:	f000 80b4 	beq.w	8008746 <__kernel_rem_pio2+0x322>
 80085de:	f1bb 0f02 	cmp.w	fp, #2
 80085e2:	f000 80ba 	beq.w	800875a <__kernel_rem_pio2+0x336>
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d14e      	bne.n	800868a <__kernel_rem_pio2+0x266>
 80085ec:	4642      	mov	r2, r8
 80085ee:	464b      	mov	r3, r9
 80085f0:	2000      	movs	r0, #0
 80085f2:	4948      	ldr	r1, [pc, #288]	; (8008714 <__kernel_rem_pio2+0x2f0>)
 80085f4:	f7f7 fe1c 	bl	8000230 <__aeabi_dsub>
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	d044      	beq.n	800868a <__kernel_rem_pio2+0x266>
 8008600:	465a      	mov	r2, fp
 8008602:	2000      	movs	r0, #0
 8008604:	4943      	ldr	r1, [pc, #268]	; (8008714 <__kernel_rem_pio2+0x2f0>)
 8008606:	f000 fb87 	bl	8008d18 <scalbn>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4640      	mov	r0, r8
 8008610:	4649      	mov	r1, r9
 8008612:	f7f7 fe0d 	bl	8000230 <__aeabi_dsub>
 8008616:	4680      	mov	r8, r0
 8008618:	4689      	mov	r9, r1
 800861a:	e036      	b.n	800868a <__kernel_rem_pio2+0x266>
 800861c:	2200      	movs	r2, #0
 800861e:	4b3e      	ldr	r3, [pc, #248]	; (8008718 <__kernel_rem_pio2+0x2f4>)
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f7 ffbc 	bl	80005a0 <__aeabi_dmul>
 8008628:	f7f8 fa54 	bl	8000ad4 <__aeabi_d2iz>
 800862c:	f7f7 ff4e 	bl	80004cc <__aeabi_i2d>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008638:	2200      	movs	r2, #0
 800863a:	4b38      	ldr	r3, [pc, #224]	; (800871c <__kernel_rem_pio2+0x2f8>)
 800863c:	f7f7 ffb0 	bl	80005a0 <__aeabi_dmul>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f7 fdf2 	bl	8000230 <__aeabi_dsub>
 800864c:	f7f8 fa42 	bl	8000ad4 <__aeabi_d2iz>
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	f109 39ff 	add.w	r9, r9, #4294967295
 8008656:	f843 0b04 	str.w	r0, [r3], #4
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008660:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008664:	f7f7 fde6 	bl	8000234 <__adddf3>
 8008668:	4604      	mov	r4, r0
 800866a:	460d      	mov	r5, r1
 800866c:	e75f      	b.n	800852e <__kernel_rem_pio2+0x10a>
 800866e:	d105      	bne.n	800867c <__kernel_rem_pio2+0x258>
 8008670:	1e73      	subs	r3, r6, #1
 8008672:	aa0c      	add	r2, sp, #48	; 0x30
 8008674:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008678:	15c3      	asrs	r3, r0, #23
 800867a:	e79b      	b.n	80085b4 <__kernel_rem_pio2+0x190>
 800867c:	2200      	movs	r2, #0
 800867e:	4b28      	ldr	r3, [pc, #160]	; (8008720 <__kernel_rem_pio2+0x2fc>)
 8008680:	f7f8 fa14 	bl	8000aac <__aeabi_dcmpge>
 8008684:	2800      	cmp	r0, #0
 8008686:	d13e      	bne.n	8008706 <__kernel_rem_pio2+0x2e2>
 8008688:	9000      	str	r0, [sp, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f7f8 f9ed 	bl	8000a70 <__aeabi_dcmpeq>
 8008696:	2800      	cmp	r0, #0
 8008698:	f000 80b1 	beq.w	80087fe <__kernel_rem_pio2+0x3da>
 800869c:	1e74      	subs	r4, r6, #1
 800869e:	4623      	mov	r3, r4
 80086a0:	2200      	movs	r2, #0
 80086a2:	9902      	ldr	r1, [sp, #8]
 80086a4:	428b      	cmp	r3, r1
 80086a6:	da5f      	bge.n	8008768 <__kernel_rem_pio2+0x344>
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	d074      	beq.n	8008796 <__kernel_rem_pio2+0x372>
 80086ac:	ab0c      	add	r3, sp, #48	; 0x30
 80086ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80086b2:	f1ab 0b18 	sub.w	fp, fp, #24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 809f 	beq.w	80087fa <__kernel_rem_pio2+0x3d6>
 80086bc:	465a      	mov	r2, fp
 80086be:	2000      	movs	r0, #0
 80086c0:	4914      	ldr	r1, [pc, #80]	; (8008714 <__kernel_rem_pio2+0x2f0>)
 80086c2:	f000 fb29 	bl	8008d18 <scalbn>
 80086c6:	46a2      	mov	sl, r4
 80086c8:	4606      	mov	r6, r0
 80086ca:	460f      	mov	r7, r1
 80086cc:	f04f 0800 	mov.w	r8, #0
 80086d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80086d2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008718 <__kernel_rem_pio2+0x2f4>
 80086d6:	00e5      	lsls	r5, r4, #3
 80086d8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80086dc:	f1ba 0f00 	cmp.w	sl, #0
 80086e0:	f280 80c3 	bge.w	800886a <__kernel_rem_pio2+0x446>
 80086e4:	4626      	mov	r6, r4
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	f2c0 80f5 	blt.w	80088d6 <__kernel_rem_pio2+0x4b2>
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <__kernel_rem_pio2+0x300>)
 80086ee:	f04f 0a00 	mov.w	sl, #0
 80086f2:	9307      	str	r3, [sp, #28]
 80086f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80086f6:	f04f 0b00 	mov.w	fp, #0
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008702:	1ba7      	subs	r7, r4, r6
 8008704:	e0db      	b.n	80088be <__kernel_rem_pio2+0x49a>
 8008706:	2302      	movs	r3, #2
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	e757      	b.n	80085bc <__kernel_rem_pio2+0x198>
 800870c:	08009160 	.word	0x08009160
 8008710:	40200000 	.word	0x40200000
 8008714:	3ff00000 	.word	0x3ff00000
 8008718:	3e700000 	.word	0x3e700000
 800871c:	41700000 	.word	0x41700000
 8008720:	3fe00000 	.word	0x3fe00000
 8008724:	08009120 	.word	0x08009120
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	b944      	cbnz	r4, 800873e <__kernel_rem_pio2+0x31a>
 800872c:	b11b      	cbz	r3, 8008736 <__kernel_rem_pio2+0x312>
 800872e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	2301      	movs	r3, #1
 8008736:	461c      	mov	r4, r3
 8008738:	3201      	adds	r2, #1
 800873a:	3704      	adds	r7, #4
 800873c:	e745      	b.n	80085ca <__kernel_rem_pio2+0x1a6>
 800873e:	1acb      	subs	r3, r1, r3
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4623      	mov	r3, r4
 8008744:	e7f7      	b.n	8008736 <__kernel_rem_pio2+0x312>
 8008746:	1e72      	subs	r2, r6, #1
 8008748:	ab0c      	add	r3, sp, #48	; 0x30
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008752:	a90c      	add	r1, sp, #48	; 0x30
 8008754:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008758:	e745      	b.n	80085e6 <__kernel_rem_pio2+0x1c2>
 800875a:	1e72      	subs	r2, r6, #1
 800875c:	ab0c      	add	r3, sp, #48	; 0x30
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008766:	e7f4      	b.n	8008752 <__kernel_rem_pio2+0x32e>
 8008768:	a90c      	add	r1, sp, #48	; 0x30
 800876a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800876e:	3b01      	subs	r3, #1
 8008770:	430a      	orrs	r2, r1
 8008772:	e796      	b.n	80086a2 <__kernel_rem_pio2+0x27e>
 8008774:	3401      	adds	r4, #1
 8008776:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800877a:	2a00      	cmp	r2, #0
 800877c:	d0fa      	beq.n	8008774 <__kernel_rem_pio2+0x350>
 800877e:	9b08      	ldr	r3, [sp, #32]
 8008780:	f106 0801 	add.w	r8, r6, #1
 8008784:	18f5      	adds	r5, r6, r3
 8008786:	ab20      	add	r3, sp, #128	; 0x80
 8008788:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800878c:	4434      	add	r4, r6
 800878e:	4544      	cmp	r4, r8
 8008790:	da04      	bge.n	800879c <__kernel_rem_pio2+0x378>
 8008792:	4626      	mov	r6, r4
 8008794:	e6bf      	b.n	8008516 <__kernel_rem_pio2+0xf2>
 8008796:	2401      	movs	r4, #1
 8008798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879a:	e7ec      	b.n	8008776 <__kernel_rem_pio2+0x352>
 800879c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879e:	f04f 0900 	mov.w	r9, #0
 80087a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80087a6:	f7f7 fe91 	bl	80004cc <__aeabi_i2d>
 80087aa:	2600      	movs	r6, #0
 80087ac:	2700      	movs	r7, #0
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	e9c5 0100 	strd	r0, r1, [r5]
 80087b4:	3b08      	subs	r3, #8
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	9504      	str	r5, [sp, #16]
 80087ba:	9b07      	ldr	r3, [sp, #28]
 80087bc:	4599      	cmp	r9, r3
 80087be:	dd05      	ble.n	80087cc <__kernel_rem_pio2+0x3a8>
 80087c0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80087c4:	f108 0801 	add.w	r8, r8, #1
 80087c8:	3508      	adds	r5, #8
 80087ca:	e7e0      	b.n	800878e <__kernel_rem_pio2+0x36a>
 80087cc:	f8dd c010 	ldr.w	ip, [sp, #16]
 80087d0:	9900      	ldr	r1, [sp, #0]
 80087d2:	f109 0901 	add.w	r9, r9, #1
 80087d6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80087da:	9100      	str	r1, [sp, #0]
 80087dc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80087e0:	f8cd c010 	str.w	ip, [sp, #16]
 80087e4:	f7f7 fedc 	bl	80005a0 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	f7f7 fd20 	bl	8000234 <__adddf3>
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	e7df      	b.n	80087ba <__kernel_rem_pio2+0x396>
 80087fa:	3c01      	subs	r4, #1
 80087fc:	e756      	b.n	80086ac <__kernel_rem_pio2+0x288>
 80087fe:	f1cb 0200 	rsb	r2, fp, #0
 8008802:	4640      	mov	r0, r8
 8008804:	4649      	mov	r1, r9
 8008806:	f000 fa87 	bl	8008d18 <scalbn>
 800880a:	2200      	movs	r2, #0
 800880c:	4ba4      	ldr	r3, [pc, #656]	; (8008aa0 <__kernel_rem_pio2+0x67c>)
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	f7f8 f94b 	bl	8000aac <__aeabi_dcmpge>
 8008816:	b1f8      	cbz	r0, 8008858 <__kernel_rem_pio2+0x434>
 8008818:	2200      	movs	r2, #0
 800881a:	4ba2      	ldr	r3, [pc, #648]	; (8008aa4 <__kernel_rem_pio2+0x680>)
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f7f7 febe 	bl	80005a0 <__aeabi_dmul>
 8008824:	f7f8 f956 	bl	8000ad4 <__aeabi_d2iz>
 8008828:	4607      	mov	r7, r0
 800882a:	f7f7 fe4f 	bl	80004cc <__aeabi_i2d>
 800882e:	2200      	movs	r2, #0
 8008830:	4b9b      	ldr	r3, [pc, #620]	; (8008aa0 <__kernel_rem_pio2+0x67c>)
 8008832:	f7f7 feb5 	bl	80005a0 <__aeabi_dmul>
 8008836:	460b      	mov	r3, r1
 8008838:	4602      	mov	r2, r0
 800883a:	4629      	mov	r1, r5
 800883c:	4620      	mov	r0, r4
 800883e:	f7f7 fcf7 	bl	8000230 <__aeabi_dsub>
 8008842:	f7f8 f947 	bl	8000ad4 <__aeabi_d2iz>
 8008846:	1c74      	adds	r4, r6, #1
 8008848:	ab0c      	add	r3, sp, #48	; 0x30
 800884a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800884e:	f10b 0b18 	add.w	fp, fp, #24
 8008852:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008856:	e731      	b.n	80086bc <__kernel_rem_pio2+0x298>
 8008858:	4620      	mov	r0, r4
 800885a:	4629      	mov	r1, r5
 800885c:	f7f8 f93a 	bl	8000ad4 <__aeabi_d2iz>
 8008860:	ab0c      	add	r3, sp, #48	; 0x30
 8008862:	4634      	mov	r4, r6
 8008864:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008868:	e728      	b.n	80086bc <__kernel_rem_pio2+0x298>
 800886a:	ab0c      	add	r3, sp, #48	; 0x30
 800886c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008870:	f7f7 fe2c 	bl	80004cc <__aeabi_i2d>
 8008874:	4632      	mov	r2, r6
 8008876:	463b      	mov	r3, r7
 8008878:	f7f7 fe92 	bl	80005a0 <__aeabi_dmul>
 800887c:	4642      	mov	r2, r8
 800887e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008882:	464b      	mov	r3, r9
 8008884:	4630      	mov	r0, r6
 8008886:	4639      	mov	r1, r7
 8008888:	f7f7 fe8a 	bl	80005a0 <__aeabi_dmul>
 800888c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	e722      	b.n	80086dc <__kernel_rem_pio2+0x2b8>
 8008896:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800889a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800889e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80088a2:	f8cd c01c 	str.w	ip, [sp, #28]
 80088a6:	f7f7 fe7b 	bl	80005a0 <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4650      	mov	r0, sl
 80088b0:	4659      	mov	r1, fp
 80088b2:	f7f7 fcbf 	bl	8000234 <__adddf3>
 80088b6:	4682      	mov	sl, r0
 80088b8:	468b      	mov	fp, r1
 80088ba:	f108 0801 	add.w	r8, r8, #1
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	4598      	cmp	r8, r3
 80088c2:	dc01      	bgt.n	80088c8 <__kernel_rem_pio2+0x4a4>
 80088c4:	45b8      	cmp	r8, r7
 80088c6:	dde6      	ble.n	8008896 <__kernel_rem_pio2+0x472>
 80088c8:	ab48      	add	r3, sp, #288	; 0x120
 80088ca:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80088ce:	e9c7 ab00 	strd	sl, fp, [r7]
 80088d2:	3e01      	subs	r6, #1
 80088d4:	e707      	b.n	80086e6 <__kernel_rem_pio2+0x2c2>
 80088d6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80088d8:	2b02      	cmp	r3, #2
 80088da:	dc09      	bgt.n	80088f0 <__kernel_rem_pio2+0x4cc>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dc32      	bgt.n	8008946 <__kernel_rem_pio2+0x522>
 80088e0:	d05a      	beq.n	8008998 <__kernel_rem_pio2+0x574>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	f003 0007 	and.w	r0, r3, #7
 80088e8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80088ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d1f5      	bne.n	80088e2 <__kernel_rem_pio2+0x4be>
 80088f6:	ab48      	add	r3, sp, #288	; 0x120
 80088f8:	441d      	add	r5, r3
 80088fa:	46aa      	mov	sl, r5
 80088fc:	46a3      	mov	fp, r4
 80088fe:	f1bb 0f00 	cmp.w	fp, #0
 8008902:	dc76      	bgt.n	80089f2 <__kernel_rem_pio2+0x5ce>
 8008904:	46aa      	mov	sl, r5
 8008906:	46a3      	mov	fp, r4
 8008908:	f1bb 0f01 	cmp.w	fp, #1
 800890c:	f300 8090 	bgt.w	8008a30 <__kernel_rem_pio2+0x60c>
 8008910:	2700      	movs	r7, #0
 8008912:	463e      	mov	r6, r7
 8008914:	2c01      	cmp	r4, #1
 8008916:	f300 80aa 	bgt.w	8008a6e <__kernel_rem_pio2+0x64a>
 800891a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800891e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008922:	9b00      	ldr	r3, [sp, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 80ac 	bne.w	8008a82 <__kernel_rem_pio2+0x65e>
 800892a:	4603      	mov	r3, r0
 800892c:	462a      	mov	r2, r5
 800892e:	9806      	ldr	r0, [sp, #24]
 8008930:	e9c0 2300 	strd	r2, r3, [r0]
 8008934:	4622      	mov	r2, r4
 8008936:	460b      	mov	r3, r1
 8008938:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800893c:	463a      	mov	r2, r7
 800893e:	4633      	mov	r3, r6
 8008940:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008944:	e7cd      	b.n	80088e2 <__kernel_rem_pio2+0x4be>
 8008946:	2000      	movs	r0, #0
 8008948:	46a0      	mov	r8, r4
 800894a:	4601      	mov	r1, r0
 800894c:	ab48      	add	r3, sp, #288	; 0x120
 800894e:	441d      	add	r5, r3
 8008950:	f1b8 0f00 	cmp.w	r8, #0
 8008954:	da3a      	bge.n	80089cc <__kernel_rem_pio2+0x5a8>
 8008956:	9b00      	ldr	r3, [sp, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d03e      	beq.n	80089da <__kernel_rem_pio2+0x5b6>
 800895c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008960:	4602      	mov	r2, r0
 8008962:	462b      	mov	r3, r5
 8008964:	9d06      	ldr	r5, [sp, #24]
 8008966:	2601      	movs	r6, #1
 8008968:	e9c5 2300 	strd	r2, r3, [r5]
 800896c:	460b      	mov	r3, r1
 800896e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008972:	f7f7 fc5d 	bl	8000230 <__aeabi_dsub>
 8008976:	4684      	mov	ip, r0
 8008978:	460f      	mov	r7, r1
 800897a:	ad48      	add	r5, sp, #288	; 0x120
 800897c:	42b4      	cmp	r4, r6
 800897e:	f105 0508 	add.w	r5, r5, #8
 8008982:	da2c      	bge.n	80089de <__kernel_rem_pio2+0x5ba>
 8008984:	9b00      	ldr	r3, [sp, #0]
 8008986:	b10b      	cbz	r3, 800898c <__kernel_rem_pio2+0x568>
 8008988:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800898c:	4662      	mov	r2, ip
 800898e:	463b      	mov	r3, r7
 8008990:	9906      	ldr	r1, [sp, #24]
 8008992:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008996:	e7a4      	b.n	80088e2 <__kernel_rem_pio2+0x4be>
 8008998:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800899a:	ab48      	add	r3, sp, #288	; 0x120
 800899c:	4637      	mov	r7, r6
 800899e:	441d      	add	r5, r3
 80089a0:	2c00      	cmp	r4, #0
 80089a2:	da09      	bge.n	80089b8 <__kernel_rem_pio2+0x594>
 80089a4:	9b00      	ldr	r3, [sp, #0]
 80089a6:	b10b      	cbz	r3, 80089ac <__kernel_rem_pio2+0x588>
 80089a8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80089ac:	4632      	mov	r2, r6
 80089ae:	463b      	mov	r3, r7
 80089b0:	9906      	ldr	r1, [sp, #24]
 80089b2:	e9c1 2300 	strd	r2, r3, [r1]
 80089b6:	e794      	b.n	80088e2 <__kernel_rem_pio2+0x4be>
 80089b8:	4630      	mov	r0, r6
 80089ba:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f7 fc38 	bl	8000234 <__adddf3>
 80089c4:	3c01      	subs	r4, #1
 80089c6:	4606      	mov	r6, r0
 80089c8:	460f      	mov	r7, r1
 80089ca:	e7e9      	b.n	80089a0 <__kernel_rem_pio2+0x57c>
 80089cc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80089d0:	f7f7 fc30 	bl	8000234 <__adddf3>
 80089d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80089d8:	e7ba      	b.n	8008950 <__kernel_rem_pio2+0x52c>
 80089da:	460d      	mov	r5, r1
 80089dc:	e7c0      	b.n	8008960 <__kernel_rem_pio2+0x53c>
 80089de:	4660      	mov	r0, ip
 80089e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 fc25 	bl	8000234 <__adddf3>
 80089ea:	3601      	adds	r6, #1
 80089ec:	4684      	mov	ip, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	e7c4      	b.n	800897c <__kernel_rem_pio2+0x558>
 80089f2:	e9da 6700 	ldrd	r6, r7, [sl]
 80089f6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80089fa:	4632      	mov	r2, r6
 80089fc:	463b      	mov	r3, r7
 80089fe:	4640      	mov	r0, r8
 8008a00:	4649      	mov	r1, r9
 8008a02:	f7f7 fc17 	bl	8000234 <__adddf3>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a0e:	4640      	mov	r0, r8
 8008a10:	4649      	mov	r1, r9
 8008a12:	f7f7 fc0d 	bl	8000230 <__aeabi_dsub>
 8008a16:	4632      	mov	r2, r6
 8008a18:	463b      	mov	r3, r7
 8008a1a:	f7f7 fc0b 	bl	8000234 <__adddf3>
 8008a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a22:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008a26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a2a:	e9ca 2300 	strd	r2, r3, [sl]
 8008a2e:	e766      	b.n	80088fe <__kernel_rem_pio2+0x4da>
 8008a30:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a34:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008a38:	4642      	mov	r2, r8
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	4639      	mov	r1, r7
 8008a40:	f7f7 fbf8 	bl	8000234 <__adddf3>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4639      	mov	r1, r7
 8008a50:	f7f7 fbee 	bl	8000230 <__aeabi_dsub>
 8008a54:	4642      	mov	r2, r8
 8008a56:	464b      	mov	r3, r9
 8008a58:	f7f7 fbec 	bl	8000234 <__adddf3>
 8008a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a60:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008a64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a68:	e9ca 2300 	strd	r2, r3, [sl]
 8008a6c:	e74c      	b.n	8008908 <__kernel_rem_pio2+0x4e4>
 8008a6e:	4638      	mov	r0, r7
 8008a70:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008a74:	4631      	mov	r1, r6
 8008a76:	f7f7 fbdd 	bl	8000234 <__adddf3>
 8008a7a:	3c01      	subs	r4, #1
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	460e      	mov	r6, r1
 8008a80:	e748      	b.n	8008914 <__kernel_rem_pio2+0x4f0>
 8008a82:	9b06      	ldr	r3, [sp, #24]
 8008a84:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008a88:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008a8c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008a90:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8008a94:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008a98:	601d      	str	r5, [r3, #0]
 8008a9a:	615e      	str	r6, [r3, #20]
 8008a9c:	e721      	b.n	80088e2 <__kernel_rem_pio2+0x4be>
 8008a9e:	bf00      	nop
 8008aa0:	41700000 	.word	0x41700000
 8008aa4:	3e700000 	.word	0x3e700000

08008aa8 <__kernel_sin>:
 8008aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	b086      	sub	sp, #24
 8008aae:	e9cd 2300 	strd	r2, r3, [sp]
 8008ab2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ab6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008aba:	4682      	mov	sl, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008ac0:	da03      	bge.n	8008aca <__kernel_sin+0x22>
 8008ac2:	f7f8 f807 	bl	8000ad4 <__aeabi_d2iz>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d050      	beq.n	8008b6c <__kernel_sin+0xc4>
 8008aca:	4652      	mov	r2, sl
 8008acc:	4623      	mov	r3, r4
 8008ace:	4650      	mov	r0, sl
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7f7 fd65 	bl	80005a0 <__aeabi_dmul>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f7f7 fd5d 	bl	80005a0 <__aeabi_dmul>
 8008ae6:	a33e      	add	r3, pc, #248	; (adr r3, 8008be0 <__kernel_sin+0x138>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	4680      	mov	r8, r0
 8008aee:	4689      	mov	r9, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fd54 	bl	80005a0 <__aeabi_dmul>
 8008af8:	a33b      	add	r3, pc, #236	; (adr r3, 8008be8 <__kernel_sin+0x140>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fb97 	bl	8000230 <__aeabi_dsub>
 8008b02:	4632      	mov	r2, r6
 8008b04:	463b      	mov	r3, r7
 8008b06:	f7f7 fd4b 	bl	80005a0 <__aeabi_dmul>
 8008b0a:	a339      	add	r3, pc, #228	; (adr r3, 8008bf0 <__kernel_sin+0x148>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fb90 	bl	8000234 <__adddf3>
 8008b14:	4632      	mov	r2, r6
 8008b16:	463b      	mov	r3, r7
 8008b18:	f7f7 fd42 	bl	80005a0 <__aeabi_dmul>
 8008b1c:	a336      	add	r3, pc, #216	; (adr r3, 8008bf8 <__kernel_sin+0x150>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f7f7 fb85 	bl	8000230 <__aeabi_dsub>
 8008b26:	4632      	mov	r2, r6
 8008b28:	463b      	mov	r3, r7
 8008b2a:	f7f7 fd39 	bl	80005a0 <__aeabi_dmul>
 8008b2e:	a334      	add	r3, pc, #208	; (adr r3, 8008c00 <__kernel_sin+0x158>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fb7e 	bl	8000234 <__adddf3>
 8008b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b3c:	b9dd      	cbnz	r5, 8008b76 <__kernel_sin+0xce>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 fd2b 	bl	80005a0 <__aeabi_dmul>
 8008b4a:	a32f      	add	r3, pc, #188	; (adr r3, 8008c08 <__kernel_sin+0x160>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fb6e 	bl	8000230 <__aeabi_dsub>
 8008b54:	4642      	mov	r2, r8
 8008b56:	464b      	mov	r3, r9
 8008b58:	f7f7 fd22 	bl	80005a0 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4650      	mov	r0, sl
 8008b62:	4621      	mov	r1, r4
 8008b64:	f7f7 fb66 	bl	8000234 <__adddf3>
 8008b68:	4682      	mov	sl, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	4621      	mov	r1, r4
 8008b70:	b006      	add	sp, #24
 8008b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b76:	2200      	movs	r2, #0
 8008b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b7c:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <__kernel_sin+0x168>)
 8008b7e:	f7f7 fd0f 	bl	80005a0 <__aeabi_dmul>
 8008b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	f7f7 fd07 	bl	80005a0 <__aeabi_dmul>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b9a:	f7f7 fb49 	bl	8000230 <__aeabi_dsub>
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	f7f7 fcfd 	bl	80005a0 <__aeabi_dmul>
 8008ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008baa:	f7f7 fb41 	bl	8000230 <__aeabi_dsub>
 8008bae:	a316      	add	r3, pc, #88	; (adr r3, 8008c08 <__kernel_sin+0x160>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	4640      	mov	r0, r8
 8008bba:	4649      	mov	r1, r9
 8008bbc:	f7f7 fcf0 	bl	80005a0 <__aeabi_dmul>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	f7f7 fb34 	bl	8000234 <__adddf3>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4650      	mov	r0, sl
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f7f7 fb2c 	bl	8000230 <__aeabi_dsub>
 8008bd8:	e7c6      	b.n	8008b68 <__kernel_sin+0xc0>
 8008bda:	bf00      	nop
 8008bdc:	f3af 8000 	nop.w
 8008be0:	5acfd57c 	.word	0x5acfd57c
 8008be4:	3de5d93a 	.word	0x3de5d93a
 8008be8:	8a2b9ceb 	.word	0x8a2b9ceb
 8008bec:	3e5ae5e6 	.word	0x3e5ae5e6
 8008bf0:	57b1fe7d 	.word	0x57b1fe7d
 8008bf4:	3ec71de3 	.word	0x3ec71de3
 8008bf8:	19c161d5 	.word	0x19c161d5
 8008bfc:	3f2a01a0 	.word	0x3f2a01a0
 8008c00:	1110f8a6 	.word	0x1110f8a6
 8008c04:	3f811111 	.word	0x3f811111
 8008c08:	55555549 	.word	0x55555549
 8008c0c:	3fc55555 	.word	0x3fc55555
 8008c10:	3fe00000 	.word	0x3fe00000
 8008c14:	00000000 	.word	0x00000000

08008c18 <floor>:
 8008c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c1c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008c20:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008c24:	2e13      	cmp	r6, #19
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	4605      	mov	r5, r0
 8008c30:	dc33      	bgt.n	8008c9a <floor+0x82>
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	da14      	bge.n	8008c60 <floor+0x48>
 8008c36:	a334      	add	r3, pc, #208	; (adr r3, 8008d08 <floor+0xf0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fafa 	bl	8000234 <__adddf3>
 8008c40:	2200      	movs	r2, #0
 8008c42:	2300      	movs	r3, #0
 8008c44:	f7f7 ff3c 	bl	8000ac0 <__aeabi_dcmpgt>
 8008c48:	b138      	cbz	r0, 8008c5a <floor+0x42>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	da58      	bge.n	8008d00 <floor+0xe8>
 8008c4e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008c52:	431d      	orrs	r5, r3
 8008c54:	d001      	beq.n	8008c5a <floor+0x42>
 8008c56:	2500      	movs	r5, #0
 8008c58:	4c2d      	ldr	r4, [pc, #180]	; (8008d10 <floor+0xf8>)
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	462f      	mov	r7, r5
 8008c5e:	e025      	b.n	8008cac <floor+0x94>
 8008c60:	4a2c      	ldr	r2, [pc, #176]	; (8008d14 <floor+0xfc>)
 8008c62:	fa42 f806 	asr.w	r8, r2, r6
 8008c66:	ea01 0208 	and.w	r2, r1, r8
 8008c6a:	4302      	orrs	r2, r0
 8008c6c:	d01e      	beq.n	8008cac <floor+0x94>
 8008c6e:	a326      	add	r3, pc, #152	; (adr r3, 8008d08 <floor+0xf0>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 fade 	bl	8000234 <__adddf3>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f7f7 ff20 	bl	8000ac0 <__aeabi_dcmpgt>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d0ea      	beq.n	8008c5a <floor+0x42>
 8008c84:	2c00      	cmp	r4, #0
 8008c86:	bfbe      	ittt	lt
 8008c88:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008c8c:	fa43 f606 	asrlt.w	r6, r3, r6
 8008c90:	19a4      	addlt	r4, r4, r6
 8008c92:	2500      	movs	r5, #0
 8008c94:	ea24 0408 	bic.w	r4, r4, r8
 8008c98:	e7df      	b.n	8008c5a <floor+0x42>
 8008c9a:	2e33      	cmp	r6, #51	; 0x33
 8008c9c:	dd0a      	ble.n	8008cb4 <floor+0x9c>
 8008c9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ca2:	d103      	bne.n	8008cac <floor+0x94>
 8008ca4:	f7f7 fac6 	bl	8000234 <__adddf3>
 8008ca8:	4607      	mov	r7, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4638      	mov	r0, r7
 8008cae:	4619      	mov	r1, r3
 8008cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008cbc:	fa22 f808 	lsr.w	r8, r2, r8
 8008cc0:	ea18 0f00 	tst.w	r8, r0
 8008cc4:	d0f2      	beq.n	8008cac <floor+0x94>
 8008cc6:	a310      	add	r3, pc, #64	; (adr r3, 8008d08 <floor+0xf0>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 fab2 	bl	8000234 <__adddf3>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f7f7 fef4 	bl	8000ac0 <__aeabi_dcmpgt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d0be      	beq.n	8008c5a <floor+0x42>
 8008cdc:	2c00      	cmp	r4, #0
 8008cde:	da02      	bge.n	8008ce6 <floor+0xce>
 8008ce0:	2e14      	cmp	r6, #20
 8008ce2:	d103      	bne.n	8008cec <floor+0xd4>
 8008ce4:	3401      	adds	r4, #1
 8008ce6:	ea25 0508 	bic.w	r5, r5, r8
 8008cea:	e7b6      	b.n	8008c5a <floor+0x42>
 8008cec:	2301      	movs	r3, #1
 8008cee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008cf2:	fa03 f606 	lsl.w	r6, r3, r6
 8008cf6:	4435      	add	r5, r6
 8008cf8:	42bd      	cmp	r5, r7
 8008cfa:	bf38      	it	cc
 8008cfc:	18e4      	addcc	r4, r4, r3
 8008cfe:	e7f2      	b.n	8008ce6 <floor+0xce>
 8008d00:	2500      	movs	r5, #0
 8008d02:	462c      	mov	r4, r5
 8008d04:	e7a9      	b.n	8008c5a <floor+0x42>
 8008d06:	bf00      	nop
 8008d08:	8800759c 	.word	0x8800759c
 8008d0c:	7e37e43c 	.word	0x7e37e43c
 8008d10:	bff00000 	.word	0xbff00000
 8008d14:	000fffff 	.word	0x000fffff

08008d18 <scalbn>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008d1e:	4604      	mov	r4, r0
 8008d20:	460d      	mov	r5, r1
 8008d22:	4617      	mov	r7, r2
 8008d24:	460b      	mov	r3, r1
 8008d26:	b996      	cbnz	r6, 8008d4e <scalbn+0x36>
 8008d28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d2c:	4303      	orrs	r3, r0
 8008d2e:	d039      	beq.n	8008da4 <scalbn+0x8c>
 8008d30:	4b33      	ldr	r3, [pc, #204]	; (8008e00 <scalbn+0xe8>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	f7f7 fc34 	bl	80005a0 <__aeabi_dmul>
 8008d38:	4b32      	ldr	r3, [pc, #200]	; (8008e04 <scalbn+0xec>)
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	429f      	cmp	r7, r3
 8008d3e:	460d      	mov	r5, r1
 8008d40:	da0f      	bge.n	8008d62 <scalbn+0x4a>
 8008d42:	a32b      	add	r3, pc, #172	; (adr r3, 8008df0 <scalbn+0xd8>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fc2a 	bl	80005a0 <__aeabi_dmul>
 8008d4c:	e006      	b.n	8008d5c <scalbn+0x44>
 8008d4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008d52:	4296      	cmp	r6, r2
 8008d54:	d10a      	bne.n	8008d6c <scalbn+0x54>
 8008d56:	4602      	mov	r2, r0
 8008d58:	f7f7 fa6c 	bl	8000234 <__adddf3>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	460d      	mov	r5, r1
 8008d60:	e020      	b.n	8008da4 <scalbn+0x8c>
 8008d62:	460b      	mov	r3, r1
 8008d64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008d68:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008d6c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008d70:	19b9      	adds	r1, r7, r6
 8008d72:	4291      	cmp	r1, r2
 8008d74:	dd0e      	ble.n	8008d94 <scalbn+0x7c>
 8008d76:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008d7a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008d7e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008d82:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008d86:	4820      	ldr	r0, [pc, #128]	; (8008e08 <scalbn+0xf0>)
 8008d88:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008d8c:	a31a      	add	r3, pc, #104	; (adr r3, 8008df8 <scalbn+0xe0>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	e7d9      	b.n	8008d48 <scalbn+0x30>
 8008d94:	2900      	cmp	r1, #0
 8008d96:	dd08      	ble.n	8008daa <scalbn+0x92>
 8008d98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008da0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008da4:	4620      	mov	r0, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008daa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008dae:	da12      	bge.n	8008dd6 <scalbn+0xbe>
 8008db0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008db4:	429f      	cmp	r7, r3
 8008db6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008dba:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008dbe:	dcdc      	bgt.n	8008d7a <scalbn+0x62>
 8008dc0:	a30b      	add	r3, pc, #44	; (adr r3, 8008df0 <scalbn+0xd8>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008dca:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008dce:	480f      	ldr	r0, [pc, #60]	; (8008e0c <scalbn+0xf4>)
 8008dd0:	f041 011f 	orr.w	r1, r1, #31
 8008dd4:	e7b8      	b.n	8008d48 <scalbn+0x30>
 8008dd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dda:	3136      	adds	r1, #54	; 0x36
 8008ddc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008de0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	2200      	movs	r2, #0
 8008dea:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <scalbn+0xf8>)
 8008dec:	e7ac      	b.n	8008d48 <scalbn+0x30>
 8008dee:	bf00      	nop
 8008df0:	c2f8f359 	.word	0xc2f8f359
 8008df4:	01a56e1f 	.word	0x01a56e1f
 8008df8:	8800759c 	.word	0x8800759c
 8008dfc:	7e37e43c 	.word	0x7e37e43c
 8008e00:	43500000 	.word	0x43500000
 8008e04:	ffff3cb0 	.word	0xffff3cb0
 8008e08:	8800759c 	.word	0x8800759c
 8008e0c:	c2f8f359 	.word	0xc2f8f359
 8008e10:	3c900000 	.word	0x3c900000

08008e14 <_init>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr

08008e20 <_fini>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr
