
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800ceb8  0800ceb8  0001ceb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d830  0800d830  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800d830  0800d830  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d830  0800d830  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d830  0800d830  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d834  0800d834  0001d834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800d838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f64  20000088  0800d8c0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007fec  0800d8c0  00027fec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015410  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003710  00000000  00000000  000354c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00039fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca67  00000000  00000000  0003b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ad9  00000000  00000000  00057cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3a7  00000000  00000000  000717c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fb6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  0010fbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000088 	.word	0x20000088
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ce9c 	.word	0x0800ce9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000008c 	.word	0x2000008c
 8000224:	0800ce9c 	.word	0x0800ce9c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <Find_crash>:
extern Rectangle obstacles[5];			// area that depletes charge faster
extern Coordinate oppoBeacons[3];		// opponent charging station coordinate
extern Queue openlist;
extern List closelist;

uint8_t Find_crash(uint16_t cor, uint8_t flag) {
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	uint16_t x = cor / 256;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	81bb      	strh	r3, [r7, #12]
	uint16_t y = cor % 256;
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	817b      	strh	r3, [r7, #10]

	if (flag == 0) {
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <Find_crash+0x26>
		return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e109      	b.n	8001432 <Find_crash+0x23a>
	}
	if (flag == 1) {
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d151      	bne.n	80012c8 <Find_crash+0xd0>
		//walls
		if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	2b25      	cmp	r3, #37	; 0x25
 8001228:	d910      	bls.n	800124c <Find_crash+0x54>
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	2b28      	cmp	r3, #40	; 0x28
 800122e:	d80d      	bhi.n	800124c <Find_crash+0x54>
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	2b25      	cmp	r3, #37	; 0x25
 8001234:	d902      	bls.n	800123c <Find_crash+0x44>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	d905      	bls.n	8001248 <Find_crash+0x50>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b92      	cmp	r3, #146	; 0x92
 8001240:	d904      	bls.n	800124c <Find_crash+0x54>
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	2bd8      	cmp	r3, #216	; 0xd8
 8001246:	d801      	bhi.n	800124c <Find_crash+0x54>
			return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e0f2      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2bd5      	cmp	r3, #213	; 0xd5
 8001250:	d910      	bls.n	8001274 <Find_crash+0x7c>
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bd8      	cmp	r3, #216	; 0xd8
 8001256:	d80d      	bhi.n	8001274 <Find_crash+0x7c>
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b25      	cmp	r3, #37	; 0x25
 800125c:	d902      	bls.n	8001264 <Find_crash+0x6c>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	2b6b      	cmp	r3, #107	; 0x6b
 8001262:	d905      	bls.n	8001270 <Find_crash+0x78>
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b92      	cmp	r3, #146	; 0x92
 8001268:	d904      	bls.n	8001274 <Find_crash+0x7c>
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	2bd8      	cmp	r3, #216	; 0xd8
 800126e:	d801      	bhi.n	8001274 <Find_crash+0x7c>
			return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e0de      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	2b25      	cmp	r3, #37	; 0x25
 8001278:	d910      	bls.n	800129c <Find_crash+0xa4>
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	2b28      	cmp	r3, #40	; 0x28
 800127e:	d80d      	bhi.n	800129c <Find_crash+0xa4>
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d902      	bls.n	800128c <Find_crash+0x94>
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d905      	bls.n	8001298 <Find_crash+0xa0>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2b92      	cmp	r3, #146	; 0x92
 8001290:	d904      	bls.n	800129c <Find_crash+0xa4>
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2bd8      	cmp	r3, #216	; 0xd8
 8001296:	d801      	bhi.n	800129c <Find_crash+0xa4>
			return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e0ca      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2bd5      	cmp	r3, #213	; 0xd5
 80012a0:	d910      	bls.n	80012c4 <Find_crash+0xcc>
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2bd8      	cmp	r3, #216	; 0xd8
 80012a6:	d80d      	bhi.n	80012c4 <Find_crash+0xcc>
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	2b25      	cmp	r3, #37	; 0x25
 80012ac:	d902      	bls.n	80012b4 <Find_crash+0xbc>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	2b6b      	cmp	r3, #107	; 0x6b
 80012b2:	d905      	bls.n	80012c0 <Find_crash+0xc8>
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	2b92      	cmp	r3, #146	; 0x92
 80012b8:	d904      	bls.n	80012c4 <Find_crash+0xcc>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	2bd8      	cmp	r3, #216	; 0xd8
 80012be:	d801      	bhi.n	80012c4 <Find_crash+0xcc>
			return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b6      	b.n	8001432 <Find_crash+0x23a>
		}
		return 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0b4      	b.n	8001432 <Find_crash+0x23a>
	}
	//walls
	if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	2b25      	cmp	r3, #37	; 0x25
 80012cc:	d910      	bls.n	80012f0 <Find_crash+0xf8>
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	d80d      	bhi.n	80012f0 <Find_crash+0xf8>
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	2b25      	cmp	r3, #37	; 0x25
 80012d8:	d902      	bls.n	80012e0 <Find_crash+0xe8>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	2b6b      	cmp	r3, #107	; 0x6b
 80012de:	d905      	bls.n	80012ec <Find_crash+0xf4>
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	2b92      	cmp	r3, #146	; 0x92
 80012e4:	d904      	bls.n	80012f0 <Find_crash+0xf8>
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	2bd8      	cmp	r3, #216	; 0xd8
 80012ea:	d801      	bhi.n	80012f0 <Find_crash+0xf8>
		return 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0a0      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2bd5      	cmp	r3, #213	; 0xd5
 80012f4:	d910      	bls.n	8001318 <Find_crash+0x120>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	2bd8      	cmp	r3, #216	; 0xd8
 80012fa:	d80d      	bhi.n	8001318 <Find_crash+0x120>
 80012fc:	897b      	ldrh	r3, [r7, #10]
 80012fe:	2b25      	cmp	r3, #37	; 0x25
 8001300:	d902      	bls.n	8001308 <Find_crash+0x110>
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	2b6b      	cmp	r3, #107	; 0x6b
 8001306:	d905      	bls.n	8001314 <Find_crash+0x11c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	2b92      	cmp	r3, #146	; 0x92
 800130c:	d904      	bls.n	8001318 <Find_crash+0x120>
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	2bd8      	cmp	r3, #216	; 0xd8
 8001312:	d801      	bhi.n	8001318 <Find_crash+0x120>
		return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e08c      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b25      	cmp	r3, #37	; 0x25
 800131c:	d910      	bls.n	8001340 <Find_crash+0x148>
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	d80d      	bhi.n	8001340 <Find_crash+0x148>
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b25      	cmp	r3, #37	; 0x25
 8001328:	d902      	bls.n	8001330 <Find_crash+0x138>
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	2b6b      	cmp	r3, #107	; 0x6b
 800132e:	d905      	bls.n	800133c <Find_crash+0x144>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b92      	cmp	r3, #146	; 0x92
 8001334:	d904      	bls.n	8001340 <Find_crash+0x148>
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	2bd8      	cmp	r3, #216	; 0xd8
 800133a:	d801      	bhi.n	8001340 <Find_crash+0x148>
		return 0;
 800133c:	2300      	movs	r3, #0
 800133e:	e078      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	2bd5      	cmp	r3, #213	; 0xd5
 8001344:	d910      	bls.n	8001368 <Find_crash+0x170>
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d80d      	bhi.n	8001368 <Find_crash+0x170>
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	d902      	bls.n	8001358 <Find_crash+0x160>
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	2b6b      	cmp	r3, #107	; 0x6b
 8001356:	d905      	bls.n	8001364 <Find_crash+0x16c>
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b92      	cmp	r3, #146	; 0x92
 800135c:	d904      	bls.n	8001368 <Find_crash+0x170>
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	2bd8      	cmp	r3, #216	; 0xd8
 8001362:	d801      	bhi.n	8001368 <Find_crash+0x170>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e064      	b.n	8001432 <Find_crash+0x23a>
	}
	//obstacles
	for (uint8_t k = 0; k < 5; k++) {
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e026      	b.n	80013bc <Find_crash+0x1c4>
		if (x >= obstacles[k].coord1.x && y >= obstacles[k].coord1.y && x <= obstacles[k].coord2.x
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <Find_crash+0x244>)
 8001374:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 8001378:	4293      	cmp	r3, r2
 800137a:	db1c      	blt.n	80013b6 <Find_crash+0x1be>
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <Find_crash+0x244>)
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	db13      	blt.n	80013b6 <Find_crash+0x1be>
 800138e:	89ba      	ldrh	r2, [r7, #12]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <Find_crash+0x244>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dc0a      	bgt.n	80013b6 <Find_crash+0x1be>
				&& y <= obstacles[k].coord2.y) {
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4925      	ldr	r1, [pc, #148]	; (800143c <Find_crash+0x244>)
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <Find_crash+0x1be>
			return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e03d      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k < 5; k++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d9d5      	bls.n	800136e <Find_crash+0x176>
		}
	}
	// oppoBeacons
	for (uint8_t k = 0; k <= 2; k++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e030      	b.n	800142a <Find_crash+0x232>
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <Find_crash+0x248>)
 80013ce:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 80013d2:	1a9b      	subs	r3, r3, r2
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013d4:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013d6:	89ba      	ldrh	r2, [r7, #12]
 80013d8:	7bb9      	ldrb	r1, [r7, #14]
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <Find_crash+0x248>)
 80013dc:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 80013e0:	1a52      	subs	r2, r2, r1
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013e2:	b292      	uxth	r2, r2
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <Find_crash+0x248>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	b299      	uxth	r1, r3
 80013fc:	8978      	ldrh	r0, [r7, #10]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4c0f      	ldr	r4, [pc, #60]	; (8001440 <Find_crash+0x248>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4423      	add	r3, r4
 8001406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140a:	1ac3      	subs	r3, r0, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 8001414:	4413      	add	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
		if (distance <= 400) {
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	d801      	bhi.n	8001424 <Find_crash+0x22c>
			return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k <= 2; k++) {
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d9cb      	bls.n	80013c8 <Find_crash+0x1d0>
		}
	}
	return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	4770      	bx	lr
 800143c:	20000b88 	.word	0x20000b88
 8001440:	20000bbc 	.word	0x20000bbc

08001444 <cal_H>:

uint16_t cal_H(uint16_t cor1, uint16_t cor2) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
	return abs(x1 - x2) + abs(y1 - y2);
 800146c:	89fa      	ldrh	r2, [r7, #14]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <dir>:

int8_t dir(uint16_t cor1, uint16_t cor2) {
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	460a      	mov	r2, r1
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]
	return ((x2 - x1) + 2 * (y2 - y1));
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8939      	ldrh	r1, [r7, #8]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25b      	sxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <findend>:

uint8_t findend(uint16_t cur, uint16_t end, uint8_t step)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70fb      	strb	r3, [r7, #3]
	uint16_t x1 = cur / 256;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cur % 256;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = end / 256;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = end % 256;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	if (abs(x2 - x1) < step && abs(y2 - y1) < step)
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0b      	bge.n	800153c <findend+0x56>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	da01      	bge.n	800153c <findend+0x56>
	{
		return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <findend+0x58>
	}
	else
		return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Find_around_node>:

void Find_around_node(uint16_t currentindex, int8_t lastdir, A_Star_Node *end, uint8_t step) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	603a      	str	r2, [r7, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	717b      	strb	r3, [r7, #5]
 800155a:	4613      	mov	r3, r2
 800155c:	713b      	strb	r3, [r7, #4]
	uint16_t x = openlist.buffer[currentindex].cor / 256;
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	49b3      	ldr	r1, [pc, #716]	; (8001830 <Find_around_node+0x2e8>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t y = openlist.buffer[currentindex].cor % 256;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	49ad      	ldr	r1, [pc, #692]	; (8001830 <Find_around_node+0x2e8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t obstacleflag = 2;		//负责检测采取何种程度的避障
 800158e:	2302      	movs	r3, #2
 8001590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// left
	if (x >= step) {
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800159c:	429a      	cmp	r2, r3
 800159e:	f0c0 80a3 	bcc.w	80016e8 <Find_around_node+0x1a0>
		uint16_t curx = x - step;
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		uint16_t cury = y;
 80015b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t coordinateindex = curx * 256 + cury;
 80015b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c4:	4413      	add	r3, r2
 80015c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		if (Find_crash(coordinateindex, obstacleflag)) {
 80015ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80015ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe0f 	bl	80011f8 <Find_crash>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8083 	beq.w	80016e8 <Find_around_node+0x1a0>
			//not in close_list
			if (!findin_list(coordinateindex))
 80015e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fa7c 	bl	8004ae4 <findin_list>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17a      	bne.n	80016e8 <Find_around_node+0x1a0>
					{
				uint16_t index = findin_queue(coordinateindex);
 80015f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fa46 	bl	8004a88 <findin_queue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001602:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001606:	85bb      	strh	r3, [r7, #44]	; 0x2c
				newnode.fatherindex = currentindex;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	86fb      	strh	r3, [r7, #54]	; 0x36
				newnode.cost = openlist.buffer[currentindex].cost + step;
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <Find_around_node+0x2e8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800161e:	4623      	mov	r3, r4
 8001620:	461c      	mov	r4, r3
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff face 	bl	8000bd0 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800163a:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 800163e:	4623      	mov	r3, r4
 8001640:	461c      	mov	r4, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fef9 	bl	8001444 <cal_H>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb6f 	bl	8000d38 <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fab6 	bl	8000bd0 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	4970      	ldr	r1, [pc, #448]	; (8001830 <Find_around_node+0x2e8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff07 	bl	8001496 <dir>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <Find_around_node+0x17c>
						&& lastdir != 0)
 8001694:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <Find_around_node+0x17c>
					newnode.total += 10 * step;
 800169c:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80016a0:	4623      	mov	r3, r4
 80016a2:	461c      	mov	r4, r3
 80016a4:	793a      	ldrb	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb42 	bl	8000d38 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fa89 	bl	8000bd0 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (!index)	//not in open_list
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Find_around_node+0x190>
				{
					queue_append(&newnode);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 f901 	bl	80048d8 <queue_append>
 80016d6:	e007      	b.n	80016e8 <Find_around_node+0x1a0>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 80016d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fa24 	bl	8004b30 <editcost>
				}
			}
		}
	}
	// right
	if (x <= 255 - step) {
 80016e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f300 80a6 	bgt.w	8001844 <Find_around_node+0x2fc>
		uint16_t curx = x + step;
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001700:	4413      	add	r3, r2
 8001702:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t cury = y;
 8001706:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800170a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t coordinateindex = curx * 256 + cury;
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800171a:	4413      	add	r3, r2
 800171c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Find_crash(coordinateindex, obstacleflag)) {
 8001720:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd64 	bl	80011f8 <Find_crash>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8086 	beq.w	8001844 <Find_around_node+0x2fc>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f9d1 	bl	8004ae4 <findin_list>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <Find_around_node+0x2fc>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f99b 	bl	8004a88 <findin_queue>
 8001752:	4603      	mov	r3, r0
 8001754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001758:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175c:	843b      	strh	r3, [r7, #32]
				newnode.fatherindex = currentindex;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4932      	ldr	r1, [pc, #200]	; (8001830 <Find_around_node+0x2e8>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001774:	4623      	mov	r3, r4
 8001776:	461c      	mov	r4, r3
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fadc 	bl	8000d38 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fa23 	bl	8000bd0 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001790:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 8001794:	4623      	mov	r3, r4
 8001796:	461c      	mov	r4, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe4e 	bl	8001444 <cal_H>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fac4 	bl	8000d38 <__aeabi_i2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa0b 	bl	8000bd0 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Find_around_node+0x2e8>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5c 	bl	8001496 <dir>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d017      	beq.n	800181a <Find_around_node+0x2d2>
						&& lastdir != 0)
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <Find_around_node+0x2d2>
					newnode.total += 10 * step;
 80017f2:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 80017f6:	4623      	mov	r3, r4
 80017f8:	461c      	mov	r4, r3
 80017fa:	793a      	ldrb	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa97 	bl	8000d38 <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f9de 	bl	8000bd0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (!index)	//not in open_list
 800181a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <Find_around_node+0x2ec>
				{
					queue_append(&newnode);
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f003 f856 	bl	80048d8 <queue_append>
 800182c:	e00a      	b.n	8001844 <Find_around_node+0x2fc>
 800182e:	bf00      	nop
 8001830:	20000c48 	.word	0x20000c48
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f976 	bl	8004b30 <editcost>
				}
			}
		}
	}
	// up
	if (y >= step) {
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800184c:	429a      	cmp	r2, r3
 800184e:	f0c0 80a3 	bcc.w	8001998 <Find_around_node+0x450>
		uint16_t curx = x;
 8001852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t cury = y - step;
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t coordinateindex = curx * 256 + cury;
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	4413      	add	r3, r2
 8001876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (Find_crash(coordinateindex, obstacleflag)) {
 800187a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800187e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcb7 	bl	80011f8 <Find_crash>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8083 	beq.w	8001998 <Find_around_node+0x450>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f924 	bl	8004ae4 <findin_list>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d17a      	bne.n	8001998 <Find_around_node+0x450>
					{
				uint16_t index = findin_queue(coordinateindex);
 80018a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f8ee 	bl	8004a88 <findin_queue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80018b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018b6:	82bb      	strh	r3, [r7, #20]
				newnode.fatherindex = currentindex;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	83fb      	strh	r3, [r7, #30]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	4987      	ldr	r1, [pc, #540]	; (8001adc <Find_around_node+0x594>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80018ce:	4623      	mov	r3, r4
 80018d0:	461c      	mov	r4, r3
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa2f 	bl	8000d38 <__aeabi_i2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f976 	bl	8000bd0 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3016 	str.w	r3, [r7, #22]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 80018ea:	f8d7 4016 	ldr.w	r4, [r7, #22]
 80018ee:	4623      	mov	r3, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fda1 	bl	8001444 <cal_H>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa17 	bl	8000d38 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f95e 	bl	8000bd0 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 301a 	str.w	r3, [r7, #26]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <Find_around_node+0x594>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <dir>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <Find_around_node+0x42c>
						&& lastdir != 0)
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <Find_around_node+0x42c>
					newnode.total += 10 * step;
 800194c:	f8d7 401a 	ldr.w	r4, [r7, #26]
 8001950:	4623      	mov	r3, r4
 8001952:	461c      	mov	r4, r3
 8001954:	793a      	ldrb	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f931 	bl	8000bd0 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 301a 	str.w	r3, [r7, #26]
				if (!index)	//not in open_list
 8001974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <Find_around_node+0x440>
				{
					queue_append(&newnode);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f002 ffa9 	bl	80048d8 <queue_append>
 8001986:	e007      	b.n	8001998 <Find_around_node+0x450>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f003 f8cc 	bl	8004b30 <editcost>
				}
			}
		}
	}
	// down
	if (y <= 255 - step) {
 8001998:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f300 8096 	bgt.w	8001ad4 <Find_around_node+0x58c>
		uint16_t curx = x;
 80019a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t cury = y + step;
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b8:	4413      	add	r3, r2
 80019ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t coordinateindex = curx * 256 + cury;
 80019bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019c6:	4413      	add	r3, r2
 80019c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (Find_crash(coordinateindex, obstacleflag)) {
 80019ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc10 	bl	80011f8 <Find_crash>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07a      	beq.n	8001ad4 <Find_around_node+0x58c>
			//not in close_list
			if (!findin_list(coordinateindex))
 80019de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f87f 	bl	8004ae4 <findin_list>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d173      	bne.n	8001ad4 <Find_around_node+0x58c>
					{
				uint16_t index = findin_queue(coordinateindex);
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f84a 	bl	8004a88 <findin_queue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	877b      	strh	r3, [r7, #58]	; 0x3a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80019f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fa:	813b      	strh	r3, [r7, #8]
				newnode.fatherindex = currentindex;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	827b      	strh	r3, [r7, #18]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <Find_around_node+0x594>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001a12:	4623      	mov	r3, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98d 	bl	8000d38 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8d4 	bl	8000bd0 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 300a 	str.w	r3, [r7, #10]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001a2e:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001a32:	4623      	mov	r3, r4
 8001a34:	461c      	mov	r4, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd00 	bl	8001444 <cal_H>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f976 	bl	8000d38 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f8bd 	bl	8000bd0 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 300e 	str.w	r3, [r7, #14]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <Find_around_node+0x594>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd0f 	bl	8001496 <dir>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d017      	beq.n	8001ab4 <Find_around_node+0x56c>
						&& lastdir != 0)
 8001a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <Find_around_node+0x56c>
					newnode.total += 10 * step;
 8001a8c:	f8d7 400e 	ldr.w	r4, [r7, #14]
 8001a90:	4623      	mov	r3, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	793a      	ldrb	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f94a 	bl	8000d38 <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f891 	bl	8000bd0 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 300e 	str.w	r3, [r7, #14]
				if (!index)	//not in open_list
 8001ab4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <Find_around_node+0x57e>
				{
					queue_append(&newnode);
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 ff0a 	bl	80048d8 <queue_append>
					editcost(index, &newnode);
				}
			}
		}
	}
}
 8001ac4:	e006      	b.n	8001ad4 <Find_around_node+0x58c>
					editcost(index, &newnode);
 8001ac6:	f107 0208 	add.w	r2, r7, #8
 8001aca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f82e 	bl	8004b30 <editcost>
}
 8001ad4:	bf00      	nop
 8001ad6:	3764      	adds	r7, #100	; 0x64
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000c48 	.word	0x20000c48

08001ae0 <A_Star_main>:

uint8_t A_Star_main(Coordinate *start, Coordinate *last, uint8_t step) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
	A_Star_Node begin;
	A_Star_Node end;
	begin.cor = (start->x) * 256 + start->y;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	end.cor = (last->x) * 256 + last->y;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	begin.cost = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
	begin.total = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
	begin.fatherindex = 65535;
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	queue_append(&begin);
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fec8 	bl	80048d8 <queue_append>
	uint16_t curindex = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t Flag = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int8_t lastdir = 0;     		// left:-step up:-2*step right:step down:2*step
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (1) {
		curindex = queue_top();
 8001b5a:	f002 ff75 	bl	8004a48 <queue_top>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (curindex == 65535)
 8001b64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <A_Star_main+0x94>
			return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e148      	b.n	8001e06 <A_Star_main+0x326>
		if (openlist.buffer[curindex].fatherindex != 65535) {
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b78:	49a5      	ldr	r1, [pc, #660]	; (8001e10 <A_Star_main+0x330>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330e      	adds	r3, #14
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <A_Star_main+0xf6>
			lastdir = dir(openlist.buffer[openlist.buffer[curindex].fatherindex].cor,
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b94:	499e      	ldr	r1, [pc, #632]	; (8001e10 <A_Star_main+0x330>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <A_Star_main+0x330>)
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4995      	ldr	r1, [pc, #596]	; (8001e10 <A_Star_main+0x330>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fc63 	bl	8001496 <dir>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					openlist.buffer[curindex].cor);
		}
		list_append(openlist.buffer[curindex].cor);
 8001bd6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bda:	498d      	ldr	r1, [pc, #564]	; (8001e10 <A_Star_main+0x330>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fefe 	bl	80049ec <list_append>
		if(findend(openlist.buffer[curindex].cor, end.cor, step))
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4986      	ldr	r1, [pc, #536]	; (8001e10 <A_Star_main+0x330>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc6b 	bl	80014e6 <findend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <A_Star_main+0x17c>
		{
			Flag = curindex;
 8001c16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			break;
 8001c1e:	bf00      	nop
		Find_around_node(curindex, lastdir, &end, step);
	}

	//we now get the path
	Coordinate Astar_path[16];
	Astar_path[15].x = last->x;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Astar_path[15].y = last->y;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t i = 14;
 8001c34:	230e      	movs	r3, #14
 8001c36:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	A_Star_Node *p = &openlist.buffer[Flag];
 8001c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <A_Star_main+0x330>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
	if (p->cor != end.cor) {
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d027      	beq.n	8001caa <A_Star_main+0x1ca>
 8001c5a:	e009      	b.n	8001c70 <A_Star_main+0x190>
		Find_around_node(curindex, lastdir, &end, step);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001c66:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001c6a:	f7ff fc6d 	bl	8001548 <Find_around_node>
		curindex = queue_top();
 8001c6e:	e774      	b.n	8001b5a <A_Star_main+0x7a>
		Astar_path[i].x = p->cor / 256;
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3378      	adds	r3, #120	; 0x78
 8001c82:	443b      	add	r3, r7
 8001c84:	f823 2c68 	strh.w	r2, [r3, #-104]
		Astar_path[i].y = p->cor % 256;
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	b212      	sxth	r2, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3378      	adds	r3, #120	; 0x78
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f823 2c66 	strh.w	r2, [r3, #-102]
		i--;
 8001ca0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	if (p->fatherindex != 65535)
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d07a      	beq.n	8001dac <A_Star_main+0x2cc>
		lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <A_Star_main+0x330>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fbdf 	bl	8001496 <dir>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (p->fatherindex != 65535) {
 8001cde:	e065      	b.n	8001dac <A_Star_main+0x2cc>
		if (lastdir != dir(openlist.buffer[p->fatherindex].cor, p->cor))
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	895b      	ldrh	r3, [r3, #10]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <A_Star_main+0x330>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fbca 	bl	8001496 <dir>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d043      	beq.n	8001d96 <A_Star_main+0x2b6>
		{
			Astar_path[i].x = p->cor / 256;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3378      	adds	r3, #120	; 0x78
 8001d20:	443b      	add	r3, r7
 8001d22:	f823 2c68 	strh.w	r2, [r3, #-104]
			Astar_path[i].y = p->cor % 256;
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	b212      	sxth	r2, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3378      	adds	r3, #120	; 0x78
 8001d38:	443b      	add	r3, r7
 8001d3a:	f823 2c66 	strh.w	r2, [r3, #-102]
			if (i == 1) {
 8001d3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <A_Star_main+0x284>
				i = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				p = &(openlist.buffer[p->fatherindex]);
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <A_Star_main+0x330>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001d62:	e029      	b.n	8001db8 <A_Star_main+0x2d8>
			}
			i = i - 1;
 8001d64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <A_Star_main+0x330>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fb83 	bl	8001496 <dir>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		p = &(openlist.buffer[p->fatherindex]);
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <A_Star_main+0x330>)
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
	while (p->fatherindex != 65535) {
 8001dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dae:	895b      	ldrh	r3, [r3, #10]
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d193      	bne.n	8001ce0 <A_Star_main+0x200>
	}
	Astar_path[i].x = p->cor / 256;
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3378      	adds	r3, #120	; 0x78
 8001dca:	443b      	add	r3, r7
 8001dcc:	f823 2c68 	strh.w	r2, [r3, #-104]
	Astar_path[i].y = p->cor % 256;
 8001dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	b212      	sxth	r2, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3378      	adds	r3, #120	; 0x78
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c66 	strh.w	r2, [r3, #-102]

	Lane_init();
 8001de8:	f002 fd68 	bl	80048bc <Lane_init>
	uint8_t Laneis_OK = Insert_inLane(&Astar_path[0], i);
 8001dec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fee4 	bl	8004bc4 <Insert_inLane>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	return Laneis_OK;
 8001e02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3778      	adds	r7, #120	; 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000c48 	.word	0x20000c48
 8001e14:	00000000 	.word	0x00000000

08001e18 <chao_move_angle>:
	straightPath->end = *end;
	return straightPath;
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 8001e24:	4984      	ldr	r1, [pc, #528]	; (8002038 <chao_move_angle+0x220>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f88e 	bl	8000f48 <__aeabi_fdiv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb5e 	bl	80004f0 <__aeabi_f2d>
 8001e34:	a37e      	add	r3, pc, #504	; (adr r3, 8002030 <chao_move_angle+0x218>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbb1 	bl	80005a0 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe6d 	bl	8000b24 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe fb4e 	bl	80004f0 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb49 	bl	80004f0 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f009 ffb5 	bl	800bdd4 <cos>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb36 	bl	80004f0 <__aeabi_f2d>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fb31 	bl	80004f0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f009 ffe7 	bl	800be68 <sin>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fb7d 	bl	80005a0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe f9c1 	bl	8000234 <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe33 	bl	8000b24 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <chao_move_angle+0x224>)
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7fe fb13 	bl	80004f0 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb0e 	bl	80004f0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f009 ff7a 	bl	800bdd4 <cos>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb5a 	bl	80005a0 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fafb 	bl	80004f0 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe faf6 	bl	80004f0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f009 ffac 	bl	800be68 <sin>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb42 	bl	80005a0 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4640      	mov	r0, r8
 8001f22:	4649      	mov	r1, r9
 8001f24:	f7fe f984 	bl	8000230 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdf8 	bl	8000b24 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <chao_move_angle+0x228>)
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe fad8 	bl	80004f0 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fad3 	bl	80004f0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f009 ff3f 	bl	800bdd4 <cos>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fb1f 	bl	80005a0 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fac0 	bl	80004f0 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7fe fabb 	bl	80004f0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f009 ff71 	bl	800be68 <sin>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb07 	bl	80005a0 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe f949 	bl	8000230 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbd 	bl	8000b24 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <chao_move_angle+0x22c>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f7fe fa9d 	bl	80004f0 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fa98 	bl	80004f0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f009 ff04 	bl	800bdd4 <cos>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fae4 	bl	80005a0 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe fa85 	bl	80004f0 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fa80 	bl	80004f0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f009 ff36 	bl	800be68 <sin>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe facc 	bl	80005a0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f910 	bl	8000234 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd82 	bl	8000b24 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <chao_move_angle+0x230>)
 8002024:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002030:	54442d18 	.word	0x54442d18
 8002034:	400921fb 	.word	0x400921fb
 8002038:	43340000 	.word	0x43340000
 800203c:	200009a0 	.word	0x200009a0
 8002040:	200009dc 	.word	0x200009dc
 8002044:	20000a18 	.word	0x20000a18
 8002048:	20000a54 	.word	0x20000a54

0800204c <mingyan_pathfind_avoidObstacle>:

uint8_t mingyan_pathfind_avoidObstacle(Coordinate *start, Coordinate *end) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	return A_Star_main(start, end, 5);
 8002056:	2205      	movs	r2, #5
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd40 	bl	8001ae0 <A_Star_main>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e026      	b.n	80020cc <huansic_jy62_init+0x60>

	if (!himu->huart)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800208a:	2003      	movs	r0, #3
 800208c:	f004 fb54 	bl	8006738 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	230a      	movs	r3, #10
 8002096:	2203      	movs	r2, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <huansic_jy62_init+0x68>)
 800209a:	f007 fcc9 	bl	8009a30 <HAL_UART_Transmit>

	// instead, just use DMA
	himu->pending_alignment = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3334      	adds	r3, #52	; 0x34
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	4619      	mov	r1, r3
 80020b2:	f007 fd7f 	bl	8009bb4 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000

080020d8 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (!himu)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e112      	b.n	8002310 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	2300      	movs	r3, #0
 80020f0:	73bb      	strb	r3, [r7, #14]
 80020f2:	e0ed      	b.n	80022d0 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fe:	2b55      	cmp	r3, #85	; 0x55
 8002100:	d01c      	beq.n	800213c <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3334      	adds	r3, #52	; 0x34
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f007 fd1d 	bl	8009b54 <HAL_UART_Receive_IT>
			if (i) {
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3b01      	subs	r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa69 	bl	8002600 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800212e:	f004 faf9 	bl	8006724 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8002138:	2305      	movs	r3, #5
 800213a:	e0e9      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002146:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4413      	add	r3, r2
 8002158:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	3302      	adds	r3, #2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4413      	add	r3, r2
 800216a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	3303      	adds	r3, #3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	4413      	add	r3, r2
 800217c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3304      	adds	r3, #4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	4413      	add	r3, r2
 800218e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3305      	adds	r3, #5
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	4413      	add	r3, r2
 80021a0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	3306      	adds	r3, #6
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	4413      	add	r3, r2
 80021b2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	3307      	adds	r3, #7
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	4413      	add	r3, r2
 80021c4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3308      	adds	r3, #8
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	4413      	add	r3, r2
 80021d6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3309      	adds	r3, #9
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	4413      	add	r3, r2
 80021e8:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	330a      	adds	r3, #10
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f6:	7b7a      	ldrb	r2, [r7, #13]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d01c      	beq.n	8002236 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3334      	adds	r3, #52	; 0x34
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f007 fca0 	bl	8009b54 <HAL_UART_Receive_IT>
				if (i) {
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3b01      	subs	r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f9ec 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8002228:	f004 fa7c 	bl	8006724 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8002232:	2304      	movs	r3, #4
 8002234:	e06c      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b51      	cmp	r3, #81	; 0x51
 8002244:	d105      	bne.n	8002252 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c4 	bl	80023d8 <__huansic_jy62_decode_accel>
 8002250:	e038      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	3301      	adds	r3, #1
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225e:	2b52      	cmp	r3, #82	; 0x52
 8002260:	d105      	bne.n	800226e <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f920 	bl	80024ac <__huansic_jy62_decode_omega>
 800226c:	e02a      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	3301      	adds	r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b53      	cmp	r3, #83	; 0x53
 800227c:	d105      	bne.n	800228a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f966 	bl	8002554 <__huansic_jy62_decode_theta>
 8002288:	e01c      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	2201      	movs	r2, #1
 800229c:	4619      	mov	r1, r3
 800229e:	f007 fc59 	bl	8009b54 <HAL_UART_Receive_IT>
				if (i) {
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9a5 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80022b6:	f004 fa35 	bl	8006724 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80022c0:	2306      	movs	r3, #6
 80022c2:	e025      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	330b      	adds	r3, #11
 80022ce:	73bb      	strb	r3, [r7, #14]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f67f af0e 	bls.w	80020f4 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 80022d8:	f004 fa24 	bl	8006724 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 80022e2:	2102      	movs	r1, #2
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98b 	bl	8002600 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3334      	adds	r3, #52	; 0x34
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	4619      	mov	r1, r3
 80022f6:	f007 fc5d 	bl	8009bb4 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (!himu)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e029      	b.n	800237e <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002330:	2b55      	cmp	r3, #85	; 0x55
 8002332:	d00d      	beq.n	8002350 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3334      	adds	r3, #52	; 0x34
 8002344:	2201      	movs	r2, #1
 8002346:	4619      	mov	r1, r3
 8002348:	f007 fc04 	bl	8009b54 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800234c:	2305      	movs	r3, #5
 800234e:	e016      	b.n	800237e <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3335      	adds	r3, #53	; 0x35
 8002360:	2220      	movs	r2, #32
 8002362:	4619      	mov	r1, r3
 8002364:	f007 fc26 	bl	8009bb4 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 800237c:	2300      	movs	r3, #0
	}
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3334      	adds	r3, #52	; 0x34
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	f007 fbd7 	bl	8009b54 <HAL_UART_Receive_IT>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f007 fbc3 	bl	8009b54 <HAL_UART_Receive_IT>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e050      	b.n	800248c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1cd9      	adds	r1, r3, #3
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	0059      	lsls	r1, r3, #1
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	440b      	add	r3, r1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242c:	b21a      	sxth	r2, r3
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8002434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc7d 	bl	8000d38 <__aeabi_i2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fccb 	bl	8000de0 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f84f 	bl	80004f0 <__aeabi_f2d>
 8002452:	a313      	add	r3, pc, #76	; (adr r3, 80024a0 <__huansic_jy62_decode_accel+0xc8>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8a2 	bl	80005a0 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <__huansic_jy62_decode_accel+0xd0>)
 800246a:	f7fe f9c3 	bl	80007f4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	7bfc      	ldrb	r4, [r7, #15]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb54 	bl	8000b24 <__aeabi_d2f>
 800247c:	4601      	mov	r1, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ca2      	adds	r2, r4, #2
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d9ab      	bls.n	80023ea <__huansic_jy62_decode_accel+0x12>
	}
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	40239999 	.word	0x40239999
 80024a8:	40e00000 	.word	0x40e00000

080024ac <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e03f      	b.n	800253e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1cd9      	adds	r1, r3, #3
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024da:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	0059      	lsls	r1, r3, #1
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002500:	b21a      	sxth	r2, r3
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fc13 	bl	8000d38 <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <__huansic_jy62_decode_omega+0xa4>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc62 	bl	8000de0 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	7bfc      	ldrb	r4, [r7, #15]
 8002520:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd0f 	bl	8000f48 <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	1d23      	adds	r3, r4, #4
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d9bc      	bls.n	80024be <__huansic_jy62_decode_omega+0x12>
	}
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	44fa0000 	.word	0x44fa0000

08002554 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e03f      	b.n	80025e6 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	1cd9      	adds	r1, r3, #3
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	440b      	add	r3, r1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	0059      	lsls	r1, r3, #1
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 80025b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbbf 	bl	8000d38 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <__huansic_jy62_decode_theta+0xa4>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fc0e 	bl	8000de0 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	7bfc      	ldrb	r4, [r7, #15]
 80025c8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fcbb 	bl	8000f48 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f104 0208 	add.w	r2, r4, #8
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d9bc      	bls.n	8002566 <__huansic_jy62_decode_theta+0x12>
	}
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	43340000 	.word	0x43340000
 80025fc:	00000000 	.word	0x00000000

08002600 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8002624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3309      	adds	r3, #9
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	b21a      	sxth	r2, r3
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb72 	bl	8000d38 <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4910      	ldr	r1, [pc, #64]	; (8002698 <__huansic_jy62_decode_temp+0x98>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc75 	bl	8000f48 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff45 	bl	80004f0 <__aeabi_f2d>
 8002666:	a30a      	add	r3, pc, #40	; (adr r3, 8002690 <__huansic_jy62_decode_temp+0x90>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fde2 	bl	8000234 <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa54 	bl	8000b24 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	0a3d70a4 	.word	0x0a3d70a4
 8002694:	404243d7 	.word	0x404243d7
 8002698:	43aa0000 	.word	0x43aa0000

0800269c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <huansic_order_init>:
		newTail->nextPath = 0;
	}
	return retPath;
}

void huansic_order_init() {
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	e00d      	b.n	80026d8 <huansic_order_init+0x28>
		orderBuffers[i].id = -1;
 80026bc:	79fa      	ldrb	r2, [r7, #7]
 80026be:	4915      	ldr	r1, [pc, #84]	; (8002714 <huansic_order_init+0x64>)
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3310      	adds	r3, #16
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	3301      	adds	r3, #1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b3b      	cmp	r3, #59	; 0x3b
 80026dc:	d9ee      	bls.n	80026bc <huansic_order_init+0xc>
	for (i = 0; i < 5; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	e00d      	b.n	8002700 <huansic_order_init+0x50>
		delivering[i] = &orderBuffers[i];		// give it some default value
 80026e4:	79fa      	ldrb	r2, [r7, #7]
 80026e6:	79f9      	ldrb	r1, [r7, #7]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <huansic_order_init+0x64>)
 80026f2:	4413      	add	r3, r2
 80026f4:	4a08      	ldr	r2, [pc, #32]	; (8002718 <huansic_order_init+0x68>)
 80026f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < 5; i++)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	3301      	adds	r3, #1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d9ee      	bls.n	80026e4 <huansic_order_init+0x34>
}
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200000a4 	.word	0x200000a4
 8002718:	20000bf4 	.word	0x20000bf4

0800271c <huansic_order_new>:

Order* huansic_order_new(int8_t id) {
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d101      	bne.n	8002734 <huansic_order_new+0x18>
		return 0;
 8002730:	2300      	movs	r3, #0
 8002732:	e046      	b.n	80027c2 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e017      	b.n	800276a <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	4923      	ldr	r1, [pc, #140]	; (80027cc <huansic_order_new+0xb0>)
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	3310      	adds	r3, #16
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	429a      	cmp	r2, r3
 8002752:	d107      	bne.n	8002764 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <huansic_order_new+0xb0>)
 8002760:	4413      	add	r3, r2
 8002762:	e02e      	b.n	80027c2 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b3b      	cmp	r3, #59	; 0x3b
 800276e:	d9e4      	bls.n	800273a <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e021      	b.n	80027ba <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	4914      	ldr	r1, [pc, #80]	; (80027cc <huansic_order_new+0xb0>)
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	3310      	adds	r3, #16
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d112      	bne.n	80027b4 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <huansic_order_new+0xb0>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4403      	add	r3, r0
 80027a0:	3310      	adds	r3, #16
 80027a2:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <huansic_order_new+0xb0>)
 80027b0:	4413      	add	r3, r2
 80027b2:	e006      	b.n	80027c2 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	3301      	adds	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b3b      	cmp	r3, #59	; 0x3b
 80027be:	d9da      	bls.n	8002776 <huansic_order_new+0x5a>
		}
	}

	return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	200000a4 	.word	0x200000a4

080027d0 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d103      	bne.n	80027ea <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff5a 	bl	800269c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 80027e8:	e003      	b.n	80027f2 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	611a      	str	r2, [r3, #16]
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <huansic_motor_init+0x1c>
 800280c:	4b55      	ldr	r3, [pc, #340]	; (8002964 <huansic_motor_init+0x168>)
 800280e:	4a56      	ldr	r2, [pc, #344]	; (8002968 <huansic_motor_init+0x16c>)
 8002810:	210c      	movs	r1, #12
 8002812:	4856      	ldr	r0, [pc, #344]	; (800296c <huansic_motor_init+0x170>)
 8002814:	f007 ff50 	bl	800a6b8 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <huansic_motor_init+0x30>
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <huansic_motor_init+0x174>)
 8002822:	4a51      	ldr	r2, [pc, #324]	; (8002968 <huansic_motor_init+0x16c>)
 8002824:	210d      	movs	r1, #13
 8002826:	4851      	ldr	r0, [pc, #324]	; (800296c <huansic_motor_init+0x170>)
 8002828:	f007 ff46 	bl	800a6b8 <__assert_func>
	assert(hmotor->dt);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fc67 	bl	8001108 <__aeabi_fcmpeq>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <huansic_motor_init+0x50>
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <huansic_motor_init+0x178>)
 8002842:	4a49      	ldr	r2, [pc, #292]	; (8002968 <huansic_motor_init+0x16c>)
 8002844:	210e      	movs	r1, #14
 8002846:	4849      	ldr	r0, [pc, #292]	; (800296c <huansic_motor_init+0x170>)
 8002848:	f007 ff36 	bl	800a6b8 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2200      	movs	r2, #0
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
 8002896:	e01c      	b.n	80028d2 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d105      	bne.n	80028ac <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
 80028aa:	e012      	b.n	80028d2 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d105      	bne.n	80028c0 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80028be:	e008      	b.n	80028d2 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d104      	bne.n	80028d2 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d026      	beq.n	8002928 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
 80028ec:	e01c      	b.n	8002928 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d105      	bne.n	8002902 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002900:	e012      	b.n	8002928 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d105      	bne.n	8002916 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c
 8002914:	e008      	b.n	8002928 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d104      	bne.n	8002928 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	213c      	movs	r1, #60	; 0x3c
 800292e:	4618      	mov	r0, r3
 8002930:	f006 f93c 	bl	8008bac <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f005 ffd8 	bl	80088f4 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f005 ffcc 	bl	80088f4 <HAL_TIM_PWM_Start>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	0800ceb8 	.word	0x0800ceb8
 8002968:	0800cf28 	.word	0x0800cf28
 800296c:	0800cec8 	.word	0x0800cec8
 8002970:	0800cee8 	.word	0x0800cee8
 8002974:	0800cefc 	.word	0x0800cefc

08002978 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <huansic_motor_pid+0x24>
		newTick = -newTick;
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	425b      	negs	r3, r3
 8002998:	b29b      	uxth	r3, r3
 800299a:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 800299c:	8afa      	ldrh	r2, [r7, #22]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 80029a8:	8afa      	ldrh	r2, [r7, #22]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 80029ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f9c0 	bl	8000d38 <__aeabi_i2f>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe fac1 	bl	8000f48 <__aeabi_fdiv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd8c 	bl	80004f0 <__aeabi_f2d>
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b93      	ldr	r3, [pc, #588]	; (8002c2c <huansic_motor_pid+0x2b4>)
 80029de:	f7fd fddf 	bl	80005a0 <__aeabi_dmul>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fd7e 	bl	80004f0 <__aeabi_f2d>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4620      	mov	r0, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	f7fd fc1a 	bl	8000234 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <huansic_motor_pid+0x2b8>)
 8002a0e:	f7fd fef1 	bl	80007f4 <__aeabi_ddiv>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f883 	bl	8000b24 <__aeabi_d2f>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f7fe f8ca 	bl	8000bcc <__aeabi_fsub>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7fe f8c5 	bl	8000bcc <__aeabi_fsub>
 8002a42:	4603      	mov	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fe f8bb 	bl	8000bcc <__aeabi_fsub>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7fe f8b1 	bl	8000bd0 <__addsf3>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7fe f9ad 	bl	8000de0 <__aeabi_fmul>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461c      	mov	r4, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f7fe f9a3 	bl	8000de0 <__aeabi_fmul>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7fe f896 	bl	8000bd0 <__addsf3>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f996 	bl	8000de0 <__aeabi_fmul>
 8002ab4:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7fe f889 	bl	8000bd0 <__addsf3>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8002ac2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7fe fb46 	bl	8001158 <__aeabi_fcmpgt>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <huansic_motor_pid+0x160>
 8002ad2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ad6:	e009      	b.n	8002aec <huansic_motor_pid+0x174>
 8002ad8:	4956      	ldr	r1, [pc, #344]	; (8002c34 <huansic_motor_pid+0x2bc>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7fe fb1e 	bl	800111c <__aeabi_fcmplt>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <huansic_motor_pid+0x172>
 8002ae6:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <huansic_motor_pid+0x2bc>)
 8002ae8:	e000      	b.n	8002aec <huansic_motor_pid+0x174>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7fe fb30 	bl	8001158 <__aeabi_fcmpgt>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d019      	beq.n	8002b32 <huansic_motor_pid+0x1ba>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe f90f 	bl	8000d30 <__aeabi_ui2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4619      	mov	r1, r3
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7fe f962 	bl	8000de0 <__aeabi_fmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f009 f9e8 	bl	800bef4 <roundf>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fb46 	bl	80011b8 <__aeabi_f2uiz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	e000      	b.n	8002b34 <huansic_motor_pid+0x1bc>
 8002b32:	2300      	movs	r3, #0
 8002b34:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7fe faee 	bl	800111c <__aeabi_fcmplt>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <huansic_motor_pid+0x202>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe f8eb 	bl	8000d30 <__aeabi_ui2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7fe f93e 	bl	8000de0 <__aeabi_fmul>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f009 f9c4 	bl	800bef4 <roundf>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fb22 	bl	80011b8 <__aeabi_f2uiz>
 8002b74:	4603      	mov	r3, r0
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	e000      	b.n	8002b7c <huansic_motor_pid+0x204>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <huansic_motor_pid+0x21a>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	897a      	ldrh	r2, [r7, #10]
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b90:	e01c      	b.n	8002bcc <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d105      	bne.n	8002ba6 <huansic_motor_pid+0x22e>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	897a      	ldrh	r2, [r7, #10]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba4:	e012      	b.n	8002bcc <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d105      	bne.n	8002bba <huansic_motor_pid+0x242>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	897a      	ldrh	r2, [r7, #10]
 8002bb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb8:	e008      	b.n	8002bcc <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d104      	bne.n	8002bcc <huansic_motor_pid+0x254>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	897a      	ldrh	r2, [r7, #10]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d026      	beq.n	8002c22 <huansic_motor_pid+0x2aa>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <huansic_motor_pid+0x270>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	893a      	ldrh	r2, [r7, #8]
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8002be6:	e01c      	b.n	8002c22 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d105      	bne.n	8002bfc <huansic_motor_pid+0x284>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	893a      	ldrh	r2, [r7, #8]
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bfa:	e012      	b.n	8002c22 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d105      	bne.n	8002c10 <huansic_motor_pid+0x298>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	893a      	ldrh	r2, [r7, #8]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c0e:	e008      	b.n	8002c22 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d104      	bne.n	8002c22 <huansic_motor_pid+0x2aa>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	893a      	ldrh	r2, [r7, #8]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40100000 	.word	0x40100000
 8002c30:	40140000 	.word	0x40140000
 8002c34:	bf800000 	.word	0xbf800000

08002c38 <custom_order_new_failed>:
extern uint8_t CoordinateUpdate;
extern uint8_t delivering_num;
uint8_t zigbeeSend[2][6]={0x55,0xAA,0x00,0x00,0x00,0x00,
                          0x55,0xAA,0x02,0x00,0x00,0x00};        //小车可能发送的信息（0x00:请求游戏信息 0x02:设置充电桩）

__weak void custom_order_new_failed(uint8_t id) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]

}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	hxb->pending_alignment = 0;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->nextPackageID = 0x00;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	731a      	strb	r2, [r3, #12]
	hxb->nextPackageLength = 6;		// header length
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2206      	movs	r2, #6
 8002c66:	735a      	strb	r2, [r3, #13]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 010e 	add.w	r1, r3, #14
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7b5b      	ldrb	r3, [r3, #13]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f006 ff9b 	bl	8009bb4 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0204 	bic.w	r2, r2, #4
 8002c90:	601a      	str	r2, [r3, #0]
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <huansic_xb_decodeHeader>:

enum XB_STATUS huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <huansic_xb_decodeHeader+0x12>
		return XB_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e03c      	b.n	8002d26 <huansic_xb_decodeHeader+0x8c>

	// record checksum
	hxb->checksum = hxb->buffer[5];
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7cda      	ldrb	r2, [r3, #19]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05) {
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7c1b      	ldrb	r3, [r3, #16]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d015      	beq.n	8002cea <huansic_xb_decodeHeader+0x50>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7c1b      	ldrb	r3, [r3, #16]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d011      	beq.n	8002cea <huansic_xb_decodeHeader+0x50>
		hxb->pending_alignment = 1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = 0x00;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	330e      	adds	r3, #14
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f006 ff37 	bl	8009b54 <HAL_UART_Receive_IT>
		return XB_ID_ERROR;
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e01d      	b.n	8002d26 <huansic_xb_decodeHeader+0x8c>
	}
	hxb->nextPackageID = hxb->buffer[2];
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7c1a      	ldrb	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	731a      	strb	r2, [r3, #12]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[3]; // the length shall not be longer than 255 (the max possible is 225)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7c5a      	ldrb	r2, [r3, #17]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	735a      	strb	r2, [r3, #13]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f103 010e 	add.w	r1, r3, #14
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7b5b      	ldrb	r3, [r3, #13]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f006 ff52 	bl	8009bb4 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
	return XB_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <huansic_xb_decodeBody>:

enum XB_STATUS huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	76fb      	strb	r3, [r7, #27]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	777b      	strb	r3, [r7, #29]
	uint32_t temp;

	if (!hxb)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <huansic_xb_decodeBody+0x1c>
		return XB_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f000 bcf5 	b.w	8003736 <huansic_xb_decodeBody+0xa06>

	// checksum
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	2300      	movs	r3, #0
 8002d52:	77bb      	strb	r3, [r7, #30]
 8002d54:	e009      	b.n	8002d6a <huansic_xb_decodeBody+0x3a>
		j ^= hxb->buffer[i];
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	7b9a      	ldrb	r2, [r3, #14]
 8002d5e:	7fbb      	ldrb	r3, [r7, #30]
 8002d60:	4053      	eors	r3, r2
 8002d62:	77bb      	strb	r3, [r7, #30]
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
 8002d66:	3301      	adds	r3, #1
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7b5b      	ldrb	r3, [r3, #13]
 8002d6e:	7ffa      	ldrb	r2, [r7, #31]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3f0      	bcc.n	8002d56 <huansic_xb_decodeBody+0x26>

	if (j != hxb->checksum) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d7a:	7fba      	ldrb	r2, [r7, #30]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d012      	beq.n	8002da6 <huansic_xb_decodeBody+0x76>
		hxb->pending_alignment = 1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = 0x00;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	330e      	adds	r3, #14
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f006 feda 	bl	8009b54 <HAL_UART_Receive_IT>
		return XB_SUM_ERROR;
 8002da0:	2304      	movs	r3, #4
 8002da2:	f000 bcc8 	b.w	8003736 <huansic_xb_decodeBody+0xa06>
	}

	if (hxb->nextPackageID == 0x01) {		// game information
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7b1b      	ldrb	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	f040 8164 	bne.w	8003078 <huansic_xb_decodeBody+0x348>
		/* game stage */
		gameStage = hxb->buffer[index++];// 0
 8002db0:	7f7b      	ldrb	r3, [r7, #29]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	777a      	strb	r2, [r7, #29]
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	7b9a      	ldrb	r2, [r3, #14]
 8002dbe:	4b86      	ldr	r3, [pc, #536]	; (8002fd8 <huansic_xb_decodeBody+0x2a8>)
 8002dc0:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8002dc2:	7f7b      	ldrb	r3, [r7, #29]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e06a      	b.n	8002ea4 <huansic_xb_decodeBody+0x174>
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index+1] << 8;
 8002dce:	7f7b      	ldrb	r3, [r7, #29]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	7b9b      	ldrb	r3, [r3, #14]
 8002dd8:	021a      	lsls	r2, r3, #8
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	b211      	sxth	r1, r2
 8002dde:	4a7f      	ldr	r2, [pc, #508]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002de0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index];
 8002de4:	7f7b      	ldrb	r3, [r7, #29]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	7b9a      	ldrb	r2, [r3, #14]
 8002dec:	7ffb      	ldrb	r3, [r7, #31]
 8002dee:	b211      	sxth	r1, r2
 8002df0:	4a7a      	ldr	r2, [pc, #488]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002df2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002df6:	7f7b      	ldrb	r3, [r7, #29]
 8002df8:	3302      	adds	r3, #2
 8002dfa:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index+1] << 8;
 8002dfc:	7f7b      	ldrb	r3, [r7, #29]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	7b9b      	ldrb	r3, [r3, #14]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	b211      	sxth	r1, r2
 8002e0c:	4a73      	ldr	r2, [pc, #460]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	460a      	mov	r2, r1
 8002e14:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8002e16:	7f7b      	ldrb	r3, [r7, #29]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	7b9a      	ldrb	r2, [r3, #14]
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	b211      	sxth	r1, r2
 8002e22:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	460a      	mov	r2, r1
 8002e2a:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002e2c:	7f7b      	ldrb	r3, [r7, #29]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index+1] << 8;
 8002e32:	7f7b      	ldrb	r3, [r7, #29]
 8002e34:	3301      	adds	r3, #1
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	7b9b      	ldrb	r3, [r3, #14]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	b211      	sxth	r1, r2
 8002e42:	4a66      	ldr	r2, [pc, #408]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	460a      	mov	r2, r1
 8002e4a:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002e4c:	7f7b      	ldrb	r3, [r7, #29]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	7b9a      	ldrb	r2, [r3, #14]
 8002e54:	7ffb      	ldrb	r3, [r7, #31]
 8002e56:	b211      	sxth	r1, r2
 8002e58:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	460a      	mov	r2, r1
 8002e60:	809a      	strh	r2, [r3, #4]
			index += 2;
 8002e62:	7f7b      	ldrb	r3, [r7, #29]
 8002e64:	3302      	adds	r3, #2
 8002e66:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index+1] << 8;
 8002e68:	7f7b      	ldrb	r3, [r7, #29]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	7b9b      	ldrb	r3, [r3, #14]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	b211      	sxth	r1, r2
 8002e78:	4a58      	ldr	r2, [pc, #352]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	460a      	mov	r2, r1
 8002e80:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8002e82:	7f7b      	ldrb	r3, [r7, #29]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	7b9a      	ldrb	r2, [r3, #14]
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
 8002e8c:	b211      	sxth	r1, r2
 8002e8e:	4a53      	ldr	r2, [pc, #332]	; (8002fdc <huansic_xb_decodeBody+0x2ac>)
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	460a      	mov	r2, r1
 8002e96:	80da      	strh	r2, [r3, #6]
			index += 2;
 8002e98:	7f7b      	ldrb	r3, [r7, #29]
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002e9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d991      	bls.n	8002dce <huansic_xb_decodeBody+0x9e>
		}//2 ~ 41

		/* total time of this round */
		gameStageTimeLimit = hxb->buffer[index+3];
 8002eaa:	7f7b      	ldrb	r3, [r7, #29]
 8002eac:	3303      	adds	r3, #3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	7b9b      	ldrb	r3, [r3, #14]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002eb8:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8002eba:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ec2:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index+2];
 8002ec4:	7f7b      	ldrb	r3, [r7, #29]
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	7b9b      	ldrb	r3, [r3, #14]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ed8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ee2:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index+1];
 8002ee4:	7f7b      	ldrb	r3, [r7, #29]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	7b9b      	ldrb	r3, [r3, #14]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002ef8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002f02:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index];
 8002f04:	7f7b      	ldrb	r3, [r7, #29]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	7b9b      	ldrb	r3, [r3, #14]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <huansic_xb_decodeBody+0x2b0>)
 8002f16:	6013      	str	r3, [r2, #0]
		index += 4;// 42 ~ 45
 8002f18:	7f7b      	ldrb	r3, [r7, #29]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	777b      	strb	r3, [r7, #29]

		/* ally beacons */
		listLength = hxb->buffer[index++];//46
 8002f1e:	7f7b      	ldrb	r3, [r7, #29]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	777a      	strb	r2, [r7, #29]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	7b9b      	ldrb	r3, [r3, #14]
 8002f2c:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002f2e:	2300      	movs	r3, #0
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e042      	b.n	8002fba <huansic_xb_decodeBody+0x28a>
			allyBeacons[i].x = (uint16_t) hxb->buffer[index+1] << 8;
 8002f34:	7f7b      	ldrb	r3, [r7, #29]
 8002f36:	3301      	adds	r3, #1
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	7b9b      	ldrb	r3, [r3, #14]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	b211      	sxth	r1, r2
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <huansic_xb_decodeBody+0x2b4>)
 8002f46:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x |= hxb->buffer[index];
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <huansic_xb_decodeBody+0x2b4>)
 8002f4e:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 8002f52:	7f7b      	ldrb	r3, [r7, #29]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	7b9b      	ldrb	r3, [r3, #14]
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	b211      	sxth	r1, r2
 8002f62:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <huansic_xb_decodeBody+0x2b4>)
 8002f64:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002f68:	7f7b      	ldrb	r3, [r7, #29]
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index+1] << 8;
 8002f6e:	7f7b      	ldrb	r3, [r7, #29]
 8002f70:	3301      	adds	r3, #1
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	7b9b      	ldrb	r3, [r3, #14]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	b211      	sxth	r1, r2
 8002f7e:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <huansic_xb_decodeBody+0x2b4>)
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	460a      	mov	r2, r1
 8002f86:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y |= hxb->buffer[index];
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <huansic_xb_decodeBody+0x2b4>)
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002f94:	7f7b      	ldrb	r3, [r7, #29]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	7b9b      	ldrb	r3, [r3, #14]
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	b211      	sxth	r1, r2
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <huansic_xb_decodeBody+0x2b4>)
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	460a      	mov	r2, r1
 8002fac:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002fae:	7f7b      	ldrb	r3, [r7, #29]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < listLength; i++) {
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	7ffa      	ldrb	r2, [r7, #31]
 8002fbc:	7efb      	ldrb	r3, [r7, #27]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d3b8      	bcc.n	8002f34 <huansic_xb_decodeBody+0x204>
		}

		/* opponent beacons */
		listLength = hxb->buffer[index++];
 8002fc2:	7f7b      	ldrb	r3, [r7, #29]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	777a      	strb	r2, [r7, #29]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	7b9b      	ldrb	r3, [r3, #14]
 8002fd0:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e04a      	b.n	800306e <huansic_xb_decodeBody+0x33e>
 8002fd8:	20000b7c 	.word	0x20000b7c
 8002fdc:	20000b88 	.word	0x20000b88
 8002fe0:	20000b80 	.word	0x20000b80
 8002fe4:	20000bb0 	.word	0x20000bb0
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index+1] << 8;
 8002fe8:	7f7b      	ldrb	r3, [r7, #29]
 8002fea:	3301      	adds	r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	7b9b      	ldrb	r3, [r3, #14]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	b211      	sxth	r1, r2
 8002ff8:	4a83      	ldr	r2, [pc, #524]	; (8003208 <huansic_xb_decodeBody+0x4d8>)
 8002ffa:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x |= hxb->buffer[index];
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	4a81      	ldr	r2, [pc, #516]	; (8003208 <huansic_xb_decodeBody+0x4d8>)
 8003002:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 8003006:	7f7b      	ldrb	r3, [r7, #29]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	7b9b      	ldrb	r3, [r3, #14]
 800300e:	b21a      	sxth	r2, r3
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	430a      	orrs	r2, r1
 8003014:	b211      	sxth	r1, r2
 8003016:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <huansic_xb_decodeBody+0x4d8>)
 8003018:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 800301c:	7f7b      	ldrb	r3, [r7, #29]
 800301e:	3302      	adds	r3, #2
 8003020:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index+1] << 8;
 8003022:	7f7b      	ldrb	r3, [r7, #29]
 8003024:	3301      	adds	r3, #1
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	7b9b      	ldrb	r3, [r3, #14]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	b211      	sxth	r1, r2
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <huansic_xb_decodeBody+0x4d8>)
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	460a      	mov	r2, r1
 800303a:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y |= hxb->buffer[index];
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	4a72      	ldr	r2, [pc, #456]	; (8003208 <huansic_xb_decodeBody+0x4d8>)
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8003048:	7f7b      	ldrb	r3, [r7, #29]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	7b9b      	ldrb	r3, [r3, #14]
 8003050:	b21a      	sxth	r2, r3
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	430a      	orrs	r2, r1
 8003056:	b211      	sxth	r1, r2
 8003058:	4a6b      	ldr	r2, [pc, #428]	; (8003208 <huansic_xb_decodeBody+0x4d8>)
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	460a      	mov	r2, r1
 8003060:	805a      	strh	r2, [r3, #2]
			index += 2;
 8003062:	7f7b      	ldrb	r3, [r7, #29]
 8003064:	3302      	adds	r3, #2
 8003066:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < listLength; i++) {
 8003068:	7ffb      	ldrb	r3, [r7, #31]
 800306a:	3301      	adds	r3, #1
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	7ffa      	ldrb	r2, [r7, #31]
 8003070:	7efb      	ldrb	r3, [r7, #27]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b8      	bcc.n	8002fe8 <huansic_xb_decodeBody+0x2b8>
 8003076:	e33d      	b.n	80036f4 <huansic_xb_decodeBody+0x9c4>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7b1b      	ldrb	r3, [r3, #12]
 800307c:	2b05      	cmp	r3, #5
 800307e:	f040 8327 	bne.w	80036d0 <huansic_xb_decodeBody+0x9a0>
		/* game status */
		gameStatus = hxb->buffer[index++];//1
 8003082:	7f7b      	ldrb	r3, [r7, #29]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	777a      	strb	r2, [r7, #29]
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	7b9a      	ldrb	r2, [r3, #14]
 8003090:	4b5e      	ldr	r3, [pc, #376]	; (800320c <huansic_xb_decodeBody+0x4dc>)
 8003092:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index+3];
 8003094:	7f7b      	ldrb	r3, [r7, #29]
 8003096:	3303      	adds	r3, #3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	7b9b      	ldrb	r3, [r3, #14]
 800309e:	461a      	mov	r2, r3
 80030a0:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030a2:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 80030a4:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	4a59      	ldr	r2, [pc, #356]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030ac:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index+2];
 80030ae:	7f7b      	ldrb	r3, [r7, #29]
 80030b0:	3302      	adds	r3, #2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	7b9b      	ldrb	r3, [r3, #14]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b55      	ldr	r3, [pc, #340]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	4a53      	ldr	r2, [pc, #332]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030c2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80030c4:	4b52      	ldr	r3, [pc, #328]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	4a51      	ldr	r2, [pc, #324]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030cc:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index+1];
 80030ce:	7f7b      	ldrb	r3, [r7, #29]
 80030d0:	3301      	adds	r3, #1
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	7b9b      	ldrb	r3, [r3, #14]
 80030d8:	461a      	mov	r2, r3
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	4a4b      	ldr	r2, [pc, #300]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030e2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4a49      	ldr	r2, [pc, #292]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030ec:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index];//index = 1
 80030ee:	7f7b      	ldrb	r3, [r7, #29]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	7b9b      	ldrb	r3, [r3, #14]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	4a44      	ldr	r2, [pc, #272]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 8003100:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8003102:	4b44      	ldr	r3, [pc, #272]	; (8003214 <huansic_xb_decodeBody+0x4e4>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b42      	ldr	r3, [pc, #264]	; (8003210 <huansic_xb_decodeBody+0x4e0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	4a42      	ldr	r2, [pc, #264]	; (8003218 <huansic_xb_decodeBody+0x4e8>)
 800310e:	6013      	str	r3, [r2, #0]
		index += 4;//5
 8003110:	7f7b      	ldrb	r3, [r7, #29]
 8003112:	3304      	adds	r3, #4
 8003114:	777b      	strb	r3, [r7, #29]

		/* fetch score */
		temp = hxb->buffer[index+3];
 8003116:	7f7b      	ldrb	r3, [r7, #29]
 8003118:	3303      	adds	r3, #3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	7b9b      	ldrb	r3, [r3, #14]
 8003120:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+2];
 8003128:	7f7b      	ldrb	r3, [r7, #29]
 800312a:	3302      	adds	r3, #2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	7b9b      	ldrb	r3, [r3, #14]
 8003132:	461a      	mov	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+1];
 8003140:	7f7b      	ldrb	r3, [r7, #29]
 8003142:	3301      	adds	r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	7b9b      	ldrb	r3, [r3, #14]
 800314a:	461a      	mov	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index];
 8003158:	7f7b      	ldrb	r3, [r7, #29]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	7b9b      	ldrb	r3, [r3, #14]
 8003160:	461a      	mov	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2b      	ldr	r2, [pc, #172]	; (800321c <huansic_xb_decodeBody+0x4ec>)
 8003170:	6013      	str	r3, [r2, #0]
		index += 4;//9
 8003172:	7f7b      	ldrb	r3, [r7, #29]
 8003174:	3304      	adds	r3, #4
 8003176:	777b      	strb	r3, [r7, #29]

		/* my position */
		myCoord.x = hxb->buffer[index+1];
 8003178:	7f7b      	ldrb	r3, [r7, #29]
 800317a:	3301      	adds	r3, #1
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	7b9b      	ldrb	r3, [r3, #14]
 8003182:	b21a      	sxth	r2, r3
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 8003186:	801a      	strh	r2, [r3, #0]
		if(myCoord.x == 255){
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 800318a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800318e:	2bff      	cmp	r3, #255	; 0xff
 8003190:	d10b      	bne.n	80031aa <huansic_xb_decodeBody+0x47a>
			myCoord.x = hxb->buffer[index] - 256;
 8003192:	7f7b      	ldrb	r3, [r7, #29]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	7b9b      	ldrb	r3, [r3, #14]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031a6:	801a      	strh	r2, [r3, #0]
 80031a8:	e012      	b.n	80031d0 <huansic_xb_decodeBody+0x4a0>
		}
		else{
			myCoord.x = myCoord.x << 8;
 80031aa:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031b6:	801a      	strh	r2, [r3, #0]
			myCoord.x |= hxb->buffer[index];
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031be:	7f7b      	ldrb	r3, [r7, #29]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	440b      	add	r3, r1
 80031c4:	7b9b      	ldrb	r3, [r3, #14]
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031ce:	801a      	strh	r2, [r3, #0]
		}
		index += 2;//11
 80031d0:	7f7b      	ldrb	r3, [r7, #29]
 80031d2:	3302      	adds	r3, #2
 80031d4:	777b      	strb	r3, [r7, #29]
		myCoord.y = hxb->buffer[index+1];
 80031d6:	7f7b      	ldrb	r3, [r7, #29]
 80031d8:	3301      	adds	r3, #1
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	7b9b      	ldrb	r3, [r3, #14]
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031e4:	805a      	strh	r2, [r3, #2]
		if(myCoord.y == 255){
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 80031e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d119      	bne.n	8003224 <huansic_xb_decodeBody+0x4f4>
			myCoord.y = hxb->buffer[index] - 256;
 80031f0:	7f7b      	ldrb	r3, [r7, #29]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	7b9b      	ldrb	r3, [r3, #14]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b21a      	sxth	r2, r3
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <huansic_xb_decodeBody+0x4f0>)
 8003204:	805a      	strh	r2, [r3, #2]
 8003206:	e020      	b.n	800324a <huansic_xb_decodeBody+0x51a>
 8003208:	20000bbc 	.word	0x20000bbc
 800320c:	20000b7d 	.word	0x20000b7d
 8003210:	20000b84 	.word	0x20000b84
 8003214:	20000b80 	.word	0x20000b80
 8003218:	20000c28 	.word	0x20000c28
 800321c:	20000c20 	.word	0x20000c20
 8003220:	20000c0c 	.word	0x20000c0c
		}
		else{
			myCoord.y = myCoord.y << 8;
 8003224:	4ba2      	ldr	r3, [pc, #648]	; (80034b0 <huansic_xb_decodeBody+0x780>)
 8003226:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	b21a      	sxth	r2, r3
 800322e:	4ba0      	ldr	r3, [pc, #640]	; (80034b0 <huansic_xb_decodeBody+0x780>)
 8003230:	805a      	strh	r2, [r3, #2]
			myCoord.y |= hxb->buffer[index];
 8003232:	4b9f      	ldr	r3, [pc, #636]	; (80034b0 <huansic_xb_decodeBody+0x780>)
 8003234:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003238:	7f7b      	ldrb	r3, [r7, #29]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	440b      	add	r3, r1
 800323e:	7b9b      	ldrb	r3, [r3, #14]
 8003240:	b21b      	sxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b9a      	ldr	r3, [pc, #616]	; (80034b0 <huansic_xb_decodeBody+0x780>)
 8003248:	805a      	strh	r2, [r3, #2]
		}
		index += 2;//13
 800324a:	7f7b      	ldrb	r3, [r7, #29]
 800324c:	3302      	adds	r3, #2
 800324e:	777b      	strb	r3, [r7, #29]
		CoordinateUpdate = 1;
 8003250:	4b98      	ldr	r3, [pc, #608]	; (80034b4 <huansic_xb_decodeBody+0x784>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]

		/* fetch battery */
		temp = hxb->buffer[index+3];
 8003256:	7f7b      	ldrb	r3, [r7, #29]
 8003258:	3303      	adds	r3, #3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	7b9b      	ldrb	r3, [r3, #14]
 8003260:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+2];
 8003268:	7f7b      	ldrb	r3, [r7, #29]
 800326a:	3302      	adds	r3, #2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	7b9b      	ldrb	r3, [r3, #14]
 8003272:	461a      	mov	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+1];
 8003280:	7f7b      	ldrb	r3, [r7, #29]
 8003282:	3301      	adds	r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	7b9b      	ldrb	r3, [r3, #14]
 800328a:	461a      	mov	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index];
 8003298:	7f7b      	ldrb	r3, [r7, #29]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	7b9b      	ldrb	r3, [r3, #14]
 80032a0:	461a      	mov	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 80032a8:	f107 0310 	add.w	r3, r7, #16
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a82      	ldr	r2, [pc, #520]	; (80034b8 <huansic_xb_decodeBody+0x788>)
 80032b0:	6013      	str	r3, [r2, #0]
		index += 4;//17
 80032b2:	7f7b      	ldrb	r3, [r7, #29]
 80032b4:	3304      	adds	r3, #4
 80032b6:	777b      	strb	r3, [r7, #29]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 80032b8:	4a80      	ldr	r2, [pc, #512]	; (80034bc <huansic_xb_decodeBody+0x78c>)
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032c2:	6018      	str	r0, [r3, #0]
 80032c4:	3304      	adds	r3, #4
 80032c6:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];//after_update : 18
 80032cc:	7f7b      	ldrb	r3, [r7, #29]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	777a      	strb	r2, [r7, #29]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	7b9b      	ldrb	r3, [r3, #14]
 80032da:	76fb      	strb	r3, [r7, #27]
		delivering_num = listLength;
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <huansic_xb_decodeBody+0x790>)
 80032de:	7efb      	ldrb	r3, [r7, #27]
 80032e0:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e0da      	b.n	800349e <huansic_xb_decodeBody+0x76e>
			temp |= hxb->buffer[index + 17];
 80032e8:	7f7b      	ldrb	r3, [r7, #29]
 80032ea:	3311      	adds	r3, #17
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	7b9b      	ldrb	r3, [r3, #14]
 80032f2:	461a      	mov	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 16];
 8003300:	7f7b      	ldrb	r3, [r7, #29]
 8003302:	3310      	adds	r3, #16
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	7b9b      	ldrb	r3, [r3, #14]
 800330a:	461a      	mov	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	b25b      	sxtb	r3, r3
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fa00 	bl	800271c <huansic_order_new>
 800331c:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <huansic_xb_decodeBody+0x606>
				index += 18;
 8003324:	7f7b      	ldrb	r3, [r7, #29]
 8003326:	3312      	adds	r3, #18
 8003328:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fc82 	bl	8002c38 <custom_order_new_failed>
				continue;
 8003334:	e0b0      	b.n	8003498 <huansic_xb_decodeBody+0x768>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 8003336:	7f7b      	ldrb	r3, [r7, #29]
 8003338:	3301      	adds	r3, #1
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	7b9b      	ldrb	r3, [r3, #14]
 8003340:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index];
 8003342:	b21a      	sxth	r2, r3
 8003344:	7f7b      	ldrb	r3, [r7, #29]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	440b      	add	r3, r1
 800334a:	7b9b      	ldrb	r3, [r3, #14]
 800334c:	b21b      	sxth	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8003356:	7f7b      	ldrb	r3, [r7, #29]
 8003358:	3303      	adds	r3, #3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	7b9b      	ldrb	r3, [r3, #14]
 8003360:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 2];
 8003362:	b21a      	sxth	r2, r3
 8003364:	7f7b      	ldrb	r3, [r7, #29]
 8003366:	3302      	adds	r3, #2
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	440b      	add	r3, r1
 800336c:	7b9b      	ldrb	r3, [r3, #14]
 800336e:	b21b      	sxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 8003378:	7f7b      	ldrb	r3, [r7, #29]
 800337a:	3305      	adds	r3, #5
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	7b9b      	ldrb	r3, [r3, #14]
 8003382:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 4];
 8003384:	b21a      	sxth	r2, r3
 8003386:	7f7b      	ldrb	r3, [r7, #29]
 8003388:	3304      	adds	r3, #4
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	440b      	add	r3, r1
 800338e:	7b9b      	ldrb	r3, [r3, #14]
 8003390:	b21b      	sxth	r3, r3
 8003392:	4313      	orrs	r3, r2
 8003394:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 800339a:	7f7b      	ldrb	r3, [r7, #29]
 800339c:	3307      	adds	r3, #7
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	7b9b      	ldrb	r3, [r3, #14]
 80033a4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 6];
 80033a6:	b21a      	sxth	r2, r3
 80033a8:	7f7b      	ldrb	r3, [r7, #29]
 80033aa:	3306      	adds	r3, #6
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	440b      	add	r3, r1
 80033b0:	7b9b      	ldrb	r3, [r3, #14]
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 11];
 80033bc:	7f7b      	ldrb	r3, [r7, #29]
 80033be:	330b      	adds	r3, #11
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	7b9b      	ldrb	r3, [r3, #14]
 80033c6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 10];
 80033ce:	7f7b      	ldrb	r3, [r7, #29]
 80033d0:	330a      	adds	r3, #10
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	7b9b      	ldrb	r3, [r3, #14]
 80033d8:	461a      	mov	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 9];
 80033e6:	7f7b      	ldrb	r3, [r7, #29]
 80033e8:	3309      	adds	r3, #9
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	7b9b      	ldrb	r3, [r3, #14]
 80033f0:	461a      	mov	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 8];
 80033fe:	7f7b      	ldrb	r3, [r7, #29]
 8003400:	3308      	adds	r3, #8
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	7b9b      	ldrb	r3, [r3, #14]
 8003408:	461a      	mov	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 15];
 8003416:	7f7b      	ldrb	r3, [r7, #29]
 8003418:	330f      	adds	r3, #15
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	7b9b      	ldrb	r3, [r3, #14]
 8003420:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 14];
 8003428:	7f7b      	ldrb	r3, [r7, #29]
 800342a:	330e      	adds	r3, #14
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	7b9b      	ldrb	r3, [r3, #14]
 8003432:	461a      	mov	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 13];
 8003440:	7f7b      	ldrb	r3, [r7, #29]
 8003442:	330d      	adds	r3, #13
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	7b9b      	ldrb	r3, [r3, #14]
 800344a:	461a      	mov	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 12];
 8003458:	7f7b      	ldrb	r3, [r7, #29]
 800345a:	330c      	adds	r3, #12
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	7b9b      	ldrb	r3, [r3, #14]
 8003462:	461a      	mov	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 800346a:	f107 0310 	add.w	r3, r7, #16
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	615a      	str	r2, [r3, #20]

			delivering[i] = tempOrder;
 8003474:	7ffb      	ldrb	r3, [r7, #31]
 8003476:	4913      	ldr	r1, [pc, #76]	; (80034c4 <huansic_xb_decodeBody+0x794>)
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// increment index and record id
			index += 18;//18+listLength*18
 800347e:	7f7b      	ldrb	r3, [r7, #29]
 8003480:	3312      	adds	r3, #18
 8003482:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	7f3b      	ldrb	r3, [r7, #28]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	7739      	strb	r1, [r7, #28]
 800348e:	b252      	sxtb	r2, r2
 8003490:	3320      	adds	r3, #32
 8003492:	443b      	add	r3, r7
 8003494:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	3301      	adds	r3, #1
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	7ffa      	ldrb	r2, [r7, #31]
 80034a0:	7efb      	ldrb	r3, [r7, #27]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	f4ff af20 	bcc.w	80032e8 <huansic_xb_decodeBody+0x5b8>
		}

		/* order management */
		for (i = 0; i < 5; i++){
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e043      	b.n	8003536 <huansic_xb_decodeBody+0x806>
 80034ae:	bf00      	nop
 80034b0:	20000c0c 	.word	0x20000c0c
 80034b4:	20000c18 	.word	0x20000c18
 80034b8:	20000c24 	.word	0x20000c24
 80034bc:	0800cf08 	.word	0x0800cf08
 80034c0:	20000c08 	.word	0x20000c08
 80034c4:	20000bf4 	.word	0x20000bf4
			if (delivering[i] != 0 && delivering[i]->id != -1) {
 80034c8:	7ffb      	ldrb	r3, [r7, #31]
 80034ca:	4a9d      	ldr	r2, [pc, #628]	; (8003740 <huansic_xb_decodeBody+0xa10>)
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02d      	beq.n	8003530 <huansic_xb_decodeBody+0x800>
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	4a9a      	ldr	r2, [pc, #616]	; (8003740 <huansic_xb_decodeBody+0xa10>)
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d025      	beq.n	8003530 <huansic_xb_decodeBody+0x800>
				for (j = 0; j < updatedOrderIndex; j++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	77bb      	strb	r3, [r7, #30]
 80034e8:	e011      	b.n	800350e <huansic_xb_decodeBody+0x7de>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	4a94      	ldr	r2, [pc, #592]	; (8003740 <huansic_xb_decodeBody+0xa10>)
 80034ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	7fba      	ldrb	r2, [r7, #30]
 80034f6:	3220      	adds	r2, #32
 80034f8:	443a      	add	r2, r7
 80034fa:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80034fe:	4293      	cmp	r3, r2
 8003500:	d102      	bne.n	8003508 <huansic_xb_decodeBody+0x7d8>
						j = 255;
 8003502:	23ff      	movs	r3, #255	; 0xff
 8003504:	77bb      	strb	r3, [r7, #30]
						break;
 8003506:	e006      	b.n	8003516 <huansic_xb_decodeBody+0x7e6>
				for (j = 0; j < updatedOrderIndex; j++)
 8003508:	7fbb      	ldrb	r3, [r7, #30]
 800350a:	3301      	adds	r3, #1
 800350c:	77bb      	strb	r3, [r7, #30]
 800350e:	7fba      	ldrb	r2, [r7, #30]
 8003510:	7f3b      	ldrb	r3, [r7, #28]
 8003512:	429a      	cmp	r2, r3
 8003514:	d3e9      	bcc.n	80034ea <huansic_xb_decodeBody+0x7ba>
					}
				if (j != 255 && j != 0)
 8003516:	7fbb      	ldrb	r3, [r7, #30]
 8003518:	2bff      	cmp	r3, #255	; 0xff
 800351a:	d009      	beq.n	8003530 <huansic_xb_decodeBody+0x800>
 800351c:	7fbb      	ldrb	r3, [r7, #30]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <huansic_xb_decodeBody+0x800>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	4a86      	ldr	r2, [pc, #536]	; (8003740 <huansic_xb_decodeBody+0xa10>)
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff f950 	bl	80027d0 <huansic_order_delete>
		for (i = 0; i < 5; i++){
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	3301      	adds	r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d9c5      	bls.n	80034c8 <huansic_xb_decodeBody+0x798>
			}
		}
		/* record latest order */
		temp |= hxb->buffer[index + 17];
 800353c:	7f7b      	ldrb	r3, [r7, #29]
 800353e:	3311      	adds	r3, #17
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	7b9b      	ldrb	r3, [r3, #14]
 8003546:	461a      	mov	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 16];
 8003554:	7f7b      	ldrb	r3, [r7, #29]
 8003556:	3310      	adds	r3, #16
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	7b9b      	ldrb	r3, [r3, #14]
 800355e:	461a      	mov	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	b25b      	sxtb	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f8d6 	bl	800271c <huansic_order_new>
 8003570:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <huansic_xb_decodeBody+0x85a>
			index += 18;
 8003578:	7f7b      	ldrb	r3, [r7, #29]
 800357a:	3312      	adds	r3, #18
 800357c:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb58 	bl	8002c38 <custom_order_new_failed>
 8003588:	e0b4      	b.n	80036f4 <huansic_xb_decodeBody+0x9c4>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 800358a:	7f7b      	ldrb	r3, [r7, #29]
 800358c:	3301      	adds	r3, #1
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	7b9b      	ldrb	r3, [r3, #14]
 8003594:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index];
 8003596:	b21a      	sxth	r2, r3
 8003598:	7f7b      	ldrb	r3, [r7, #29]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	440b      	add	r3, r1
 800359e:	7b9b      	ldrb	r3, [r3, #14]
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	4313      	orrs	r3, r2
 80035a4:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 80035aa:	7f7b      	ldrb	r3, [r7, #29]
 80035ac:	3303      	adds	r3, #3
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	7b9b      	ldrb	r3, [r3, #14]
 80035b4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 2];
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	7f7b      	ldrb	r3, [r7, #29]
 80035ba:	3302      	adds	r3, #2
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	440b      	add	r3, r1
 80035c0:	7b9b      	ldrb	r3, [r3, #14]
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	805a      	strh	r2, [r3, #2]
			order_append(tempOrder);
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f001 fb3f 	bl	8004c50 <order_append>
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 80035d2:	7f7b      	ldrb	r3, [r7, #29]
 80035d4:	3305      	adds	r3, #5
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	7b9b      	ldrb	r3, [r3, #14]
 80035dc:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 4];
 80035de:	b21a      	sxth	r2, r3
 80035e0:	7f7b      	ldrb	r3, [r7, #29]
 80035e2:	3304      	adds	r3, #4
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	440b      	add	r3, r1
 80035e8:	7b9b      	ldrb	r3, [r3, #14]
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 80035f4:	7f7b      	ldrb	r3, [r7, #29]
 80035f6:	3307      	adds	r3, #7
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	7b9b      	ldrb	r3, [r3, #14]
 80035fe:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 6];
 8003600:	b21a      	sxth	r2, r3
 8003602:	7f7b      	ldrb	r3, [r7, #29]
 8003604:	3306      	adds	r3, #6
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	440b      	add	r3, r1
 800360a:	7b9b      	ldrb	r3, [r3, #14]
 800360c:	b21b      	sxth	r3, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 11];
 8003616:	7f7b      	ldrb	r3, [r7, #29]
 8003618:	330b      	adds	r3, #11
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	7b9b      	ldrb	r3, [r3, #14]
 8003620:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 10];
 8003628:	7f7b      	ldrb	r3, [r7, #29]
 800362a:	330a      	adds	r3, #10
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	7b9b      	ldrb	r3, [r3, #14]
 8003632:	461a      	mov	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 9];
 8003640:	7f7b      	ldrb	r3, [r7, #29]
 8003642:	3309      	adds	r3, #9
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	7b9b      	ldrb	r3, [r3, #14]
 800364a:	461a      	mov	r2, r3
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 8];
 8003658:	7f7b      	ldrb	r3, [r7, #29]
 800365a:	3308      	adds	r3, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	7b9b      	ldrb	r3, [r3, #14]
 8003662:	461a      	mov	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 15];
 8003670:	7f7b      	ldrb	r3, [r7, #29]
 8003672:	330f      	adds	r3, #15
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	7b9b      	ldrb	r3, [r3, #14]
 800367a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 14];
 8003682:	7f7b      	ldrb	r3, [r7, #29]
 8003684:	330e      	adds	r3, #14
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	7b9b      	ldrb	r3, [r3, #14]
 800368c:	461a      	mov	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 13];
 800369a:	7f7b      	ldrb	r3, [r7, #29]
 800369c:	330d      	adds	r3, #13
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	7b9b      	ldrb	r3, [r3, #14]
 80036a4:	461a      	mov	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 12];
 80036b2:	7f7b      	ldrb	r3, [r7, #29]
 80036b4:	330c      	adds	r3, #12
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	7b9b      	ldrb	r3, [r3, #14]
 80036bc:	461a      	mov	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	615a      	str	r2, [r3, #20]
 80036ce:	e011      	b.n	80036f4 <huansic_xb_decodeBody+0x9c4>
		}
	} else {
		hxb->pending_alignment = 1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = 0x00;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	330e      	adds	r3, #14
 80036e8:	2201      	movs	r2, #1
 80036ea:	4619      	mov	r1, r3
 80036ec:	f006 fa32 	bl	8009b54 <HAL_UART_Receive_IT>
		return XB_ID_ERROR;
 80036f0:	2306      	movs	r3, #6
 80036f2:	e020      	b.n	8003736 <huansic_xb_decodeBody+0xa06>
	}

	// set up next DMA
	hxb->lastUpdated = HAL_GetTick();		// update last updated time stamp
 80036f4:	f003 f816 	bl	8006724 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
	hxb->nextPackageLength = 6;		// header length
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2206      	movs	r2, #6
 8003702:	735a      	strb	r2, [r3, #13]
	hxb->nextPackageID = 0x00;		// the next one is header
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	731a      	strb	r2, [r3, #12]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f103 010e 	add.w	r1, r3, #14
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7b5b      	ldrb	r3, [r3, #13]
 8003718:	b29b      	uxth	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	f006 fa4a 	bl	8009bb4 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0204 	bic.w	r2, r2, #4
 8003732:	601a      	str	r2, [r3, #0]
	return XB_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000bf4 	.word	0x20000bf4

08003744 <huansic_xb_requestGameInfo>:

void huansic_xb_requestGameInfo(XB_HandleTypeDef *hxb) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
//	uint8_t buffer = 0x00;
//	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
	HAL_UART_Transmit(hxb->huart, zigbeeSend[0], 6, HAL_MAX_DELAY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	2206      	movs	r2, #6
 8003756:	4903      	ldr	r1, [pc, #12]	; (8003764 <huansic_xb_requestGameInfo+0x20>)
 8003758:	f006 f96a 	bl	8009a30 <HAL_UART_Transmit>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000004 	.word	0x20000004

08003768 <huansic_xb_setBeacon>:

void huansic_xb_setBeacon(XB_HandleTypeDef *hxb) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
//	uint8_t buffer = 0x02;
//	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
	HAL_UART_Transmit(hxb->huart, zigbeeSend[1], 6, HAL_MAX_DELAY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	2206      	movs	r2, #6
 800377a:	4903      	ldr	r1, [pc, #12]	; (8003788 <huansic_xb_setBeacon+0x20>)
 800377c:	f006 f958 	bl	8009a30 <HAL_UART_Transmit>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000000a 	.word	0x2000000a

0800378c <huansic_xb_dma_error>:

void huansic_xb_dma_error(XB_HandleTypeDef *hxb) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	330e      	adds	r3, #14
 80037a4:	2201      	movs	r2, #1
 80037a6:	4619      	mov	r1, r3
 80037a8:	f006 f9d4 	bl	8009b54 <HAL_UART_Receive_IT>
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <huansic_xb_it_error>:

void huansic_xb_it_error(XB_HandleTypeDef *hxb) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->lastByte = 0x00;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	330e      	adds	r3, #14
 80037d4:	2201      	movs	r2, #1
 80037d6:	4619      	mov	r1, r3
 80037d8:	f006 f9bc 	bl	8009b54 <HAL_UART_Receive_IT>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <huansic_xb_isr>:

enum XB_STATUS huansic_xb_isr(XB_HandleTypeDef *hxb) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	if (!hxb)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <huansic_xb_isr+0x12>
		return XB_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e038      	b.n	8003868 <huansic_xb_isr+0x84>

	if (hxb->buffer[0] == 0xAA && hxb->lastByte == 0x55) {		// if aligned (look for header)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b9b      	ldrb	r3, [r3, #14]
 80037fa:	2baa      	cmp	r3, #170	; 0xaa
 80037fc:	d122      	bne.n	8003844 <huansic_xb_isr+0x60>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003804:	2b55      	cmp	r3, #85	; 0x55
 8003806:	d11d      	bne.n	8003844 <huansic_xb_isr+0x60>
		hxb->pending_alignment = 0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->nextPackageID = 0x00;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	731a      	strb	r2, [r3, #12]
		hxb->buffer[1] = 0x55;		// for further processing
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2255      	movs	r2, #85	; 0x55
 800381a:	73da      	strb	r2, [r3, #15]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2], 4);		// receive the rest of header
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3310      	adds	r3, #16
 8003824:	2204      	movs	r2, #4
 8003826:	4619      	mov	r1, r3
 8003828:	f006 f9c4 	bl	8009bb4 <HAL_UART_Receive_DMA>
		hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0204 	bic.w	r2, r2, #4
 800383e:	601a      	str	r2, [r3, #0]
		return XB_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e011      	b.n	8003868 <huansic_xb_isr+0x84>
	} else {
		hxb->pending_alignment = 1;		// enter aligning mode if not already
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = hxb->buffer[0];
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7b9a      	ldrb	r2, [r3, #14]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	330e      	adds	r3, #14
 800385e:	2201      	movs	r2, #1
 8003860:	4619      	mov	r1, r3
 8003862:	f006 f977 	bl	8009b54 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8003866:	2305      	movs	r3, #5
	}
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <huansic_xb_dma_isr>:

enum XB_STATUS huansic_xb_dma_isr(XB_HandleTypeDef *hxb) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <huansic_xb_dma_isr+0x12>
		return XB_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e00c      	b.n	800389c <huansic_xb_dma_isr+0x2c>

	if (hxb->nextPackageID == 0x00)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7b1b      	ldrb	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <huansic_xb_dma_isr+0x24>
		return huansic_xb_decodeHeader(hxb);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fa05 	bl	8002c9a <huansic_xb_decodeHeader>
 8003890:	4603      	mov	r3, r0
 8003892:	e003      	b.n	800389c <huansic_xb_dma_isr+0x2c>
	else
		return huansic_xb_decodeBody(hxb);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fa4b 	bl	8002d30 <huansic_xb_decodeBody>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80038aa:	f002 fee3 	bl	8006674 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80038ae:	f000 fa55 	bl	8003d5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80038b2:	f000 fe4f 	bl	8004554 <MX_GPIO_Init>
	MX_DMA_Init();
 80038b6:	f000 fe27 	bl	8004508 <MX_DMA_Init>
	MX_I2C1_Init();
 80038ba:	f000 fa95 	bl	8003de8 <MX_I2C1_Init>
	MX_TIM1_Init();
 80038be:	f000 fac1 	bl	8003e44 <MX_TIM1_Init>
	MX_TIM2_Init();
 80038c2:	f000 fb83 	bl	8003fcc <MX_TIM2_Init>
	MX_TIM3_Init();
 80038c6:	f000 fbd5 	bl	8004074 <MX_TIM3_Init>
	MX_TIM4_Init();
 80038ca:	f000 fc27 	bl	800411c <MX_TIM4_Init>
	MX_TIM5_Init();
 80038ce:	f000 fc79 	bl	80041c4 <MX_TIM5_Init>
	MX_TIM8_Init();
 80038d2:	f000 fd01 	bl	80042d8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80038d6:	f000 fdc3 	bl	8004460 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80038da:	f000 fdeb 	bl	80044b4 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 80038de:	f000 fcc5 	bl	800426c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//Motor initialization part
	cmotor_lf.encoderInverted = 1;
 80038e2:	4ba0      	ldr	r3, [pc, #640]	; (8003b64 <main+0x2c0>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 80038ea:	4b9f      	ldr	r3, [pc, #636]	; (8003b68 <main+0x2c4>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 80038f2:	f000 fe85 	bl	8004600 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 80038f6:	f000 feb7 	bl	8004668 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 80038fa:	f000 fee9 	bl	80046d0 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 80038fe:	f000 ff1b 	bl	8004738 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8003902:	f000 ff4d 	bl	80047a0 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8003906:	f000 ff5f 	bl	80047c8 <HUAN_ZIGBEE_Init>
	huansic_order_init();
 800390a:	f7fe fed1 	bl	80026b0 <huansic_order_init>
	order_list_init();
 800390e:	f001 f991 	bl	8004c34 <order_list_init>
	exitpoints_init();
 8003912:	f001 fa31 	bl	8004d78 <exitpoints_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 8003916:	2014      	movs	r0, #20
 8003918:	f002 ff0e 	bl	8006738 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 800391c:	4893      	ldr	r0, [pc, #588]	; (8003b6c <main+0x2c8>)
 800391e:	f004 ff31 	bl	8008784 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 8003922:	4993      	ldr	r1, [pc, #588]	; (8003b70 <main+0x2cc>)
 8003924:	4893      	ldr	r0, [pc, #588]	; (8003b74 <main+0x2d0>)
 8003926:	f007 fa25 	bl	800ad74 <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 800392a:	4a93      	ldr	r2, [pc, #588]	; (8003b78 <main+0x2d4>)
 800392c:	2301      	movs	r3, #1
 800392e:	ca06      	ldmia	r2, {r1, r2}
 8003930:	4890      	ldr	r0, [pc, #576]	; (8003b74 <main+0x2d0>)
 8003932:	f002 f8d7 	bl	8005ae4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003936:	f001 ffd3 	bl	80058e0 <ssd1306_UpdateScreen>
//	Coordinate goal;
//	goal.x = 0;
//	goal.y = 50;
//	EstiCoord.x = (float)myCoord.x;
//	EstiCoord.y = (float)myCoord.y;
	CoordinateUpdate = 0;
 800393a:	4b90      	ldr	r3, [pc, #576]	; (8003b7c <main+0x2d8>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

		if(gameStatus == 0){		// if the game is not running
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <main+0x2dc>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0fb      	beq.n	8003940 <main+0x9c>
//	    	HAL_Delay(1000);
//	    	LED1_OFF;
		}
		else
		{
			while (gameStage == 0) {		// pre-match
 8003948:	e00d      	b.n	8003966 <main+0xc2>
				chao_move_angle(0, 0);
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f7fe fa61 	bl	8001e18 <chao_move_angle>
				// find angle offset
				//initangleZ = -himu.theta[2];
				// do some initialization
				Cal_Battery_Coord();
 8003956:	f002 fd57 	bl	8006408 <Cal_Battery_Coord>
				// get obstacle list
				huansic_xb_requestGameInfo(&hxb);
 800395a:	488a      	ldr	r0, [pc, #552]	; (8003b84 <main+0x2e0>)
 800395c:	f7ff fef2 	bl	8003744 <huansic_xb_requestGameInfo>
				task_mode = 0;
 8003960:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <main+0x2e4>)
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
			while (gameStage == 0) {		// pre-match
 8003966:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <main+0x2e8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ed      	beq.n	800394a <main+0xa6>
			}

			while (gameStage == 1){			// first-half
 800396e:	e0d8      	b.n	8003b22 <main+0x27e>
				if(task_mode == 0){
 8003970:	4b85      	ldr	r3, [pc, #532]	; (8003b88 <main+0x2e4>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d110      	bne.n	800399a <main+0xf6>
					//setChargingPile
					set_Beacons();
 8003978:	f002 fd22 	bl	80063c0 <set_Beacons>
					while(orders.length == 0)
 800397c:	e005      	b.n	800398a <main+0xe6>
					{
						chao_move_angle(0,0);
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f7fe fa47 	bl	8001e18 <chao_move_angle>
					while(orders.length == 0)
 800398a:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <main+0x2ec>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f5      	beq.n	800397e <main+0xda>
					}
					task_mode = 4;
 8003992:	4b7d      	ldr	r3, [pc, #500]	; (8003b88 <main+0x2e4>)
 8003994:	2204      	movs	r2, #4
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e0c3      	b.n	8003b22 <main+0x27e>
				}
				else {
					if(task_mode == 1){
 800399a:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <main+0x2e4>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d126      	bne.n	80039f0 <main+0x14c>
						for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	3301      	adds	r3, #1
 80039a6:	71bb      	strb	r3, [r7, #6]
 80039a8:	e00f      	b.n	80039ca <main+0x126>
						{
							orders.buffer[i - 1] = orders.buffer[i];
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	79ba      	ldrb	r2, [r7, #6]
 80039ae:	3a01      	subs	r2, #1
 80039b0:	4977      	ldr	r1, [pc, #476]	; (8003b90 <main+0x2ec>)
 80039b2:	0092      	lsls	r2, r2, #2
 80039b4:	440a      	add	r2, r1
 80039b6:	4976      	ldr	r1, [pc, #472]	; (8003b90 <main+0x2ec>)
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3202      	adds	r2, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6013      	str	r3, [r2, #0]
						for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 80039c4:	79bb      	ldrb	r3, [r7, #6]
 80039c6:	3301      	adds	r3, #1
 80039c8:	71bb      	strb	r3, [r7, #6]
 80039ca:	4b71      	ldr	r3, [pc, #452]	; (8003b90 <main+0x2ec>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	79ba      	ldrb	r2, [r7, #6]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3ea      	bcc.n	80039aa <main+0x106>
						}
						orders.length -= 1;
 80039d4:	4b6e      	ldr	r3, [pc, #440]	; (8003b90 <main+0x2ec>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	3b01      	subs	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <main+0x2ec>)
 80039de:	701a      	strb	r2, [r3, #0]
						Get_packet(merchant);
 80039e0:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <main+0x2f0>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f002 fd46 	bl	8006474 <Get_packet>
						task_mode = 4;
 80039e8:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <main+0x2e4>)
 80039ea:	2204      	movs	r2, #4
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e098      	b.n	8003b22 <main+0x27e>
					}
					else if(task_mode == 2){
 80039f0:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <main+0x2e4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d107      	bne.n	8003a08 <main+0x164>
						Send_packet(consumer);
 80039f8:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <main+0x2f4>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	f002 fd46 	bl	800648c <Send_packet>
						task_mode = 4;
 8003a00:	4b61      	ldr	r3, [pc, #388]	; (8003b88 <main+0x2e4>)
 8003a02:	2204      	movs	r2, #4
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e08c      	b.n	8003b22 <main+0x27e>
					}
					else if(task_mode == 4)// if task_mode == 4
 8003a08:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <main+0x2e4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	f040 8088 	bne.w	8003b22 <main+0x27e>
					{
						merchant_index = Get_nearest_order();
 8003a12:	f001 f961 	bl	8004cd8 <Get_nearest_order>
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
						if(merchant_index == -1)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d104      	bne.n	8003a2e <main+0x18a>
							merchant = myCoord;
 8003a24:	4a5b      	ldr	r2, [pc, #364]	; (8003b94 <main+0x2f0>)
 8003a26:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <main+0x2f8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e009      	b.n	8003a42 <main+0x19e>
						else
							merchant = orders.buffer[merchant_index];
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	4958      	ldr	r1, [pc, #352]	; (8003b94 <main+0x2f0>)
 8003a34:	4a56      	ldr	r2, [pc, #344]	; (8003b90 <main+0x2ec>)
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	6010      	str	r0, [r2, #0]
						consumer = Get_nearest_consumer();
 8003a42:	f002 fd2f 	bl	80064a4 <Get_nearest_consumer>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <main+0x2f4>)
 8003a4a:	6013      	str	r3, [r2, #0]

						if(delivering_num > 4){
 8003a4c:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <main+0x2fc>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d903      	bls.n	8003a5c <main+0x1b8>
							task_mode = 2;
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <main+0x2e4>)
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e062      	b.n	8003b22 <main+0x27e>
						}
						else if(merchant_index == -1)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d10e      	bne.n	8003a84 <main+0x1e0>
						{
							if(delivering_num == 0){
 8003a66:	4b4e      	ldr	r3, [pc, #312]	; (8003ba0 <main+0x2fc>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <main+0x1d8>
								chao_move_angle(0,0);
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f7fe f9cf 	bl	8001e18 <chao_move_angle>
 8003a7a:	e052      	b.n	8003b22 <main+0x27e>
							}
							else{
								task_mode = 2;
 8003a7c:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <main+0x2e4>)
 8003a7e:	2202      	movs	r2, #2
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e04e      	b.n	8003b22 <main+0x27e>
							}
						}
						else if(delivering_num == 0){
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <main+0x2fc>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <main+0x1f0>
							task_mode = 1;
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <main+0x2e4>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e046      	b.n	8003b22 <main+0x27e>
						}
						else if(gameStageTimeLeft < 10000 && delivering_num > 0){
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <main+0x300>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d807      	bhi.n	8003ab0 <main+0x20c>
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <main+0x2fc>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <main+0x20c>
							task_mode = 2;
 8003aa8:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <main+0x2e4>)
 8003aaa:	2202      	movs	r2, #2
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e038      	b.n	8003b22 <main+0x27e>
						}
						else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003ab0:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <main+0x2f0>)
 8003ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b38      	ldr	r3, [pc, #224]	; (8003b9c <main+0x2f8>)
 8003aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003ac4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003ac8:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <main+0x2f0>)
 8003aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4b32      	ldr	r3, [pc, #200]	; (8003b9c <main+0x2f8>)
 8003ad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ad6:	1acb      	subs	r3, r1, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bfb8      	it	lt
 8003adc:	425b      	neglt	r3, r3
 8003ade:	441a      	add	r2, r3
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <main+0x2f4>)
 8003ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <main+0x2f8>)
 8003aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003af4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <main+0x2f4>)
 8003afa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003afe:	4618      	mov	r0, r3
 8003b00:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <main+0x2f8>)
 8003b02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b06:	1ac3      	subs	r3, r0, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bfb8      	it	lt
 8003b0c:	425b      	neglt	r3, r3
 8003b0e:	440b      	add	r3, r1
 8003b10:	429a      	cmp	r2, r3
 8003b12:	da03      	bge.n	8003b1c <main+0x278>
							task_mode = 1;
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <main+0x2e4>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <main+0x27e>
						}
						else{
							task_mode = 2;
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <main+0x2e4>)
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]
			while (gameStage == 1){			// first-half
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <main+0x2e8>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	f43f af22 	beq.w	8003970 <main+0xcc>
					}
				}

			}
			//得做初始化
			while (gameStage == 2){			// second-half
 8003b2c:	e100      	b.n	8003d30 <main+0x48c>
				while(myCharge < 500)
				{
					huansic_xb_requestGameInfo(&hxb);
 8003b2e:	4815      	ldr	r0, [pc, #84]	; (8003b84 <main+0x2e0>)
 8003b30:	f7ff fe08 	bl	8003744 <huansic_xb_requestGameInfo>
					charge = Get_nearest_Beacon();
 8003b34:	f002 fd24 	bl	8006580 <Get_nearest_Beacon>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <main+0x304>)
 8003b3c:	6013      	str	r3, [r2, #0]
					GotoDestination(charge, 0);
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <main+0x304>)
 8003b40:	2100      	movs	r1, #0
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	f001 f950 	bl	8004de8 <GotoDestination>
				while(myCharge < 500)
 8003b48:	4b18      	ldr	r3, [pc, #96]	; (8003bac <main+0x308>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b50:	dbed      	blt.n	8003b2e <main+0x28a>
				}
				if(task_mode == 1){
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <main+0x2e4>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d14d      	bne.n	8003bf6 <main+0x352>
					for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	717b      	strb	r3, [r7, #5]
 8003b60:	e036      	b.n	8003bd0 <main+0x32c>
 8003b62:	bf00      	nop
 8003b64:	200009a0 	.word	0x200009a0
 8003b68:	20000a18 	.word	0x20000a18
 8003b6c:	20000800 	.word	0x20000800
 8003b70:	0800cf10 	.word	0x0800cf10
 8003b74:	20000c2c 	.word	0x20000c2c
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	20000c18 	.word	0x20000c18
 8003b80:	20000b7d 	.word	0x20000b7d
 8003b84:	20000ae8 	.word	0x20000ae8
 8003b88:	20000b7e 	.word	0x20000b7e
 8003b8c:	20000b7c 	.word	0x20000b7c
 8003b90:	20007cd8 	.word	0x20007cd8
 8003b94:	20000c3c 	.word	0x20000c3c
 8003b98:	20000c40 	.word	0x20000c40
 8003b9c:	20000c0c 	.word	0x20000c0c
 8003ba0:	20000c08 	.word	0x20000c08
 8003ba4:	20000c28 	.word	0x20000c28
 8003ba8:	20000c44 	.word	0x20000c44
 8003bac:	20000c24 	.word	0x20000c24
					{
						orders.buffer[i - 1] = orders.buffer[i];
 8003bb0:	797b      	ldrb	r3, [r7, #5]
 8003bb2:	797a      	ldrb	r2, [r7, #5]
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	4961      	ldr	r1, [pc, #388]	; (8003d3c <main+0x498>)
 8003bb8:	0092      	lsls	r2, r2, #2
 8003bba:	440a      	add	r2, r1
 8003bbc:	495f      	ldr	r1, [pc, #380]	; (8003d3c <main+0x498>)
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3202      	adds	r2, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6013      	str	r3, [r2, #0]
					for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 8003bca:	797b      	ldrb	r3, [r7, #5]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	717b      	strb	r3, [r7, #5]
 8003bd0:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <main+0x498>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	797a      	ldrb	r2, [r7, #5]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3ea      	bcc.n	8003bb0 <main+0x30c>
					}
					orders.length -= 1;
 8003bda:	4b58      	ldr	r3, [pc, #352]	; (8003d3c <main+0x498>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <main+0x498>)
 8003be4:	701a      	strb	r2, [r3, #0]
					Get_packet(merchant);
 8003be6:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <main+0x49c>)
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	f002 fc43 	bl	8006474 <Get_packet>
					task_mode = 4;
 8003bee:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <main+0x4a0>)
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e09c      	b.n	8003d30 <main+0x48c>
				}
				else if(task_mode == 2){
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <main+0x4a0>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d107      	bne.n	8003c0e <main+0x36a>
					Send_packet(consumer);
 8003bfe:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <main+0x4a4>)
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f002 fc43 	bl	800648c <Send_packet>
					task_mode = 4;
 8003c06:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <main+0x4a0>)
 8003c08:	2204      	movs	r2, #4
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e090      	b.n	8003d30 <main+0x48c>
				}
				else if(task_mode == 4)// if task_mode == 4
 8003c0e:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <main+0x4a0>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	f040 8089 	bne.w	8003d2a <main+0x486>
				{
					merchant_index = Get_nearest_order();
 8003c18:	f001 f85e 	bl	8004cd8 <Get_nearest_order>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	71fb      	strb	r3, [r7, #7]
					if(merchant_index == -1)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d104      	bne.n	8003c34 <main+0x390>
						merchant = myCoord;
 8003c2a:	4a45      	ldr	r2, [pc, #276]	; (8003d40 <main+0x49c>)
 8003c2c:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <main+0x4a8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e009      	b.n	8003c48 <main+0x3a4>
					else
						merchant = orders.buffer[merchant_index];
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	4941      	ldr	r1, [pc, #260]	; (8003d40 <main+0x49c>)
 8003c3a:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <main+0x498>)
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	460a      	mov	r2, r1
 8003c42:	3302      	adds	r3, #2
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	6010      	str	r0, [r2, #0]
					consumer = Get_nearest_consumer();
 8003c48:	f002 fc2c 	bl	80064a4 <Get_nearest_consumer>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <main+0x4a4>)
 8003c50:	6013      	str	r3, [r2, #0]

					if(delivering_num > 4){
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <main+0x4ac>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d903      	bls.n	8003c62 <main+0x3be>
						task_mode = 2;
 8003c5a:	4b3a      	ldr	r3, [pc, #232]	; (8003d44 <main+0x4a0>)
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e066      	b.n	8003d30 <main+0x48c>
					}
					else if(merchant_index == -1)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d10e      	bne.n	8003c8a <main+0x3e6>
					{
						if(delivering_num == 0){
 8003c6c:	4b38      	ldr	r3, [pc, #224]	; (8003d50 <main+0x4ac>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <main+0x3de>
							chao_move_angle(0,0);
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	f04f 0000 	mov.w	r0, #0
 8003c7c:	f7fe f8cc 	bl	8001e18 <chao_move_angle>
 8003c80:	e056      	b.n	8003d30 <main+0x48c>
						}
						else{
							task_mode = 2;
 8003c82:	4b30      	ldr	r3, [pc, #192]	; (8003d44 <main+0x4a0>)
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e052      	b.n	8003d30 <main+0x48c>
						}
					}
					else if(delivering_num == 0){
 8003c8a:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <main+0x4ac>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <main+0x3f6>
						task_mode = 1;
 8003c92:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <main+0x4a0>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e04a      	b.n	8003d30 <main+0x48c>
					}
					else if(gameStageTimeLeft < 10000 && delivering_num > 0){
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <main+0x4b0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d807      	bhi.n	8003cb6 <main+0x412>
 8003ca6:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <main+0x4ac>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <main+0x412>
						task_mode = 2;
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <main+0x4a0>)
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	e03c      	b.n	8003d30 <main+0x48c>
					}
					else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <main+0x49c>)
 8003cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <main+0x4a8>)
 8003cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003cca:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <main+0x49c>)
 8003cd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <main+0x4a8>)
 8003cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cdc:	1acb      	subs	r3, r1, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfb8      	it	lt
 8003ce2:	425b      	neglt	r3, r3
 8003ce4:	441a      	add	r2, r3
 8003ce6:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <main+0x4a4>)
 8003ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <main+0x4a8>)
 8003cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf4:	1acb      	subs	r3, r1, r3
 8003cf6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003cfa:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <main+0x4a4>)
 8003d00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d04:	4618      	mov	r0, r3
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <main+0x4a8>)
 8003d08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d0c:	1ac3      	subs	r3, r0, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	425b      	neglt	r3, r3
 8003d14:	440b      	add	r3, r1
 8003d16:	429a      	cmp	r2, r3
 8003d18:	da03      	bge.n	8003d22 <main+0x47e>
						task_mode = 1;
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <main+0x4a0>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e006      	b.n	8003d30 <main+0x48c>
					}
					else{
						task_mode = 2;
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <main+0x4a0>)
 8003d24:	2202      	movs	r2, #2
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e002      	b.n	8003d30 <main+0x48c>
					}
				}
				else
					task_mode = 4;
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <main+0x4a0>)
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	701a      	strb	r2, [r3, #0]
			while (gameStage == 2){			// second-half
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <main+0x4b4>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f43f af07 	beq.w	8003b48 <main+0x2a4>
		if(gameStatus == 0){		// if the game is not running
 8003d3a:	e601      	b.n	8003940 <main+0x9c>
 8003d3c:	20007cd8 	.word	0x20007cd8
 8003d40:	20000c3c 	.word	0x20000c3c
 8003d44:	20000b7e 	.word	0x20000b7e
 8003d48:	20000c40 	.word	0x20000c40
 8003d4c:	20000c0c 	.word	0x20000c0c
 8003d50:	20000c08 	.word	0x20000c08
 8003d54:	20000c28 	.word	0x20000c28
 8003d58:	20000b7c 	.word	0x20000b7c

08003d5c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b090      	sub	sp, #64	; 0x40
 8003d60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003d62:	f107 0318 	add.w	r3, r7, #24
 8003d66:	2228      	movs	r2, #40	; 0x28
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f006 fd0c 	bl	800a788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d86:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d8c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d92:	2302      	movs	r3, #2
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003d9c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003da2:	f107 0318 	add.w	r3, r7, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 f880 	bl	8007eac <HAL_RCC_OscConfig>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <SystemClock_Config+0x5a>
			{
		Error_Handler();
 8003db2:	f000 fd7d 	bl	80048b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003db6:	230f      	movs	r3, #15
 8003db8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 faed 	bl	80083b0 <HAL_RCC_ClockConfig>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <SystemClock_Config+0x84>
			{
		Error_Handler();
 8003ddc:	f000 fd68 	bl	80048b0 <Error_Handler>
	}
}
 8003de0:	bf00      	nop
 8003de2:	3740      	adds	r7, #64	; 0x40
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003dee:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <MX_I2C1_Init+0x54>)
 8003df0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003df4:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <MX_I2C1_Init+0x58>)
 8003df6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e0a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <MX_I2C1_Init+0x50>)
 8003e26:	f003 fbe7 	bl	80075f8 <HAL_I2C_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8003e30:	f000 fd3e 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000644 	.word	0x20000644
 8003e3c:	40005400 	.word	0x40005400
 8003e40:	000186a0 	.word	0x000186a0

08003e44 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b096      	sub	sp, #88	; 0x58
 8003e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	615a      	str	r2, [r3, #20]
 8003e74:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	2220      	movs	r2, #32
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f006 fc83 	bl	800a788 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003e82:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003e84:	4a50      	ldr	r2, [pc, #320]	; (8003fc8 <MX_TIM1_Init+0x184>)
 8003e86:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003e88:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8e:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9c:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003ea2:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea8:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003eae:	4845      	ldr	r0, [pc, #276]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003eb0:	f004 fc18 	bl	80086e4 <HAL_TIM_Base_Init>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 8003eba:	f000 fcf9 	bl	80048b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ec4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec8:	4619      	mov	r1, r3
 8003eca:	483e      	ldr	r0, [pc, #248]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003ecc:	f005 f8c2 	bl	8009054 <HAL_TIM_ConfigClockSource>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 8003ed6:	f000 fceb 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003eda:	483a      	ldr	r0, [pc, #232]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003edc:	f004 fcb2 	bl	8008844 <HAL_TIM_PWM_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 8003ee6:	f000 fce3 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ef2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4832      	ldr	r0, [pc, #200]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003efa:	f005 fc7d 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 8003f04:	f000 fcd4 	bl	80048b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f08:	2360      	movs	r3, #96	; 0x60
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f14:	2300      	movs	r3, #0
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f20:	2300      	movs	r3, #0
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4825      	ldr	r0, [pc, #148]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003f2e:	f004 ffd3 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 8003f38:	f000 fcba 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f40:	2204      	movs	r2, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	481f      	ldr	r0, [pc, #124]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003f46:	f004 ffc7 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8003f50:	f000 fcae 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f58:	2208      	movs	r2, #8
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4819      	ldr	r0, [pc, #100]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003f5e:	f004 ffbb 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 8003f68:	f000 fca2 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f70:	220c      	movs	r2, #12
 8003f72:	4619      	mov	r1, r3
 8003f74:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003f76:	f004 ffaf 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 8003f80:	f000 fc96 	bl	80048b0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f9c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4807      	ldr	r0, [pc, #28]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003fa8:	f005 fc92 	bl	80098d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 8003fb2:	f000 fc7d 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003fb6:	4803      	ldr	r0, [pc, #12]	; (8003fc4 <MX_TIM1_Init+0x180>)
 8003fb8:	f001 ff7a 	bl	8005eb0 <HAL_TIM_MspPostInit>

}
 8003fbc:	bf00      	nop
 8003fbe:	3758      	adds	r7, #88	; 0x58
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000698 	.word	0x20000698
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	; 0x30
 8003fd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003fd2:	f107 030c 	add.w	r3, r7, #12
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f006 fbd4 	bl	800a788 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <MX_TIM2_Init+0xa4>)
 8003fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fee:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <MX_TIM2_Init+0xa4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <MX_TIM2_Init+0xa4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <MX_TIM2_Init+0xa4>)
 8003ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004002:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <MX_TIM2_Init+0xa4>)
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <MX_TIM2_Init+0xa4>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004010:	2301      	movs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004018:	2301      	movs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004028:	2301      	movs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004034:	f107 030c 	add.w	r3, r7, #12
 8004038:	4619      	mov	r1, r3
 800403a:	480d      	ldr	r0, [pc, #52]	; (8004070 <MX_TIM2_Init+0xa4>)
 800403c:	f004 fd14 	bl	8008a68 <HAL_TIM_Encoder_Init>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 8004046:	f000 fc33 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4806      	ldr	r0, [pc, #24]	; (8004070 <MX_TIM2_Init+0xa4>)
 8004058:	f005 fbce 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 8004062:	f000 fc25 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8004066:	bf00      	nop
 8004068:	3730      	adds	r7, #48	; 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200006e0 	.word	0x200006e0

08004074 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800407a:	f107 030c 	add.w	r3, r7, #12
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f006 fb80 	bl	800a788 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004090:	4b20      	ldr	r3, [pc, #128]	; (8004114 <MX_TIM3_Init+0xa0>)
 8004092:	4a21      	ldr	r2, [pc, #132]	; (8004118 <MX_TIM3_Init+0xa4>)
 8004094:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <MX_TIM3_Init+0xa0>)
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <MX_TIM3_Init+0xa0>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <MX_TIM3_Init+0xa0>)
 80040a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <MX_TIM3_Init+0xa0>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <MX_TIM3_Init+0xa0>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040be:	2301      	movs	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040ce:	2301      	movs	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	4619      	mov	r1, r3
 80040e0:	480c      	ldr	r0, [pc, #48]	; (8004114 <MX_TIM3_Init+0xa0>)
 80040e2:	f004 fcc1 	bl	8008a68 <HAL_TIM_Encoder_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 80040ec:	f000 fbe0 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4805      	ldr	r0, [pc, #20]	; (8004114 <MX_TIM3_Init+0xa0>)
 80040fe:	f005 fb7b 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8004108:	f000 fbd2 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800410c:	bf00      	nop
 800410e:	3730      	adds	r7, #48	; 0x30
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000728 	.word	0x20000728
 8004118:	40000400 	.word	0x40000400

0800411c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	; 0x30
 8004120:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8004122:	f107 030c 	add.w	r3, r7, #12
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f006 fb2c 	bl	800a788 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <MX_TIM4_Init+0xa0>)
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <MX_TIM4_Init+0xa4>)
 800413c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800413e:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <MX_TIM4_Init+0xa0>)
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <MX_TIM4_Init+0xa0>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800414a:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <MX_TIM4_Init+0xa0>)
 800414c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004150:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <MX_TIM4_Init+0xa0>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <MX_TIM4_Init+0xa0>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800415e:	2301      	movs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004166:	2301      	movs	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004176:	2301      	movs	r3, #1
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800417a:	2300      	movs	r3, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004182:	f107 030c 	add.w	r3, r7, #12
 8004186:	4619      	mov	r1, r3
 8004188:	480c      	ldr	r0, [pc, #48]	; (80041bc <MX_TIM4_Init+0xa0>)
 800418a:	f004 fc6d 	bl	8008a68 <HAL_TIM_Encoder_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8004194:	f000 fb8c 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004198:	2300      	movs	r3, #0
 800419a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4805      	ldr	r0, [pc, #20]	; (80041bc <MX_TIM4_Init+0xa0>)
 80041a6:	f005 fb27 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 80041b0:	f000 fb7e 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80041b4:	bf00      	nop
 80041b6:	3730      	adds	r7, #48	; 0x30
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000770 	.word	0x20000770
 80041c0:	40000800 	.word	0x40000800

080041c4 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	; 0x30
 80041c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80041ca:	f107 030c 	add.w	r3, r7, #12
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f006 fad8 	bl	800a788 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <MX_TIM5_Init+0xa0>)
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <MX_TIM5_Init+0xa4>)
 80041e4:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <MX_TIM5_Init+0xa0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <MX_TIM5_Init+0xa0>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 80041f2:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <MX_TIM5_Init+0xa0>)
 80041f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041f8:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <MX_TIM5_Init+0xa0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <MX_TIM5_Init+0xa0>)
 8004202:	2200      	movs	r2, #0
 8004204:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004206:	2301      	movs	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800420e:	2301      	movs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004212:	2300      	movs	r3, #0
 8004214:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800421e:	2301      	movs	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004222:	2300      	movs	r3, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	4619      	mov	r1, r3
 8004230:	480c      	ldr	r0, [pc, #48]	; (8004264 <MX_TIM5_Init+0xa0>)
 8004232:	f004 fc19 	bl	8008a68 <HAL_TIM_Encoder_Init>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 800423c:	f000 fb38 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004240:	2300      	movs	r3, #0
 8004242:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4805      	ldr	r0, [pc, #20]	; (8004264 <MX_TIM5_Init+0xa0>)
 800424e:	f005 fad3 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 8004258:	f000 fb2a 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800425c:	bf00      	nop
 800425e:	3730      	adds	r7, #48	; 0x30
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200007b8 	.word	0x200007b8
 8004268:	40000c00 	.word	0x40000c00

0800426c <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004272:	463b      	mov	r3, r7
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <MX_TIM6_Init+0x64>)
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <MX_TIM6_Init+0x68>)
 800427e:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <MX_TIM6_Init+0x64>)
 8004282:	2247      	movs	r2, #71	; 0x47
 8004284:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <MX_TIM6_Init+0x64>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <MX_TIM6_Init+0x64>)
 800428e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004292:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <MX_TIM6_Init+0x64>)
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800429a:	480d      	ldr	r0, [pc, #52]	; (80042d0 <MX_TIM6_Init+0x64>)
 800429c:	f004 fa22 	bl	80086e4 <HAL_TIM_Base_Init>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 80042a6:	f000 fb03 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80042b2:	463b      	mov	r3, r7
 80042b4:	4619      	mov	r1, r3
 80042b6:	4806      	ldr	r0, [pc, #24]	; (80042d0 <MX_TIM6_Init+0x64>)
 80042b8:	f005 fa9e 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 80042c2:	f000 faf5 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000800 	.word	0x20000800
 80042d4:	40001000 	.word	0x40001000

080042d8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b096      	sub	sp, #88	; 0x58
 80042dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80042de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80042ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80042f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	615a      	str	r2, [r3, #20]
 8004308:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	2220      	movs	r2, #32
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f006 fa39 	bl	800a788 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8004316:	4b50      	ldr	r3, [pc, #320]	; (8004458 <MX_TIM8_Init+0x180>)
 8004318:	4a50      	ldr	r2, [pc, #320]	; (800445c <MX_TIM8_Init+0x184>)
 800431a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800431c:	4b4e      	ldr	r3, [pc, #312]	; (8004458 <MX_TIM8_Init+0x180>)
 800431e:	2200      	movs	r2, #0
 8004320:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004322:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <MX_TIM8_Init+0x180>)
 8004324:	2200      	movs	r2, #0
 8004326:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8004328:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <MX_TIM8_Init+0x180>)
 800432a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800432e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004330:	4b49      	ldr	r3, [pc, #292]	; (8004458 <MX_TIM8_Init+0x180>)
 8004332:	2200      	movs	r2, #0
 8004334:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004336:	4b48      	ldr	r3, [pc, #288]	; (8004458 <MX_TIM8_Init+0x180>)
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800433c:	4b46      	ldr	r3, [pc, #280]	; (8004458 <MX_TIM8_Init+0x180>)
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004342:	4845      	ldr	r0, [pc, #276]	; (8004458 <MX_TIM8_Init+0x180>)
 8004344:	f004 f9ce 	bl	80086e4 <HAL_TIM_Base_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 800434e:	f000 faaf 	bl	80048b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004356:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800435c:	4619      	mov	r1, r3
 800435e:	483e      	ldr	r0, [pc, #248]	; (8004458 <MX_TIM8_Init+0x180>)
 8004360:	f004 fe78 	bl	8009054 <HAL_TIM_ConfigClockSource>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 800436a:	f000 faa1 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800436e:	483a      	ldr	r0, [pc, #232]	; (8004458 <MX_TIM8_Init+0x180>)
 8004370:	f004 fa68 	bl	8008844 <HAL_TIM_PWM_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 800437a:	f000 fa99 	bl	80048b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800438a:	4619      	mov	r1, r3
 800438c:	4832      	ldr	r0, [pc, #200]	; (8004458 <MX_TIM8_Init+0x180>)
 800438e:	f005 fa33 	bl	80097f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 8004398:	f000 fa8a 	bl	80048b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800439c:	2360      	movs	r3, #96	; 0x60
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043a8:	2300      	movs	r3, #0
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043bc:	2200      	movs	r2, #0
 80043be:	4619      	mov	r1, r3
 80043c0:	4825      	ldr	r0, [pc, #148]	; (8004458 <MX_TIM8_Init+0x180>)
 80043c2:	f004 fd89 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 80043cc:	f000 fa70 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d4:	2204      	movs	r2, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	481f      	ldr	r0, [pc, #124]	; (8004458 <MX_TIM8_Init+0x180>)
 80043da:	f004 fd7d 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 80043e4:	f000 fa64 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ec:	2208      	movs	r2, #8
 80043ee:	4619      	mov	r1, r3
 80043f0:	4819      	ldr	r0, [pc, #100]	; (8004458 <MX_TIM8_Init+0x180>)
 80043f2:	f004 fd71 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 80043fc:	f000 fa58 	bl	80048b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004404:	220c      	movs	r2, #12
 8004406:	4619      	mov	r1, r3
 8004408:	4813      	ldr	r0, [pc, #76]	; (8004458 <MX_TIM8_Init+0x180>)
 800440a:	f004 fd65 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 8004414:	f000 fa4c 	bl	80048b0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004418:	2300      	movs	r3, #0
 800441a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800442c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004430:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4807      	ldr	r0, [pc, #28]	; (8004458 <MX_TIM8_Init+0x180>)
 800443c:	f005 fa48 	bl	80098d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 8004446:	f000 fa33 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800444a:	4803      	ldr	r0, [pc, #12]	; (8004458 <MX_TIM8_Init+0x180>)
 800444c:	f001 fd30 	bl	8005eb0 <HAL_TIM_MspPostInit>

}
 8004450:	bf00      	nop
 8004452:	3758      	adds	r7, #88	; 0x58
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000848 	.word	0x20000848
 800445c:	40013400 	.word	0x40013400

08004460 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <MX_USART2_UART_Init+0x50>)
 8004468:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 800446c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004470:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 800447a:	2200      	movs	r2, #0
 800447c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 8004480:	2200      	movs	r2, #0
 8004482:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 8004486:	220c      	movs	r2, #12
 8004488:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 800448c:	2200      	movs	r2, #0
 800448e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 8004492:	2200      	movs	r2, #0
 8004494:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <MX_USART2_UART_Init+0x4c>)
 8004498:	f005 fa7d 	bl	8009996 <HAL_UART_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 80044a2:	f000 fa05 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000890 	.word	0x20000890
 80044b0:	40004400 	.word	0x40004400

080044b4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044ba:	4a12      	ldr	r2, [pc, #72]	; (8004504 <MX_USART3_UART_Init+0x50>)
 80044bc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044da:	220c      	movs	r2, #12
 80044dc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80044ea:	4805      	ldr	r0, [pc, #20]	; (8004500 <MX_USART3_UART_Init+0x4c>)
 80044ec:	f005 fa53 	bl	8009996 <HAL_UART_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 80044f6:	f000 f9db 	bl	80048b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200008d4 	.word	0x200008d4
 8004504:	40004800 	.word	0x40004800

08004508 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <MX_DMA_Init+0x48>)
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4a0f      	ldr	r2, [pc, #60]	; (8004550 <MX_DMA_Init+0x48>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6153      	str	r3, [r2, #20]
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <MX_DMA_Init+0x48>)
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	2103      	movs	r1, #3
 800452a:	200d      	movs	r0, #13
 800452c:	f002 f9ff 	bl	800692e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004530:	200d      	movs	r0, #13
 8004532:	f002 fa18 	bl	8006966 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8004536:	2200      	movs	r2, #0
 8004538:	2103      	movs	r1, #3
 800453a:	2010      	movs	r0, #16
 800453c:	f002 f9f7 	bl	800692e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004540:	2010      	movs	r0, #16
 8004542:	f002 fa10 	bl	8006966 <HAL_NVIC_EnableIRQ>

}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000

08004554 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800455a:	f107 0310 	add.w	r3, r7, #16
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004568:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <MX_GPIO_Init+0xa4>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <MX_GPIO_Init+0xa4>)
 800456e:	f043 0320 	orr.w	r3, r3, #32
 8004572:	6193      	str	r3, [r2, #24]
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <MX_GPIO_Init+0xa4>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <MX_GPIO_Init+0xa4>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <MX_GPIO_Init+0xa4>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6193      	str	r3, [r2, #24]
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <MX_GPIO_Init+0xa4>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <MX_GPIO_Init+0xa4>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <MX_GPIO_Init+0xa4>)
 800459e:	f043 0308 	orr.w	r3, r3, #8
 80045a2:	6193      	str	r3, [r2, #24]
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <MX_GPIO_Init+0xa4>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <MX_GPIO_Init+0xa4>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <MX_GPIO_Init+0xa4>)
 80045b6:	f043 0310 	orr.w	r3, r3, #16
 80045ba:	6193      	str	r3, [r2, #24]
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <MX_GPIO_Init+0xa4>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2107      	movs	r1, #7
 80045cc:	480b      	ldr	r0, [pc, #44]	; (80045fc <MX_GPIO_Init+0xa8>)
 80045ce:	f002 fffb 	bl	80075c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 80045d2:	2307      	movs	r3, #7
 80045d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045de:	2302      	movs	r3, #2
 80045e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e2:	f107 0310 	add.w	r3, r7, #16
 80045e6:	4619      	mov	r1, r3
 80045e8:	4804      	ldr	r0, [pc, #16]	; (80045fc <MX_GPIO_Init+0xa8>)
 80045ea:	f002 fe59 	bl	80072a0 <HAL_GPIO_Init>

}
 80045ee:	bf00      	nop
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010c00 	.word	0x40010c00

08004600 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <HUAN_MOTOR1_Init+0x50>)
 8004608:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <HUAN_MOTOR1_Init+0x54>)
 800460e:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004612:	4a11      	ldr	r2, [pc, #68]	; (8004658 <HUAN_MOTOR1_Init+0x58>)
 8004614:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004618:	220c      	movs	r2, #12
 800461a:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 800461e:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <HUAN_MOTOR1_Init+0x58>)
 8004620:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004624:	2208      	movs	r2, #8
 8004626:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <HUAN_MOTOR1_Init+0x5c>)
 8004634:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004638:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HUAN_MOTOR1_Init+0x60>)
 800463a:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HUAN_MOTOR1_Init+0x64>)
 8004640:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8004642:	4802      	ldr	r0, [pc, #8]	; (800464c <HUAN_MOTOR1_Init+0x4c>)
 8004644:	f7fe f8da 	bl	80027fc <huansic_motor_init>
}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200009a0 	.word	0x200009a0
 8004650:	200006e0 	.word	0x200006e0
 8004654:	3d4ccccd 	.word	0x3d4ccccd
 8004658:	20000698 	.word	0x20000698
 800465c:	399d4952 	.word	0x399d4952
 8004660:	37a7c5ac 	.word	0x37a7c5ac
 8004664:	387ba882 	.word	0x387ba882

08004668 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <HUAN_MOTOR2_Init+0x50>)
 8004670:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <HUAN_MOTOR2_Init+0x54>)
 8004676:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 800467a:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <HUAN_MOTOR2_Init+0x58>)
 800467c:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 8004680:	2200      	movs	r2, #0
 8004682:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HUAN_MOTOR2_Init+0x58>)
 8004688:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 800468c:	2204      	movs	r2, #4
 800468e:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HUAN_MOTOR2_Init+0x5c>)
 800469c:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 80046a0:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HUAN_MOTOR2_Init+0x60>)
 80046a2:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <HUAN_MOTOR2_Init+0x64>)
 80046a8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80046aa:	4802      	ldr	r0, [pc, #8]	; (80046b4 <HUAN_MOTOR2_Init+0x4c>)
 80046ac:	f7fe f8a6 	bl	80027fc <huansic_motor_init>
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200009dc 	.word	0x200009dc
 80046b8:	20000770 	.word	0x20000770
 80046bc:	3d4ccccd 	.word	0x3d4ccccd
 80046c0:	20000698 	.word	0x20000698
 80046c4:	399d4952 	.word	0x399d4952
 80046c8:	37a7c5ac 	.word	0x37a7c5ac
 80046cc:	387ba882 	.word	0x387ba882

080046d0 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <HUAN_MOTOR3_Init+0x50>)
 80046d8:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046dc:	4a11      	ldr	r2, [pc, #68]	; (8004724 <HUAN_MOTOR3_Init+0x54>)
 80046de:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HUAN_MOTOR3_Init+0x58>)
 80046e4:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046e8:	220c      	movs	r2, #12
 80046ea:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046ee:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <HUAN_MOTOR3_Init+0x58>)
 80046f0:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046f4:	2208      	movs	r2, #8
 80046f6:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HUAN_MOTOR3_Init+0x5c>)
 8004704:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <HUAN_MOTOR3_Init+0x60>)
 800470a:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HUAN_MOTOR3_Init+0x64>)
 8004710:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8004712:	4802      	ldr	r0, [pc, #8]	; (800471c <HUAN_MOTOR3_Init+0x4c>)
 8004714:	f7fe f872 	bl	80027fc <huansic_motor_init>
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000a18 	.word	0x20000a18
 8004720:	20000728 	.word	0x20000728
 8004724:	3d4ccccd 	.word	0x3d4ccccd
 8004728:	20000848 	.word	0x20000848
 800472c:	399d4952 	.word	0x399d4952
 8004730:	37a7c5ac 	.word	0x37a7c5ac
 8004734:	387ba882 	.word	0x387ba882

08004738 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 800473e:	4a12      	ldr	r2, [pc, #72]	; (8004788 <HUAN_MOTOR4_Init+0x50>)
 8004740:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <HUAN_MOTOR4_Init+0x54>)
 8004746:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 800474a:	4a11      	ldr	r2, [pc, #68]	; (8004790 <HUAN_MOTOR4_Init+0x58>)
 800474c:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 8004750:	2200      	movs	r2, #0
 8004752:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 8004756:	4a0e      	ldr	r2, [pc, #56]	; (8004790 <HUAN_MOTOR4_Init+0x58>)
 8004758:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 800475c:	2204      	movs	r2, #4
 800475e:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HUAN_MOTOR4_Init+0x5c>)
 800476c:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 8004770:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HUAN_MOTOR4_Init+0x60>)
 8004772:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <HUAN_MOTOR4_Init+0x64>)
 8004778:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 800477a:	4802      	ldr	r0, [pc, #8]	; (8004784 <HUAN_MOTOR4_Init+0x4c>)
 800477c:	f7fe f83e 	bl	80027fc <huansic_motor_init>
}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000a54 	.word	0x20000a54
 8004788:	200007b8 	.word	0x200007b8
 800478c:	3d4ccccd 	.word	0x3d4ccccd
 8004790:	20000848 	.word	0x20000848
 8004794:	399d4952 	.word	0x399d4952
 8004798:	37a7c5ac 	.word	0x37a7c5ac
 800479c:	387ba882 	.word	0x387ba882

080047a0 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HUAN_IMU_Init+0x1c>)
 80047a6:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <HUAN_IMU_Init+0x20>)
 80047a8:	601a      	str	r2, [r3, #0]
	himu.hdma = &hdma_usart3_rx;
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <HUAN_IMU_Init+0x1c>)
 80047ac:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <HUAN_IMU_Init+0x24>)
 80047ae:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 80047b0:	4802      	ldr	r0, [pc, #8]	; (80047bc <HUAN_IMU_Init+0x1c>)
 80047b2:	f7fd fc5b 	bl	800206c <huansic_jy62_init>
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000a90 	.word	0x20000a90
 80047c0:	200008d4 	.word	0x200008d4
 80047c4:	2000095c 	.word	0x2000095c

080047c8 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
	hxb.huart = &huart2;
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HUAN_ZIGBEE_Init+0x1c>)
 80047ce:	4a06      	ldr	r2, [pc, #24]	; (80047e8 <HUAN_ZIGBEE_Init+0x20>)
 80047d0:	601a      	str	r2, [r3, #0]
	hxb.hdma = &hdma_usart2_rx;
 80047d2:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <HUAN_ZIGBEE_Init+0x1c>)
 80047d4:	4a05      	ldr	r2, [pc, #20]	; (80047ec <HUAN_ZIGBEE_Init+0x24>)
 80047d6:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 80047d8:	4802      	ldr	r0, [pc, #8]	; (80047e4 <HUAN_ZIGBEE_Init+0x1c>)
 80047da:	f7fe fa37 	bl	8002c4c <huansic_xb_init>
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000ae8 	.word	0x20000ae8
 80047e8:	20000890 	.word	0x20000890
 80047ec:	20000918 	.word	0x20000918

080047f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_UART_RxCpltCallback+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d10c      	bne.n	800481c <HAL_UART_RxCpltCallback+0x2c>
		if (himu.pending_alignment)
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <HAL_UART_RxCpltCallback+0x58>)
 8004804:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 800480c:	480e      	ldr	r0, [pc, #56]	; (8004848 <HAL_UART_RxCpltCallback+0x58>)
 800480e:	f7fd fd83 	bl	8002318 <huansic_jy62_isr>
		if(hxb.pending_alignment)
			huansic_xb_isr(&hxb);
		else
			huansic_xb_dma_isr(&hxb);
	}
}
 8004812:	e014      	b.n	800483e <HAL_UART_RxCpltCallback+0x4e>
			huansic_jy62_dma_isr(&himu);
 8004814:	480c      	ldr	r0, [pc, #48]	; (8004848 <HAL_UART_RxCpltCallback+0x58>)
 8004816:	f7fd fc5f 	bl	80020d8 <huansic_jy62_dma_isr>
}
 800481a:	e010      	b.n	800483e <HAL_UART_RxCpltCallback+0x4e>
	} else if (hxb.huart == huart) {
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_UART_RxCpltCallback+0x5c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d10b      	bne.n	800483e <HAL_UART_RxCpltCallback+0x4e>
		if(hxb.pending_alignment)
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_UART_RxCpltCallback+0x5c>)
 8004828:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_UART_RxCpltCallback+0x48>
			huansic_xb_isr(&hxb);
 8004830:	4806      	ldr	r0, [pc, #24]	; (800484c <HAL_UART_RxCpltCallback+0x5c>)
 8004832:	f7fe ffd7 	bl	80037e4 <huansic_xb_isr>
}
 8004836:	e002      	b.n	800483e <HAL_UART_RxCpltCallback+0x4e>
			huansic_xb_dma_isr(&hxb);
 8004838:	4804      	ldr	r0, [pc, #16]	; (800484c <HAL_UART_RxCpltCallback+0x5c>)
 800483a:	f7ff f819 	bl	8003870 <huansic_xb_dma_isr>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000a90 	.word	0x20000a90
 800484c:	20000ae8 	.word	0x20000ae8

08004850 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <HAL_UART_ErrorCallback+0x58>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d10c      	bne.n	800487c <HAL_UART_ErrorCallback+0x2c>
		if (himu.pending_alignment)
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_UART_ErrorCallback+0x58>)
 8004864:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 800486c:	480e      	ldr	r0, [pc, #56]	; (80048a8 <HAL_UART_ErrorCallback+0x58>)
 800486e:	f7fd fd9e 	bl	80023ae <huansic_jy62_error>
		if (hxb.pending_alignment)
			huansic_xb_it_error(&hxb);
		else
			huansic_xb_dma_error(&hxb);
	}
}
 8004872:	e014      	b.n	800489e <HAL_UART_ErrorCallback+0x4e>
			huansic_jy62_dma_error(&himu);
 8004874:	480c      	ldr	r0, [pc, #48]	; (80048a8 <HAL_UART_ErrorCallback+0x58>)
 8004876:	f7fd fd86 	bl	8002386 <huansic_jy62_dma_error>
}
 800487a:	e010      	b.n	800489e <HAL_UART_ErrorCallback+0x4e>
	} else if (hxb.huart == huart) {
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_UART_ErrorCallback+0x5c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d10b      	bne.n	800489e <HAL_UART_ErrorCallback+0x4e>
		if (hxb.pending_alignment)
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_UART_ErrorCallback+0x5c>)
 8004888:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_UART_ErrorCallback+0x48>
			huansic_xb_it_error(&hxb);
 8004890:	4806      	ldr	r0, [pc, #24]	; (80048ac <HAL_UART_ErrorCallback+0x5c>)
 8004892:	f7fe ff8f 	bl	80037b4 <huansic_xb_it_error>
}
 8004896:	e002      	b.n	800489e <HAL_UART_ErrorCallback+0x4e>
			huansic_xb_dma_error(&hxb);
 8004898:	4804      	ldr	r0, [pc, #16]	; (80048ac <HAL_UART_ErrorCallback+0x5c>)
 800489a:	f7fe ff77 	bl	800378c <huansic_xb_dma_error>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000a90 	.word	0x20000a90
 80048ac:	20000ae8 	.word	0x20000ae8

080048b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048b4:	b672      	cpsid	i
}
 80048b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80048b8:	e7fe      	b.n	80048b8 <Error_Handler+0x8>
	...

080048bc <Lane_init>:
	closelist.Head = 0;
	closelist.Tail = 0;
	closelist.Length = 0;
}

void Lane_init(void){
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
	pathlane.Head = 0;
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <Lane_init+0x18>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 0;
 80048c6:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <Lane_init+0x18>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	805a      	strh	r2, [r3, #2]
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	20007c54 	.word	0x20007c54

080048d8 <queue_append>:

uint8_t queue_append(A_Star_Node* node)
{
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	if (openlist.Length + openlist.Head >= QUEUE_SIZE)
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <queue_append+0x110>)
 80048e2:	885b      	ldrh	r3, [r3, #2]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <queue_append+0x110>)
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f0:	db01      	blt.n	80048f6 <queue_append+0x1e>
	{
		return 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e073      	b.n	80049de <queue_append+0x106>
	}
	else
	{
		uint16_t i = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	82fb      	strh	r3, [r7, #22]
		while (i < openlist.Length)
 80048fa:	e052      	b.n	80049a2 <queue_append+0xca>
		{
			if (openlist.buffer[i + openlist.Head].total <= node->total)
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <queue_append+0x110>)
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	441a      	add	r2, r3
 8004904:	4938      	ldr	r1, [pc, #224]	; (80049e8 <queue_append+0x110>)
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	f8d2 2006 	ldr.w	r2, [r2, #6]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7fc fc07 	bl	8001130 <__aeabi_fcmple>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <queue_append+0x58>
			{
				i++;
 8004928:	8afb      	ldrh	r3, [r7, #22]
 800492a:	3301      	adds	r3, #1
 800492c:	82fb      	strh	r3, [r7, #22]
 800492e:	e038      	b.n	80049a2 <queue_append+0xca>
			}
			else
			{
				A_Star_Node change;
				while (i < openlist.Length + 1)
 8004930:	e02a      	b.n	8004988 <queue_append+0xb0>
				{
					change = openlist.buffer[i + openlist.Head];
 8004932:	8afb      	ldrh	r3, [r7, #22]
 8004934:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <queue_append+0x110>)
 8004936:	8812      	ldrh	r2, [r2, #0]
 8004938:	441a      	add	r2, r3
 800493a:	492b      	ldr	r1, [pc, #172]	; (80049e8 <queue_append+0x110>)
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	18ca      	adds	r2, r1, r3
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	3204      	adds	r2, #4
 800494c:	ca07      	ldmia	r2, {r0, r1, r2}
 800494e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					openlist.buffer[i + openlist.Head] = *node;
 8004952:	8afb      	ldrh	r3, [r7, #22]
 8004954:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <queue_append+0x110>)
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	441a      	add	r2, r3
 800495a:	4923      	ldr	r1, [pc, #140]	; (80049e8 <queue_append+0x110>)
 800495c:	4613      	mov	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	6810      	ldr	r0, [r2, #0]
 800496c:	6851      	ldr	r1, [r2, #4]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	c307      	stmia	r3!, {r0, r1, r2}
					*node = change;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	461c      	mov	r4, r3
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800497c:	6020      	str	r0, [r4, #0]
 800497e:	6061      	str	r1, [r4, #4]
 8004980:	60a2      	str	r2, [r4, #8]
					i++;
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	3301      	adds	r3, #1
 8004986:	82fb      	strh	r3, [r7, #22]
				while (i < openlist.Length + 1)
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <queue_append+0x110>)
 800498a:	885b      	ldrh	r3, [r3, #2]
 800498c:	8afa      	ldrh	r2, [r7, #22]
 800498e:	429a      	cmp	r2, r3
 8004990:	d9cf      	bls.n	8004932 <queue_append+0x5a>
				}
				openlist.Length += 1;
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <queue_append+0x110>)
 8004994:	885b      	ldrh	r3, [r3, #2]
 8004996:	3301      	adds	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <queue_append+0x110>)
 800499c:	805a      	strh	r2, [r3, #2]
				return 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	e01d      	b.n	80049de <queue_append+0x106>
		while (i < openlist.Length)
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <queue_append+0x110>)
 80049a4:	885b      	ldrh	r3, [r3, #2]
 80049a6:	8afa      	ldrh	r2, [r7, #22]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d3a7      	bcc.n	80048fc <queue_append+0x24>
			}
		}
		openlist.buffer[openlist.Head + openlist.Length] = *node;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <queue_append+0x110>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <queue_append+0x110>)
 80049b4:	885b      	ldrh	r3, [r3, #2]
 80049b6:	441a      	add	r2, r3
 80049b8:	490b      	ldr	r1, [pc, #44]	; (80049e8 <queue_append+0x110>)
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	6810      	ldr	r0, [r2, #0]
 80049ca:	6851      	ldr	r1, [r2, #4]
 80049cc:	6892      	ldr	r2, [r2, #8]
 80049ce:	c307      	stmia	r3!, {r0, r1, r2}
		openlist.Length++;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <queue_append+0x110>)
 80049d2:	885b      	ldrh	r3, [r3, #2]
 80049d4:	3301      	adds	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <queue_append+0x110>)
 80049da:	805a      	strh	r2, [r3, #2]
		return 1;
 80049dc:	2301      	movs	r3, #1
	}
}
 80049de:	4618      	mov	r0, r3
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd90      	pop	{r4, r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000c48 	.word	0x20000c48

080049ec <list_append>:

uint8_t list_append(uint16_t c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	80fb      	strh	r3, [r7, #6]
	if (closelist.Length >= LIST_SIZE)
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <list_append+0x58>)
 80049f8:	889b      	ldrh	r3, [r3, #4]
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d301      	bcc.n	8004a04 <list_append+0x18>
	{
		return 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e01a      	b.n	8004a3a <list_append+0x4e>
	}
	else
	{
		closelist.buffer[closelist.Tail] = c;
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <list_append+0x58>)
 8004a06:	885b      	ldrh	r3, [r3, #2]
 8004a08:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <list_append+0x58>)
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	80da      	strh	r2, [r3, #6]
		closelist.Tail = (closelist.Tail + 1) % LIST_SIZE;
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <list_append+0x58>)
 8004a14:	885b      	ldrh	r3, [r3, #2]
 8004a16:	3301      	adds	r3, #1
 8004a18:	425a      	negs	r2, r3
 8004a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a1e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004a22:	bf58      	it	pl
 8004a24:	4253      	negpl	r3, r2
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <list_append+0x58>)
 8004a2a:	805a      	strh	r2, [r3, #2]
		closelist.Length++;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <list_append+0x58>)
 8004a2e:	889b      	ldrh	r3, [r3, #4]
 8004a30:	3301      	adds	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <list_append+0x58>)
 8004a36:	809a      	strh	r2, [r3, #4]
		return 1;
 8004a38:	2301      	movs	r3, #1
	}
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	20006c4c 	.word	0x20006c4c

08004a48 <queue_top>:

uint16_t queue_top()
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
	if (openlist.Length > 0)
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <queue_top+0x3c>)
 8004a4e:	885b      	ldrh	r3, [r3, #2]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <queue_top+0x2e>
	{
		openlist.Head++;
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <queue_top+0x3c>)
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <queue_top+0x3c>)
 8004a5e:	801a      	strh	r2, [r3, #0]
		openlist.Length--;
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <queue_top+0x3c>)
 8004a62:	885b      	ldrh	r3, [r3, #2]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <queue_top+0x3c>)
 8004a6a:	805a      	strh	r2, [r3, #2]
		return openlist.Head - 1;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <queue_top+0x3c>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	e001      	b.n	8004a7a <queue_top+0x32>
	}
	else {
		return 65535;
 8004a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000c48 	.word	0x20000c48

08004a88 <findin_queue>:

uint16_t findin_queue(uint16_t c)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < openlist.Length; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	81fb      	strh	r3, [r7, #14]
 8004a96:	e017      	b.n	8004ac8 <findin_queue+0x40>
	{
		if (openlist.buffer[i + openlist.Head].cor == c) return (i + openlist.Head);
 8004a98:	89fb      	ldrh	r3, [r7, #14]
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <findin_queue+0x58>)
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	490f      	ldr	r1, [pc, #60]	; (8004ae0 <findin_queue+0x58>)
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3304      	adds	r3, #4
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d105      	bne.n	8004ac2 <findin_queue+0x3a>
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <findin_queue+0x58>)
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	89fb      	ldrh	r3, [r7, #14]
 8004abc:	4413      	add	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	e008      	b.n	8004ad4 <findin_queue+0x4c>
	for (i = 0; i < openlist.Length; i++)
 8004ac2:	89fb      	ldrh	r3, [r7, #14]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	81fb      	strh	r3, [r7, #14]
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <findin_queue+0x58>)
 8004aca:	885b      	ldrh	r3, [r3, #2]
 8004acc:	89fa      	ldrh	r2, [r7, #14]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3e2      	bcc.n	8004a98 <findin_queue+0x10>
	}
	return 0;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000c48 	.word	0x20000c48

08004ae4 <findin_list>:
	}
	return 0;
}

uint8_t findin_list(uint16_t c)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < closelist.Length; i++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	81fb      	strh	r3, [r7, #14]
 8004af2:	e00f      	b.n	8004b14 <findin_list+0x30>
	{
		if (closelist.buffer[i + closelist.Head] == c) return 1;
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <findin_list+0x48>)
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	4413      	add	r3, r2
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <findin_list+0x48>)
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	88db      	ldrh	r3, [r3, #6]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d101      	bne.n	8004b0e <findin_list+0x2a>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e008      	b.n	8004b20 <findin_list+0x3c>
	for (i = 0; i < closelist.Length; i++)
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	3301      	adds	r3, #1
 8004b12:	81fb      	strh	r3, [r7, #14]
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <findin_list+0x48>)
 8004b16:	889b      	ldrh	r3, [r3, #4]
 8004b18:	89fa      	ldrh	r2, [r7, #14]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d3ea      	bcc.n	8004af4 <findin_list+0x10>
	}
	return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20006c4c 	.word	0x20006c4c

08004b30 <editcost>:

void editcost(uint16_t index, A_Star_Node* node)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	80fb      	strh	r3, [r7, #6]
	if (openlist.buffer[index].total > node->total)
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	4920      	ldr	r1, [pc, #128]	; (8004bc0 <editcost+0x90>)
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc fafe 	bl	8001158 <__aeabi_fcmpgt>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d100      	bne.n	8004b64 <editcost+0x34>
	{
		openlist.buffer[index].total = node->total;
		openlist.buffer[index].cost = node->cost;
		openlist.buffer[index].fatherindex = node->fatherindex;
	}
}
 8004b62:	e029      	b.n	8004bb8 <editcost+0x88>
		openlist.buffer[index].total = node->total;
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4813      	ldr	r0, [pc, #76]	; (8004bc0 <editcost+0x90>)
 8004b72:	4613      	mov	r3, r2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4403      	add	r3, r0
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	f8c3 200a 	str.w	r2, [r3, #10]
		openlist.buffer[index].cost = node->cost;
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	480c      	ldr	r0, [pc, #48]	; (8004bc0 <editcost+0x90>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4403      	add	r3, r0
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	f8c3 2006 	str.w	r2, [r3, #6]
		openlist.buffer[index].fatherindex = node->fatherindex;
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	8958      	ldrh	r0, [r3, #10]
 8004ba6:	4906      	ldr	r1, [pc, #24]	; (8004bc0 <editcost+0x90>)
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	330e      	adds	r3, #14
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	801a      	strh	r2, [r3, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000c48 	.word	0x20000c48

08004bc4 <Insert_inLane>:

uint8_t Insert_inLane(Coordinate *head_coor, uint8_t head_index)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
	if(!head_coor) return 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <Insert_inLane+0x16>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e025      	b.n	8004c26 <Insert_inLane+0x62>
	pathlane.Head = 0;
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <Insert_inLane+0x6c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 16 - head_index;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f1c3 0310 	rsb	r3, r3, #16
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <Insert_inLane+0x6c>)
 8004bec:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = head_index; i < 16; i++)
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	73fb      	strb	r3, [r7, #15]
 8004bf2:	e014      	b.n	8004c1e <Insert_inLane+0x5a>
	{
		pathlane.buffer[pathlane.Head + i - head_index] = *(head_coor + i);
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	18d1      	adds	r1, r2, r3
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <Insert_inLane+0x6c>)
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	441a      	add	r2, r3
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <Insert_inLane+0x6c>)
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	3304      	adds	r3, #4
 8004c12:	460a      	mov	r2, r1
 8004c14:	6810      	ldr	r0, [r2, #0]
 8004c16:	6018      	str	r0, [r3, #0]
	for(uint8_t i = head_index; i < 16; i++)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b0f      	cmp	r3, #15
 8004c22:	d9e7      	bls.n	8004bf4 <Insert_inLane+0x30>
	}
	return 1;
 8004c24:	2301      	movs	r3, #1
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	20007c54 	.word	0x20007c54

08004c34 <order_list_init>:

void order_list_init(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
	orders.length = 0;
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <order_list_init+0x18>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
	orders.new = 0;
 8004c3e:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <order_list_init+0x18>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	705a      	strb	r2, [r3, #1]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	20007cd8 	.word	0x20007cd8

08004c50 <order_append>:

void order_append(Order *an_order)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	if((an_order->startCoord.x != orders.buffer[orders.new].x) || (an_order->startCoord.y != orders.buffer[orders.new].y))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <order_append+0x84>)
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	491c      	ldr	r1, [pc, #112]	; (8004cd4 <order_append+0x84>)
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d10b      	bne.n	8004c88 <order_append+0x38>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <order_append+0x84>)
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <order_append+0x84>)
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d01f      	beq.n	8004cc8 <order_append+0x78>
	{
		orders.buffer[orders.length].x = an_order->startCoord.x;
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <order_append+0x84>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004c94:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <order_append+0x84>)
 8004c96:	0083      	lsls	r3, r0, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	805a      	strh	r2, [r3, #2]
		orders.buffer[orders.length].y = an_order->startCoord.y;
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <order_append+0x84>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <order_append+0x84>)
 8004cac:	0083      	lsls	r3, r0, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	809a      	strh	r2, [r3, #4]
		orders.new = orders.length;
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <order_append+0x84>)
 8004cb6:	781a      	ldrb	r2, [r3, #0]
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <order_append+0x84>)
 8004cba:	705a      	strb	r2, [r3, #1]
		orders.length = orders.length + 1;
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <order_append+0x84>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <order_append+0x84>)
 8004cc6:	701a      	strb	r2, [r3, #0]
	}
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20007cd8 	.word	0x20007cd8

08004cd8 <Get_nearest_order>:

int8_t Get_nearest_order(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
	uint8_t i;
	int16_t mindis = 512;
 8004cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce2:	80bb      	strh	r3, [r7, #4]
	int8_t minindex = -1;
 8004ce4:	23ff      	movs	r3, #255	; 0xff
 8004ce6:	70fb      	strb	r3, [r7, #3]
	if(orders.length == 0)
 8004ce8:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <Get_nearest_order+0x98>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <Get_nearest_order+0x1e>
		return minindex;
 8004cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf4:	e037      	b.n	8004d66 <Get_nearest_order+0x8e>
	for(i=0;i < orders.length; i++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	71fb      	strb	r3, [r7, #7]
 8004cfa:	e02d      	b.n	8004d58 <Get_nearest_order+0x80>
	{
		int16_t distance = abs(orders.buffer[i].x - myCoord.x) + abs(orders.buffer[i].y - myCoord.y);
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <Get_nearest_order+0x98>)
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <Get_nearest_order+0x9c>)
 8004d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfb8      	it	lt
 8004d16:	425b      	neglt	r3, r3
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	4914      	ldr	r1, [pc, #80]	; (8004d70 <Get_nearest_order+0x98>)
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <Get_nearest_order+0x9c>)
 8004d2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d2e:	1acb      	subs	r3, r1, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bfb8      	it	lt
 8004d34:	425b      	neglt	r3, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	803b      	strh	r3, [r7, #0]
		if(distance < mindis)
 8004d3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004d42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	da03      	bge.n	8004d52 <Get_nearest_order+0x7a>
		{
			mindis = distance;
 8004d4a:	883b      	ldrh	r3, [r7, #0]
 8004d4c:	80bb      	strh	r3, [r7, #4]
			minindex = i;
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	70fb      	strb	r3, [r7, #3]
	for(i=0;i < orders.length; i++)
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	3301      	adds	r3, #1
 8004d56:	71fb      	strb	r3, [r7, #7]
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <Get_nearest_order+0x98>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	79fa      	ldrb	r2, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d3cc      	bcc.n	8004cfc <Get_nearest_order+0x24>
		}
	}
    return minindex;
 8004d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	20007cd8 	.word	0x20007cd8
 8004d74:	20000c0c 	.word	0x20000c0c

08004d78 <exitpoints_init>:

void exitpoints_init(void){
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
	exitpoints[0].x = 127;
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <exitpoints_init+0x6c>)
 8004d7e:	227f      	movs	r2, #127	; 0x7f
 8004d80:	801a      	strh	r2, [r3, #0]
	exitpoints[0].y = 18;
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <exitpoints_init+0x6c>)
 8004d84:	2212      	movs	r2, #18
 8004d86:	805a      	strh	r2, [r3, #2]
	exitpoints[1].x = 127;
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <exitpoints_init+0x6c>)
 8004d8a:	227f      	movs	r2, #127	; 0x7f
 8004d8c:	809a      	strh	r2, [r3, #4]
	exitpoints[1].y = 60;
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <exitpoints_init+0x6c>)
 8004d90:	223c      	movs	r2, #60	; 0x3c
 8004d92:	80da      	strh	r2, [r3, #6]
	exitpoints[2].x = 236;
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <exitpoints_init+0x6c>)
 8004d96:	22ec      	movs	r2, #236	; 0xec
 8004d98:	811a      	strh	r2, [r3, #8]
	exitpoints[2].y = 127;
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <exitpoints_init+0x6c>)
 8004d9c:	227f      	movs	r2, #127	; 0x7f
 8004d9e:	815a      	strh	r2, [r3, #10]
	exitpoints[3].x = 194;
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <exitpoints_init+0x6c>)
 8004da2:	22c2      	movs	r2, #194	; 0xc2
 8004da4:	819a      	strh	r2, [r3, #12]
	exitpoints[3].y = 127;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <exitpoints_init+0x6c>)
 8004da8:	227f      	movs	r2, #127	; 0x7f
 8004daa:	81da      	strh	r2, [r3, #14]
	exitpoints[4].x = 127;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <exitpoints_init+0x6c>)
 8004dae:	227f      	movs	r2, #127	; 0x7f
 8004db0:	821a      	strh	r2, [r3, #16]
	exitpoints[4].y = 236;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <exitpoints_init+0x6c>)
 8004db4:	22ec      	movs	r2, #236	; 0xec
 8004db6:	825a      	strh	r2, [r3, #18]
	exitpoints[5].x = 127;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <exitpoints_init+0x6c>)
 8004dba:	227f      	movs	r2, #127	; 0x7f
 8004dbc:	829a      	strh	r2, [r3, #20]
	exitpoints[5].y = 194;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <exitpoints_init+0x6c>)
 8004dc0:	22c2      	movs	r2, #194	; 0xc2
 8004dc2:	82da      	strh	r2, [r3, #22]
	exitpoints[6].x = 18;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <exitpoints_init+0x6c>)
 8004dc6:	2212      	movs	r2, #18
 8004dc8:	831a      	strh	r2, [r3, #24]
	exitpoints[6].y = 127;
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <exitpoints_init+0x6c>)
 8004dcc:	227f      	movs	r2, #127	; 0x7f
 8004dce:	835a      	strh	r2, [r3, #26]
	exitpoints[7].x = 60;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <exitpoints_init+0x6c>)
 8004dd2:	223c      	movs	r2, #60	; 0x3c
 8004dd4:	839a      	strh	r2, [r3, #28]
	exitpoints[7].y = 127;
 8004dd6:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <exitpoints_init+0x6c>)
 8004dd8:	227f      	movs	r2, #127	; 0x7f
 8004dda:	83da      	strh	r2, [r3, #30]
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	20000bd4 	.word	0x20000bd4

08004de8 <GotoDestination>:
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;
extern Coordinate exitpoints[8];

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 8004de8:	b5b0      	push	{r4, r5, r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
	if(mode == 1)
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f040 80a2 	bne.w	8004f40 <GotoDestination+0x158>
	{
		uint8_t isGetAroad = mingyan_pathfind_avoidObstacle(&myCoord, &Destination);
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	48ab      	ldr	r0, [pc, #684]	; (80050b0 <GotoDestination+0x2c8>)
 8004e02:	f7fd f923 	bl	800204c <mingyan_pathfind_avoidObstacle>
 8004e06:	4603      	mov	r3, r0
 8004e08:	753b      	strb	r3, [r7, #20]
		if(isGetAroad != 0)
 8004e0a:	7d3b      	ldrb	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05c      	beq.n	8004eca <GotoDestination+0xe2>
		{
			// success get a road
			for(uint8_t i = 0; i < pathlane.Length; i ++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	74fb      	strb	r3, [r7, #19]
 8004e14:	bf00      	nop
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	4ba6      	ldr	r3, [pc, #664]	; (80050b4 <GotoDestination+0x2cc>)
 8004e1c:	885b      	ldrh	r3, [r3, #2]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	f080 82f3 	bcs.w	800540a <GotoDestination+0x622>
			{
				while(1)
				{
					Position_P(&EstiCoord, &pathlane.buffer[pathlane.Head + i]);
 8004e24:	4ba3      	ldr	r3, [pc, #652]	; (80050b4 <GotoDestination+0x2cc>)
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4aa0      	ldr	r2, [pc, #640]	; (80050b4 <GotoDestination+0x2cc>)
 8004e32:	4413      	add	r3, r2
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	489f      	ldr	r0, [pc, #636]	; (80050b8 <GotoDestination+0x2d0>)
 8004e3a:	f000 fb7d 	bl	8005538 <Position_P>
					CheckCoord();
 8004e3e:	f000 fb55 	bl	80054ec <CheckCoord>
					if(abs(EstiCoord.x - pathlane.buffer[pathlane.Head + i].x) + abs(EstiCoord.y - pathlane.buffer[pathlane.Head + i].y) <= PATH_PID_TOLERANCE)
 8004e42:	4b9d      	ldr	r3, [pc, #628]	; (80050b8 <GotoDestination+0x2d0>)
 8004e44:	681c      	ldr	r4, [r3, #0]
 8004e46:	4b9b      	ldr	r3, [pc, #620]	; (80050b4 <GotoDestination+0x2cc>)
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a98      	ldr	r2, [pc, #608]	; (80050b4 <GotoDestination+0x2cc>)
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb ff6c 	bl	8000d38 <__aeabi_i2f>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4619      	mov	r1, r3
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7fb feb1 	bl	8000bcc <__aeabi_fsub>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fc f97d 	bl	800116c <__aeabi_f2iz>
 8004e72:	4603      	mov	r3, r0
 8004e74:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004e78:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004e7c:	4b8e      	ldr	r3, [pc, #568]	; (80050b8 <GotoDestination+0x2d0>)
 8004e7e:	685d      	ldr	r5, [r3, #4]
 8004e80:	4b8c      	ldr	r3, [pc, #560]	; (80050b4 <GotoDestination+0x2cc>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	4413      	add	r3, r2
 8004e8a:	4a8a      	ldr	r2, [pc, #552]	; (80050b4 <GotoDestination+0x2cc>)
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb ff4f 	bl	8000d38 <__aeabi_i2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7fb fe94 	bl	8000bcc <__aeabi_fsub>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fc f960 	bl	800116c <__aeabi_f2iz>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb8      	it	lt
 8004eb2:	425b      	neglt	r3, r3
 8004eb4:	4423      	add	r3, r4
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	dcb4      	bgt.n	8004e24 <GotoDestination+0x3c>
					{
						chao_move_angle(0,0);
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	f04f 0000 	mov.w	r0, #0
 8004ec2:	f7fc ffa9 	bl	8001e18 <chao_move_angle>
						return 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e2a0      	b.n	800540c <GotoDestination+0x624>
		}
		else
		{
			while(1)
			{
				Position_P(&EstiCoord, &Destination);
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	487a      	ldr	r0, [pc, #488]	; (80050b8 <GotoDestination+0x2d0>)
 8004ed0:	f000 fb32 	bl	8005538 <Position_P>
				CheckCoord();
 8004ed4:	f000 fb0a 	bl	80054ec <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004ed8:	4b77      	ldr	r3, [pc, #476]	; (80050b8 <GotoDestination+0x2d0>)
 8004eda:	681c      	ldr	r4, [r3, #0]
 8004edc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb ff29 	bl	8000d38 <__aeabi_i2f>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7fb fe6e 	bl	8000bcc <__aeabi_fsub>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fc f93a 	bl	800116c <__aeabi_f2iz>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004efe:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004f02:	4b6d      	ldr	r3, [pc, #436]	; (80050b8 <GotoDestination+0x2d0>)
 8004f04:	685d      	ldr	r5, [r3, #4]
 8004f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb ff14 	bl	8000d38 <__aeabi_i2f>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4619      	mov	r1, r3
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7fb fe59 	bl	8000bcc <__aeabi_fsub>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fc f925 	bl	800116c <__aeabi_f2iz>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bfb8      	it	lt
 8004f28:	425b      	neglt	r3, r3
 8004f2a:	4423      	add	r3, r4
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	dccc      	bgt.n	8004eca <GotoDestination+0xe2>
				{
					chao_move_angle(0,0);
 8004f30:	f04f 0100 	mov.w	r1, #0
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f7fc ff6e 	bl	8001e18 <chao_move_angle>
					return 1;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e265      	b.n	800540c <GotoDestination+0x624>
				}
			}
		}
	}
	else if(mode == 0)
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d13a      	bne.n	8004fbc <GotoDestination+0x1d4>
	{
		while(1)
		{
			Position_P(&EstiCoord, &Destination);
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	485b      	ldr	r0, [pc, #364]	; (80050b8 <GotoDestination+0x2d0>)
 8004f4c:	f000 faf4 	bl	8005538 <Position_P>
			CheckCoord();
 8004f50:	f000 facc 	bl	80054ec <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004f54:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <GotoDestination+0x2d0>)
 8004f56:	681c      	ldr	r4, [r3, #0]
 8004f58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb feeb 	bl	8000d38 <__aeabi_i2f>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4619      	mov	r1, r3
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7fb fe30 	bl	8000bcc <__aeabi_fsub>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc f8fc 	bl	800116c <__aeabi_f2iz>
 8004f74:	4603      	mov	r3, r0
 8004f76:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004f7a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004f7e:	4b4e      	ldr	r3, [pc, #312]	; (80050b8 <GotoDestination+0x2d0>)
 8004f80:	685d      	ldr	r5, [r3, #4]
 8004f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fb fed6 	bl	8000d38 <__aeabi_i2f>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7fb fe1b 	bl	8000bcc <__aeabi_fsub>
 8004f96:	4603      	mov	r3, r0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fc f8e7 	bl	800116c <__aeabi_f2iz>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bfb8      	it	lt
 8004fa4:	425b      	neglt	r3, r3
 8004fa6:	4423      	add	r3, r4
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	dccc      	bgt.n	8004f46 <GotoDestination+0x15e>
			{
				chao_move_angle(0,0);
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f7fc ff30 	bl	8001e18 <chao_move_angle>
				return 1;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e227      	b.n	800540c <GotoDestination+0x624>
			}
		}
	}
	//只避障墙壁
	else if(mode == 2){
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	f040 8223 	bne.w	800540a <GotoDestination+0x622>
		uint8_t myCoordState, DesCoordState = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75bb      	strb	r3, [r7, #22]
		if(myCoord.x > 40 && myCoord.x < 214 && myCoord.y > 40 && myCoord.y < 214)
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <GotoDestination+0x2c8>)
 8004fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fce:	2b28      	cmp	r3, #40	; 0x28
 8004fd0:	dd11      	ble.n	8004ff6 <GotoDestination+0x20e>
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <GotoDestination+0x2c8>)
 8004fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fd8:	2bd5      	cmp	r3, #213	; 0xd5
 8004fda:	dc0c      	bgt.n	8004ff6 <GotoDestination+0x20e>
 8004fdc:	4b34      	ldr	r3, [pc, #208]	; (80050b0 <GotoDestination+0x2c8>)
 8004fde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fe2:	2b28      	cmp	r3, #40	; 0x28
 8004fe4:	dd07      	ble.n	8004ff6 <GotoDestination+0x20e>
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <GotoDestination+0x2c8>)
 8004fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fec:	2bd5      	cmp	r3, #213	; 0xd5
 8004fee:	dc02      	bgt.n	8004ff6 <GotoDestination+0x20e>
			myCoordState = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	75fb      	strb	r3, [r7, #23]
 8004ff4:	e028      	b.n	8005048 <GotoDestination+0x260>
		else{
			//计算起点划分
			if(myCoord.x > myCoord.y){
 8004ff6:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <GotoDestination+0x2c8>)
 8004ff8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004ffc:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <GotoDestination+0x2c8>)
 8004ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005002:	429a      	cmp	r2, r3
 8005004:	dd10      	ble.n	8005028 <GotoDestination+0x240>
				if(myCoord.x <= 254 - myCoord.y)
 8005006:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <GotoDestination+0x2c8>)
 8005008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800500c:	461a      	mov	r2, r3
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <GotoDestination+0x2c8>)
 8005010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005014:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8005018:	429a      	cmp	r2, r3
 800501a:	dc02      	bgt.n	8005022 <GotoDestination+0x23a>
					myCoordState = 1;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
 8005020:	e012      	b.n	8005048 <GotoDestination+0x260>
				else
					myCoordState = 2;
 8005022:	2302      	movs	r3, #2
 8005024:	75fb      	strb	r3, [r7, #23]
 8005026:	e00f      	b.n	8005048 <GotoDestination+0x260>
			}
			else{
				if(myCoord.x <= 254 - myCoord.y)
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <GotoDestination+0x2c8>)
 800502a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800502e:	461a      	mov	r2, r3
 8005030:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <GotoDestination+0x2c8>)
 8005032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005036:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 800503a:	429a      	cmp	r2, r3
 800503c:	dc02      	bgt.n	8005044 <GotoDestination+0x25c>
					myCoordState = 4;
 800503e:	2304      	movs	r3, #4
 8005040:	75fb      	strb	r3, [r7, #23]
 8005042:	e001      	b.n	8005048 <GotoDestination+0x260>
				else
					myCoordState = 3;
 8005044:	2303      	movs	r3, #3
 8005046:	75fb      	strb	r3, [r7, #23]
			}
		}
		if(Destination.x > 40 && Destination.x < 214 && Destination.y > 40 && Destination.y < 214)
 8005048:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800504c:	2b28      	cmp	r3, #40	; 0x28
 800504e:	dd0e      	ble.n	800506e <GotoDestination+0x286>
 8005050:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005054:	2bd5      	cmp	r3, #213	; 0xd5
 8005056:	dc0a      	bgt.n	800506e <GotoDestination+0x286>
 8005058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800505c:	2b28      	cmp	r3, #40	; 0x28
 800505e:	dd06      	ble.n	800506e <GotoDestination+0x286>
 8005060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005064:	2bd5      	cmp	r3, #213	; 0xd5
 8005066:	dc02      	bgt.n	800506e <GotoDestination+0x286>
			DesCoordState = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	75bb      	strb	r3, [r7, #22]
 800506c:	e028      	b.n	80050c0 <GotoDestination+0x2d8>
		else{
			// 计算终点划分
			if(Destination.x > Destination.y){
 800506e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005076:	429a      	cmp	r2, r3
 8005078:	dd0e      	ble.n	8005098 <GotoDestination+0x2b0>
				if(Destination.x <= 254 - Destination.y)
 800507a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800507e:	461a      	mov	r2, r3
 8005080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005084:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8005088:	429a      	cmp	r2, r3
 800508a:	dc02      	bgt.n	8005092 <GotoDestination+0x2aa>
					DesCoordState = 1;
 800508c:	2301      	movs	r3, #1
 800508e:	75bb      	strb	r3, [r7, #22]
 8005090:	e016      	b.n	80050c0 <GotoDestination+0x2d8>
				else
					DesCoordState = 2;
 8005092:	2302      	movs	r3, #2
 8005094:	75bb      	strb	r3, [r7, #22]
 8005096:	e013      	b.n	80050c0 <GotoDestination+0x2d8>
			}
			else{
				if(Destination.x <= 254 - Destination.y)
 8005098:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800509c:	461a      	mov	r2, r3
 800509e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a2:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 80050a6:	429a      	cmp	r2, r3
 80050a8:	dc08      	bgt.n	80050bc <GotoDestination+0x2d4>
					DesCoordState = 4;
 80050aa:	2304      	movs	r3, #4
 80050ac:	75bb      	strb	r3, [r7, #22]
 80050ae:	e007      	b.n	80050c0 <GotoDestination+0x2d8>
 80050b0:	20000c0c 	.word	0x20000c0c
 80050b4:	20007c54 	.word	0x20007c54
 80050b8:	20000c10 	.word	0x20000c10
				else
					DesCoordState = 3;
 80050bc:	2303      	movs	r3, #3
 80050be:	75bb      	strb	r3, [r7, #22]
			}
		}
		// 里 里，或者在外面同一区域的直接走
		if((myCoordState == 0 && DesCoordState == 0)||(myCoord.x<38&&Destination.x<38)||(myCoord.x>216&&Destination.x>216)||(myCoord.y<38&&Destination.y<38)||(myCoord.y>216&&Destination.y>216)){
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <GotoDestination+0x2e4>
 80050c6:	7dbb      	ldrb	r3, [r7, #22]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d023      	beq.n	8005114 <GotoDestination+0x32c>
 80050cc:	4b6e      	ldr	r3, [pc, #440]	; (8005288 <GotoDestination+0x4a0>)
 80050ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050d2:	2b25      	cmp	r3, #37	; 0x25
 80050d4:	dc03      	bgt.n	80050de <GotoDestination+0x2f6>
 80050d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050da:	2b25      	cmp	r3, #37	; 0x25
 80050dc:	dd1a      	ble.n	8005114 <GotoDestination+0x32c>
 80050de:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <GotoDestination+0x4a0>)
 80050e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050e4:	2bd8      	cmp	r3, #216	; 0xd8
 80050e6:	dd03      	ble.n	80050f0 <GotoDestination+0x308>
 80050e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050ec:	2bd8      	cmp	r3, #216	; 0xd8
 80050ee:	dc11      	bgt.n	8005114 <GotoDestination+0x32c>
 80050f0:	4b65      	ldr	r3, [pc, #404]	; (8005288 <GotoDestination+0x4a0>)
 80050f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80050f6:	2b25      	cmp	r3, #37	; 0x25
 80050f8:	dc03      	bgt.n	8005102 <GotoDestination+0x31a>
 80050fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050fe:	2b25      	cmp	r3, #37	; 0x25
 8005100:	dd08      	ble.n	8005114 <GotoDestination+0x32c>
 8005102:	4b61      	ldr	r3, [pc, #388]	; (8005288 <GotoDestination+0x4a0>)
 8005104:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005108:	2bd8      	cmp	r3, #216	; 0xd8
 800510a:	dd3e      	ble.n	800518a <GotoDestination+0x3a2>
 800510c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005110:	2bd8      	cmp	r3, #216	; 0xd8
 8005112:	dd3a      	ble.n	800518a <GotoDestination+0x3a2>
			while(1){
				Position_P(&EstiCoord, &Destination);
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	4619      	mov	r1, r3
 8005118:	485c      	ldr	r0, [pc, #368]	; (800528c <GotoDestination+0x4a4>)
 800511a:	f000 fa0d 	bl	8005538 <Position_P>
				CheckCoord();
 800511e:	f000 f9e5 	bl	80054ec <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE){
 8005122:	4b5a      	ldr	r3, [pc, #360]	; (800528c <GotoDestination+0x4a4>)
 8005124:	681c      	ldr	r4, [r3, #0]
 8005126:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb fe04 	bl	8000d38 <__aeabi_i2f>
 8005130:	4603      	mov	r3, r0
 8005132:	4619      	mov	r1, r3
 8005134:	4620      	mov	r0, r4
 8005136:	f7fb fd49 	bl	8000bcc <__aeabi_fsub>
 800513a:	4603      	mov	r3, r0
 800513c:	4618      	mov	r0, r3
 800513e:	f7fc f815 	bl	800116c <__aeabi_f2iz>
 8005142:	4603      	mov	r3, r0
 8005144:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8005148:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800514c:	4b4f      	ldr	r3, [pc, #316]	; (800528c <GotoDestination+0x4a4>)
 800514e:	685d      	ldr	r5, [r3, #4]
 8005150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005154:	4618      	mov	r0, r3
 8005156:	f7fb fdef 	bl	8000d38 <__aeabi_i2f>
 800515a:	4603      	mov	r3, r0
 800515c:	4619      	mov	r1, r3
 800515e:	4628      	mov	r0, r5
 8005160:	f7fb fd34 	bl	8000bcc <__aeabi_fsub>
 8005164:	4603      	mov	r3, r0
 8005166:	4618      	mov	r0, r3
 8005168:	f7fc f800 	bl	800116c <__aeabi_f2iz>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	bfb8      	it	lt
 8005172:	425b      	neglt	r3, r3
 8005174:	4423      	add	r3, r4
 8005176:	2b05      	cmp	r3, #5
 8005178:	dccc      	bgt.n	8005114 <GotoDestination+0x32c>
					chao_move_angle(0,0);
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	f04f 0000 	mov.w	r0, #0
 8005182:	f7fc fe49 	bl	8001e18 <chao_move_angle>
					return 1;
 8005186:	2301      	movs	r3, #1
 8005188:	e140      	b.n	800540c <GotoDestination+0x624>
		//外外或者里外
		else
		{
			Coordinate middle1 , middle2;
			//里外或歪理
			if(myCoordState == 0 || DesCoordState == 0){
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <GotoDestination+0x3ae>
 8005190:	7dbb      	ldrb	r3, [r7, #22]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d132      	bne.n	80051fc <GotoDestination+0x414>
				uint8_t index = (myCoordState > DesCoordState)?myCoordState : DesCoordState;
 8005196:	7dba      	ldrb	r2, [r7, #22]
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	4293      	cmp	r3, r2
 800519c:	bf38      	it	cc
 800519e:	4613      	movcc	r3, r2
 80051a0:	757b      	strb	r3, [r7, #21]
				if(myCoordState == 0){
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d114      	bne.n	80051d2 <GotoDestination+0x3ea>
					middle1 = exitpoints[index * 2 - 1];
 80051a8:	7d7b      	ldrb	r3, [r7, #21]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	3b01      	subs	r3, #1
 80051ae:	4938      	ldr	r1, [pc, #224]	; (8005290 <GotoDestination+0x4a8>)
 80051b0:	f107 020c 	add.w	r2, r7, #12
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	6010      	str	r0, [r2, #0]
					middle2 = exitpoints[index * 2 - 2];
 80051bc:	7d7b      	ldrb	r3, [r7, #21]
 80051be:	3b01      	subs	r3, #1
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4933      	ldr	r1, [pc, #204]	; (8005290 <GotoDestination+0x4a8>)
 80051c4:	f107 0208 	add.w	r2, r7, #8
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	6010      	str	r0, [r2, #0]
			if(myCoordState == 0 || DesCoordState == 0){
 80051d0:	e06c      	b.n	80052ac <GotoDestination+0x4c4>
				}
				else{
					middle2 = exitpoints[index * 2 - 1];
 80051d2:	7d7b      	ldrb	r3, [r7, #21]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	3b01      	subs	r3, #1
 80051d8:	492d      	ldr	r1, [pc, #180]	; (8005290 <GotoDestination+0x4a8>)
 80051da:	f107 0208 	add.w	r2, r7, #8
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	6010      	str	r0, [r2, #0]
					middle1 = exitpoints[index * 2 - 2];
 80051e6:	7d7b      	ldrb	r3, [r7, #21]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4928      	ldr	r1, [pc, #160]	; (8005290 <GotoDestination+0x4a8>)
 80051ee:	f107 020c 	add.w	r2, r7, #12
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	6010      	str	r0, [r2, #0]
			if(myCoordState == 0 || DesCoordState == 0){
 80051fa:	e057      	b.n	80052ac <GotoDestination+0x4c4>
				}
			}
			// 外外
			else{
				// 跨俩区域
				if(abs(DesCoordState - myCoordState) % 2 == 0)
 80051fc:	7dba      	ldrb	r2, [r7, #22]
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	bfb8      	it	lt
 8005206:	425b      	neglt	r3, r3
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d114      	bne.n	800523a <GotoDestination+0x452>
				{
					middle1 = exitpoints[myCoordState * 2 - 2];
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	3b01      	subs	r3, #1
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	491e      	ldr	r1, [pc, #120]	; (8005290 <GotoDestination+0x4a8>)
 8005218:	f107 020c 	add.w	r2, r7, #12
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	6010      	str	r0, [r2, #0]
					middle2 = exitpoints[DesCoordState * 2 - 2];
 8005224:	7dbb      	ldrb	r3, [r7, #22]
 8005226:	3b01      	subs	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4919      	ldr	r1, [pc, #100]	; (8005290 <GotoDestination+0x4a8>)
 800522c:	f107 0208 	add.w	r2, r7, #8
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	6010      	str	r0, [r2, #0]
 8005238:	e038      	b.n	80052ac <GotoDestination+0x4c4>
				}
				// 只跨一个区域
				else{
					if(DesCoordState * myCoordState == 4){
 800523a:	7dbb      	ldrb	r3, [r7, #22]
 800523c:	7dfa      	ldrb	r2, [r7, #23]
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	2b04      	cmp	r3, #4
 8005244:	d106      	bne.n	8005254 <GotoDestination+0x46c>
						middle1.x = 18;
 8005246:	2312      	movs	r3, #18
 8005248:	81bb      	strh	r3, [r7, #12]
						middle1.y = 18;
 800524a:	2312      	movs	r3, #18
 800524c:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	e02b      	b.n	80052ac <GotoDestination+0x4c4>
					}
					else if(DesCoordState * myCoordState == 2){
 8005254:	7dbb      	ldrb	r3, [r7, #22]
 8005256:	7dfa      	ldrb	r2, [r7, #23]
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d106      	bne.n	800526e <GotoDestination+0x486>
						middle1.x = 236;
 8005260:	23ec      	movs	r3, #236	; 0xec
 8005262:	81bb      	strh	r3, [r7, #12]
						middle1.y = 18;
 8005264:	2312      	movs	r3, #18
 8005266:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	e01e      	b.n	80052ac <GotoDestination+0x4c4>
					}
					else if(DesCoordState * myCoordState == 6){
 800526e:	7dbb      	ldrb	r3, [r7, #22]
 8005270:	7dfa      	ldrb	r2, [r7, #23]
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	2b06      	cmp	r3, #6
 8005278:	d10c      	bne.n	8005294 <GotoDestination+0x4ac>
						middle1.x = 236;
 800527a:	23ec      	movs	r3, #236	; 0xec
 800527c:	81bb      	strh	r3, [r7, #12]
						middle1.y = 236;
 800527e:	23ec      	movs	r3, #236	; 0xec
 8005280:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	e011      	b.n	80052ac <GotoDestination+0x4c4>
 8005288:	20000c0c 	.word	0x20000c0c
 800528c:	20000c10 	.word	0x20000c10
 8005290:	20000bd4 	.word	0x20000bd4
					}
					else if(DesCoordState * myCoordState == 12)
 8005294:	7dbb      	ldrb	r3, [r7, #22]
 8005296:	7dfa      	ldrb	r2, [r7, #23]
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d105      	bne.n	80052ac <GotoDestination+0x4c4>
					{
						middle1.x = 18;
 80052a0:	2312      	movs	r3, #18
 80052a2:	81bb      	strh	r3, [r7, #12]
						middle1.y = 236;
 80052a4:	23ec      	movs	r3, #236	; 0xec
 80052a6:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60bb      	str	r3, [r7, #8]
					}
				}
			}
			while(1){
				Position_P(&EstiCoord, &middle1);
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	4619      	mov	r1, r3
 80052b2:	4858      	ldr	r0, [pc, #352]	; (8005414 <GotoDestination+0x62c>)
 80052b4:	f000 f940 	bl	8005538 <Position_P>
				CheckCoord();
 80052b8:	f000 f918 	bl	80054ec <CheckCoord>
				if(abs(EstiCoord.x - middle1.x) + abs(EstiCoord.y - middle1.y) <= PATH_PID_TOLERANCE){
 80052bc:	4b55      	ldr	r3, [pc, #340]	; (8005414 <GotoDestination+0x62c>)
 80052be:	681c      	ldr	r4, [r3, #0]
 80052c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fb fd37 	bl	8000d38 <__aeabi_i2f>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4619      	mov	r1, r3
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7fb fc7c 	bl	8000bcc <__aeabi_fsub>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb ff48 	bl	800116c <__aeabi_f2iz>
 80052dc:	4603      	mov	r3, r0
 80052de:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80052e2:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80052e6:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <GotoDestination+0x62c>)
 80052e8:	685d      	ldr	r5, [r3, #4]
 80052ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb fd22 	bl	8000d38 <__aeabi_i2f>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4619      	mov	r1, r3
 80052f8:	4628      	mov	r0, r5
 80052fa:	f7fb fc67 	bl	8000bcc <__aeabi_fsub>
 80052fe:	4603      	mov	r3, r0
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb ff33 	bl	800116c <__aeabi_f2iz>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	bfb8      	it	lt
 800530c:	425b      	neglt	r3, r3
 800530e:	4423      	add	r3, r4
 8005310:	2b05      	cmp	r3, #5
 8005312:	dccb      	bgt.n	80052ac <GotoDestination+0x4c4>
					chao_move_angle(0,0);
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	f04f 0000 	mov.w	r0, #0
 800531c:	f7fc fd7c 	bl	8001e18 <chao_move_angle>
					break;
				}
			}
			while(1){
				Position_P(&EstiCoord, &middle2);
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4619      	mov	r1, r3
 8005326:	483b      	ldr	r0, [pc, #236]	; (8005414 <GotoDestination+0x62c>)
 8005328:	f000 f906 	bl	8005538 <Position_P>
				CheckCoord();
 800532c:	f000 f8de 	bl	80054ec <CheckCoord>
				if(abs(EstiCoord.x - middle2.x) + abs(EstiCoord.y - middle2.y) <= PATH_PID_TOLERANCE){
 8005330:	4b38      	ldr	r3, [pc, #224]	; (8005414 <GotoDestination+0x62c>)
 8005332:	681c      	ldr	r4, [r3, #0]
 8005334:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb fcfd 	bl	8000d38 <__aeabi_i2f>
 800533e:	4603      	mov	r3, r0
 8005340:	4619      	mov	r1, r3
 8005342:	4620      	mov	r0, r4
 8005344:	f7fb fc42 	bl	8000bcc <__aeabi_fsub>
 8005348:	4603      	mov	r3, r0
 800534a:	4618      	mov	r0, r3
 800534c:	f7fb ff0e 	bl	800116c <__aeabi_f2iz>
 8005350:	4603      	mov	r3, r0
 8005352:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8005356:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800535a:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <GotoDestination+0x62c>)
 800535c:	685d      	ldr	r5, [r3, #4]
 800535e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb fce8 	bl	8000d38 <__aeabi_i2f>
 8005368:	4603      	mov	r3, r0
 800536a:	4619      	mov	r1, r3
 800536c:	4628      	mov	r0, r5
 800536e:	f7fb fc2d 	bl	8000bcc <__aeabi_fsub>
 8005372:	4603      	mov	r3, r0
 8005374:	4618      	mov	r0, r3
 8005376:	f7fb fef9 	bl	800116c <__aeabi_f2iz>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	bfb8      	it	lt
 8005380:	425b      	neglt	r3, r3
 8005382:	4423      	add	r3, r4
 8005384:	2b05      	cmp	r3, #5
 8005386:	dccb      	bgt.n	8005320 <GotoDestination+0x538>
					chao_move_angle(0,0);
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	f04f 0000 	mov.w	r0, #0
 8005390:	f7fc fd42 	bl	8001e18 <chao_move_angle>
					break;
				}
			}
			while(1){
				Position_P(&EstiCoord, &Destination);
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	4619      	mov	r1, r3
 8005398:	481e      	ldr	r0, [pc, #120]	; (8005414 <GotoDestination+0x62c>)
 800539a:	f000 f8cd 	bl	8005538 <Position_P>
				CheckCoord();
 800539e:	f000 f8a5 	bl	80054ec <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE){
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <GotoDestination+0x62c>)
 80053a4:	681c      	ldr	r4, [r3, #0]
 80053a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb fcc4 	bl	8000d38 <__aeabi_i2f>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4619      	mov	r1, r3
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7fb fc09 	bl	8000bcc <__aeabi_fsub>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fb fed5 	bl	800116c <__aeabi_f2iz>
 80053c2:	4603      	mov	r3, r0
 80053c4:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80053c8:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <GotoDestination+0x62c>)
 80053ce:	685d      	ldr	r5, [r3, #4]
 80053d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fb fcaf 	bl	8000d38 <__aeabi_i2f>
 80053da:	4603      	mov	r3, r0
 80053dc:	4619      	mov	r1, r3
 80053de:	4628      	mov	r0, r5
 80053e0:	f7fb fbf4 	bl	8000bcc <__aeabi_fsub>
 80053e4:	4603      	mov	r3, r0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fb fec0 	bl	800116c <__aeabi_f2iz>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfb8      	it	lt
 80053f2:	425b      	neglt	r3, r3
 80053f4:	4423      	add	r3, r4
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	dccc      	bgt.n	8005394 <GotoDestination+0x5ac>
					chao_move_angle(0,0);
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	f04f 0000 	mov.w	r0, #0
 8005402:	f7fc fd09 	bl	8001e18 <chao_move_angle>
					return 1;
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <GotoDestination+0x624>
				}
			}
		}
	}
	return 0;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bdb0      	pop	{r4, r5, r7, pc}
 8005414:	20000c10 	.word	0x20000c10

08005418 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8005424:	e005      	b.n	8005432 <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 8005426:	4910      	ldr	r1, [pc, #64]	; (8005468 <Angle_normalization+0x50>)
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f7fb fbd1 	bl	8000bd0 <__addsf3>
 800542e:	4603      	mov	r3, r0
 8005430:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fb fe70 	bl	800111c <__aeabi_fcmplt>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f1      	bne.n	8005426 <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 8005442:	e005      	b.n	8005450 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 8005444:	4908      	ldr	r1, [pc, #32]	; (8005468 <Angle_normalization+0x50>)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7fb fbc0 	bl	8000bcc <__aeabi_fsub>
 800544c:	4603      	mov	r3, r0
 800544e:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8005450:	4905      	ldr	r1, [pc, #20]	; (8005468 <Angle_normalization+0x50>)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7fb fe80 	bl	8001158 <__aeabi_fcmpgt>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f2      	bne.n	8005444 <Angle_normalization+0x2c>
	}
	return raw_angle;
 800545e:	68fb      	ldr	r3, [r7, #12]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	43b40000 	.word	0x43b40000

0800546c <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	460a      	mov	r2, r1
 8005476:	80fb      	strh	r3, [r7, #6]
 8005478:	4613      	mov	r3, r2
 800547a:	80bb      	strh	r3, [r7, #4]
	float kp = 50.0;
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <CalSpeed+0x74>)
 800547e:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 8005480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005484:	2b00      	cmp	r3, #0
 8005486:	bfb8      	it	lt
 8005488:	425b      	neglt	r3, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	bfb8      	it	lt
 8005496:	425b      	neglt	r3, r3
 8005498:	b29b      	uxth	r3, r3
 800549a:	4413      	add	r3, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f7fb fc4b 	bl	8000d38 <__aeabi_i2f>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4619      	mov	r1, r3
 80054a6:	68b8      	ldr	r0, [r7, #8]
 80054a8:	f7fb fc9a 	bl	8000de0 <__aeabi_fmul>
 80054ac:	4603      	mov	r3, r0
 80054ae:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 80054b0:	490c      	ldr	r1, [pc, #48]	; (80054e4 <CalSpeed+0x78>)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7fb fe50 	bl	8001158 <__aeabi_fcmpgt>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <CalSpeed+0x56>
	{
		Speed = MAX_SPEED;
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <CalSpeed+0x78>)
 80054c0:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 80054c2:	4909      	ldr	r1, [pc, #36]	; (80054e8 <CalSpeed+0x7c>)
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7fb fe29 	bl	800111c <__aeabi_fcmplt>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <CalSpeed+0x68>
	{
		Speed = MIN_SPEED;
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <CalSpeed+0x7c>)
 80054d2:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 80054d4:	68fb      	ldr	r3, [r7, #12]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	42480000 	.word	0x42480000
 80054e4:	44fa0000 	.word	0x44fa0000
 80054e8:	44160000 	.word	0x44160000

080054ec <CheckCoord>:

uint8_t CheckCoord(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <CheckCoord+0x40>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d116      	bne.n	8005526 <CheckCoord+0x3a>
	{
		EstiCoord.x = (float)myCoord.x;
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <CheckCoord+0x44>)
 80054fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fb fc1a 	bl	8000d38 <__aeabi_i2f>
 8005504:	4603      	mov	r3, r0
 8005506:	4a0b      	ldr	r2, [pc, #44]	; (8005534 <CheckCoord+0x48>)
 8005508:	6013      	str	r3, [r2, #0]
		EstiCoord.y = (float)myCoord.y;
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <CheckCoord+0x44>)
 800550c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005510:	4618      	mov	r0, r3
 8005512:	f7fb fc11 	bl	8000d38 <__aeabi_i2f>
 8005516:	4603      	mov	r3, r0
 8005518:	4a06      	ldr	r2, [pc, #24]	; (8005534 <CheckCoord+0x48>)
 800551a:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <CheckCoord+0x40>)
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
		return 1;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <CheckCoord+0x3c>
	}
	return 0;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000c18 	.word	0x20000c18
 8005530:	20000c0c 	.word	0x20000c0c
 8005534:	20000c10 	.word	0x20000c10

08005538 <Position_P>:
	float v_y = (cmotor_rf.lastSpeed + cmotor_lf.lastSpeed + cmotor_lb.lastSpeed + cmotor_rb.lastSpeed) * 60.0 / 20000;
	return v_y;
}

void Position_P(fCoordinate* cur, Coordinate* goal)
{
 8005538:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800553c:	b08e      	sub	sp, #56	; 0x38
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
	float x_error = cur->x - goal->x;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681c      	ldr	r4, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fb fbf2 	bl	8000d38 <__aeabi_i2f>
 8005554:	4603      	mov	r3, r0
 8005556:	4619      	mov	r1, r3
 8005558:	4620      	mov	r0, r4
 800555a:	f7fb fb37 	bl	8000bcc <__aeabi_fsub>
 800555e:	4603      	mov	r3, r0
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
	float y_error = goal->y - cur->y;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005568:	4618      	mov	r0, r3
 800556a:	f7fb fbe5 	bl	8000d38 <__aeabi_i2f>
 800556e:	4602      	mov	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fb fb28 	bl	8000bcc <__aeabi_fsub>
 800557c:	4603      	mov	r3, r0
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (y_error == 0)
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005586:	f7fb fdbf 	bl	8001108 <__aeabi_fcmpeq>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d034      	beq.n	80055fa <Position_P+0xc2>
	{
		if(x_error < 0)
 8005590:	f04f 0100 	mov.w	r1, #0
 8005594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005596:	f7fb fdc1 	bl	800111c <__aeabi_fcmplt>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00e      	beq.n	80055be <Position_P+0x86>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 80055a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a2:	f7fb fde3 	bl	800116c <__aeabi_f2iz>
 80055a6:	4603      	mov	r3, r0
 80055a8:	b21b      	sxth	r3, r3
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ff5d 	bl	800546c <CalSpeed>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4619      	mov	r1, r3
 80055b6:	48a6      	ldr	r0, [pc, #664]	; (8005850 <Position_P+0x318>)
 80055b8:	f7fc fc2e 	bl	8001e18 <chao_move_angle>
 80055bc:	e092      	b.n	80056e4 <Position_P+0x1ac>
		}
		else if(x_error > 0)
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c4:	f7fb fdc8 	bl	8001158 <__aeabi_fcmpgt>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00e      	beq.n	80055ec <Position_P+0xb4>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 80055ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d0:	f7fb fdcc 	bl	800116c <__aeabi_f2iz>
 80055d4:	4603      	mov	r3, r0
 80055d6:	b21b      	sxth	r3, r3
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ff46 	bl	800546c <CalSpeed>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4619      	mov	r1, r3
 80055e4:	489b      	ldr	r0, [pc, #620]	; (8005854 <Position_P+0x31c>)
 80055e6:	f7fc fc17 	bl	8001e18 <chao_move_angle>
 80055ea:	e07b      	b.n	80056e4 <Position_P+0x1ac>
		}
		else
		{
			chao_move_angle(0, 0);
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	f04f 0000 	mov.w	r0, #0
 80055f4:	f7fc fc10 	bl	8001e18 <chao_move_angle>
 80055f8:	e074      	b.n	80056e4 <Position_P+0x1ac>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 80055fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f7fb fca3 	bl	8000f48 <__aeabi_fdiv>
 8005602:	4603      	mov	r3, r0
 8005604:	4618      	mov	r0, r3
 8005606:	f7fa ff73 	bl	80004f0 <__aeabi_f2d>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f006 fa55 	bl	800bac0 <atan>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4610      	mov	r0, r2
 800561c:	4619      	mov	r1, r3
 800561e:	f7fb fa81 	bl	8000b24 <__aeabi_d2f>
 8005622:	4603      	mov	r3, r0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
		if(y_error < 0)
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800562c:	f7fb fd76 	bl	800111c <__aeabi_fcmplt>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00f      	beq.n	8005656 <Position_P+0x11e>
		{
			azimuth += M_PI;
 8005636:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005638:	f7fa ff5a 	bl	80004f0 <__aeabi_f2d>
 800563c:	a37e      	add	r3, pc, #504	; (adr r3, 8005838 <Position_P+0x300>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fdf7 	bl	8000234 <__adddf3>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	f7fb fa69 	bl	8000b24 <__aeabi_d2f>
 8005652:	4603      	mov	r3, r0
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 8005656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005658:	f7fa ff4a 	bl	80004f0 <__aeabi_f2d>
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	4b7d      	ldr	r3, [pc, #500]	; (8005858 <Position_P+0x320>)
 8005662:	f7fa ff9d 	bl	80005a0 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	a374      	add	r3, pc, #464	; (adr r3, 8005840 <Position_P+0x308>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fb f8be 	bl	80007f4 <__aeabi_ddiv>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	f7fb fa50 	bl	8000b24 <__aeabi_d2f>
 8005684:	4603      	mov	r3, r0
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
		azimuth = Angle_normalization(azimuth);
 8005688:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800568a:	f7ff fec5 	bl	8005418 <Angle_normalization>
 800568e:	6378      	str	r0, [r7, #52]	; 0x34
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 8005690:	4b72      	ldr	r3, [pc, #456]	; (800585c <Position_P+0x324>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a72      	ldr	r2, [pc, #456]	; (8005860 <Position_P+0x328>)
 8005696:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7fb fa96 	bl	8000bcc <__aeabi_fsub>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff feb8 	bl	8005418 <Angle_normalization>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4619      	mov	r1, r3
 80056ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056ae:	f7fb fa8d 	bl	8000bcc <__aeabi_fsub>
 80056b2:	4603      	mov	r3, r0
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
		angle = Angle_normalization(angle);
 80056b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b8:	f7ff feae 	bl	8005418 <Angle_normalization>
 80056bc:	62b8      	str	r0, [r7, #40]	; 0x28
		chao_move_angle(angle, CalSpeed(x_error, y_error));
 80056be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c0:	f7fb fd54 	bl	800116c <__aeabi_f2iz>
 80056c4:	4603      	mov	r3, r0
 80056c6:	b21c      	sxth	r4, r3
 80056c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056ca:	f7fb fd4f 	bl	800116c <__aeabi_f2iz>
 80056ce:	4603      	mov	r3, r0
 80056d0:	b21b      	sxth	r3, r3
 80056d2:	4619      	mov	r1, r3
 80056d4:	4620      	mov	r0, r4
 80056d6:	f7ff fec9 	bl	800546c <CalSpeed>
 80056da:	4603      	mov	r3, r0
 80056dc:	4619      	mov	r1, r3
 80056de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056e0:	f7fc fb9a 	bl	8001e18 <chao_move_angle>
	}
	CheckCoord();
 80056e4:	f7ff ff02 	bl	80054ec <CheckCoord>
	uint32_t timestart = HAL_GetTick();
 80056e8:	f001 f81c 	bl	8006724 <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(10); // delay 10 ms = 100 Hz
 80056ee:	200a      	movs	r0, #10
 80056f0:	f001 f822 	bl	8006738 <HAL_Delay>
	if(CheckCoord() == 0)
 80056f4:	f7ff fefa 	bl	80054ec <CheckCoord>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 8095 	bne.w	800582a <Position_P+0x2f2>
	{
		float lf_v = cmotor_lf.lastSpeed;
 8005700:	4b58      	ldr	r3, [pc, #352]	; (8005864 <Position_P+0x32c>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	623b      	str	r3, [r7, #32]
		float lb_v = cmotor_lb.lastSpeed;
 8005706:	4b58      	ldr	r3, [pc, #352]	; (8005868 <Position_P+0x330>)
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	61fb      	str	r3, [r7, #28]
		float rf_v = cmotor_rf.lastSpeed;
 800570c:	4b57      	ldr	r3, [pc, #348]	; (800586c <Position_P+0x334>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	61bb      	str	r3, [r7, #24]
		float rb_v = cmotor_rb.lastSpeed;
 8005712:	4b57      	ldr	r3, [pc, #348]	; (8005870 <Position_P+0x338>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	617b      	str	r3, [r7, #20]
//		float v_x = -((rf_v - lf_v + lb_v - rb_v) / 500);
		float v_x = ((rf_v - lf_v + lb_v - rb_v) / 200);
 8005718:	6a39      	ldr	r1, [r7, #32]
 800571a:	69b8      	ldr	r0, [r7, #24]
 800571c:	f7fb fa56 	bl	8000bcc <__aeabi_fsub>
 8005720:	4603      	mov	r3, r0
 8005722:	69f9      	ldr	r1, [r7, #28]
 8005724:	4618      	mov	r0, r3
 8005726:	f7fb fa53 	bl	8000bd0 <__addsf3>
 800572a:	4603      	mov	r3, r0
 800572c:	6979      	ldr	r1, [r7, #20]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fb fa4c 	bl	8000bcc <__aeabi_fsub>
 8005734:	4603      	mov	r3, r0
 8005736:	494f      	ldr	r1, [pc, #316]	; (8005874 <Position_P+0x33c>)
 8005738:	4618      	mov	r0, r3
 800573a:	f7fb fc05 	bl	8000f48 <__aeabi_fdiv>
 800573e:	4603      	mov	r3, r0
 8005740:	613b      	str	r3, [r7, #16]
		float v_y = ((rf_v + lf_v + lb_v + rb_v) / 200);
 8005742:	6a39      	ldr	r1, [r7, #32]
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f7fb fa43 	bl	8000bd0 <__addsf3>
 800574a:	4603      	mov	r3, r0
 800574c:	69f9      	ldr	r1, [r7, #28]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fb fa3e 	bl	8000bd0 <__addsf3>
 8005754:	4603      	mov	r3, r0
 8005756:	6979      	ldr	r1, [r7, #20]
 8005758:	4618      	mov	r0, r3
 800575a:	f7fb fa39 	bl	8000bd0 <__addsf3>
 800575e:	4603      	mov	r3, r0
 8005760:	4944      	ldr	r1, [pc, #272]	; (8005874 <Position_P+0x33c>)
 8005762:	4618      	mov	r0, r3
 8005764:	f7fb fbf0 	bl	8000f48 <__aeabi_fdiv>
 8005768:	4603      	mov	r3, r0
 800576a:	60fb      	str	r3, [r7, #12]
		uint32_t timeend = HAL_GetTick();
 800576c:	f000 ffda 	bl	8006724 <HAL_GetTick>
 8005770:	60b8      	str	r0, [r7, #8]
		EstiCoord.x = EstiCoord.x + (timeend - timestart) * 0.001 * v_x;
 8005772:	4b41      	ldr	r3, [pc, #260]	; (8005878 <Position_P+0x340>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa feba 	bl	80004f0 <__aeabi_f2d>
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4618      	mov	r0, r3
 8005788:	f7fa fe90 	bl	80004ac <__aeabi_ui2d>
 800578c:	a32e      	add	r3, pc, #184	; (adr r3, 8005848 <Position_P+0x310>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa ff05 	bl	80005a0 <__aeabi_dmul>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4690      	mov	r8, r2
 800579c:	4699      	mov	r9, r3
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7fa fea6 	bl	80004f0 <__aeabi_f2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4640      	mov	r0, r8
 80057aa:	4649      	mov	r1, r9
 80057ac:	f7fa fef8 	bl	80005a0 <__aeabi_dmul>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4620      	mov	r0, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	f7fa fd3c 	bl	8000234 <__adddf3>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	f7fb f9ae 	bl	8000b24 <__aeabi_d2f>
 80057c8:	4603      	mov	r3, r0
 80057ca:	4a2b      	ldr	r2, [pc, #172]	; (8005878 <Position_P+0x340>)
 80057cc:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + (timeend - timestart) * 0.001 * v_y;
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <Position_P+0x340>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa fe8c 	bl	80004f0 <__aeabi_f2d>
 80057d8:	4604      	mov	r4, r0
 80057da:	460d      	mov	r5, r1
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fa fe62 	bl	80004ac <__aeabi_ui2d>
 80057e8:	a317      	add	r3, pc, #92	; (adr r3, 8005848 <Position_P+0x310>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa fed7 	bl	80005a0 <__aeabi_dmul>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4690      	mov	r8, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7fa fe78 	bl	80004f0 <__aeabi_f2d>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4640      	mov	r0, r8
 8005806:	4649      	mov	r1, r9
 8005808:	f7fa feca 	bl	80005a0 <__aeabi_dmul>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fa fd0e 	bl	8000234 <__adddf3>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	f7fb f980 	bl	8000b24 <__aeabi_d2f>
 8005824:	4603      	mov	r3, r0
 8005826:	4a14      	ldr	r2, [pc, #80]	; (8005878 <Position_P+0x340>)
 8005828:	6053      	str	r3, [r2, #4]
	}
}
 800582a:	bf00      	nop
 800582c:	3738      	adds	r7, #56	; 0x38
 800582e:	46bd      	mov	sp, r7
 8005830:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005834:	f3af 8000 	nop.w
 8005838:	54442d18 	.word	0x54442d18
 800583c:	400921fb 	.word	0x400921fb
 8005840:	54442d18 	.word	0x54442d18
 8005844:	401921fb 	.word	0x401921fb
 8005848:	d2f1a9fc 	.word	0xd2f1a9fc
 800584c:	3f50624d 	.word	0x3f50624d
 8005850:	43870000 	.word	0x43870000
 8005854:	42b40000 	.word	0x42b40000
 8005858:	40768000 	.word	0x40768000
 800585c:	20000c1c 	.word	0x20000c1c
 8005860:	20000a90 	.word	0x20000a90
 8005864:	200009a0 	.word	0x200009a0
 8005868:	20000a18 	.word	0x20000a18
 800586c:	200009dc 	.word	0x200009dc
 8005870:	20000a54 	.word	0x20000a54
 8005874:	43480000 	.word	0x43480000
 8005878:	20000c10 	.word	0x20000c10

0800587c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af04      	add	r7, sp, #16
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	9302      	str	r3, [sp, #8]
 800588c:	2301      	movs	r3, #1
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	1dfb      	adds	r3, r7, #7
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	2200      	movs	r2, #0
 8005898:	2178      	movs	r1, #120	; 0x78
 800589a:	4803      	ldr	r0, [pc, #12]	; (80058a8 <ssd1306_WriteCommand+0x2c>)
 800589c:	f001 fff0 	bl	8007880 <HAL_I2C_Mem_Write>
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000644 	.word	0x20000644

080058ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af04      	add	r7, sp, #16
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f04f 32ff 	mov.w	r2, #4294967295
 80058be:	9202      	str	r2, [sp, #8]
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	2301      	movs	r3, #1
 80058c8:	2240      	movs	r2, #64	; 0x40
 80058ca:	2178      	movs	r1, #120	; 0x78
 80058cc:	4803      	ldr	r0, [pc, #12]	; (80058dc <ssd1306_WriteData+0x30>)
 80058ce:	f001 ffd7 	bl	8007880 <HAL_I2C_Mem_Write>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000644 	.word	0x20000644

080058e0 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80058e6:	2300      	movs	r3, #0
 80058e8:	71fb      	strb	r3, [r7, #7]
 80058ea:	e016      	b.n	800591a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	3b50      	subs	r3, #80	; 0x50
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff ffc2 	bl	800587c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80058f8:	2000      	movs	r0, #0
 80058fa:	f7ff ffbf 	bl	800587c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80058fe:	2010      	movs	r0, #16
 8005900:	f7ff ffbc 	bl	800587c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	01db      	lsls	r3, r3, #7
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <ssd1306_UpdateScreen+0x4c>)
 800590a:	4413      	add	r3, r2
 800590c:	2180      	movs	r1, #128	; 0x80
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff ffcc 	bl	80058ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	3301      	adds	r3, #1
 8005918:	71fb      	strb	r3, [r7, #7]
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d9e5      	bls.n	80058ec <ssd1306_UpdateScreen+0xc>
    }
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20007dcc 	.word	0x20007dcc

08005930 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	71fb      	strb	r3, [r7, #7]
 800593a:	460b      	mov	r3, r1
 800593c:	71bb      	strb	r3, [r7, #6]
 800593e:	4613      	mov	r3, r2
 8005940:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	2b00      	cmp	r3, #0
 8005948:	db3d      	blt.n	80059c6 <ssd1306_DrawPixel+0x96>
 800594a:	79bb      	ldrb	r3, [r7, #6]
 800594c:	2b1f      	cmp	r3, #31
 800594e:	d83a      	bhi.n	80059c6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8005950:	797b      	ldrb	r3, [r7, #5]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d11a      	bne.n	800598c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005956:	79fa      	ldrb	r2, [r7, #7]
 8005958:	79bb      	ldrb	r3, [r7, #6]
 800595a:	08db      	lsrs	r3, r3, #3
 800595c:	b2d8      	uxtb	r0, r3
 800595e:	4603      	mov	r3, r0
 8005960:	01db      	lsls	r3, r3, #7
 8005962:	4413      	add	r3, r2
 8005964:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <ssd1306_DrawPixel+0xa0>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	b25a      	sxtb	r2, r3
 800596a:	79bb      	ldrb	r3, [r7, #6]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	2101      	movs	r1, #1
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	b25b      	sxtb	r3, r3
 8005978:	4313      	orrs	r3, r2
 800597a:	b259      	sxtb	r1, r3
 800597c:	79fa      	ldrb	r2, [r7, #7]
 800597e:	4603      	mov	r3, r0
 8005980:	01db      	lsls	r3, r3, #7
 8005982:	4413      	add	r3, r2
 8005984:	b2c9      	uxtb	r1, r1
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <ssd1306_DrawPixel+0xa0>)
 8005988:	54d1      	strb	r1, [r2, r3]
 800598a:	e01d      	b.n	80059c8 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800598c:	79fa      	ldrb	r2, [r7, #7]
 800598e:	79bb      	ldrb	r3, [r7, #6]
 8005990:	08db      	lsrs	r3, r3, #3
 8005992:	b2d8      	uxtb	r0, r3
 8005994:	4603      	mov	r3, r0
 8005996:	01db      	lsls	r3, r3, #7
 8005998:	4413      	add	r3, r2
 800599a:	4a0d      	ldr	r2, [pc, #52]	; (80059d0 <ssd1306_DrawPixel+0xa0>)
 800599c:	5cd3      	ldrb	r3, [r2, r3]
 800599e:	b25a      	sxtb	r2, r3
 80059a0:	79bb      	ldrb	r3, [r7, #6]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	b25b      	sxtb	r3, r3
 80059b2:	4013      	ands	r3, r2
 80059b4:	b259      	sxtb	r1, r3
 80059b6:	79fa      	ldrb	r2, [r7, #7]
 80059b8:	4603      	mov	r3, r0
 80059ba:	01db      	lsls	r3, r3, #7
 80059bc:	4413      	add	r3, r2
 80059be:	b2c9      	uxtb	r1, r1
 80059c0:	4a03      	ldr	r2, [pc, #12]	; (80059d0 <ssd1306_DrawPixel+0xa0>)
 80059c2:	54d1      	strb	r1, [r2, r3]
 80059c4:	e000      	b.n	80059c8 <ssd1306_DrawPixel+0x98>
        return;
 80059c6:	bf00      	nop
    }
}
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	20007dcc 	.word	0x20007dcc

080059d4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80059d4:	b590      	push	{r4, r7, lr}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4604      	mov	r4, r0
 80059dc:	1d38      	adds	r0, r7, #4
 80059de:	e880 0006 	stmia.w	r0, {r1, r2}
 80059e2:	461a      	mov	r2, r3
 80059e4:	4623      	mov	r3, r4
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	4613      	mov	r3, r2
 80059ea:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b1f      	cmp	r3, #31
 80059f0:	d902      	bls.n	80059f8 <ssd1306_WriteChar+0x24>
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b7e      	cmp	r3, #126	; 0x7e
 80059f6:	d901      	bls.n	80059fc <ssd1306_WriteChar+0x28>
        return 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e06d      	b.n	8005ad8 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80059fc:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	793b      	ldrb	r3, [r7, #4]
 8005a04:	4413      	add	r3, r2
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	dc06      	bgt.n	8005a18 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005a0a:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005a0c:	885b      	ldrh	r3, [r3, #2]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	797b      	ldrb	r3, [r7, #5]
 8005a12:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	dd01      	ble.n	8005a1c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e05d      	b.n	8005ad8 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	e04c      	b.n	8005abc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	3b20      	subs	r3, #32
 8005a28:	7979      	ldrb	r1, [r7, #5]
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	4619      	mov	r1, r3
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	440b      	add	r3, r1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	e034      	b.n	8005aac <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d012      	beq.n	8005a78 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	b2d8      	uxtb	r0, r3
 8005a60:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005a62:	885b      	ldrh	r3, [r3, #2]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	7bba      	ldrb	r2, [r7, #14]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7ff ff5d 	bl	8005930 <ssd1306_DrawPixel>
 8005a76:	e016      	b.n	8005aa6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005a78:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4413      	add	r3, r2
 8005a84:	b2d8      	uxtb	r0, r3
 8005a86:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	b2d9      	uxtb	r1, r3
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f7ff ff45 	bl	8005930 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	793b      	ldrb	r3, [r7, #4]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d3c5      	bcc.n	8005a42 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	797b      	ldrb	r3, [r7, #5]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d3ad      	bcc.n	8005a22 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005ac6:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005ac8:	881a      	ldrh	r2, [r3, #0]
 8005aca:	793b      	ldrb	r3, [r7, #4]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <ssd1306_WriteChar+0x10c>)
 8005ad4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3724      	adds	r7, #36	; 0x24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd90      	pop	{r4, r7, pc}
 8005ae0:	20007fcc 	.word	0x20007fcc

08005ae4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	1d38      	adds	r0, r7, #4
 8005aee:	e880 0006 	stmia.w	r0, {r1, r2}
 8005af2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8005af4:	e012      	b.n	8005b1c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	7818      	ldrb	r0, [r3, #0]
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	1d3a      	adds	r2, r7, #4
 8005afe:	ca06      	ldmia	r2, {r1, r2}
 8005b00:	f7ff ff68 	bl	80059d4 <ssd1306_WriteChar>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d002      	beq.n	8005b16 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	e008      	b.n	8005b28 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e8      	bne.n	8005af6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	781b      	ldrb	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <HAL_MspInit+0x5c>)
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	4a14      	ldr	r2, [pc, #80]	; (8005b8c <HAL_MspInit+0x5c>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6193      	str	r3, [r2, #24]
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_MspInit+0x5c>)
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <HAL_MspInit+0x5c>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4a0e      	ldr	r2, [pc, #56]	; (8005b8c <HAL_MspInit+0x5c>)
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b58:	61d3      	str	r3, [r2, #28]
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <HAL_MspInit+0x5c>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <HAL_MspInit+0x60>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	4a04      	ldr	r2, [pc, #16]	; (8005b90 <HAL_MspInit+0x60>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	40010000 	.word	0x40010000

08005b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_I2C_MspInit+0x90>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d132      	bne.n	8005c1a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <HAL_I2C_MspInit+0x94>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <HAL_I2C_MspInit+0x94>)
 8005bba:	f043 0308 	orr.w	r3, r3, #8
 8005bbe:	6193      	str	r3, [r2, #24]
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <HAL_I2C_MspInit+0x94>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005bcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bd2:	2312      	movs	r3, #18
 8005bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	4619      	mov	r1, r3
 8005be0:	4812      	ldr	r0, [pc, #72]	; (8005c2c <HAL_I2C_MspInit+0x98>)
 8005be2:	f001 fb5d 	bl	80072a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <HAL_I2C_MspInit+0x9c>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	f043 0302 	orr.w	r3, r3, #2
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfc:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <HAL_I2C_MspInit+0x9c>)
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_I2C_MspInit+0x94>)
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <HAL_I2C_MspInit+0x94>)
 8005c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c0c:	61d3      	str	r3, [r2, #28]
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <HAL_I2C_MspInit+0x94>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005c1a:	bf00      	nop
 8005c1c:	3728      	adds	r7, #40	; 0x28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40005400 	.word	0x40005400
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40010c00 	.word	0x40010c00
 8005c30:	40010000 	.word	0x40010000

08005c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_TIM_Base_MspInit+0x8c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10c      	bne.n	8005c60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c46:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c50:	6193      	str	r3, [r2, #24]
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005c5e:	e02a      	b.n	8005cb6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_TIM_Base_MspInit+0x94>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d114      	bne.n	8005c94 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c6a:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005c70:	f043 0310 	orr.w	r3, r3, #16
 8005c74:	61d3      	str	r3, [r2, #28]
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8005c82:	2200      	movs	r2, #0
 8005c84:	2101      	movs	r1, #1
 8005c86:	2036      	movs	r0, #54	; 0x36
 8005c88:	f000 fe51 	bl	800692e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005c8c:	2036      	movs	r0, #54	; 0x36
 8005c8e:	f000 fe6a 	bl	8006966 <HAL_NVIC_EnableIRQ>
}
 8005c92:	e010      	b.n	8005cb6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <HAL_TIM_Base_MspInit+0x98>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10b      	bne.n	8005cb6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005ca4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ca8:	6193      	str	r3, [r2, #24]
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_TIM_Base_MspInit+0x90>)
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	bf00      	nop
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40001000 	.word	0x40001000
 8005ccc:	40013400 	.word	0x40013400

08005cd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b090      	sub	sp, #64	; 0x40
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cee:	d14f      	bne.n	8005d90 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4a67      	ldr	r2, [pc, #412]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	61d3      	str	r3, [r2, #28]
 8005cfc:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d08:	4b62      	ldr	r3, [pc, #392]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4a61      	ldr	r2, [pc, #388]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d0e:	f043 0304 	orr.w	r3, r3, #4
 8005d12:	6193      	str	r3, [r2, #24]
 8005d14:	4b5f      	ldr	r3, [pc, #380]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d20:	4b5c      	ldr	r3, [pc, #368]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4a5b      	ldr	r2, [pc, #364]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d26:	f043 0308 	orr.w	r3, r3, #8
 8005d2a:	6193      	str	r3, [r2, #24]
 8005d2c:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4852      	ldr	r0, [pc, #328]	; (8005e98 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005d4e:	f001 faa7 	bl	80072a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d52:	2308      	movs	r3, #8
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d56:	2300      	movs	r3, #0
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d62:	4619      	mov	r1, r3
 8005d64:	484d      	ldr	r0, [pc, #308]	; (8005e9c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005d66:	f001 fa9b 	bl	80072a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005d6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ea0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d88:	4a45      	ldr	r2, [pc, #276]	; (8005ea0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005d8e:	e07c      	b.n	8005e8a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a43      	ldr	r2, [pc, #268]	; (8005ea4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d124      	bne.n	8005de4 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d9a:	4b3e      	ldr	r3, [pc, #248]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	4a3d      	ldr	r2, [pc, #244]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	61d3      	str	r3, [r2, #28]
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db2:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	4a37      	ldr	r2, [pc, #220]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	6193      	str	r3, [r2, #24]
 8005dbe:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dca:	23c0      	movs	r3, #192	; 0xc0
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dda:	4619      	mov	r1, r3
 8005ddc:	482e      	ldr	r0, [pc, #184]	; (8005e98 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005dde:	f001 fa5f 	bl	80072a0 <HAL_GPIO_Init>
}
 8005de2:	e052      	b.n	8005e8a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2f      	ldr	r2, [pc, #188]	; (8005ea8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d124      	bne.n	8005e38 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005dee:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005df4:	f043 0304 	orr.w	r3, r3, #4
 8005df8:	61d3      	str	r3, [r2, #28]
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e06:	4b23      	ldr	r3, [pc, #140]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e0c:	f043 0308 	orr.w	r3, r3, #8
 8005e10:	6193      	str	r3, [r2, #24]
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e1e:	23c0      	movs	r3, #192	; 0xc0
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e22:	2300      	movs	r3, #0
 8005e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e2e:	4619      	mov	r1, r3
 8005e30:	481a      	ldr	r0, [pc, #104]	; (8005e9c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005e32:	f001 fa35 	bl	80072a0 <HAL_GPIO_Init>
}
 8005e36:	e028      	b.n	8005e8a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <HAL_TIM_Encoder_MspInit+0x1dc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d123      	bne.n	8005e8a <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e48:	f043 0308 	orr.w	r3, r3, #8
 8005e4c:	61d3      	str	r3, [r2, #28]
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e60:	f043 0304 	orr.w	r3, r3, #4
 8005e64:	6193      	str	r3, [r2, #24]
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e72:	2303      	movs	r3, #3
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e76:	2300      	movs	r3, #0
 8005e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e82:	4619      	mov	r1, r3
 8005e84:	4804      	ldr	r0, [pc, #16]	; (8005e98 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005e86:	f001 fa0b 	bl	80072a0 <HAL_GPIO_Init>
}
 8005e8a:	bf00      	nop
 8005e8c:	3740      	adds	r7, #64	; 0x40
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40010800 	.word	0x40010800
 8005e9c:	40010c00 	.word	0x40010c00
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00

08005eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb8:	f107 0310 	add.w	r3, r7, #16
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <HAL_TIM_MspPostInit+0x98>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d119      	bne.n	8005f04 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_TIM_MspPostInit+0x9c>)
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	; (8005f4c <HAL_TIM_MspPostInit+0x9c>)
 8005ed6:	f043 0304 	orr.w	r3, r3, #4
 8005eda:	6193      	str	r3, [r2, #24]
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_TIM_MspPostInit+0x9c>)
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005ee8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ef6:	f107 0310 	add.w	r3, r7, #16
 8005efa:	4619      	mov	r1, r3
 8005efc:	4814      	ldr	r0, [pc, #80]	; (8005f50 <HAL_TIM_MspPostInit+0xa0>)
 8005efe:	f001 f9cf 	bl	80072a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005f02:	e01d      	b.n	8005f40 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_TIM_MspPostInit+0xa4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d118      	bne.n	8005f40 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <HAL_TIM_MspPostInit+0x9c>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	4a0e      	ldr	r2, [pc, #56]	; (8005f4c <HAL_TIM_MspPostInit+0x9c>)
 8005f14:	f043 0310 	orr.w	r3, r3, #16
 8005f18:	6193      	str	r3, [r2, #24]
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <HAL_TIM_MspPostInit+0x9c>)
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005f26:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f30:	2302      	movs	r3, #2
 8005f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f34:	f107 0310 	add.w	r3, r7, #16
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <HAL_TIM_MspPostInit+0xa8>)
 8005f3c:	f001 f9b0 	bl	80072a0 <HAL_GPIO_Init>
}
 8005f40:	bf00      	nop
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	40010800 	.word	0x40010800
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40011000 	.word	0x40011000

08005f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	; 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f64:	f107 031c 	add.w	r3, r7, #28
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6e      	ldr	r2, [pc, #440]	; (8006130 <HAL_UART_MspInit+0x1d4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d15e      	bne.n	800603a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f7c:	4b6d      	ldr	r3, [pc, #436]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	4a6c      	ldr	r2, [pc, #432]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8005f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f86:	61d3      	str	r3, [r2, #28]
 8005f88:	4b6a      	ldr	r3, [pc, #424]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f94:	4b67      	ldr	r3, [pc, #412]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	4a66      	ldr	r2, [pc, #408]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8005f9a:	f043 0304 	orr.w	r3, r3, #4
 8005f9e:	6193      	str	r3, [r2, #24]
 8005fa0:	4b64      	ldr	r3, [pc, #400]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8005fac:	2304      	movs	r3, #4
 8005fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8005fb8:	f107 031c 	add.w	r3, r7, #28
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	485e      	ldr	r0, [pc, #376]	; (8006138 <HAL_UART_MspInit+0x1dc>)
 8005fc0:	f001 f96e 	bl	80072a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8005fd0:	f107 031c 	add.w	r3, r7, #28
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4858      	ldr	r0, [pc, #352]	; (8006138 <HAL_UART_MspInit+0x1dc>)
 8005fd8:	f001 f962 	bl	80072a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005fdc:	4b57      	ldr	r3, [pc, #348]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8005fde:	4a58      	ldr	r2, [pc, #352]	; (8006140 <HAL_UART_MspInit+0x1e4>)
 8005fe0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fe2:	4b56      	ldr	r3, [pc, #344]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fe8:	4b54      	ldr	r3, [pc, #336]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fee:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8005ff0:	2280      	movs	r2, #128	; 0x80
 8005ff2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ff4:	4b51      	ldr	r3, [pc, #324]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ffa:	4b50      	ldr	r3, [pc, #320]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006000:	4b4e      	ldr	r3, [pc, #312]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8006002:	2200      	movs	r2, #0
 8006004:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006006:	4b4d      	ldr	r3, [pc, #308]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8006008:	2200      	movs	r2, #0
 800600a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800600c:	484b      	ldr	r0, [pc, #300]	; (800613c <HAL_UART_MspInit+0x1e0>)
 800600e:	f000 fcc5 	bl	800699c <HAL_DMA_Init>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8006018:	f7fe fc4a 	bl	80048b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a47      	ldr	r2, [pc, #284]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
 8006022:	4a46      	ldr	r2, [pc, #280]	; (800613c <HAL_UART_MspInit+0x1e0>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8006028:	2200      	movs	r2, #0
 800602a:	2102      	movs	r1, #2
 800602c:	2026      	movs	r0, #38	; 0x26
 800602e:	f000 fc7e 	bl	800692e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006032:	2026      	movs	r0, #38	; 0x26
 8006034:	f000 fc97 	bl	8006966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006038:	e076      	b.n	8006128 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a41      	ldr	r2, [pc, #260]	; (8006144 <HAL_UART_MspInit+0x1e8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d171      	bne.n	8006128 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006044:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4a3a      	ldr	r2, [pc, #232]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 800604a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800604e:	61d3      	str	r3, [r2, #28]
 8006050:	4b38      	ldr	r3, [pc, #224]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800605c:	4b35      	ldr	r3, [pc, #212]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	4a34      	ldr	r2, [pc, #208]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 8006062:	f043 0310 	orr.w	r3, r3, #16
 8006066:	6193      	str	r3, [r2, #24]
 8006068:	4b32      	ldr	r3, [pc, #200]	; (8006134 <HAL_UART_MspInit+0x1d8>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8006074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607a:	2302      	movs	r3, #2
 800607c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800607e:	2303      	movs	r3, #3
 8006080:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8006082:	f107 031c 	add.w	r3, r7, #28
 8006086:	4619      	mov	r1, r3
 8006088:	482f      	ldr	r0, [pc, #188]	; (8006148 <HAL_UART_MspInit+0x1ec>)
 800608a:	f001 f909 	bl	80072a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 800608e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006094:	2300      	movs	r3, #0
 8006096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 800609c:	f107 031c 	add.w	r3, r7, #28
 80060a0:	4619      	mov	r1, r3
 80060a2:	4829      	ldr	r0, [pc, #164]	; (8006148 <HAL_UART_MspInit+0x1ec>)
 80060a4:	f001 f8fc 	bl	80072a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80060a8:	4b28      	ldr	r3, [pc, #160]	; (800614c <HAL_UART_MspInit+0x1f0>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	f043 0310 	orr.w	r3, r3, #16
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c6:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_UART_MspInit+0x1f0>)
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80060cc:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060ce:	4a21      	ldr	r2, [pc, #132]	; (8006154 <HAL_UART_MspInit+0x1f8>)
 80060d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060d2:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060d8:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060da:	2200      	movs	r2, #0
 80060dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060e4:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80060f0:	4b17      	ldr	r3, [pc, #92]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060f6:	4b16      	ldr	r3, [pc, #88]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80060fc:	4814      	ldr	r0, [pc, #80]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 80060fe:	f000 fc4d 	bl	800699c <HAL_DMA_Init>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8006108:	f7fe fbd2 	bl	80048b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a10      	ldr	r2, [pc, #64]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
 8006112:	4a0f      	ldr	r2, [pc, #60]	; (8006150 <HAL_UART_MspInit+0x1f4>)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8006118:	2200      	movs	r2, #0
 800611a:	2102      	movs	r1, #2
 800611c:	2027      	movs	r0, #39	; 0x27
 800611e:	f000 fc06 	bl	800692e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006122:	2027      	movs	r0, #39	; 0x27
 8006124:	f000 fc1f 	bl	8006966 <HAL_NVIC_EnableIRQ>
}
 8006128:	bf00      	nop
 800612a:	3730      	adds	r7, #48	; 0x30
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40004400 	.word	0x40004400
 8006134:	40021000 	.word	0x40021000
 8006138:	40010800 	.word	0x40010800
 800613c:	20000918 	.word	0x20000918
 8006140:	4002006c 	.word	0x4002006c
 8006144:	40004800 	.word	0x40004800
 8006148:	40011000 	.word	0x40011000
 800614c:	40010000 	.word	0x40010000
 8006150:	2000095c 	.word	0x2000095c
 8006154:	40020030 	.word	0x40020030

08006158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800615c:	e7fe      	b.n	800615c <NMI_Handler+0x4>

0800615e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800615e:	b480      	push	{r7}
 8006160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006162:	e7fe      	b.n	8006162 <HardFault_Handler+0x4>

08006164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006168:	e7fe      	b.n	8006168 <MemManage_Handler+0x4>

0800616a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800616a:	b480      	push	{r7}
 800616c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800616e:	e7fe      	b.n	800616e <BusFault_Handler+0x4>

08006170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006174:	e7fe      	b.n	8006174 <UsageFault_Handler+0x4>

08006176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006176:	b480      	push	{r7}
 8006178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800617a:	bf00      	nop
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006182:	b480      	push	{r7}
 8006184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800618e:	b480      	push	{r7}
 8006190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800619e:	f000 faaf 	bl	8006700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80061ac:	4802      	ldr	r0, [pc, #8]	; (80061b8 <DMA1_Channel3_IRQHandler+0x10>)
 80061ae:	f000 fe0d 	bl	8006dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	2000095c 	.word	0x2000095c

080061bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80061c0:	4802      	ldr	r0, [pc, #8]	; (80061cc <DMA1_Channel6_IRQHandler+0x10>)
 80061c2:	f000 fe03 	bl	8006dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80061c6:	bf00      	nop
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000918 	.word	0x20000918

080061d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061d4:	4802      	ldr	r0, [pc, #8]	; (80061e0 <USART2_IRQHandler+0x10>)
 80061d6:	f003 fd1d 	bl	8009c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061da:	bf00      	nop
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000890 	.word	0x20000890

080061e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80061e8:	4802      	ldr	r0, [pc, #8]	; (80061f4 <USART3_IRQHandler+0x10>)
 80061ea:	f003 fd13 	bl	8009c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200008d4 	.word	0x200008d4

080061f8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 80061fc:	4808      	ldr	r0, [pc, #32]	; (8006220 <TIM6_IRQHandler+0x28>)
 80061fe:	f7fc fbbb 	bl	8002978 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8006202:	4808      	ldr	r0, [pc, #32]	; (8006224 <TIM6_IRQHandler+0x2c>)
 8006204:	f7fc fbb8 	bl	8002978 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8006208:	4807      	ldr	r0, [pc, #28]	; (8006228 <TIM6_IRQHandler+0x30>)
 800620a:	f7fc fbb5 	bl	8002978 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 800620e:	4807      	ldr	r0, [pc, #28]	; (800622c <TIM6_IRQHandler+0x34>)
 8006210:	f7fc fbb2 	bl	8002978 <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006214:	4806      	ldr	r0, [pc, #24]	; (8006230 <TIM6_IRQHandler+0x38>)
 8006216:	f002 fd57 	bl	8008cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200009a0 	.word	0x200009a0
 8006224:	200009dc 	.word	0x200009dc
 8006228:	20000a18 	.word	0x20000a18
 800622c:	20000a54 	.word	0x20000a54
 8006230:	20000800 	.word	0x20000800

08006234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
	return 1;
 8006238:	2301      	movs	r3, #1
}
 800623a:	4618      	mov	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <_kill>:

int _kill(int pid, int sig)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800624c:	f004 fa52 	bl	800a6f4 <__errno>
 8006250:	4603      	mov	r3, r0
 8006252:	2216      	movs	r2, #22
 8006254:	601a      	str	r2, [r3, #0]
	return -1;
 8006256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_exit>:

void _exit (int status)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800626a:	f04f 31ff 	mov.w	r1, #4294967295
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff ffe7 	bl	8006242 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006274:	e7fe      	b.n	8006274 <_exit+0x12>

08006276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b086      	sub	sp, #24
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e00a      	b.n	800629e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006288:	f3af 8000 	nop.w
 800628c:	4601      	mov	r1, r0
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	60ba      	str	r2, [r7, #8]
 8006294:	b2ca      	uxtb	r2, r1
 8006296:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3301      	adds	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	dbf0      	blt.n	8006288 <_read+0x12>
	}

return len;
 80062a6:	687b      	ldr	r3, [r7, #4]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e009      	b.n	80062d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	60ba      	str	r2, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	dbf1      	blt.n	80062c2 <_write+0x12>
	}
	return len;
 80062de:	687b      	ldr	r3, [r7, #4]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <_close>:

int _close(int file)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	return -1;
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr

080062fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800630e:	605a      	str	r2, [r3, #4]
	return 0;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <_isatty>:

int _isatty(int file)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	return 1;
 8006324:	2301      	movs	r3, #1
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
	return 0;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <_sbrk+0x5c>)
 8006352:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <_sbrk+0x60>)
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800635c:	4b13      	ldr	r3, [pc, #76]	; (80063ac <_sbrk+0x64>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <_sbrk+0x64>)
 8006366:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <_sbrk+0x68>)
 8006368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <_sbrk+0x64>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d207      	bcs.n	8006388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006378:	f004 f9bc 	bl	800a6f4 <__errno>
 800637c:	4603      	mov	r3, r0
 800637e:	220c      	movs	r2, #12
 8006380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006382:	f04f 33ff 	mov.w	r3, #4294967295
 8006386:	e009      	b.n	800639c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006388:	4b08      	ldr	r3, [pc, #32]	; (80063ac <_sbrk+0x64>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <_sbrk+0x64>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <_sbrk+0x64>)
 8006398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800639a:	68fb      	ldr	r3, [r7, #12]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000c000 	.word	0x2000c000
 80063a8:	00000400 	.word	0x00000400
 80063ac:	20007fd4 	.word	0x20007fd4
 80063b0:	20007ff0 	.word	0x20007ff0

080063b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <set_Beacons>:
extern Order *delivering[5];
extern uint8_t delivering_num;
extern XB_HandleTypeDef hxb;

void set_Beacons(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i < 3; i++){
 80063c6:	2300      	movs	r3, #0
 80063c8:	71fb      	strb	r3, [r7, #7]
 80063ca:	e011      	b.n	80063f0 <set_Beacons+0x30>
		GotoDestination(want_allyBeacons[i], 0);
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <set_Beacons+0x40>)
 80063d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80063d4:	4613      	mov	r3, r2
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fe fd05 	bl	8004de8 <GotoDestination>
		huansic_xb_setBeacon(&hxb);
 80063de:	4809      	ldr	r0, [pc, #36]	; (8006404 <set_Beacons+0x44>)
 80063e0:	f7fd f9c2 	bl	8003768 <huansic_xb_setBeacon>
		HAL_Delay(100);
 80063e4:	2064      	movs	r0, #100	; 0x64
 80063e6:	f000 f9a7 	bl	8006738 <HAL_Delay>
	for(i = 0;i < 3; i++){
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	3301      	adds	r3, #1
 80063ee:	71fb      	strb	r3, [r7, #7]
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d9ea      	bls.n	80063cc <set_Beacons+0xc>
	}
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000bc8 	.word	0x20000bc8
 8006404:	20000ae8 	.word	0x20000ae8

08006408 <Cal_Battery_Coord>:

void Cal_Battery_Coord(void)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	4a16      	ldr	r2, [pc, #88]	; (8006470 <Cal_Battery_Coord+0x68>)
 8006416:	217f      	movs	r1, #127	; 0x7f
 8006418:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 40;
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <Cal_Battery_Coord+0x68>)
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	2228      	movs	r2, #40	; 0x28
 8006426:	805a      	strh	r2, [r3, #2]
	seted += 1;
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	3301      	adds	r3, #1
 800642c:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <Cal_Battery_Coord+0x68>)
 8006432:	217f      	movs	r1, #127	; 0x7f
 8006434:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 100;
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <Cal_Battery_Coord+0x68>)
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	2264      	movs	r2, #100	; 0x64
 8006442:	805a      	strh	r2, [r3, #2]
	seted += 1;
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	3301      	adds	r3, #1
 8006448:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <Cal_Battery_Coord+0x68>)
 800644e:	217f      	movs	r1, #127	; 0x7f
 8006450:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 160;
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	4a06      	ldr	r2, [pc, #24]	; (8006470 <Cal_Battery_Coord+0x68>)
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	22a0      	movs	r2, #160	; 0xa0
 800645e:	805a      	strh	r2, [r3, #2]
	seted += 1;
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	3301      	adds	r3, #1
 8006464:	71fb      	strb	r3, [r7, #7]
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr
 8006470:	20000bc8 	.word	0x20000bc8

08006474 <Get_packet>:

void Get_packet(Coordinate merchant)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	GotoDestination(merchant,0);
 800647c:	2100      	movs	r1, #0
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fe fcb2 	bl	8004de8 <GotoDestination>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <Send_packet>:

void Send_packet(Coordinate consumer)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	GotoDestination(consumer,0);
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fe fca6 	bl	8004de8 <GotoDestination>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <Get_nearest_consumer>:

Coordinate Get_nearest_consumer(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 80064aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ae:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	737b      	strb	r3, [r7, #13]
	if(delivering_num == 0)
 80064b4:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <Get_nearest_consumer+0xd0>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <Get_nearest_consumer+0x22>
		return myCoord;
 80064bc:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <Get_nearest_consumer+0xd4>)
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	6810      	ldr	r0, [r2, #0]
 80064c2:	6018      	str	r0, [r3, #0]
 80064c4:	e049      	b.n	800655a <Get_nearest_consumer+0xb6>
	for(uint8_t i = 0;i < delivering_num; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	733b      	strb	r3, [r7, #12]
 80064ca:	e039      	b.n	8006540 <Get_nearest_consumer+0x9c>
	{
		if(delivering[i]->timeLimit < 7000){
 80064cc:	7b3b      	ldrb	r3, [r7, #12]
 80064ce:	4a2b      	ldr	r2, [pc, #172]	; (800657c <Get_nearest_consumer+0xd8>)
 80064d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f641 3257 	movw	r2, #6999	; 0x1b57
 80064da:	4293      	cmp	r3, r2
 80064dc:	d802      	bhi.n	80064e4 <Get_nearest_consumer+0x40>
			minindex = i;
 80064de:	7b3b      	ldrb	r3, [r7, #12]
 80064e0:	737b      	strb	r3, [r7, #13]
			break;
 80064e2:	e032      	b.n	800654a <Get_nearest_consumer+0xa6>
		}
		distance = abs(myCoord.x - delivering[i]->destCoord.x) + abs(myCoord.y - delivering[i]->destCoord.y);
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <Get_nearest_consumer+0xd4>)
 80064e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ea:	4619      	mov	r1, r3
 80064ec:	7b3b      	ldrb	r3, [r7, #12]
 80064ee:	4a23      	ldr	r2, [pc, #140]	; (800657c <Get_nearest_consumer+0xd8>)
 80064f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80064f8:	1acb      	subs	r3, r1, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bfb8      	it	lt
 80064fe:	425b      	neglt	r3, r3
 8006500:	b29a      	uxth	r2, r3
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <Get_nearest_consumer+0xd4>)
 8006504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006508:	4618      	mov	r0, r3
 800650a:	7b3b      	ldrb	r3, [r7, #12]
 800650c:	491b      	ldr	r1, [pc, #108]	; (800657c <Get_nearest_consumer+0xd8>)
 800650e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006512:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006516:	1ac3      	subs	r3, r0, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfb8      	it	lt
 800651c:	425b      	neglt	r3, r3
 800651e:	b29b      	uxth	r3, r3
 8006520:	4413      	add	r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8006526:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800652a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800652e:	429a      	cmp	r2, r3
 8006530:	da03      	bge.n	800653a <Get_nearest_consumer+0x96>
			mindis = distance;
 8006532:	897b      	ldrh	r3, [r7, #10]
 8006534:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8006536:	7b3b      	ldrb	r3, [r7, #12]
 8006538:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 800653a:	7b3b      	ldrb	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	733b      	strb	r3, [r7, #12]
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <Get_nearest_consumer+0xd0>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	7b3a      	ldrb	r2, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d3c0      	bcc.n	80064cc <Get_nearest_consumer+0x28>
		}
	}
	Coordinate nearest = delivering[minindex]->destCoord;
 800654a:	7b7b      	ldrb	r3, [r7, #13]
 800654c:	4a0b      	ldr	r2, [pc, #44]	; (800657c <Get_nearest_consumer+0xd8>)
 800654e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	603b      	str	r3, [r7, #0]
	return nearest;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	607b      	str	r3, [r7, #4]

}
 800655a:	2300      	movs	r3, #0
 800655c:	88ba      	ldrh	r2, [r7, #4]
 800655e:	f362 030f 	bfi	r3, r2, #0, #16
 8006562:	88fa      	ldrh	r2, [r7, #6]
 8006564:	f362 431f 	bfi	r3, r2, #16, #16
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000c08 	.word	0x20000c08
 8006578:	20000c0c 	.word	0x20000c0c
 800657c:	20000bf4 	.word	0x20000bf4

08006580 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8006586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658a:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8006590:	2300      	movs	r3, #0
 8006592:	733b      	strb	r3, [r7, #12]
 8006594:	e02b      	b.n	80065ee <Get_nearest_Beacon+0x6e>
	{
		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <Get_nearest_Beacon+0xa0>)
 8006598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800659c:	4619      	mov	r1, r3
 800659e:	7b3b      	ldrb	r3, [r7, #12]
 80065a0:	4a20      	ldr	r2, [pc, #128]	; (8006624 <Get_nearest_Beacon+0xa4>)
 80065a2:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 80065a6:	1acb      	subs	r3, r1, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfb8      	it	lt
 80065ac:	425b      	neglt	r3, r3
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <Get_nearest_Beacon+0xa0>)
 80065b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80065b6:	4618      	mov	r0, r3
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	491a      	ldr	r1, [pc, #104]	; (8006624 <Get_nearest_Beacon+0xa4>)
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80065c4:	1ac3      	subs	r3, r0, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfb8      	it	lt
 80065ca:	425b      	neglt	r3, r3
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 80065d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80065d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065dc:	429a      	cmp	r2, r3
 80065de:	da03      	bge.n	80065e8 <Get_nearest_Beacon+0x68>
			mindis = distance;
 80065e0:	897b      	ldrh	r3, [r7, #10]
 80065e2:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 80065e4:	7b3b      	ldrb	r3, [r7, #12]
 80065e6:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 80065e8:	7b3b      	ldrb	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	733b      	strb	r3, [r7, #12]
 80065ee:	7b3b      	ldrb	r3, [r7, #12]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d9d0      	bls.n	8006596 <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 80065f4:	7b7b      	ldrb	r3, [r7, #13]
 80065f6:	490b      	ldr	r1, [pc, #44]	; (8006624 <Get_nearest_Beacon+0xa4>)
 80065f8:	463a      	mov	r2, r7
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	6010      	str	r0, [r2, #0]
	return nearest;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	2300      	movs	r3, #0
 8006608:	88ba      	ldrh	r2, [r7, #4]
 800660a:	f362 030f 	bfi	r3, r2, #0, #16
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000c0c 	.word	0x20000c0c
 8006624:	20000bb0 	.word	0x20000bb0

08006628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006628:	480c      	ldr	r0, [pc, #48]	; (800665c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800662a:	490d      	ldr	r1, [pc, #52]	; (8006660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800662c:	4a0d      	ldr	r2, [pc, #52]	; (8006664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800662e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006630:	e002      	b.n	8006638 <LoopCopyDataInit>

08006632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006636:	3304      	adds	r3, #4

08006638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800663a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800663c:	d3f9      	bcc.n	8006632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006640:	4c0a      	ldr	r4, [pc, #40]	; (800666c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006644:	e001      	b.n	800664a <LoopFillZerobss>

08006646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006648:	3204      	adds	r2, #4

0800664a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800664a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800664c:	d3fb      	bcc.n	8006646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800664e:	f7ff feb1 	bl	80063b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006652:	f004 f867 	bl	800a724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006656:	f7fd f925 	bl	80038a4 <main>
  bx lr
 800665a:	4770      	bx	lr
  ldr r0, =_sdata
 800665c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006660:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006664:	0800d838 	.word	0x0800d838
  ldr r2, =_sbss
 8006668:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800666c:	20007fec 	.word	0x20007fec

08006670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006670:	e7fe      	b.n	8006670 <ADC1_2_IRQHandler>
	...

08006674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_Init+0x28>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a07      	ldr	r2, [pc, #28]	; (800669c <HAL_Init+0x28>)
 800667e:	f043 0310 	orr.w	r3, r3, #16
 8006682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006684:	2003      	movs	r0, #3
 8006686:	f000 f947 	bl	8006918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800668a:	200f      	movs	r0, #15
 800668c:	f000 f808 	bl	80066a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006690:	f7ff fa4e 	bl	8005b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40022000 	.word	0x40022000

080066a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066a8:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <HAL_InitTick+0x54>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <HAL_InitTick+0x58>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f95f 	bl	8006982 <HAL_SYSTICK_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e00e      	b.n	80066ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d80a      	bhi.n	80066ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066d4:	2200      	movs	r2, #0
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	f000 f927 	bl	800692e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066e0:	4a06      	ldr	r2, [pc, #24]	; (80066fc <HAL_InitTick+0x5c>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e000      	b.n	80066ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000018 	.word	0x20000018
 80066f8:	20000020 	.word	0x20000020
 80066fc:	2000001c 	.word	0x2000001c

08006700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_IncTick+0x1c>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_IncTick+0x20>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4413      	add	r3, r2
 8006710:	4a03      	ldr	r2, [pc, #12]	; (8006720 <HAL_IncTick+0x20>)
 8006712:	6013      	str	r3, [r2, #0]
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	20000020 	.word	0x20000020
 8006720:	20007fd8 	.word	0x20007fd8

08006724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return uwTick;
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <HAL_GetTick+0x10>)
 800672a:	681b      	ldr	r3, [r3, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr
 8006734:	20007fd8 	.word	0x20007fd8

08006738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006740:	f7ff fff0 	bl	8006724 <HAL_GetTick>
 8006744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d005      	beq.n	800675e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <HAL_Delay+0x44>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800675e:	bf00      	nop
 8006760:	f7ff ffe0 	bl	8006724 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	d8f7      	bhi.n	8006760 <HAL_Delay+0x28>
  {
  }
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000020 	.word	0x20000020

08006780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800679c:	4013      	ands	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067b2:	4a04      	ldr	r2, [pc, #16]	; (80067c4 <__NVIC_SetPriorityGrouping+0x44>)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	60d3      	str	r3, [r2, #12]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	e000ed00 	.word	0xe000ed00

080067c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <__NVIC_GetPriorityGrouping+0x18>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	f003 0307 	and.w	r3, r3, #7
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	e000ed00 	.word	0xe000ed00

080067e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db0b      	blt.n	800680e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	f003 021f 	and.w	r2, r3, #31
 80067fc:	4906      	ldr	r1, [pc, #24]	; (8006818 <__NVIC_EnableIRQ+0x34>)
 80067fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2001      	movs	r0, #1
 8006806:	fa00 f202 	lsl.w	r2, r0, r2
 800680a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	e000e100 	.word	0xe000e100

0800681c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682c:	2b00      	cmp	r3, #0
 800682e:	db0a      	blt.n	8006846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	490c      	ldr	r1, [pc, #48]	; (8006868 <__NVIC_SetPriority+0x4c>)
 8006836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683a:	0112      	lsls	r2, r2, #4
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	440b      	add	r3, r1
 8006840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006844:	e00a      	b.n	800685c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4908      	ldr	r1, [pc, #32]	; (800686c <__NVIC_SetPriority+0x50>)
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	3b04      	subs	r3, #4
 8006854:	0112      	lsls	r2, r2, #4
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	440b      	add	r3, r1
 800685a:	761a      	strb	r2, [r3, #24]
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	e000e100 	.word	0xe000e100
 800686c:	e000ed00 	.word	0xe000ed00

08006870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	; 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f1c3 0307 	rsb	r3, r3, #7
 800688a:	2b04      	cmp	r3, #4
 800688c:	bf28      	it	cs
 800688e:	2304      	movcs	r3, #4
 8006890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	3304      	adds	r3, #4
 8006896:	2b06      	cmp	r3, #6
 8006898:	d902      	bls.n	80068a0 <NVIC_EncodePriority+0x30>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3b03      	subs	r3, #3
 800689e:	e000      	b.n	80068a2 <NVIC_EncodePriority+0x32>
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a4:	f04f 32ff 	mov.w	r2, #4294967295
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43da      	mvns	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	401a      	ands	r2, r3
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068b8:	f04f 31ff 	mov.w	r1, #4294967295
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	43d9      	mvns	r1, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068c8:	4313      	orrs	r3, r2
         );
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3724      	adds	r7, #36	; 0x24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3b01      	subs	r3, #1
 80068e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e4:	d301      	bcc.n	80068ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068e6:	2301      	movs	r3, #1
 80068e8:	e00f      	b.n	800690a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068ea:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <SysTick_Config+0x40>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068f2:	210f      	movs	r1, #15
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	f7ff ff90 	bl	800681c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <SysTick_Config+0x40>)
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006902:	4b04      	ldr	r3, [pc, #16]	; (8006914 <SysTick_Config+0x40>)
 8006904:	2207      	movs	r2, #7
 8006906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	e000e010 	.word	0xe000e010

08006918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff ff2d 	bl	8006780 <__NVIC_SetPriorityGrouping>
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	4603      	mov	r3, r0
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006940:	f7ff ff42 	bl	80067c8 <__NVIC_GetPriorityGrouping>
 8006944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	6978      	ldr	r0, [r7, #20]
 800694c:	f7ff ff90 	bl	8006870 <NVIC_EncodePriority>
 8006950:	4602      	mov	r2, r0
 8006952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff ff5f 	bl	800681c <__NVIC_SetPriority>
}
 800695e:	bf00      	nop
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	4603      	mov	r3, r0
 800696e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff ff35 	bl	80067e4 <__NVIC_EnableIRQ>
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ffa2 	bl	80068d4 <SysTick_Config>
 8006990:	4603      	mov	r3, r0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e059      	b.n	8006a66 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	4b2d      	ldr	r3, [pc, #180]	; (8006a70 <HAL_DMA_Init+0xd4>)
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d80f      	bhi.n	80069de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b2b      	ldr	r3, [pc, #172]	; (8006a74 <HAL_DMA_Init+0xd8>)
 80069c6:	4413      	add	r3, r2
 80069c8:	4a2b      	ldr	r2, [pc, #172]	; (8006a78 <HAL_DMA_Init+0xdc>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	009a      	lsls	r2, r3, #2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a28      	ldr	r2, [pc, #160]	; (8006a7c <HAL_DMA_Init+0xe0>)
 80069da:	63da      	str	r2, [r3, #60]	; 0x3c
 80069dc:	e00e      	b.n	80069fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <HAL_DMA_Init+0xe4>)
 80069e6:	4413      	add	r3, r2
 80069e8:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <HAL_DMA_Init+0xdc>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	009a      	lsls	r2, r3, #2
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a22      	ldr	r2, [pc, #136]	; (8006a84 <HAL_DMA_Init+0xe8>)
 80069fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006a12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006a16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	40020407 	.word	0x40020407
 8006a74:	bffdfff8 	.word	0xbffdfff8
 8006a78:	cccccccd 	.word	0xcccccccd
 8006a7c:	40020000 	.word	0x40020000
 8006a80:	bffdfbf8 	.word	0xbffdfbf8
 8006a84:	40020400 	.word	0x40020400

08006a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_DMA_Start_IT+0x20>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e04a      	b.n	8006b3e <HAL_DMA_Start_IT+0xb6>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d13a      	bne.n	8006b30 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fbb0 	bl	8007244 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 020e 	orr.w	r2, r2, #14
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e00f      	b.n	8006b1e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0204 	bic.w	r2, r2, #4
 8006b0c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 020a 	orr.w	r2, r2, #10
 8006b1c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e005      	b.n	8006b3c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d008      	beq.n	8006b6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e020      	b.n	8006bb0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 020e 	bic.w	r2, r2, #14
 8006b7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0201 	bic.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	2101      	movs	r1, #1
 8006b98:	fa01 f202 	lsl.w	r2, r1, r2
 8006b9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
	...

08006bbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d005      	beq.n	8006bde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	e0d6      	b.n	8006d8c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 020e 	bic.w	r2, r2, #14
 8006bec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b64      	ldr	r3, [pc, #400]	; (8006d98 <HAL_DMA_Abort_IT+0x1dc>)
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d958      	bls.n	8006cbc <HAL_DMA_Abort_IT+0x100>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a63      	ldr	r2, [pc, #396]	; (8006d9c <HAL_DMA_Abort_IT+0x1e0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04f      	beq.n	8006cb4 <HAL_DMA_Abort_IT+0xf8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a61      	ldr	r2, [pc, #388]	; (8006da0 <HAL_DMA_Abort_IT+0x1e4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d048      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xf4>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a60      	ldr	r2, [pc, #384]	; (8006da4 <HAL_DMA_Abort_IT+0x1e8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_Abort_IT+0xee>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a5e      	ldr	r2, [pc, #376]	; (8006da8 <HAL_DMA_Abort_IT+0x1ec>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d038      	beq.n	8006ca4 <HAL_DMA_Abort_IT+0xe8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5d      	ldr	r2, [pc, #372]	; (8006dac <HAL_DMA_Abort_IT+0x1f0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d030      	beq.n	8006c9e <HAL_DMA_Abort_IT+0xe2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a5b      	ldr	r2, [pc, #364]	; (8006db0 <HAL_DMA_Abort_IT+0x1f4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d028      	beq.n	8006c98 <HAL_DMA_Abort_IT+0xdc>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a53      	ldr	r2, [pc, #332]	; (8006d98 <HAL_DMA_Abort_IT+0x1dc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d020      	beq.n	8006c92 <HAL_DMA_Abort_IT+0xd6>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a57      	ldr	r2, [pc, #348]	; (8006db4 <HAL_DMA_Abort_IT+0x1f8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d019      	beq.n	8006c8e <HAL_DMA_Abort_IT+0xd2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a56      	ldr	r2, [pc, #344]	; (8006db8 <HAL_DMA_Abort_IT+0x1fc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d012      	beq.n	8006c8a <HAL_DMA_Abort_IT+0xce>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a54      	ldr	r2, [pc, #336]	; (8006dbc <HAL_DMA_Abort_IT+0x200>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00a      	beq.n	8006c84 <HAL_DMA_Abort_IT+0xc8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a53      	ldr	r2, [pc, #332]	; (8006dc0 <HAL_DMA_Abort_IT+0x204>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d102      	bne.n	8006c7e <HAL_DMA_Abort_IT+0xc2>
 8006c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c7c:	e01b      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c82:	e018      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c88:	e015      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	e013      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e011      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c96:	e00e      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c9c:	e00b      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ca2:	e008      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ca8:	e005      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cae:	e002      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	e000      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xfa>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4a43      	ldr	r2, [pc, #268]	; (8006dc4 <HAL_DMA_Abort_IT+0x208>)
 8006cb8:	6053      	str	r3, [r2, #4]
 8006cba:	e057      	b.n	8006d6c <HAL_DMA_Abort_IT+0x1b0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a36      	ldr	r2, [pc, #216]	; (8006d9c <HAL_DMA_Abort_IT+0x1e0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d04f      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x1aa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a35      	ldr	r2, [pc, #212]	; (8006da0 <HAL_DMA_Abort_IT+0x1e4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d048      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x1a6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a33      	ldr	r2, [pc, #204]	; (8006da4 <HAL_DMA_Abort_IT+0x1e8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d040      	beq.n	8006d5c <HAL_DMA_Abort_IT+0x1a0>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a32      	ldr	r2, [pc, #200]	; (8006da8 <HAL_DMA_Abort_IT+0x1ec>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d038      	beq.n	8006d56 <HAL_DMA_Abort_IT+0x19a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a30      	ldr	r2, [pc, #192]	; (8006dac <HAL_DMA_Abort_IT+0x1f0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d030      	beq.n	8006d50 <HAL_DMA_Abort_IT+0x194>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a2f      	ldr	r2, [pc, #188]	; (8006db0 <HAL_DMA_Abort_IT+0x1f4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d028      	beq.n	8006d4a <HAL_DMA_Abort_IT+0x18e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <HAL_DMA_Abort_IT+0x1dc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d020      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x188>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <HAL_DMA_Abort_IT+0x1f8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d019      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x184>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a29      	ldr	r2, [pc, #164]	; (8006db8 <HAL_DMA_Abort_IT+0x1fc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d012      	beq.n	8006d3c <HAL_DMA_Abort_IT+0x180>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a28      	ldr	r2, [pc, #160]	; (8006dbc <HAL_DMA_Abort_IT+0x200>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00a      	beq.n	8006d36 <HAL_DMA_Abort_IT+0x17a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <HAL_DMA_Abort_IT+0x204>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d102      	bne.n	8006d30 <HAL_DMA_Abort_IT+0x174>
 8006d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d2e:	e01b      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d34:	e018      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d3a:	e015      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	e013      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e011      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d48:	e00e      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d4e:	e00b      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d54:	e008      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d5a:	e005      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d60:	e002      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d62:	2310      	movs	r3, #16
 8006d64:	e000      	b.n	8006d68 <HAL_DMA_Abort_IT+0x1ac>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <HAL_DMA_Abort_IT+0x20c>)
 8006d6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
    } 
  }
  return status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40020080 	.word	0x40020080
 8006d9c:	40020008 	.word	0x40020008
 8006da0:	4002001c 	.word	0x4002001c
 8006da4:	40020030 	.word	0x40020030
 8006da8:	40020044 	.word	0x40020044
 8006dac:	40020058 	.word	0x40020058
 8006db0:	4002006c 	.word	0x4002006c
 8006db4:	40020408 	.word	0x40020408
 8006db8:	4002041c 	.word	0x4002041c
 8006dbc:	40020430 	.word	0x40020430
 8006dc0:	40020444 	.word	0x40020444
 8006dc4:	40020400 	.word	0x40020400
 8006dc8:	40020000 	.word	0x40020000

08006dcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	2204      	movs	r2, #4
 8006dea:	409a      	lsls	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80f1 	beq.w	8006fd8 <HAL_DMA_IRQHandler+0x20c>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80eb 	beq.w	8006fd8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	4b5f      	ldr	r3, [pc, #380]	; (8006fa4 <HAL_DMA_IRQHandler+0x1d8>)
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d958      	bls.n	8006ede <HAL_DMA_IRQHandler+0x112>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a5d      	ldr	r2, [pc, #372]	; (8006fa8 <HAL_DMA_IRQHandler+0x1dc>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d04f      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x10a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a5c      	ldr	r2, [pc, #368]	; (8006fac <HAL_DMA_IRQHandler+0x1e0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d048      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x106>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5a      	ldr	r2, [pc, #360]	; (8006fb0 <HAL_DMA_IRQHandler+0x1e4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d040      	beq.n	8006ecc <HAL_DMA_IRQHandler+0x100>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a59      	ldr	r2, [pc, #356]	; (8006fb4 <HAL_DMA_IRQHandler+0x1e8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d038      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0xfa>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a57      	ldr	r2, [pc, #348]	; (8006fb8 <HAL_DMA_IRQHandler+0x1ec>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d030      	beq.n	8006ec0 <HAL_DMA_IRQHandler+0xf4>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a56      	ldr	r2, [pc, #344]	; (8006fbc <HAL_DMA_IRQHandler+0x1f0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d028      	beq.n	8006eba <HAL_DMA_IRQHandler+0xee>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a4d      	ldr	r2, [pc, #308]	; (8006fa4 <HAL_DMA_IRQHandler+0x1d8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d020      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xe8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a52      	ldr	r2, [pc, #328]	; (8006fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d019      	beq.n	8006eb0 <HAL_DMA_IRQHandler+0xe4>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a50      	ldr	r2, [pc, #320]	; (8006fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d012      	beq.n	8006eac <HAL_DMA_IRQHandler+0xe0>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a4f      	ldr	r2, [pc, #316]	; (8006fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0xda>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a4d      	ldr	r2, [pc, #308]	; (8006fcc <HAL_DMA_IRQHandler+0x200>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d102      	bne.n	8006ea0 <HAL_DMA_IRQHandler+0xd4>
 8006e9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e9e:	e01b      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ea0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ea4:	e018      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eaa:	e015      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	e013      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	e011      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006eb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006eb8:	e00e      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ebe:	e00b      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ec4:	e008      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eca:	e005      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed0:	e002      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ed2:	2340      	movs	r3, #64	; 0x40
 8006ed4:	e000      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x10c>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	4a3d      	ldr	r2, [pc, #244]	; (8006fd0 <HAL_DMA_IRQHandler+0x204>)
 8006eda:	6053      	str	r3, [r2, #4]
 8006edc:	e057      	b.n	8006f8e <HAL_DMA_IRQHandler+0x1c2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a31      	ldr	r2, [pc, #196]	; (8006fa8 <HAL_DMA_IRQHandler+0x1dc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d04f      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x1bc>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <HAL_DMA_IRQHandler+0x1e0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d048      	beq.n	8006f84 <HAL_DMA_IRQHandler+0x1b8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2e      	ldr	r2, [pc, #184]	; (8006fb0 <HAL_DMA_IRQHandler+0x1e4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d040      	beq.n	8006f7e <HAL_DMA_IRQHandler+0x1b2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a2c      	ldr	r2, [pc, #176]	; (8006fb4 <HAL_DMA_IRQHandler+0x1e8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d038      	beq.n	8006f78 <HAL_DMA_IRQHandler+0x1ac>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <HAL_DMA_IRQHandler+0x1ec>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d030      	beq.n	8006f72 <HAL_DMA_IRQHandler+0x1a6>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <HAL_DMA_IRQHandler+0x1f0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d028      	beq.n	8006f6c <HAL_DMA_IRQHandler+0x1a0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <HAL_DMA_IRQHandler+0x1d8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d020      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x19a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d019      	beq.n	8006f62 <HAL_DMA_IRQHandler+0x196>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a24      	ldr	r2, [pc, #144]	; (8006fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d012      	beq.n	8006f5e <HAL_DMA_IRQHandler+0x192>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00a      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x18c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <HAL_DMA_IRQHandler+0x200>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d102      	bne.n	8006f52 <HAL_DMA_IRQHandler+0x186>
 8006f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f50:	e01b      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f56:	e018      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5c:	e015      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f5e:	2340      	movs	r3, #64	; 0x40
 8006f60:	e013      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f62:	2304      	movs	r3, #4
 8006f64:	e011      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f6a:	e00e      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f70:	e00b      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f76:	e008      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f7c:	e005      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	e002      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	e000      	b.n	8006f8a <HAL_DMA_IRQHandler+0x1be>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	4a12      	ldr	r2, [pc, #72]	; (8006fd4 <HAL_DMA_IRQHandler+0x208>)
 8006f8c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8136 	beq.w	8007204 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006fa0:	e130      	b.n	8007204 <HAL_DMA_IRQHandler+0x438>
 8006fa2:	bf00      	nop
 8006fa4:	40020080 	.word	0x40020080
 8006fa8:	40020008 	.word	0x40020008
 8006fac:	4002001c 	.word	0x4002001c
 8006fb0:	40020030 	.word	0x40020030
 8006fb4:	40020044 	.word	0x40020044
 8006fb8:	40020058 	.word	0x40020058
 8006fbc:	4002006c 	.word	0x4002006c
 8006fc0:	40020408 	.word	0x40020408
 8006fc4:	4002041c 	.word	0x4002041c
 8006fc8:	40020430 	.word	0x40020430
 8006fcc:	40020444 	.word	0x40020444
 8006fd0:	40020400 	.word	0x40020400
 8006fd4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	2202      	movs	r2, #2
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80dd 	beq.w	80071a4 <HAL_DMA_IRQHandler+0x3d8>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80d7 	beq.w	80071a4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 020a 	bic.w	r2, r2, #10
 8007012:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	4b7b      	ldr	r3, [pc, #492]	; (8007210 <HAL_DMA_IRQHandler+0x444>)
 8007024:	429a      	cmp	r2, r3
 8007026:	d958      	bls.n	80070da <HAL_DMA_IRQHandler+0x30e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a79      	ldr	r2, [pc, #484]	; (8007214 <HAL_DMA_IRQHandler+0x448>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d04f      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x306>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a78      	ldr	r2, [pc, #480]	; (8007218 <HAL_DMA_IRQHandler+0x44c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d048      	beq.n	80070ce <HAL_DMA_IRQHandler+0x302>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a76      	ldr	r2, [pc, #472]	; (800721c <HAL_DMA_IRQHandler+0x450>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d040      	beq.n	80070c8 <HAL_DMA_IRQHandler+0x2fc>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a75      	ldr	r2, [pc, #468]	; (8007220 <HAL_DMA_IRQHandler+0x454>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d038      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x2f6>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a73      	ldr	r2, [pc, #460]	; (8007224 <HAL_DMA_IRQHandler+0x458>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d030      	beq.n	80070bc <HAL_DMA_IRQHandler+0x2f0>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a72      	ldr	r2, [pc, #456]	; (8007228 <HAL_DMA_IRQHandler+0x45c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d028      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x2ea>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a69      	ldr	r2, [pc, #420]	; (8007210 <HAL_DMA_IRQHandler+0x444>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d020      	beq.n	80070b0 <HAL_DMA_IRQHandler+0x2e4>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6e      	ldr	r2, [pc, #440]	; (800722c <HAL_DMA_IRQHandler+0x460>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d019      	beq.n	80070ac <HAL_DMA_IRQHandler+0x2e0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6c      	ldr	r2, [pc, #432]	; (8007230 <HAL_DMA_IRQHandler+0x464>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d012      	beq.n	80070a8 <HAL_DMA_IRQHandler+0x2dc>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6b      	ldr	r2, [pc, #428]	; (8007234 <HAL_DMA_IRQHandler+0x468>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00a      	beq.n	80070a2 <HAL_DMA_IRQHandler+0x2d6>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a69      	ldr	r2, [pc, #420]	; (8007238 <HAL_DMA_IRQHandler+0x46c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d102      	bne.n	800709c <HAL_DMA_IRQHandler+0x2d0>
 8007096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800709a:	e01b      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 800709c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070a0:	e018      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a6:	e015      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070a8:	2320      	movs	r3, #32
 80070aa:	e013      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e011      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070b4:	e00e      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070ba:	e00b      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070c0:	e008      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070c6:	e005      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070cc:	e002      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070ce:	2320      	movs	r3, #32
 80070d0:	e000      	b.n	80070d4 <HAL_DMA_IRQHandler+0x308>
 80070d2:	2302      	movs	r3, #2
 80070d4:	4a59      	ldr	r2, [pc, #356]	; (800723c <HAL_DMA_IRQHandler+0x470>)
 80070d6:	6053      	str	r3, [r2, #4]
 80070d8:	e057      	b.n	800718a <HAL_DMA_IRQHandler+0x3be>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a4d      	ldr	r2, [pc, #308]	; (8007214 <HAL_DMA_IRQHandler+0x448>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d04f      	beq.n	8007184 <HAL_DMA_IRQHandler+0x3b8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a4b      	ldr	r2, [pc, #300]	; (8007218 <HAL_DMA_IRQHandler+0x44c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d048      	beq.n	8007180 <HAL_DMA_IRQHandler+0x3b4>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4a      	ldr	r2, [pc, #296]	; (800721c <HAL_DMA_IRQHandler+0x450>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d040      	beq.n	800717a <HAL_DMA_IRQHandler+0x3ae>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a48      	ldr	r2, [pc, #288]	; (8007220 <HAL_DMA_IRQHandler+0x454>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d038      	beq.n	8007174 <HAL_DMA_IRQHandler+0x3a8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a47      	ldr	r2, [pc, #284]	; (8007224 <HAL_DMA_IRQHandler+0x458>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d030      	beq.n	800716e <HAL_DMA_IRQHandler+0x3a2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a45      	ldr	r2, [pc, #276]	; (8007228 <HAL_DMA_IRQHandler+0x45c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d028      	beq.n	8007168 <HAL_DMA_IRQHandler+0x39c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3d      	ldr	r2, [pc, #244]	; (8007210 <HAL_DMA_IRQHandler+0x444>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d020      	beq.n	8007162 <HAL_DMA_IRQHandler+0x396>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a41      	ldr	r2, [pc, #260]	; (800722c <HAL_DMA_IRQHandler+0x460>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d019      	beq.n	800715e <HAL_DMA_IRQHandler+0x392>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a40      	ldr	r2, [pc, #256]	; (8007230 <HAL_DMA_IRQHandler+0x464>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d012      	beq.n	800715a <HAL_DMA_IRQHandler+0x38e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3e      	ldr	r2, [pc, #248]	; (8007234 <HAL_DMA_IRQHandler+0x468>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00a      	beq.n	8007154 <HAL_DMA_IRQHandler+0x388>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3d      	ldr	r2, [pc, #244]	; (8007238 <HAL_DMA_IRQHandler+0x46c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d102      	bne.n	800714e <HAL_DMA_IRQHandler+0x382>
 8007148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800714c:	e01b      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 800714e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007152:	e018      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 8007154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007158:	e015      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 800715a:	2320      	movs	r3, #32
 800715c:	e013      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 800715e:	2302      	movs	r3, #2
 8007160:	e011      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 8007162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007166:	e00e      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 8007168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800716c:	e00b      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 800716e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007172:	e008      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 8007174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007178:	e005      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 800717a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800717e:	e002      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 8007180:	2320      	movs	r3, #32
 8007182:	e000      	b.n	8007186 <HAL_DMA_IRQHandler+0x3ba>
 8007184:	2302      	movs	r3, #2
 8007186:	4a2e      	ldr	r2, [pc, #184]	; (8007240 <HAL_DMA_IRQHandler+0x474>)
 8007188:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d034      	beq.n	8007204 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80071a2:	e02f      	b.n	8007204 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	2208      	movs	r2, #8
 80071aa:	409a      	lsls	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d028      	beq.n	8007206 <HAL_DMA_IRQHandler+0x43a>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d023      	beq.n	8007206 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 020e 	bic.w	r2, r2, #14
 80071cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	2101      	movs	r1, #1
 80071d8:	fa01 f202 	lsl.w	r2, r1, r2
 80071dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
    }
  }
  return;
 8007204:	bf00      	nop
 8007206:	bf00      	nop
}
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40020080 	.word	0x40020080
 8007214:	40020008 	.word	0x40020008
 8007218:	4002001c 	.word	0x4002001c
 800721c:	40020030 	.word	0x40020030
 8007220:	40020044 	.word	0x40020044
 8007224:	40020058 	.word	0x40020058
 8007228:	4002006c 	.word	0x4002006c
 800722c:	40020408 	.word	0x40020408
 8007230:	4002041c 	.word	0x4002041c
 8007234:	40020430 	.word	0x40020430
 8007238:	40020444 	.word	0x40020444
 800723c:	40020400 	.word	0x40020400
 8007240:	40020000 	.word	0x40020000

08007244 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	2101      	movs	r1, #1
 800725c:	fa01 f202 	lsl.w	r2, r1, r2
 8007260:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b10      	cmp	r3, #16
 8007270:	d108      	bne.n	8007284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007282:	e007      	b.n	8007294 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b08b      	sub	sp, #44	; 0x2c
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80072ae:	2300      	movs	r3, #0
 80072b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072b2:	e179      	b.n	80075a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80072b4:	2201      	movs	r2, #1
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	4013      	ands	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	f040 8168 	bne.w	80075a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4a96      	ldr	r2, [pc, #600]	; (8007530 <HAL_GPIO_Init+0x290>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d05e      	beq.n	800739a <HAL_GPIO_Init+0xfa>
 80072dc:	4a94      	ldr	r2, [pc, #592]	; (8007530 <HAL_GPIO_Init+0x290>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d875      	bhi.n	80073ce <HAL_GPIO_Init+0x12e>
 80072e2:	4a94      	ldr	r2, [pc, #592]	; (8007534 <HAL_GPIO_Init+0x294>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d058      	beq.n	800739a <HAL_GPIO_Init+0xfa>
 80072e8:	4a92      	ldr	r2, [pc, #584]	; (8007534 <HAL_GPIO_Init+0x294>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d86f      	bhi.n	80073ce <HAL_GPIO_Init+0x12e>
 80072ee:	4a92      	ldr	r2, [pc, #584]	; (8007538 <HAL_GPIO_Init+0x298>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d052      	beq.n	800739a <HAL_GPIO_Init+0xfa>
 80072f4:	4a90      	ldr	r2, [pc, #576]	; (8007538 <HAL_GPIO_Init+0x298>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d869      	bhi.n	80073ce <HAL_GPIO_Init+0x12e>
 80072fa:	4a90      	ldr	r2, [pc, #576]	; (800753c <HAL_GPIO_Init+0x29c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d04c      	beq.n	800739a <HAL_GPIO_Init+0xfa>
 8007300:	4a8e      	ldr	r2, [pc, #568]	; (800753c <HAL_GPIO_Init+0x29c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d863      	bhi.n	80073ce <HAL_GPIO_Init+0x12e>
 8007306:	4a8e      	ldr	r2, [pc, #568]	; (8007540 <HAL_GPIO_Init+0x2a0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d046      	beq.n	800739a <HAL_GPIO_Init+0xfa>
 800730c:	4a8c      	ldr	r2, [pc, #560]	; (8007540 <HAL_GPIO_Init+0x2a0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d85d      	bhi.n	80073ce <HAL_GPIO_Init+0x12e>
 8007312:	2b12      	cmp	r3, #18
 8007314:	d82a      	bhi.n	800736c <HAL_GPIO_Init+0xcc>
 8007316:	2b12      	cmp	r3, #18
 8007318:	d859      	bhi.n	80073ce <HAL_GPIO_Init+0x12e>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_GPIO_Init+0x80>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	0800739b 	.word	0x0800739b
 8007324:	08007375 	.word	0x08007375
 8007328:	08007387 	.word	0x08007387
 800732c:	080073c9 	.word	0x080073c9
 8007330:	080073cf 	.word	0x080073cf
 8007334:	080073cf 	.word	0x080073cf
 8007338:	080073cf 	.word	0x080073cf
 800733c:	080073cf 	.word	0x080073cf
 8007340:	080073cf 	.word	0x080073cf
 8007344:	080073cf 	.word	0x080073cf
 8007348:	080073cf 	.word	0x080073cf
 800734c:	080073cf 	.word	0x080073cf
 8007350:	080073cf 	.word	0x080073cf
 8007354:	080073cf 	.word	0x080073cf
 8007358:	080073cf 	.word	0x080073cf
 800735c:	080073cf 	.word	0x080073cf
 8007360:	080073cf 	.word	0x080073cf
 8007364:	0800737d 	.word	0x0800737d
 8007368:	08007391 	.word	0x08007391
 800736c:	4a75      	ldr	r2, [pc, #468]	; (8007544 <HAL_GPIO_Init+0x2a4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007372:	e02c      	b.n	80073ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	623b      	str	r3, [r7, #32]
          break;
 800737a:	e029      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	3304      	adds	r3, #4
 8007382:	623b      	str	r3, [r7, #32]
          break;
 8007384:	e024      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	3308      	adds	r3, #8
 800738c:	623b      	str	r3, [r7, #32]
          break;
 800738e:	e01f      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	330c      	adds	r3, #12
 8007396:	623b      	str	r3, [r7, #32]
          break;
 8007398:	e01a      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80073a2:	2304      	movs	r3, #4
 80073a4:	623b      	str	r3, [r7, #32]
          break;
 80073a6:	e013      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d105      	bne.n	80073bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80073b0:	2308      	movs	r3, #8
 80073b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	611a      	str	r2, [r3, #16]
          break;
 80073ba:	e009      	b.n	80073d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80073bc:	2308      	movs	r3, #8
 80073be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	615a      	str	r2, [r3, #20]
          break;
 80073c6:	e003      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80073c8:	2300      	movs	r3, #0
 80073ca:	623b      	str	r3, [r7, #32]
          break;
 80073cc:	e000      	b.n	80073d0 <HAL_GPIO_Init+0x130>
          break;
 80073ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d801      	bhi.n	80073da <HAL_GPIO_Init+0x13a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	e001      	b.n	80073de <HAL_GPIO_Init+0x13e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2bff      	cmp	r3, #255	; 0xff
 80073e4:	d802      	bhi.n	80073ec <HAL_GPIO_Init+0x14c>
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	e002      	b.n	80073f2 <HAL_GPIO_Init+0x152>
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	3b08      	subs	r3, #8
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	210f      	movs	r1, #15
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	6a39      	ldr	r1, [r7, #32]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	fa01 f303 	lsl.w	r3, r1, r3
 800740c:	431a      	orrs	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80c1 	beq.w	80075a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007420:	4b49      	ldr	r3, [pc, #292]	; (8007548 <HAL_GPIO_Init+0x2a8>)
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	4a48      	ldr	r2, [pc, #288]	; (8007548 <HAL_GPIO_Init+0x2a8>)
 8007426:	f043 0301 	orr.w	r3, r3, #1
 800742a:	6193      	str	r3, [r2, #24]
 800742c:	4b46      	ldr	r3, [pc, #280]	; (8007548 <HAL_GPIO_Init+0x2a8>)
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007438:	4a44      	ldr	r2, [pc, #272]	; (800754c <HAL_GPIO_Init+0x2ac>)
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	089b      	lsrs	r3, r3, #2
 800743e:	3302      	adds	r3, #2
 8007440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	220f      	movs	r2, #15
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4013      	ands	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3c      	ldr	r2, [pc, #240]	; (8007550 <HAL_GPIO_Init+0x2b0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d01f      	beq.n	80074a4 <HAL_GPIO_Init+0x204>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a3b      	ldr	r2, [pc, #236]	; (8007554 <HAL_GPIO_Init+0x2b4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d019      	beq.n	80074a0 <HAL_GPIO_Init+0x200>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a3a      	ldr	r2, [pc, #232]	; (8007558 <HAL_GPIO_Init+0x2b8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <HAL_GPIO_Init+0x1fc>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a39      	ldr	r2, [pc, #228]	; (800755c <HAL_GPIO_Init+0x2bc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00d      	beq.n	8007498 <HAL_GPIO_Init+0x1f8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a38      	ldr	r2, [pc, #224]	; (8007560 <HAL_GPIO_Init+0x2c0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <HAL_GPIO_Init+0x1f4>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a37      	ldr	r2, [pc, #220]	; (8007564 <HAL_GPIO_Init+0x2c4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d101      	bne.n	8007490 <HAL_GPIO_Init+0x1f0>
 800748c:	2305      	movs	r3, #5
 800748e:	e00a      	b.n	80074a6 <HAL_GPIO_Init+0x206>
 8007490:	2306      	movs	r3, #6
 8007492:	e008      	b.n	80074a6 <HAL_GPIO_Init+0x206>
 8007494:	2304      	movs	r3, #4
 8007496:	e006      	b.n	80074a6 <HAL_GPIO_Init+0x206>
 8007498:	2303      	movs	r3, #3
 800749a:	e004      	b.n	80074a6 <HAL_GPIO_Init+0x206>
 800749c:	2302      	movs	r3, #2
 800749e:	e002      	b.n	80074a6 <HAL_GPIO_Init+0x206>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e000      	b.n	80074a6 <HAL_GPIO_Init+0x206>
 80074a4:	2300      	movs	r3, #0
 80074a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a8:	f002 0203 	and.w	r2, r2, #3
 80074ac:	0092      	lsls	r2, r2, #2
 80074ae:	4093      	lsls	r3, r2
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80074b6:	4925      	ldr	r1, [pc, #148]	; (800754c <HAL_GPIO_Init+0x2ac>)
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	3302      	adds	r3, #2
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80074d0:	4b25      	ldr	r3, [pc, #148]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	4924      	ldr	r1, [pc, #144]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	4313      	orrs	r3, r2
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	e006      	b.n	80074ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80074de:	4b22      	ldr	r3, [pc, #136]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	4920      	ldr	r1, [pc, #128]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80074f8:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	491a      	ldr	r1, [pc, #104]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	4313      	orrs	r3, r2
 8007502:	604b      	str	r3, [r1, #4]
 8007504:	e006      	b.n	8007514 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007506:	4b18      	ldr	r3, [pc, #96]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	43db      	mvns	r3, r3
 800750e:	4916      	ldr	r1, [pc, #88]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 8007510:	4013      	ands	r3, r2
 8007512:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d025      	beq.n	800756c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	4910      	ldr	r1, [pc, #64]	; (8007568 <HAL_GPIO_Init+0x2c8>)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	4313      	orrs	r3, r2
 800752a:	608b      	str	r3, [r1, #8]
 800752c:	e025      	b.n	800757a <HAL_GPIO_Init+0x2da>
 800752e:	bf00      	nop
 8007530:	10320000 	.word	0x10320000
 8007534:	10310000 	.word	0x10310000
 8007538:	10220000 	.word	0x10220000
 800753c:	10210000 	.word	0x10210000
 8007540:	10120000 	.word	0x10120000
 8007544:	10110000 	.word	0x10110000
 8007548:	40021000 	.word	0x40021000
 800754c:	40010000 	.word	0x40010000
 8007550:	40010800 	.word	0x40010800
 8007554:	40010c00 	.word	0x40010c00
 8007558:	40011000 	.word	0x40011000
 800755c:	40011400 	.word	0x40011400
 8007560:	40011800 	.word	0x40011800
 8007564:	40011c00 	.word	0x40011c00
 8007568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800756c:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <HAL_GPIO_Init+0x324>)
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	43db      	mvns	r3, r3
 8007574:	4913      	ldr	r1, [pc, #76]	; (80075c4 <HAL_GPIO_Init+0x324>)
 8007576:	4013      	ands	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d006      	beq.n	8007594 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <HAL_GPIO_Init+0x324>)
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	490e      	ldr	r1, [pc, #56]	; (80075c4 <HAL_GPIO_Init+0x324>)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	4313      	orrs	r3, r2
 8007590:	60cb      	str	r3, [r1, #12]
 8007592:	e006      	b.n	80075a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007594:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <HAL_GPIO_Init+0x324>)
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	43db      	mvns	r3, r3
 800759c:	4909      	ldr	r1, [pc, #36]	; (80075c4 <HAL_GPIO_Init+0x324>)
 800759e:	4013      	ands	r3, r2
 80075a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	3301      	adds	r3, #1
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f47f ae7e 	bne.w	80072b4 <HAL_GPIO_Init+0x14>
  }
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	372c      	adds	r7, #44	; 0x2c
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr
 80075c4:	40010400 	.word	0x40010400

080075c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	807b      	strh	r3, [r7, #2]
 80075d4:	4613      	mov	r3, r2
 80075d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075d8:	787b      	ldrb	r3, [r7, #1]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075de:	887a      	ldrh	r2, [r7, #2]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80075e4:	e003      	b.n	80075ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80075e6:	887b      	ldrh	r3, [r7, #2]
 80075e8:	041a      	lsls	r2, r3, #16
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	611a      	str	r2, [r3, #16]
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e12b      	b.n	8007862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fe fab8 	bl	8005b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800764a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800765a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800765c:	f000 fffc 	bl	8008658 <HAL_RCC_GetPCLK1Freq>
 8007660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4a81      	ldr	r2, [pc, #516]	; (800786c <HAL_I2C_Init+0x274>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d807      	bhi.n	800767c <HAL_I2C_Init+0x84>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a80      	ldr	r2, [pc, #512]	; (8007870 <HAL_I2C_Init+0x278>)
 8007670:	4293      	cmp	r3, r2
 8007672:	bf94      	ite	ls
 8007674:	2301      	movls	r3, #1
 8007676:	2300      	movhi	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e006      	b.n	800768a <HAL_I2C_Init+0x92>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a7d      	ldr	r2, [pc, #500]	; (8007874 <HAL_I2C_Init+0x27c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	bf94      	ite	ls
 8007684:	2301      	movls	r3, #1
 8007686:	2300      	movhi	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e0e7      	b.n	8007862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4a78      	ldr	r2, [pc, #480]	; (8007878 <HAL_I2C_Init+0x280>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	0c9b      	lsrs	r3, r3, #18
 800769c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4a6a      	ldr	r2, [pc, #424]	; (800786c <HAL_I2C_Init+0x274>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d802      	bhi.n	80076cc <HAL_I2C_Init+0xd4>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	3301      	adds	r3, #1
 80076ca:	e009      	b.n	80076e0 <HAL_I2C_Init+0xe8>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
 80076d6:	4a69      	ldr	r2, [pc, #420]	; (800787c <HAL_I2C_Init+0x284>)
 80076d8:	fba2 2303 	umull	r2, r3, r2, r3
 80076dc:	099b      	lsrs	r3, r3, #6
 80076de:	3301      	adds	r3, #1
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	430b      	orrs	r3, r1
 80076e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80076f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	495c      	ldr	r1, [pc, #368]	; (800786c <HAL_I2C_Init+0x274>)
 80076fc:	428b      	cmp	r3, r1
 80076fe:	d819      	bhi.n	8007734 <HAL_I2C_Init+0x13c>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	1e59      	subs	r1, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	fbb1 f3f3 	udiv	r3, r1, r3
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007714:	400b      	ands	r3, r1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <HAL_I2C_Init+0x138>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1e59      	subs	r1, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	fbb1 f3f3 	udiv	r3, r1, r3
 8007728:	3301      	adds	r3, #1
 800772a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800772e:	e051      	b.n	80077d4 <HAL_I2C_Init+0x1dc>
 8007730:	2304      	movs	r3, #4
 8007732:	e04f      	b.n	80077d4 <HAL_I2C_Init+0x1dc>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d111      	bne.n	8007760 <HAL_I2C_Init+0x168>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	1e58      	subs	r0, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6859      	ldr	r1, [r3, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	440b      	add	r3, r1
 800774a:	fbb0 f3f3 	udiv	r3, r0, r3
 800774e:	3301      	adds	r3, #1
 8007750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e012      	b.n	8007786 <HAL_I2C_Init+0x18e>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	1e58      	subs	r0, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6859      	ldr	r1, [r3, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	0099      	lsls	r1, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	fbb0 f3f3 	udiv	r3, r0, r3
 8007776:	3301      	adds	r3, #1
 8007778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800777c:	2b00      	cmp	r3, #0
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_I2C_Init+0x196>
 800778a:	2301      	movs	r3, #1
 800778c:	e022      	b.n	80077d4 <HAL_I2C_Init+0x1dc>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10e      	bne.n	80077b4 <HAL_I2C_Init+0x1bc>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	1e58      	subs	r0, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6859      	ldr	r1, [r3, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	440b      	add	r3, r1
 80077a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80077a8:	3301      	adds	r3, #1
 80077aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b2:	e00f      	b.n	80077d4 <HAL_I2C_Init+0x1dc>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1e58      	subs	r0, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6859      	ldr	r1, [r3, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	0099      	lsls	r1, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ca:	3301      	adds	r3, #1
 80077cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	6809      	ldr	r1, [r1, #0]
 80077d8:	4313      	orrs	r3, r2
 80077da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69da      	ldr	r2, [r3, #28]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6911      	ldr	r1, [r2, #16]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68d2      	ldr	r2, [r2, #12]
 800780e:	4311      	orrs	r1, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	430b      	orrs	r3, r1
 8007816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	695a      	ldr	r2, [r3, #20]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	000186a0 	.word	0x000186a0
 8007870:	001e847f 	.word	0x001e847f
 8007874:	003d08ff 	.word	0x003d08ff
 8007878:	431bde83 	.word	0x431bde83
 800787c:	10624dd3 	.word	0x10624dd3

08007880 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	461a      	mov	r2, r3
 800788e:	4603      	mov	r3, r0
 8007890:	817b      	strh	r3, [r7, #10]
 8007892:	460b      	mov	r3, r1
 8007894:	813b      	strh	r3, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800789a:	f7fe ff43 	bl	8006724 <HAL_GetTick>
 800789e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	f040 80d9 	bne.w	8007a60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	2319      	movs	r3, #25
 80078b4:	2201      	movs	r2, #1
 80078b6:	496d      	ldr	r1, [pc, #436]	; (8007a6c <HAL_I2C_Mem_Write+0x1ec>)
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f971 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0cc      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_I2C_Mem_Write+0x56>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e0c5      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d007      	beq.n	80078fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800790a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2221      	movs	r2, #33	; 0x21
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2240      	movs	r2, #64	; 0x40
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a3a      	ldr	r2, [r7, #32]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a4d      	ldr	r2, [pc, #308]	; (8007a70 <HAL_I2C_Mem_Write+0x1f0>)
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800793e:	88f8      	ldrh	r0, [r7, #6]
 8007940:	893a      	ldrh	r2, [r7, #8]
 8007942:	8979      	ldrh	r1, [r7, #10]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4603      	mov	r3, r0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f890 	bl	8007a74 <I2C_RequestMemoryWrite>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d052      	beq.n	8007a00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e081      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f9f2 	bl	8007d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b04      	cmp	r3, #4
 8007974:	d107      	bne.n	8007986 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e06b      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d11b      	bne.n	8007a00 <HAL_I2C_Mem_Write+0x180>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d017      	beq.n	8007a00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1aa      	bne.n	800795e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f9de 	bl	8007dce <I2C_WaitOnBTFFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d107      	bne.n	8007a30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e016      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	00100002 	.word	0x00100002
 8007a70:	ffff0000 	.word	0xffff0000

08007a74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	817b      	strh	r3, [r7, #10]
 8007a86:	460b      	mov	r3, r1
 8007a88:	813b      	strh	r3, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f878 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00d      	beq.n	8007ad2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac4:	d103      	bne.n	8007ace <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e05f      	b.n	8007b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ad2:	897b      	ldrh	r3, [r7, #10]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	492d      	ldr	r1, [pc, #180]	; (8007b9c <I2C_RequestMemoryWrite+0x128>)
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f8b0 	bl	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e04c      	b.n	8007b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b10:	6a39      	ldr	r1, [r7, #32]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f91a 	bl	8007d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00d      	beq.n	8007b3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2b04      	cmp	r3, #4
 8007b24:	d107      	bne.n	8007b36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e02b      	b.n	8007b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d105      	bne.n	8007b4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b40:	893b      	ldrh	r3, [r7, #8]
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	611a      	str	r2, [r3, #16]
 8007b4a:	e021      	b.n	8007b90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	0a1b      	lsrs	r3, r3, #8
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5c:	6a39      	ldr	r1, [r7, #32]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f8f4 	bl	8007d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d107      	bne.n	8007b82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e005      	b.n	8007b92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b86:	893b      	ldrh	r3, [r7, #8]
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	00010002 	.word	0x00010002

08007ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bb0:	e025      	b.n	8007bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d021      	beq.n	8007bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bba:	f7fe fdb3 	bl	8006724 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d116      	bne.n	8007bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0220 	orr.w	r2, r3, #32
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e023      	b.n	8007c46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10d      	bne.n	8007c24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	43da      	mvns	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4013      	ands	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf0c      	ite	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	2300      	movne	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	e00c      	b.n	8007c3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	43da      	mvns	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d0b6      	beq.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c5c:	e051      	b.n	8007d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6c:	d123      	bne.n	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	f043 0204 	orr.w	r2, r3, #4
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e046      	b.n	8007d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d021      	beq.n	8007d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cbe:	f7fe fd31 	bl	8006724 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d302      	bcc.n	8007cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d116      	bne.n	8007d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f043 0220 	orr.w	r2, r3, #32
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e020      	b.n	8007d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10c      	bne.n	8007d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	43da      	mvns	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4013      	ands	r3, r2
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	2300      	moveq	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	e00b      	b.n	8007d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	43da      	mvns	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4013      	ands	r3, r2
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf14      	ite	ne
 8007d38:	2301      	movne	r3, #1
 8007d3a:	2300      	moveq	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d18d      	bne.n	8007c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d58:	e02d      	b.n	8007db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f878 	bl	8007e50 <I2C_IsAcknowledgeFailed>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e02d      	b.n	8007dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d021      	beq.n	8007db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d72:	f7fe fcd7 	bl	8006724 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d302      	bcc.n	8007d88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d116      	bne.n	8007db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	f043 0220 	orr.w	r2, r3, #32
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e007      	b.n	8007dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc0:	2b80      	cmp	r3, #128	; 0x80
 8007dc2:	d1ca      	bne.n	8007d5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dda:	e02d      	b.n	8007e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f837 	bl	8007e50 <I2C_IsAcknowledgeFailed>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e02d      	b.n	8007e48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d021      	beq.n	8007e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df4:	f7fe fc96 	bl	8006724 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d302      	bcc.n	8007e0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d116      	bne.n	8007e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	f043 0220 	orr.w	r2, r3, #32
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e007      	b.n	8007e48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d1ca      	bne.n	8007ddc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e66:	d11b      	bne.n	8007ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	f043 0204 	orr.w	r2, r3, #4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e272      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8087 	beq.w	8007fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ecc:	4b92      	ldr	r3, [pc, #584]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f003 030c 	and.w	r3, r3, #12
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d00c      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ed8:	4b8f      	ldr	r3, [pc, #572]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f003 030c 	and.w	r3, r3, #12
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d112      	bne.n	8007f0a <HAL_RCC_OscConfig+0x5e>
 8007ee4:	4b8c      	ldr	r3, [pc, #560]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d10b      	bne.n	8007f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef2:	4b89      	ldr	r3, [pc, #548]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d06c      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x12c>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d168      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e24c      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f12:	d106      	bne.n	8007f22 <HAL_RCC_OscConfig+0x76>
 8007f14:	4b80      	ldr	r3, [pc, #512]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a7f      	ldr	r2, [pc, #508]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	e02e      	b.n	8007f80 <HAL_RCC_OscConfig+0xd4>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10c      	bne.n	8007f44 <HAL_RCC_OscConfig+0x98>
 8007f2a:	4b7b      	ldr	r3, [pc, #492]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a7a      	ldr	r2, [pc, #488]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	4b78      	ldr	r3, [pc, #480]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a77      	ldr	r2, [pc, #476]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e01d      	b.n	8007f80 <HAL_RCC_OscConfig+0xd4>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f4c:	d10c      	bne.n	8007f68 <HAL_RCC_OscConfig+0xbc>
 8007f4e:	4b72      	ldr	r3, [pc, #456]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a71      	ldr	r2, [pc, #452]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	4b6f      	ldr	r3, [pc, #444]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a6e      	ldr	r2, [pc, #440]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e00b      	b.n	8007f80 <HAL_RCC_OscConfig+0xd4>
 8007f68:	4b6b      	ldr	r3, [pc, #428]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a6a      	ldr	r2, [pc, #424]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	4b68      	ldr	r3, [pc, #416]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a67      	ldr	r2, [pc, #412]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d013      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f88:	f7fe fbcc 	bl	8006724 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f90:	f7fe fbc8 	bl	8006724 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b64      	cmp	r3, #100	; 0x64
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e200      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa2:	4b5d      	ldr	r3, [pc, #372]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HAL_RCC_OscConfig+0xe4>
 8007fae:	e014      	b.n	8007fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb0:	f7fe fbb8 	bl	8006724 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb8:	f7fe fbb4 	bl	8006724 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b64      	cmp	r3, #100	; 0x64
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e1ec      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fca:	4b53      	ldr	r3, [pc, #332]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f0      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x10c>
 8007fd6:	e000      	b.n	8007fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d063      	beq.n	80080ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fe6:	4b4c      	ldr	r3, [pc, #304]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f003 030c 	and.w	r3, r3, #12
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007ff2:	4b49      	ldr	r3, [pc, #292]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f003 030c 	and.w	r3, r3, #12
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d11c      	bne.n	8008038 <HAL_RCC_OscConfig+0x18c>
 8007ffe:	4b46      	ldr	r3, [pc, #280]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d116      	bne.n	8008038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800800a:	4b43      	ldr	r3, [pc, #268]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_RCC_OscConfig+0x176>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d001      	beq.n	8008022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e1c0      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008022:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	4939      	ldr	r1, [pc, #228]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008036:	e03a      	b.n	80080ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d020      	beq.n	8008082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008040:	4b36      	ldr	r3, [pc, #216]	; (800811c <HAL_RCC_OscConfig+0x270>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008046:	f7fe fb6d 	bl	8006724 <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800804c:	e008      	b.n	8008060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800804e:	f7fe fb69 	bl	8006724 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e1a1      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008060:	4b2d      	ldr	r3, [pc, #180]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0f0      	beq.n	800804e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800806c:	4b2a      	ldr	r3, [pc, #168]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	4927      	ldr	r1, [pc, #156]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]
 8008080:	e015      	b.n	80080ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008082:	4b26      	ldr	r3, [pc, #152]	; (800811c <HAL_RCC_OscConfig+0x270>)
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008088:	f7fe fb4c 	bl	8006724 <HAL_GetTick>
 800808c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800808e:	e008      	b.n	80080a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008090:	f7fe fb48 	bl	8006724 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e180      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080a2:	4b1d      	ldr	r3, [pc, #116]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f0      	bne.n	8008090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d03a      	beq.n	8008130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d019      	beq.n	80080f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c2:	4b17      	ldr	r3, [pc, #92]	; (8008120 <HAL_RCC_OscConfig+0x274>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080c8:	f7fe fb2c 	bl	8006724 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d0:	f7fe fb28 	bl	8006724 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e160      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <HAL_RCC_OscConfig+0x26c>)
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80080ee:	2001      	movs	r0, #1
 80080f0:	f000 fada 	bl	80086a8 <RCC_Delay>
 80080f4:	e01c      	b.n	8008130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080f6:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <HAL_RCC_OscConfig+0x274>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080fc:	f7fe fb12 	bl	8006724 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008102:	e00f      	b.n	8008124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008104:	f7fe fb0e 	bl	8006724 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d908      	bls.n	8008124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e146      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
 8008116:	bf00      	nop
 8008118:	40021000 	.word	0x40021000
 800811c:	42420000 	.word	0x42420000
 8008120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008124:	4b92      	ldr	r3, [pc, #584]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e9      	bne.n	8008104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80a6 	beq.w	800828a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008142:	4b8b      	ldr	r3, [pc, #556]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10d      	bne.n	800816a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800814e:	4b88      	ldr	r3, [pc, #544]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	4a87      	ldr	r2, [pc, #540]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	61d3      	str	r3, [r2, #28]
 800815a:	4b85      	ldr	r3, [pc, #532]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008162:	60bb      	str	r3, [r7, #8]
 8008164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008166:	2301      	movs	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816a:	4b82      	ldr	r3, [pc, #520]	; (8008374 <HAL_RCC_OscConfig+0x4c8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d118      	bne.n	80081a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008176:	4b7f      	ldr	r3, [pc, #508]	; (8008374 <HAL_RCC_OscConfig+0x4c8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a7e      	ldr	r2, [pc, #504]	; (8008374 <HAL_RCC_OscConfig+0x4c8>)
 800817c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008182:	f7fe facf 	bl	8006724 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800818a:	f7fe facb 	bl	8006724 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b64      	cmp	r3, #100	; 0x64
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e103      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800819c:	4b75      	ldr	r3, [pc, #468]	; (8008374 <HAL_RCC_OscConfig+0x4c8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d106      	bne.n	80081be <HAL_RCC_OscConfig+0x312>
 80081b0:	4b6f      	ldr	r3, [pc, #444]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	4a6e      	ldr	r2, [pc, #440]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	6213      	str	r3, [r2, #32]
 80081bc:	e02d      	b.n	800821a <HAL_RCC_OscConfig+0x36e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10c      	bne.n	80081e0 <HAL_RCC_OscConfig+0x334>
 80081c6:	4b6a      	ldr	r3, [pc, #424]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	4a69      	ldr	r2, [pc, #420]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	6213      	str	r3, [r2, #32]
 80081d2:	4b67      	ldr	r3, [pc, #412]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	4a66      	ldr	r2, [pc, #408]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081d8:	f023 0304 	bic.w	r3, r3, #4
 80081dc:	6213      	str	r3, [r2, #32]
 80081de:	e01c      	b.n	800821a <HAL_RCC_OscConfig+0x36e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b05      	cmp	r3, #5
 80081e6:	d10c      	bne.n	8008202 <HAL_RCC_OscConfig+0x356>
 80081e8:	4b61      	ldr	r3, [pc, #388]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	4a60      	ldr	r2, [pc, #384]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081ee:	f043 0304 	orr.w	r3, r3, #4
 80081f2:	6213      	str	r3, [r2, #32]
 80081f4:	4b5e      	ldr	r3, [pc, #376]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	4a5d      	ldr	r2, [pc, #372]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6213      	str	r3, [r2, #32]
 8008200:	e00b      	b.n	800821a <HAL_RCC_OscConfig+0x36e>
 8008202:	4b5b      	ldr	r3, [pc, #364]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	4a5a      	ldr	r2, [pc, #360]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	6213      	str	r3, [r2, #32]
 800820e:	4b58      	ldr	r3, [pc, #352]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	4a57      	ldr	r2, [pc, #348]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008214:	f023 0304 	bic.w	r3, r3, #4
 8008218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d015      	beq.n	800824e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008222:	f7fe fa7f 	bl	8006724 <HAL_GetTick>
 8008226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008228:	e00a      	b.n	8008240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822a:	f7fe fa7b 	bl	8006724 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	f241 3288 	movw	r2, #5000	; 0x1388
 8008238:	4293      	cmp	r3, r2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e0b1      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008240:	4b4b      	ldr	r3, [pc, #300]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0ee      	beq.n	800822a <HAL_RCC_OscConfig+0x37e>
 800824c:	e014      	b.n	8008278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800824e:	f7fe fa69 	bl	8006724 <HAL_GetTick>
 8008252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008254:	e00a      	b.n	800826c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008256:	f7fe fa65 	bl	8006724 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	f241 3288 	movw	r2, #5000	; 0x1388
 8008264:	4293      	cmp	r3, r2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e09b      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800826c:	4b40      	ldr	r3, [pc, #256]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1ee      	bne.n	8008256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d105      	bne.n	800828a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800827e:	4b3c      	ldr	r3, [pc, #240]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	4a3b      	ldr	r2, [pc, #236]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8087 	beq.w	80083a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008294:	4b36      	ldr	r3, [pc, #216]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f003 030c 	and.w	r3, r3, #12
 800829c:	2b08      	cmp	r3, #8
 800829e:	d061      	beq.n	8008364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d146      	bne.n	8008336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a8:	4b33      	ldr	r3, [pc, #204]	; (8008378 <HAL_RCC_OscConfig+0x4cc>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ae:	f7fe fa39 	bl	8006724 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b6:	f7fe fa35 	bl	8006724 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e06d      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082c8:	4b29      	ldr	r3, [pc, #164]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f0      	bne.n	80082b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082dc:	d108      	bne.n	80082f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80082de:	4b24      	ldr	r3, [pc, #144]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	4921      	ldr	r1, [pc, #132]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f0:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a19      	ldr	r1, [r3, #32]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	430b      	orrs	r3, r1
 8008302:	491b      	ldr	r1, [pc, #108]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008304:	4313      	orrs	r3, r2
 8008306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008308:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <HAL_RCC_OscConfig+0x4cc>)
 800830a:	2201      	movs	r2, #1
 800830c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830e:	f7fe fa09 	bl	8006724 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008316:	f7fe fa05 	bl	8006724 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e03d      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <HAL_RCC_OscConfig+0x46a>
 8008334:	e035      	b.n	80083a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008336:	4b10      	ldr	r3, [pc, #64]	; (8008378 <HAL_RCC_OscConfig+0x4cc>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800833c:	f7fe f9f2 	bl	8006724 <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008344:	f7fe f9ee 	bl	8006724 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e026      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <HAL_RCC_OscConfig+0x4c4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f0      	bne.n	8008344 <HAL_RCC_OscConfig+0x498>
 8008362:	e01e      	b.n	80083a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d107      	bne.n	800837c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e019      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
 8008370:	40021000 	.word	0x40021000
 8008374:	40007000 	.word	0x40007000
 8008378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <HAL_RCC_OscConfig+0x500>)
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	429a      	cmp	r2, r3
 800838e:	d106      	bne.n	800839e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800839a:	429a      	cmp	r2, r3
 800839c:	d001      	beq.n	80083a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40021000 	.word	0x40021000

080083b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0d0      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083c4:	4b6a      	ldr	r3, [pc, #424]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d910      	bls.n	80083f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d2:	4b67      	ldr	r3, [pc, #412]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f023 0207 	bic.w	r2, r3, #7
 80083da:	4965      	ldr	r1, [pc, #404]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	4313      	orrs	r3, r2
 80083e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083e2:	4b63      	ldr	r3, [pc, #396]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d001      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e0b8      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d020      	beq.n	8008442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800840c:	4b59      	ldr	r3, [pc, #356]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4a58      	ldr	r2, [pc, #352]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008424:	4b53      	ldr	r3, [pc, #332]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a52      	ldr	r2, [pc, #328]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800842a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800842e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008430:	4b50      	ldr	r3, [pc, #320]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	494d      	ldr	r1, [pc, #308]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800843e:	4313      	orrs	r3, r2
 8008440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d040      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008456:	4b47      	ldr	r3, [pc, #284]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d115      	bne.n	800848e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e07f      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d107      	bne.n	800847e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800846e:	4b41      	ldr	r3, [pc, #260]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e073      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800847e:	4b3d      	ldr	r3, [pc, #244]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e06b      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800848e:	4b39      	ldr	r3, [pc, #228]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f023 0203 	bic.w	r2, r3, #3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	4936      	ldr	r1, [pc, #216]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800849c:	4313      	orrs	r3, r2
 800849e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084a0:	f7fe f940 	bl	8006724 <HAL_GetTick>
 80084a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084a6:	e00a      	b.n	80084be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084a8:	f7fe f93c 	bl	8006724 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e053      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084be:	4b2d      	ldr	r3, [pc, #180]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f003 020c 	and.w	r2, r3, #12
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d1eb      	bne.n	80084a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084d0:	4b27      	ldr	r3, [pc, #156]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d210      	bcs.n	8008500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 0207 	bic.w	r2, r3, #7
 80084e6:	4922      	ldr	r1, [pc, #136]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ee:	4b20      	ldr	r3, [pc, #128]	; (8008570 <HAL_RCC_ClockConfig+0x1c0>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d001      	beq.n	8008500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e032      	b.n	8008566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800850c:	4b19      	ldr	r3, [pc, #100]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	4916      	ldr	r1, [pc, #88]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800851a:	4313      	orrs	r3, r2
 800851c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	2b00      	cmp	r3, #0
 8008528:	d009      	beq.n	800853e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	490e      	ldr	r1, [pc, #56]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800853e:	f000 f821 	bl	8008584 <HAL_RCC_GetSysClockFreq>
 8008542:	4602      	mov	r2, r0
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCC_ClockConfig+0x1c4>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	091b      	lsrs	r3, r3, #4
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	490a      	ldr	r1, [pc, #40]	; (8008578 <HAL_RCC_ClockConfig+0x1c8>)
 8008550:	5ccb      	ldrb	r3, [r1, r3]
 8008552:	fa22 f303 	lsr.w	r3, r2, r3
 8008556:	4a09      	ldr	r2, [pc, #36]	; (800857c <HAL_RCC_ClockConfig+0x1cc>)
 8008558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RCC_ClockConfig+0x1d0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe f89e 	bl	80066a0 <HAL_InitTick>

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40022000 	.word	0x40022000
 8008574:	40021000 	.word	0x40021000
 8008578:	0800d52c 	.word	0x0800d52c
 800857c:	20000018 	.word	0x20000018
 8008580:	2000001c 	.word	0x2000001c

08008584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008584:	b490      	push	{r4, r7}
 8008586:	b08a      	sub	sp, #40	; 0x28
 8008588:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800858a:	4b29      	ldr	r3, [pc, #164]	; (8008630 <HAL_RCC_GetSysClockFreq+0xac>)
 800858c:	1d3c      	adds	r4, r7, #4
 800858e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008594:	f240 2301 	movw	r3, #513	; 0x201
 8008598:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	2300      	movs	r3, #0
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80085ae:	4b21      	ldr	r3, [pc, #132]	; (8008634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f003 030c 	and.w	r3, r3, #12
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d002      	beq.n	80085c4 <HAL_RCC_GetSysClockFreq+0x40>
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d003      	beq.n	80085ca <HAL_RCC_GetSysClockFreq+0x46>
 80085c2:	e02b      	b.n	800861c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80085c4:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80085c6:	623b      	str	r3, [r7, #32]
      break;
 80085c8:	e02b      	b.n	8008622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	0c9b      	lsrs	r3, r3, #18
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	3328      	adds	r3, #40	; 0x28
 80085d4:	443b      	add	r3, r7
 80085d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80085da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d012      	beq.n	800860c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80085e6:	4b13      	ldr	r3, [pc, #76]	; (8008634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	0c5b      	lsrs	r3, r3, #17
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	3328      	adds	r3, #40	; 0x28
 80085f2:	443b      	add	r3, r7
 80085f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80085f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	4a0e      	ldr	r2, [pc, #56]	; (8008638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80085fe:	fb03 f202 	mul.w	r2, r3, r2
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	fbb2 f3f3 	udiv	r3, r2, r3
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
 800860a:	e004      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	4a0b      	ldr	r2, [pc, #44]	; (800863c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008610:	fb02 f303 	mul.w	r3, r2, r3
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	623b      	str	r3, [r7, #32]
      break;
 800861a:	e002      	b.n	8008622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800861c:	4b08      	ldr	r3, [pc, #32]	; (8008640 <HAL_RCC_GetSysClockFreq+0xbc>)
 800861e:	623b      	str	r3, [r7, #32]
      break;
 8008620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008622:	6a3b      	ldr	r3, [r7, #32]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3728      	adds	r7, #40	; 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bc90      	pop	{r4, r7}
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	0800cf18 	.word	0x0800cf18
 8008634:	40021000 	.word	0x40021000
 8008638:	00f42400 	.word	0x00f42400
 800863c:	003d0900 	.word	0x003d0900
 8008640:	007a1200 	.word	0x007a1200

08008644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <HAL_RCC_GetHCLKFreq+0x10>)
 800864a:	681b      	ldr	r3, [r3, #0]
}
 800864c:	4618      	mov	r0, r3
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr
 8008654:	20000018 	.word	0x20000018

08008658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800865c:	f7ff fff2 	bl	8008644 <HAL_RCC_GetHCLKFreq>
 8008660:	4602      	mov	r2, r0
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	4903      	ldr	r1, [pc, #12]	; (800867c <HAL_RCC_GetPCLK1Freq+0x24>)
 800866e:	5ccb      	ldrb	r3, [r1, r3]
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008674:	4618      	mov	r0, r3
 8008676:	bd80      	pop	{r7, pc}
 8008678:	40021000 	.word	0x40021000
 800867c:	0800d53c 	.word	0x0800d53c

08008680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008684:	f7ff ffde 	bl	8008644 <HAL_RCC_GetHCLKFreq>
 8008688:	4602      	mov	r2, r0
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	0adb      	lsrs	r3, r3, #11
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	4903      	ldr	r1, [pc, #12]	; (80086a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008696:	5ccb      	ldrb	r3, [r1, r3]
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800869c:	4618      	mov	r0, r3
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40021000 	.word	0x40021000
 80086a4:	0800d53c 	.word	0x0800d53c

080086a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086b0:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <RCC_Delay+0x34>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a0a      	ldr	r2, [pc, #40]	; (80086e0 <RCC_Delay+0x38>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0a5b      	lsrs	r3, r3, #9
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	fb02 f303 	mul.w	r3, r2, r3
 80086c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086c4:	bf00      	nop
  }
  while (Delay --);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1e5a      	subs	r2, r3, #1
 80086ca:	60fa      	str	r2, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f9      	bne.n	80086c4 <RCC_Delay+0x1c>
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr
 80086dc:	20000018 	.word	0x20000018
 80086e0:	10624dd3 	.word	0x10624dd3

080086e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e041      	b.n	800877a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fd fa92 	bl	8005c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f000 fd88 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d001      	beq.n	800879c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e044      	b.n	8008826 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1d      	ldr	r2, [pc, #116]	; (8008830 <HAL_TIM_Base_Start_IT+0xac>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x6c>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1c      	ldr	r2, [pc, #112]	; (8008834 <HAL_TIM_Base_Start_IT+0xb0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x6c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d0:	d00e      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x6c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <HAL_TIM_Base_Start_IT+0xb4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x6c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a16      	ldr	r2, [pc, #88]	; (800883c <HAL_TIM_Base_Start_IT+0xb8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x6c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a15      	ldr	r2, [pc, #84]	; (8008840 <HAL_TIM_Base_Start_IT+0xbc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d111      	bne.n	8008814 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b06      	cmp	r3, #6
 8008800:	d010      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008812:	e007      	b.n	8008824 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0201 	orr.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40013400 	.word	0x40013400
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00

08008844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e041      	b.n	80088da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f839 	bl	80088e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f000 fcd8 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr

080088f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d109      	bne.n	8008918 <HAL_TIM_PWM_Start+0x24>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	bf14      	ite	ne
 8008910:	2301      	movne	r3, #1
 8008912:	2300      	moveq	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	e022      	b.n	800895e <HAL_TIM_PWM_Start+0x6a>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b04      	cmp	r3, #4
 800891c:	d109      	bne.n	8008932 <HAL_TIM_PWM_Start+0x3e>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	bf14      	ite	ne
 800892a:	2301      	movne	r3, #1
 800892c:	2300      	moveq	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	e015      	b.n	800895e <HAL_TIM_PWM_Start+0x6a>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b08      	cmp	r3, #8
 8008936:	d109      	bne.n	800894c <HAL_TIM_PWM_Start+0x58>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	bf14      	ite	ne
 8008944:	2301      	movne	r3, #1
 8008946:	2300      	moveq	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	e008      	b.n	800895e <HAL_TIM_PWM_Start+0x6a>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b01      	cmp	r3, #1
 8008956:	bf14      	ite	ne
 8008958:	2301      	movne	r3, #1
 800895a:	2300      	moveq	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e072      	b.n	8008a4c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <HAL_TIM_PWM_Start+0x82>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008974:	e013      	b.n	800899e <HAL_TIM_PWM_Start+0xaa>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b04      	cmp	r3, #4
 800897a:	d104      	bne.n	8008986 <HAL_TIM_PWM_Start+0x92>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008984:	e00b      	b.n	800899e <HAL_TIM_PWM_Start+0xaa>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b08      	cmp	r3, #8
 800898a:	d104      	bne.n	8008996 <HAL_TIM_PWM_Start+0xa2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008994:	e003      	b.n	800899e <HAL_TIM_PWM_Start+0xaa>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2201      	movs	r2, #1
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 ff02 	bl	80097b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a28      	ldr	r2, [pc, #160]	; (8008a54 <HAL_TIM_PWM_Start+0x160>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <HAL_TIM_PWM_Start+0xcc>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a27      	ldr	r2, [pc, #156]	; (8008a58 <HAL_TIM_PWM_Start+0x164>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d101      	bne.n	80089c4 <HAL_TIM_PWM_Start+0xd0>
 80089c0:	2301      	movs	r3, #1
 80089c2:	e000      	b.n	80089c6 <HAL_TIM_PWM_Start+0xd2>
 80089c4:	2300      	movs	r3, #0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1d      	ldr	r2, [pc, #116]	; (8008a54 <HAL_TIM_PWM_Start+0x160>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d018      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x122>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1b      	ldr	r2, [pc, #108]	; (8008a58 <HAL_TIM_PWM_Start+0x164>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d013      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x122>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f6:	d00e      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x122>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a17      	ldr	r2, [pc, #92]	; (8008a5c <HAL_TIM_PWM_Start+0x168>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d009      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x122>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a16      	ldr	r2, [pc, #88]	; (8008a60 <HAL_TIM_PWM_Start+0x16c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d004      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x122>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a14      	ldr	r2, [pc, #80]	; (8008a64 <HAL_TIM_PWM_Start+0x170>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d111      	bne.n	8008a3a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b06      	cmp	r3, #6
 8008a26:	d010      	beq.n	8008a4a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a38:	e007      	b.n	8008a4a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0201 	orr.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40013400 	.word	0x40013400
 8008a5c:	40000400 	.word	0x40000400
 8008a60:	40000800 	.word	0x40000800
 8008a64:	40000c00 	.word	0x40000c00

08008a68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e093      	b.n	8008ba4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7fd f91d 	bl	8005cd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aac:	f023 0307 	bic.w	r3, r3, #7
 8008ab0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4610      	mov	r0, r2
 8008abe:	f000 fbbb 	bl	8009238 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aea:	f023 0303 	bic.w	r3, r3, #3
 8008aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	4313      	orrs	r3, r2
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b08:	f023 030c 	bic.w	r3, r3, #12
 8008b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	4313      	orrs	r3, r2
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	011a      	lsls	r2, r3, #4
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	031b      	lsls	r3, r3, #12
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	4313      	orrs	r3, r2
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d110      	bne.n	8008bfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d102      	bne.n	8008be8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008be2:	7b7b      	ldrb	r3, [r7, #13]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d001      	beq.n	8008bec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e069      	b.n	8008cc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bfc:	e031      	b.n	8008c62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d110      	bne.n	8008c26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d102      	bne.n	8008c10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c0a:	7b3b      	ldrb	r3, [r7, #12]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d001      	beq.n	8008c14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e055      	b.n	8008cc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c24:	e01d      	b.n	8008c62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d108      	bne.n	8008c3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d105      	bne.n	8008c3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c32:	7b7b      	ldrb	r3, [r7, #13]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d102      	bne.n	8008c3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c38:	7b3b      	ldrb	r3, [r7, #12]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d001      	beq.n	8008c42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e03e      	b.n	8008cc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_TIM_Encoder_Start+0xc4>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d008      	beq.n	8008c80 <HAL_TIM_Encoder_Start+0xd4>
 8008c6e:	e00f      	b.n	8008c90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fd99 	bl	80097b0 <TIM_CCxChannelCmd>
      break;
 8008c7e:	e016      	b.n	8008cae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2201      	movs	r2, #1
 8008c86:	2104      	movs	r1, #4
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fd91 	bl	80097b0 <TIM_CCxChannelCmd>
      break;
 8008c8e:	e00e      	b.n	8008cae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2201      	movs	r2, #1
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fd89 	bl	80097b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fd82 	bl	80097b0 <TIM_CCxChannelCmd>
      break;
 8008cac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0201 	orr.w	r2, r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d122      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d11b      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0202 	mvn.w	r2, #2
 8008cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa78 	bl	8009200 <HAL_TIM_IC_CaptureCallback>
 8008d10:	e005      	b.n	8008d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa6b 	bl	80091ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa7a 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d122      	bne.n	8008d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d11b      	bne.n	8008d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f06f 0204 	mvn.w	r2, #4
 8008d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa4e 	bl	8009200 <HAL_TIM_IC_CaptureCallback>
 8008d64:	e005      	b.n	8008d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa41 	bl	80091ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa50 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f003 0308 	and.w	r3, r3, #8
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	d122      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d11b      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0208 	mvn.w	r2, #8
 8008d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2204      	movs	r2, #4
 8008da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa24 	bl	8009200 <HAL_TIM_IC_CaptureCallback>
 8008db8:	e005      	b.n	8008dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa17 	bl	80091ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa26 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0310 	and.w	r3, r3, #16
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	d122      	bne.n	8008e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b10      	cmp	r3, #16
 8008de6:	d11b      	bne.n	8008e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0210 	mvn.w	r2, #16
 8008df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2208      	movs	r2, #8
 8008df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f9fa 	bl	8009200 <HAL_TIM_IC_CaptureCallback>
 8008e0c:	e005      	b.n	8008e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f9ed 	bl	80091ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9fc 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d10e      	bne.n	8008e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d107      	bne.n	8008e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0201 	mvn.w	r2, #1
 8008e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f9c8 	bl	80091dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e56:	2b80      	cmp	r3, #128	; 0x80
 8008e58:	d10e      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e64:	2b80      	cmp	r3, #128	; 0x80
 8008e66:	d107      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fd86 	bl	8009984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	d10e      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	d107      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f9c0 	bl	8009224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	d10e      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d107      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0220 	mvn.w	r2, #32
 8008ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fd51 	bl	8009972 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d101      	bne.n	8008ef2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e0ac      	b.n	800904c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b0c      	cmp	r3, #12
 8008efe:	f200 809f 	bhi.w	8009040 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008f02:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f3d 	.word	0x08008f3d
 8008f0c:	08009041 	.word	0x08009041
 8008f10:	08009041 	.word	0x08009041
 8008f14:	08009041 	.word	0x08009041
 8008f18:	08008f7d 	.word	0x08008f7d
 8008f1c:	08009041 	.word	0x08009041
 8008f20:	08009041 	.word	0x08009041
 8008f24:	08009041 	.word	0x08009041
 8008f28:	08008fbf 	.word	0x08008fbf
 8008f2c:	08009041 	.word	0x08009041
 8008f30:	08009041 	.word	0x08009041
 8008f34:	08009041 	.word	0x08009041
 8008f38:	08008fff 	.word	0x08008fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f9f2 	bl	800932c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699a      	ldr	r2, [r3, #24]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0208 	orr.w	r2, r2, #8
 8008f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0204 	bic.w	r2, r2, #4
 8008f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6999      	ldr	r1, [r3, #24]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	619a      	str	r2, [r3, #24]
      break;
 8008f7a:	e062      	b.n	8009042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fa42 	bl	800940c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699a      	ldr	r2, [r3, #24]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6999      	ldr	r1, [r3, #24]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	021a      	lsls	r2, r3, #8
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	619a      	str	r2, [r3, #24]
      break;
 8008fbc:	e041      	b.n	8009042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fa95 	bl	80094f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f042 0208 	orr.w	r2, r2, #8
 8008fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69da      	ldr	r2, [r3, #28]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0204 	bic.w	r2, r2, #4
 8008fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69d9      	ldr	r1, [r3, #28]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	61da      	str	r2, [r3, #28]
      break;
 8008ffc:	e021      	b.n	8009042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fae9 	bl	80095dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69da      	ldr	r2, [r3, #28]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69da      	ldr	r2, [r3, #28]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69d9      	ldr	r1, [r3, #28]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	021a      	lsls	r2, r3, #8
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	61da      	str	r2, [r3, #28]
      break;
 800903e:	e000      	b.n	8009042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009040:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_TIM_ConfigClockSource+0x18>
 8009068:	2302      	movs	r3, #2
 800906a:	e0b3      	b.n	80091d4 <HAL_TIM_ConfigClockSource+0x180>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800908a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009092:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a4:	d03e      	beq.n	8009124 <HAL_TIM_ConfigClockSource+0xd0>
 80090a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090aa:	f200 8087 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b2:	f000 8085 	beq.w	80091c0 <HAL_TIM_ConfigClockSource+0x16c>
 80090b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ba:	d87f      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090bc:	2b70      	cmp	r3, #112	; 0x70
 80090be:	d01a      	beq.n	80090f6 <HAL_TIM_ConfigClockSource+0xa2>
 80090c0:	2b70      	cmp	r3, #112	; 0x70
 80090c2:	d87b      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090c4:	2b60      	cmp	r3, #96	; 0x60
 80090c6:	d050      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x116>
 80090c8:	2b60      	cmp	r3, #96	; 0x60
 80090ca:	d877      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090cc:	2b50      	cmp	r3, #80	; 0x50
 80090ce:	d03c      	beq.n	800914a <HAL_TIM_ConfigClockSource+0xf6>
 80090d0:	2b50      	cmp	r3, #80	; 0x50
 80090d2:	d873      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090d4:	2b40      	cmp	r3, #64	; 0x40
 80090d6:	d058      	beq.n	800918a <HAL_TIM_ConfigClockSource+0x136>
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d86f      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090dc:	2b30      	cmp	r3, #48	; 0x30
 80090de:	d064      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x156>
 80090e0:	2b30      	cmp	r3, #48	; 0x30
 80090e2:	d86b      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	d060      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x156>
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d867      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d05c      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x156>
 80090f0:	2b10      	cmp	r3, #16
 80090f2:	d05a      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80090f4:	e062      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6899      	ldr	r1, [r3, #8]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f000 fb34 	bl	8009772 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009118:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	609a      	str	r2, [r3, #8]
      break;
 8009122:	e04e      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	6899      	ldr	r1, [r3, #8]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f000 fb1d 	bl	8009772 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009146:	609a      	str	r2, [r3, #8]
      break;
 8009148:	e03b      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6859      	ldr	r1, [r3, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	461a      	mov	r2, r3
 8009158:	f000 fa94 	bl	8009684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2150      	movs	r1, #80	; 0x50
 8009162:	4618      	mov	r0, r3
 8009164:	f000 faeb 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8009168:	e02b      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6859      	ldr	r1, [r3, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	461a      	mov	r2, r3
 8009178:	f000 fab2 	bl	80096e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2160      	movs	r1, #96	; 0x60
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fadb 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8009188:	e01b      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6818      	ldr	r0, [r3, #0]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6859      	ldr	r1, [r3, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	461a      	mov	r2, r3
 8009198:	f000 fa74 	bl	8009684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2140      	movs	r1, #64	; 0x40
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 facb 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 80091a8:	e00b      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f000 fac2 	bl	800973e <TIM_ITRx_SetConfig>
        break;
 80091ba:	e002      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80091bc:	bf00      	nop
 80091be:	e000      	b.n	80091c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80091c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bc80      	pop	{r7}
 80091ec:	4770      	bx	lr

080091ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr

08009200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr

08009212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr

08009224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
	...

08009238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a33      	ldr	r2, [pc, #204]	; (8009318 <TIM_Base_SetConfig+0xe0>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d013      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a32      	ldr	r2, [pc, #200]	; (800931c <TIM_Base_SetConfig+0xe4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00f      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925e:	d00b      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a2f      	ldr	r2, [pc, #188]	; (8009320 <TIM_Base_SetConfig+0xe8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d007      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a2e      	ldr	r2, [pc, #184]	; (8009324 <TIM_Base_SetConfig+0xec>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d003      	beq.n	8009278 <TIM_Base_SetConfig+0x40>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a2d      	ldr	r2, [pc, #180]	; (8009328 <TIM_Base_SetConfig+0xf0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d108      	bne.n	800928a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a22      	ldr	r2, [pc, #136]	; (8009318 <TIM_Base_SetConfig+0xe0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <TIM_Base_SetConfig+0x82>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a21      	ldr	r2, [pc, #132]	; (800931c <TIM_Base_SetConfig+0xe4>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00f      	beq.n	80092ba <TIM_Base_SetConfig+0x82>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a0:	d00b      	beq.n	80092ba <TIM_Base_SetConfig+0x82>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a1e      	ldr	r2, [pc, #120]	; (8009320 <TIM_Base_SetConfig+0xe8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <TIM_Base_SetConfig+0x82>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <TIM_Base_SetConfig+0xec>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_Base_SetConfig+0x82>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a1c      	ldr	r2, [pc, #112]	; (8009328 <TIM_Base_SetConfig+0xf0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d108      	bne.n	80092cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <TIM_Base_SetConfig+0xe0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <TIM_Base_SetConfig+0xc8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a08      	ldr	r2, [pc, #32]	; (800931c <TIM_Base_SetConfig+0xe4>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d103      	bne.n	8009308 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	615a      	str	r2, [r3, #20]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr
 8009318:	40012c00 	.word	0x40012c00
 800931c:	40013400 	.word	0x40013400
 8009320:	40000400 	.word	0x40000400
 8009324:	40000800 	.word	0x40000800
 8009328:	40000c00 	.word	0x40000c00

0800932c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f023 0201 	bic.w	r2, r3, #1
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f023 0302 	bic.w	r3, r3, #2
 8009374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a20      	ldr	r2, [pc, #128]	; (8009404 <TIM_OC1_SetConfig+0xd8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_OC1_SetConfig+0x64>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a1f      	ldr	r2, [pc, #124]	; (8009408 <TIM_OC1_SetConfig+0xdc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d10c      	bne.n	80093aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f023 0308 	bic.w	r3, r3, #8
 8009396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f023 0304 	bic.w	r3, r3, #4
 80093a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <TIM_OC1_SetConfig+0xd8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC1_SetConfig+0x8e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a14      	ldr	r2, [pc, #80]	; (8009408 <TIM_OC1_SetConfig+0xdc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d111      	bne.n	80093de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	621a      	str	r2, [r3, #32]
}
 80093f8:	bf00      	nop
 80093fa:	371c      	adds	r7, #28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	40012c00 	.word	0x40012c00
 8009408:	40013400 	.word	0x40013400

0800940c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f023 0210 	bic.w	r2, r3, #16
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800943a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f023 0320 	bic.w	r3, r3, #32
 8009456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a21      	ldr	r2, [pc, #132]	; (80094ec <TIM_OC2_SetConfig+0xe0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_OC2_SetConfig+0x68>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a20      	ldr	r2, [pc, #128]	; (80094f0 <TIM_OC2_SetConfig+0xe4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d10d      	bne.n	8009490 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800947a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4313      	orrs	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800948e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a16      	ldr	r2, [pc, #88]	; (80094ec <TIM_OC2_SetConfig+0xe0>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC2_SetConfig+0x94>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a15      	ldr	r2, [pc, #84]	; (80094f0 <TIM_OC2_SetConfig+0xe4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d113      	bne.n	80094c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	621a      	str	r2, [r3, #32]
}
 80094e2:	bf00      	nop
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr
 80094ec:	40012c00 	.word	0x40012c00
 80094f0:	40013400 	.word	0x40013400

080094f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800953c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	4313      	orrs	r3, r2
 8009548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a21      	ldr	r2, [pc, #132]	; (80095d4 <TIM_OC3_SetConfig+0xe0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d003      	beq.n	800955a <TIM_OC3_SetConfig+0x66>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a20      	ldr	r2, [pc, #128]	; (80095d8 <TIM_OC3_SetConfig+0xe4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d10d      	bne.n	8009576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	4313      	orrs	r3, r2
 800956c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <TIM_OC3_SetConfig+0xe0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d003      	beq.n	8009586 <TIM_OC3_SetConfig+0x92>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <TIM_OC3_SetConfig+0xe4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d113      	bne.n	80095ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800958c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	621a      	str	r2, [r3, #32]
}
 80095c8:	bf00      	nop
 80095ca:	371c      	adds	r7, #28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bc80      	pop	{r7}
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40012c00 	.word	0x40012c00
 80095d8:	40013400 	.word	0x40013400

080095dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	021b      	lsls	r3, r3, #8
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4313      	orrs	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	031b      	lsls	r3, r3, #12
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	4313      	orrs	r3, r2
 8009632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a11      	ldr	r2, [pc, #68]	; (800967c <TIM_OC4_SetConfig+0xa0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_OC4_SetConfig+0x68>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a10      	ldr	r2, [pc, #64]	; (8009680 <TIM_OC4_SetConfig+0xa4>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d109      	bne.n	8009658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800964a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	019b      	lsls	r3, r3, #6
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	621a      	str	r2, [r3, #32]
}
 8009672:	bf00      	nop
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr
 800967c:	40012c00 	.word	0x40012c00
 8009680:	40013400 	.word	0x40013400

08009684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	f023 0201 	bic.w	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f023 030a 	bic.w	r3, r3, #10
 80096c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f023 0210 	bic.w	r2, r3, #16
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800970a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	031b      	lsls	r3, r3, #12
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	4313      	orrs	r3, r2
 8009714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800971c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	621a      	str	r2, [r3, #32]
}
 8009734:	bf00      	nop
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr

0800973e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800973e:	b480      	push	{r7}
 8009740:	b085      	sub	sp, #20
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	f043 0307 	orr.w	r3, r3, #7
 8009760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	609a      	str	r2, [r3, #8]
}
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bc80      	pop	{r7}
 8009770:	4770      	bx	lr

08009772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009772:	b480      	push	{r7}
 8009774:	b087      	sub	sp, #28
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800978c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	021a      	lsls	r2, r3, #8
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	431a      	orrs	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4313      	orrs	r3, r2
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	609a      	str	r2, [r3, #8]
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr

080097b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 031f 	and.w	r3, r3, #31
 80097c2:	2201      	movs	r2, #1
 80097c4:	fa02 f303 	lsl.w	r3, r2, r3
 80097c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a1a      	ldr	r2, [r3, #32]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	43db      	mvns	r3, r3
 80097d2:	401a      	ands	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a1a      	ldr	r2, [r3, #32]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f003 031f 	and.w	r3, r3, #31
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	fa01 f303 	lsl.w	r3, r1, r3
 80097e8:	431a      	orrs	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bc80      	pop	{r7}
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009808:	2b01      	cmp	r3, #1
 800980a:	d101      	bne.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800980c:	2302      	movs	r3, #2
 800980e:	e050      	b.n	80098b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d018      	beq.n	8009886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d013      	beq.n	8009886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009866:	d00e      	beq.n	8009886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a15      	ldr	r2, [pc, #84]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d009      	beq.n	8009886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d004      	beq.n	8009886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a12      	ldr	r2, [pc, #72]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d10c      	bne.n	80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800988c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4313      	orrs	r3, r2
 8009896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bc80      	pop	{r7}
 80098ba:	4770      	bx	lr
 80098bc:	40012c00 	.word	0x40012c00
 80098c0:	40013400 	.word	0x40013400
 80098c4:	40000400 	.word	0x40000400
 80098c8:	40000800 	.word	0x40000800
 80098cc:	40000c00 	.word	0x40000c00

080098d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e03d      	b.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr

08009984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	bc80      	pop	{r7}
 8009994:	4770      	bx	lr

08009996 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e03f      	b.n	8009a28 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d106      	bne.n	80099c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7fc facd 	bl	8005f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2224      	movs	r2, #36	; 0x24
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fdde 	bl	800a59c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	695a      	ldr	r2, [r3, #20]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d17c      	bne.n	8009b4a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <HAL_UART_Transmit+0x2c>
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e075      	b.n	8009b4c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <HAL_UART_Transmit+0x3e>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	e06e      	b.n	8009b4c <HAL_UART_Transmit+0x11c>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2221      	movs	r2, #33	; 0x21
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a84:	f7fc fe4e 	bl	8006724 <HAL_GetTick>
 8009a88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	88fa      	ldrh	r2, [r7, #6]
 8009a8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	88fa      	ldrh	r2, [r7, #6]
 8009a94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a9e:	d108      	bne.n	8009ab2 <HAL_UART_Transmit+0x82>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	61bb      	str	r3, [r7, #24]
 8009ab0:	e003      	b.n	8009aba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ac2:	e02a      	b.n	8009b1a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2200      	movs	r2, #0
 8009acc:	2180      	movs	r1, #128	; 0x80
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fb17 	bl	800a102 <UART_WaitOnFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e036      	b.n	8009b4c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10b      	bne.n	8009afc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009af2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	3302      	adds	r3, #2
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e007      	b.n	8009b0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	781a      	ldrb	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1cf      	bne.n	8009ac4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2140      	movs	r1, #64	; 0x40
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fae7 	bl	800a102 <UART_WaitOnFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e006      	b.n	8009b4c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2220      	movs	r2, #32
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e000      	b.n	8009b4c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b4a:	2302      	movs	r3, #2
  }
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3720      	adds	r7, #32
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d11d      	bne.n	8009baa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <HAL_UART_Receive_IT+0x26>
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e016      	b.n	8009bac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_UART_Receive_IT+0x38>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e00f      	b.n	8009bac <HAL_UART_Receive_IT+0x58>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 faf8 	bl	800a196 <UART_Start_Receive_IT>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	e000      	b.n	8009bac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009baa:	2302      	movs	r3, #2
  }
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d11d      	bne.n	8009c0a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <HAL_UART_Receive_DMA+0x26>
 8009bd4:	88fb      	ldrh	r3, [r7, #6]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e016      	b.n	8009c0c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_UART_Receive_DMA+0x38>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e00f      	b.n	8009c0c <HAL_UART_Receive_DMA+0x58>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009bfa:	88fb      	ldrh	r3, [r7, #6]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fb01 	bl	800a208 <UART_Start_Receive_DMA>
 8009c06:	4603      	mov	r3, r0
 8009c08:	e000      	b.n	8009c0c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c0a:	2302      	movs	r3, #2
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	; 0x28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10d      	bne.n	8009c66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d008      	beq.n	8009c66 <HAL_UART_IRQHandler+0x52>
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fbf2 	bl	800a448 <UART_Receive_IT>
      return;
 8009c64:	e17b      	b.n	8009f5e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80b1 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x1bc>
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d105      	bne.n	8009c84 <HAL_UART_IRQHandler+0x70>
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80a6 	beq.w	8009dd0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x90>
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	f043 0201 	orr.w	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <HAL_UART_IRQHandler+0xb0>
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	f043 0202 	orr.w	r2, r3, #2
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <HAL_UART_IRQHandler+0xd0>
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cdc:	f043 0204 	orr.w	r2, r3, #4
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	f003 0308 	and.w	r3, r3, #8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00f      	beq.n	8009d0e <HAL_UART_IRQHandler+0xfa>
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f003 0320 	and.w	r3, r3, #32
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <HAL_UART_IRQHandler+0xee>
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	f043 0208 	orr.w	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 811e 	beq.w	8009f54 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <HAL_UART_IRQHandler+0x11e>
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	f003 0320 	and.w	r3, r3, #32
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fb8b 	bl	800a448 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <HAL_UART_IRQHandler+0x146>
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d031      	beq.n	8009dbe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 facd 	bl	800a2fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d023      	beq.n	8009db6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	695a      	ldr	r2, [r3, #20]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d013      	beq.n	8009dae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8a:	4a76      	ldr	r2, [pc, #472]	; (8009f64 <HAL_UART_IRQHandler+0x350>)
 8009d8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fc ff12 	bl	8006bbc <HAL_DMA_Abort_IT>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d016      	beq.n	8009dcc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dac:	e00e      	b.n	8009dcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fa fd4e 	bl	8004850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db4:	e00a      	b.n	8009dcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fa fd4a 	bl	8004850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbc:	e006      	b.n	8009dcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fa fd46 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dca:	e0c3      	b.n	8009f54 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dcc:	bf00      	nop
    return;
 8009dce:	e0c1      	b.n	8009f54 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	f040 80a1 	bne.w	8009f1c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 809b 	beq.w	8009f1c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8095 	beq.w	8009f1c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d04e      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009e20:	8a3b      	ldrh	r3, [r7, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 8098 	beq.w	8009f58 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e2c:	8a3a      	ldrh	r2, [r7, #16]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	f080 8092 	bcs.w	8009f58 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	8a3a      	ldrh	r2, [r7, #16]
 8009e38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d02b      	beq.n	8009e9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	695a      	ldr	r2, [r3, #20]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0201 	bic.w	r2, r2, #1
 8009e62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695a      	ldr	r2, [r3, #20]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2220      	movs	r2, #32
 8009e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0210 	bic.w	r2, r2, #16
 8009e90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fc fe55 	bl	8006b46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f86d 	bl	8009f8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009eb2:	e051      	b.n	8009f58 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d047      	beq.n	8009f5c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009ecc:	8a7b      	ldrh	r3, [r7, #18]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d044      	beq.n	8009f5c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ee0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695a      	ldr	r2, [r3, #20]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0201 	bic.w	r2, r2, #1
 8009ef0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 0210 	bic.w	r2, r2, #16
 8009f0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f10:	8a7b      	ldrh	r3, [r7, #18]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f839 	bl	8009f8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f1a:	e01f      	b.n	8009f5c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d008      	beq.n	8009f38 <HAL_UART_IRQHandler+0x324>
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa22 	bl	800a37a <UART_Transmit_IT>
    return;
 8009f36:	e012      	b.n	8009f5e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00d      	beq.n	8009f5e <HAL_UART_IRQHandler+0x34a>
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fa63 	bl	800a418 <UART_EndTransmit_IT>
    return;
 8009f52:	e004      	b.n	8009f5e <HAL_UART_IRQHandler+0x34a>
    return;
 8009f54:	bf00      	nop
 8009f56:	e002      	b.n	8009f5e <HAL_UART_IRQHandler+0x34a>
      return;
 8009f58:	bf00      	nop
 8009f5a:	e000      	b.n	8009f5e <HAL_UART_IRQHandler+0x34a>
      return;
 8009f5c:	bf00      	nop
  }
}
 8009f5e:	3728      	adds	r7, #40	; 0x28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	0800a353 	.word	0x0800a353

08009f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr

08009f7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr

08009f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr

08009fa2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0320 	and.w	r3, r3, #32
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d12a      	bne.n	800a014 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fd2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0201 	bic.w	r2, r2, #1
 8009fe2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	695a      	ldr	r2, [r3, #20]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ff2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a000:	2b01      	cmp	r3, #1
 800a002:	d107      	bne.n	800a014 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0210 	bic.w	r2, r2, #16
 800a012:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d106      	bne.n	800a02a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a020:	4619      	mov	r1, r3
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff ffb2 	bl	8009f8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a028:	e002      	b.n	800a030 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7fa fbe0 	bl	80047f0 <HAL_UART_RxCpltCallback>
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d108      	bne.n	800a060 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	b29b      	uxth	r3, r3
 800a056:	4619      	mov	r1, r3
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f7ff ff97 	bl	8009f8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a05e:	e002      	b.n	800a066 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff ff8a 	bl	8009f7a <HAL_UART_RxHalfCpltCallback>
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf14      	ite	ne
 800a08e:	2301      	movne	r3, #1
 800a090:	2300      	moveq	r3, #0
 800a092:	b2db      	uxtb	r3, r3
 800a094:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b21      	cmp	r3, #33	; 0x21
 800a0a0:	d108      	bne.n	800a0b4 <UART_DMAError+0x46>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d005      	beq.n	800a0b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a0ae:	68b8      	ldr	r0, [r7, #8]
 800a0b0:	f000 f90e 	bl	800a2d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bf14      	ite	ne
 800a0c2:	2301      	movne	r3, #1
 800a0c4:	2300      	moveq	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b22      	cmp	r3, #34	; 0x22
 800a0d4:	d108      	bne.n	800a0e8 <UART_DMAError+0x7a>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a0e2:	68b8      	ldr	r0, [r7, #8]
 800a0e4:	f000 f909 	bl	800a2fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ec:	f043 0210 	orr.w	r2, r3, #16
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0f4:	68b8      	ldr	r0, [r7, #8]
 800a0f6:	f7fa fbab 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	603b      	str	r3, [r7, #0]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a112:	e02c      	b.n	800a16e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11a:	d028      	beq.n	800a16e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d007      	beq.n	800a132 <UART_WaitOnFlagUntilTimeout+0x30>
 800a122:	f7fc faff 	bl	8006724 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d21d      	bcs.n	800a16e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a140:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695a      	ldr	r2, [r3, #20]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0201 	bic.w	r2, r2, #1
 800a150:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2220      	movs	r2, #32
 800a156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e00f      	b.n	800a18e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4013      	ands	r3, r2
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	bf0c      	ite	eq
 800a17e:	2301      	moveq	r3, #1
 800a180:	2300      	movne	r3, #0
 800a182:	b2db      	uxtb	r3, r3
 800a184:	461a      	mov	r2, r3
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d0c3      	beq.n	800a114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	88fa      	ldrh	r2, [r7, #6]
 800a1ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2222      	movs	r2, #34	; 0x22
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1da:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	695a      	ldr	r2, [r3, #20]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0201 	orr.w	r2, r2, #1
 800a1ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0220 	orr.w	r2, r2, #32
 800a1fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2222      	movs	r2, #34	; 0x22
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a234:	4a23      	ldr	r2, [pc, #140]	; (800a2c4 <UART_Start_Receive_DMA+0xbc>)
 800a236:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	4a22      	ldr	r2, [pc, #136]	; (800a2c8 <UART_Start_Receive_DMA+0xc0>)
 800a23e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a244:	4a21      	ldr	r2, [pc, #132]	; (800a2cc <UART_Start_Receive_DMA+0xc4>)
 800a246:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	2200      	movs	r2, #0
 800a24e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a250:	f107 0308 	add.w	r3, r7, #8
 800a254:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	f7fc fc0e 	bl	8006a88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a26c:	2300      	movs	r3, #0
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	613b      	str	r3, [r7, #16]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a298:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	695a      	ldr	r2, [r3, #20]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f042 0201 	orr.w	r2, r2, #1
 800a2a8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	695a      	ldr	r2, [r3, #20]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2b8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	08009fa3 	.word	0x08009fa3
 800a2c8:	0800a039 	.word	0x0800a039
 800a2cc:	0800a06f 	.word	0x0800a06f

0800a2d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a2e6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr

0800a2fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68da      	ldr	r2, [r3, #12]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a310:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	695a      	ldr	r2, [r3, #20]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 0201 	bic.w	r2, r2, #1
 800a320:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a326:	2b01      	cmp	r3, #1
 800a328:	d107      	bne.n	800a33a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0210 	bic.w	r2, r2, #16
 800a338:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr

0800a352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7fa fa6f 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b21      	cmp	r3, #33	; 0x21
 800a38c:	d13e      	bne.n	800a40c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a396:	d114      	bne.n	800a3c2 <UART_Transmit_IT+0x48>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d110      	bne.n	800a3c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	1c9a      	adds	r2, r3, #2
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	621a      	str	r2, [r3, #32]
 800a3c0:	e008      	b.n	800a3d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	1c59      	adds	r1, r3, #1
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6211      	str	r1, [r2, #32]
 800a3cc:	781a      	ldrb	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10f      	bne.n	800a408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68da      	ldr	r2, [r3, #12]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	e000      	b.n	800a40e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a40c:	2302      	movs	r3, #2
  }
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	bc80      	pop	{r7}
 800a416:	4770      	bx	lr

0800a418 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a42e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff fd95 	bl	8009f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b22      	cmp	r3, #34	; 0x22
 800a45a:	f040 8099 	bne.w	800a590 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a466:	d117      	bne.n	800a498 <UART_Receive_IT+0x50>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d113      	bne.n	800a498 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a478:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	b29b      	uxth	r3, r3
 800a482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a486:	b29a      	uxth	r2, r3
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	1c9a      	adds	r2, r3, #2
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	629a      	str	r2, [r3, #40]	; 0x28
 800a496:	e026      	b.n	800a4e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4aa:	d007      	beq.n	800a4bc <UART_Receive_IT+0x74>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <UART_Receive_IT+0x82>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	e008      	b.n	800a4dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d148      	bne.n	800a58c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0220 	bic.w	r2, r2, #32
 800a508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68da      	ldr	r2, [r3, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	695a      	ldr	r2, [r3, #20]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0201 	bic.w	r2, r2, #1
 800a528:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	2b01      	cmp	r3, #1
 800a538:	d123      	bne.n	800a582 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 0210 	bic.w	r2, r2, #16
 800a54e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0310 	and.w	r3, r3, #16
 800a55a:	2b10      	cmp	r3, #16
 800a55c:	d10a      	bne.n	800a574 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fd06 	bl	8009f8c <HAL_UARTEx_RxEventCallback>
 800a580:	e002      	b.n	800a588 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fa f934 	bl	80047f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	e002      	b.n	800a592 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e000      	b.n	800a592 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a590:	2302      	movs	r3, #2
  }
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689a      	ldr	r2, [r3, #8]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a5d6:	f023 030c 	bic.w	r3, r3, #12
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a2c      	ldr	r2, [pc, #176]	; (800a6b0 <UART_SetConfig+0x114>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d103      	bne.n	800a60c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a604:	f7fe f83c 	bl	8008680 <HAL_RCC_GetPCLK2Freq>
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	e002      	b.n	800a612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a60c:	f7fe f824 	bl	8008658 <HAL_RCC_GetPCLK1Freq>
 800a610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009a      	lsls	r2, r3, #2
 800a61c:	441a      	add	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	fbb2 f3f3 	udiv	r3, r2, r3
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <UART_SetConfig+0x118>)
 800a62a:	fba2 2303 	umull	r2, r3, r2, r3
 800a62e:	095b      	lsrs	r3, r3, #5
 800a630:	0119      	lsls	r1, r3, #4
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009a      	lsls	r2, r3, #2
 800a63c:	441a      	add	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	fbb2 f2f3 	udiv	r2, r2, r3
 800a648:	4b1a      	ldr	r3, [pc, #104]	; (800a6b4 <UART_SetConfig+0x118>)
 800a64a:	fba3 0302 	umull	r0, r3, r3, r2
 800a64e:	095b      	lsrs	r3, r3, #5
 800a650:	2064      	movs	r0, #100	; 0x64
 800a652:	fb00 f303 	mul.w	r3, r0, r3
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	011b      	lsls	r3, r3, #4
 800a65a:	3332      	adds	r3, #50	; 0x32
 800a65c:	4a15      	ldr	r2, [pc, #84]	; (800a6b4 <UART_SetConfig+0x118>)
 800a65e:	fba2 2303 	umull	r2, r3, r2, r3
 800a662:	095b      	lsrs	r3, r3, #5
 800a664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a668:	4419      	add	r1, r3
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009a      	lsls	r2, r3, #2
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a680:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <UART_SetConfig+0x118>)
 800a682:	fba3 0302 	umull	r0, r3, r3, r2
 800a686:	095b      	lsrs	r3, r3, #5
 800a688:	2064      	movs	r0, #100	; 0x64
 800a68a:	fb00 f303 	mul.w	r3, r0, r3
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	3332      	adds	r3, #50	; 0x32
 800a694:	4a07      	ldr	r2, [pc, #28]	; (800a6b4 <UART_SetConfig+0x118>)
 800a696:	fba2 2303 	umull	r2, r3, r2, r3
 800a69a:	095b      	lsrs	r3, r3, #5
 800a69c:	f003 020f 	and.w	r2, r3, #15
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	440a      	add	r2, r1
 800a6a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	40013800 	.word	0x40013800
 800a6b4:	51eb851f 	.word	0x51eb851f

0800a6b8 <__assert_func>:
 800a6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <__assert_func+0x2c>)
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68d8      	ldr	r0, [r3, #12]
 800a6c6:	b14c      	cbz	r4, 800a6dc <__assert_func+0x24>
 800a6c8:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <__assert_func+0x30>)
 800a6ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6ce:	9100      	str	r1, [sp, #0]
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	4906      	ldr	r1, [pc, #24]	; (800a6ec <__assert_func+0x34>)
 800a6d4:	f000 f814 	bl	800a700 <fiprintf>
 800a6d8:	f000 fc2c 	bl	800af34 <abort>
 800a6dc:	4b04      	ldr	r3, [pc, #16]	; (800a6f0 <__assert_func+0x38>)
 800a6de:	461c      	mov	r4, r3
 800a6e0:	e7f3      	b.n	800a6ca <__assert_func+0x12>
 800a6e2:	bf00      	nop
 800a6e4:	20000024 	.word	0x20000024
 800a6e8:	0800d544 	.word	0x0800d544
 800a6ec:	0800d551 	.word	0x0800d551
 800a6f0:	0800d57f 	.word	0x0800d57f

0800a6f4 <__errno>:
 800a6f4:	4b01      	ldr	r3, [pc, #4]	; (800a6fc <__errno+0x8>)
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20000024 	.word	0x20000024

0800a700 <fiprintf>:
 800a700:	b40e      	push	{r1, r2, r3}
 800a702:	b503      	push	{r0, r1, lr}
 800a704:	4601      	mov	r1, r0
 800a706:	ab03      	add	r3, sp, #12
 800a708:	4805      	ldr	r0, [pc, #20]	; (800a720 <fiprintf+0x20>)
 800a70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70e:	6800      	ldr	r0, [r0, #0]
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f000 f869 	bl	800a7e8 <_vfiprintf_r>
 800a716:	b002      	add	sp, #8
 800a718:	f85d eb04 	ldr.w	lr, [sp], #4
 800a71c:	b003      	add	sp, #12
 800a71e:	4770      	bx	lr
 800a720:	20000024 	.word	0x20000024

0800a724 <__libc_init_array>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	2600      	movs	r6, #0
 800a728:	4d0c      	ldr	r5, [pc, #48]	; (800a75c <__libc_init_array+0x38>)
 800a72a:	4c0d      	ldr	r4, [pc, #52]	; (800a760 <__libc_init_array+0x3c>)
 800a72c:	1b64      	subs	r4, r4, r5
 800a72e:	10a4      	asrs	r4, r4, #2
 800a730:	42a6      	cmp	r6, r4
 800a732:	d109      	bne.n	800a748 <__libc_init_array+0x24>
 800a734:	f002 fbb2 	bl	800ce9c <_init>
 800a738:	2600      	movs	r6, #0
 800a73a:	4d0a      	ldr	r5, [pc, #40]	; (800a764 <__libc_init_array+0x40>)
 800a73c:	4c0a      	ldr	r4, [pc, #40]	; (800a768 <__libc_init_array+0x44>)
 800a73e:	1b64      	subs	r4, r4, r5
 800a740:	10a4      	asrs	r4, r4, #2
 800a742:	42a6      	cmp	r6, r4
 800a744:	d105      	bne.n	800a752 <__libc_init_array+0x2e>
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74c:	4798      	blx	r3
 800a74e:	3601      	adds	r6, #1
 800a750:	e7ee      	b.n	800a730 <__libc_init_array+0xc>
 800a752:	f855 3b04 	ldr.w	r3, [r5], #4
 800a756:	4798      	blx	r3
 800a758:	3601      	adds	r6, #1
 800a75a:	e7f2      	b.n	800a742 <__libc_init_array+0x1e>
 800a75c:	0800d830 	.word	0x0800d830
 800a760:	0800d830 	.word	0x0800d830
 800a764:	0800d830 	.word	0x0800d830
 800a768:	0800d834 	.word	0x0800d834

0800a76c <memcpy>:
 800a76c:	440a      	add	r2, r1
 800a76e:	4291      	cmp	r1, r2
 800a770:	f100 33ff 	add.w	r3, r0, #4294967295
 800a774:	d100      	bne.n	800a778 <memcpy+0xc>
 800a776:	4770      	bx	lr
 800a778:	b510      	push	{r4, lr}
 800a77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a77e:	4291      	cmp	r1, r2
 800a780:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a784:	d1f9      	bne.n	800a77a <memcpy+0xe>
 800a786:	bd10      	pop	{r4, pc}

0800a788 <memset>:
 800a788:	4603      	mov	r3, r0
 800a78a:	4402      	add	r2, r0
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d100      	bne.n	800a792 <memset+0xa>
 800a790:	4770      	bx	lr
 800a792:	f803 1b01 	strb.w	r1, [r3], #1
 800a796:	e7f9      	b.n	800a78c <memset+0x4>

0800a798 <__sfputc_r>:
 800a798:	6893      	ldr	r3, [r2, #8]
 800a79a:	b410      	push	{r4}
 800a79c:	3b01      	subs	r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	6093      	str	r3, [r2, #8]
 800a7a2:	da07      	bge.n	800a7b4 <__sfputc_r+0x1c>
 800a7a4:	6994      	ldr	r4, [r2, #24]
 800a7a6:	42a3      	cmp	r3, r4
 800a7a8:	db01      	blt.n	800a7ae <__sfputc_r+0x16>
 800a7aa:	290a      	cmp	r1, #10
 800a7ac:	d102      	bne.n	800a7b4 <__sfputc_r+0x1c>
 800a7ae:	bc10      	pop	{r4}
 800a7b0:	f000 bb00 	b.w	800adb4 <__swbuf_r>
 800a7b4:	6813      	ldr	r3, [r2, #0]
 800a7b6:	1c58      	adds	r0, r3, #1
 800a7b8:	6010      	str	r0, [r2, #0]
 800a7ba:	7019      	strb	r1, [r3, #0]
 800a7bc:	4608      	mov	r0, r1
 800a7be:	bc10      	pop	{r4}
 800a7c0:	4770      	bx	lr

0800a7c2 <__sfputs_r>:
 800a7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	18d5      	adds	r5, r2, r3
 800a7cc:	42ac      	cmp	r4, r5
 800a7ce:	d101      	bne.n	800a7d4 <__sfputs_r+0x12>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e007      	b.n	800a7e4 <__sfputs_r+0x22>
 800a7d4:	463a      	mov	r2, r7
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7dc:	f7ff ffdc 	bl	800a798 <__sfputc_r>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d1f3      	bne.n	800a7cc <__sfputs_r+0xa>
 800a7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7e8 <_vfiprintf_r>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	4614      	mov	r4, r2
 800a7f0:	4698      	mov	r8, r3
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	b09d      	sub	sp, #116	; 0x74
 800a7f6:	b118      	cbz	r0, 800a800 <_vfiprintf_r+0x18>
 800a7f8:	6983      	ldr	r3, [r0, #24]
 800a7fa:	b90b      	cbnz	r3, 800a800 <_vfiprintf_r+0x18>
 800a7fc:	f000 fcb8 	bl	800b170 <__sinit>
 800a800:	4b89      	ldr	r3, [pc, #548]	; (800aa28 <_vfiprintf_r+0x240>)
 800a802:	429d      	cmp	r5, r3
 800a804:	d11b      	bne.n	800a83e <_vfiprintf_r+0x56>
 800a806:	6875      	ldr	r5, [r6, #4]
 800a808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a80a:	07d9      	lsls	r1, r3, #31
 800a80c:	d405      	bmi.n	800a81a <_vfiprintf_r+0x32>
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	059a      	lsls	r2, r3, #22
 800a812:	d402      	bmi.n	800a81a <_vfiprintf_r+0x32>
 800a814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a816:	f000 fd49 	bl	800b2ac <__retarget_lock_acquire_recursive>
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	071b      	lsls	r3, r3, #28
 800a81e:	d501      	bpl.n	800a824 <_vfiprintf_r+0x3c>
 800a820:	692b      	ldr	r3, [r5, #16]
 800a822:	b9eb      	cbnz	r3, 800a860 <_vfiprintf_r+0x78>
 800a824:	4629      	mov	r1, r5
 800a826:	4630      	mov	r0, r6
 800a828:	f000 fb16 	bl	800ae58 <__swsetup_r>
 800a82c:	b1c0      	cbz	r0, 800a860 <_vfiprintf_r+0x78>
 800a82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a830:	07dc      	lsls	r4, r3, #31
 800a832:	d50e      	bpl.n	800a852 <_vfiprintf_r+0x6a>
 800a834:	f04f 30ff 	mov.w	r0, #4294967295
 800a838:	b01d      	add	sp, #116	; 0x74
 800a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83e:	4b7b      	ldr	r3, [pc, #492]	; (800aa2c <_vfiprintf_r+0x244>)
 800a840:	429d      	cmp	r5, r3
 800a842:	d101      	bne.n	800a848 <_vfiprintf_r+0x60>
 800a844:	68b5      	ldr	r5, [r6, #8]
 800a846:	e7df      	b.n	800a808 <_vfiprintf_r+0x20>
 800a848:	4b79      	ldr	r3, [pc, #484]	; (800aa30 <_vfiprintf_r+0x248>)
 800a84a:	429d      	cmp	r5, r3
 800a84c:	bf08      	it	eq
 800a84e:	68f5      	ldreq	r5, [r6, #12]
 800a850:	e7da      	b.n	800a808 <_vfiprintf_r+0x20>
 800a852:	89ab      	ldrh	r3, [r5, #12]
 800a854:	0598      	lsls	r0, r3, #22
 800a856:	d4ed      	bmi.n	800a834 <_vfiprintf_r+0x4c>
 800a858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a85a:	f000 fd28 	bl	800b2ae <__retarget_lock_release_recursive>
 800a85e:	e7e9      	b.n	800a834 <_vfiprintf_r+0x4c>
 800a860:	2300      	movs	r3, #0
 800a862:	9309      	str	r3, [sp, #36]	; 0x24
 800a864:	2320      	movs	r3, #32
 800a866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a86a:	2330      	movs	r3, #48	; 0x30
 800a86c:	f04f 0901 	mov.w	r9, #1
 800a870:	f8cd 800c 	str.w	r8, [sp, #12]
 800a874:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aa34 <_vfiprintf_r+0x24c>
 800a878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a87c:	4623      	mov	r3, r4
 800a87e:	469a      	mov	sl, r3
 800a880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a884:	b10a      	cbz	r2, 800a88a <_vfiprintf_r+0xa2>
 800a886:	2a25      	cmp	r2, #37	; 0x25
 800a888:	d1f9      	bne.n	800a87e <_vfiprintf_r+0x96>
 800a88a:	ebba 0b04 	subs.w	fp, sl, r4
 800a88e:	d00b      	beq.n	800a8a8 <_vfiprintf_r+0xc0>
 800a890:	465b      	mov	r3, fp
 800a892:	4622      	mov	r2, r4
 800a894:	4629      	mov	r1, r5
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ff93 	bl	800a7c2 <__sfputs_r>
 800a89c:	3001      	adds	r0, #1
 800a89e:	f000 80aa 	beq.w	800a9f6 <_vfiprintf_r+0x20e>
 800a8a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a4:	445a      	add	r2, fp
 800a8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 80a2 	beq.w	800a9f6 <_vfiprintf_r+0x20e>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8bc:	f10a 0a01 	add.w	sl, sl, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ca:	4654      	mov	r4, sl
 800a8cc:	2205      	movs	r2, #5
 800a8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d2:	4858      	ldr	r0, [pc, #352]	; (800aa34 <_vfiprintf_r+0x24c>)
 800a8d4:	f000 fd52 	bl	800b37c <memchr>
 800a8d8:	9a04      	ldr	r2, [sp, #16]
 800a8da:	b9d8      	cbnz	r0, 800a914 <_vfiprintf_r+0x12c>
 800a8dc:	06d1      	lsls	r1, r2, #27
 800a8de:	bf44      	itt	mi
 800a8e0:	2320      	movmi	r3, #32
 800a8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e6:	0713      	lsls	r3, r2, #28
 800a8e8:	bf44      	itt	mi
 800a8ea:	232b      	movmi	r3, #43	; 0x2b
 800a8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f6:	d015      	beq.n	800a924 <_vfiprintf_r+0x13c>
 800a8f8:	4654      	mov	r4, sl
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	f04f 0c0a 	mov.w	ip, #10
 800a900:	9a07      	ldr	r2, [sp, #28]
 800a902:	4621      	mov	r1, r4
 800a904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a908:	3b30      	subs	r3, #48	; 0x30
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d94e      	bls.n	800a9ac <_vfiprintf_r+0x1c4>
 800a90e:	b1b0      	cbz	r0, 800a93e <_vfiprintf_r+0x156>
 800a910:	9207      	str	r2, [sp, #28]
 800a912:	e014      	b.n	800a93e <_vfiprintf_r+0x156>
 800a914:	eba0 0308 	sub.w	r3, r0, r8
 800a918:	fa09 f303 	lsl.w	r3, r9, r3
 800a91c:	4313      	orrs	r3, r2
 800a91e:	46a2      	mov	sl, r4
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	e7d2      	b.n	800a8ca <_vfiprintf_r+0xe2>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	1d19      	adds	r1, r3, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfbb      	ittet	lt
 800a930:	425b      	neglt	r3, r3
 800a932:	f042 0202 	orrlt.w	r2, r2, #2
 800a936:	9307      	strge	r3, [sp, #28]
 800a938:	9307      	strlt	r3, [sp, #28]
 800a93a:	bfb8      	it	lt
 800a93c:	9204      	strlt	r2, [sp, #16]
 800a93e:	7823      	ldrb	r3, [r4, #0]
 800a940:	2b2e      	cmp	r3, #46	; 0x2e
 800a942:	d10c      	bne.n	800a95e <_vfiprintf_r+0x176>
 800a944:	7863      	ldrb	r3, [r4, #1]
 800a946:	2b2a      	cmp	r3, #42	; 0x2a
 800a948:	d135      	bne.n	800a9b6 <_vfiprintf_r+0x1ce>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	3402      	adds	r4, #2
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	9203      	str	r2, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfb8      	it	lt
 800a958:	f04f 33ff 	movlt.w	r3, #4294967295
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aa38 <_vfiprintf_r+0x250>
 800a962:	2203      	movs	r2, #3
 800a964:	4650      	mov	r0, sl
 800a966:	7821      	ldrb	r1, [r4, #0]
 800a968:	f000 fd08 	bl	800b37c <memchr>
 800a96c:	b140      	cbz	r0, 800a980 <_vfiprintf_r+0x198>
 800a96e:	2340      	movs	r3, #64	; 0x40
 800a970:	eba0 000a 	sub.w	r0, r0, sl
 800a974:	fa03 f000 	lsl.w	r0, r3, r0
 800a978:	9b04      	ldr	r3, [sp, #16]
 800a97a:	3401      	adds	r4, #1
 800a97c:	4303      	orrs	r3, r0
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	2206      	movs	r2, #6
 800a986:	482d      	ldr	r0, [pc, #180]	; (800aa3c <_vfiprintf_r+0x254>)
 800a988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a98c:	f000 fcf6 	bl	800b37c <memchr>
 800a990:	2800      	cmp	r0, #0
 800a992:	d03f      	beq.n	800aa14 <_vfiprintf_r+0x22c>
 800a994:	4b2a      	ldr	r3, [pc, #168]	; (800aa40 <_vfiprintf_r+0x258>)
 800a996:	bb1b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x1f8>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	3307      	adds	r3, #7
 800a99c:	f023 0307 	bic.w	r3, r3, #7
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	443b      	add	r3, r7
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	e767      	b.n	800a87c <_vfiprintf_r+0x94>
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b4:	e7a5      	b.n	800a902 <_vfiprintf_r+0x11a>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f04f 0c0a 	mov.w	ip, #10
 800a9bc:	4619      	mov	r1, r3
 800a9be:	3401      	adds	r4, #1
 800a9c0:	9305      	str	r3, [sp, #20]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c8:	3a30      	subs	r2, #48	; 0x30
 800a9ca:	2a09      	cmp	r2, #9
 800a9cc:	d903      	bls.n	800a9d6 <_vfiprintf_r+0x1ee>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0c5      	beq.n	800a95e <_vfiprintf_r+0x176>
 800a9d2:	9105      	str	r1, [sp, #20]
 800a9d4:	e7c3      	b.n	800a95e <_vfiprintf_r+0x176>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	2301      	movs	r3, #1
 800a9da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9de:	e7f0      	b.n	800a9c2 <_vfiprintf_r+0x1da>
 800a9e0:	ab03      	add	r3, sp, #12
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <_vfiprintf_r+0x25c>)
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	f3af 8000 	nop.w
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	1c78      	adds	r0, r7, #1
 800a9f4:	d1d6      	bne.n	800a9a4 <_vfiprintf_r+0x1bc>
 800a9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f8:	07d9      	lsls	r1, r3, #31
 800a9fa:	d405      	bmi.n	800aa08 <_vfiprintf_r+0x220>
 800a9fc:	89ab      	ldrh	r3, [r5, #12]
 800a9fe:	059a      	lsls	r2, r3, #22
 800aa00:	d402      	bmi.n	800aa08 <_vfiprintf_r+0x220>
 800aa02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa04:	f000 fc53 	bl	800b2ae <__retarget_lock_release_recursive>
 800aa08:	89ab      	ldrh	r3, [r5, #12]
 800aa0a:	065b      	lsls	r3, r3, #25
 800aa0c:	f53f af12 	bmi.w	800a834 <_vfiprintf_r+0x4c>
 800aa10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa12:	e711      	b.n	800a838 <_vfiprintf_r+0x50>
 800aa14:	ab03      	add	r3, sp, #12
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	462a      	mov	r2, r5
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <_vfiprintf_r+0x25c>)
 800aa1e:	a904      	add	r1, sp, #16
 800aa20:	f000 f882 	bl	800ab28 <_printf_i>
 800aa24:	e7e4      	b.n	800a9f0 <_vfiprintf_r+0x208>
 800aa26:	bf00      	nop
 800aa28:	0800d5d8 	.word	0x0800d5d8
 800aa2c:	0800d5f8 	.word	0x0800d5f8
 800aa30:	0800d5b8 	.word	0x0800d5b8
 800aa34:	0800d584 	.word	0x0800d584
 800aa38:	0800d58a 	.word	0x0800d58a
 800aa3c:	0800d58e 	.word	0x0800d58e
 800aa40:	00000000 	.word	0x00000000
 800aa44:	0800a7c3 	.word	0x0800a7c3

0800aa48 <_printf_common>:
 800aa48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	4616      	mov	r6, r2
 800aa4e:	4699      	mov	r9, r3
 800aa50:	688a      	ldr	r2, [r1, #8]
 800aa52:	690b      	ldr	r3, [r1, #16]
 800aa54:	4607      	mov	r7, r0
 800aa56:	4293      	cmp	r3, r2
 800aa58:	bfb8      	it	lt
 800aa5a:	4613      	movlt	r3, r2
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa62:	460c      	mov	r4, r1
 800aa64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa68:	b10a      	cbz	r2, 800aa6e <_printf_common+0x26>
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	6033      	str	r3, [r6, #0]
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	0699      	lsls	r1, r3, #26
 800aa72:	bf42      	ittt	mi
 800aa74:	6833      	ldrmi	r3, [r6, #0]
 800aa76:	3302      	addmi	r3, #2
 800aa78:	6033      	strmi	r3, [r6, #0]
 800aa7a:	6825      	ldr	r5, [r4, #0]
 800aa7c:	f015 0506 	ands.w	r5, r5, #6
 800aa80:	d106      	bne.n	800aa90 <_printf_common+0x48>
 800aa82:	f104 0a19 	add.w	sl, r4, #25
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	6832      	ldr	r2, [r6, #0]
 800aa8a:	1a9b      	subs	r3, r3, r2
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dc28      	bgt.n	800aae2 <_printf_common+0x9a>
 800aa90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa94:	1e13      	subs	r3, r2, #0
 800aa96:	6822      	ldr	r2, [r4, #0]
 800aa98:	bf18      	it	ne
 800aa9a:	2301      	movne	r3, #1
 800aa9c:	0692      	lsls	r2, r2, #26
 800aa9e:	d42d      	bmi.n	800aafc <_printf_common+0xb4>
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaa8:	47c0      	blx	r8
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d020      	beq.n	800aaf0 <_printf_common+0xa8>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	68e5      	ldr	r5, [r4, #12]
 800aab2:	f003 0306 	and.w	r3, r3, #6
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	bf18      	it	ne
 800aaba:	2500      	movne	r5, #0
 800aabc:	6832      	ldr	r2, [r6, #0]
 800aabe:	f04f 0600 	mov.w	r6, #0
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	bf08      	it	eq
 800aac6:	1aad      	subeq	r5, r5, r2
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	bf08      	it	eq
 800aacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bfc4      	itt	gt
 800aad4:	1a9b      	subgt	r3, r3, r2
 800aad6:	18ed      	addgt	r5, r5, r3
 800aad8:	341a      	adds	r4, #26
 800aada:	42b5      	cmp	r5, r6
 800aadc:	d11a      	bne.n	800ab14 <_printf_common+0xcc>
 800aade:	2000      	movs	r0, #0
 800aae0:	e008      	b.n	800aaf4 <_printf_common+0xac>
 800aae2:	2301      	movs	r3, #1
 800aae4:	4652      	mov	r2, sl
 800aae6:	4649      	mov	r1, r9
 800aae8:	4638      	mov	r0, r7
 800aaea:	47c0      	blx	r8
 800aaec:	3001      	adds	r0, #1
 800aaee:	d103      	bne.n	800aaf8 <_printf_common+0xb0>
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf8:	3501      	adds	r5, #1
 800aafa:	e7c4      	b.n	800aa86 <_printf_common+0x3e>
 800aafc:	2030      	movs	r0, #48	; 0x30
 800aafe:	18e1      	adds	r1, r4, r3
 800ab00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab0a:	4422      	add	r2, r4
 800ab0c:	3302      	adds	r3, #2
 800ab0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab12:	e7c5      	b.n	800aaa0 <_printf_common+0x58>
 800ab14:	2301      	movs	r3, #1
 800ab16:	4622      	mov	r2, r4
 800ab18:	4649      	mov	r1, r9
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	47c0      	blx	r8
 800ab1e:	3001      	adds	r0, #1
 800ab20:	d0e6      	beq.n	800aaf0 <_printf_common+0xa8>
 800ab22:	3601      	adds	r6, #1
 800ab24:	e7d9      	b.n	800aada <_printf_common+0x92>
	...

0800ab28 <_printf_i>:
 800ab28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab2c:	7e0f      	ldrb	r7, [r1, #24]
 800ab2e:	4691      	mov	r9, r2
 800ab30:	2f78      	cmp	r7, #120	; 0x78
 800ab32:	4680      	mov	r8, r0
 800ab34:	460c      	mov	r4, r1
 800ab36:	469a      	mov	sl, r3
 800ab38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab3e:	d807      	bhi.n	800ab50 <_printf_i+0x28>
 800ab40:	2f62      	cmp	r7, #98	; 0x62
 800ab42:	d80a      	bhi.n	800ab5a <_printf_i+0x32>
 800ab44:	2f00      	cmp	r7, #0
 800ab46:	f000 80d9 	beq.w	800acfc <_printf_i+0x1d4>
 800ab4a:	2f58      	cmp	r7, #88	; 0x58
 800ab4c:	f000 80a4 	beq.w	800ac98 <_printf_i+0x170>
 800ab50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab58:	e03a      	b.n	800abd0 <_printf_i+0xa8>
 800ab5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab5e:	2b15      	cmp	r3, #21
 800ab60:	d8f6      	bhi.n	800ab50 <_printf_i+0x28>
 800ab62:	a101      	add	r1, pc, #4	; (adr r1, 800ab68 <_printf_i+0x40>)
 800ab64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab68:	0800abc1 	.word	0x0800abc1
 800ab6c:	0800abd5 	.word	0x0800abd5
 800ab70:	0800ab51 	.word	0x0800ab51
 800ab74:	0800ab51 	.word	0x0800ab51
 800ab78:	0800ab51 	.word	0x0800ab51
 800ab7c:	0800ab51 	.word	0x0800ab51
 800ab80:	0800abd5 	.word	0x0800abd5
 800ab84:	0800ab51 	.word	0x0800ab51
 800ab88:	0800ab51 	.word	0x0800ab51
 800ab8c:	0800ab51 	.word	0x0800ab51
 800ab90:	0800ab51 	.word	0x0800ab51
 800ab94:	0800ace3 	.word	0x0800ace3
 800ab98:	0800ac05 	.word	0x0800ac05
 800ab9c:	0800acc5 	.word	0x0800acc5
 800aba0:	0800ab51 	.word	0x0800ab51
 800aba4:	0800ab51 	.word	0x0800ab51
 800aba8:	0800ad05 	.word	0x0800ad05
 800abac:	0800ab51 	.word	0x0800ab51
 800abb0:	0800ac05 	.word	0x0800ac05
 800abb4:	0800ab51 	.word	0x0800ab51
 800abb8:	0800ab51 	.word	0x0800ab51
 800abbc:	0800accd 	.word	0x0800accd
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	1d1a      	adds	r2, r3, #4
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	602a      	str	r2, [r5, #0]
 800abc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abd0:	2301      	movs	r3, #1
 800abd2:	e0a4      	b.n	800ad1e <_printf_i+0x1f6>
 800abd4:	6820      	ldr	r0, [r4, #0]
 800abd6:	6829      	ldr	r1, [r5, #0]
 800abd8:	0606      	lsls	r6, r0, #24
 800abda:	f101 0304 	add.w	r3, r1, #4
 800abde:	d50a      	bpl.n	800abf6 <_printf_i+0xce>
 800abe0:	680e      	ldr	r6, [r1, #0]
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	2e00      	cmp	r6, #0
 800abe6:	da03      	bge.n	800abf0 <_printf_i+0xc8>
 800abe8:	232d      	movs	r3, #45	; 0x2d
 800abea:	4276      	negs	r6, r6
 800abec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf0:	230a      	movs	r3, #10
 800abf2:	485e      	ldr	r0, [pc, #376]	; (800ad6c <_printf_i+0x244>)
 800abf4:	e019      	b.n	800ac2a <_printf_i+0x102>
 800abf6:	680e      	ldr	r6, [r1, #0]
 800abf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	bf18      	it	ne
 800ac00:	b236      	sxthne	r6, r6
 800ac02:	e7ef      	b.n	800abe4 <_printf_i+0xbc>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	6820      	ldr	r0, [r4, #0]
 800ac08:	1d19      	adds	r1, r3, #4
 800ac0a:	6029      	str	r1, [r5, #0]
 800ac0c:	0601      	lsls	r1, r0, #24
 800ac0e:	d501      	bpl.n	800ac14 <_printf_i+0xec>
 800ac10:	681e      	ldr	r6, [r3, #0]
 800ac12:	e002      	b.n	800ac1a <_printf_i+0xf2>
 800ac14:	0646      	lsls	r6, r0, #25
 800ac16:	d5fb      	bpl.n	800ac10 <_printf_i+0xe8>
 800ac18:	881e      	ldrh	r6, [r3, #0]
 800ac1a:	2f6f      	cmp	r7, #111	; 0x6f
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2308      	moveq	r3, #8
 800ac20:	230a      	movne	r3, #10
 800ac22:	4852      	ldr	r0, [pc, #328]	; (800ad6c <_printf_i+0x244>)
 800ac24:	2100      	movs	r1, #0
 800ac26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac2a:	6865      	ldr	r5, [r4, #4]
 800ac2c:	2d00      	cmp	r5, #0
 800ac2e:	bfa8      	it	ge
 800ac30:	6821      	ldrge	r1, [r4, #0]
 800ac32:	60a5      	str	r5, [r4, #8]
 800ac34:	bfa4      	itt	ge
 800ac36:	f021 0104 	bicge.w	r1, r1, #4
 800ac3a:	6021      	strge	r1, [r4, #0]
 800ac3c:	b90e      	cbnz	r6, 800ac42 <_printf_i+0x11a>
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	d04d      	beq.n	800acde <_printf_i+0x1b6>
 800ac42:	4615      	mov	r5, r2
 800ac44:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac48:	fb03 6711 	mls	r7, r3, r1, r6
 800ac4c:	5dc7      	ldrb	r7, [r0, r7]
 800ac4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac52:	4637      	mov	r7, r6
 800ac54:	42bb      	cmp	r3, r7
 800ac56:	460e      	mov	r6, r1
 800ac58:	d9f4      	bls.n	800ac44 <_printf_i+0x11c>
 800ac5a:	2b08      	cmp	r3, #8
 800ac5c:	d10b      	bne.n	800ac76 <_printf_i+0x14e>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	07de      	lsls	r6, r3, #31
 800ac62:	d508      	bpl.n	800ac76 <_printf_i+0x14e>
 800ac64:	6923      	ldr	r3, [r4, #16]
 800ac66:	6861      	ldr	r1, [r4, #4]
 800ac68:	4299      	cmp	r1, r3
 800ac6a:	bfde      	ittt	le
 800ac6c:	2330      	movle	r3, #48	; 0x30
 800ac6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac72:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac76:	1b52      	subs	r2, r2, r5
 800ac78:	6122      	str	r2, [r4, #16]
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f8cd a000 	str.w	sl, [sp]
 800ac84:	aa03      	add	r2, sp, #12
 800ac86:	f7ff fedf 	bl	800aa48 <_printf_common>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d14c      	bne.n	800ad28 <_printf_i+0x200>
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	b004      	add	sp, #16
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac98:	4834      	ldr	r0, [pc, #208]	; (800ad6c <_printf_i+0x244>)
 800ac9a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac9e:	6829      	ldr	r1, [r5, #0]
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	f851 6b04 	ldr.w	r6, [r1], #4
 800aca6:	6029      	str	r1, [r5, #0]
 800aca8:	061d      	lsls	r5, r3, #24
 800acaa:	d514      	bpl.n	800acd6 <_printf_i+0x1ae>
 800acac:	07df      	lsls	r7, r3, #31
 800acae:	bf44      	itt	mi
 800acb0:	f043 0320 	orrmi.w	r3, r3, #32
 800acb4:	6023      	strmi	r3, [r4, #0]
 800acb6:	b91e      	cbnz	r6, 800acc0 <_printf_i+0x198>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	f023 0320 	bic.w	r3, r3, #32
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	2310      	movs	r3, #16
 800acc2:	e7af      	b.n	800ac24 <_printf_i+0xfc>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	f043 0320 	orr.w	r3, r3, #32
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	2378      	movs	r3, #120	; 0x78
 800acce:	4828      	ldr	r0, [pc, #160]	; (800ad70 <_printf_i+0x248>)
 800acd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acd4:	e7e3      	b.n	800ac9e <_printf_i+0x176>
 800acd6:	0659      	lsls	r1, r3, #25
 800acd8:	bf48      	it	mi
 800acda:	b2b6      	uxthmi	r6, r6
 800acdc:	e7e6      	b.n	800acac <_printf_i+0x184>
 800acde:	4615      	mov	r5, r2
 800ace0:	e7bb      	b.n	800ac5a <_printf_i+0x132>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	6826      	ldr	r6, [r4, #0]
 800ace6:	1d18      	adds	r0, r3, #4
 800ace8:	6961      	ldr	r1, [r4, #20]
 800acea:	6028      	str	r0, [r5, #0]
 800acec:	0635      	lsls	r5, r6, #24
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	d501      	bpl.n	800acf6 <_printf_i+0x1ce>
 800acf2:	6019      	str	r1, [r3, #0]
 800acf4:	e002      	b.n	800acfc <_printf_i+0x1d4>
 800acf6:	0670      	lsls	r0, r6, #25
 800acf8:	d5fb      	bpl.n	800acf2 <_printf_i+0x1ca>
 800acfa:	8019      	strh	r1, [r3, #0]
 800acfc:	2300      	movs	r3, #0
 800acfe:	4615      	mov	r5, r2
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	e7ba      	b.n	800ac7a <_printf_i+0x152>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	2100      	movs	r1, #0
 800ad08:	1d1a      	adds	r2, r3, #4
 800ad0a:	602a      	str	r2, [r5, #0]
 800ad0c:	681d      	ldr	r5, [r3, #0]
 800ad0e:	6862      	ldr	r2, [r4, #4]
 800ad10:	4628      	mov	r0, r5
 800ad12:	f000 fb33 	bl	800b37c <memchr>
 800ad16:	b108      	cbz	r0, 800ad1c <_printf_i+0x1f4>
 800ad18:	1b40      	subs	r0, r0, r5
 800ad1a:	6060      	str	r0, [r4, #4]
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	2300      	movs	r3, #0
 800ad22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad26:	e7a8      	b.n	800ac7a <_printf_i+0x152>
 800ad28:	462a      	mov	r2, r5
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	47d0      	blx	sl
 800ad32:	3001      	adds	r0, #1
 800ad34:	d0ab      	beq.n	800ac8e <_printf_i+0x166>
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	079b      	lsls	r3, r3, #30
 800ad3a:	d413      	bmi.n	800ad64 <_printf_i+0x23c>
 800ad3c:	68e0      	ldr	r0, [r4, #12]
 800ad3e:	9b03      	ldr	r3, [sp, #12]
 800ad40:	4298      	cmp	r0, r3
 800ad42:	bfb8      	it	lt
 800ad44:	4618      	movlt	r0, r3
 800ad46:	e7a4      	b.n	800ac92 <_printf_i+0x16a>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	4640      	mov	r0, r8
 800ad50:	47d0      	blx	sl
 800ad52:	3001      	adds	r0, #1
 800ad54:	d09b      	beq.n	800ac8e <_printf_i+0x166>
 800ad56:	3501      	adds	r5, #1
 800ad58:	68e3      	ldr	r3, [r4, #12]
 800ad5a:	9903      	ldr	r1, [sp, #12]
 800ad5c:	1a5b      	subs	r3, r3, r1
 800ad5e:	42ab      	cmp	r3, r5
 800ad60:	dcf2      	bgt.n	800ad48 <_printf_i+0x220>
 800ad62:	e7eb      	b.n	800ad3c <_printf_i+0x214>
 800ad64:	2500      	movs	r5, #0
 800ad66:	f104 0619 	add.w	r6, r4, #25
 800ad6a:	e7f5      	b.n	800ad58 <_printf_i+0x230>
 800ad6c:	0800d595 	.word	0x0800d595
 800ad70:	0800d5a6 	.word	0x0800d5a6

0800ad74 <siprintf>:
 800ad74:	b40e      	push	{r1, r2, r3}
 800ad76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad7a:	b500      	push	{lr}
 800ad7c:	b09c      	sub	sp, #112	; 0x70
 800ad7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad80:	9002      	str	r0, [sp, #8]
 800ad82:	9006      	str	r0, [sp, #24]
 800ad84:	9107      	str	r1, [sp, #28]
 800ad86:	9104      	str	r1, [sp, #16]
 800ad88:	4808      	ldr	r0, [pc, #32]	; (800adac <siprintf+0x38>)
 800ad8a:	4909      	ldr	r1, [pc, #36]	; (800adb0 <siprintf+0x3c>)
 800ad8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad90:	9105      	str	r1, [sp, #20]
 800ad92:	6800      	ldr	r0, [r0, #0]
 800ad94:	a902      	add	r1, sp, #8
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	f000 fc7e 	bl	800b698 <_svfiprintf_r>
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	9b02      	ldr	r3, [sp, #8]
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	b01c      	add	sp, #112	; 0x70
 800ada4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada8:	b003      	add	sp, #12
 800adaa:	4770      	bx	lr
 800adac:	20000024 	.word	0x20000024
 800adb0:	ffff0208 	.word	0xffff0208

0800adb4 <__swbuf_r>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	460e      	mov	r6, r1
 800adb8:	4614      	mov	r4, r2
 800adba:	4605      	mov	r5, r0
 800adbc:	b118      	cbz	r0, 800adc6 <__swbuf_r+0x12>
 800adbe:	6983      	ldr	r3, [r0, #24]
 800adc0:	b90b      	cbnz	r3, 800adc6 <__swbuf_r+0x12>
 800adc2:	f000 f9d5 	bl	800b170 <__sinit>
 800adc6:	4b21      	ldr	r3, [pc, #132]	; (800ae4c <__swbuf_r+0x98>)
 800adc8:	429c      	cmp	r4, r3
 800adca:	d12b      	bne.n	800ae24 <__swbuf_r+0x70>
 800adcc:	686c      	ldr	r4, [r5, #4]
 800adce:	69a3      	ldr	r3, [r4, #24]
 800add0:	60a3      	str	r3, [r4, #8]
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	071a      	lsls	r2, r3, #28
 800add6:	d52f      	bpl.n	800ae38 <__swbuf_r+0x84>
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	b36b      	cbz	r3, 800ae38 <__swbuf_r+0x84>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	6820      	ldr	r0, [r4, #0]
 800ade0:	b2f6      	uxtb	r6, r6
 800ade2:	1ac0      	subs	r0, r0, r3
 800ade4:	6963      	ldr	r3, [r4, #20]
 800ade6:	4637      	mov	r7, r6
 800ade8:	4283      	cmp	r3, r0
 800adea:	dc04      	bgt.n	800adf6 <__swbuf_r+0x42>
 800adec:	4621      	mov	r1, r4
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 f92a 	bl	800b048 <_fflush_r>
 800adf4:	bb30      	cbnz	r0, 800ae44 <__swbuf_r+0x90>
 800adf6:	68a3      	ldr	r3, [r4, #8]
 800adf8:	3001      	adds	r0, #1
 800adfa:	3b01      	subs	r3, #1
 800adfc:	60a3      	str	r3, [r4, #8]
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	6022      	str	r2, [r4, #0]
 800ae04:	701e      	strb	r6, [r3, #0]
 800ae06:	6963      	ldr	r3, [r4, #20]
 800ae08:	4283      	cmp	r3, r0
 800ae0a:	d004      	beq.n	800ae16 <__swbuf_r+0x62>
 800ae0c:	89a3      	ldrh	r3, [r4, #12]
 800ae0e:	07db      	lsls	r3, r3, #31
 800ae10:	d506      	bpl.n	800ae20 <__swbuf_r+0x6c>
 800ae12:	2e0a      	cmp	r6, #10
 800ae14:	d104      	bne.n	800ae20 <__swbuf_r+0x6c>
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 f915 	bl	800b048 <_fflush_r>
 800ae1e:	b988      	cbnz	r0, 800ae44 <__swbuf_r+0x90>
 800ae20:	4638      	mov	r0, r7
 800ae22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae24:	4b0a      	ldr	r3, [pc, #40]	; (800ae50 <__swbuf_r+0x9c>)
 800ae26:	429c      	cmp	r4, r3
 800ae28:	d101      	bne.n	800ae2e <__swbuf_r+0x7a>
 800ae2a:	68ac      	ldr	r4, [r5, #8]
 800ae2c:	e7cf      	b.n	800adce <__swbuf_r+0x1a>
 800ae2e:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <__swbuf_r+0xa0>)
 800ae30:	429c      	cmp	r4, r3
 800ae32:	bf08      	it	eq
 800ae34:	68ec      	ldreq	r4, [r5, #12]
 800ae36:	e7ca      	b.n	800adce <__swbuf_r+0x1a>
 800ae38:	4621      	mov	r1, r4
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f000 f80c 	bl	800ae58 <__swsetup_r>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d0cb      	beq.n	800addc <__swbuf_r+0x28>
 800ae44:	f04f 37ff 	mov.w	r7, #4294967295
 800ae48:	e7ea      	b.n	800ae20 <__swbuf_r+0x6c>
 800ae4a:	bf00      	nop
 800ae4c:	0800d5d8 	.word	0x0800d5d8
 800ae50:	0800d5f8 	.word	0x0800d5f8
 800ae54:	0800d5b8 	.word	0x0800d5b8

0800ae58 <__swsetup_r>:
 800ae58:	4b32      	ldr	r3, [pc, #200]	; (800af24 <__swsetup_r+0xcc>)
 800ae5a:	b570      	push	{r4, r5, r6, lr}
 800ae5c:	681d      	ldr	r5, [r3, #0]
 800ae5e:	4606      	mov	r6, r0
 800ae60:	460c      	mov	r4, r1
 800ae62:	b125      	cbz	r5, 800ae6e <__swsetup_r+0x16>
 800ae64:	69ab      	ldr	r3, [r5, #24]
 800ae66:	b913      	cbnz	r3, 800ae6e <__swsetup_r+0x16>
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f000 f981 	bl	800b170 <__sinit>
 800ae6e:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <__swsetup_r+0xd0>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	d10f      	bne.n	800ae94 <__swsetup_r+0x3c>
 800ae74:	686c      	ldr	r4, [r5, #4]
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae7c:	0719      	lsls	r1, r3, #28
 800ae7e:	d42c      	bmi.n	800aeda <__swsetup_r+0x82>
 800ae80:	06dd      	lsls	r5, r3, #27
 800ae82:	d411      	bmi.n	800aea8 <__swsetup_r+0x50>
 800ae84:	2309      	movs	r3, #9
 800ae86:	6033      	str	r3, [r6, #0]
 800ae88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	e03e      	b.n	800af12 <__swsetup_r+0xba>
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <__swsetup_r+0xd4>)
 800ae96:	429c      	cmp	r4, r3
 800ae98:	d101      	bne.n	800ae9e <__swsetup_r+0x46>
 800ae9a:	68ac      	ldr	r4, [r5, #8]
 800ae9c:	e7eb      	b.n	800ae76 <__swsetup_r+0x1e>
 800ae9e:	4b24      	ldr	r3, [pc, #144]	; (800af30 <__swsetup_r+0xd8>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	bf08      	it	eq
 800aea4:	68ec      	ldreq	r4, [r5, #12]
 800aea6:	e7e6      	b.n	800ae76 <__swsetup_r+0x1e>
 800aea8:	0758      	lsls	r0, r3, #29
 800aeaa:	d512      	bpl.n	800aed2 <__swsetup_r+0x7a>
 800aeac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeae:	b141      	cbz	r1, 800aec2 <__swsetup_r+0x6a>
 800aeb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeb4:	4299      	cmp	r1, r3
 800aeb6:	d002      	beq.n	800aebe <__swsetup_r+0x66>
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f000 fa87 	bl	800b3cc <_free_r>
 800aebe:	2300      	movs	r3, #0
 800aec0:	6363      	str	r3, [r4, #52]	; 0x34
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	2300      	movs	r3, #0
 800aecc:	6063      	str	r3, [r4, #4]
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f043 0308 	orr.w	r3, r3, #8
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	6923      	ldr	r3, [r4, #16]
 800aedc:	b94b      	cbnz	r3, 800aef2 <__swsetup_r+0x9a>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aee8:	d003      	beq.n	800aef2 <__swsetup_r+0x9a>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4630      	mov	r0, r6
 800aeee:	f000 fa05 	bl	800b2fc <__smakebuf_r>
 800aef2:	89a0      	ldrh	r0, [r4, #12]
 800aef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aef8:	f010 0301 	ands.w	r3, r0, #1
 800aefc:	d00a      	beq.n	800af14 <__swsetup_r+0xbc>
 800aefe:	2300      	movs	r3, #0
 800af00:	60a3      	str	r3, [r4, #8]
 800af02:	6963      	ldr	r3, [r4, #20]
 800af04:	425b      	negs	r3, r3
 800af06:	61a3      	str	r3, [r4, #24]
 800af08:	6923      	ldr	r3, [r4, #16]
 800af0a:	b943      	cbnz	r3, 800af1e <__swsetup_r+0xc6>
 800af0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af10:	d1ba      	bne.n	800ae88 <__swsetup_r+0x30>
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	0781      	lsls	r1, r0, #30
 800af16:	bf58      	it	pl
 800af18:	6963      	ldrpl	r3, [r4, #20]
 800af1a:	60a3      	str	r3, [r4, #8]
 800af1c:	e7f4      	b.n	800af08 <__swsetup_r+0xb0>
 800af1e:	2000      	movs	r0, #0
 800af20:	e7f7      	b.n	800af12 <__swsetup_r+0xba>
 800af22:	bf00      	nop
 800af24:	20000024 	.word	0x20000024
 800af28:	0800d5d8 	.word	0x0800d5d8
 800af2c:	0800d5f8 	.word	0x0800d5f8
 800af30:	0800d5b8 	.word	0x0800d5b8

0800af34 <abort>:
 800af34:	2006      	movs	r0, #6
 800af36:	b508      	push	{r3, lr}
 800af38:	f000 fce6 	bl	800b908 <raise>
 800af3c:	2001      	movs	r0, #1
 800af3e:	f7fb f990 	bl	8006262 <_exit>
	...

0800af44 <__sflush_r>:
 800af44:	898a      	ldrh	r2, [r1, #12]
 800af46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af48:	4605      	mov	r5, r0
 800af4a:	0710      	lsls	r0, r2, #28
 800af4c:	460c      	mov	r4, r1
 800af4e:	d457      	bmi.n	800b000 <__sflush_r+0xbc>
 800af50:	684b      	ldr	r3, [r1, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	dc04      	bgt.n	800af60 <__sflush_r+0x1c>
 800af56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc01      	bgt.n	800af60 <__sflush_r+0x1c>
 800af5c:	2000      	movs	r0, #0
 800af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af62:	2e00      	cmp	r6, #0
 800af64:	d0fa      	beq.n	800af5c <__sflush_r+0x18>
 800af66:	2300      	movs	r3, #0
 800af68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af6c:	682f      	ldr	r7, [r5, #0]
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	d032      	beq.n	800afd8 <__sflush_r+0x94>
 800af72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	075a      	lsls	r2, r3, #29
 800af78:	d505      	bpl.n	800af86 <__sflush_r+0x42>
 800af7a:	6863      	ldr	r3, [r4, #4]
 800af7c:	1ac0      	subs	r0, r0, r3
 800af7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af80:	b10b      	cbz	r3, 800af86 <__sflush_r+0x42>
 800af82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af84:	1ac0      	subs	r0, r0, r3
 800af86:	2300      	movs	r3, #0
 800af88:	4602      	mov	r2, r0
 800af8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af8c:	4628      	mov	r0, r5
 800af8e:	6a21      	ldr	r1, [r4, #32]
 800af90:	47b0      	blx	r6
 800af92:	1c43      	adds	r3, r0, #1
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	d106      	bne.n	800afa6 <__sflush_r+0x62>
 800af98:	6829      	ldr	r1, [r5, #0]
 800af9a:	291d      	cmp	r1, #29
 800af9c:	d82c      	bhi.n	800aff8 <__sflush_r+0xb4>
 800af9e:	4a29      	ldr	r2, [pc, #164]	; (800b044 <__sflush_r+0x100>)
 800afa0:	40ca      	lsrs	r2, r1
 800afa2:	07d6      	lsls	r6, r2, #31
 800afa4:	d528      	bpl.n	800aff8 <__sflush_r+0xb4>
 800afa6:	2200      	movs	r2, #0
 800afa8:	6062      	str	r2, [r4, #4]
 800afaa:	6922      	ldr	r2, [r4, #16]
 800afac:	04d9      	lsls	r1, r3, #19
 800afae:	6022      	str	r2, [r4, #0]
 800afb0:	d504      	bpl.n	800afbc <__sflush_r+0x78>
 800afb2:	1c42      	adds	r2, r0, #1
 800afb4:	d101      	bne.n	800afba <__sflush_r+0x76>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	b903      	cbnz	r3, 800afbc <__sflush_r+0x78>
 800afba:	6560      	str	r0, [r4, #84]	; 0x54
 800afbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afbe:	602f      	str	r7, [r5, #0]
 800afc0:	2900      	cmp	r1, #0
 800afc2:	d0cb      	beq.n	800af5c <__sflush_r+0x18>
 800afc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afc8:	4299      	cmp	r1, r3
 800afca:	d002      	beq.n	800afd2 <__sflush_r+0x8e>
 800afcc:	4628      	mov	r0, r5
 800afce:	f000 f9fd 	bl	800b3cc <_free_r>
 800afd2:	2000      	movs	r0, #0
 800afd4:	6360      	str	r0, [r4, #52]	; 0x34
 800afd6:	e7c2      	b.n	800af5e <__sflush_r+0x1a>
 800afd8:	6a21      	ldr	r1, [r4, #32]
 800afda:	2301      	movs	r3, #1
 800afdc:	4628      	mov	r0, r5
 800afde:	47b0      	blx	r6
 800afe0:	1c41      	adds	r1, r0, #1
 800afe2:	d1c7      	bne.n	800af74 <__sflush_r+0x30>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0c4      	beq.n	800af74 <__sflush_r+0x30>
 800afea:	2b1d      	cmp	r3, #29
 800afec:	d001      	beq.n	800aff2 <__sflush_r+0xae>
 800afee:	2b16      	cmp	r3, #22
 800aff0:	d101      	bne.n	800aff6 <__sflush_r+0xb2>
 800aff2:	602f      	str	r7, [r5, #0]
 800aff4:	e7b2      	b.n	800af5c <__sflush_r+0x18>
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800affc:	81a3      	strh	r3, [r4, #12]
 800affe:	e7ae      	b.n	800af5e <__sflush_r+0x1a>
 800b000:	690f      	ldr	r7, [r1, #16]
 800b002:	2f00      	cmp	r7, #0
 800b004:	d0aa      	beq.n	800af5c <__sflush_r+0x18>
 800b006:	0793      	lsls	r3, r2, #30
 800b008:	bf18      	it	ne
 800b00a:	2300      	movne	r3, #0
 800b00c:	680e      	ldr	r6, [r1, #0]
 800b00e:	bf08      	it	eq
 800b010:	694b      	ldreq	r3, [r1, #20]
 800b012:	1bf6      	subs	r6, r6, r7
 800b014:	600f      	str	r7, [r1, #0]
 800b016:	608b      	str	r3, [r1, #8]
 800b018:	2e00      	cmp	r6, #0
 800b01a:	dd9f      	ble.n	800af5c <__sflush_r+0x18>
 800b01c:	4633      	mov	r3, r6
 800b01e:	463a      	mov	r2, r7
 800b020:	4628      	mov	r0, r5
 800b022:	6a21      	ldr	r1, [r4, #32]
 800b024:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b028:	47e0      	blx	ip
 800b02a:	2800      	cmp	r0, #0
 800b02c:	dc06      	bgt.n	800b03c <__sflush_r+0xf8>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	e790      	b.n	800af5e <__sflush_r+0x1a>
 800b03c:	4407      	add	r7, r0
 800b03e:	1a36      	subs	r6, r6, r0
 800b040:	e7ea      	b.n	800b018 <__sflush_r+0xd4>
 800b042:	bf00      	nop
 800b044:	20400001 	.word	0x20400001

0800b048 <_fflush_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	690b      	ldr	r3, [r1, #16]
 800b04c:	4605      	mov	r5, r0
 800b04e:	460c      	mov	r4, r1
 800b050:	b913      	cbnz	r3, 800b058 <_fflush_r+0x10>
 800b052:	2500      	movs	r5, #0
 800b054:	4628      	mov	r0, r5
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	b118      	cbz	r0, 800b062 <_fflush_r+0x1a>
 800b05a:	6983      	ldr	r3, [r0, #24]
 800b05c:	b90b      	cbnz	r3, 800b062 <_fflush_r+0x1a>
 800b05e:	f000 f887 	bl	800b170 <__sinit>
 800b062:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <_fflush_r+0x6c>)
 800b064:	429c      	cmp	r4, r3
 800b066:	d11b      	bne.n	800b0a0 <_fflush_r+0x58>
 800b068:	686c      	ldr	r4, [r5, #4]
 800b06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0ef      	beq.n	800b052 <_fflush_r+0xa>
 800b072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b074:	07d0      	lsls	r0, r2, #31
 800b076:	d404      	bmi.n	800b082 <_fflush_r+0x3a>
 800b078:	0599      	lsls	r1, r3, #22
 800b07a:	d402      	bmi.n	800b082 <_fflush_r+0x3a>
 800b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07e:	f000 f915 	bl	800b2ac <__retarget_lock_acquire_recursive>
 800b082:	4628      	mov	r0, r5
 800b084:	4621      	mov	r1, r4
 800b086:	f7ff ff5d 	bl	800af44 <__sflush_r>
 800b08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b08c:	4605      	mov	r5, r0
 800b08e:	07da      	lsls	r2, r3, #31
 800b090:	d4e0      	bmi.n	800b054 <_fflush_r+0xc>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	059b      	lsls	r3, r3, #22
 800b096:	d4dd      	bmi.n	800b054 <_fflush_r+0xc>
 800b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09a:	f000 f908 	bl	800b2ae <__retarget_lock_release_recursive>
 800b09e:	e7d9      	b.n	800b054 <_fflush_r+0xc>
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <_fflush_r+0x70>)
 800b0a2:	429c      	cmp	r4, r3
 800b0a4:	d101      	bne.n	800b0aa <_fflush_r+0x62>
 800b0a6:	68ac      	ldr	r4, [r5, #8]
 800b0a8:	e7df      	b.n	800b06a <_fflush_r+0x22>
 800b0aa:	4b04      	ldr	r3, [pc, #16]	; (800b0bc <_fflush_r+0x74>)
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	bf08      	it	eq
 800b0b0:	68ec      	ldreq	r4, [r5, #12]
 800b0b2:	e7da      	b.n	800b06a <_fflush_r+0x22>
 800b0b4:	0800d5d8 	.word	0x0800d5d8
 800b0b8:	0800d5f8 	.word	0x0800d5f8
 800b0bc:	0800d5b8 	.word	0x0800d5b8

0800b0c0 <std>:
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ce:	6083      	str	r3, [r0, #8]
 800b0d0:	8181      	strh	r1, [r0, #12]
 800b0d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0d4:	81c2      	strh	r2, [r0, #14]
 800b0d6:	6183      	str	r3, [r0, #24]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	2208      	movs	r2, #8
 800b0dc:	305c      	adds	r0, #92	; 0x5c
 800b0de:	f7ff fb53 	bl	800a788 <memset>
 800b0e2:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <std+0x38>)
 800b0e4:	6224      	str	r4, [r4, #32]
 800b0e6:	6263      	str	r3, [r4, #36]	; 0x24
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <std+0x3c>)
 800b0ea:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0ec:	4b04      	ldr	r3, [pc, #16]	; (800b100 <std+0x40>)
 800b0ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0f0:	4b04      	ldr	r3, [pc, #16]	; (800b104 <std+0x44>)
 800b0f2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	bf00      	nop
 800b0f8:	0800b941 	.word	0x0800b941
 800b0fc:	0800b963 	.word	0x0800b963
 800b100:	0800b99b 	.word	0x0800b99b
 800b104:	0800b9bf 	.word	0x0800b9bf

0800b108 <_cleanup_r>:
 800b108:	4901      	ldr	r1, [pc, #4]	; (800b110 <_cleanup_r+0x8>)
 800b10a:	f000 b8af 	b.w	800b26c <_fwalk_reent>
 800b10e:	bf00      	nop
 800b110:	0800b049 	.word	0x0800b049

0800b114 <__sfmoreglue>:
 800b114:	2268      	movs	r2, #104	; 0x68
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	1e4d      	subs	r5, r1, #1
 800b11a:	4355      	muls	r5, r2
 800b11c:	460e      	mov	r6, r1
 800b11e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b122:	f000 f9bb 	bl	800b49c <_malloc_r>
 800b126:	4604      	mov	r4, r0
 800b128:	b140      	cbz	r0, 800b13c <__sfmoreglue+0x28>
 800b12a:	2100      	movs	r1, #0
 800b12c:	e9c0 1600 	strd	r1, r6, [r0]
 800b130:	300c      	adds	r0, #12
 800b132:	60a0      	str	r0, [r4, #8]
 800b134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b138:	f7ff fb26 	bl	800a788 <memset>
 800b13c:	4620      	mov	r0, r4
 800b13e:	bd70      	pop	{r4, r5, r6, pc}

0800b140 <__sfp_lock_acquire>:
 800b140:	4801      	ldr	r0, [pc, #4]	; (800b148 <__sfp_lock_acquire+0x8>)
 800b142:	f000 b8b3 	b.w	800b2ac <__retarget_lock_acquire_recursive>
 800b146:	bf00      	nop
 800b148:	20007fdd 	.word	0x20007fdd

0800b14c <__sfp_lock_release>:
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <__sfp_lock_release+0x8>)
 800b14e:	f000 b8ae 	b.w	800b2ae <__retarget_lock_release_recursive>
 800b152:	bf00      	nop
 800b154:	20007fdd 	.word	0x20007fdd

0800b158 <__sinit_lock_acquire>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__sinit_lock_acquire+0x8>)
 800b15a:	f000 b8a7 	b.w	800b2ac <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	20007fde 	.word	0x20007fde

0800b164 <__sinit_lock_release>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__sinit_lock_release+0x8>)
 800b166:	f000 b8a2 	b.w	800b2ae <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	20007fde 	.word	0x20007fde

0800b170 <__sinit>:
 800b170:	b510      	push	{r4, lr}
 800b172:	4604      	mov	r4, r0
 800b174:	f7ff fff0 	bl	800b158 <__sinit_lock_acquire>
 800b178:	69a3      	ldr	r3, [r4, #24]
 800b17a:	b11b      	cbz	r3, 800b184 <__sinit+0x14>
 800b17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b180:	f7ff bff0 	b.w	800b164 <__sinit_lock_release>
 800b184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b188:	6523      	str	r3, [r4, #80]	; 0x50
 800b18a:	4b13      	ldr	r3, [pc, #76]	; (800b1d8 <__sinit+0x68>)
 800b18c:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <__sinit+0x6c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	62a2      	str	r2, [r4, #40]	; 0x28
 800b192:	42a3      	cmp	r3, r4
 800b194:	bf08      	it	eq
 800b196:	2301      	moveq	r3, #1
 800b198:	4620      	mov	r0, r4
 800b19a:	bf08      	it	eq
 800b19c:	61a3      	streq	r3, [r4, #24]
 800b19e:	f000 f81f 	bl	800b1e0 <__sfp>
 800b1a2:	6060      	str	r0, [r4, #4]
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f000 f81b 	bl	800b1e0 <__sfp>
 800b1aa:	60a0      	str	r0, [r4, #8]
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 f817 	bl	800b1e0 <__sfp>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2104      	movs	r1, #4
 800b1b6:	60e0      	str	r0, [r4, #12]
 800b1b8:	6860      	ldr	r0, [r4, #4]
 800b1ba:	f7ff ff81 	bl	800b0c0 <std>
 800b1be:	2201      	movs	r2, #1
 800b1c0:	2109      	movs	r1, #9
 800b1c2:	68a0      	ldr	r0, [r4, #8]
 800b1c4:	f7ff ff7c 	bl	800b0c0 <std>
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	2112      	movs	r1, #18
 800b1cc:	68e0      	ldr	r0, [r4, #12]
 800b1ce:	f7ff ff77 	bl	800b0c0 <std>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	61a3      	str	r3, [r4, #24]
 800b1d6:	e7d1      	b.n	800b17c <__sinit+0xc>
 800b1d8:	0800d580 	.word	0x0800d580
 800b1dc:	0800b109 	.word	0x0800b109

0800b1e0 <__sfp>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	f7ff ffac 	bl	800b140 <__sfp_lock_acquire>
 800b1e8:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <__sfp+0x84>)
 800b1ea:	681e      	ldr	r6, [r3, #0]
 800b1ec:	69b3      	ldr	r3, [r6, #24]
 800b1ee:	b913      	cbnz	r3, 800b1f6 <__sfp+0x16>
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7ff ffbd 	bl	800b170 <__sinit>
 800b1f6:	3648      	adds	r6, #72	; 0x48
 800b1f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	d503      	bpl.n	800b208 <__sfp+0x28>
 800b200:	6833      	ldr	r3, [r6, #0]
 800b202:	b30b      	cbz	r3, 800b248 <__sfp+0x68>
 800b204:	6836      	ldr	r6, [r6, #0]
 800b206:	e7f7      	b.n	800b1f8 <__sfp+0x18>
 800b208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b20c:	b9d5      	cbnz	r5, 800b244 <__sfp+0x64>
 800b20e:	4b16      	ldr	r3, [pc, #88]	; (800b268 <__sfp+0x88>)
 800b210:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b214:	60e3      	str	r3, [r4, #12]
 800b216:	6665      	str	r5, [r4, #100]	; 0x64
 800b218:	f000 f847 	bl	800b2aa <__retarget_lock_init_recursive>
 800b21c:	f7ff ff96 	bl	800b14c <__sfp_lock_release>
 800b220:	2208      	movs	r2, #8
 800b222:	4629      	mov	r1, r5
 800b224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b22c:	6025      	str	r5, [r4, #0]
 800b22e:	61a5      	str	r5, [r4, #24]
 800b230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b234:	f7ff faa8 	bl	800a788 <memset>
 800b238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b23c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b240:	4620      	mov	r0, r4
 800b242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b244:	3468      	adds	r4, #104	; 0x68
 800b246:	e7d9      	b.n	800b1fc <__sfp+0x1c>
 800b248:	2104      	movs	r1, #4
 800b24a:	4638      	mov	r0, r7
 800b24c:	f7ff ff62 	bl	800b114 <__sfmoreglue>
 800b250:	4604      	mov	r4, r0
 800b252:	6030      	str	r0, [r6, #0]
 800b254:	2800      	cmp	r0, #0
 800b256:	d1d5      	bne.n	800b204 <__sfp+0x24>
 800b258:	f7ff ff78 	bl	800b14c <__sfp_lock_release>
 800b25c:	230c      	movs	r3, #12
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	e7ee      	b.n	800b240 <__sfp+0x60>
 800b262:	bf00      	nop
 800b264:	0800d580 	.word	0x0800d580
 800b268:	ffff0001 	.word	0xffff0001

0800b26c <_fwalk_reent>:
 800b26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b270:	4606      	mov	r6, r0
 800b272:	4688      	mov	r8, r1
 800b274:	2700      	movs	r7, #0
 800b276:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b27a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b27e:	f1b9 0901 	subs.w	r9, r9, #1
 800b282:	d505      	bpl.n	800b290 <_fwalk_reent+0x24>
 800b284:	6824      	ldr	r4, [r4, #0]
 800b286:	2c00      	cmp	r4, #0
 800b288:	d1f7      	bne.n	800b27a <_fwalk_reent+0xe>
 800b28a:	4638      	mov	r0, r7
 800b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b290:	89ab      	ldrh	r3, [r5, #12]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d907      	bls.n	800b2a6 <_fwalk_reent+0x3a>
 800b296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b29a:	3301      	adds	r3, #1
 800b29c:	d003      	beq.n	800b2a6 <_fwalk_reent+0x3a>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	47c0      	blx	r8
 800b2a4:	4307      	orrs	r7, r0
 800b2a6:	3568      	adds	r5, #104	; 0x68
 800b2a8:	e7e9      	b.n	800b27e <_fwalk_reent+0x12>

0800b2aa <__retarget_lock_init_recursive>:
 800b2aa:	4770      	bx	lr

0800b2ac <__retarget_lock_acquire_recursive>:
 800b2ac:	4770      	bx	lr

0800b2ae <__retarget_lock_release_recursive>:
 800b2ae:	4770      	bx	lr

0800b2b0 <__swhatbuf_r>:
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	460e      	mov	r6, r1
 800b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b8:	4614      	mov	r4, r2
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	461d      	mov	r5, r3
 800b2be:	b096      	sub	sp, #88	; 0x58
 800b2c0:	da08      	bge.n	800b2d4 <__swhatbuf_r+0x24>
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2c8:	602a      	str	r2, [r5, #0]
 800b2ca:	061a      	lsls	r2, r3, #24
 800b2cc:	d410      	bmi.n	800b2f0 <__swhatbuf_r+0x40>
 800b2ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d2:	e00e      	b.n	800b2f2 <__swhatbuf_r+0x42>
 800b2d4:	466a      	mov	r2, sp
 800b2d6:	f000 fb99 	bl	800ba0c <_fstat_r>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	dbf1      	blt.n	800b2c2 <__swhatbuf_r+0x12>
 800b2de:	9a01      	ldr	r2, [sp, #4]
 800b2e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2e8:	425a      	negs	r2, r3
 800b2ea:	415a      	adcs	r2, r3
 800b2ec:	602a      	str	r2, [r5, #0]
 800b2ee:	e7ee      	b.n	800b2ce <__swhatbuf_r+0x1e>
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	b016      	add	sp, #88	; 0x58
 800b2f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2fc <__smakebuf_r>:
 800b2fc:	898b      	ldrh	r3, [r1, #12]
 800b2fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b300:	079d      	lsls	r5, r3, #30
 800b302:	4606      	mov	r6, r0
 800b304:	460c      	mov	r4, r1
 800b306:	d507      	bpl.n	800b318 <__smakebuf_r+0x1c>
 800b308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	2301      	movs	r3, #1
 800b312:	6163      	str	r3, [r4, #20]
 800b314:	b002      	add	sp, #8
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	466a      	mov	r2, sp
 800b31a:	ab01      	add	r3, sp, #4
 800b31c:	f7ff ffc8 	bl	800b2b0 <__swhatbuf_r>
 800b320:	9900      	ldr	r1, [sp, #0]
 800b322:	4605      	mov	r5, r0
 800b324:	4630      	mov	r0, r6
 800b326:	f000 f8b9 	bl	800b49c <_malloc_r>
 800b32a:	b948      	cbnz	r0, 800b340 <__smakebuf_r+0x44>
 800b32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b330:	059a      	lsls	r2, r3, #22
 800b332:	d4ef      	bmi.n	800b314 <__smakebuf_r+0x18>
 800b334:	f023 0303 	bic.w	r3, r3, #3
 800b338:	f043 0302 	orr.w	r3, r3, #2
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	e7e3      	b.n	800b308 <__smakebuf_r+0xc>
 800b340:	4b0d      	ldr	r3, [pc, #52]	; (800b378 <__smakebuf_r+0x7c>)
 800b342:	62b3      	str	r3, [r6, #40]	; 0x28
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	6020      	str	r0, [r4, #0]
 800b348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b34c:	81a3      	strh	r3, [r4, #12]
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	6120      	str	r0, [r4, #16]
 800b352:	6163      	str	r3, [r4, #20]
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	b15b      	cbz	r3, 800b370 <__smakebuf_r+0x74>
 800b358:	4630      	mov	r0, r6
 800b35a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b35e:	f000 fb67 	bl	800ba30 <_isatty_r>
 800b362:	b128      	cbz	r0, 800b370 <__smakebuf_r+0x74>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f023 0303 	bic.w	r3, r3, #3
 800b36a:	f043 0301 	orr.w	r3, r3, #1
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	89a0      	ldrh	r0, [r4, #12]
 800b372:	4305      	orrs	r5, r0
 800b374:	81a5      	strh	r5, [r4, #12]
 800b376:	e7cd      	b.n	800b314 <__smakebuf_r+0x18>
 800b378:	0800b109 	.word	0x0800b109

0800b37c <memchr>:
 800b37c:	4603      	mov	r3, r0
 800b37e:	b510      	push	{r4, lr}
 800b380:	b2c9      	uxtb	r1, r1
 800b382:	4402      	add	r2, r0
 800b384:	4293      	cmp	r3, r2
 800b386:	4618      	mov	r0, r3
 800b388:	d101      	bne.n	800b38e <memchr+0x12>
 800b38a:	2000      	movs	r0, #0
 800b38c:	e003      	b.n	800b396 <memchr+0x1a>
 800b38e:	7804      	ldrb	r4, [r0, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	428c      	cmp	r4, r1
 800b394:	d1f6      	bne.n	800b384 <memchr+0x8>
 800b396:	bd10      	pop	{r4, pc}

0800b398 <memmove>:
 800b398:	4288      	cmp	r0, r1
 800b39a:	b510      	push	{r4, lr}
 800b39c:	eb01 0402 	add.w	r4, r1, r2
 800b3a0:	d902      	bls.n	800b3a8 <memmove+0x10>
 800b3a2:	4284      	cmp	r4, r0
 800b3a4:	4623      	mov	r3, r4
 800b3a6:	d807      	bhi.n	800b3b8 <memmove+0x20>
 800b3a8:	1e43      	subs	r3, r0, #1
 800b3aa:	42a1      	cmp	r1, r4
 800b3ac:	d008      	beq.n	800b3c0 <memmove+0x28>
 800b3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3b6:	e7f8      	b.n	800b3aa <memmove+0x12>
 800b3b8:	4601      	mov	r1, r0
 800b3ba:	4402      	add	r2, r0
 800b3bc:	428a      	cmp	r2, r1
 800b3be:	d100      	bne.n	800b3c2 <memmove+0x2a>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ca:	e7f7      	b.n	800b3bc <memmove+0x24>

0800b3cc <_free_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	d040      	beq.n	800b456 <_free_r+0x8a>
 800b3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d8:	1f0c      	subs	r4, r1, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bfb8      	it	lt
 800b3de:	18e4      	addlt	r4, r4, r3
 800b3e0:	f000 fb48 	bl	800ba74 <__malloc_lock>
 800b3e4:	4a1c      	ldr	r2, [pc, #112]	; (800b458 <_free_r+0x8c>)
 800b3e6:	6813      	ldr	r3, [r2, #0]
 800b3e8:	b933      	cbnz	r3, 800b3f8 <_free_r+0x2c>
 800b3ea:	6063      	str	r3, [r4, #4]
 800b3ec:	6014      	str	r4, [r2, #0]
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f4:	f000 bb44 	b.w	800ba80 <__malloc_unlock>
 800b3f8:	42a3      	cmp	r3, r4
 800b3fa:	d908      	bls.n	800b40e <_free_r+0x42>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	1821      	adds	r1, r4, r0
 800b400:	428b      	cmp	r3, r1
 800b402:	bf01      	itttt	eq
 800b404:	6819      	ldreq	r1, [r3, #0]
 800b406:	685b      	ldreq	r3, [r3, #4]
 800b408:	1809      	addeq	r1, r1, r0
 800b40a:	6021      	streq	r1, [r4, #0]
 800b40c:	e7ed      	b.n	800b3ea <_free_r+0x1e>
 800b40e:	461a      	mov	r2, r3
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	b10b      	cbz	r3, 800b418 <_free_r+0x4c>
 800b414:	42a3      	cmp	r3, r4
 800b416:	d9fa      	bls.n	800b40e <_free_r+0x42>
 800b418:	6811      	ldr	r1, [r2, #0]
 800b41a:	1850      	adds	r0, r2, r1
 800b41c:	42a0      	cmp	r0, r4
 800b41e:	d10b      	bne.n	800b438 <_free_r+0x6c>
 800b420:	6820      	ldr	r0, [r4, #0]
 800b422:	4401      	add	r1, r0
 800b424:	1850      	adds	r0, r2, r1
 800b426:	4283      	cmp	r3, r0
 800b428:	6011      	str	r1, [r2, #0]
 800b42a:	d1e0      	bne.n	800b3ee <_free_r+0x22>
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4401      	add	r1, r0
 800b432:	6011      	str	r1, [r2, #0]
 800b434:	6053      	str	r3, [r2, #4]
 800b436:	e7da      	b.n	800b3ee <_free_r+0x22>
 800b438:	d902      	bls.n	800b440 <_free_r+0x74>
 800b43a:	230c      	movs	r3, #12
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	e7d6      	b.n	800b3ee <_free_r+0x22>
 800b440:	6820      	ldr	r0, [r4, #0]
 800b442:	1821      	adds	r1, r4, r0
 800b444:	428b      	cmp	r3, r1
 800b446:	bf01      	itttt	eq
 800b448:	6819      	ldreq	r1, [r3, #0]
 800b44a:	685b      	ldreq	r3, [r3, #4]
 800b44c:	1809      	addeq	r1, r1, r0
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	6054      	str	r4, [r2, #4]
 800b454:	e7cb      	b.n	800b3ee <_free_r+0x22>
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20007fe0 	.word	0x20007fe0

0800b45c <sbrk_aligned>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	4e0e      	ldr	r6, [pc, #56]	; (800b498 <sbrk_aligned+0x3c>)
 800b460:	460c      	mov	r4, r1
 800b462:	6831      	ldr	r1, [r6, #0]
 800b464:	4605      	mov	r5, r0
 800b466:	b911      	cbnz	r1, 800b46e <sbrk_aligned+0x12>
 800b468:	f000 fa16 	bl	800b898 <_sbrk_r>
 800b46c:	6030      	str	r0, [r6, #0]
 800b46e:	4621      	mov	r1, r4
 800b470:	4628      	mov	r0, r5
 800b472:	f000 fa11 	bl	800b898 <_sbrk_r>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	d00a      	beq.n	800b490 <sbrk_aligned+0x34>
 800b47a:	1cc4      	adds	r4, r0, #3
 800b47c:	f024 0403 	bic.w	r4, r4, #3
 800b480:	42a0      	cmp	r0, r4
 800b482:	d007      	beq.n	800b494 <sbrk_aligned+0x38>
 800b484:	1a21      	subs	r1, r4, r0
 800b486:	4628      	mov	r0, r5
 800b488:	f000 fa06 	bl	800b898 <_sbrk_r>
 800b48c:	3001      	adds	r0, #1
 800b48e:	d101      	bne.n	800b494 <sbrk_aligned+0x38>
 800b490:	f04f 34ff 	mov.w	r4, #4294967295
 800b494:	4620      	mov	r0, r4
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	20007fe4 	.word	0x20007fe4

0800b49c <_malloc_r>:
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	1ccd      	adds	r5, r1, #3
 800b4a2:	f025 0503 	bic.w	r5, r5, #3
 800b4a6:	3508      	adds	r5, #8
 800b4a8:	2d0c      	cmp	r5, #12
 800b4aa:	bf38      	it	cc
 800b4ac:	250c      	movcc	r5, #12
 800b4ae:	2d00      	cmp	r5, #0
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	db01      	blt.n	800b4b8 <_malloc_r+0x1c>
 800b4b4:	42a9      	cmp	r1, r5
 800b4b6:	d905      	bls.n	800b4c4 <_malloc_r+0x28>
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	2600      	movs	r6, #0
 800b4bc:	603b      	str	r3, [r7, #0]
 800b4be:	4630      	mov	r0, r6
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	4e2e      	ldr	r6, [pc, #184]	; (800b580 <_malloc_r+0xe4>)
 800b4c6:	f000 fad5 	bl	800ba74 <__malloc_lock>
 800b4ca:	6833      	ldr	r3, [r6, #0]
 800b4cc:	461c      	mov	r4, r3
 800b4ce:	bb34      	cbnz	r4, 800b51e <_malloc_r+0x82>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7ff ffc2 	bl	800b45c <sbrk_aligned>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	4604      	mov	r4, r0
 800b4dc:	d14d      	bne.n	800b57a <_malloc_r+0xde>
 800b4de:	6834      	ldr	r4, [r6, #0]
 800b4e0:	4626      	mov	r6, r4
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	d140      	bne.n	800b568 <_malloc_r+0xcc>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	eb04 0803 	add.w	r8, r4, r3
 800b4f0:	f000 f9d2 	bl	800b898 <_sbrk_r>
 800b4f4:	4580      	cmp	r8, r0
 800b4f6:	d13a      	bne.n	800b56e <_malloc_r+0xd2>
 800b4f8:	6821      	ldr	r1, [r4, #0]
 800b4fa:	3503      	adds	r5, #3
 800b4fc:	1a6d      	subs	r5, r5, r1
 800b4fe:	f025 0503 	bic.w	r5, r5, #3
 800b502:	3508      	adds	r5, #8
 800b504:	2d0c      	cmp	r5, #12
 800b506:	bf38      	it	cc
 800b508:	250c      	movcc	r5, #12
 800b50a:	4638      	mov	r0, r7
 800b50c:	4629      	mov	r1, r5
 800b50e:	f7ff ffa5 	bl	800b45c <sbrk_aligned>
 800b512:	3001      	adds	r0, #1
 800b514:	d02b      	beq.n	800b56e <_malloc_r+0xd2>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	442b      	add	r3, r5
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	e00e      	b.n	800b53c <_malloc_r+0xa0>
 800b51e:	6822      	ldr	r2, [r4, #0]
 800b520:	1b52      	subs	r2, r2, r5
 800b522:	d41e      	bmi.n	800b562 <_malloc_r+0xc6>
 800b524:	2a0b      	cmp	r2, #11
 800b526:	d916      	bls.n	800b556 <_malloc_r+0xba>
 800b528:	1961      	adds	r1, r4, r5
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	6025      	str	r5, [r4, #0]
 800b52e:	bf18      	it	ne
 800b530:	6059      	strne	r1, [r3, #4]
 800b532:	6863      	ldr	r3, [r4, #4]
 800b534:	bf08      	it	eq
 800b536:	6031      	streq	r1, [r6, #0]
 800b538:	5162      	str	r2, [r4, r5]
 800b53a:	604b      	str	r3, [r1, #4]
 800b53c:	4638      	mov	r0, r7
 800b53e:	f104 060b 	add.w	r6, r4, #11
 800b542:	f000 fa9d 	bl	800ba80 <__malloc_unlock>
 800b546:	f026 0607 	bic.w	r6, r6, #7
 800b54a:	1d23      	adds	r3, r4, #4
 800b54c:	1af2      	subs	r2, r6, r3
 800b54e:	d0b6      	beq.n	800b4be <_malloc_r+0x22>
 800b550:	1b9b      	subs	r3, r3, r6
 800b552:	50a3      	str	r3, [r4, r2]
 800b554:	e7b3      	b.n	800b4be <_malloc_r+0x22>
 800b556:	6862      	ldr	r2, [r4, #4]
 800b558:	42a3      	cmp	r3, r4
 800b55a:	bf0c      	ite	eq
 800b55c:	6032      	streq	r2, [r6, #0]
 800b55e:	605a      	strne	r2, [r3, #4]
 800b560:	e7ec      	b.n	800b53c <_malloc_r+0xa0>
 800b562:	4623      	mov	r3, r4
 800b564:	6864      	ldr	r4, [r4, #4]
 800b566:	e7b2      	b.n	800b4ce <_malloc_r+0x32>
 800b568:	4634      	mov	r4, r6
 800b56a:	6876      	ldr	r6, [r6, #4]
 800b56c:	e7b9      	b.n	800b4e2 <_malloc_r+0x46>
 800b56e:	230c      	movs	r3, #12
 800b570:	4638      	mov	r0, r7
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	f000 fa84 	bl	800ba80 <__malloc_unlock>
 800b578:	e7a1      	b.n	800b4be <_malloc_r+0x22>
 800b57a:	6025      	str	r5, [r4, #0]
 800b57c:	e7de      	b.n	800b53c <_malloc_r+0xa0>
 800b57e:	bf00      	nop
 800b580:	20007fe0 	.word	0x20007fe0

0800b584 <_realloc_r>:
 800b584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b588:	4680      	mov	r8, r0
 800b58a:	4614      	mov	r4, r2
 800b58c:	460e      	mov	r6, r1
 800b58e:	b921      	cbnz	r1, 800b59a <_realloc_r+0x16>
 800b590:	4611      	mov	r1, r2
 800b592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b596:	f7ff bf81 	b.w	800b49c <_malloc_r>
 800b59a:	b92a      	cbnz	r2, 800b5a8 <_realloc_r+0x24>
 800b59c:	f7ff ff16 	bl	800b3cc <_free_r>
 800b5a0:	4625      	mov	r5, r4
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	f000 fa70 	bl	800ba8c <_malloc_usable_size_r>
 800b5ac:	4284      	cmp	r4, r0
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	d802      	bhi.n	800b5b8 <_realloc_r+0x34>
 800b5b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5b6:	d812      	bhi.n	800b5de <_realloc_r+0x5a>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	f7ff ff6e 	bl	800b49c <_malloc_r>
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0ed      	beq.n	800b5a2 <_realloc_r+0x1e>
 800b5c6:	42bc      	cmp	r4, r7
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	bf28      	it	cs
 800b5ce:	463a      	movcs	r2, r7
 800b5d0:	f7ff f8cc 	bl	800a76c <memcpy>
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f7ff fef8 	bl	800b3cc <_free_r>
 800b5dc:	e7e1      	b.n	800b5a2 <_realloc_r+0x1e>
 800b5de:	4635      	mov	r5, r6
 800b5e0:	e7df      	b.n	800b5a2 <_realloc_r+0x1e>

0800b5e2 <__ssputs_r>:
 800b5e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e6:	688e      	ldr	r6, [r1, #8]
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	429e      	cmp	r6, r3
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	4690      	mov	r8, r2
 800b5f0:	461f      	mov	r7, r3
 800b5f2:	d838      	bhi.n	800b666 <__ssputs_r+0x84>
 800b5f4:	898a      	ldrh	r2, [r1, #12]
 800b5f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5fa:	d032      	beq.n	800b662 <__ssputs_r+0x80>
 800b5fc:	6825      	ldr	r5, [r4, #0]
 800b5fe:	6909      	ldr	r1, [r1, #16]
 800b600:	3301      	adds	r3, #1
 800b602:	eba5 0901 	sub.w	r9, r5, r1
 800b606:	6965      	ldr	r5, [r4, #20]
 800b608:	444b      	add	r3, r9
 800b60a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b60e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b612:	106d      	asrs	r5, r5, #1
 800b614:	429d      	cmp	r5, r3
 800b616:	bf38      	it	cc
 800b618:	461d      	movcc	r5, r3
 800b61a:	0553      	lsls	r3, r2, #21
 800b61c:	d531      	bpl.n	800b682 <__ssputs_r+0xa0>
 800b61e:	4629      	mov	r1, r5
 800b620:	f7ff ff3c 	bl	800b49c <_malloc_r>
 800b624:	4606      	mov	r6, r0
 800b626:	b950      	cbnz	r0, 800b63e <__ssputs_r+0x5c>
 800b628:	230c      	movs	r3, #12
 800b62a:	f04f 30ff 	mov.w	r0, #4294967295
 800b62e:	f8ca 3000 	str.w	r3, [sl]
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b638:	81a3      	strh	r3, [r4, #12]
 800b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63e:	464a      	mov	r2, r9
 800b640:	6921      	ldr	r1, [r4, #16]
 800b642:	f7ff f893 	bl	800a76c <memcpy>
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	6126      	str	r6, [r4, #16]
 800b654:	444e      	add	r6, r9
 800b656:	6026      	str	r6, [r4, #0]
 800b658:	463e      	mov	r6, r7
 800b65a:	6165      	str	r5, [r4, #20]
 800b65c:	eba5 0509 	sub.w	r5, r5, r9
 800b660:	60a5      	str	r5, [r4, #8]
 800b662:	42be      	cmp	r6, r7
 800b664:	d900      	bls.n	800b668 <__ssputs_r+0x86>
 800b666:	463e      	mov	r6, r7
 800b668:	4632      	mov	r2, r6
 800b66a:	4641      	mov	r1, r8
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	f7ff fe93 	bl	800b398 <memmove>
 800b672:	68a3      	ldr	r3, [r4, #8]
 800b674:	2000      	movs	r0, #0
 800b676:	1b9b      	subs	r3, r3, r6
 800b678:	60a3      	str	r3, [r4, #8]
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	4433      	add	r3, r6
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	e7db      	b.n	800b63a <__ssputs_r+0x58>
 800b682:	462a      	mov	r2, r5
 800b684:	f7ff ff7e 	bl	800b584 <_realloc_r>
 800b688:	4606      	mov	r6, r0
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d1e1      	bne.n	800b652 <__ssputs_r+0x70>
 800b68e:	4650      	mov	r0, sl
 800b690:	6921      	ldr	r1, [r4, #16]
 800b692:	f7ff fe9b 	bl	800b3cc <_free_r>
 800b696:	e7c7      	b.n	800b628 <__ssputs_r+0x46>

0800b698 <_svfiprintf_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	4698      	mov	r8, r3
 800b69e:	898b      	ldrh	r3, [r1, #12]
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	061b      	lsls	r3, r3, #24
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	4614      	mov	r4, r2
 800b6a8:	b09d      	sub	sp, #116	; 0x74
 800b6aa:	d50e      	bpl.n	800b6ca <_svfiprintf_r+0x32>
 800b6ac:	690b      	ldr	r3, [r1, #16]
 800b6ae:	b963      	cbnz	r3, 800b6ca <_svfiprintf_r+0x32>
 800b6b0:	2140      	movs	r1, #64	; 0x40
 800b6b2:	f7ff fef3 	bl	800b49c <_malloc_r>
 800b6b6:	6028      	str	r0, [r5, #0]
 800b6b8:	6128      	str	r0, [r5, #16]
 800b6ba:	b920      	cbnz	r0, 800b6c6 <_svfiprintf_r+0x2e>
 800b6bc:	230c      	movs	r3, #12
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	e0d1      	b.n	800b86a <_svfiprintf_r+0x1d2>
 800b6c6:	2340      	movs	r3, #64	; 0x40
 800b6c8:	616b      	str	r3, [r5, #20]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ce:	2320      	movs	r3, #32
 800b6d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6d4:	2330      	movs	r3, #48	; 0x30
 800b6d6:	f04f 0901 	mov.w	r9, #1
 800b6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b884 <_svfiprintf_r+0x1ec>
 800b6e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ee:	b10a      	cbz	r2, 800b6f4 <_svfiprintf_r+0x5c>
 800b6f0:	2a25      	cmp	r2, #37	; 0x25
 800b6f2:	d1f9      	bne.n	800b6e8 <_svfiprintf_r+0x50>
 800b6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6f8:	d00b      	beq.n	800b712 <_svfiprintf_r+0x7a>
 800b6fa:	465b      	mov	r3, fp
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff ff6e 	bl	800b5e2 <__ssputs_r>
 800b706:	3001      	adds	r0, #1
 800b708:	f000 80aa 	beq.w	800b860 <_svfiprintf_r+0x1c8>
 800b70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b70e:	445a      	add	r2, fp
 800b710:	9209      	str	r2, [sp, #36]	; 0x24
 800b712:	f89a 3000 	ldrb.w	r3, [sl]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 80a2 	beq.w	800b860 <_svfiprintf_r+0x1c8>
 800b71c:	2300      	movs	r3, #0
 800b71e:	f04f 32ff 	mov.w	r2, #4294967295
 800b722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b726:	f10a 0a01 	add.w	sl, sl, #1
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	9307      	str	r3, [sp, #28]
 800b72e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b732:	931a      	str	r3, [sp, #104]	; 0x68
 800b734:	4654      	mov	r4, sl
 800b736:	2205      	movs	r2, #5
 800b738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73c:	4851      	ldr	r0, [pc, #324]	; (800b884 <_svfiprintf_r+0x1ec>)
 800b73e:	f7ff fe1d 	bl	800b37c <memchr>
 800b742:	9a04      	ldr	r2, [sp, #16]
 800b744:	b9d8      	cbnz	r0, 800b77e <_svfiprintf_r+0xe6>
 800b746:	06d0      	lsls	r0, r2, #27
 800b748:	bf44      	itt	mi
 800b74a:	2320      	movmi	r3, #32
 800b74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b750:	0711      	lsls	r1, r2, #28
 800b752:	bf44      	itt	mi
 800b754:	232b      	movmi	r3, #43	; 0x2b
 800b756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b75a:	f89a 3000 	ldrb.w	r3, [sl]
 800b75e:	2b2a      	cmp	r3, #42	; 0x2a
 800b760:	d015      	beq.n	800b78e <_svfiprintf_r+0xf6>
 800b762:	4654      	mov	r4, sl
 800b764:	2000      	movs	r0, #0
 800b766:	f04f 0c0a 	mov.w	ip, #10
 800b76a:	9a07      	ldr	r2, [sp, #28]
 800b76c:	4621      	mov	r1, r4
 800b76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b772:	3b30      	subs	r3, #48	; 0x30
 800b774:	2b09      	cmp	r3, #9
 800b776:	d94e      	bls.n	800b816 <_svfiprintf_r+0x17e>
 800b778:	b1b0      	cbz	r0, 800b7a8 <_svfiprintf_r+0x110>
 800b77a:	9207      	str	r2, [sp, #28]
 800b77c:	e014      	b.n	800b7a8 <_svfiprintf_r+0x110>
 800b77e:	eba0 0308 	sub.w	r3, r0, r8
 800b782:	fa09 f303 	lsl.w	r3, r9, r3
 800b786:	4313      	orrs	r3, r2
 800b788:	46a2      	mov	sl, r4
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	e7d2      	b.n	800b734 <_svfiprintf_r+0x9c>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	1d19      	adds	r1, r3, #4
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	9103      	str	r1, [sp, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfbb      	ittet	lt
 800b79a:	425b      	neglt	r3, r3
 800b79c:	f042 0202 	orrlt.w	r2, r2, #2
 800b7a0:	9307      	strge	r3, [sp, #28]
 800b7a2:	9307      	strlt	r3, [sp, #28]
 800b7a4:	bfb8      	it	lt
 800b7a6:	9204      	strlt	r2, [sp, #16]
 800b7a8:	7823      	ldrb	r3, [r4, #0]
 800b7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ac:	d10c      	bne.n	800b7c8 <_svfiprintf_r+0x130>
 800b7ae:	7863      	ldrb	r3, [r4, #1]
 800b7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b2:	d135      	bne.n	800b820 <_svfiprintf_r+0x188>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	3402      	adds	r4, #2
 800b7b8:	1d1a      	adds	r2, r3, #4
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	9203      	str	r2, [sp, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	bfb8      	it	lt
 800b7c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b888 <_svfiprintf_r+0x1f0>
 800b7cc:	2203      	movs	r2, #3
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	7821      	ldrb	r1, [r4, #0]
 800b7d2:	f7ff fdd3 	bl	800b37c <memchr>
 800b7d6:	b140      	cbz	r0, 800b7ea <_svfiprintf_r+0x152>
 800b7d8:	2340      	movs	r3, #64	; 0x40
 800b7da:	eba0 000a 	sub.w	r0, r0, sl
 800b7de:	fa03 f000 	lsl.w	r0, r3, r0
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	3401      	adds	r4, #1
 800b7e6:	4303      	orrs	r3, r0
 800b7e8:	9304      	str	r3, [sp, #16]
 800b7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ee:	2206      	movs	r2, #6
 800b7f0:	4826      	ldr	r0, [pc, #152]	; (800b88c <_svfiprintf_r+0x1f4>)
 800b7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7f6:	f7ff fdc1 	bl	800b37c <memchr>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d038      	beq.n	800b870 <_svfiprintf_r+0x1d8>
 800b7fe:	4b24      	ldr	r3, [pc, #144]	; (800b890 <_svfiprintf_r+0x1f8>)
 800b800:	bb1b      	cbnz	r3, 800b84a <_svfiprintf_r+0x1b2>
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	3307      	adds	r3, #7
 800b806:	f023 0307 	bic.w	r3, r3, #7
 800b80a:	3308      	adds	r3, #8
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	4433      	add	r3, r6
 800b812:	9309      	str	r3, [sp, #36]	; 0x24
 800b814:	e767      	b.n	800b6e6 <_svfiprintf_r+0x4e>
 800b816:	460c      	mov	r4, r1
 800b818:	2001      	movs	r0, #1
 800b81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b81e:	e7a5      	b.n	800b76c <_svfiprintf_r+0xd4>
 800b820:	2300      	movs	r3, #0
 800b822:	f04f 0c0a 	mov.w	ip, #10
 800b826:	4619      	mov	r1, r3
 800b828:	3401      	adds	r4, #1
 800b82a:	9305      	str	r3, [sp, #20]
 800b82c:	4620      	mov	r0, r4
 800b82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b832:	3a30      	subs	r2, #48	; 0x30
 800b834:	2a09      	cmp	r2, #9
 800b836:	d903      	bls.n	800b840 <_svfiprintf_r+0x1a8>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0c5      	beq.n	800b7c8 <_svfiprintf_r+0x130>
 800b83c:	9105      	str	r1, [sp, #20]
 800b83e:	e7c3      	b.n	800b7c8 <_svfiprintf_r+0x130>
 800b840:	4604      	mov	r4, r0
 800b842:	2301      	movs	r3, #1
 800b844:	fb0c 2101 	mla	r1, ip, r1, r2
 800b848:	e7f0      	b.n	800b82c <_svfiprintf_r+0x194>
 800b84a:	ab03      	add	r3, sp, #12
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	462a      	mov	r2, r5
 800b850:	4638      	mov	r0, r7
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <_svfiprintf_r+0x1fc>)
 800b854:	a904      	add	r1, sp, #16
 800b856:	f3af 8000 	nop.w
 800b85a:	1c42      	adds	r2, r0, #1
 800b85c:	4606      	mov	r6, r0
 800b85e:	d1d6      	bne.n	800b80e <_svfiprintf_r+0x176>
 800b860:	89ab      	ldrh	r3, [r5, #12]
 800b862:	065b      	lsls	r3, r3, #25
 800b864:	f53f af2c 	bmi.w	800b6c0 <_svfiprintf_r+0x28>
 800b868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b86a:	b01d      	add	sp, #116	; 0x74
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	ab03      	add	r3, sp, #12
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	462a      	mov	r2, r5
 800b876:	4638      	mov	r0, r7
 800b878:	4b06      	ldr	r3, [pc, #24]	; (800b894 <_svfiprintf_r+0x1fc>)
 800b87a:	a904      	add	r1, sp, #16
 800b87c:	f7ff f954 	bl	800ab28 <_printf_i>
 800b880:	e7eb      	b.n	800b85a <_svfiprintf_r+0x1c2>
 800b882:	bf00      	nop
 800b884:	0800d584 	.word	0x0800d584
 800b888:	0800d58a 	.word	0x0800d58a
 800b88c:	0800d58e 	.word	0x0800d58e
 800b890:	00000000 	.word	0x00000000
 800b894:	0800b5e3 	.word	0x0800b5e3

0800b898 <_sbrk_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	2300      	movs	r3, #0
 800b89c:	4d05      	ldr	r5, [pc, #20]	; (800b8b4 <_sbrk_r+0x1c>)
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	f7fa fd50 	bl	8006348 <_sbrk>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	d102      	bne.n	800b8b2 <_sbrk_r+0x1a>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	b103      	cbz	r3, 800b8b2 <_sbrk_r+0x1a>
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	bd38      	pop	{r3, r4, r5, pc}
 800b8b4:	20007fe8 	.word	0x20007fe8

0800b8b8 <_raise_r>:
 800b8b8:	291f      	cmp	r1, #31
 800b8ba:	b538      	push	{r3, r4, r5, lr}
 800b8bc:	4604      	mov	r4, r0
 800b8be:	460d      	mov	r5, r1
 800b8c0:	d904      	bls.n	800b8cc <_raise_r+0x14>
 800b8c2:	2316      	movs	r3, #22
 800b8c4:	6003      	str	r3, [r0, #0]
 800b8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8ce:	b112      	cbz	r2, 800b8d6 <_raise_r+0x1e>
 800b8d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8d4:	b94b      	cbnz	r3, 800b8ea <_raise_r+0x32>
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 f830 	bl	800b93c <_getpid_r>
 800b8dc:	462a      	mov	r2, r5
 800b8de:	4601      	mov	r1, r0
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8e6:	f000 b817 	b.w	800b918 <_kill_r>
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d00a      	beq.n	800b904 <_raise_r+0x4c>
 800b8ee:	1c59      	adds	r1, r3, #1
 800b8f0:	d103      	bne.n	800b8fa <_raise_r+0x42>
 800b8f2:	2316      	movs	r3, #22
 800b8f4:	6003      	str	r3, [r0, #0]
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	e7e7      	b.n	800b8ca <_raise_r+0x12>
 800b8fa:	2400      	movs	r4, #0
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b902:	4798      	blx	r3
 800b904:	2000      	movs	r0, #0
 800b906:	e7e0      	b.n	800b8ca <_raise_r+0x12>

0800b908 <raise>:
 800b908:	4b02      	ldr	r3, [pc, #8]	; (800b914 <raise+0xc>)
 800b90a:	4601      	mov	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f7ff bfd3 	b.w	800b8b8 <_raise_r>
 800b912:	bf00      	nop
 800b914:	20000024 	.word	0x20000024

0800b918 <_kill_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	2300      	movs	r3, #0
 800b91c:	4d06      	ldr	r5, [pc, #24]	; (800b938 <_kill_r+0x20>)
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	4611      	mov	r1, r2
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	f7fa fc8c 	bl	8006242 <_kill>
 800b92a:	1c43      	adds	r3, r0, #1
 800b92c:	d102      	bne.n	800b934 <_kill_r+0x1c>
 800b92e:	682b      	ldr	r3, [r5, #0]
 800b930:	b103      	cbz	r3, 800b934 <_kill_r+0x1c>
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	bd38      	pop	{r3, r4, r5, pc}
 800b936:	bf00      	nop
 800b938:	20007fe8 	.word	0x20007fe8

0800b93c <_getpid_r>:
 800b93c:	f7fa bc7a 	b.w	8006234 <_getpid>

0800b940 <__sread>:
 800b940:	b510      	push	{r4, lr}
 800b942:	460c      	mov	r4, r1
 800b944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b948:	f000 f8a8 	bl	800ba9c <_read_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	bfab      	itete	ge
 800b950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b952:	89a3      	ldrhlt	r3, [r4, #12]
 800b954:	181b      	addge	r3, r3, r0
 800b956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b95a:	bfac      	ite	ge
 800b95c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b95e:	81a3      	strhlt	r3, [r4, #12]
 800b960:	bd10      	pop	{r4, pc}

0800b962 <__swrite>:
 800b962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b966:	461f      	mov	r7, r3
 800b968:	898b      	ldrh	r3, [r1, #12]
 800b96a:	4605      	mov	r5, r0
 800b96c:	05db      	lsls	r3, r3, #23
 800b96e:	460c      	mov	r4, r1
 800b970:	4616      	mov	r6, r2
 800b972:	d505      	bpl.n	800b980 <__swrite+0x1e>
 800b974:	2302      	movs	r3, #2
 800b976:	2200      	movs	r2, #0
 800b978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97c:	f000 f868 	bl	800ba50 <_lseek_r>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	4632      	mov	r2, r6
 800b984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b988:	81a3      	strh	r3, [r4, #12]
 800b98a:	4628      	mov	r0, r5
 800b98c:	463b      	mov	r3, r7
 800b98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	f000 b817 	b.w	800b9c8 <_write_r>

0800b99a <__sseek>:
 800b99a:	b510      	push	{r4, lr}
 800b99c:	460c      	mov	r4, r1
 800b99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a2:	f000 f855 	bl	800ba50 <_lseek_r>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	bf15      	itete	ne
 800b9ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9b6:	81a3      	strheq	r3, [r4, #12]
 800b9b8:	bf18      	it	ne
 800b9ba:	81a3      	strhne	r3, [r4, #12]
 800b9bc:	bd10      	pop	{r4, pc}

0800b9be <__sclose>:
 800b9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c2:	f000 b813 	b.w	800b9ec <_close_r>
	...

0800b9c8 <_write_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	4d05      	ldr	r5, [pc, #20]	; (800b9e8 <_write_r+0x20>)
 800b9d4:	602a      	str	r2, [r5, #0]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f7fa fc6a 	bl	80062b0 <_write>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d102      	bne.n	800b9e6 <_write_r+0x1e>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	b103      	cbz	r3, 800b9e6 <_write_r+0x1e>
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	20007fe8 	.word	0x20007fe8

0800b9ec <_close_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	4d05      	ldr	r5, [pc, #20]	; (800ba08 <_close_r+0x1c>)
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	f7fa fc76 	bl	80062e8 <_close>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_close_r+0x1a>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_close_r+0x1a>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	20007fe8 	.word	0x20007fe8

0800ba0c <_fstat_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4d06      	ldr	r5, [pc, #24]	; (800ba2c <_fstat_r+0x20>)
 800ba12:	4604      	mov	r4, r0
 800ba14:	4608      	mov	r0, r1
 800ba16:	4611      	mov	r1, r2
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	f7fa fc70 	bl	80062fe <_fstat>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	d102      	bne.n	800ba28 <_fstat_r+0x1c>
 800ba22:	682b      	ldr	r3, [r5, #0]
 800ba24:	b103      	cbz	r3, 800ba28 <_fstat_r+0x1c>
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	bd38      	pop	{r3, r4, r5, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20007fe8 	.word	0x20007fe8

0800ba30 <_isatty_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	2300      	movs	r3, #0
 800ba34:	4d05      	ldr	r5, [pc, #20]	; (800ba4c <_isatty_r+0x1c>)
 800ba36:	4604      	mov	r4, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	602b      	str	r3, [r5, #0]
 800ba3c:	f7fa fc6e 	bl	800631c <_isatty>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_isatty_r+0x1a>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_isatty_r+0x1a>
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	20007fe8 	.word	0x20007fe8

0800ba50 <_lseek_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4d05      	ldr	r5, [pc, #20]	; (800ba70 <_lseek_r+0x20>)
 800ba5c:	602a      	str	r2, [r5, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f7fa fc66 	bl	8006330 <_lseek>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_lseek_r+0x1e>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_lseek_r+0x1e>
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	20007fe8 	.word	0x20007fe8

0800ba74 <__malloc_lock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	; (800ba7c <__malloc_lock+0x8>)
 800ba76:	f7ff bc19 	b.w	800b2ac <__retarget_lock_acquire_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	20007fdc 	.word	0x20007fdc

0800ba80 <__malloc_unlock>:
 800ba80:	4801      	ldr	r0, [pc, #4]	; (800ba88 <__malloc_unlock+0x8>)
 800ba82:	f7ff bc14 	b.w	800b2ae <__retarget_lock_release_recursive>
 800ba86:	bf00      	nop
 800ba88:	20007fdc 	.word	0x20007fdc

0800ba8c <_malloc_usable_size_r>:
 800ba8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba90:	1f18      	subs	r0, r3, #4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bfbc      	itt	lt
 800ba96:	580b      	ldrlt	r3, [r1, r0]
 800ba98:	18c0      	addlt	r0, r0, r3
 800ba9a:	4770      	bx	lr

0800ba9c <_read_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	2200      	movs	r2, #0
 800baa6:	4d05      	ldr	r5, [pc, #20]	; (800babc <_read_r+0x20>)
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7fa fbe3 	bl	8006276 <_read>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_read_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_read_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20007fe8 	.word	0x20007fe8

0800bac0 <atan>:
 800bac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	4bb6      	ldr	r3, [pc, #728]	; (800bda0 <atan+0x2e0>)
 800bac6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800baca:	429e      	cmp	r6, r3
 800bacc:	4604      	mov	r4, r0
 800bace:	460d      	mov	r5, r1
 800bad0:	468b      	mov	fp, r1
 800bad2:	dd17      	ble.n	800bb04 <atan+0x44>
 800bad4:	4bb3      	ldr	r3, [pc, #716]	; (800bda4 <atan+0x2e4>)
 800bad6:	429e      	cmp	r6, r3
 800bad8:	dc01      	bgt.n	800bade <atan+0x1e>
 800bada:	d109      	bne.n	800baf0 <atan+0x30>
 800badc:	b140      	cbz	r0, 800baf0 <atan+0x30>
 800bade:	4622      	mov	r2, r4
 800bae0:	462b      	mov	r3, r5
 800bae2:	4620      	mov	r0, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	f7f4 fba5 	bl	8000234 <__adddf3>
 800baea:	4604      	mov	r4, r0
 800baec:	460d      	mov	r5, r1
 800baee:	e005      	b.n	800bafc <atan+0x3c>
 800baf0:	f1bb 0f00 	cmp.w	fp, #0
 800baf4:	4cac      	ldr	r4, [pc, #688]	; (800bda8 <atan+0x2e8>)
 800baf6:	f300 8121 	bgt.w	800bd3c <atan+0x27c>
 800bafa:	4dac      	ldr	r5, [pc, #688]	; (800bdac <atan+0x2ec>)
 800bafc:	4620      	mov	r0, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb04:	4baa      	ldr	r3, [pc, #680]	; (800bdb0 <atan+0x2f0>)
 800bb06:	429e      	cmp	r6, r3
 800bb08:	dc11      	bgt.n	800bb2e <atan+0x6e>
 800bb0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bb0e:	429e      	cmp	r6, r3
 800bb10:	dc0a      	bgt.n	800bb28 <atan+0x68>
 800bb12:	a38b      	add	r3, pc, #556	; (adr r3, 800bd40 <atan+0x280>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	f7f4 fb8c 	bl	8000234 <__adddf3>
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4ba5      	ldr	r3, [pc, #660]	; (800bdb4 <atan+0x2f4>)
 800bb20:	f7f4 ffce 	bl	8000ac0 <__aeabi_dcmpgt>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d1e9      	bne.n	800bafc <atan+0x3c>
 800bb28:	f04f 3aff 	mov.w	sl, #4294967295
 800bb2c:	e027      	b.n	800bb7e <atan+0xbe>
 800bb2e:	f000 f997 	bl	800be60 <fabs>
 800bb32:	4ba1      	ldr	r3, [pc, #644]	; (800bdb8 <atan+0x2f8>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	429e      	cmp	r6, r3
 800bb38:	460d      	mov	r5, r1
 800bb3a:	f300 80b8 	bgt.w	800bcae <atan+0x1ee>
 800bb3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bb42:	429e      	cmp	r6, r3
 800bb44:	f300 809c 	bgt.w	800bc80 <atan+0x1c0>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	f7f4 fb72 	bl	8000234 <__adddf3>
 800bb50:	2200      	movs	r2, #0
 800bb52:	4b98      	ldr	r3, [pc, #608]	; (800bdb4 <atan+0x2f4>)
 800bb54:	f7f4 fb6c 	bl	8000230 <__aeabi_dsub>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb62:	4620      	mov	r0, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	f7f4 fb65 	bl	8000234 <__adddf3>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 fe3f 	bl	80007f4 <__aeabi_ddiv>
 800bb76:	f04f 0a00 	mov.w	sl, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	4622      	mov	r2, r4
 800bb80:	462b      	mov	r3, r5
 800bb82:	4620      	mov	r0, r4
 800bb84:	4629      	mov	r1, r5
 800bb86:	f7f4 fd0b 	bl	80005a0 <__aeabi_dmul>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4680      	mov	r8, r0
 800bb90:	4689      	mov	r9, r1
 800bb92:	f7f4 fd05 	bl	80005a0 <__aeabi_dmul>
 800bb96:	a36c      	add	r3, pc, #432	; (adr r3, 800bd48 <atan+0x288>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	460f      	mov	r7, r1
 800bba0:	f7f4 fcfe 	bl	80005a0 <__aeabi_dmul>
 800bba4:	a36a      	add	r3, pc, #424	; (adr r3, 800bd50 <atan+0x290>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	f7f4 fb43 	bl	8000234 <__adddf3>
 800bbae:	4632      	mov	r2, r6
 800bbb0:	463b      	mov	r3, r7
 800bbb2:	f7f4 fcf5 	bl	80005a0 <__aeabi_dmul>
 800bbb6:	a368      	add	r3, pc, #416	; (adr r3, 800bd58 <atan+0x298>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 fb3a 	bl	8000234 <__adddf3>
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	463b      	mov	r3, r7
 800bbc4:	f7f4 fcec 	bl	80005a0 <__aeabi_dmul>
 800bbc8:	a365      	add	r3, pc, #404	; (adr r3, 800bd60 <atan+0x2a0>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f7f4 fb31 	bl	8000234 <__adddf3>
 800bbd2:	4632      	mov	r2, r6
 800bbd4:	463b      	mov	r3, r7
 800bbd6:	f7f4 fce3 	bl	80005a0 <__aeabi_dmul>
 800bbda:	a363      	add	r3, pc, #396	; (adr r3, 800bd68 <atan+0x2a8>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f7f4 fb28 	bl	8000234 <__adddf3>
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	f7f4 fcda 	bl	80005a0 <__aeabi_dmul>
 800bbec:	a360      	add	r3, pc, #384	; (adr r3, 800bd70 <atan+0x2b0>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fb1f 	bl	8000234 <__adddf3>
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	f7f4 fcd1 	bl	80005a0 <__aeabi_dmul>
 800bbfe:	a35e      	add	r3, pc, #376	; (adr r3, 800bd78 <atan+0x2b8>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	4680      	mov	r8, r0
 800bc06:	4689      	mov	r9, r1
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 fcc8 	bl	80005a0 <__aeabi_dmul>
 800bc10:	a35b      	add	r3, pc, #364	; (adr r3, 800bd80 <atan+0x2c0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fb0b 	bl	8000230 <__aeabi_dsub>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	f7f4 fcbf 	bl	80005a0 <__aeabi_dmul>
 800bc22:	a359      	add	r3, pc, #356	; (adr r3, 800bd88 <atan+0x2c8>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fb02 	bl	8000230 <__aeabi_dsub>
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	463b      	mov	r3, r7
 800bc30:	f7f4 fcb6 	bl	80005a0 <__aeabi_dmul>
 800bc34:	a356      	add	r3, pc, #344	; (adr r3, 800bd90 <atan+0x2d0>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f7f4 faf9 	bl	8000230 <__aeabi_dsub>
 800bc3e:	4632      	mov	r2, r6
 800bc40:	463b      	mov	r3, r7
 800bc42:	f7f4 fcad 	bl	80005a0 <__aeabi_dmul>
 800bc46:	a354      	add	r3, pc, #336	; (adr r3, 800bd98 <atan+0x2d8>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 faf0 	bl	8000230 <__aeabi_dsub>
 800bc50:	4632      	mov	r2, r6
 800bc52:	463b      	mov	r3, r7
 800bc54:	f7f4 fca4 	bl	80005a0 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	4649      	mov	r1, r9
 800bc60:	f7f4 fae8 	bl	8000234 <__adddf3>
 800bc64:	4622      	mov	r2, r4
 800bc66:	462b      	mov	r3, r5
 800bc68:	f7f4 fc9a 	bl	80005a0 <__aeabi_dmul>
 800bc6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	d144      	bne.n	800bd00 <atan+0x240>
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fad9 	bl	8000230 <__aeabi_dsub>
 800bc7e:	e734      	b.n	800baea <atan+0x2a>
 800bc80:	2200      	movs	r2, #0
 800bc82:	4b4c      	ldr	r3, [pc, #304]	; (800bdb4 <atan+0x2f4>)
 800bc84:	f7f4 fad4 	bl	8000230 <__aeabi_dsub>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	4b48      	ldr	r3, [pc, #288]	; (800bdb4 <atan+0x2f4>)
 800bc94:	f7f4 face 	bl	8000234 <__adddf3>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	4639      	mov	r1, r7
 800bca0:	f7f4 fda8 	bl	80007f4 <__aeabi_ddiv>
 800bca4:	f04f 0a01 	mov.w	sl, #1
 800bca8:	4604      	mov	r4, r0
 800bcaa:	460d      	mov	r5, r1
 800bcac:	e767      	b.n	800bb7e <atan+0xbe>
 800bcae:	4b43      	ldr	r3, [pc, #268]	; (800bdbc <atan+0x2fc>)
 800bcb0:	429e      	cmp	r6, r3
 800bcb2:	da1a      	bge.n	800bcea <atan+0x22a>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4b42      	ldr	r3, [pc, #264]	; (800bdc0 <atan+0x300>)
 800bcb8:	f7f4 faba 	bl	8000230 <__aeabi_dsub>
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	4b3e      	ldr	r3, [pc, #248]	; (800bdc0 <atan+0x300>)
 800bcc8:	f7f4 fc6a 	bl	80005a0 <__aeabi_dmul>
 800bccc:	2200      	movs	r2, #0
 800bcce:	4b39      	ldr	r3, [pc, #228]	; (800bdb4 <atan+0x2f4>)
 800bcd0:	f7f4 fab0 	bl	8000234 <__adddf3>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fd8a 	bl	80007f4 <__aeabi_ddiv>
 800bce0:	f04f 0a02 	mov.w	sl, #2
 800bce4:	4604      	mov	r4, r0
 800bce6:	460d      	mov	r5, r1
 800bce8:	e749      	b.n	800bb7e <atan+0xbe>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	2000      	movs	r0, #0
 800bcf0:	4934      	ldr	r1, [pc, #208]	; (800bdc4 <atan+0x304>)
 800bcf2:	f7f4 fd7f 	bl	80007f4 <__aeabi_ddiv>
 800bcf6:	f04f 0a03 	mov.w	sl, #3
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	460d      	mov	r5, r1
 800bcfe:	e73e      	b.n	800bb7e <atan+0xbe>
 800bd00:	4b31      	ldr	r3, [pc, #196]	; (800bdc8 <atan+0x308>)
 800bd02:	4e32      	ldr	r6, [pc, #200]	; (800bdcc <atan+0x30c>)
 800bd04:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd08:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bd0c:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd10:	f7f4 fa8e 	bl	8000230 <__aeabi_dsub>
 800bd14:	4622      	mov	r2, r4
 800bd16:	462b      	mov	r3, r5
 800bd18:	f7f4 fa8a 	bl	8000230 <__aeabi_dsub>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd24:	f7f4 fa84 	bl	8000230 <__aeabi_dsub>
 800bd28:	f1bb 0f00 	cmp.w	fp, #0
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	f6bf aee4 	bge.w	800bafc <atan+0x3c>
 800bd34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd38:	461d      	mov	r5, r3
 800bd3a:	e6df      	b.n	800bafc <atan+0x3c>
 800bd3c:	4d24      	ldr	r5, [pc, #144]	; (800bdd0 <atan+0x310>)
 800bd3e:	e6dd      	b.n	800bafc <atan+0x3c>
 800bd40:	8800759c 	.word	0x8800759c
 800bd44:	7e37e43c 	.word	0x7e37e43c
 800bd48:	e322da11 	.word	0xe322da11
 800bd4c:	3f90ad3a 	.word	0x3f90ad3a
 800bd50:	24760deb 	.word	0x24760deb
 800bd54:	3fa97b4b 	.word	0x3fa97b4b
 800bd58:	a0d03d51 	.word	0xa0d03d51
 800bd5c:	3fb10d66 	.word	0x3fb10d66
 800bd60:	c54c206e 	.word	0xc54c206e
 800bd64:	3fb745cd 	.word	0x3fb745cd
 800bd68:	920083ff 	.word	0x920083ff
 800bd6c:	3fc24924 	.word	0x3fc24924
 800bd70:	5555550d 	.word	0x5555550d
 800bd74:	3fd55555 	.word	0x3fd55555
 800bd78:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd7c:	bfa2b444 	.word	0xbfa2b444
 800bd80:	52defd9a 	.word	0x52defd9a
 800bd84:	3fadde2d 	.word	0x3fadde2d
 800bd88:	af749a6d 	.word	0xaf749a6d
 800bd8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bd90:	fe231671 	.word	0xfe231671
 800bd94:	3fbc71c6 	.word	0x3fbc71c6
 800bd98:	9998ebc4 	.word	0x9998ebc4
 800bd9c:	3fc99999 	.word	0x3fc99999
 800bda0:	440fffff 	.word	0x440fffff
 800bda4:	7ff00000 	.word	0x7ff00000
 800bda8:	54442d18 	.word	0x54442d18
 800bdac:	bff921fb 	.word	0xbff921fb
 800bdb0:	3fdbffff 	.word	0x3fdbffff
 800bdb4:	3ff00000 	.word	0x3ff00000
 800bdb8:	3ff2ffff 	.word	0x3ff2ffff
 800bdbc:	40038000 	.word	0x40038000
 800bdc0:	3ff80000 	.word	0x3ff80000
 800bdc4:	bff00000 	.word	0xbff00000
 800bdc8:	0800d638 	.word	0x0800d638
 800bdcc:	0800d618 	.word	0x0800d618
 800bdd0:	3ff921fb 	.word	0x3ff921fb

0800bdd4 <cos>:
 800bdd4:	b530      	push	{r4, r5, lr}
 800bdd6:	4a20      	ldr	r2, [pc, #128]	; (800be58 <cos+0x84>)
 800bdd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bddc:	4293      	cmp	r3, r2
 800bdde:	b087      	sub	sp, #28
 800bde0:	dc06      	bgt.n	800bdf0 <cos+0x1c>
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	b007      	add	sp, #28
 800bde8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdec:	f000 baa0 	b.w	800c330 <__kernel_cos>
 800bdf0:	4a1a      	ldr	r2, [pc, #104]	; (800be5c <cos+0x88>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	dd05      	ble.n	800be02 <cos+0x2e>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	f7f4 fa19 	bl	8000230 <__aeabi_dsub>
 800bdfe:	b007      	add	sp, #28
 800be00:	bd30      	pop	{r4, r5, pc}
 800be02:	aa02      	add	r2, sp, #8
 800be04:	f000 f89c 	bl	800bf40 <__ieee754_rem_pio2>
 800be08:	f000 0003 	and.w	r0, r0, #3
 800be0c:	2801      	cmp	r0, #1
 800be0e:	d009      	beq.n	800be24 <cos+0x50>
 800be10:	2802      	cmp	r0, #2
 800be12:	d011      	beq.n	800be38 <cos+0x64>
 800be14:	b9b8      	cbnz	r0, 800be46 <cos+0x72>
 800be16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1e:	f000 fa87 	bl	800c330 <__kernel_cos>
 800be22:	e7ec      	b.n	800bdfe <cos+0x2a>
 800be24:	9000      	str	r0, [sp, #0]
 800be26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be2e:	f000 fe7f 	bl	800cb30 <__kernel_sin>
 800be32:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be36:	e7e2      	b.n	800bdfe <cos+0x2a>
 800be38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be40:	f000 fa76 	bl	800c330 <__kernel_cos>
 800be44:	e7f5      	b.n	800be32 <cos+0x5e>
 800be46:	2301      	movs	r3, #1
 800be48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be52:	f000 fe6d 	bl	800cb30 <__kernel_sin>
 800be56:	e7d2      	b.n	800bdfe <cos+0x2a>
 800be58:	3fe921fb 	.word	0x3fe921fb
 800be5c:	7fefffff 	.word	0x7fefffff

0800be60 <fabs>:
 800be60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800be64:	4770      	bx	lr
	...

0800be68 <sin>:
 800be68:	b530      	push	{r4, r5, lr}
 800be6a:	4a20      	ldr	r2, [pc, #128]	; (800beec <sin+0x84>)
 800be6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be70:	4293      	cmp	r3, r2
 800be72:	b087      	sub	sp, #28
 800be74:	dc06      	bgt.n	800be84 <sin+0x1c>
 800be76:	2300      	movs	r3, #0
 800be78:	2200      	movs	r2, #0
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	2300      	movs	r3, #0
 800be7e:	f000 fe57 	bl	800cb30 <__kernel_sin>
 800be82:	e006      	b.n	800be92 <sin+0x2a>
 800be84:	4a1a      	ldr	r2, [pc, #104]	; (800bef0 <sin+0x88>)
 800be86:	4293      	cmp	r3, r2
 800be88:	dd05      	ble.n	800be96 <sin+0x2e>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	f7f4 f9cf 	bl	8000230 <__aeabi_dsub>
 800be92:	b007      	add	sp, #28
 800be94:	bd30      	pop	{r4, r5, pc}
 800be96:	aa02      	add	r2, sp, #8
 800be98:	f000 f852 	bl	800bf40 <__ieee754_rem_pio2>
 800be9c:	f000 0003 	and.w	r0, r0, #3
 800bea0:	2801      	cmp	r0, #1
 800bea2:	d009      	beq.n	800beb8 <sin+0x50>
 800bea4:	2802      	cmp	r0, #2
 800bea6:	d00e      	beq.n	800bec6 <sin+0x5e>
 800bea8:	b9c0      	cbnz	r0, 800bedc <sin+0x74>
 800beaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beae:	2301      	movs	r3, #1
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb6:	e7e2      	b.n	800be7e <sin+0x16>
 800beb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec0:	f000 fa36 	bl	800c330 <__kernel_cos>
 800bec4:	e7e5      	b.n	800be92 <sin+0x2a>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bed2:	f000 fe2d 	bl	800cb30 <__kernel_sin>
 800bed6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800beda:	e7da      	b.n	800be92 <sin+0x2a>
 800bedc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee4:	f000 fa24 	bl	800c330 <__kernel_cos>
 800bee8:	e7f5      	b.n	800bed6 <sin+0x6e>
 800beea:	bf00      	nop
 800beec:	3fe921fb 	.word	0x3fe921fb
 800bef0:	7fefffff 	.word	0x7fefffff

0800bef4 <roundf>:
 800bef4:	b508      	push	{r3, lr}
 800bef6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800befa:	3b7f      	subs	r3, #127	; 0x7f
 800befc:	2b16      	cmp	r3, #22
 800befe:	4601      	mov	r1, r0
 800bf00:	4602      	mov	r2, r0
 800bf02:	dc14      	bgt.n	800bf2e <roundf+0x3a>
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	da07      	bge.n	800bf18 <roundf+0x24>
 800bf08:	3301      	adds	r3, #1
 800bf0a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800bf0e:	d101      	bne.n	800bf14 <roundf+0x20>
 800bf10:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800bf14:	4608      	mov	r0, r1
 800bf16:	bd08      	pop	{r3, pc}
 800bf18:	4808      	ldr	r0, [pc, #32]	; (800bf3c <roundf+0x48>)
 800bf1a:	4118      	asrs	r0, r3
 800bf1c:	4201      	tst	r1, r0
 800bf1e:	d0f9      	beq.n	800bf14 <roundf+0x20>
 800bf20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf24:	4119      	asrs	r1, r3
 800bf26:	4411      	add	r1, r2
 800bf28:	ea21 0100 	bic.w	r1, r1, r0
 800bf2c:	e7f2      	b.n	800bf14 <roundf+0x20>
 800bf2e:	2b80      	cmp	r3, #128	; 0x80
 800bf30:	d1f0      	bne.n	800bf14 <roundf+0x20>
 800bf32:	f7f4 fe4d 	bl	8000bd0 <__addsf3>
 800bf36:	4601      	mov	r1, r0
 800bf38:	e7ec      	b.n	800bf14 <roundf+0x20>
 800bf3a:	bf00      	nop
 800bf3c:	007fffff 	.word	0x007fffff

0800bf40 <__ieee754_rem_pio2>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	4614      	mov	r4, r2
 800bf46:	4ac4      	ldr	r2, [pc, #784]	; (800c258 <__ieee754_rem_pio2+0x318>)
 800bf48:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bf4c:	b08d      	sub	sp, #52	; 0x34
 800bf4e:	4592      	cmp	sl, r2
 800bf50:	9104      	str	r1, [sp, #16]
 800bf52:	dc07      	bgt.n	800bf64 <__ieee754_rem_pio2+0x24>
 800bf54:	2200      	movs	r2, #0
 800bf56:	2300      	movs	r3, #0
 800bf58:	e9c4 0100 	strd	r0, r1, [r4]
 800bf5c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bf60:	2500      	movs	r5, #0
 800bf62:	e024      	b.n	800bfae <__ieee754_rem_pio2+0x6e>
 800bf64:	4abd      	ldr	r2, [pc, #756]	; (800c25c <__ieee754_rem_pio2+0x31c>)
 800bf66:	4592      	cmp	sl, r2
 800bf68:	dc72      	bgt.n	800c050 <__ieee754_rem_pio2+0x110>
 800bf6a:	9b04      	ldr	r3, [sp, #16]
 800bf6c:	4dbc      	ldr	r5, [pc, #752]	; (800c260 <__ieee754_rem_pio2+0x320>)
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	a3ab      	add	r3, pc, #684	; (adr r3, 800c220 <__ieee754_rem_pio2+0x2e0>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	dd36      	ble.n	800bfe6 <__ieee754_rem_pio2+0xa6>
 800bf78:	f7f4 f95a 	bl	8000230 <__aeabi_dsub>
 800bf7c:	45aa      	cmp	sl, r5
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	d018      	beq.n	800bfb6 <__ieee754_rem_pio2+0x76>
 800bf84:	a3a8      	add	r3, pc, #672	; (adr r3, 800c228 <__ieee754_rem_pio2+0x2e8>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f7f4 f951 	bl	8000230 <__aeabi_dsub>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4630      	mov	r0, r6
 800bf94:	e9c4 2300 	strd	r2, r3, [r4]
 800bf98:	4639      	mov	r1, r7
 800bf9a:	f7f4 f949 	bl	8000230 <__aeabi_dsub>
 800bf9e:	a3a2      	add	r3, pc, #648	; (adr r3, 800c228 <__ieee754_rem_pio2+0x2e8>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 f944 	bl	8000230 <__aeabi_dsub>
 800bfa8:	2501      	movs	r5, #1
 800bfaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfae:	4628      	mov	r0, r5
 800bfb0:	b00d      	add	sp, #52	; 0x34
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	a39e      	add	r3, pc, #632	; (adr r3, 800c230 <__ieee754_rem_pio2+0x2f0>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f7f4 f938 	bl	8000230 <__aeabi_dsub>
 800bfc0:	a39d      	add	r3, pc, #628	; (adr r3, 800c238 <__ieee754_rem_pio2+0x2f8>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	460f      	mov	r7, r1
 800bfca:	f7f4 f931 	bl	8000230 <__aeabi_dsub>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	e9c4 2300 	strd	r2, r3, [r4]
 800bfd8:	4639      	mov	r1, r7
 800bfda:	f7f4 f929 	bl	8000230 <__aeabi_dsub>
 800bfde:	a396      	add	r3, pc, #600	; (adr r3, 800c238 <__ieee754_rem_pio2+0x2f8>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	e7de      	b.n	800bfa4 <__ieee754_rem_pio2+0x64>
 800bfe6:	f7f4 f925 	bl	8000234 <__adddf3>
 800bfea:	45aa      	cmp	sl, r5
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	d016      	beq.n	800c020 <__ieee754_rem_pio2+0xe0>
 800bff2:	a38d      	add	r3, pc, #564	; (adr r3, 800c228 <__ieee754_rem_pio2+0x2e8>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 f91c 	bl	8000234 <__adddf3>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4630      	mov	r0, r6
 800c002:	e9c4 2300 	strd	r2, r3, [r4]
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 f912 	bl	8000230 <__aeabi_dsub>
 800c00c:	a386      	add	r3, pc, #536	; (adr r3, 800c228 <__ieee754_rem_pio2+0x2e8>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 f90f 	bl	8000234 <__adddf3>
 800c016:	f04f 35ff 	mov.w	r5, #4294967295
 800c01a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c01e:	e7c6      	b.n	800bfae <__ieee754_rem_pio2+0x6e>
 800c020:	a383      	add	r3, pc, #524	; (adr r3, 800c230 <__ieee754_rem_pio2+0x2f0>)
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f7f4 f905 	bl	8000234 <__adddf3>
 800c02a:	a383      	add	r3, pc, #524	; (adr r3, 800c238 <__ieee754_rem_pio2+0x2f8>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	4606      	mov	r6, r0
 800c032:	460f      	mov	r7, r1
 800c034:	f7f4 f8fe 	bl	8000234 <__adddf3>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	4630      	mov	r0, r6
 800c03e:	e9c4 2300 	strd	r2, r3, [r4]
 800c042:	4639      	mov	r1, r7
 800c044:	f7f4 f8f4 	bl	8000230 <__aeabi_dsub>
 800c048:	a37b      	add	r3, pc, #492	; (adr r3, 800c238 <__ieee754_rem_pio2+0x2f8>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	e7e0      	b.n	800c012 <__ieee754_rem_pio2+0xd2>
 800c050:	4a84      	ldr	r2, [pc, #528]	; (800c264 <__ieee754_rem_pio2+0x324>)
 800c052:	4592      	cmp	sl, r2
 800c054:	f300 80d5 	bgt.w	800c202 <__ieee754_rem_pio2+0x2c2>
 800c058:	f7ff ff02 	bl	800be60 <fabs>
 800c05c:	a378      	add	r3, pc, #480	; (adr r3, 800c240 <__ieee754_rem_pio2+0x300>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	4606      	mov	r6, r0
 800c064:	460f      	mov	r7, r1
 800c066:	f7f4 fa9b 	bl	80005a0 <__aeabi_dmul>
 800c06a:	2200      	movs	r2, #0
 800c06c:	4b7e      	ldr	r3, [pc, #504]	; (800c268 <__ieee754_rem_pio2+0x328>)
 800c06e:	f7f4 f8e1 	bl	8000234 <__adddf3>
 800c072:	f7f4 fd2f 	bl	8000ad4 <__aeabi_d2iz>
 800c076:	4605      	mov	r5, r0
 800c078:	f7f4 fa28 	bl	80004cc <__aeabi_i2d>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c084:	a366      	add	r3, pc, #408	; (adr r3, 800c220 <__ieee754_rem_pio2+0x2e0>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f7f4 fa89 	bl	80005a0 <__aeabi_dmul>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 f8cb 	bl	8000230 <__aeabi_dsub>
 800c09a:	a363      	add	r3, pc, #396	; (adr r3, 800c228 <__ieee754_rem_pio2+0x2e8>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4689      	mov	r9, r1
 800c0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a8:	f7f4 fa7a 	bl	80005a0 <__aeabi_dmul>
 800c0ac:	2d1f      	cmp	r5, #31
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	dc0e      	bgt.n	800c0d2 <__ieee754_rem_pio2+0x192>
 800c0b4:	4b6d      	ldr	r3, [pc, #436]	; (800c26c <__ieee754_rem_pio2+0x32c>)
 800c0b6:	1e6a      	subs	r2, r5, #1
 800c0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0bc:	4553      	cmp	r3, sl
 800c0be:	d008      	beq.n	800c0d2 <__ieee754_rem_pio2+0x192>
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	463b      	mov	r3, r7
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	f7f4 f8b2 	bl	8000230 <__aeabi_dsub>
 800c0cc:	e9c4 0100 	strd	r0, r1, [r4]
 800c0d0:	e013      	b.n	800c0fa <__ieee754_rem_pio2+0x1ba>
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	4649      	mov	r1, r9
 800c0da:	f7f4 f8a9 	bl	8000230 <__aeabi_dsub>
 800c0de:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0e8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c0ec:	f1ba 0f10 	cmp.w	sl, #16
 800c0f0:	dc1f      	bgt.n	800c132 <__ieee754_rem_pio2+0x1f2>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	e9c4 2300 	strd	r2, r3, [r4]
 800c0fa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c0fe:	4640      	mov	r0, r8
 800c100:	4653      	mov	r3, sl
 800c102:	4649      	mov	r1, r9
 800c104:	f7f4 f894 	bl	8000230 <__aeabi_dsub>
 800c108:	4632      	mov	r2, r6
 800c10a:	463b      	mov	r3, r7
 800c10c:	f7f4 f890 	bl	8000230 <__aeabi_dsub>
 800c110:	460b      	mov	r3, r1
 800c112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c116:	9904      	ldr	r1, [sp, #16]
 800c118:	4602      	mov	r2, r0
 800c11a:	2900      	cmp	r1, #0
 800c11c:	f6bf af47 	bge.w	800bfae <__ieee754_rem_pio2+0x6e>
 800c120:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c124:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c12c:	60e3      	str	r3, [r4, #12]
 800c12e:	426d      	negs	r5, r5
 800c130:	e73d      	b.n	800bfae <__ieee754_rem_pio2+0x6e>
 800c132:	a33f      	add	r3, pc, #252	; (adr r3, 800c230 <__ieee754_rem_pio2+0x2f0>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13c:	f7f4 fa30 	bl	80005a0 <__aeabi_dmul>
 800c140:	4606      	mov	r6, r0
 800c142:	460f      	mov	r7, r1
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	4640      	mov	r0, r8
 800c14a:	4649      	mov	r1, r9
 800c14c:	f7f4 f870 	bl	8000230 <__aeabi_dsub>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4682      	mov	sl, r0
 800c156:	468b      	mov	fp, r1
 800c158:	4640      	mov	r0, r8
 800c15a:	4649      	mov	r1, r9
 800c15c:	f7f4 f868 	bl	8000230 <__aeabi_dsub>
 800c160:	4632      	mov	r2, r6
 800c162:	463b      	mov	r3, r7
 800c164:	f7f4 f864 	bl	8000230 <__aeabi_dsub>
 800c168:	a333      	add	r3, pc, #204	; (adr r3, 800c238 <__ieee754_rem_pio2+0x2f8>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	4606      	mov	r6, r0
 800c170:	460f      	mov	r7, r1
 800c172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c176:	f7f4 fa13 	bl	80005a0 <__aeabi_dmul>
 800c17a:	4632      	mov	r2, r6
 800c17c:	463b      	mov	r3, r7
 800c17e:	f7f4 f857 	bl	8000230 <__aeabi_dsub>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4606      	mov	r6, r0
 800c188:	460f      	mov	r7, r1
 800c18a:	4650      	mov	r0, sl
 800c18c:	4659      	mov	r1, fp
 800c18e:	f7f4 f84f 	bl	8000230 <__aeabi_dsub>
 800c192:	9a05      	ldr	r2, [sp, #20]
 800c194:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	2b31      	cmp	r3, #49	; 0x31
 800c19c:	dc06      	bgt.n	800c1ac <__ieee754_rem_pio2+0x26c>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	46d0      	mov	r8, sl
 800c1a4:	46d9      	mov	r9, fp
 800c1a6:	e9c4 2300 	strd	r2, r3, [r4]
 800c1aa:	e7a6      	b.n	800c0fa <__ieee754_rem_pio2+0x1ba>
 800c1ac:	a326      	add	r3, pc, #152	; (adr r3, 800c248 <__ieee754_rem_pio2+0x308>)
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1b6:	f7f4 f9f3 	bl	80005a0 <__aeabi_dmul>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4650      	mov	r0, sl
 800c1c4:	4659      	mov	r1, fp
 800c1c6:	f7f4 f833 	bl	8000230 <__aeabi_dsub>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4680      	mov	r8, r0
 800c1d0:	4689      	mov	r9, r1
 800c1d2:	4650      	mov	r0, sl
 800c1d4:	4659      	mov	r1, fp
 800c1d6:	f7f4 f82b 	bl	8000230 <__aeabi_dsub>
 800c1da:	4632      	mov	r2, r6
 800c1dc:	463b      	mov	r3, r7
 800c1de:	f7f4 f827 	bl	8000230 <__aeabi_dsub>
 800c1e2:	a31b      	add	r3, pc, #108	; (adr r3, 800c250 <__ieee754_rem_pio2+0x310>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	460f      	mov	r7, r1
 800c1ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f0:	f7f4 f9d6 	bl	80005a0 <__aeabi_dmul>
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	463b      	mov	r3, r7
 800c1f8:	f7f4 f81a 	bl	8000230 <__aeabi_dsub>
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	460f      	mov	r7, r1
 800c200:	e75e      	b.n	800c0c0 <__ieee754_rem_pio2+0x180>
 800c202:	4a1b      	ldr	r2, [pc, #108]	; (800c270 <__ieee754_rem_pio2+0x330>)
 800c204:	4592      	cmp	sl, r2
 800c206:	dd35      	ble.n	800c274 <__ieee754_rem_pio2+0x334>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	f7f4 f810 	bl	8000230 <__aeabi_dsub>
 800c210:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c214:	e9c4 0100 	strd	r0, r1, [r4]
 800c218:	e6a2      	b.n	800bf60 <__ieee754_rem_pio2+0x20>
 800c21a:	bf00      	nop
 800c21c:	f3af 8000 	nop.w
 800c220:	54400000 	.word	0x54400000
 800c224:	3ff921fb 	.word	0x3ff921fb
 800c228:	1a626331 	.word	0x1a626331
 800c22c:	3dd0b461 	.word	0x3dd0b461
 800c230:	1a600000 	.word	0x1a600000
 800c234:	3dd0b461 	.word	0x3dd0b461
 800c238:	2e037073 	.word	0x2e037073
 800c23c:	3ba3198a 	.word	0x3ba3198a
 800c240:	6dc9c883 	.word	0x6dc9c883
 800c244:	3fe45f30 	.word	0x3fe45f30
 800c248:	2e000000 	.word	0x2e000000
 800c24c:	3ba3198a 	.word	0x3ba3198a
 800c250:	252049c1 	.word	0x252049c1
 800c254:	397b839a 	.word	0x397b839a
 800c258:	3fe921fb 	.word	0x3fe921fb
 800c25c:	4002d97b 	.word	0x4002d97b
 800c260:	3ff921fb 	.word	0x3ff921fb
 800c264:	413921fb 	.word	0x413921fb
 800c268:	3fe00000 	.word	0x3fe00000
 800c26c:	0800d658 	.word	0x0800d658
 800c270:	7fefffff 	.word	0x7fefffff
 800c274:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c278:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c27c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c280:	460f      	mov	r7, r1
 800c282:	4606      	mov	r6, r0
 800c284:	f7f4 fc26 	bl	8000ad4 <__aeabi_d2iz>
 800c288:	f7f4 f920 	bl	80004cc <__aeabi_i2d>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4630      	mov	r0, r6
 800c292:	4639      	mov	r1, r7
 800c294:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c298:	f7f3 ffca 	bl	8000230 <__aeabi_dsub>
 800c29c:	2200      	movs	r2, #0
 800c29e:	4b22      	ldr	r3, [pc, #136]	; (800c328 <__ieee754_rem_pio2+0x3e8>)
 800c2a0:	f7f4 f97e 	bl	80005a0 <__aeabi_dmul>
 800c2a4:	460f      	mov	r7, r1
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	f7f4 fc14 	bl	8000ad4 <__aeabi_d2iz>
 800c2ac:	f7f4 f90e 	bl	80004cc <__aeabi_i2d>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2bc:	f7f3 ffb8 	bl	8000230 <__aeabi_dsub>
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	4b19      	ldr	r3, [pc, #100]	; (800c328 <__ieee754_rem_pio2+0x3e8>)
 800c2c4:	f7f4 f96c 	bl	80005a0 <__aeabi_dmul>
 800c2c8:	f04f 0803 	mov.w	r8, #3
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	2700      	movs	r7, #0
 800c2d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c2d4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c2d8:	4632      	mov	r2, r6
 800c2da:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c2de:	463b      	mov	r3, r7
 800c2e0:	46c2      	mov	sl, r8
 800c2e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2e6:	f7f4 fbc3 	bl	8000a70 <__aeabi_dcmpeq>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d1f4      	bne.n	800c2d8 <__ieee754_rem_pio2+0x398>
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <__ieee754_rem_pio2+0x3ec>)
 800c2f0:	462a      	mov	r2, r5
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	a806      	add	r0, sp, #24
 800c2fc:	4653      	mov	r3, sl
 800c2fe:	f000 f8d5 	bl	800c4ac <__kernel_rem_pio2>
 800c302:	9b04      	ldr	r3, [sp, #16]
 800c304:	4605      	mov	r5, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	f6bf ae51 	bge.w	800bfae <__ieee754_rem_pio2+0x6e>
 800c30c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c314:	e9c4 2300 	strd	r2, r3, [r4]
 800c318:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c31c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c320:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c324:	e703      	b.n	800c12e <__ieee754_rem_pio2+0x1ee>
 800c326:	bf00      	nop
 800c328:	41700000 	.word	0x41700000
 800c32c:	0800d6d8 	.word	0x0800d6d8

0800c330 <__kernel_cos>:
 800c330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c338:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c33c:	4680      	mov	r8, r0
 800c33e:	460f      	mov	r7, r1
 800c340:	e9cd 2300 	strd	r2, r3, [sp]
 800c344:	da04      	bge.n	800c350 <__kernel_cos+0x20>
 800c346:	f7f4 fbc5 	bl	8000ad4 <__aeabi_d2iz>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	f000 8086 	beq.w	800c45c <__kernel_cos+0x12c>
 800c350:	4642      	mov	r2, r8
 800c352:	463b      	mov	r3, r7
 800c354:	4640      	mov	r0, r8
 800c356:	4639      	mov	r1, r7
 800c358:	f7f4 f922 	bl	80005a0 <__aeabi_dmul>
 800c35c:	2200      	movs	r2, #0
 800c35e:	4b4e      	ldr	r3, [pc, #312]	; (800c498 <__kernel_cos+0x168>)
 800c360:	4604      	mov	r4, r0
 800c362:	460d      	mov	r5, r1
 800c364:	f7f4 f91c 	bl	80005a0 <__aeabi_dmul>
 800c368:	a33f      	add	r3, pc, #252	; (adr r3, 800c468 <__kernel_cos+0x138>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	4682      	mov	sl, r0
 800c370:	468b      	mov	fp, r1
 800c372:	4620      	mov	r0, r4
 800c374:	4629      	mov	r1, r5
 800c376:	f7f4 f913 	bl	80005a0 <__aeabi_dmul>
 800c37a:	a33d      	add	r3, pc, #244	; (adr r3, 800c470 <__kernel_cos+0x140>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f3 ff58 	bl	8000234 <__adddf3>
 800c384:	4622      	mov	r2, r4
 800c386:	462b      	mov	r3, r5
 800c388:	f7f4 f90a 	bl	80005a0 <__aeabi_dmul>
 800c38c:	a33a      	add	r3, pc, #232	; (adr r3, 800c478 <__kernel_cos+0x148>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f7f3 ff4d 	bl	8000230 <__aeabi_dsub>
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	f7f4 f901 	bl	80005a0 <__aeabi_dmul>
 800c39e:	a338      	add	r3, pc, #224	; (adr r3, 800c480 <__kernel_cos+0x150>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f3 ff46 	bl	8000234 <__adddf3>
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	462b      	mov	r3, r5
 800c3ac:	f7f4 f8f8 	bl	80005a0 <__aeabi_dmul>
 800c3b0:	a335      	add	r3, pc, #212	; (adr r3, 800c488 <__kernel_cos+0x158>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f3 ff3b 	bl	8000230 <__aeabi_dsub>
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	462b      	mov	r3, r5
 800c3be:	f7f4 f8ef 	bl	80005a0 <__aeabi_dmul>
 800c3c2:	a333      	add	r3, pc, #204	; (adr r3, 800c490 <__kernel_cos+0x160>)
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	f7f3 ff34 	bl	8000234 <__adddf3>
 800c3cc:	4622      	mov	r2, r4
 800c3ce:	462b      	mov	r3, r5
 800c3d0:	f7f4 f8e6 	bl	80005a0 <__aeabi_dmul>
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	f7f4 f8e2 	bl	80005a0 <__aeabi_dmul>
 800c3dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	460d      	mov	r5, r1
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	f7f4 f8da 	bl	80005a0 <__aeabi_dmul>
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f7f3 ff1c 	bl	8000230 <__aeabi_dsub>
 800c3f8:	4b28      	ldr	r3, [pc, #160]	; (800c49c <__kernel_cos+0x16c>)
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	429e      	cmp	r6, r3
 800c3fe:	4689      	mov	r9, r1
 800c400:	dc0e      	bgt.n	800c420 <__kernel_cos+0xf0>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	4650      	mov	r0, sl
 800c408:	4659      	mov	r1, fp
 800c40a:	f7f3 ff11 	bl	8000230 <__aeabi_dsub>
 800c40e:	4602      	mov	r2, r0
 800c410:	2000      	movs	r0, #0
 800c412:	460b      	mov	r3, r1
 800c414:	4922      	ldr	r1, [pc, #136]	; (800c4a0 <__kernel_cos+0x170>)
 800c416:	f7f3 ff0b 	bl	8000230 <__aeabi_dsub>
 800c41a:	b003      	add	sp, #12
 800c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c420:	2400      	movs	r4, #0
 800c422:	4b20      	ldr	r3, [pc, #128]	; (800c4a4 <__kernel_cos+0x174>)
 800c424:	4622      	mov	r2, r4
 800c426:	429e      	cmp	r6, r3
 800c428:	bfcc      	ite	gt
 800c42a:	4d1f      	ldrgt	r5, [pc, #124]	; (800c4a8 <__kernel_cos+0x178>)
 800c42c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c430:	462b      	mov	r3, r5
 800c432:	2000      	movs	r0, #0
 800c434:	491a      	ldr	r1, [pc, #104]	; (800c4a0 <__kernel_cos+0x170>)
 800c436:	f7f3 fefb 	bl	8000230 <__aeabi_dsub>
 800c43a:	4622      	mov	r2, r4
 800c43c:	4606      	mov	r6, r0
 800c43e:	460f      	mov	r7, r1
 800c440:	462b      	mov	r3, r5
 800c442:	4650      	mov	r0, sl
 800c444:	4659      	mov	r1, fp
 800c446:	f7f3 fef3 	bl	8000230 <__aeabi_dsub>
 800c44a:	4642      	mov	r2, r8
 800c44c:	464b      	mov	r3, r9
 800c44e:	f7f3 feef 	bl	8000230 <__aeabi_dsub>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4630      	mov	r0, r6
 800c458:	4639      	mov	r1, r7
 800c45a:	e7dc      	b.n	800c416 <__kernel_cos+0xe6>
 800c45c:	2000      	movs	r0, #0
 800c45e:	4910      	ldr	r1, [pc, #64]	; (800c4a0 <__kernel_cos+0x170>)
 800c460:	e7db      	b.n	800c41a <__kernel_cos+0xea>
 800c462:	bf00      	nop
 800c464:	f3af 8000 	nop.w
 800c468:	be8838d4 	.word	0xbe8838d4
 800c46c:	bda8fae9 	.word	0xbda8fae9
 800c470:	bdb4b1c4 	.word	0xbdb4b1c4
 800c474:	3e21ee9e 	.word	0x3e21ee9e
 800c478:	809c52ad 	.word	0x809c52ad
 800c47c:	3e927e4f 	.word	0x3e927e4f
 800c480:	19cb1590 	.word	0x19cb1590
 800c484:	3efa01a0 	.word	0x3efa01a0
 800c488:	16c15177 	.word	0x16c15177
 800c48c:	3f56c16c 	.word	0x3f56c16c
 800c490:	5555554c 	.word	0x5555554c
 800c494:	3fa55555 	.word	0x3fa55555
 800c498:	3fe00000 	.word	0x3fe00000
 800c49c:	3fd33332 	.word	0x3fd33332
 800c4a0:	3ff00000 	.word	0x3ff00000
 800c4a4:	3fe90000 	.word	0x3fe90000
 800c4a8:	3fd20000 	.word	0x3fd20000

0800c4ac <__kernel_rem_pio2>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c4b4:	9308      	str	r3, [sp, #32]
 800c4b6:	9106      	str	r1, [sp, #24]
 800c4b8:	4bb6      	ldr	r3, [pc, #728]	; (800c794 <__kernel_rem_pio2+0x2e8>)
 800c4ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c4bc:	f112 0f14 	cmn.w	r2, #20
 800c4c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4c4:	bfa8      	it	ge
 800c4c6:	1ed4      	subge	r4, r2, #3
 800c4c8:	9302      	str	r3, [sp, #8]
 800c4ca:	9b08      	ldr	r3, [sp, #32]
 800c4cc:	bfb8      	it	lt
 800c4ce:	2400      	movlt	r4, #0
 800c4d0:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4d4:	9307      	str	r3, [sp, #28]
 800c4d6:	bfa4      	itt	ge
 800c4d8:	2318      	movge	r3, #24
 800c4da:	fb94 f4f3 	sdivge	r4, r4, r3
 800c4de:	f06f 0317 	mvn.w	r3, #23
 800c4e2:	fb04 3303 	mla	r3, r4, r3, r3
 800c4e6:	eb03 0b02 	add.w	fp, r3, r2
 800c4ea:	9a07      	ldr	r2, [sp, #28]
 800c4ec:	9b02      	ldr	r3, [sp, #8]
 800c4ee:	1aa7      	subs	r7, r4, r2
 800c4f0:	eb03 0802 	add.w	r8, r3, r2
 800c4f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c4f6:	2500      	movs	r5, #0
 800c4f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2300      	movs	r3, #0
 800c500:	9009      	str	r0, [sp, #36]	; 0x24
 800c502:	ae20      	add	r6, sp, #128	; 0x80
 800c504:	4545      	cmp	r5, r8
 800c506:	dd14      	ble.n	800c532 <__kernel_rem_pio2+0x86>
 800c508:	f04f 0800 	mov.w	r8, #0
 800c50c:	9a08      	ldr	r2, [sp, #32]
 800c50e:	ab20      	add	r3, sp, #128	; 0x80
 800c510:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c514:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c518:	9b02      	ldr	r3, [sp, #8]
 800c51a:	4598      	cmp	r8, r3
 800c51c:	dc35      	bgt.n	800c58a <__kernel_rem_pio2+0xde>
 800c51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c520:	2200      	movs	r2, #0
 800c522:	f1a3 0908 	sub.w	r9, r3, #8
 800c526:	2300      	movs	r3, #0
 800c528:	462f      	mov	r7, r5
 800c52a:	2600      	movs	r6, #0
 800c52c:	e9cd 2300 	strd	r2, r3, [sp]
 800c530:	e01f      	b.n	800c572 <__kernel_rem_pio2+0xc6>
 800c532:	42ef      	cmn	r7, r5
 800c534:	d40b      	bmi.n	800c54e <__kernel_rem_pio2+0xa2>
 800c536:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c53a:	e9cd 2300 	strd	r2, r3, [sp]
 800c53e:	f7f3 ffc5 	bl	80004cc <__aeabi_i2d>
 800c542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c546:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c54a:	3501      	adds	r5, #1
 800c54c:	e7da      	b.n	800c504 <__kernel_rem_pio2+0x58>
 800c54e:	4610      	mov	r0, r2
 800c550:	4619      	mov	r1, r3
 800c552:	e7f8      	b.n	800c546 <__kernel_rem_pio2+0x9a>
 800c554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c558:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c55c:	f7f4 f820 	bl	80005a0 <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c568:	f7f3 fe64 	bl	8000234 <__adddf3>
 800c56c:	e9cd 0100 	strd	r0, r1, [sp]
 800c570:	3601      	adds	r6, #1
 800c572:	9b07      	ldr	r3, [sp, #28]
 800c574:	3f08      	subs	r7, #8
 800c576:	429e      	cmp	r6, r3
 800c578:	ddec      	ble.n	800c554 <__kernel_rem_pio2+0xa8>
 800c57a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c57e:	f108 0801 	add.w	r8, r8, #1
 800c582:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c586:	3508      	adds	r5, #8
 800c588:	e7c6      	b.n	800c518 <__kernel_rem_pio2+0x6c>
 800c58a:	9b02      	ldr	r3, [sp, #8]
 800c58c:	aa0c      	add	r2, sp, #48	; 0x30
 800c58e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c592:	930b      	str	r3, [sp, #44]	; 0x2c
 800c594:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c596:	9e02      	ldr	r6, [sp, #8]
 800c598:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c59c:	930a      	str	r3, [sp, #40]	; 0x28
 800c59e:	ab98      	add	r3, sp, #608	; 0x260
 800c5a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5a4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c5a8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c5aa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c5ae:	46d0      	mov	r8, sl
 800c5b0:	46b1      	mov	r9, r6
 800c5b2:	af0c      	add	r7, sp, #48	; 0x30
 800c5b4:	9700      	str	r7, [sp, #0]
 800c5b6:	f1b9 0f00 	cmp.w	r9, #0
 800c5ba:	f1a8 0808 	sub.w	r8, r8, #8
 800c5be:	dc71      	bgt.n	800c6a4 <__kernel_rem_pio2+0x1f8>
 800c5c0:	465a      	mov	r2, fp
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f000 fbeb 	bl	800cda0 <scalbn>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	f7f3 ffe4 	bl	80005a0 <__aeabi_dmul>
 800c5d8:	f000 fb62 	bl	800cca0 <floor>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4b6e      	ldr	r3, [pc, #440]	; (800c798 <__kernel_rem_pio2+0x2ec>)
 800c5e0:	f7f3 ffde 	bl	80005a0 <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	f7f3 fe20 	bl	8000230 <__aeabi_dsub>
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	f7f4 fa6e 	bl	8000ad4 <__aeabi_d2iz>
 800c5f8:	9004      	str	r0, [sp, #16]
 800c5fa:	f7f3 ff67 	bl	80004cc <__aeabi_i2d>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4620      	mov	r0, r4
 800c604:	4629      	mov	r1, r5
 800c606:	f7f3 fe13 	bl	8000230 <__aeabi_dsub>
 800c60a:	f1bb 0f00 	cmp.w	fp, #0
 800c60e:	4680      	mov	r8, r0
 800c610:	4689      	mov	r9, r1
 800c612:	dd70      	ble.n	800c6f6 <__kernel_rem_pio2+0x24a>
 800c614:	1e72      	subs	r2, r6, #1
 800c616:	ab0c      	add	r3, sp, #48	; 0x30
 800c618:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c61c:	9c04      	ldr	r4, [sp, #16]
 800c61e:	f1cb 0118 	rsb	r1, fp, #24
 800c622:	fa40 f301 	asr.w	r3, r0, r1
 800c626:	441c      	add	r4, r3
 800c628:	408b      	lsls	r3, r1
 800c62a:	1ac0      	subs	r0, r0, r3
 800c62c:	ab0c      	add	r3, sp, #48	; 0x30
 800c62e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c632:	f1cb 0317 	rsb	r3, fp, #23
 800c636:	9404      	str	r4, [sp, #16]
 800c638:	fa40 f303 	asr.w	r3, r0, r3
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	9b00      	ldr	r3, [sp, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	dd66      	ble.n	800c712 <__kernel_rem_pio2+0x266>
 800c644:	2200      	movs	r2, #0
 800c646:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c64a:	4614      	mov	r4, r2
 800c64c:	9b04      	ldr	r3, [sp, #16]
 800c64e:	3301      	adds	r3, #1
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	4296      	cmp	r6, r2
 800c654:	f300 80ac 	bgt.w	800c7b0 <__kernel_rem_pio2+0x304>
 800c658:	f1bb 0f00 	cmp.w	fp, #0
 800c65c:	dd07      	ble.n	800c66e <__kernel_rem_pio2+0x1c2>
 800c65e:	f1bb 0f01 	cmp.w	fp, #1
 800c662:	f000 80b4 	beq.w	800c7ce <__kernel_rem_pio2+0x322>
 800c666:	f1bb 0f02 	cmp.w	fp, #2
 800c66a:	f000 80ba 	beq.w	800c7e2 <__kernel_rem_pio2+0x336>
 800c66e:	9b00      	ldr	r3, [sp, #0]
 800c670:	2b02      	cmp	r3, #2
 800c672:	d14e      	bne.n	800c712 <__kernel_rem_pio2+0x266>
 800c674:	4642      	mov	r2, r8
 800c676:	464b      	mov	r3, r9
 800c678:	2000      	movs	r0, #0
 800c67a:	4948      	ldr	r1, [pc, #288]	; (800c79c <__kernel_rem_pio2+0x2f0>)
 800c67c:	f7f3 fdd8 	bl	8000230 <__aeabi_dsub>
 800c680:	4680      	mov	r8, r0
 800c682:	4689      	mov	r9, r1
 800c684:	2c00      	cmp	r4, #0
 800c686:	d044      	beq.n	800c712 <__kernel_rem_pio2+0x266>
 800c688:	465a      	mov	r2, fp
 800c68a:	2000      	movs	r0, #0
 800c68c:	4943      	ldr	r1, [pc, #268]	; (800c79c <__kernel_rem_pio2+0x2f0>)
 800c68e:	f000 fb87 	bl	800cda0 <scalbn>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4640      	mov	r0, r8
 800c698:	4649      	mov	r1, r9
 800c69a:	f7f3 fdc9 	bl	8000230 <__aeabi_dsub>
 800c69e:	4680      	mov	r8, r0
 800c6a0:	4689      	mov	r9, r1
 800c6a2:	e036      	b.n	800c712 <__kernel_rem_pio2+0x266>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4b3e      	ldr	r3, [pc, #248]	; (800c7a0 <__kernel_rem_pio2+0x2f4>)
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	f7f3 ff78 	bl	80005a0 <__aeabi_dmul>
 800c6b0:	f7f4 fa10 	bl	8000ad4 <__aeabi_d2iz>
 800c6b4:	f7f3 ff0a 	bl	80004cc <__aeabi_i2d>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4b38      	ldr	r3, [pc, #224]	; (800c7a4 <__kernel_rem_pio2+0x2f8>)
 800c6c4:	f7f3 ff6c 	bl	80005a0 <__aeabi_dmul>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f7f3 fdae 	bl	8000230 <__aeabi_dsub>
 800c6d4:	f7f4 f9fe 	bl	8000ad4 <__aeabi_d2iz>
 800c6d8:	9b00      	ldr	r3, [sp, #0]
 800c6da:	f109 39ff 	add.w	r9, r9, #4294967295
 800c6de:	f843 0b04 	str.w	r0, [r3], #4
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6e8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6ec:	f7f3 fda2 	bl	8000234 <__adddf3>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	e75f      	b.n	800c5b6 <__kernel_rem_pio2+0x10a>
 800c6f6:	d105      	bne.n	800c704 <__kernel_rem_pio2+0x258>
 800c6f8:	1e73      	subs	r3, r6, #1
 800c6fa:	aa0c      	add	r2, sp, #48	; 0x30
 800c6fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c700:	15c3      	asrs	r3, r0, #23
 800c702:	e79b      	b.n	800c63c <__kernel_rem_pio2+0x190>
 800c704:	2200      	movs	r2, #0
 800c706:	4b28      	ldr	r3, [pc, #160]	; (800c7a8 <__kernel_rem_pio2+0x2fc>)
 800c708:	f7f4 f9d0 	bl	8000aac <__aeabi_dcmpge>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d13e      	bne.n	800c78e <__kernel_rem_pio2+0x2e2>
 800c710:	9000      	str	r0, [sp, #0]
 800c712:	2200      	movs	r2, #0
 800c714:	2300      	movs	r3, #0
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f4 f9a9 	bl	8000a70 <__aeabi_dcmpeq>
 800c71e:	2800      	cmp	r0, #0
 800c720:	f000 80b1 	beq.w	800c886 <__kernel_rem_pio2+0x3da>
 800c724:	1e74      	subs	r4, r6, #1
 800c726:	4623      	mov	r3, r4
 800c728:	2200      	movs	r2, #0
 800c72a:	9902      	ldr	r1, [sp, #8]
 800c72c:	428b      	cmp	r3, r1
 800c72e:	da5f      	bge.n	800c7f0 <__kernel_rem_pio2+0x344>
 800c730:	2a00      	cmp	r2, #0
 800c732:	d074      	beq.n	800c81e <__kernel_rem_pio2+0x372>
 800c734:	ab0c      	add	r3, sp, #48	; 0x30
 800c736:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c73a:	f1ab 0b18 	sub.w	fp, fp, #24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 809f 	beq.w	800c882 <__kernel_rem_pio2+0x3d6>
 800c744:	465a      	mov	r2, fp
 800c746:	2000      	movs	r0, #0
 800c748:	4914      	ldr	r1, [pc, #80]	; (800c79c <__kernel_rem_pio2+0x2f0>)
 800c74a:	f000 fb29 	bl	800cda0 <scalbn>
 800c74e:	46a2      	mov	sl, r4
 800c750:	4606      	mov	r6, r0
 800c752:	460f      	mov	r7, r1
 800c754:	f04f 0800 	mov.w	r8, #0
 800c758:	ab70      	add	r3, sp, #448	; 0x1c0
 800c75a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c7a0 <__kernel_rem_pio2+0x2f4>
 800c75e:	00e5      	lsls	r5, r4, #3
 800c760:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c764:	f1ba 0f00 	cmp.w	sl, #0
 800c768:	f280 80c3 	bge.w	800c8f2 <__kernel_rem_pio2+0x446>
 800c76c:	4626      	mov	r6, r4
 800c76e:	2e00      	cmp	r6, #0
 800c770:	f2c0 80f5 	blt.w	800c95e <__kernel_rem_pio2+0x4b2>
 800c774:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <__kernel_rem_pio2+0x300>)
 800c776:	f04f 0a00 	mov.w	sl, #0
 800c77a:	9307      	str	r3, [sp, #28]
 800c77c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c77e:	f04f 0b00 	mov.w	fp, #0
 800c782:	f04f 0800 	mov.w	r8, #0
 800c786:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c78a:	1ba7      	subs	r7, r4, r6
 800c78c:	e0db      	b.n	800c946 <__kernel_rem_pio2+0x49a>
 800c78e:	2302      	movs	r3, #2
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	e757      	b.n	800c644 <__kernel_rem_pio2+0x198>
 800c794:	0800d820 	.word	0x0800d820
 800c798:	40200000 	.word	0x40200000
 800c79c:	3ff00000 	.word	0x3ff00000
 800c7a0:	3e700000 	.word	0x3e700000
 800c7a4:	41700000 	.word	0x41700000
 800c7a8:	3fe00000 	.word	0x3fe00000
 800c7ac:	0800d7e0 	.word	0x0800d7e0
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	b944      	cbnz	r4, 800c7c6 <__kernel_rem_pio2+0x31a>
 800c7b4:	b11b      	cbz	r3, 800c7be <__kernel_rem_pio2+0x312>
 800c7b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	2301      	movs	r3, #1
 800c7be:	461c      	mov	r4, r3
 800c7c0:	3201      	adds	r2, #1
 800c7c2:	3704      	adds	r7, #4
 800c7c4:	e745      	b.n	800c652 <__kernel_rem_pio2+0x1a6>
 800c7c6:	1acb      	subs	r3, r1, r3
 800c7c8:	603b      	str	r3, [r7, #0]
 800c7ca:	4623      	mov	r3, r4
 800c7cc:	e7f7      	b.n	800c7be <__kernel_rem_pio2+0x312>
 800c7ce:	1e72      	subs	r2, r6, #1
 800c7d0:	ab0c      	add	r3, sp, #48	; 0x30
 800c7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c7da:	a90c      	add	r1, sp, #48	; 0x30
 800c7dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c7e0:	e745      	b.n	800c66e <__kernel_rem_pio2+0x1c2>
 800c7e2:	1e72      	subs	r2, r6, #1
 800c7e4:	ab0c      	add	r3, sp, #48	; 0x30
 800c7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c7ee:	e7f4      	b.n	800c7da <__kernel_rem_pio2+0x32e>
 800c7f0:	a90c      	add	r1, sp, #48	; 0x30
 800c7f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	430a      	orrs	r2, r1
 800c7fa:	e796      	b.n	800c72a <__kernel_rem_pio2+0x27e>
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c802:	2a00      	cmp	r2, #0
 800c804:	d0fa      	beq.n	800c7fc <__kernel_rem_pio2+0x350>
 800c806:	9b08      	ldr	r3, [sp, #32]
 800c808:	f106 0801 	add.w	r8, r6, #1
 800c80c:	18f5      	adds	r5, r6, r3
 800c80e:	ab20      	add	r3, sp, #128	; 0x80
 800c810:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c814:	4434      	add	r4, r6
 800c816:	4544      	cmp	r4, r8
 800c818:	da04      	bge.n	800c824 <__kernel_rem_pio2+0x378>
 800c81a:	4626      	mov	r6, r4
 800c81c:	e6bf      	b.n	800c59e <__kernel_rem_pio2+0xf2>
 800c81e:	2401      	movs	r4, #1
 800c820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c822:	e7ec      	b.n	800c7fe <__kernel_rem_pio2+0x352>
 800c824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c826:	f04f 0900 	mov.w	r9, #0
 800c82a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c82e:	f7f3 fe4d 	bl	80004cc <__aeabi_i2d>
 800c832:	2600      	movs	r6, #0
 800c834:	2700      	movs	r7, #0
 800c836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c838:	e9c5 0100 	strd	r0, r1, [r5]
 800c83c:	3b08      	subs	r3, #8
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	9504      	str	r5, [sp, #16]
 800c842:	9b07      	ldr	r3, [sp, #28]
 800c844:	4599      	cmp	r9, r3
 800c846:	dd05      	ble.n	800c854 <__kernel_rem_pio2+0x3a8>
 800c848:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c84c:	f108 0801 	add.w	r8, r8, #1
 800c850:	3508      	adds	r5, #8
 800c852:	e7e0      	b.n	800c816 <__kernel_rem_pio2+0x36a>
 800c854:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c858:	9900      	ldr	r1, [sp, #0]
 800c85a:	f109 0901 	add.w	r9, r9, #1
 800c85e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c862:	9100      	str	r1, [sp, #0]
 800c864:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c868:	f8cd c010 	str.w	ip, [sp, #16]
 800c86c:	f7f3 fe98 	bl	80005a0 <__aeabi_dmul>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	4630      	mov	r0, r6
 800c876:	4639      	mov	r1, r7
 800c878:	f7f3 fcdc 	bl	8000234 <__adddf3>
 800c87c:	4606      	mov	r6, r0
 800c87e:	460f      	mov	r7, r1
 800c880:	e7df      	b.n	800c842 <__kernel_rem_pio2+0x396>
 800c882:	3c01      	subs	r4, #1
 800c884:	e756      	b.n	800c734 <__kernel_rem_pio2+0x288>
 800c886:	f1cb 0200 	rsb	r2, fp, #0
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f000 fa87 	bl	800cda0 <scalbn>
 800c892:	2200      	movs	r2, #0
 800c894:	4ba4      	ldr	r3, [pc, #656]	; (800cb28 <__kernel_rem_pio2+0x67c>)
 800c896:	4604      	mov	r4, r0
 800c898:	460d      	mov	r5, r1
 800c89a:	f7f4 f907 	bl	8000aac <__aeabi_dcmpge>
 800c89e:	b1f8      	cbz	r0, 800c8e0 <__kernel_rem_pio2+0x434>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4ba2      	ldr	r3, [pc, #648]	; (800cb2c <__kernel_rem_pio2+0x680>)
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f7f3 fe7a 	bl	80005a0 <__aeabi_dmul>
 800c8ac:	f7f4 f912 	bl	8000ad4 <__aeabi_d2iz>
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	f7f3 fe0b 	bl	80004cc <__aeabi_i2d>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	4b9b      	ldr	r3, [pc, #620]	; (800cb28 <__kernel_rem_pio2+0x67c>)
 800c8ba:	f7f3 fe71 	bl	80005a0 <__aeabi_dmul>
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f7f3 fcb3 	bl	8000230 <__aeabi_dsub>
 800c8ca:	f7f4 f903 	bl	8000ad4 <__aeabi_d2iz>
 800c8ce:	1c74      	adds	r4, r6, #1
 800c8d0:	ab0c      	add	r3, sp, #48	; 0x30
 800c8d2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c8d6:	f10b 0b18 	add.w	fp, fp, #24
 800c8da:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c8de:	e731      	b.n	800c744 <__kernel_rem_pio2+0x298>
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f7f4 f8f6 	bl	8000ad4 <__aeabi_d2iz>
 800c8e8:	ab0c      	add	r3, sp, #48	; 0x30
 800c8ea:	4634      	mov	r4, r6
 800c8ec:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c8f0:	e728      	b.n	800c744 <__kernel_rem_pio2+0x298>
 800c8f2:	ab0c      	add	r3, sp, #48	; 0x30
 800c8f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c8f8:	f7f3 fde8 	bl	80004cc <__aeabi_i2d>
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	463b      	mov	r3, r7
 800c900:	f7f3 fe4e 	bl	80005a0 <__aeabi_dmul>
 800c904:	4642      	mov	r2, r8
 800c906:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c90a:	464b      	mov	r3, r9
 800c90c:	4630      	mov	r0, r6
 800c90e:	4639      	mov	r1, r7
 800c910:	f7f3 fe46 	bl	80005a0 <__aeabi_dmul>
 800c914:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c918:	4606      	mov	r6, r0
 800c91a:	460f      	mov	r7, r1
 800c91c:	e722      	b.n	800c764 <__kernel_rem_pio2+0x2b8>
 800c91e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c922:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c926:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c92a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c92e:	f7f3 fe37 	bl	80005a0 <__aeabi_dmul>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4650      	mov	r0, sl
 800c938:	4659      	mov	r1, fp
 800c93a:	f7f3 fc7b 	bl	8000234 <__adddf3>
 800c93e:	4682      	mov	sl, r0
 800c940:	468b      	mov	fp, r1
 800c942:	f108 0801 	add.w	r8, r8, #1
 800c946:	9b02      	ldr	r3, [sp, #8]
 800c948:	4598      	cmp	r8, r3
 800c94a:	dc01      	bgt.n	800c950 <__kernel_rem_pio2+0x4a4>
 800c94c:	45b8      	cmp	r8, r7
 800c94e:	dde6      	ble.n	800c91e <__kernel_rem_pio2+0x472>
 800c950:	ab48      	add	r3, sp, #288	; 0x120
 800c952:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c956:	e9c7 ab00 	strd	sl, fp, [r7]
 800c95a:	3e01      	subs	r6, #1
 800c95c:	e707      	b.n	800c76e <__kernel_rem_pio2+0x2c2>
 800c95e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c960:	2b02      	cmp	r3, #2
 800c962:	dc09      	bgt.n	800c978 <__kernel_rem_pio2+0x4cc>
 800c964:	2b00      	cmp	r3, #0
 800c966:	dc32      	bgt.n	800c9ce <__kernel_rem_pio2+0x522>
 800c968:	d05a      	beq.n	800ca20 <__kernel_rem_pio2+0x574>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	f003 0007 	and.w	r0, r3, #7
 800c970:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d1f5      	bne.n	800c96a <__kernel_rem_pio2+0x4be>
 800c97e:	ab48      	add	r3, sp, #288	; 0x120
 800c980:	441d      	add	r5, r3
 800c982:	46aa      	mov	sl, r5
 800c984:	46a3      	mov	fp, r4
 800c986:	f1bb 0f00 	cmp.w	fp, #0
 800c98a:	dc76      	bgt.n	800ca7a <__kernel_rem_pio2+0x5ce>
 800c98c:	46aa      	mov	sl, r5
 800c98e:	46a3      	mov	fp, r4
 800c990:	f1bb 0f01 	cmp.w	fp, #1
 800c994:	f300 8090 	bgt.w	800cab8 <__kernel_rem_pio2+0x60c>
 800c998:	2700      	movs	r7, #0
 800c99a:	463e      	mov	r6, r7
 800c99c:	2c01      	cmp	r4, #1
 800c99e:	f300 80aa 	bgt.w	800caf6 <__kernel_rem_pio2+0x64a>
 800c9a2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c9a6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c9aa:	9b00      	ldr	r3, [sp, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f040 80ac 	bne.w	800cb0a <__kernel_rem_pio2+0x65e>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	462a      	mov	r2, r5
 800c9b6:	9806      	ldr	r0, [sp, #24]
 800c9b8:	e9c0 2300 	strd	r2, r3, [r0]
 800c9bc:	4622      	mov	r2, r4
 800c9be:	460b      	mov	r3, r1
 800c9c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c9c4:	463a      	mov	r2, r7
 800c9c6:	4633      	mov	r3, r6
 800c9c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c9cc:	e7cd      	b.n	800c96a <__kernel_rem_pio2+0x4be>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	46a0      	mov	r8, r4
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	ab48      	add	r3, sp, #288	; 0x120
 800c9d6:	441d      	add	r5, r3
 800c9d8:	f1b8 0f00 	cmp.w	r8, #0
 800c9dc:	da3a      	bge.n	800ca54 <__kernel_rem_pio2+0x5a8>
 800c9de:	9b00      	ldr	r3, [sp, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d03e      	beq.n	800ca62 <__kernel_rem_pio2+0x5b6>
 800c9e4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	462b      	mov	r3, r5
 800c9ec:	9d06      	ldr	r5, [sp, #24]
 800c9ee:	2601      	movs	r6, #1
 800c9f0:	e9c5 2300 	strd	r2, r3, [r5]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c9fa:	f7f3 fc19 	bl	8000230 <__aeabi_dsub>
 800c9fe:	4684      	mov	ip, r0
 800ca00:	460f      	mov	r7, r1
 800ca02:	ad48      	add	r5, sp, #288	; 0x120
 800ca04:	42b4      	cmp	r4, r6
 800ca06:	f105 0508 	add.w	r5, r5, #8
 800ca0a:	da2c      	bge.n	800ca66 <__kernel_rem_pio2+0x5ba>
 800ca0c:	9b00      	ldr	r3, [sp, #0]
 800ca0e:	b10b      	cbz	r3, 800ca14 <__kernel_rem_pio2+0x568>
 800ca10:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ca14:	4662      	mov	r2, ip
 800ca16:	463b      	mov	r3, r7
 800ca18:	9906      	ldr	r1, [sp, #24]
 800ca1a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ca1e:	e7a4      	b.n	800c96a <__kernel_rem_pio2+0x4be>
 800ca20:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ca22:	ab48      	add	r3, sp, #288	; 0x120
 800ca24:	4637      	mov	r7, r6
 800ca26:	441d      	add	r5, r3
 800ca28:	2c00      	cmp	r4, #0
 800ca2a:	da09      	bge.n	800ca40 <__kernel_rem_pio2+0x594>
 800ca2c:	9b00      	ldr	r3, [sp, #0]
 800ca2e:	b10b      	cbz	r3, 800ca34 <__kernel_rem_pio2+0x588>
 800ca30:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ca34:	4632      	mov	r2, r6
 800ca36:	463b      	mov	r3, r7
 800ca38:	9906      	ldr	r1, [sp, #24]
 800ca3a:	e9c1 2300 	strd	r2, r3, [r1]
 800ca3e:	e794      	b.n	800c96a <__kernel_rem_pio2+0x4be>
 800ca40:	4630      	mov	r0, r6
 800ca42:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f3 fbf4 	bl	8000234 <__adddf3>
 800ca4c:	3c01      	subs	r4, #1
 800ca4e:	4606      	mov	r6, r0
 800ca50:	460f      	mov	r7, r1
 800ca52:	e7e9      	b.n	800ca28 <__kernel_rem_pio2+0x57c>
 800ca54:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ca58:	f7f3 fbec 	bl	8000234 <__adddf3>
 800ca5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca60:	e7ba      	b.n	800c9d8 <__kernel_rem_pio2+0x52c>
 800ca62:	460d      	mov	r5, r1
 800ca64:	e7c0      	b.n	800c9e8 <__kernel_rem_pio2+0x53c>
 800ca66:	4660      	mov	r0, ip
 800ca68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca6c:	4639      	mov	r1, r7
 800ca6e:	f7f3 fbe1 	bl	8000234 <__adddf3>
 800ca72:	3601      	adds	r6, #1
 800ca74:	4684      	mov	ip, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	e7c4      	b.n	800ca04 <__kernel_rem_pio2+0x558>
 800ca7a:	e9da 6700 	ldrd	r6, r7, [sl]
 800ca7e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ca82:	4632      	mov	r2, r6
 800ca84:	463b      	mov	r3, r7
 800ca86:	4640      	mov	r0, r8
 800ca88:	4649      	mov	r1, r9
 800ca8a:	f7f3 fbd3 	bl	8000234 <__adddf3>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	460b      	mov	r3, r1
 800ca92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca96:	4640      	mov	r0, r8
 800ca98:	4649      	mov	r1, r9
 800ca9a:	f7f3 fbc9 	bl	8000230 <__aeabi_dsub>
 800ca9e:	4632      	mov	r2, r6
 800caa0:	463b      	mov	r3, r7
 800caa2:	f7f3 fbc7 	bl	8000234 <__adddf3>
 800caa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caaa:	e86a 0102 	strd	r0, r1, [sl], #-8
 800caae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cab2:	e9ca 2300 	strd	r2, r3, [sl]
 800cab6:	e766      	b.n	800c986 <__kernel_rem_pio2+0x4da>
 800cab8:	e9da 8900 	ldrd	r8, r9, [sl]
 800cabc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800cac0:	4642      	mov	r2, r8
 800cac2:	464b      	mov	r3, r9
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 fbb4 	bl	8000234 <__adddf3>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cad4:	4630      	mov	r0, r6
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7f3 fbaa 	bl	8000230 <__aeabi_dsub>
 800cadc:	4642      	mov	r2, r8
 800cade:	464b      	mov	r3, r9
 800cae0:	f7f3 fba8 	bl	8000234 <__adddf3>
 800cae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cae8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800caec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800caf0:	e9ca 2300 	strd	r2, r3, [sl]
 800caf4:	e74c      	b.n	800c990 <__kernel_rem_pio2+0x4e4>
 800caf6:	4638      	mov	r0, r7
 800caf8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cafc:	4631      	mov	r1, r6
 800cafe:	f7f3 fb99 	bl	8000234 <__adddf3>
 800cb02:	3c01      	subs	r4, #1
 800cb04:	4607      	mov	r7, r0
 800cb06:	460e      	mov	r6, r1
 800cb08:	e748      	b.n	800c99c <__kernel_rem_pio2+0x4f0>
 800cb0a:	9b06      	ldr	r3, [sp, #24]
 800cb0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cb10:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cb14:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cb18:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cb1c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cb20:	601d      	str	r5, [r3, #0]
 800cb22:	615e      	str	r6, [r3, #20]
 800cb24:	e721      	b.n	800c96a <__kernel_rem_pio2+0x4be>
 800cb26:	bf00      	nop
 800cb28:	41700000 	.word	0x41700000
 800cb2c:	3e700000 	.word	0x3e700000

0800cb30 <__kernel_sin>:
 800cb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	e9cd 2300 	strd	r2, r3, [sp]
 800cb3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb42:	4682      	mov	sl, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cb48:	da03      	bge.n	800cb52 <__kernel_sin+0x22>
 800cb4a:	f7f3 ffc3 	bl	8000ad4 <__aeabi_d2iz>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d050      	beq.n	800cbf4 <__kernel_sin+0xc4>
 800cb52:	4652      	mov	r2, sl
 800cb54:	4623      	mov	r3, r4
 800cb56:	4650      	mov	r0, sl
 800cb58:	4621      	mov	r1, r4
 800cb5a:	f7f3 fd21 	bl	80005a0 <__aeabi_dmul>
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460f      	mov	r7, r1
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4650      	mov	r0, sl
 800cb68:	4621      	mov	r1, r4
 800cb6a:	f7f3 fd19 	bl	80005a0 <__aeabi_dmul>
 800cb6e:	a33e      	add	r3, pc, #248	; (adr r3, 800cc68 <__kernel_sin+0x138>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	4680      	mov	r8, r0
 800cb76:	4689      	mov	r9, r1
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f3 fd10 	bl	80005a0 <__aeabi_dmul>
 800cb80:	a33b      	add	r3, pc, #236	; (adr r3, 800cc70 <__kernel_sin+0x140>)
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	f7f3 fb53 	bl	8000230 <__aeabi_dsub>
 800cb8a:	4632      	mov	r2, r6
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	f7f3 fd07 	bl	80005a0 <__aeabi_dmul>
 800cb92:	a339      	add	r3, pc, #228	; (adr r3, 800cc78 <__kernel_sin+0x148>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f7f3 fb4c 	bl	8000234 <__adddf3>
 800cb9c:	4632      	mov	r2, r6
 800cb9e:	463b      	mov	r3, r7
 800cba0:	f7f3 fcfe 	bl	80005a0 <__aeabi_dmul>
 800cba4:	a336      	add	r3, pc, #216	; (adr r3, 800cc80 <__kernel_sin+0x150>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f7f3 fb41 	bl	8000230 <__aeabi_dsub>
 800cbae:	4632      	mov	r2, r6
 800cbb0:	463b      	mov	r3, r7
 800cbb2:	f7f3 fcf5 	bl	80005a0 <__aeabi_dmul>
 800cbb6:	a334      	add	r3, pc, #208	; (adr r3, 800cc88 <__kernel_sin+0x158>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	f7f3 fb3a 	bl	8000234 <__adddf3>
 800cbc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbc4:	b9dd      	cbnz	r5, 800cbfe <__kernel_sin+0xce>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4630      	mov	r0, r6
 800cbcc:	4639      	mov	r1, r7
 800cbce:	f7f3 fce7 	bl	80005a0 <__aeabi_dmul>
 800cbd2:	a32f      	add	r3, pc, #188	; (adr r3, 800cc90 <__kernel_sin+0x160>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	f7f3 fb2a 	bl	8000230 <__aeabi_dsub>
 800cbdc:	4642      	mov	r2, r8
 800cbde:	464b      	mov	r3, r9
 800cbe0:	f7f3 fcde 	bl	80005a0 <__aeabi_dmul>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4650      	mov	r0, sl
 800cbea:	4621      	mov	r1, r4
 800cbec:	f7f3 fb22 	bl	8000234 <__adddf3>
 800cbf0:	4682      	mov	sl, r0
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	4650      	mov	r0, sl
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	b006      	add	sp, #24
 800cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfe:	2200      	movs	r2, #0
 800cc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc04:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <__kernel_sin+0x168>)
 800cc06:	f7f3 fccb 	bl	80005a0 <__aeabi_dmul>
 800cc0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	f7f3 fcc3 	bl	80005a0 <__aeabi_dmul>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc22:	f7f3 fb05 	bl	8000230 <__aeabi_dsub>
 800cc26:	4632      	mov	r2, r6
 800cc28:	463b      	mov	r3, r7
 800cc2a:	f7f3 fcb9 	bl	80005a0 <__aeabi_dmul>
 800cc2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc32:	f7f3 fafd 	bl	8000230 <__aeabi_dsub>
 800cc36:	a316      	add	r3, pc, #88	; (adr r3, 800cc90 <__kernel_sin+0x160>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	460f      	mov	r7, r1
 800cc40:	4640      	mov	r0, r8
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7f3 fcac 	bl	80005a0 <__aeabi_dmul>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4639      	mov	r1, r7
 800cc50:	f7f3 faf0 	bl	8000234 <__adddf3>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4650      	mov	r0, sl
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	f7f3 fae8 	bl	8000230 <__aeabi_dsub>
 800cc60:	e7c6      	b.n	800cbf0 <__kernel_sin+0xc0>
 800cc62:	bf00      	nop
 800cc64:	f3af 8000 	nop.w
 800cc68:	5acfd57c 	.word	0x5acfd57c
 800cc6c:	3de5d93a 	.word	0x3de5d93a
 800cc70:	8a2b9ceb 	.word	0x8a2b9ceb
 800cc74:	3e5ae5e6 	.word	0x3e5ae5e6
 800cc78:	57b1fe7d 	.word	0x57b1fe7d
 800cc7c:	3ec71de3 	.word	0x3ec71de3
 800cc80:	19c161d5 	.word	0x19c161d5
 800cc84:	3f2a01a0 	.word	0x3f2a01a0
 800cc88:	1110f8a6 	.word	0x1110f8a6
 800cc8c:	3f811111 	.word	0x3f811111
 800cc90:	55555549 	.word	0x55555549
 800cc94:	3fc55555 	.word	0x3fc55555
 800cc98:	3fe00000 	.word	0x3fe00000
 800cc9c:	00000000 	.word	0x00000000

0800cca0 <floor>:
 800cca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cca8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ccac:	2e13      	cmp	r6, #19
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4607      	mov	r7, r0
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	dc33      	bgt.n	800cd22 <floor+0x82>
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	da14      	bge.n	800cce8 <floor+0x48>
 800ccbe:	a334      	add	r3, pc, #208	; (adr r3, 800cd90 <floor+0xf0>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fab6 	bl	8000234 <__adddf3>
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2300      	movs	r3, #0
 800cccc:	f7f3 fef8 	bl	8000ac0 <__aeabi_dcmpgt>
 800ccd0:	b138      	cbz	r0, 800cce2 <floor+0x42>
 800ccd2:	2c00      	cmp	r4, #0
 800ccd4:	da58      	bge.n	800cd88 <floor+0xe8>
 800ccd6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ccda:	431d      	orrs	r5, r3
 800ccdc:	d001      	beq.n	800cce2 <floor+0x42>
 800ccde:	2500      	movs	r5, #0
 800cce0:	4c2d      	ldr	r4, [pc, #180]	; (800cd98 <floor+0xf8>)
 800cce2:	4623      	mov	r3, r4
 800cce4:	462f      	mov	r7, r5
 800cce6:	e025      	b.n	800cd34 <floor+0x94>
 800cce8:	4a2c      	ldr	r2, [pc, #176]	; (800cd9c <floor+0xfc>)
 800ccea:	fa42 f806 	asr.w	r8, r2, r6
 800ccee:	ea01 0208 	and.w	r2, r1, r8
 800ccf2:	4302      	orrs	r2, r0
 800ccf4:	d01e      	beq.n	800cd34 <floor+0x94>
 800ccf6:	a326      	add	r3, pc, #152	; (adr r3, 800cd90 <floor+0xf0>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f7f3 fa9a 	bl	8000234 <__adddf3>
 800cd00:	2200      	movs	r2, #0
 800cd02:	2300      	movs	r3, #0
 800cd04:	f7f3 fedc 	bl	8000ac0 <__aeabi_dcmpgt>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d0ea      	beq.n	800cce2 <floor+0x42>
 800cd0c:	2c00      	cmp	r4, #0
 800cd0e:	bfbe      	ittt	lt
 800cd10:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd14:	fa43 f606 	asrlt.w	r6, r3, r6
 800cd18:	19a4      	addlt	r4, r4, r6
 800cd1a:	2500      	movs	r5, #0
 800cd1c:	ea24 0408 	bic.w	r4, r4, r8
 800cd20:	e7df      	b.n	800cce2 <floor+0x42>
 800cd22:	2e33      	cmp	r6, #51	; 0x33
 800cd24:	dd0a      	ble.n	800cd3c <floor+0x9c>
 800cd26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd2a:	d103      	bne.n	800cd34 <floor+0x94>
 800cd2c:	f7f3 fa82 	bl	8000234 <__adddf3>
 800cd30:	4607      	mov	r7, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	4638      	mov	r0, r7
 800cd36:	4619      	mov	r1, r3
 800cd38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd40:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cd44:	fa22 f808 	lsr.w	r8, r2, r8
 800cd48:	ea18 0f00 	tst.w	r8, r0
 800cd4c:	d0f2      	beq.n	800cd34 <floor+0x94>
 800cd4e:	a310      	add	r3, pc, #64	; (adr r3, 800cd90 <floor+0xf0>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f7f3 fa6e 	bl	8000234 <__adddf3>
 800cd58:	2200      	movs	r2, #0
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	f7f3 feb0 	bl	8000ac0 <__aeabi_dcmpgt>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d0be      	beq.n	800cce2 <floor+0x42>
 800cd64:	2c00      	cmp	r4, #0
 800cd66:	da02      	bge.n	800cd6e <floor+0xce>
 800cd68:	2e14      	cmp	r6, #20
 800cd6a:	d103      	bne.n	800cd74 <floor+0xd4>
 800cd6c:	3401      	adds	r4, #1
 800cd6e:	ea25 0508 	bic.w	r5, r5, r8
 800cd72:	e7b6      	b.n	800cce2 <floor+0x42>
 800cd74:	2301      	movs	r3, #1
 800cd76:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd7a:	fa03 f606 	lsl.w	r6, r3, r6
 800cd7e:	4435      	add	r5, r6
 800cd80:	42bd      	cmp	r5, r7
 800cd82:	bf38      	it	cc
 800cd84:	18e4      	addcc	r4, r4, r3
 800cd86:	e7f2      	b.n	800cd6e <floor+0xce>
 800cd88:	2500      	movs	r5, #0
 800cd8a:	462c      	mov	r4, r5
 800cd8c:	e7a9      	b.n	800cce2 <floor+0x42>
 800cd8e:	bf00      	nop
 800cd90:	8800759c 	.word	0x8800759c
 800cd94:	7e37e43c 	.word	0x7e37e43c
 800cd98:	bff00000 	.word	0xbff00000
 800cd9c:	000fffff 	.word	0x000fffff

0800cda0 <scalbn>:
 800cda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	4617      	mov	r7, r2
 800cdac:	460b      	mov	r3, r1
 800cdae:	b996      	cbnz	r6, 800cdd6 <scalbn+0x36>
 800cdb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdb4:	4303      	orrs	r3, r0
 800cdb6:	d039      	beq.n	800ce2c <scalbn+0x8c>
 800cdb8:	4b33      	ldr	r3, [pc, #204]	; (800ce88 <scalbn+0xe8>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f7f3 fbf0 	bl	80005a0 <__aeabi_dmul>
 800cdc0:	4b32      	ldr	r3, [pc, #200]	; (800ce8c <scalbn+0xec>)
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	429f      	cmp	r7, r3
 800cdc6:	460d      	mov	r5, r1
 800cdc8:	da0f      	bge.n	800cdea <scalbn+0x4a>
 800cdca:	a32b      	add	r3, pc, #172	; (adr r3, 800ce78 <scalbn+0xd8>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f7f3 fbe6 	bl	80005a0 <__aeabi_dmul>
 800cdd4:	e006      	b.n	800cde4 <scalbn+0x44>
 800cdd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cdda:	4296      	cmp	r6, r2
 800cddc:	d10a      	bne.n	800cdf4 <scalbn+0x54>
 800cdde:	4602      	mov	r2, r0
 800cde0:	f7f3 fa28 	bl	8000234 <__adddf3>
 800cde4:	4604      	mov	r4, r0
 800cde6:	460d      	mov	r5, r1
 800cde8:	e020      	b.n	800ce2c <scalbn+0x8c>
 800cdea:	460b      	mov	r3, r1
 800cdec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cdf0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cdf4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cdf8:	19b9      	adds	r1, r7, r6
 800cdfa:	4291      	cmp	r1, r2
 800cdfc:	dd0e      	ble.n	800ce1c <scalbn+0x7c>
 800cdfe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ce02:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ce06:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ce0a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ce0e:	4820      	ldr	r0, [pc, #128]	; (800ce90 <scalbn+0xf0>)
 800ce10:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ce14:	a31a      	add	r3, pc, #104	; (adr r3, 800ce80 <scalbn+0xe0>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	e7d9      	b.n	800cdd0 <scalbn+0x30>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	dd08      	ble.n	800ce32 <scalbn+0x92>
 800ce20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce28:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce32:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ce36:	da12      	bge.n	800ce5e <scalbn+0xbe>
 800ce38:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce3c:	429f      	cmp	r7, r3
 800ce3e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ce42:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800ce46:	dcdc      	bgt.n	800ce02 <scalbn+0x62>
 800ce48:	a30b      	add	r3, pc, #44	; (adr r3, 800ce78 <scalbn+0xd8>)
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ce52:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ce56:	480f      	ldr	r0, [pc, #60]	; (800ce94 <scalbn+0xf4>)
 800ce58:	f041 011f 	orr.w	r1, r1, #31
 800ce5c:	e7b8      	b.n	800cdd0 <scalbn+0x30>
 800ce5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce62:	3136      	adds	r1, #54	; 0x36
 800ce64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	4629      	mov	r1, r5
 800ce70:	2200      	movs	r2, #0
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <scalbn+0xf8>)
 800ce74:	e7ac      	b.n	800cdd0 <scalbn+0x30>
 800ce76:	bf00      	nop
 800ce78:	c2f8f359 	.word	0xc2f8f359
 800ce7c:	01a56e1f 	.word	0x01a56e1f
 800ce80:	8800759c 	.word	0x8800759c
 800ce84:	7e37e43c 	.word	0x7e37e43c
 800ce88:	43500000 	.word	0x43500000
 800ce8c:	ffff3cb0 	.word	0xffff3cb0
 800ce90:	8800759c 	.word	0x8800759c
 800ce94:	c2f8f359 	.word	0xc2f8f359
 800ce98:	3c900000 	.word	0x3c900000

0800ce9c <_init>:
 800ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9e:	bf00      	nop
 800cea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea2:	bc08      	pop	{r3}
 800cea4:	469e      	mov	lr, r3
 800cea6:	4770      	bx	lr

0800cea8 <_fini>:
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	bf00      	nop
 800ceac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceae:	bc08      	pop	{r3}
 800ceb0:	469e      	mov	lr, r3
 800ceb2:	4770      	bx	lr
