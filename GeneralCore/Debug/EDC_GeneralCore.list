
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c704  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800c8f0  0800c8f0  0001c8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d268  0800d268  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d268  0800d268  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d268  0800d268  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f40  2000007c  0800d2ec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007fbc  0800d2ec  00027fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015189  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003648  00000000  00000000  0003522e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00038878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00039c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca67  00000000  00000000  0003af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001981f  00000000  00000000  00057977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e367  00000000  00000000  00071196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f4fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e8  00000000  00000000  0010f550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000007c 	.word	0x2000007c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c8d4 	.word	0x0800c8d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000080 	.word	0x20000080
 8000224:	0800c8d4 	.word	0x0800c8d4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <Find_crash>:
extern Rectangle obstacles[5];			// area that depletes charge faster
extern Coordinate oppoBeacons[3];		// opponent charging station coordinate
extern Queue openlist;
extern List closelist;

uint8_t Find_crash(uint16_t cor, uint8_t flag) {
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	uint16_t x = cor / 256;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	81bb      	strh	r3, [r7, #12]
	uint16_t y = cor % 256;
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	817b      	strh	r3, [r7, #10]

	if (flag == 0) {
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <Find_crash+0x26>
		return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e109      	b.n	8001432 <Find_crash+0x23a>
	}
	if (flag == 1) {
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d151      	bne.n	80012c8 <Find_crash+0xd0>
		//walls
		if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	2b25      	cmp	r3, #37	; 0x25
 8001228:	d910      	bls.n	800124c <Find_crash+0x54>
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	2b28      	cmp	r3, #40	; 0x28
 800122e:	d80d      	bhi.n	800124c <Find_crash+0x54>
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	2b25      	cmp	r3, #37	; 0x25
 8001234:	d902      	bls.n	800123c <Find_crash+0x44>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	d905      	bls.n	8001248 <Find_crash+0x50>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b92      	cmp	r3, #146	; 0x92
 8001240:	d904      	bls.n	800124c <Find_crash+0x54>
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	2bd8      	cmp	r3, #216	; 0xd8
 8001246:	d801      	bhi.n	800124c <Find_crash+0x54>
			return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e0f2      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2bd5      	cmp	r3, #213	; 0xd5
 8001250:	d910      	bls.n	8001274 <Find_crash+0x7c>
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bd8      	cmp	r3, #216	; 0xd8
 8001256:	d80d      	bhi.n	8001274 <Find_crash+0x7c>
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b25      	cmp	r3, #37	; 0x25
 800125c:	d902      	bls.n	8001264 <Find_crash+0x6c>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	2b6b      	cmp	r3, #107	; 0x6b
 8001262:	d905      	bls.n	8001270 <Find_crash+0x78>
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b92      	cmp	r3, #146	; 0x92
 8001268:	d904      	bls.n	8001274 <Find_crash+0x7c>
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	2bd8      	cmp	r3, #216	; 0xd8
 800126e:	d801      	bhi.n	8001274 <Find_crash+0x7c>
			return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e0de      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	2b25      	cmp	r3, #37	; 0x25
 8001278:	d910      	bls.n	800129c <Find_crash+0xa4>
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	2b28      	cmp	r3, #40	; 0x28
 800127e:	d80d      	bhi.n	800129c <Find_crash+0xa4>
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d902      	bls.n	800128c <Find_crash+0x94>
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d905      	bls.n	8001298 <Find_crash+0xa0>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2b92      	cmp	r3, #146	; 0x92
 8001290:	d904      	bls.n	800129c <Find_crash+0xa4>
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2bd8      	cmp	r3, #216	; 0xd8
 8001296:	d801      	bhi.n	800129c <Find_crash+0xa4>
			return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e0ca      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2bd5      	cmp	r3, #213	; 0xd5
 80012a0:	d910      	bls.n	80012c4 <Find_crash+0xcc>
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2bd8      	cmp	r3, #216	; 0xd8
 80012a6:	d80d      	bhi.n	80012c4 <Find_crash+0xcc>
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	2b25      	cmp	r3, #37	; 0x25
 80012ac:	d902      	bls.n	80012b4 <Find_crash+0xbc>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	2b6b      	cmp	r3, #107	; 0x6b
 80012b2:	d905      	bls.n	80012c0 <Find_crash+0xc8>
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	2b92      	cmp	r3, #146	; 0x92
 80012b8:	d904      	bls.n	80012c4 <Find_crash+0xcc>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	2bd8      	cmp	r3, #216	; 0xd8
 80012be:	d801      	bhi.n	80012c4 <Find_crash+0xcc>
			return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b6      	b.n	8001432 <Find_crash+0x23a>
		}
		return 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0b4      	b.n	8001432 <Find_crash+0x23a>
	}
	//walls
	if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	2b25      	cmp	r3, #37	; 0x25
 80012cc:	d910      	bls.n	80012f0 <Find_crash+0xf8>
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	d80d      	bhi.n	80012f0 <Find_crash+0xf8>
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	2b25      	cmp	r3, #37	; 0x25
 80012d8:	d902      	bls.n	80012e0 <Find_crash+0xe8>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	2b6b      	cmp	r3, #107	; 0x6b
 80012de:	d905      	bls.n	80012ec <Find_crash+0xf4>
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	2b92      	cmp	r3, #146	; 0x92
 80012e4:	d904      	bls.n	80012f0 <Find_crash+0xf8>
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	2bd8      	cmp	r3, #216	; 0xd8
 80012ea:	d801      	bhi.n	80012f0 <Find_crash+0xf8>
		return 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0a0      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2bd5      	cmp	r3, #213	; 0xd5
 80012f4:	d910      	bls.n	8001318 <Find_crash+0x120>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	2bd8      	cmp	r3, #216	; 0xd8
 80012fa:	d80d      	bhi.n	8001318 <Find_crash+0x120>
 80012fc:	897b      	ldrh	r3, [r7, #10]
 80012fe:	2b25      	cmp	r3, #37	; 0x25
 8001300:	d902      	bls.n	8001308 <Find_crash+0x110>
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	2b6b      	cmp	r3, #107	; 0x6b
 8001306:	d905      	bls.n	8001314 <Find_crash+0x11c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	2b92      	cmp	r3, #146	; 0x92
 800130c:	d904      	bls.n	8001318 <Find_crash+0x120>
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	2bd8      	cmp	r3, #216	; 0xd8
 8001312:	d801      	bhi.n	8001318 <Find_crash+0x120>
		return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e08c      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b25      	cmp	r3, #37	; 0x25
 800131c:	d910      	bls.n	8001340 <Find_crash+0x148>
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	d80d      	bhi.n	8001340 <Find_crash+0x148>
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b25      	cmp	r3, #37	; 0x25
 8001328:	d902      	bls.n	8001330 <Find_crash+0x138>
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	2b6b      	cmp	r3, #107	; 0x6b
 800132e:	d905      	bls.n	800133c <Find_crash+0x144>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b92      	cmp	r3, #146	; 0x92
 8001334:	d904      	bls.n	8001340 <Find_crash+0x148>
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	2bd8      	cmp	r3, #216	; 0xd8
 800133a:	d801      	bhi.n	8001340 <Find_crash+0x148>
		return 0;
 800133c:	2300      	movs	r3, #0
 800133e:	e078      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	2bd5      	cmp	r3, #213	; 0xd5
 8001344:	d910      	bls.n	8001368 <Find_crash+0x170>
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d80d      	bhi.n	8001368 <Find_crash+0x170>
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	d902      	bls.n	8001358 <Find_crash+0x160>
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	2b6b      	cmp	r3, #107	; 0x6b
 8001356:	d905      	bls.n	8001364 <Find_crash+0x16c>
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b92      	cmp	r3, #146	; 0x92
 800135c:	d904      	bls.n	8001368 <Find_crash+0x170>
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	2bd8      	cmp	r3, #216	; 0xd8
 8001362:	d801      	bhi.n	8001368 <Find_crash+0x170>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e064      	b.n	8001432 <Find_crash+0x23a>
	}
	//obstacles
	for (uint8_t k = 0; k < 5; k++) {
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e026      	b.n	80013bc <Find_crash+0x1c4>
		if (x >= obstacles[k].coord1.x && y >= obstacles[k].coord1.y && x <= obstacles[k].coord2.x
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <Find_crash+0x244>)
 8001374:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 8001378:	4293      	cmp	r3, r2
 800137a:	db1c      	blt.n	80013b6 <Find_crash+0x1be>
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <Find_crash+0x244>)
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	db13      	blt.n	80013b6 <Find_crash+0x1be>
 800138e:	89ba      	ldrh	r2, [r7, #12]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <Find_crash+0x244>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dc0a      	bgt.n	80013b6 <Find_crash+0x1be>
				&& y <= obstacles[k].coord2.y) {
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4925      	ldr	r1, [pc, #148]	; (800143c <Find_crash+0x244>)
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <Find_crash+0x1be>
			return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e03d      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k < 5; k++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d9d5      	bls.n	800136e <Find_crash+0x176>
		}
	}
	// oppoBeacons
	for (uint8_t k = 0; k <= 2; k++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e030      	b.n	800142a <Find_crash+0x232>
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <Find_crash+0x248>)
 80013ce:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 80013d2:	1a9b      	subs	r3, r3, r2
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013d4:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013d6:	89ba      	ldrh	r2, [r7, #12]
 80013d8:	7bb9      	ldrb	r1, [r7, #14]
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <Find_crash+0x248>)
 80013dc:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 80013e0:	1a52      	subs	r2, r2, r1
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013e2:	b292      	uxth	r2, r2
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <Find_crash+0x248>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	b299      	uxth	r1, r3
 80013fc:	8978      	ldrh	r0, [r7, #10]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4c0f      	ldr	r4, [pc, #60]	; (8001440 <Find_crash+0x248>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4423      	add	r3, r4
 8001406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140a:	1ac3      	subs	r3, r0, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 8001414:	4413      	add	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
		if (distance <= 400) {
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	d801      	bhi.n	8001424 <Find_crash+0x22c>
			return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k <= 2; k++) {
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d9cb      	bls.n	80013c8 <Find_crash+0x1d0>
		}
	}
	return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	4770      	bx	lr
 800143c:	20000b7c 	.word	0x20000b7c
 8001440:	20000bb0 	.word	0x20000bb0

08001444 <cal_H>:

uint16_t cal_H(uint16_t cor1, uint16_t cor2) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
	return abs(x1 - x2) + abs(y1 - y2);
 800146c:	89fa      	ldrh	r2, [r7, #14]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <dir>:

int8_t dir(uint16_t cor1, uint16_t cor2) {
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	460a      	mov	r2, r1
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]
	return ((x2 - x1) + 2 * (y2 - y1));
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8939      	ldrh	r1, [r7, #8]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25b      	sxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <findend>:

uint8_t findend(uint16_t cur, uint16_t end, uint8_t step)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70fb      	strb	r3, [r7, #3]
	uint16_t x1 = cur / 256;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cur % 256;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = end / 256;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = end % 256;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	if (abs(x2 - x1) < step && abs(y2 - y1) < step)
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0b      	bge.n	800153c <findend+0x56>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	da01      	bge.n	800153c <findend+0x56>
	{
		return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <findend+0x58>
	}
	else
		return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Find_around_node>:

void Find_around_node(uint16_t currentindex, int8_t lastdir, A_Star_Node *end, uint8_t step) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	603a      	str	r2, [r7, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	717b      	strb	r3, [r7, #5]
 800155a:	4613      	mov	r3, r2
 800155c:	713b      	strb	r3, [r7, #4]
	uint16_t x = openlist.buffer[currentindex].cor / 256;
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	49b3      	ldr	r1, [pc, #716]	; (8001830 <Find_around_node+0x2e8>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t y = openlist.buffer[currentindex].cor % 256;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	49ad      	ldr	r1, [pc, #692]	; (8001830 <Find_around_node+0x2e8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t obstacleflag = 1;		//负责检测采取何种程度的避障
 800158e:	2301      	movs	r3, #1
 8001590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// left
	if (x >= step) {
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800159c:	429a      	cmp	r2, r3
 800159e:	f0c0 80a3 	bcc.w	80016e8 <Find_around_node+0x1a0>
		uint16_t curx = x - step;
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		uint16_t cury = y;
 80015b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t coordinateindex = curx * 256 + cury;
 80015b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c4:	4413      	add	r3, r2
 80015c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		if (Find_crash(coordinateindex, obstacleflag)) {
 80015ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80015ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe0f 	bl	80011f8 <Find_crash>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8083 	beq.w	80016e8 <Find_around_node+0x1a0>
			//not in close_list
			if (!findin_list(coordinateindex))
 80015e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f956 	bl	8004898 <findin_list>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17a      	bne.n	80016e8 <Find_around_node+0x1a0>
					{
				uint16_t index = findin_queue(coordinateindex);
 80015f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f920 	bl	800483c <findin_queue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001602:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001606:	85bb      	strh	r3, [r7, #44]	; 0x2c
				newnode.fatherindex = currentindex;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	86fb      	strh	r3, [r7, #54]	; 0x36
				newnode.cost = openlist.buffer[currentindex].cost + step;
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <Find_around_node+0x2e8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800161e:	4623      	mov	r3, r4
 8001620:	461c      	mov	r4, r3
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff face 	bl	8000bd0 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800163a:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 800163e:	4623      	mov	r3, r4
 8001640:	461c      	mov	r4, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fef9 	bl	8001444 <cal_H>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb6f 	bl	8000d38 <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fab6 	bl	8000bd0 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	4970      	ldr	r1, [pc, #448]	; (8001830 <Find_around_node+0x2e8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff07 	bl	8001496 <dir>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <Find_around_node+0x17c>
						&& lastdir != 0)
 8001694:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <Find_around_node+0x17c>
					newnode.total += 10 * step;
 800169c:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80016a0:	4623      	mov	r3, r4
 80016a2:	461c      	mov	r4, r3
 80016a4:	793a      	ldrb	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb42 	bl	8000d38 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fa89 	bl	8000bd0 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (!index)	//not in open_list
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Find_around_node+0x190>
				{
					queue_append(&newnode);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 ffdb 	bl	800468c <queue_append>
 80016d6:	e007      	b.n	80016e8 <Find_around_node+0x1a0>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 80016d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f8fe 	bl	80048e4 <editcost>
				}
			}
		}
	}
	// right
	if (x <= 255 - step) {
 80016e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f300 80a6 	bgt.w	8001844 <Find_around_node+0x2fc>
		uint16_t curx = x + step;
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001700:	4413      	add	r3, r2
 8001702:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t cury = y;
 8001706:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800170a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t coordinateindex = curx * 256 + cury;
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800171a:	4413      	add	r3, r2
 800171c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Find_crash(coordinateindex, obstacleflag)) {
 8001720:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd64 	bl	80011f8 <Find_crash>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8086 	beq.w	8001844 <Find_around_node+0x2fc>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f8ab 	bl	8004898 <findin_list>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <Find_around_node+0x2fc>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f875 	bl	800483c <findin_queue>
 8001752:	4603      	mov	r3, r0
 8001754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001758:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175c:	843b      	strh	r3, [r7, #32]
				newnode.fatherindex = currentindex;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4932      	ldr	r1, [pc, #200]	; (8001830 <Find_around_node+0x2e8>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001774:	4623      	mov	r3, r4
 8001776:	461c      	mov	r4, r3
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fadc 	bl	8000d38 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fa23 	bl	8000bd0 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001790:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 8001794:	4623      	mov	r3, r4
 8001796:	461c      	mov	r4, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe4e 	bl	8001444 <cal_H>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fac4 	bl	8000d38 <__aeabi_i2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa0b 	bl	8000bd0 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Find_around_node+0x2e8>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5c 	bl	8001496 <dir>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d017      	beq.n	800181a <Find_around_node+0x2d2>
						&& lastdir != 0)
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <Find_around_node+0x2d2>
					newnode.total += 10 * step;
 80017f2:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 80017f6:	4623      	mov	r3, r4
 80017f8:	461c      	mov	r4, r3
 80017fa:	793a      	ldrb	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa97 	bl	8000d38 <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f9de 	bl	8000bd0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (!index)	//not in open_list
 800181a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <Find_around_node+0x2ec>
				{
					queue_append(&newnode);
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff30 	bl	800468c <queue_append>
 800182c:	e00a      	b.n	8001844 <Find_around_node+0x2fc>
 800182e:	bf00      	nop
 8001830:	20000c18 	.word	0x20000c18
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f850 	bl	80048e4 <editcost>
				}
			}
		}
	}
	// up
	if (y >= step) {
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800184c:	429a      	cmp	r2, r3
 800184e:	f0c0 80a3 	bcc.w	8001998 <Find_around_node+0x450>
		uint16_t curx = x;
 8001852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t cury = y - step;
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t coordinateindex = curx * 256 + cury;
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	4413      	add	r3, r2
 8001876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (Find_crash(coordinateindex, obstacleflag)) {
 800187a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800187e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcb7 	bl	80011f8 <Find_crash>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8083 	beq.w	8001998 <Find_around_node+0x450>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fffe 	bl	8004898 <findin_list>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d17a      	bne.n	8001998 <Find_around_node+0x450>
					{
				uint16_t index = findin_queue(coordinateindex);
 80018a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 ffc8 	bl	800483c <findin_queue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80018b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018b6:	82bb      	strh	r3, [r7, #20]
				newnode.fatherindex = currentindex;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	83fb      	strh	r3, [r7, #30]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	4987      	ldr	r1, [pc, #540]	; (8001adc <Find_around_node+0x594>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80018ce:	4623      	mov	r3, r4
 80018d0:	461c      	mov	r4, r3
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa2f 	bl	8000d38 <__aeabi_i2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f976 	bl	8000bd0 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3016 	str.w	r3, [r7, #22]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 80018ea:	f8d7 4016 	ldr.w	r4, [r7, #22]
 80018ee:	4623      	mov	r3, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fda1 	bl	8001444 <cal_H>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa17 	bl	8000d38 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f95e 	bl	8000bd0 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 301a 	str.w	r3, [r7, #26]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <Find_around_node+0x594>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <dir>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <Find_around_node+0x42c>
						&& lastdir != 0)
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <Find_around_node+0x42c>
					newnode.total += 10 * step;
 800194c:	f8d7 401a 	ldr.w	r4, [r7, #26]
 8001950:	4623      	mov	r3, r4
 8001952:	461c      	mov	r4, r3
 8001954:	793a      	ldrb	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f931 	bl	8000bd0 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 301a 	str.w	r3, [r7, #26]
				if (!index)	//not in open_list
 8001974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <Find_around_node+0x440>
				{
					queue_append(&newnode);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fe83 	bl	800468c <queue_append>
 8001986:	e007      	b.n	8001998 <Find_around_node+0x450>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ffa6 	bl	80048e4 <editcost>
				}
			}
		}
	}
	// down
	if (y <= 255 - step) {
 8001998:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f300 8096 	bgt.w	8001ad4 <Find_around_node+0x58c>
		uint16_t curx = x;
 80019a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t cury = y + step;
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b8:	4413      	add	r3, r2
 80019ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t coordinateindex = curx * 256 + cury;
 80019bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019c6:	4413      	add	r3, r2
 80019c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (Find_crash(coordinateindex, obstacleflag)) {
 80019ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc10 	bl	80011f8 <Find_crash>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07a      	beq.n	8001ad4 <Find_around_node+0x58c>
			//not in close_list
			if (!findin_list(coordinateindex))
 80019de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 ff59 	bl	8004898 <findin_list>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d173      	bne.n	8001ad4 <Find_around_node+0x58c>
					{
				uint16_t index = findin_queue(coordinateindex);
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff24 	bl	800483c <findin_queue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	877b      	strh	r3, [r7, #58]	; 0x3a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80019f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fa:	813b      	strh	r3, [r7, #8]
				newnode.fatherindex = currentindex;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	827b      	strh	r3, [r7, #18]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <Find_around_node+0x594>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001a12:	4623      	mov	r3, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98d 	bl	8000d38 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8d4 	bl	8000bd0 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 300a 	str.w	r3, [r7, #10]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001a2e:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001a32:	4623      	mov	r3, r4
 8001a34:	461c      	mov	r4, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd00 	bl	8001444 <cal_H>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f976 	bl	8000d38 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f8bd 	bl	8000bd0 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 300e 	str.w	r3, [r7, #14]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <Find_around_node+0x594>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd0f 	bl	8001496 <dir>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d017      	beq.n	8001ab4 <Find_around_node+0x56c>
						&& lastdir != 0)
 8001a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <Find_around_node+0x56c>
					newnode.total += 10 * step;
 8001a8c:	f8d7 400e 	ldr.w	r4, [r7, #14]
 8001a90:	4623      	mov	r3, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	793a      	ldrb	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f94a 	bl	8000d38 <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f891 	bl	8000bd0 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 300e 	str.w	r3, [r7, #14]
				if (!index)	//not in open_list
 8001ab4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <Find_around_node+0x57e>
				{
					queue_append(&newnode);
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fde4 	bl	800468c <queue_append>
					editcost(index, &newnode);
				}
			}
		}
	}
}
 8001ac4:	e006      	b.n	8001ad4 <Find_around_node+0x58c>
					editcost(index, &newnode);
 8001ac6:	f107 0208 	add.w	r2, r7, #8
 8001aca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 ff08 	bl	80048e4 <editcost>
}
 8001ad4:	bf00      	nop
 8001ad6:	3764      	adds	r7, #100	; 0x64
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000c18 	.word	0x20000c18

08001ae0 <A_Star_main>:

uint8_t A_Star_main(Coordinate *start, Coordinate *last, uint8_t step) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
	A_Star_Node begin;
	A_Star_Node end;
	begin.cor = (start->x) * 256 + start->y;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	end.cor = (last->x) * 256 + last->y;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	begin.cost = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
	begin.total = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
	begin.fatherindex = 65535;
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	queue_append(&begin);
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fda2 	bl	800468c <queue_append>
	uint16_t curindex = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t Flag = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int8_t lastdir = 0;     		// left:-step up:-2*step right:step down:2*step
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (1) {
		curindex = queue_top();
 8001b5a:	f002 fe4f 	bl	80047fc <queue_top>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (curindex == 65535)
 8001b64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <A_Star_main+0x94>
			return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e148      	b.n	8001e06 <A_Star_main+0x326>
		if (openlist.buffer[curindex].fatherindex != 65535) {
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b78:	49a5      	ldr	r1, [pc, #660]	; (8001e10 <A_Star_main+0x330>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330e      	adds	r3, #14
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <A_Star_main+0xf6>
			lastdir = dir(openlist.buffer[openlist.buffer[curindex].fatherindex].cor,
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b94:	499e      	ldr	r1, [pc, #632]	; (8001e10 <A_Star_main+0x330>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <A_Star_main+0x330>)
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4995      	ldr	r1, [pc, #596]	; (8001e10 <A_Star_main+0x330>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fc63 	bl	8001496 <dir>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					openlist.buffer[curindex].cor);
		}
		list_append(openlist.buffer[curindex].cor);
 8001bd6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bda:	498d      	ldr	r1, [pc, #564]	; (8001e10 <A_Star_main+0x330>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fdd8 	bl	80047a0 <list_append>
		if(findend(openlist.buffer[curindex].cor, end.cor, step))
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4986      	ldr	r1, [pc, #536]	; (8001e10 <A_Star_main+0x330>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc6b 	bl	80014e6 <findend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <A_Star_main+0x17c>
		{
			Flag = curindex;
 8001c16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			break;
 8001c1e:	bf00      	nop
		Find_around_node(curindex, lastdir, &end, step);
	}

	//we now get the path
	Coordinate Astar_path[16];
	Astar_path[15].x = last->x;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Astar_path[15].y = last->y;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t i = 14;
 8001c34:	230e      	movs	r3, #14
 8001c36:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	A_Star_Node *p = &openlist.buffer[Flag];
 8001c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <A_Star_main+0x330>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
	if (p->cor != end.cor) {
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d027      	beq.n	8001caa <A_Star_main+0x1ca>
 8001c5a:	e009      	b.n	8001c70 <A_Star_main+0x190>
		Find_around_node(curindex, lastdir, &end, step);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001c66:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001c6a:	f7ff fc6d 	bl	8001548 <Find_around_node>
		curindex = queue_top();
 8001c6e:	e774      	b.n	8001b5a <A_Star_main+0x7a>
		Astar_path[i].x = p->cor / 256;
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3378      	adds	r3, #120	; 0x78
 8001c82:	443b      	add	r3, r7
 8001c84:	f823 2c68 	strh.w	r2, [r3, #-104]
		Astar_path[i].y = p->cor % 256;
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	b212      	sxth	r2, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3378      	adds	r3, #120	; 0x78
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f823 2c66 	strh.w	r2, [r3, #-102]
		i--;
 8001ca0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	if (p->fatherindex != 65535)
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d07a      	beq.n	8001dac <A_Star_main+0x2cc>
		lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <A_Star_main+0x330>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fbdf 	bl	8001496 <dir>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (p->fatherindex != 65535) {
 8001cde:	e065      	b.n	8001dac <A_Star_main+0x2cc>
		if (lastdir != dir(openlist.buffer[p->fatherindex].cor, p->cor))
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	895b      	ldrh	r3, [r3, #10]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <A_Star_main+0x330>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fbca 	bl	8001496 <dir>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d043      	beq.n	8001d96 <A_Star_main+0x2b6>
		{
			Astar_path[i].x = p->cor / 256;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3378      	adds	r3, #120	; 0x78
 8001d20:	443b      	add	r3, r7
 8001d22:	f823 2c68 	strh.w	r2, [r3, #-104]
			Astar_path[i].y = p->cor % 256;
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	b212      	sxth	r2, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3378      	adds	r3, #120	; 0x78
 8001d38:	443b      	add	r3, r7
 8001d3a:	f823 2c66 	strh.w	r2, [r3, #-102]
			if (i == 1) {
 8001d3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <A_Star_main+0x284>
				i = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				p = &(openlist.buffer[p->fatherindex]);
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <A_Star_main+0x330>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001d62:	e029      	b.n	8001db8 <A_Star_main+0x2d8>
			}
			i = i - 1;
 8001d64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <A_Star_main+0x330>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fb83 	bl	8001496 <dir>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		p = &(openlist.buffer[p->fatherindex]);
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <A_Star_main+0x330>)
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
	while (p->fatherindex != 65535) {
 8001dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dae:	895b      	ldrh	r3, [r3, #10]
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d193      	bne.n	8001ce0 <A_Star_main+0x200>
	}
	Astar_path[i].x = p->cor / 256;
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3378      	adds	r3, #120	; 0x78
 8001dca:	443b      	add	r3, r7
 8001dcc:	f823 2c68 	strh.w	r2, [r3, #-104]
	Astar_path[i].y = p->cor % 256;
 8001dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	b212      	sxth	r2, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3378      	adds	r3, #120	; 0x78
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c66 	strh.w	r2, [r3, #-102]

	Lane_init();
 8001de8:	f002 fc42 	bl	8004670 <Lane_init>
	uint8_t Laneis_OK = Insert_inLane(&Astar_path[0], i);
 8001dec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fdbe 	bl	8004978 <Insert_inLane>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	return Laneis_OK;
 8001e02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3778      	adds	r7, #120	; 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000c18 	.word	0x20000c18
 8001e14:	00000000 	.word	0x00000000

08001e18 <chao_move_angle>:
	straightPath->end = *end;
	return straightPath;
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 8001e24:	4984      	ldr	r1, [pc, #528]	; (8002038 <chao_move_angle+0x220>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f88e 	bl	8000f48 <__aeabi_fdiv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb5e 	bl	80004f0 <__aeabi_f2d>
 8001e34:	a37e      	add	r3, pc, #504	; (adr r3, 8002030 <chao_move_angle+0x218>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbb1 	bl	80005a0 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe6d 	bl	8000b24 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe fb4e 	bl	80004f0 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb49 	bl	80004f0 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f009 fcd1 	bl	800b80c <cos>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb36 	bl	80004f0 <__aeabi_f2d>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fb31 	bl	80004f0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f009 fd03 	bl	800b8a0 <sin>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fb7d 	bl	80005a0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe f9c1 	bl	8000234 <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe33 	bl	8000b24 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <chao_move_angle+0x224>)
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7fe fb13 	bl	80004f0 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb0e 	bl	80004f0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f009 fc96 	bl	800b80c <cos>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb5a 	bl	80005a0 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fafb 	bl	80004f0 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe faf6 	bl	80004f0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f009 fcc8 	bl	800b8a0 <sin>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb42 	bl	80005a0 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4640      	mov	r0, r8
 8001f22:	4649      	mov	r1, r9
 8001f24:	f7fe f984 	bl	8000230 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdf8 	bl	8000b24 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <chao_move_angle+0x228>)
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe fad8 	bl	80004f0 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fad3 	bl	80004f0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f009 fc5b 	bl	800b80c <cos>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fb1f 	bl	80005a0 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fac0 	bl	80004f0 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7fe fabb 	bl	80004f0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f009 fc8d 	bl	800b8a0 <sin>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb07 	bl	80005a0 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe f949 	bl	8000230 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbd 	bl	8000b24 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <chao_move_angle+0x22c>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f7fe fa9d 	bl	80004f0 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fa98 	bl	80004f0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f009 fc20 	bl	800b80c <cos>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fae4 	bl	80005a0 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe fa85 	bl	80004f0 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fa80 	bl	80004f0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f009 fc52 	bl	800b8a0 <sin>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe facc 	bl	80005a0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f910 	bl	8000234 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd82 	bl	8000b24 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <chao_move_angle+0x230>)
 8002024:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002030:	54442d18 	.word	0x54442d18
 8002034:	400921fb 	.word	0x400921fb
 8002038:	43340000 	.word	0x43340000
 800203c:	20000994 	.word	0x20000994
 8002040:	200009d0 	.word	0x200009d0
 8002044:	20000a0c 	.word	0x20000a0c
 8002048:	20000a48 	.word	0x20000a48

0800204c <mingyan_pathfind_avoidObstacle>:

uint8_t mingyan_pathfind_avoidObstacle(Coordinate *start, Coordinate *end) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	return A_Star_main(start, end, 5);
 8002056:	2205      	movs	r2, #5
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd40 	bl	8001ae0 <A_Star_main>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e026      	b.n	80020cc <huansic_jy62_init+0x60>

	if (!himu->huart)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800208a:	2003      	movs	r0, #3
 800208c:	f004 f86e 	bl	800616c <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	230a      	movs	r3, #10
 8002096:	2203      	movs	r2, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <huansic_jy62_init+0x68>)
 800209a:	f007 f9e3 	bl	8009464 <HAL_UART_Transmit>

	// instead, just use DMA
	himu->pending_alignment = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3334      	adds	r3, #52	; 0x34
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	4619      	mov	r1, r3
 80020b2:	f007 fa99 	bl	80095e8 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000

080020d8 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (!himu)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e112      	b.n	8002310 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	2300      	movs	r3, #0
 80020f0:	73bb      	strb	r3, [r7, #14]
 80020f2:	e0ed      	b.n	80022d0 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fe:	2b55      	cmp	r3, #85	; 0x55
 8002100:	d01c      	beq.n	800213c <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3334      	adds	r3, #52	; 0x34
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f007 fa37 	bl	8009588 <HAL_UART_Receive_IT>
			if (i) {
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3b01      	subs	r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa69 	bl	8002600 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800212e:	f004 f813 	bl	8006158 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8002138:	2305      	movs	r3, #5
 800213a:	e0e9      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002146:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4413      	add	r3, r2
 8002158:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	3302      	adds	r3, #2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4413      	add	r3, r2
 800216a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	3303      	adds	r3, #3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	4413      	add	r3, r2
 800217c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3304      	adds	r3, #4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	4413      	add	r3, r2
 800218e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3305      	adds	r3, #5
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	4413      	add	r3, r2
 80021a0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	3306      	adds	r3, #6
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	4413      	add	r3, r2
 80021b2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	3307      	adds	r3, #7
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	4413      	add	r3, r2
 80021c4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3308      	adds	r3, #8
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	4413      	add	r3, r2
 80021d6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3309      	adds	r3, #9
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	4413      	add	r3, r2
 80021e8:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	330a      	adds	r3, #10
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f6:	7b7a      	ldrb	r2, [r7, #13]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d01c      	beq.n	8002236 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3334      	adds	r3, #52	; 0x34
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f007 f9ba 	bl	8009588 <HAL_UART_Receive_IT>
				if (i) {
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3b01      	subs	r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f9ec 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8002228:	f003 ff96 	bl	8006158 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8002232:	2304      	movs	r3, #4
 8002234:	e06c      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b51      	cmp	r3, #81	; 0x51
 8002244:	d105      	bne.n	8002252 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c4 	bl	80023d8 <__huansic_jy62_decode_accel>
 8002250:	e038      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	3301      	adds	r3, #1
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225e:	2b52      	cmp	r3, #82	; 0x52
 8002260:	d105      	bne.n	800226e <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f920 	bl	80024ac <__huansic_jy62_decode_omega>
 800226c:	e02a      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	3301      	adds	r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b53      	cmp	r3, #83	; 0x53
 800227c:	d105      	bne.n	800228a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f966 	bl	8002554 <__huansic_jy62_decode_theta>
 8002288:	e01c      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	2201      	movs	r2, #1
 800229c:	4619      	mov	r1, r3
 800229e:	f007 f973 	bl	8009588 <HAL_UART_Receive_IT>
				if (i) {
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9a5 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80022b6:	f003 ff4f 	bl	8006158 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80022c0:	2306      	movs	r3, #6
 80022c2:	e025      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	330b      	adds	r3, #11
 80022ce:	73bb      	strb	r3, [r7, #14]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f67f af0e 	bls.w	80020f4 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 80022d8:	f003 ff3e 	bl	8006158 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 80022e2:	2102      	movs	r1, #2
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98b 	bl	8002600 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3334      	adds	r3, #52	; 0x34
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	4619      	mov	r1, r3
 80022f6:	f007 f977 	bl	80095e8 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (!himu)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e029      	b.n	800237e <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002330:	2b55      	cmp	r3, #85	; 0x55
 8002332:	d00d      	beq.n	8002350 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3334      	adds	r3, #52	; 0x34
 8002344:	2201      	movs	r2, #1
 8002346:	4619      	mov	r1, r3
 8002348:	f007 f91e 	bl	8009588 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800234c:	2305      	movs	r3, #5
 800234e:	e016      	b.n	800237e <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3335      	adds	r3, #53	; 0x35
 8002360:	2220      	movs	r2, #32
 8002362:	4619      	mov	r1, r3
 8002364:	f007 f940 	bl	80095e8 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 800237c:	2300      	movs	r3, #0
	}
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3334      	adds	r3, #52	; 0x34
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	f007 f8f1 	bl	8009588 <HAL_UART_Receive_IT>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f007 f8dd 	bl	8009588 <HAL_UART_Receive_IT>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e050      	b.n	800248c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1cd9      	adds	r1, r3, #3
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	0059      	lsls	r1, r3, #1
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	440b      	add	r3, r1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242c:	b21a      	sxth	r2, r3
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8002434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc7d 	bl	8000d38 <__aeabi_i2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fccb 	bl	8000de0 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f84f 	bl	80004f0 <__aeabi_f2d>
 8002452:	a313      	add	r3, pc, #76	; (adr r3, 80024a0 <__huansic_jy62_decode_accel+0xc8>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8a2 	bl	80005a0 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <__huansic_jy62_decode_accel+0xd0>)
 800246a:	f7fe f9c3 	bl	80007f4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	7bfc      	ldrb	r4, [r7, #15]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb54 	bl	8000b24 <__aeabi_d2f>
 800247c:	4601      	mov	r1, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ca2      	adds	r2, r4, #2
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d9ab      	bls.n	80023ea <__huansic_jy62_decode_accel+0x12>
	}
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	40239999 	.word	0x40239999
 80024a8:	40e00000 	.word	0x40e00000

080024ac <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e03f      	b.n	800253e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1cd9      	adds	r1, r3, #3
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024da:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	0059      	lsls	r1, r3, #1
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002500:	b21a      	sxth	r2, r3
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fc13 	bl	8000d38 <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <__huansic_jy62_decode_omega+0xa4>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc62 	bl	8000de0 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	7bfc      	ldrb	r4, [r7, #15]
 8002520:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd0f 	bl	8000f48 <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	1d23      	adds	r3, r4, #4
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d9bc      	bls.n	80024be <__huansic_jy62_decode_omega+0x12>
	}
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	44fa0000 	.word	0x44fa0000

08002554 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e03f      	b.n	80025e6 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	1cd9      	adds	r1, r3, #3
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	440b      	add	r3, r1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	0059      	lsls	r1, r3, #1
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 80025b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbbf 	bl	8000d38 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <__huansic_jy62_decode_theta+0xa4>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fc0e 	bl	8000de0 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	7bfc      	ldrb	r4, [r7, #15]
 80025c8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fcbb 	bl	8000f48 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f104 0208 	add.w	r2, r4, #8
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d9bc      	bls.n	8002566 <__huansic_jy62_decode_theta+0x12>
	}
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	43340000 	.word	0x43340000
 80025fc:	00000000 	.word	0x00000000

08002600 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8002624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3309      	adds	r3, #9
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	b21a      	sxth	r2, r3
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb72 	bl	8000d38 <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4910      	ldr	r1, [pc, #64]	; (8002698 <__huansic_jy62_decode_temp+0x98>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc75 	bl	8000f48 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff45 	bl	80004f0 <__aeabi_f2d>
 8002666:	a30a      	add	r3, pc, #40	; (adr r3, 8002690 <__huansic_jy62_decode_temp+0x90>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fde2 	bl	8000234 <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa54 	bl	8000b24 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	0a3d70a4 	.word	0x0a3d70a4
 8002694:	404243d7 	.word	0x404243d7
 8002698:	43aa0000 	.word	0x43aa0000

0800269c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d101      	bne.n	80026c8 <huansic_order_new+0x18>
		return 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e046      	b.n	8002756 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e017      	b.n	80026fe <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	4923      	ldr	r1, [pc, #140]	; (8002760 <huansic_order_new+0xb0>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3310      	adds	r3, #16
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <huansic_order_new+0xb0>)
 80026f4:	4413      	add	r3, r2
 80026f6:	e02e      	b.n	8002756 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	3301      	adds	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b3b      	cmp	r3, #59	; 0x3b
 8002702:	d9e4      	bls.n	80026ce <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e021      	b.n	800274e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	4914      	ldr	r1, [pc, #80]	; (8002760 <huansic_order_new+0xb0>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3310      	adds	r3, #16
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d112      	bne.n	8002748 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <huansic_order_new+0xb0>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4403      	add	r3, r0
 8002734:	3310      	adds	r3, #16
 8002736:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <huansic_order_new+0xb0>)
 8002744:	4413      	add	r3, r2
 8002746:	e006      	b.n	8002756 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b3b      	cmp	r3, #59	; 0x3b
 8002752:	d9da      	bls.n	800270a <huansic_order_new+0x5a>
		}
	}

	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000098 	.word	0x20000098

08002764 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff90 	bl	800269c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 800277c:	e003      	b.n	8002786 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	611a      	str	r2, [r3, #16]
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <huansic_motor_init+0x1c>
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <huansic_motor_init+0x168>)
 80027a2:	4a56      	ldr	r2, [pc, #344]	; (80028fc <huansic_motor_init+0x16c>)
 80027a4:	210c      	movs	r1, #12
 80027a6:	4856      	ldr	r0, [pc, #344]	; (8002900 <huansic_motor_init+0x170>)
 80027a8:	f007 fca0 	bl	800a0ec <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <huansic_motor_init+0x30>
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <huansic_motor_init+0x174>)
 80027b6:	4a51      	ldr	r2, [pc, #324]	; (80028fc <huansic_motor_init+0x16c>)
 80027b8:	210d      	movs	r1, #13
 80027ba:	4851      	ldr	r0, [pc, #324]	; (8002900 <huansic_motor_init+0x170>)
 80027bc:	f007 fc96 	bl	800a0ec <__assert_func>
	assert(hmotor->dt);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fc9d 	bl	8001108 <__aeabi_fcmpeq>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <huansic_motor_init+0x50>
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <huansic_motor_init+0x178>)
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <huansic_motor_init+0x16c>)
 80027d8:	210e      	movs	r1, #14
 80027da:	4849      	ldr	r0, [pc, #292]	; (8002900 <huansic_motor_init+0x170>)
 80027dc:	f007 fc86 	bl	800a0ec <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	e01c      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d105      	bne.n	8002840 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
 800283e:	e012      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d105      	bne.n	8002854 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
 8002852:	e008      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d104      	bne.n	8002866 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d026      	beq.n	80028bc <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
 8002880:	e01c      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d105      	bne.n	8002896 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
 8002894:	e012      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d105      	bne.n	80028aa <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	e008      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d104      	bne.n	80028bc <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	213c      	movs	r1, #60	; 0x3c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f005 fe8c 	bl	80085e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f005 fd28 	bl	8008328 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f005 fd1c 	bl	8008328 <HAL_TIM_PWM_Start>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800c8f0 	.word	0x0800c8f0
 80028fc:	0800c960 	.word	0x0800c960
 8002900:	0800c900 	.word	0x0800c900
 8002904:	0800c920 	.word	0x0800c920
 8002908:	0800c934 	.word	0x0800c934

0800290c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	425b      	negs	r3, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8002930:	8afa      	ldrh	r2, [r7, #22]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b29b      	uxth	r3, r3
 800293a:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 800293c:	8afa      	ldrh	r2, [r7, #22]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8002942:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f9f6 	bl	8000d38 <__aeabi_i2f>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe faf7 	bl	8000f48 <__aeabi_fdiv>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdc2 	bl	80004f0 <__aeabi_f2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <huansic_motor_pid+0x2b4>)
 8002972:	f7fd fe15 	bl	80005a0 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4614      	mov	r4, r2
 800297c:	461d      	mov	r5, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdb4 	bl	80004f0 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fc50 	bl	8000234 <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <huansic_motor_pid+0x2b8>)
 80029a2:	f7fd ff27 	bl	80007f4 <__aeabi_ddiv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f8b9 	bl	8000b24 <__aeabi_d2f>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f7fe f900 	bl	8000bcc <__aeabi_fsub>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe f8fb 	bl	8000bcc <__aeabi_fsub>
 80029d6:	4603      	mov	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe f8f1 	bl	8000bcc <__aeabi_fsub>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f8e7 	bl	8000bd0 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f7fe f9e3 	bl	8000de0 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe f9d9 	bl	8000de0 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4619      	mov	r1, r3
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7fe f8cc 	bl	8000bd0 <__addsf3>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f9cc 	bl	8000de0 <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe f8bf 	bl	8000bd0 <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8002a56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fb7c 	bl	8001158 <__aeabi_fcmpgt>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <huansic_motor_pid+0x160>
 8002a66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a6a:	e009      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a6c:	4956      	ldr	r1, [pc, #344]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fb54 	bl	800111c <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <huansic_motor_pid+0x172>
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a7c:	e000      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7fe fb66 	bl	8001158 <__aeabi_fcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <huansic_motor_pid+0x1ba>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f945 	bl	8000d30 <__aeabi_ui2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f998 	bl	8000de0 <__aeabi_fmul>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f008 ff3a 	bl	800b92c <roundf>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb7c 	bl	80011b8 <__aeabi_f2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	e000      	b.n	8002ac8 <huansic_motor_pid+0x1bc>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7fe fb24 	bl	800111c <__aeabi_fcmplt>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <huansic_motor_pid+0x202>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f921 	bl	8000d30 <__aeabi_ui2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fe f974 	bl	8000de0 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f008 ff16 	bl	800b92c <roundf>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb58 	bl	80011b8 <__aeabi_f2uiz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	e000      	b.n	8002b10 <huansic_motor_pid+0x204>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <huansic_motor_pid+0x21a>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	897a      	ldrh	r2, [r7, #10]
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
 8002b24:	e01c      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d105      	bne.n	8002b3a <huansic_motor_pid+0x22e>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	897a      	ldrh	r2, [r7, #10]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
 8002b38:	e012      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d105      	bne.n	8002b4e <huansic_motor_pid+0x242>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	897a      	ldrh	r2, [r7, #10]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b4c:	e008      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d104      	bne.n	8002b60 <huansic_motor_pid+0x254>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	897a      	ldrh	r2, [r7, #10]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d026      	beq.n	8002bb6 <huansic_motor_pid+0x2aa>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <huansic_motor_pid+0x270>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	893a      	ldrh	r2, [r7, #8]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8002b7a:	e01c      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d105      	bne.n	8002b90 <huansic_motor_pid+0x284>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	893a      	ldrh	r2, [r7, #8]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b8e:	e012      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d105      	bne.n	8002ba4 <huansic_motor_pid+0x298>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ba2:	e008      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d104      	bne.n	8002bb6 <huansic_motor_pid+0x2aa>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	893a      	ldrh	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40100000 	.word	0x40100000
 8002bc4:	40140000 	.word	0x40140000
 8002bc8:	bf800000 	.word	0xbf800000

08002bcc <custom_order_new_failed>:
// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms
extern uint8_t CoordinateUpdate;
extern uint8_t delivering_num;

__weak void custom_order_new_failed(uint8_t id) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]

}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	hxb->pending_alignment = 0;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->nextPackageID = 0x00;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	731a      	strb	r2, [r3, #12]
	hxb->nextPackageLength = 6;		// header length
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	735a      	strb	r2, [r3, #13]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 010e 	add.w	r1, r3, #14
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7b5b      	ldrb	r3, [r3, #13]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f006 fceb 	bl	80095e8 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <huansic_xb_decodeHeader>:

enum XB_STATUS huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7cda      	ldrb	r2, [r3, #19]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7b99      	ldrb	r1, [r3, #14]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7bdb      	ldrb	r3, [r3, #15]
 8002c42:	404b      	eors	r3, r1
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7c1b      	ldrb	r3, [r3, #16]
 8002c4a:	404b      	eors	r3, r1
 8002c4c:	b2d9      	uxtb	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7c5b      	ldrb	r3, [r3, #17]
 8002c52:	404b      	eors	r3, r1
 8002c54:	b2d9      	uxtb	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7c9b      	ldrb	r3, [r3, #18]
 8002c5a:	404b      	eors	r3, r1
 8002c5c:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <huansic_xb_decodeHeader+0x38>
		return XB_SUM_ERROR;
 8002c62:	2304      	movs	r3, #4
 8002c64:	e01d      	b.n	8002ca2 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7c1b      	ldrb	r3, [r3, #16]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d005      	beq.n	8002c7a <huansic_xb_decodeHeader+0x4c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7c1b      	ldrb	r3, [r3, #16]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d001      	beq.n	8002c7a <huansic_xb_decodeHeader+0x4c>
		return XB_ID_ERROR;
 8002c76:	2306      	movs	r3, #6
 8002c78:	e013      	b.n	8002ca2 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[2];
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7c1a      	ldrb	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	731a      	strb	r2, [r3, #12]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7c9a      	ldrb	r2, [r3, #18]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	735a      	strb	r2, [r3, #13]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f103 010e 	add.w	r1, r3, #14
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7b5b      	ldrb	r3, [r3, #13]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f006 fca4 	bl	80095e8 <HAL_UART_Receive_DMA>
	return XB_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <huansic_xb_decodeBody>:

enum XB_STATUS huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	76fb      	strb	r3, [r7, #27]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7b1b      	ldrb	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 816d 	bne.w	8002fa0 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8002cc6:	7f7b      	ldrb	r3, [r7, #29]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	777a      	strb	r2, [r7, #29]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	7b9a      	ldrb	r2, [r3, #14]
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <huansic_xb_decodeBody+0x25c>)
 8002cd6:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8002cd8:	7f7b      	ldrb	r3, [r7, #29]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	77fb      	strb	r3, [r7, #31]
 8002ce2:	e075      	b.n	8002dd0 <huansic_xb_decodeBody+0x124>
			index += 2;
 8002ce4:	7f7b      	ldrb	r3, [r7, #29]
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8002cea:	7f7b      	ldrb	r3, [r7, #29]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	777a      	strb	r2, [r7, #29]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	7b9b      	ldrb	r3, [r3, #14]
 8002cf8:	021a      	lsls	r2, r3, #8
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	b211      	sxth	r1, r2
 8002cfe:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d00:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8002d04:	7f7b      	ldrb	r3, [r7, #29]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	777a      	strb	r2, [r7, #29]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	7b9a      	ldrb	r2, [r3, #14]
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	b211      	sxth	r1, r2
 8002d16:	4a7d      	ldr	r2, [pc, #500]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d18:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002d1c:	7f7b      	ldrb	r3, [r7, #29]
 8002d1e:	3302      	adds	r3, #2
 8002d20:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8002d22:	7f7b      	ldrb	r3, [r7, #29]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	777a      	strb	r2, [r7, #29]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	7b9b      	ldrb	r3, [r3, #14]
 8002d30:	021a      	lsls	r2, r3, #8
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	b211      	sxth	r1, r2
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8002d40:	7f7b      	ldrb	r3, [r7, #29]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	7b9a      	ldrb	r2, [r3, #14]
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
 8002d4a:	b211      	sxth	r1, r2
 8002d4c:	4a6f      	ldr	r2, [pc, #444]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	460a      	mov	r2, r1
 8002d54:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002d56:	7f7b      	ldrb	r3, [r7, #29]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8002d5c:	7f7b      	ldrb	r3, [r7, #29]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	777a      	strb	r2, [r7, #29]
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4413      	add	r3, r2
 8002d68:	7b9b      	ldrb	r3, [r3, #14]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	b211      	sxth	r1, r2
 8002d70:	4a66      	ldr	r2, [pc, #408]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	460a      	mov	r2, r1
 8002d78:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002d7a:	7f7b      	ldrb	r3, [r7, #29]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	7b9a      	ldrb	r2, [r3, #14]
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	b211      	sxth	r1, r2
 8002d86:	4a61      	ldr	r2, [pc, #388]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	809a      	strh	r2, [r3, #4]
			index += 2;
 8002d90:	7f7b      	ldrb	r3, [r7, #29]
 8002d92:	3302      	adds	r3, #2
 8002d94:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8002d96:	7f7b      	ldrb	r3, [r7, #29]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	777a      	strb	r2, [r7, #29]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	7b9b      	ldrb	r3, [r3, #14]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	b211      	sxth	r1, r2
 8002daa:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	460a      	mov	r2, r1
 8002db2:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8002db4:	7f7b      	ldrb	r3, [r7, #29]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	7b9a      	ldrb	r2, [r3, #14]
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	b211      	sxth	r1, r2
 8002dc0:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d986      	bls.n	8002ce4 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8002dd6:	7f7b      	ldrb	r3, [r7, #29]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8002ddc:	7f7b      	ldrb	r3, [r7, #29]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	777a      	strb	r2, [r7, #29]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	7b9b      	ldrb	r3, [r3, #14]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002dee:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8002df0:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002df8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002dfa:	7f7b      	ldrb	r3, [r7, #29]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	777a      	strb	r2, [r7, #29]
 8002e00:	461a      	mov	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	7b9b      	ldrb	r3, [r3, #14]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e12:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e1c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e1e:	7f7b      	ldrb	r3, [r7, #29]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	777a      	strb	r2, [r7, #29]
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	7b9b      	ldrb	r3, [r3, #14]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e36:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002e38:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e40:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e42:	7f7b      	ldrb	r3, [r7, #29]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	777a      	strb	r2, [r7, #29]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	7b9b      	ldrb	r3, [r3, #14]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e5a:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002e5c:	7f7b      	ldrb	r3, [r7, #29]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	7b9b      	ldrb	r3, [r3, #14]
 8002e64:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002e66:	2300      	movs	r3, #0
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e03e      	b.n	8002eea <huansic_xb_decodeBody+0x23e>
			index += 2;
 8002e6c:	7f7b      	ldrb	r3, [r7, #29]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002e72:	7f7b      	ldrb	r3, [r7, #29]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	777a      	strb	r2, [r7, #29]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	7b9b      	ldrb	r3, [r3, #14]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	b211      	sxth	r1, r2
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002e88:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002e8c:	7f7b      	ldrb	r3, [r7, #29]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	777a      	strb	r2, [r7, #29]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	7b9a      	ldrb	r2, [r3, #14]
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	b211      	sxth	r1, r2
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002ea0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002ea4:	7f7b      	ldrb	r3, [r7, #29]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002eaa:	7f7b      	ldrb	r3, [r7, #29]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	777a      	strb	r2, [r7, #29]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	7b9b      	ldrb	r3, [r3, #14]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	b211      	sxth	r1, r2
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8002ec8:	7f7b      	ldrb	r3, [r7, #29]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	777a      	strb	r2, [r7, #29]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	7b9a      	ldrb	r2, [r3, #14]
 8002ed6:	7ffb      	ldrb	r3, [r7, #31]
 8002ed8:	b211      	sxth	r1, r2
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	7ffa      	ldrb	r2, [r7, #31]
 8002eec:	7efb      	ldrb	r3, [r7, #27]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3bc      	bcc.n	8002e6c <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8002ef2:	7f7b      	ldrb	r3, [r7, #29]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8002ef8:	7f7b      	ldrb	r3, [r7, #29]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	7b9b      	ldrb	r3, [r3, #14]
 8002f00:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e046      	b.n	8002f96 <huansic_xb_decodeBody+0x2ea>
 8002f08:	20000b70 	.word	0x20000b70
 8002f0c:	20000b7c 	.word	0x20000b7c
 8002f10:	20000b74 	.word	0x20000b74
 8002f14:	20000ba4 	.word	0x20000ba4
			index += 2;
 8002f18:	7f7b      	ldrb	r3, [r7, #29]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002f1e:	7f7b      	ldrb	r3, [r7, #29]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	777a      	strb	r2, [r7, #29]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	7b9b      	ldrb	r3, [r3, #14]
 8002f2c:	021a      	lsls	r2, r3, #8
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	b211      	sxth	r1, r2
 8002f32:	4aa2      	ldr	r2, [pc, #648]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f34:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002f38:	7f7b      	ldrb	r3, [r7, #29]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	777a      	strb	r2, [r7, #29]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	7b9a      	ldrb	r2, [r3, #14]
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
 8002f48:	b211      	sxth	r1, r2
 8002f4a:	4a9c      	ldr	r2, [pc, #624]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f4c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002f50:	7f7b      	ldrb	r3, [r7, #29]
 8002f52:	3302      	adds	r3, #2
 8002f54:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002f56:	7f7b      	ldrb	r3, [r7, #29]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	777a      	strb	r2, [r7, #29]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	7b9b      	ldrb	r3, [r3, #14]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	b211      	sxth	r1, r2
 8002f6a:	4a94      	ldr	r2, [pc, #592]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	460a      	mov	r2, r1
 8002f72:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002f74:	7f7b      	ldrb	r3, [r7, #29]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	777a      	strb	r2, [r7, #29]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	7b9a      	ldrb	r2, [r3, #14]
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	b211      	sxth	r1, r2
 8002f86:	4a8d      	ldr	r2, [pc, #564]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	3301      	adds	r3, #1
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	7ffa      	ldrb	r2, [r7, #31]
 8002f98:	7efb      	ldrb	r3, [r7, #27]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3bc      	bcc.n	8002f18 <huansic_xb_decodeBody+0x26c>
 8002f9e:	e32a      	b.n	80035f6 <huansic_xb_decodeBody+0x94a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7b1b      	ldrb	r3, [r3, #12]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	f040 8324 	bne.w	80035f2 <huansic_xb_decodeBody+0x946>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8002faa:	7f7b      	ldrb	r3, [r7, #29]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	777a      	strb	r2, [r7, #29]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	7b9a      	ldrb	r2, [r3, #14]
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <huansic_xb_decodeBody+0x514>)
 8002fba:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8002fbc:	7f7b      	ldrb	r3, [r7, #29]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	777a      	strb	r2, [r7, #29]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	7b9b      	ldrb	r3, [r3, #14]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fce:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	4a7b      	ldr	r2, [pc, #492]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fd8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002fda:	7f7b      	ldrb	r3, [r7, #29]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	777a      	strb	r2, [r7, #29]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	7b9b      	ldrb	r3, [r3, #14]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002ff2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002ff4:	4b73      	ldr	r3, [pc, #460]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	4a72      	ldr	r2, [pc, #456]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002ffc:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002ffe:	7f7b      	ldrb	r3, [r7, #29]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	777a      	strb	r2, [r7, #29]
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	7b9b      	ldrb	r3, [r3, #14]
 800300c:	461a      	mov	r2, r3
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	4a6b      	ldr	r2, [pc, #428]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003016:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8003018:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	4a69      	ldr	r2, [pc, #420]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003020:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8003022:	7f7b      	ldrb	r3, [r7, #29]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	777a      	strb	r2, [r7, #29]
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	7b9b      	ldrb	r3, [r3, #14]
 8003030:	461a      	mov	r2, r3
 8003032:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	4a62      	ldr	r2, [pc, #392]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 800303a:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 800303c:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <huansic_xb_decodeBody+0x51c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b60      	ldr	r3, [pc, #384]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	4a61      	ldr	r2, [pc, #388]	; (80031cc <huansic_xb_decodeBody+0x520>)
 8003048:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 800304a:	7f7b      	ldrb	r3, [r7, #29]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	777a      	strb	r2, [r7, #29]
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	7b9b      	ldrb	r3, [r3, #14]
 8003058:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003060:	7f7b      	ldrb	r3, [r7, #29]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	777a      	strb	r2, [r7, #29]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	7b9b      	ldrb	r3, [r3, #14]
 800306e:	461a      	mov	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800307c:	7f7b      	ldrb	r3, [r7, #29]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	777a      	strb	r2, [r7, #29]
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	7b9b      	ldrb	r3, [r3, #14]
 800308a:	461a      	mov	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003098:	7f7b      	ldrb	r3, [r7, #29]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	777a      	strb	r2, [r7, #29]
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	7b9b      	ldrb	r3, [r3, #14]
 80030a6:	461a      	mov	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a46      	ldr	r2, [pc, #280]	; (80031d0 <huansic_xb_decodeBody+0x524>)
 80030b6:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 80030b8:	7f7b      	ldrb	r3, [r7, #29]
 80030ba:	3302      	adds	r3, #2
 80030bc:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 80030be:	7f7b      	ldrb	r3, [r7, #29]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	777a      	strb	r2, [r7, #29]
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	7b9b      	ldrb	r3, [r3, #14]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 80030d2:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 80030d4:	7f7b      	ldrb	r3, [r7, #29]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	777a      	strb	r2, [r7, #29]
 80030da:	461a      	mov	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	7b9b      	ldrb	r3, [r3, #14]
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 80030e6:	801a      	strh	r2, [r3, #0]
		index += 2;
 80030e8:	7f7b      	ldrb	r3, [r7, #29]
 80030ea:	3302      	adds	r3, #2
 80030ec:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80030ee:	7f7b      	ldrb	r3, [r7, #29]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	777a      	strb	r2, [r7, #29]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	7b9b      	ldrb	r3, [r3, #14]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	b21a      	sxth	r2, r3
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 8003102:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8003104:	7f7b      	ldrb	r3, [r7, #29]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	777a      	strb	r2, [r7, #29]
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	7b9b      	ldrb	r3, [r3, #14]
 8003112:	b21a      	sxth	r2, r3
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 8003116:	805a      	strh	r2, [r3, #2]
		CoordinateUpdate = 1;
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <huansic_xb_decodeBody+0x52c>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]

		/* fetch battery */
		temp = hxb->buffer[index++];
 800311e:	7f7b      	ldrb	r3, [r7, #29]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	777a      	strb	r2, [r7, #29]
 8003124:	461a      	mov	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	7b9b      	ldrb	r3, [r3, #14]
 800312c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003134:	7f7b      	ldrb	r3, [r7, #29]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	777a      	strb	r2, [r7, #29]
 800313a:	461a      	mov	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	7b9b      	ldrb	r3, [r3, #14]
 8003142:	461a      	mov	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003150:	7f7b      	ldrb	r3, [r7, #29]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	777a      	strb	r2, [r7, #29]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	7b9b      	ldrb	r3, [r3, #14]
 800315e:	461a      	mov	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800316c:	7f7b      	ldrb	r3, [r7, #29]
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	777a      	strb	r2, [r7, #29]
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	7b9b      	ldrb	r3, [r3, #14]
 800317a:	461a      	mov	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <huansic_xb_decodeBody+0x530>)
 800318a:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <huansic_xb_decodeBody+0x534>)
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003196:	6018      	str	r0, [r3, #0]
 8003198:	3304      	adds	r3, #4
 800319a:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 80031a0:	7f7b      	ldrb	r3, [r7, #29]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	777a      	strb	r2, [r7, #29]
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	7b9b      	ldrb	r3, [r3, #14]
 80031ae:	76fb      	strb	r3, [r7, #27]
		delivering_num = listLength;
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <huansic_xb_decodeBody+0x538>)
 80031b2:	7efb      	ldrb	r3, [r7, #27]
 80031b4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e101      	b.n	80033c0 <huansic_xb_decodeBody+0x714>
 80031bc:	20000bb0 	.word	0x20000bb0
 80031c0:	20000b71 	.word	0x20000b71
 80031c4:	20000b78 	.word	0x20000b78
 80031c8:	20000b74 	.word	0x20000b74
 80031cc:	20000bfc 	.word	0x20000bfc
 80031d0:	20000bf4 	.word	0x20000bf4
 80031d4:	20000be0 	.word	0x20000be0
 80031d8:	20000bec 	.word	0x20000bec
 80031dc:	20000bf8 	.word	0x20000bf8
 80031e0:	0800c940 	.word	0x0800c940
 80031e4:	20000bdc 	.word	0x20000bdc
			temp = hxb->buffer[index + 24];
 80031e8:	7f7b      	ldrb	r3, [r7, #29]
 80031ea:	3318      	adds	r3, #24
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	7b9b      	ldrb	r3, [r3, #14]
 80031f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80031fa:	7f7b      	ldrb	r3, [r7, #29]
 80031fc:	3319      	adds	r3, #25
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	7b9b      	ldrb	r3, [r3, #14]
 8003204:	461a      	mov	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 8003212:	7f7b      	ldrb	r3, [r7, #29]
 8003214:	331a      	adds	r3, #26
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	7b9b      	ldrb	r3, [r3, #14]
 800321c:	461a      	mov	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 800322a:	7f7b      	ldrb	r3, [r7, #29]
 800322c:	331b      	adds	r3, #27
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	7b9b      	ldrb	r3, [r3, #14]
 8003234:	461a      	mov	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	b25b      	sxtb	r3, r3
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fa35 	bl	80026b0 <huansic_order_new>
 8003246:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <huansic_xb_decodeBody+0x5b4>
				index += 28;
 800324e:	7f7b      	ldrb	r3, [r7, #29]
 8003250:	331c      	adds	r3, #28
 8003252:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fcb7 	bl	8002bcc <custom_order_new_failed>
				continue;
 800325e:	e0ac      	b.n	80033ba <huansic_xb_decodeBody+0x70e>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003260:	7f7b      	ldrb	r3, [r7, #29]
 8003262:	3302      	adds	r3, #2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	7b9b      	ldrb	r3, [r3, #14]
 800326a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800326c:	b21a      	sxth	r2, r3
 800326e:	7f7b      	ldrb	r3, [r7, #29]
 8003270:	3303      	adds	r3, #3
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	440b      	add	r3, r1
 8003276:	7b9b      	ldrb	r3, [r3, #14]
 8003278:	b21b      	sxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003282:	7f7b      	ldrb	r3, [r7, #29]
 8003284:	3306      	adds	r3, #6
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	7b9b      	ldrb	r3, [r3, #14]
 800328c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800328e:	b21a      	sxth	r2, r3
 8003290:	7f7b      	ldrb	r3, [r7, #29]
 8003292:	3307      	adds	r3, #7
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	440b      	add	r3, r1
 8003298:	7b9b      	ldrb	r3, [r3, #14]
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80032a4:	7f7b      	ldrb	r3, [r7, #29]
 80032a6:	330a      	adds	r3, #10
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	7b9b      	ldrb	r3, [r3, #14]
 80032ae:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	7f7b      	ldrb	r3, [r7, #29]
 80032b4:	330b      	adds	r3, #11
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	440b      	add	r3, r1
 80032ba:	7b9b      	ldrb	r3, [r3, #14]
 80032bc:	b21b      	sxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80032c6:	7f7b      	ldrb	r3, [r7, #29]
 80032c8:	330e      	adds	r3, #14
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	7b9b      	ldrb	r3, [r3, #14]
 80032d0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	7f7b      	ldrb	r3, [r7, #29]
 80032d6:	330f      	adds	r3, #15
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	440b      	add	r3, r1
 80032dc:	7b9b      	ldrb	r3, [r3, #14]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80032e8:	7f7b      	ldrb	r3, [r7, #29]
 80032ea:	3310      	adds	r3, #16
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	7b9b      	ldrb	r3, [r3, #14]
 80032f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80032fa:	7f7b      	ldrb	r3, [r7, #29]
 80032fc:	3311      	adds	r3, #17
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	7b9b      	ldrb	r3, [r3, #14]
 8003304:	461a      	mov	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8003312:	7f7b      	ldrb	r3, [r7, #29]
 8003314:	3312      	adds	r3, #18
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	7b9b      	ldrb	r3, [r3, #14]
 800331c:	461a      	mov	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800332a:	7f7b      	ldrb	r3, [r7, #29]
 800332c:	3313      	adds	r3, #19
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	7b9b      	ldrb	r3, [r3, #14]
 8003334:	461a      	mov	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8003342:	7f7b      	ldrb	r3, [r7, #29]
 8003344:	3314      	adds	r3, #20
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	7b9b      	ldrb	r3, [r3, #14]
 800334c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8003354:	7f7b      	ldrb	r3, [r7, #29]
 8003356:	3315      	adds	r3, #21
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	7b9b      	ldrb	r3, [r3, #14]
 800335e:	461a      	mov	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800336c:	7f7b      	ldrb	r3, [r7, #29]
 800336e:	3316      	adds	r3, #22
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	7b9b      	ldrb	r3, [r3, #14]
 8003376:	461a      	mov	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8003384:	7f7b      	ldrb	r3, [r7, #29]
 8003386:	3317      	adds	r3, #23
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	7b9b      	ldrb	r3, [r3, #14]
 800338e:	461a      	mov	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8003396:	f107 0310 	add.w	r3, r7, #16
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 80033a0:	7f7b      	ldrb	r3, [r7, #29]
 80033a2:	331c      	adds	r3, #28
 80033a4:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	7f3b      	ldrb	r3, [r7, #28]
 80033ac:	1c59      	adds	r1, r3, #1
 80033ae:	7739      	strb	r1, [r7, #28]
 80033b0:	b252      	sxtb	r2, r2
 80033b2:	3320      	adds	r3, #32
 80033b4:	443b      	add	r3, r7
 80033b6:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	3301      	adds	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	7ffa      	ldrb	r2, [r7, #31]
 80033c2:	7efb      	ldrb	r3, [r7, #27]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f4ff af0f 	bcc.w	80031e8 <huansic_xb_decodeBody+0x53c>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e02d      	b.n	800342c <huansic_xb_decodeBody+0x780>
			if (delivering[i]->id != -1) {
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
 80033d2:	4a99      	ldr	r2, [pc, #612]	; (8003638 <huansic_xb_decodeBody+0x98c>)
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d022      	beq.n	8003426 <huansic_xb_decodeBody+0x77a>
				for (j = 0; j < updatedOrderIndex; j++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	77bb      	strb	r3, [r7, #30]
 80033e4:	e011      	b.n	800340a <huansic_xb_decodeBody+0x75e>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	4a93      	ldr	r2, [pc, #588]	; (8003638 <huansic_xb_decodeBody+0x98c>)
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	7fba      	ldrb	r2, [r7, #30]
 80033f2:	3220      	adds	r2, #32
 80033f4:	443a      	add	r2, r7
 80033f6:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d102      	bne.n	8003404 <huansic_xb_decodeBody+0x758>
						j = 255;
 80033fe:	23ff      	movs	r3, #255	; 0xff
 8003400:	77bb      	strb	r3, [r7, #30]
						break;
 8003402:	e006      	b.n	8003412 <huansic_xb_decodeBody+0x766>
				for (j = 0; j < updatedOrderIndex; j++)
 8003404:	7fbb      	ldrb	r3, [r7, #30]
 8003406:	3301      	adds	r3, #1
 8003408:	77bb      	strb	r3, [r7, #30]
 800340a:	7fba      	ldrb	r2, [r7, #30]
 800340c:	7f3b      	ldrb	r3, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	d3e9      	bcc.n	80033e6 <huansic_xb_decodeBody+0x73a>
					}
				if (j != 255)
 8003412:	7fbb      	ldrb	r3, [r7, #30]
 8003414:	2bff      	cmp	r3, #255	; 0xff
 8003416:	d006      	beq.n	8003426 <huansic_xb_decodeBody+0x77a>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	4a87      	ldr	r2, [pc, #540]	; (8003638 <huansic_xb_decodeBody+0x98c>)
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff f99f 	bl	8002764 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	3301      	adds	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d9ce      	bls.n	80033d0 <huansic_xb_decodeBody+0x724>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8003432:	7f7b      	ldrb	r3, [r7, #29]
 8003434:	3318      	adds	r3, #24
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	7b9b      	ldrb	r3, [r3, #14]
 800343c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8003444:	7f7b      	ldrb	r3, [r7, #29]
 8003446:	3319      	adds	r3, #25
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	7b9b      	ldrb	r3, [r3, #14]
 800344e:	461a      	mov	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 800345c:	7f7b      	ldrb	r3, [r7, #29]
 800345e:	331a      	adds	r3, #26
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	7b9b      	ldrb	r3, [r3, #14]
 8003466:	461a      	mov	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8003474:	7f7b      	ldrb	r3, [r7, #29]
 8003476:	331b      	adds	r3, #27
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	7b9b      	ldrb	r3, [r3, #14]
 800347e:	461a      	mov	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f910 	bl	80026b0 <huansic_order_new>
 8003490:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <huansic_xb_decodeBody+0x7fe>
			index += 28;
 8003498:	7f7b      	ldrb	r3, [r7, #29]
 800349a:	331c      	adds	r3, #28
 800349c:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fb92 	bl	8002bcc <custom_order_new_failed>
 80034a8:	e0a5      	b.n	80035f6 <huansic_xb_decodeBody+0x94a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80034aa:	7f7b      	ldrb	r3, [r7, #29]
 80034ac:	3302      	adds	r3, #2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	7b9b      	ldrb	r3, [r3, #14]
 80034b4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	7f7b      	ldrb	r3, [r7, #29]
 80034ba:	3303      	adds	r3, #3
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	440b      	add	r3, r1
 80034c0:	7b9b      	ldrb	r3, [r3, #14]
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80034cc:	7f7b      	ldrb	r3, [r7, #29]
 80034ce:	3306      	adds	r3, #6
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	7b9b      	ldrb	r3, [r3, #14]
 80034d6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80034d8:	b21a      	sxth	r2, r3
 80034da:	7f7b      	ldrb	r3, [r7, #29]
 80034dc:	3307      	adds	r3, #7
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	440b      	add	r3, r1
 80034e2:	7b9b      	ldrb	r3, [r3, #14]
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	805a      	strh	r2, [r3, #2]
			order_append(tempOrder);
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f001 fa88 	bl	8004a04 <order_append>
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80034f4:	7f7b      	ldrb	r3, [r7, #29]
 80034f6:	330a      	adds	r3, #10
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	7b9b      	ldrb	r3, [r3, #14]
 80034fe:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8003500:	b21a      	sxth	r2, r3
 8003502:	7f7b      	ldrb	r3, [r7, #29]
 8003504:	330b      	adds	r3, #11
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	440b      	add	r3, r1
 800350a:	7b9b      	ldrb	r3, [r3, #14]
 800350c:	b21b      	sxth	r3, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003516:	7f7b      	ldrb	r3, [r7, #29]
 8003518:	330e      	adds	r3, #14
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	7b9b      	ldrb	r3, [r3, #14]
 8003520:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8003522:	b21a      	sxth	r2, r3
 8003524:	7f7b      	ldrb	r3, [r7, #29]
 8003526:	330f      	adds	r3, #15
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	440b      	add	r3, r1
 800352c:	7b9b      	ldrb	r3, [r3, #14]
 800352e:	b21b      	sxth	r3, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8003538:	7f7b      	ldrb	r3, [r7, #29]
 800353a:	3310      	adds	r3, #16
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	7b9b      	ldrb	r3, [r3, #14]
 8003542:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800354a:	7f7b      	ldrb	r3, [r7, #29]
 800354c:	3311      	adds	r3, #17
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	7b9b      	ldrb	r3, [r3, #14]
 8003554:	461a      	mov	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8003562:	7f7b      	ldrb	r3, [r7, #29]
 8003564:	3312      	adds	r3, #18
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	7b9b      	ldrb	r3, [r3, #14]
 800356c:	461a      	mov	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800357a:	7f7b      	ldrb	r3, [r7, #29]
 800357c:	3313      	adds	r3, #19
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	7b9b      	ldrb	r3, [r3, #14]
 8003584:	461a      	mov	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8003592:	7f7b      	ldrb	r3, [r7, #29]
 8003594:	3314      	adds	r3, #20
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	7b9b      	ldrb	r3, [r3, #14]
 800359c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80035a4:	7f7b      	ldrb	r3, [r7, #29]
 80035a6:	3315      	adds	r3, #21
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	7b9b      	ldrb	r3, [r3, #14]
 80035ae:	461a      	mov	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80035bc:	7f7b      	ldrb	r3, [r7, #29]
 80035be:	3316      	adds	r3, #22
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	7b9b      	ldrb	r3, [r3, #14]
 80035c6:	461a      	mov	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80035d4:	7f7b      	ldrb	r3, [r7, #29]
 80035d6:	3317      	adds	r3, #23
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	7b9b      	ldrb	r3, [r3, #14]
 80035de:	461a      	mov	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80035e6:	f107 0310 	add.w	r3, r7, #16
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	e001      	b.n	80035f6 <huansic_xb_decodeBody+0x94a>
		}
	} else {
		return XB_ID_ERROR;
 80035f2:	2306      	movs	r3, #6
 80035f4:	e01b      	b.n	800362e <huansic_xb_decodeBody+0x982>
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2206      	movs	r2, #6
 80035fa:	735a      	strb	r2, [r3, #13]
	hxb->nextPackageID = 0x00;		// the next one is header
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	731a      	strb	r2, [r3, #12]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f103 010e 	add.w	r1, r3, #14
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7b5b      	ldrb	r3, [r3, #13]
 8003610:	b29b      	uxth	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	f005 ffe8 	bl	80095e8 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]
	return XB_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000bc8 	.word	0x20000bc8

0800363c <huansic_xb_setBeacon>:
void huansic_xb_requestGameInfo(XB_HandleTypeDef *hxb) {
	uint8_t buffer = 0x00;
	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
}

void huansic_xb_setBeacon(XB_HandleTypeDef *hxb) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0x02;
 8003644:	2302      	movs	r3, #2
 8003646:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	f107 010f 	add.w	r1, r7, #15
 8003650:	230a      	movs	r3, #10
 8003652:	2201      	movs	r2, #1
 8003654:	f005 ff06 	bl	8009464 <HAL_UART_Transmit>
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <huansic_xb_dma_error>:

void huansic_xb_dma_error(XB_HandleTypeDef *hxb) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	330e      	adds	r3, #14
 8003678:	2201      	movs	r2, #1
 800367a:	4619      	mov	r1, r3
 800367c:	f005 ff84 	bl	8009588 <HAL_UART_Receive_IT>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <huansic_xb_it_error>:

void huansic_xb_it_error(XB_HandleTypeDef *hxb) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	330e      	adds	r3, #14
 80036a0:	2201      	movs	r2, #1
 80036a2:	4619      	mov	r1, r3
 80036a4:	f005 ff70 	bl	8009588 <HAL_UART_Receive_IT>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <huansic_xb_isr>:

enum XB_STATUS huansic_xb_isr(XB_HandleTypeDef *hxb) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	if (!hxb)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <huansic_xb_isr+0x12>
		return XB_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e035      	b.n	800372e <huansic_xb_isr+0x7e>

	if (hxb->buffer[0] == 0xAA && hxb->lastByte == 0x55) {		// if aligned (look for header)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7b9b      	ldrb	r3, [r3, #14]
 80036c6:	2baa      	cmp	r3, #170	; 0xaa
 80036c8:	d11f      	bne.n	800370a <huansic_xb_isr+0x5a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80036d0:	2b55      	cmp	r3, #85	; 0x55
 80036d2:	d11a      	bne.n	800370a <huansic_xb_isr+0x5a>
		hxb->pending_alignment = 0;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->nextPackageID = 0x00;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	731a      	strb	r2, [r3, #12]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2], 4);		// receive the rest of header
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3310      	adds	r3, #16
 80036ea:	2204      	movs	r2, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	f005 ff7b 	bl	80095e8 <HAL_UART_Receive_DMA>
		hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0204 	bic.w	r2, r2, #4
 8003704:	601a      	str	r2, [r3, #0]
		return XB_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e011      	b.n	800372e <huansic_xb_isr+0x7e>
	} else {
		hxb->pending_alignment = 1;		// enter aligning mode if not already
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = hxb->buffer[0];
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7b9a      	ldrb	r2, [r3, #14]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	330e      	adds	r3, #14
 8003724:	2201      	movs	r2, #1
 8003726:	4619      	mov	r1, r3
 8003728:	f005 ff2e 	bl	8009588 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800372c:	2305      	movs	r3, #5
	}
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <huansic_xb_dma_isr>:

enum XB_STATUS huansic_xb_dma_isr(XB_HandleTypeDef *hxb) {
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	if (!hxb)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <huansic_xb_dma_isr+0x12>
		return XB_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e00c      	b.n	8003762 <huansic_xb_dma_isr+0x2c>

	if (hxb->nextPackageID == 0x00)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7b1b      	ldrb	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <huansic_xb_dma_isr+0x24>
		return huansic_xb_decodeHeader(hxb);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fa6c 	bl	8002c2e <huansic_xb_decodeHeader>
 8003756:	4603      	mov	r3, r0
 8003758:	e003      	b.n	8003762 <huansic_xb_dma_isr+0x2c>
	else
		return huansic_xb_decodeBody(hxb);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff faa6 	bl	8002cac <huansic_xb_decodeBody>
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003770:	f002 fc9a 	bl	80060a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003774:	f000 f9cc 	bl	8003b10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003778:	f000 fdc6 	bl	8004308 <MX_GPIO_Init>
	MX_DMA_Init();
 800377c:	f000 fd9e 	bl	80042bc <MX_DMA_Init>
	MX_I2C1_Init();
 8003780:	f000 fa0c 	bl	8003b9c <MX_I2C1_Init>
	MX_TIM1_Init();
 8003784:	f000 fa38 	bl	8003bf8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8003788:	f000 fafa 	bl	8003d80 <MX_TIM2_Init>
	MX_TIM3_Init();
 800378c:	f000 fb4c 	bl	8003e28 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003790:	f000 fb9e 	bl	8003ed0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003794:	f000 fbf0 	bl	8003f78 <MX_TIM5_Init>
	MX_TIM8_Init();
 8003798:	f000 fc78 	bl	800408c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800379c:	f000 fd3a 	bl	8004214 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80037a0:	f000 fd62 	bl	8004268 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 80037a4:	f000 fc3c 	bl	8004020 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//Motor init
	cmotor_lf.encoderInverted = 1;
 80037a8:	4ba1      	ldr	r3, [pc, #644]	; (8003a30 <main+0x2c4>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 80037b0:	4ba0      	ldr	r3, [pc, #640]	; (8003a34 <main+0x2c8>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 80037b8:	f000 fdfc 	bl	80043b4 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 80037bc:	f000 fe2e 	bl	800441c <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 80037c0:	f000 fe60 	bl	8004484 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 80037c4:	f000 fe92 	bl	80044ec <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 80037c8:	f000 fec4 	bl	8004554 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 80037cc:	f000 fed6 	bl	800457c <HUAN_ZIGBEE_Init>
	order_list_init();
 80037d0:	f001 f90a 	bl	80049e8 <order_list_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 80037d4:	2014      	movs	r0, #20
 80037d6:	f002 fcc9 	bl	800616c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80037da:	4897      	ldr	r0, [pc, #604]	; (8003a38 <main+0x2cc>)
 80037dc:	f004 fcec 	bl	80081b8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 80037e0:	4996      	ldr	r1, [pc, #600]	; (8003a3c <main+0x2d0>)
 80037e2:	4897      	ldr	r0, [pc, #604]	; (8003a40 <main+0x2d4>)
 80037e4:	f006 ffe0 	bl	800a7a8 <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 80037e8:	4a96      	ldr	r2, [pc, #600]	; (8003a44 <main+0x2d8>)
 80037ea:	2301      	movs	r3, #1
 80037ec:	ca06      	ldmia	r2, {r1, r2}
 80037ee:	4894      	ldr	r0, [pc, #592]	; (8003a40 <main+0x2d4>)
 80037f0:	f001 fe3a 	bl	8005468 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80037f4:	f001 fd36 	bl	8005264 <ssd1306_UpdateScreen>

	// test A*
	myCoord.x = 0;
 80037f8:	4b93      	ldr	r3, [pc, #588]	; (8003a48 <main+0x2dc>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 80037fe:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <main+0x2dc>)
 8003800:	2200      	movs	r2, #0
 8003802:	805a      	strh	r2, [r3, #2]
//	Coordinate goal;
//	goal.x = 60;
//	goal.y = 0;
	EstiCoord.x = (float)myCoord.x;
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <main+0x2dc>)
 8003806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fa94 	bl	8000d38 <__aeabi_i2f>
 8003810:	4603      	mov	r3, r0
 8003812:	4a8e      	ldr	r2, [pc, #568]	; (8003a4c <main+0x2e0>)
 8003814:	6013      	str	r3, [r2, #0]
	EstiCoord.y = (float)myCoord.y;
 8003816:	4b8c      	ldr	r3, [pc, #560]	; (8003a48 <main+0x2dc>)
 8003818:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd fa8b 	bl	8000d38 <__aeabi_i2f>
 8003822:	4603      	mov	r3, r0
 8003824:	4a89      	ldr	r2, [pc, #548]	; (8003a4c <main+0x2e0>)
 8003826:	6053      	str	r3, [r2, #4]
	CoordinateUpdate = 0;
 8003828:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <main+0x2e4>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

		if(gameStatus == 0){		// if the game is not running
 800382e:	4b89      	ldr	r3, [pc, #548]	; (8003a54 <main+0x2e8>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11f      	bne.n	8003876 <main+0x10a>
	    	LED1_ON;
 8003836:	2201      	movs	r2, #1
 8003838:	2101      	movs	r1, #1
 800383a:	4887      	ldr	r0, [pc, #540]	; (8003a58 <main+0x2ec>)
 800383c:	f003 fbde 	bl	8006ffc <HAL_GPIO_WritePin>
	    	HAL_Delay(1000);
 8003840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003844:	f002 fc92 	bl	800616c <HAL_Delay>
	    	LED1_OFF;
 8003848:	2200      	movs	r2, #0
 800384a:	2101      	movs	r1, #1
 800384c:	4882      	ldr	r0, [pc, #520]	; (8003a58 <main+0x2ec>)
 800384e:	f003 fbd5 	bl	8006ffc <HAL_GPIO_WritePin>
 8003852:	e7ec      	b.n	800382e <main+0xc2>
		}
		else
		{
			while (gameStage == 0) {		// pre-match
				chao_move_angle(0, 0);
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f7fe fadc 	bl	8001e18 <chao_move_angle>
				// find angle offset
				initangleZ = -himu.theta[2];
 8003860:	4b7e      	ldr	r3, [pc, #504]	; (8003a5c <main+0x2f0>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003868:	4a7d      	ldr	r2, [pc, #500]	; (8003a60 <main+0x2f4>)
 800386a:	6013      	str	r3, [r2, #0]
				// do some initialization
				// get obstacle list
				Cal_Battery_Coord();
 800386c:	f002 fa9c 	bl	8005da8 <Cal_Battery_Coord>
				task_mode = 0;
 8003870:	4b7c      	ldr	r3, [pc, #496]	; (8003a64 <main+0x2f8>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
			while (gameStage == 0) {		// pre-match
 8003876:	4b7c      	ldr	r3, [pc, #496]	; (8003a68 <main+0x2fc>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0ea      	beq.n	8003854 <main+0xe8>
			}

			while (gameStage == 1){			// first-half
 800387e:	e089      	b.n	8003994 <main+0x228>
				if(task_mode==0){
 8003880:	4b78      	ldr	r3, [pc, #480]	; (8003a64 <main+0x2f8>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <main+0x128>
					//setChargingPile
					set_Beacons();
 8003888:	f002 fa6c 	bl	8005d64 <set_Beacons>
					task_mode = 1;
 800388c:	4b75      	ldr	r3, [pc, #468]	; (8003a64 <main+0x2f8>)
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e07f      	b.n	8003994 <main+0x228>
				}
				else {
					if(myCharge < 200){
 8003894:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <main+0x300>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2bc7      	cmp	r3, #199	; 0xc7
 800389a:	dc02      	bgt.n	80038a2 <main+0x136>
						task_mode = 3;
 800389c:	4b71      	ldr	r3, [pc, #452]	; (8003a64 <main+0x2f8>)
 800389e:	2203      	movs	r2, #3
 80038a0:	701a      	strb	r2, [r3, #0]
					}
					if(task_mode == 1){
 80038a2:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <main+0x2f8>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <main+0x14e>
						Get_packet(merchant);
 80038aa:	4b71      	ldr	r3, [pc, #452]	; (8003a70 <main+0x304>)
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f002 fb11 	bl	8005ed4 <Get_packet>
						task_mode = 4;
 80038b2:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <main+0x2f8>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e06c      	b.n	8003994 <main+0x228>
					}
					else if(task_mode == 2){
 80038ba:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <main+0x2f8>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d107      	bne.n	80038d2 <main+0x166>
						Send_packet(consumer);
 80038c2:	4b6c      	ldr	r3, [pc, #432]	; (8003a74 <main+0x308>)
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	f002 fb11 	bl	8005eec <Send_packet>
						task_mode = 4;
 80038ca:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <main+0x2f8>)
 80038cc:	2204      	movs	r2, #4
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e060      	b.n	8003994 <main+0x228>
					}
					else if(task_mode == 3){
 80038d2:	4b64      	ldr	r3, [pc, #400]	; (8003a64 <main+0x2f8>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d109      	bne.n	80038ee <main+0x182>
						go_Charge();
 80038da:	f002 fa33 	bl	8005d44 <go_Charge>
						HAL_Delay(1000);
 80038de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038e2:	f002 fc43 	bl	800616c <HAL_Delay>
						task_mode = 4;
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <main+0x2f8>)
 80038e8:	2204      	movs	r2, #4
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e052      	b.n	8003994 <main+0x228>
					}
					else
					{
						merchant = Get_nearest_order();
 80038ee:	f001 f8cd 	bl	8004a8c <Get_nearest_order>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4a5e      	ldr	r2, [pc, #376]	; (8003a70 <main+0x304>)
 80038f6:	6013      	str	r3, [r2, #0]
						consumer = Get_nearest_consumer();
 80038f8:	f002 fb04 	bl	8005f04 <Get_nearest_consumer>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4a5d      	ldr	r2, [pc, #372]	; (8003a74 <main+0x308>)
 8003900:	6013      	str	r3, [r2, #0]
						if(delivering_num > 3){
 8003902:	4b5d      	ldr	r3, [pc, #372]	; (8003a78 <main+0x30c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d903      	bls.n	8003912 <main+0x1a6>
							task_mode = 2;
 800390a:	4b56      	ldr	r3, [pc, #344]	; (8003a64 <main+0x2f8>)
 800390c:	2202      	movs	r2, #2
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e040      	b.n	8003994 <main+0x228>
						}
						else if(delivering_num == 0){
 8003912:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <main+0x30c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <main+0x1b6>
							task_mode = 1;
 800391a:	4b52      	ldr	r3, [pc, #328]	; (8003a64 <main+0x2f8>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e038      	b.n	8003994 <main+0x228>
						}
						else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003922:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <main+0x304>)
 8003924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003928:	461a      	mov	r2, r3
 800392a:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <main+0x2dc>)
 800392c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003936:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800393a:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <main+0x304>)
 800393c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003940:	4619      	mov	r1, r3
 8003942:	4b41      	ldr	r3, [pc, #260]	; (8003a48 <main+0x2dc>)
 8003944:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003948:	1acb      	subs	r3, r1, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	bfb8      	it	lt
 800394e:	425b      	neglt	r3, r3
 8003950:	441a      	add	r2, r3
 8003952:	4b48      	ldr	r3, [pc, #288]	; (8003a74 <main+0x308>)
 8003954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003958:	4619      	mov	r1, r3
 800395a:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <main+0x2dc>)
 800395c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003960:	1acb      	subs	r3, r1, r3
 8003962:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003966:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800396a:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <main+0x308>)
 800396c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003970:	4618      	mov	r0, r3
 8003972:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <main+0x2dc>)
 8003974:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003978:	1ac3      	subs	r3, r0, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfb8      	it	lt
 800397e:	425b      	neglt	r3, r3
 8003980:	440b      	add	r3, r1
 8003982:	429a      	cmp	r2, r3
 8003984:	da03      	bge.n	800398e <main+0x222>
							task_mode = 1;
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <main+0x2f8>)
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e002      	b.n	8003994 <main+0x228>
						}
						else{
							task_mode = 2;
 800398e:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <main+0x2f8>)
 8003990:	2202      	movs	r2, #2
 8003992:	701a      	strb	r2, [r3, #0]
			while (gameStage == 1){			// first-half
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <main+0x2fc>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	f43f af71 	beq.w	8003880 <main+0x114>
					}
				}

			}

			while (gameStage == 2){			// second-half
 800399e:	e0a6      	b.n	8003aee <main+0x382>
				if(myCharge < 200){
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <main+0x300>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2bc7      	cmp	r3, #199	; 0xc7
 80039a6:	dc02      	bgt.n	80039ae <main+0x242>
					task_mode = 3;
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <main+0x2f8>)
 80039aa:	2203      	movs	r2, #3
 80039ac:	701a      	strb	r2, [r3, #0]
				}
				if(task_mode == 1){
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <main+0x2f8>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <main+0x25a>
					Get_packet(merchant);
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <main+0x304>)
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	f002 fa8b 	bl	8005ed4 <Get_packet>
					task_mode = 4;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <main+0x2f8>)
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e093      	b.n	8003aee <main+0x382>
				}
				else if(task_mode == 2){
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <main+0x2f8>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <main+0x272>
					Send_packet(consumer);
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <main+0x308>)
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	f002 fa8b 	bl	8005eec <Send_packet>
					task_mode = 4;
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <main+0x2f8>)
 80039d8:	2204      	movs	r2, #4
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e087      	b.n	8003aee <main+0x382>
				}
				else if(task_mode == 3){
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <main+0x2f8>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d109      	bne.n	80039fa <main+0x28e>
					go_Charge();
 80039e6:	f002 f9ad 	bl	8005d44 <go_Charge>
					HAL_Delay(1000);
 80039ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ee:	f002 fbbd 	bl	800616c <HAL_Delay>
					task_mode = 4;
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <main+0x2f8>)
 80039f4:	2204      	movs	r2, #4
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e079      	b.n	8003aee <main+0x382>
				}
				else
				{
					merchant = Get_nearest_order();
 80039fa:	f001 f847 	bl	8004a8c <Get_nearest_order>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <main+0x304>)
 8003a02:	6013      	str	r3, [r2, #0]
					consumer = Get_nearest_consumer();
 8003a04:	f002 fa7e 	bl	8005f04 <Get_nearest_consumer>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <main+0x308>)
 8003a0c:	6013      	str	r3, [r2, #0]
					if(delivering_num > 3){
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <main+0x30c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d903      	bls.n	8003a1e <main+0x2b2>
						task_mode = 2;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <main+0x2f8>)
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e067      	b.n	8003aee <main+0x382>
					}
					else if(delivering_num == 0){
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <main+0x30c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d12a      	bne.n	8003a7c <main+0x310>
						task_mode = 1;
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <main+0x2f8>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	e05f      	b.n	8003aee <main+0x382>
 8003a2e:	bf00      	nop
 8003a30:	20000994 	.word	0x20000994
 8003a34:	20000a0c 	.word	0x20000a0c
 8003a38:	200007f4 	.word	0x200007f4
 8003a3c:	0800c948 	.word	0x0800c948
 8003a40:	20000c00 	.word	0x20000c00
 8003a44:	20000004 	.word	0x20000004
 8003a48:	20000be0 	.word	0x20000be0
 8003a4c:	20000be4 	.word	0x20000be4
 8003a50:	20000bec 	.word	0x20000bec
 8003a54:	20000b71 	.word	0x20000b71
 8003a58:	40010c00 	.word	0x40010c00
 8003a5c:	20000a84 	.word	0x20000a84
 8003a60:	20000bf0 	.word	0x20000bf0
 8003a64:	20000b72 	.word	0x20000b72
 8003a68:	20000b70 	.word	0x20000b70
 8003a6c:	20000bf8 	.word	0x20000bf8
 8003a70:	20000c10 	.word	0x20000c10
 8003a74:	20000c14 	.word	0x20000c14
 8003a78:	20000bdc 	.word	0x20000bdc
					}
					else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <main+0x390>)
 8003a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <main+0x394>)
 8003a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003a90:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <main+0x390>)
 8003a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <main+0x394>)
 8003a9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003aa2:	1acb      	subs	r3, r1, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bfb8      	it	lt
 8003aa8:	425b      	neglt	r3, r3
 8003aaa:	441a      	add	r2, r3
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <main+0x398>)
 8003aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <main+0x394>)
 8003ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aba:	1acb      	subs	r3, r1, r3
 8003abc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003ac0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <main+0x398>)
 8003ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003aca:	4618      	mov	r0, r3
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <main+0x394>)
 8003ace:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ad2:	1ac3      	subs	r3, r0, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bfb8      	it	lt
 8003ad8:	425b      	neglt	r3, r3
 8003ada:	440b      	add	r3, r1
 8003adc:	429a      	cmp	r2, r3
 8003ade:	da03      	bge.n	8003ae8 <main+0x37c>
						task_mode = 1;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <main+0x39c>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <main+0x382>
					}
					else{
						task_mode = 2;
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <main+0x39c>)
 8003aea:	2202      	movs	r2, #2
 8003aec:	701a      	strb	r2, [r3, #0]
			while (gameStage == 2){			// second-half
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <main+0x3a0>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	f43f af54 	beq.w	80039a0 <main+0x234>
		if(gameStatus == 0){		// if the game is not running
 8003af8:	e699      	b.n	800382e <main+0xc2>
 8003afa:	bf00      	nop
 8003afc:	20000c10 	.word	0x20000c10
 8003b00:	20000be0 	.word	0x20000be0
 8003b04:	20000c14 	.word	0x20000c14
 8003b08:	20000b72 	.word	0x20000b72
 8003b0c:	20000b70 	.word	0x20000b70

08003b10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003b16:	f107 0318 	add.w	r3, r7, #24
 8003b1a:	2228      	movs	r2, #40	; 0x28
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f006 fb4c 	bl	800a1bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b40:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b42:	2301      	movs	r3, #1
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b46:	2302      	movs	r3, #2
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b56:	f107 0318 	add.w	r3, r7, #24
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fec0 	bl	80078e0 <HAL_RCC_OscConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <SystemClock_Config+0x5a>
			{
		Error_Handler();
 8003b66:	f000 fd7d 	bl	8004664 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b6a:	230f      	movs	r3, #15
 8003b6c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	2102      	movs	r1, #2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 f92d 	bl	8007de4 <HAL_RCC_ClockConfig>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <SystemClock_Config+0x84>
			{
		Error_Handler();
 8003b90:	f000 fd68 	bl	8004664 <Error_Handler>
	}
}
 8003b94:	bf00      	nop
 8003b96:	3740      	adds	r7, #64	; 0x40
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <MX_I2C1_Init+0x50>)
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <MX_I2C1_Init+0x54>)
 8003ba4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <MX_I2C1_Init+0x50>)
 8003ba8:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <MX_I2C1_Init+0x58>)
 8003baa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bbe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <MX_I2C1_Init+0x50>)
 8003bda:	f003 fa27 	bl	800702c <HAL_I2C_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8003be4:	f000 fd3e 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000638 	.word	0x20000638
 8003bf0:	40005400 	.word	0x40005400
 8003bf4:	000186a0 	.word	0x000186a0

08003bf8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b096      	sub	sp, #88	; 0x58
 8003bfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003bfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	611a      	str	r2, [r3, #16]
 8003c26:	615a      	str	r2, [r3, #20]
 8003c28:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f006 fac3 	bl	800a1bc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003c36:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c38:	4a50      	ldr	r2, [pc, #320]	; (8003d7c <MX_TIM1_Init+0x184>)
 8003c3a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003c3c:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c42:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c4e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c50:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003c56:	4b48      	ldr	r3, [pc, #288]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5c:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c62:	4845      	ldr	r0, [pc, #276]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c64:	f004 fa58 	bl	8008118 <HAL_TIM_Base_Init>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 8003c6e:	f000 fcf9 	bl	8004664 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c76:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	483e      	ldr	r0, [pc, #248]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c80:	f004 ff02 	bl	8008a88 <HAL_TIM_ConfigClockSource>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 8003c8a:	f000 fceb 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c8e:	483a      	ldr	r0, [pc, #232]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003c90:	f004 faf2 	bl	8008278 <HAL_TIM_PWM_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 8003c9a:	f000 fce3 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003caa:	4619      	mov	r1, r3
 8003cac:	4832      	ldr	r0, [pc, #200]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003cae:	f005 fabd 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 8003cb8:	f000 fcd4 	bl	8004664 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cbc:	2360      	movs	r3, #96	; 0x60
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4825      	ldr	r0, [pc, #148]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003ce2:	f004 fe13 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 8003cec:	f000 fcba 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	481f      	ldr	r0, [pc, #124]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003cfa:	f004 fe07 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8003d04:	f000 fcae 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4819      	ldr	r0, [pc, #100]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003d12:	f004 fdfb 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 8003d1c:	f000 fca2 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d24:	220c      	movs	r2, #12
 8003d26:	4619      	mov	r1, r3
 8003d28:	4813      	ldr	r0, [pc, #76]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003d2a:	f004 fdef 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 8003d34:	f000 fc96 	bl	8004664 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d50:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4807      	ldr	r0, [pc, #28]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003d5c:	f005 fad2 	bl	8009304 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 8003d66:	f000 fc7d 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003d6a:	4803      	ldr	r0, [pc, #12]	; (8003d78 <MX_TIM1_Init+0x180>)
 8003d6c:	f001 fd62 	bl	8005834 <HAL_TIM_MspPostInit>

}
 8003d70:	bf00      	nop
 8003d72:	3758      	adds	r7, #88	; 0x58
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2000068c 	.word	0x2000068c
 8003d7c:	40012c00 	.word	0x40012c00

08003d80 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	; 0x30
 8003d84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f006 fa14 	bl	800a1bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003da2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003da4:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8003db0:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003db6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dbe:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4619      	mov	r1, r3
 8003dee:	480d      	ldr	r0, [pc, #52]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003df0:	f004 fb54 	bl	800849c <HAL_TIM_Encoder_Init>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 8003dfa:	f000 fc33 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4806      	ldr	r0, [pc, #24]	; (8003e24 <MX_TIM2_Init+0xa4>)
 8003e0c:	f005 fa0e 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 8003e16:	f000 fc25 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003e1a:	bf00      	nop
 8003e1c:	3730      	adds	r7, #48	; 0x30
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200006d4 	.word	0x200006d4

08003e28 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	; 0x30
 8003e2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f006 f9c0 	bl	800a1bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <MX_TIM3_Init+0xa4>)
 8003e48:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003e4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e5c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e72:	2301      	movs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e82:	2301      	movs	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e86:	2300      	movs	r3, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	4619      	mov	r1, r3
 8003e94:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003e96:	f004 fb01 	bl	800849c <HAL_TIM_Encoder_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 8003ea0:	f000 fbe0 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <MX_TIM3_Init+0xa0>)
 8003eb2:	f005 f9bb 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8003ebc:	f000 fbd2 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003ec0:	bf00      	nop
 8003ec2:	3730      	adds	r7, #48	; 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000071c 	.word	0x2000071c
 8003ecc:	40000400 	.word	0x40000400

08003ed0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	; 0x30
 8003ed4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003ed6:	f107 030c 	add.w	r3, r7, #12
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f006 f96c 	bl	800a1bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <MX_TIM4_Init+0xa4>)
 8003ef0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f04:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	480c      	ldr	r0, [pc, #48]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003f3e:	f004 faad 	bl	800849c <HAL_TIM_Encoder_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8003f48:	f000 fb8c 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4805      	ldr	r0, [pc, #20]	; (8003f70 <MX_TIM4_Init+0xa0>)
 8003f5a:	f005 f967 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8003f64:	f000 fb7e 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003f68:	bf00      	nop
 8003f6a:	3730      	adds	r7, #48	; 0x30
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000764 	.word	0x20000764
 8003f74:	40000800 	.word	0x40000800

08003f78 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f006 f918 	bl	800a1bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003f96:	4a21      	ldr	r2, [pc, #132]	; (800401c <MX_TIM5_Init+0xa4>)
 8003f98:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fac:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003fde:	f107 030c 	add.w	r3, r7, #12
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480c      	ldr	r0, [pc, #48]	; (8004018 <MX_TIM5_Init+0xa0>)
 8003fe6:	f004 fa59 	bl	800849c <HAL_TIM_Encoder_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 8003ff0:	f000 fb38 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4805      	ldr	r0, [pc, #20]	; (8004018 <MX_TIM5_Init+0xa0>)
 8004002:	f005 f913 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 800400c:	f000 fb2a 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8004010:	bf00      	nop
 8004012:	3730      	adds	r7, #48	; 0x30
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	200007ac 	.word	0x200007ac
 800401c:	40000c00 	.word	0x40000c00

08004020 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004026:	463b      	mov	r3, r7
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <MX_TIM6_Init+0x64>)
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <MX_TIM6_Init+0x68>)
 8004032:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <MX_TIM6_Init+0x64>)
 8004036:	2247      	movs	r2, #71	; 0x47
 8004038:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <MX_TIM6_Init+0x64>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <MX_TIM6_Init+0x64>)
 8004042:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004046:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <MX_TIM6_Init+0x64>)
 800404a:	2200      	movs	r2, #0
 800404c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800404e:	480d      	ldr	r0, [pc, #52]	; (8004084 <MX_TIM6_Init+0x64>)
 8004050:	f004 f862 	bl	8008118 <HAL_TIM_Base_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 800405a:	f000 fb03 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004066:	463b      	mov	r3, r7
 8004068:	4619      	mov	r1, r3
 800406a:	4806      	ldr	r0, [pc, #24]	; (8004084 <MX_TIM6_Init+0x64>)
 800406c:	f005 f8de 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 8004076:	f000 faf5 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200007f4 	.word	0x200007f4
 8004088:	40001000 	.word	0x40001000

0800408c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b096      	sub	sp, #88	; 0x58
 8004090:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80040a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80040aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	615a      	str	r2, [r3, #20]
 80040bc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2220      	movs	r2, #32
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f006 f879 	bl	800a1bc <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80040ca:	4b50      	ldr	r3, [pc, #320]	; (800420c <MX_TIM8_Init+0x180>)
 80040cc:	4a50      	ldr	r2, [pc, #320]	; (8004210 <MX_TIM8_Init+0x184>)
 80040ce:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80040d0:	4b4e      	ldr	r3, [pc, #312]	; (800420c <MX_TIM8_Init+0x180>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d6:	4b4d      	ldr	r3, [pc, #308]	; (800420c <MX_TIM8_Init+0x180>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80040dc:	4b4b      	ldr	r3, [pc, #300]	; (800420c <MX_TIM8_Init+0x180>)
 80040de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e4:	4b49      	ldr	r3, [pc, #292]	; (800420c <MX_TIM8_Init+0x180>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80040ea:	4b48      	ldr	r3, [pc, #288]	; (800420c <MX_TIM8_Init+0x180>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f0:	4b46      	ldr	r3, [pc, #280]	; (800420c <MX_TIM8_Init+0x180>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040f6:	4845      	ldr	r0, [pc, #276]	; (800420c <MX_TIM8_Init+0x180>)
 80040f8:	f004 f80e 	bl	8008118 <HAL_TIM_Base_Init>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 8004102:	f000 faaf 	bl	8004664 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800410c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004110:	4619      	mov	r1, r3
 8004112:	483e      	ldr	r0, [pc, #248]	; (800420c <MX_TIM8_Init+0x180>)
 8004114:	f004 fcb8 	bl	8008a88 <HAL_TIM_ConfigClockSource>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 800411e:	f000 faa1 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004122:	483a      	ldr	r0, [pc, #232]	; (800420c <MX_TIM8_Init+0x180>)
 8004124:	f004 f8a8 	bl	8008278 <HAL_TIM_PWM_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 800412e:	f000 fa99 	bl	8004664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800413a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800413e:	4619      	mov	r1, r3
 8004140:	4832      	ldr	r0, [pc, #200]	; (800420c <MX_TIM8_Init+0x180>)
 8004142:	f005 f873 	bl	800922c <HAL_TIMEx_MasterConfigSynchronization>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 800414c:	f000 fa8a 	bl	8004664 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004150:	2360      	movs	r3, #96	; 0x60
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004158:	2300      	movs	r3, #0
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800415c:	2300      	movs	r3, #0
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004160:	2300      	movs	r3, #0
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004164:	2300      	movs	r3, #0
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800416c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004170:	2200      	movs	r2, #0
 8004172:	4619      	mov	r1, r3
 8004174:	4825      	ldr	r0, [pc, #148]	; (800420c <MX_TIM8_Init+0x180>)
 8004176:	f004 fbc9 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 8004180:	f000 fa70 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004188:	2204      	movs	r2, #4
 800418a:	4619      	mov	r1, r3
 800418c:	481f      	ldr	r0, [pc, #124]	; (800420c <MX_TIM8_Init+0x180>)
 800418e:	f004 fbbd 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 8004198:	f000 fa64 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800419c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a0:	2208      	movs	r2, #8
 80041a2:	4619      	mov	r1, r3
 80041a4:	4819      	ldr	r0, [pc, #100]	; (800420c <MX_TIM8_Init+0x180>)
 80041a6:	f004 fbb1 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 80041b0:	f000 fa58 	bl	8004664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b8:	220c      	movs	r2, #12
 80041ba:	4619      	mov	r1, r3
 80041bc:	4813      	ldr	r0, [pc, #76]	; (800420c <MX_TIM8_Init+0x180>)
 80041be:	f004 fba5 	bl	800890c <HAL_TIM_PWM_ConfigChannel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 80041c8:	f000 fa4c 	bl	8004664 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041e4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4807      	ldr	r0, [pc, #28]	; (800420c <MX_TIM8_Init+0x180>)
 80041f0:	f005 f888 	bl	8009304 <HAL_TIMEx_ConfigBreakDeadTime>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 80041fa:	f000 fa33 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80041fe:	4803      	ldr	r0, [pc, #12]	; (800420c <MX_TIM8_Init+0x180>)
 8004200:	f001 fb18 	bl	8005834 <HAL_TIM_MspPostInit>

}
 8004204:	bf00      	nop
 8004206:	3758      	adds	r7, #88	; 0x58
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	2000083c 	.word	0x2000083c
 8004210:	40013400 	.word	0x40013400

08004214 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <MX_USART2_UART_Init+0x50>)
 800421c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004224:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800423a:	220c      	movs	r2, #12
 800423c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800424a:	4805      	ldr	r0, [pc, #20]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800424c:	f005 f8bd 	bl	80093ca <HAL_UART_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 8004256:	f000 fa05 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000884 	.word	0x20000884
 8004264:	40004400 	.word	0x40004400

08004268 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <MX_USART3_UART_Init+0x50>)
 8004270:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004278:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004288:	2200      	movs	r2, #0
 800428a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800428e:	220c      	movs	r2, #12
 8004290:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800429a:	2200      	movs	r2, #0
 800429c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 80042a0:	f005 f893 	bl	80093ca <HAL_UART_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 80042aa:	f000 f9db 	bl	8004664 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200008c8 	.word	0x200008c8
 80042b8:	40004800 	.word	0x40004800

080042bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <MX_DMA_Init+0x48>)
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <MX_DMA_Init+0x48>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6153      	str	r3, [r2, #20]
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <MX_DMA_Init+0x48>)
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2103      	movs	r1, #3
 80042de:	200d      	movs	r0, #13
 80042e0:	f002 f83f 	bl	8006362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80042e4:	200d      	movs	r0, #13
 80042e6:	f002 f858 	bl	800639a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2103      	movs	r1, #3
 80042ee:	2010      	movs	r0, #16
 80042f0:	f002 f837 	bl	8006362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80042f4:	2010      	movs	r0, #16
 80042f6:	f002 f850 	bl	800639a <HAL_NVIC_EnableIRQ>

}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000

08004308 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <MX_GPIO_Init+0xa4>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	4a22      	ldr	r2, [pc, #136]	; (80043ac <MX_GPIO_Init+0xa4>)
 8004322:	f043 0320 	orr.w	r3, r3, #32
 8004326:	6193      	str	r3, [r2, #24]
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <MX_GPIO_Init+0xa4>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <MX_GPIO_Init+0xa4>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <MX_GPIO_Init+0xa4>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	6193      	str	r3, [r2, #24]
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <MX_GPIO_Init+0xa4>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800434c:	4b17      	ldr	r3, [pc, #92]	; (80043ac <MX_GPIO_Init+0xa4>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <MX_GPIO_Init+0xa4>)
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	6193      	str	r3, [r2, #24]
 8004358:	4b14      	ldr	r3, [pc, #80]	; (80043ac <MX_GPIO_Init+0xa4>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <MX_GPIO_Init+0xa4>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	4a10      	ldr	r2, [pc, #64]	; (80043ac <MX_GPIO_Init+0xa4>)
 800436a:	f043 0310 	orr.w	r3, r3, #16
 800436e:	6193      	str	r3, [r2, #24]
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <MX_GPIO_Init+0xa4>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 800437c:	2200      	movs	r2, #0
 800437e:	2107      	movs	r1, #7
 8004380:	480b      	ldr	r0, [pc, #44]	; (80043b0 <MX_GPIO_Init+0xa8>)
 8004382:	f002 fe3b 	bl	8006ffc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8004386:	2307      	movs	r3, #7
 8004388:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800438a:	2301      	movs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2302      	movs	r3, #2
 8004394:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004396:	f107 0310 	add.w	r3, r7, #16
 800439a:	4619      	mov	r1, r3
 800439c:	4804      	ldr	r0, [pc, #16]	; (80043b0 <MX_GPIO_Init+0xa8>)
 800439e:	f002 fc99 	bl	8006cd4 <HAL_GPIO_Init>

}
 80043a2:	bf00      	nop
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40010c00 	.word	0x40010c00

080043b4 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HUAN_MOTOR1_Init+0x50>)
 80043bc:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <HUAN_MOTOR1_Init+0x54>)
 80043c2:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043c6:	4a11      	ldr	r2, [pc, #68]	; (800440c <HUAN_MOTOR1_Init+0x58>)
 80043c8:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043cc:	220c      	movs	r2, #12
 80043ce:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043d2:	4a0e      	ldr	r2, [pc, #56]	; (800440c <HUAN_MOTOR1_Init+0x58>)
 80043d4:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043d8:	2208      	movs	r2, #8
 80043da:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HUAN_MOTOR1_Init+0x5c>)
 80043e8:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HUAN_MOTOR1_Init+0x60>)
 80043ee:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HUAN_MOTOR1_Init+0x64>)
 80043f4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 80043f6:	4802      	ldr	r0, [pc, #8]	; (8004400 <HUAN_MOTOR1_Init+0x4c>)
 80043f8:	f7fe f9ca 	bl	8002790 <huansic_motor_init>
}
 80043fc:	bf00      	nop
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000994 	.word	0x20000994
 8004404:	200006d4 	.word	0x200006d4
 8004408:	3d4ccccd 	.word	0x3d4ccccd
 800440c:	2000068c 	.word	0x2000068c
 8004410:	399d4952 	.word	0x399d4952
 8004414:	37a7c5ac 	.word	0x37a7c5ac
 8004418:	387ba882 	.word	0x387ba882

0800441c <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <HUAN_MOTOR2_Init+0x50>)
 8004424:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HUAN_MOTOR2_Init+0x54>)
 800442a:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 800442e:	4a11      	ldr	r2, [pc, #68]	; (8004474 <HUAN_MOTOR2_Init+0x58>)
 8004430:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HUAN_MOTOR2_Init+0x58>)
 800443c:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004440:	2204      	movs	r2, #4
 8004442:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HUAN_MOTOR2_Init+0x5c>)
 8004450:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004454:	4a09      	ldr	r2, [pc, #36]	; (800447c <HUAN_MOTOR2_Init+0x60>)
 8004456:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 800445a:	4a09      	ldr	r2, [pc, #36]	; (8004480 <HUAN_MOTOR2_Init+0x64>)
 800445c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 800445e:	4802      	ldr	r0, [pc, #8]	; (8004468 <HUAN_MOTOR2_Init+0x4c>)
 8004460:	f7fe f996 	bl	8002790 <huansic_motor_init>
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200009d0 	.word	0x200009d0
 800446c:	20000764 	.word	0x20000764
 8004470:	3d4ccccd 	.word	0x3d4ccccd
 8004474:	2000068c 	.word	0x2000068c
 8004478:	399d4952 	.word	0x399d4952
 800447c:	37a7c5ac 	.word	0x37a7c5ac
 8004480:	387ba882 	.word	0x387ba882

08004484 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HUAN_MOTOR3_Init+0x50>)
 800448c:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 8004490:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <HUAN_MOTOR3_Init+0x54>)
 8004492:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 8004496:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HUAN_MOTOR3_Init+0x58>)
 8004498:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 800449c:	220c      	movs	r2, #12
 800449e:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HUAN_MOTOR3_Init+0x58>)
 80044a4:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044a8:	2208      	movs	r2, #8
 80044aa:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HUAN_MOTOR3_Init+0x5c>)
 80044b8:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044bc:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <HUAN_MOTOR3_Init+0x60>)
 80044be:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <HUAN_MOTOR3_Init+0x64>)
 80044c4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 80044c6:	4802      	ldr	r0, [pc, #8]	; (80044d0 <HUAN_MOTOR3_Init+0x4c>)
 80044c8:	f7fe f962 	bl	8002790 <huansic_motor_init>
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000a0c 	.word	0x20000a0c
 80044d4:	2000071c 	.word	0x2000071c
 80044d8:	3d4ccccd 	.word	0x3d4ccccd
 80044dc:	2000083c 	.word	0x2000083c
 80044e0:	399d4952 	.word	0x399d4952
 80044e4:	37a7c5ac 	.word	0x37a7c5ac
 80044e8:	387ba882 	.word	0x387ba882

080044ec <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <HUAN_MOTOR4_Init+0x50>)
 80044f4:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <HUAN_MOTOR4_Init+0x54>)
 80044fa:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <HUAN_MOTOR4_Init+0x58>)
 8004500:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HUAN_MOTOR4_Init+0x58>)
 800450c:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 8004510:	2204      	movs	r2, #4
 8004512:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 8004514:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <HUAN_MOTOR4_Init+0x5c>)
 8004520:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 8004524:	4a09      	ldr	r2, [pc, #36]	; (800454c <HUAN_MOTOR4_Init+0x60>)
 8004526:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 800452a:	4a09      	ldr	r2, [pc, #36]	; (8004550 <HUAN_MOTOR4_Init+0x64>)
 800452c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 800452e:	4802      	ldr	r0, [pc, #8]	; (8004538 <HUAN_MOTOR4_Init+0x4c>)
 8004530:	f7fe f92e 	bl	8002790 <huansic_motor_init>
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000a48 	.word	0x20000a48
 800453c:	200007ac 	.word	0x200007ac
 8004540:	3d4ccccd 	.word	0x3d4ccccd
 8004544:	2000083c 	.word	0x2000083c
 8004548:	399d4952 	.word	0x399d4952
 800454c:	37a7c5ac 	.word	0x37a7c5ac
 8004550:	387ba882 	.word	0x387ba882

08004554 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HUAN_IMU_Init+0x1c>)
 800455a:	4a06      	ldr	r2, [pc, #24]	; (8004574 <HUAN_IMU_Init+0x20>)
 800455c:	601a      	str	r2, [r3, #0]
	himu.hdma = &hdma_usart3_rx;
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HUAN_IMU_Init+0x1c>)
 8004560:	4a05      	ldr	r2, [pc, #20]	; (8004578 <HUAN_IMU_Init+0x24>)
 8004562:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 8004564:	4802      	ldr	r0, [pc, #8]	; (8004570 <HUAN_IMU_Init+0x1c>)
 8004566:	f7fd fd81 	bl	800206c <huansic_jy62_init>
}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000a84 	.word	0x20000a84
 8004574:	200008c8 	.word	0x200008c8
 8004578:	20000950 	.word	0x20000950

0800457c <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
	hxb.huart = &huart2;
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HUAN_ZIGBEE_Init+0x1c>)
 8004582:	4a06      	ldr	r2, [pc, #24]	; (800459c <HUAN_ZIGBEE_Init+0x20>)
 8004584:	601a      	str	r2, [r3, #0]
	hxb.hdma = &hdma_usart2_rx;
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <HUAN_ZIGBEE_Init+0x1c>)
 8004588:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <HUAN_ZIGBEE_Init+0x24>)
 800458a:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 800458c:	4802      	ldr	r0, [pc, #8]	; (8004598 <HUAN_ZIGBEE_Init+0x1c>)
 800458e:	f7fe fb27 	bl	8002be0 <huansic_xb_init>
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000adc 	.word	0x20000adc
 800459c:	20000884 	.word	0x20000884
 80045a0:	2000090c 	.word	0x2000090c

080045a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <HAL_UART_RxCpltCallback+0x58>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d10c      	bne.n	80045d0 <HAL_UART_RxCpltCallback+0x2c>
		if (himu.pending_alignment)
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <HAL_UART_RxCpltCallback+0x58>)
 80045b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 80045c0:	480e      	ldr	r0, [pc, #56]	; (80045fc <HAL_UART_RxCpltCallback+0x58>)
 80045c2:	f7fd fea9 	bl	8002318 <huansic_jy62_isr>
		if(hxb.pending_alignment)
			huansic_xb_isr(&hxb);
		else
			huansic_xb_dma_isr(&hxb);
	}
}
 80045c6:	e014      	b.n	80045f2 <HAL_UART_RxCpltCallback+0x4e>
			huansic_jy62_dma_isr(&himu);
 80045c8:	480c      	ldr	r0, [pc, #48]	; (80045fc <HAL_UART_RxCpltCallback+0x58>)
 80045ca:	f7fd fd85 	bl	80020d8 <huansic_jy62_dma_isr>
}
 80045ce:	e010      	b.n	80045f2 <HAL_UART_RxCpltCallback+0x4e>
	} else if (hxb.huart == huart) {
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_UART_RxCpltCallback+0x5c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d10b      	bne.n	80045f2 <HAL_UART_RxCpltCallback+0x4e>
		if(hxb.pending_alignment)
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_UART_RxCpltCallback+0x5c>)
 80045dc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_RxCpltCallback+0x48>
			huansic_xb_isr(&hxb);
 80045e4:	4806      	ldr	r0, [pc, #24]	; (8004600 <HAL_UART_RxCpltCallback+0x5c>)
 80045e6:	f7ff f863 	bl	80036b0 <huansic_xb_isr>
}
 80045ea:	e002      	b.n	80045f2 <HAL_UART_RxCpltCallback+0x4e>
			huansic_xb_dma_isr(&hxb);
 80045ec:	4804      	ldr	r0, [pc, #16]	; (8004600 <HAL_UART_RxCpltCallback+0x5c>)
 80045ee:	f7ff f8a2 	bl	8003736 <huansic_xb_dma_isr>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000a84 	.word	0x20000a84
 8004600:	20000adc 	.word	0x20000adc

08004604 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <HAL_UART_ErrorCallback+0x58>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d10c      	bne.n	8004630 <HAL_UART_ErrorCallback+0x2c>
		if (himu.pending_alignment)
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_UART_ErrorCallback+0x58>)
 8004618:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8004620:	480e      	ldr	r0, [pc, #56]	; (800465c <HAL_UART_ErrorCallback+0x58>)
 8004622:	f7fd fec4 	bl	80023ae <huansic_jy62_error>
		if (hxb.pending_alignment)
			huansic_xb_it_error(&hxb);
		else
			huansic_xb_dma_error(&hxb);
	}
}
 8004626:	e014      	b.n	8004652 <HAL_UART_ErrorCallback+0x4e>
			huansic_jy62_dma_error(&himu);
 8004628:	480c      	ldr	r0, [pc, #48]	; (800465c <HAL_UART_ErrorCallback+0x58>)
 800462a:	f7fd feac 	bl	8002386 <huansic_jy62_dma_error>
}
 800462e:	e010      	b.n	8004652 <HAL_UART_ErrorCallback+0x4e>
	} else if (hxb.huart == huart) {
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_UART_ErrorCallback+0x5c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d10b      	bne.n	8004652 <HAL_UART_ErrorCallback+0x4e>
		if (hxb.pending_alignment)
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_UART_ErrorCallback+0x5c>)
 800463c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_UART_ErrorCallback+0x48>
			huansic_xb_it_error(&hxb);
 8004644:	4806      	ldr	r0, [pc, #24]	; (8004660 <HAL_UART_ErrorCallback+0x5c>)
 8004646:	f7ff f81f 	bl	8003688 <huansic_xb_it_error>
}
 800464a:	e002      	b.n	8004652 <HAL_UART_ErrorCallback+0x4e>
			huansic_xb_dma_error(&hxb);
 800464c:	4804      	ldr	r0, [pc, #16]	; (8004660 <HAL_UART_ErrorCallback+0x5c>)
 800464e:	f7ff f807 	bl	8003660 <huansic_xb_dma_error>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000a84 	.word	0x20000a84
 8004660:	20000adc 	.word	0x20000adc

08004664 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004668:	b672      	cpsid	i
}
 800466a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800466c:	e7fe      	b.n	800466c <Error_Handler+0x8>
	...

08004670 <Lane_init>:
	closelist.Head = 0;
	closelist.Tail = 0;
	closelist.Length = 0;
}

void Lane_init(void){
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
	pathlane.Head = 0;
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <Lane_init+0x18>)
 8004676:	2200      	movs	r2, #0
 8004678:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 0;
 800467a:	4b03      	ldr	r3, [pc, #12]	; (8004688 <Lane_init+0x18>)
 800467c:	2200      	movs	r2, #0
 800467e:	805a      	strh	r2, [r3, #2]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	20007c24 	.word	0x20007c24

0800468c <queue_append>:

uint8_t queue_append(A_Star_Node* node)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	if (openlist.Length + openlist.Head >= QUEUE_SIZE)
 8004694:	4b41      	ldr	r3, [pc, #260]	; (800479c <queue_append+0x110>)
 8004696:	885b      	ldrh	r3, [r3, #2]
 8004698:	461a      	mov	r2, r3
 800469a:	4b40      	ldr	r3, [pc, #256]	; (800479c <queue_append+0x110>)
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	4413      	add	r3, r2
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a4:	db01      	blt.n	80046aa <queue_append+0x1e>
	{
		return 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e073      	b.n	8004792 <queue_append+0x106>
	}
	else
	{
		uint16_t i = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	82fb      	strh	r3, [r7, #22]
		while (i < openlist.Length)
 80046ae:	e052      	b.n	8004756 <queue_append+0xca>
		{
			if (openlist.buffer[i + openlist.Head].total <= node->total)
 80046b0:	8afb      	ldrh	r3, [r7, #22]
 80046b2:	4a3a      	ldr	r2, [pc, #232]	; (800479c <queue_append+0x110>)
 80046b4:	8812      	ldrh	r2, [r2, #0]
 80046b6:	441a      	add	r2, r3
 80046b8:	4938      	ldr	r1, [pc, #224]	; (800479c <queue_append+0x110>)
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	f8d2 2006 	ldr.w	r2, [r2, #6]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fc fd2d 	bl	8001130 <__aeabi_fcmple>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <queue_append+0x58>
			{
				i++;
 80046dc:	8afb      	ldrh	r3, [r7, #22]
 80046de:	3301      	adds	r3, #1
 80046e0:	82fb      	strh	r3, [r7, #22]
 80046e2:	e038      	b.n	8004756 <queue_append+0xca>
			}
			else
			{
				A_Star_Node change;
				while (i < openlist.Length + 1)
 80046e4:	e02a      	b.n	800473c <queue_append+0xb0>
				{
					change = openlist.buffer[i + openlist.Head];
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	; (800479c <queue_append+0x110>)
 80046ea:	8812      	ldrh	r2, [r2, #0]
 80046ec:	441a      	add	r2, r3
 80046ee:	492b      	ldr	r1, [pc, #172]	; (800479c <queue_append+0x110>)
 80046f0:	4613      	mov	r3, r2
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	18ca      	adds	r2, r1, r3
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	3204      	adds	r2, #4
 8004700:	ca07      	ldmia	r2, {r0, r1, r2}
 8004702:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					openlist.buffer[i + openlist.Head] = *node;
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <queue_append+0x110>)
 800470a:	8812      	ldrh	r2, [r2, #0]
 800470c:	441a      	add	r2, r3
 800470e:	4923      	ldr	r1, [pc, #140]	; (800479c <queue_append+0x110>)
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	6810      	ldr	r0, [r2, #0]
 8004720:	6851      	ldr	r1, [r2, #4]
 8004722:	6892      	ldr	r2, [r2, #8]
 8004724:	c307      	stmia	r3!, {r0, r1, r2}
					*node = change;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	461c      	mov	r4, r3
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004730:	6020      	str	r0, [r4, #0]
 8004732:	6061      	str	r1, [r4, #4]
 8004734:	60a2      	str	r2, [r4, #8]
					i++;
 8004736:	8afb      	ldrh	r3, [r7, #22]
 8004738:	3301      	adds	r3, #1
 800473a:	82fb      	strh	r3, [r7, #22]
				while (i < openlist.Length + 1)
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <queue_append+0x110>)
 800473e:	885b      	ldrh	r3, [r3, #2]
 8004740:	8afa      	ldrh	r2, [r7, #22]
 8004742:	429a      	cmp	r2, r3
 8004744:	d9cf      	bls.n	80046e6 <queue_append+0x5a>
				}
				openlist.Length += 1;
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <queue_append+0x110>)
 8004748:	885b      	ldrh	r3, [r3, #2]
 800474a:	3301      	adds	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <queue_append+0x110>)
 8004750:	805a      	strh	r2, [r3, #2]
				return 1;
 8004752:	2301      	movs	r3, #1
 8004754:	e01d      	b.n	8004792 <queue_append+0x106>
		while (i < openlist.Length)
 8004756:	4b11      	ldr	r3, [pc, #68]	; (800479c <queue_append+0x110>)
 8004758:	885b      	ldrh	r3, [r3, #2]
 800475a:	8afa      	ldrh	r2, [r7, #22]
 800475c:	429a      	cmp	r2, r3
 800475e:	d3a7      	bcc.n	80046b0 <queue_append+0x24>
			}
		}
		openlist.buffer[openlist.Head + openlist.Length] = *node;
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <queue_append+0x110>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <queue_append+0x110>)
 8004768:	885b      	ldrh	r3, [r3, #2]
 800476a:	441a      	add	r2, r3
 800476c:	490b      	ldr	r1, [pc, #44]	; (800479c <queue_append+0x110>)
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	6810      	ldr	r0, [r2, #0]
 800477e:	6851      	ldr	r1, [r2, #4]
 8004780:	6892      	ldr	r2, [r2, #8]
 8004782:	c307      	stmia	r3!, {r0, r1, r2}
		openlist.Length++;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <queue_append+0x110>)
 8004786:	885b      	ldrh	r3, [r3, #2]
 8004788:	3301      	adds	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <queue_append+0x110>)
 800478e:	805a      	strh	r2, [r3, #2]
		return 1;
 8004790:	2301      	movs	r3, #1
	}
}
 8004792:	4618      	mov	r0, r3
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	bf00      	nop
 800479c:	20000c18 	.word	0x20000c18

080047a0 <list_append>:

uint8_t list_append(uint16_t c)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
	if (closelist.Length >= LIST_SIZE)
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <list_append+0x58>)
 80047ac:	889b      	ldrh	r3, [r3, #4]
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d301      	bcc.n	80047b8 <list_append+0x18>
	{
		return 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e01a      	b.n	80047ee <list_append+0x4e>
	}
	else
	{
		closelist.buffer[closelist.Tail] = c;
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <list_append+0x58>)
 80047ba:	885b      	ldrh	r3, [r3, #2]
 80047bc:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <list_append+0x58>)
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	80da      	strh	r2, [r3, #6]
		closelist.Tail = (closelist.Tail + 1) % LIST_SIZE;
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <list_append+0x58>)
 80047c8:	885b      	ldrh	r3, [r3, #2]
 80047ca:	3301      	adds	r3, #1
 80047cc:	425a      	negs	r2, r3
 80047ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80047d6:	bf58      	it	pl
 80047d8:	4253      	negpl	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <list_append+0x58>)
 80047de:	805a      	strh	r2, [r3, #2]
		closelist.Length++;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <list_append+0x58>)
 80047e2:	889b      	ldrh	r3, [r3, #4]
 80047e4:	3301      	adds	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <list_append+0x58>)
 80047ea:	809a      	strh	r2, [r3, #4]
		return 1;
 80047ec:	2301      	movs	r3, #1
	}
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	20006c1c 	.word	0x20006c1c

080047fc <queue_top>:

uint16_t queue_top()
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
	if (openlist.Length > 0)
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <queue_top+0x3c>)
 8004802:	885b      	ldrh	r3, [r3, #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <queue_top+0x2e>
	{
		openlist.Head++;
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <queue_top+0x3c>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <queue_top+0x3c>)
 8004812:	801a      	strh	r2, [r3, #0]
		openlist.Length--;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <queue_top+0x3c>)
 8004816:	885b      	ldrh	r3, [r3, #2]
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <queue_top+0x3c>)
 800481e:	805a      	strh	r2, [r3, #2]
		return openlist.Head - 1;
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <queue_top+0x3c>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	3b01      	subs	r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	e001      	b.n	800482e <queue_top+0x32>
	}
	else {
		return 65535;
 800482a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000c18 	.word	0x20000c18

0800483c <findin_queue>:

uint16_t findin_queue(uint16_t c)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < openlist.Length; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	81fb      	strh	r3, [r7, #14]
 800484a:	e017      	b.n	800487c <findin_queue+0x40>
	{
		if (openlist.buffer[i + openlist.Head].cor == c) return (i + openlist.Head);
 800484c:	89fb      	ldrh	r3, [r7, #14]
 800484e:	4a11      	ldr	r2, [pc, #68]	; (8004894 <findin_queue+0x58>)
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	441a      	add	r2, r3
 8004854:	490f      	ldr	r1, [pc, #60]	; (8004894 <findin_queue+0x58>)
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3304      	adds	r3, #4
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	88fa      	ldrh	r2, [r7, #6]
 8004866:	429a      	cmp	r2, r3
 8004868:	d105      	bne.n	8004876 <findin_queue+0x3a>
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <findin_queue+0x58>)
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	89fb      	ldrh	r3, [r7, #14]
 8004870:	4413      	add	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	e008      	b.n	8004888 <findin_queue+0x4c>
	for (i = 0; i < openlist.Length; i++)
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	3301      	adds	r3, #1
 800487a:	81fb      	strh	r3, [r7, #14]
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <findin_queue+0x58>)
 800487e:	885b      	ldrh	r3, [r3, #2]
 8004880:	89fa      	ldrh	r2, [r7, #14]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3e2      	bcc.n	800484c <findin_queue+0x10>
	}
	return 0;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000c18 	.word	0x20000c18

08004898 <findin_list>:
	}
	return 0;
}

uint8_t findin_list(uint16_t c)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < closelist.Length; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	81fb      	strh	r3, [r7, #14]
 80048a6:	e00f      	b.n	80048c8 <findin_list+0x30>
	{
		if (closelist.buffer[i + closelist.Head] == c) return 1;
 80048a8:	89fb      	ldrh	r3, [r7, #14]
 80048aa:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <findin_list+0x48>)
 80048ac:	8812      	ldrh	r2, [r2, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <findin_list+0x48>)
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	88db      	ldrh	r3, [r3, #6]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d101      	bne.n	80048c2 <findin_list+0x2a>
 80048be:	2301      	movs	r3, #1
 80048c0:	e008      	b.n	80048d4 <findin_list+0x3c>
	for (i = 0; i < closelist.Length; i++)
 80048c2:	89fb      	ldrh	r3, [r7, #14]
 80048c4:	3301      	adds	r3, #1
 80048c6:	81fb      	strh	r3, [r7, #14]
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <findin_list+0x48>)
 80048ca:	889b      	ldrh	r3, [r3, #4]
 80048cc:	89fa      	ldrh	r2, [r7, #14]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3ea      	bcc.n	80048a8 <findin_list+0x10>
	}
	return 0;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20006c1c 	.word	0x20006c1c

080048e4 <editcost>:

void editcost(uint16_t index, A_Star_Node* node)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	80fb      	strh	r3, [r7, #6]
	if (openlist.buffer[index].total > node->total)
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	4920      	ldr	r1, [pc, #128]	; (8004974 <editcost+0x90>)
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc fc24 	bl	8001158 <__aeabi_fcmpgt>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d100      	bne.n	8004918 <editcost+0x34>
	{
		openlist.buffer[index].total = node->total;
		openlist.buffer[index].cost = node->cost;
		openlist.buffer[index].fatherindex = node->fatherindex;
	}
}
 8004916:	e029      	b.n	800496c <editcost+0x88>
		openlist.buffer[index].total = node->total;
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8004920:	460b      	mov	r3, r1
 8004922:	4619      	mov	r1, r3
 8004924:	4813      	ldr	r0, [pc, #76]	; (8004974 <editcost+0x90>)
 8004926:	4613      	mov	r3, r2
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4403      	add	r3, r0
 8004930:	460a      	mov	r2, r1
 8004932:	f8c3 200a 	str.w	r2, [r3, #10]
		openlist.buffer[index].cost = node->cost;
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800493e:	460b      	mov	r3, r1
 8004940:	4619      	mov	r1, r3
 8004942:	480c      	ldr	r0, [pc, #48]	; (8004974 <editcost+0x90>)
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4403      	add	r3, r0
 800494e:	460a      	mov	r2, r1
 8004950:	f8c3 2006 	str.w	r2, [r3, #6]
		openlist.buffer[index].fatherindex = node->fatherindex;
 8004954:	88fa      	ldrh	r2, [r7, #6]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	8958      	ldrh	r0, [r3, #10]
 800495a:	4906      	ldr	r1, [pc, #24]	; (8004974 <editcost+0x90>)
 800495c:	4613      	mov	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	330e      	adds	r3, #14
 8004968:	4602      	mov	r2, r0
 800496a:	801a      	strh	r2, [r3, #0]
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000c18 	.word	0x20000c18

08004978 <Insert_inLane>:

uint8_t Insert_inLane(Coordinate *head_coor, uint8_t head_index)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
	if(!head_coor) return 0;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <Insert_inLane+0x16>
 800498a:	2300      	movs	r3, #0
 800498c:	e025      	b.n	80049da <Insert_inLane+0x62>
	pathlane.Head = 0;
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <Insert_inLane+0x6c>)
 8004990:	2200      	movs	r2, #0
 8004992:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 16 - head_index;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f1c3 0310 	rsb	r3, r3, #16
 800499c:	b29a      	uxth	r2, r3
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <Insert_inLane+0x6c>)
 80049a0:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = head_index; i < 16; i++)
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	e014      	b.n	80049d2 <Insert_inLane+0x5a>
	{
		pathlane.buffer[pathlane.Head + i - head_index] = *(head_coor + i);
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	18d1      	adds	r1, r2, r3
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <Insert_inLane+0x6c>)
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	441a      	add	r2, r3
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <Insert_inLane+0x6c>)
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	3304      	adds	r3, #4
 80049c6:	460a      	mov	r2, r1
 80049c8:	6810      	ldr	r0, [r2, #0]
 80049ca:	6018      	str	r0, [r3, #0]
	for(uint8_t i = head_index; i < 16; i++)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	3301      	adds	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d9e7      	bls.n	80049a8 <Insert_inLane+0x30>
	}
	return 1;
 80049d8:	2301      	movs	r3, #1
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	20007c24 	.word	0x20007c24

080049e8 <order_list_init>:

void order_list_init(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
	orders.length = 0;
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <order_list_init+0x18>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
	orders.new = 0;
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <order_list_init+0x18>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	20007ca8 	.word	0x20007ca8

08004a04 <order_append>:

void order_append(Order *an_order)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	if(!(an_order->startCoord.x == orders.buffer[orders.new].x && an_order->startCoord.y == orders.buffer[orders.new].y))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a12:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <order_append+0x84>)
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	491c      	ldr	r1, [pc, #112]	; (8004a88 <order_append+0x84>)
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d10b      	bne.n	8004a3c <order_append+0x38>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <order_append+0x84>)
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	4916      	ldr	r1, [pc, #88]	; (8004a88 <order_append+0x84>)
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d01f      	beq.n	8004a7c <order_append+0x78>
	{
		orders.buffer[orders.length].x = an_order->startCoord.x;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <order_append+0x84>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a48:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <order_append+0x84>)
 8004a4a:	0083      	lsls	r3, r0, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	460a      	mov	r2, r1
 8004a50:	805a      	strh	r2, [r3, #2]
		orders.buffer[orders.length].y = an_order->startCoord.y;
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <order_append+0x84>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <order_append+0x84>)
 8004a60:	0083      	lsls	r3, r0, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	460a      	mov	r2, r1
 8004a66:	809a      	strh	r2, [r3, #4]
		orders.new = orders.length;
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <order_append+0x84>)
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <order_append+0x84>)
 8004a6e:	705a      	strb	r2, [r3, #1]
		orders.length += 1;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <order_append+0x84>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <order_append+0x84>)
 8004a7a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20007ca8 	.word	0x20007ca8

08004a8c <Get_nearest_order>:

Coordinate Get_nearest_order(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
	if(orders.length == 0)
 8004a92:	4b3c      	ldr	r3, [pc, #240]	; (8004b84 <Get_nearest_order+0xf8>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <Get_nearest_order+0x18>
		return myCoord;
 8004a9a:	4a3b      	ldr	r2, [pc, #236]	; (8004b88 <Get_nearest_order+0xfc>)
 8004a9c:	1d3b      	adds	r3, r7, #4
 8004a9e:	6810      	ldr	r0, [r2, #0]
 8004aa0:	6018      	str	r0, [r3, #0]
 8004aa2:	e063      	b.n	8004b6c <Get_nearest_order+0xe0>
	uint8_t i;
	int16_t mindis = 512;
 8004aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa8:	81bb      	strh	r3, [r7, #12]
	uint8_t minindex = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	72fb      	strb	r3, [r7, #11]
	for(i=0;i < orders.length; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
 8004ab2:	e02d      	b.n	8004b10 <Get_nearest_order+0x84>
	{
		int16_t distance = abs(orders.buffer[i].x - myCoord.x) + abs(orders.buffer[i].y - myCoord.y);
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	4a33      	ldr	r2, [pc, #204]	; (8004b84 <Get_nearest_order+0xf8>)
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <Get_nearest_order+0xfc>)
 8004ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfb8      	it	lt
 8004ace:	425b      	neglt	r3, r3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	492b      	ldr	r1, [pc, #172]	; (8004b84 <Get_nearest_order+0xf8>)
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <Get_nearest_order+0xfc>)
 8004ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ae6:	1acb      	subs	r3, r1, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfb8      	it	lt
 8004aec:	425b      	neglt	r3, r3
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	813b      	strh	r3, [r7, #8]
		if(distance < mindis)
 8004af6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004afa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	da03      	bge.n	8004b0a <Get_nearest_order+0x7e>
		{
			mindis = distance;
 8004b02:	893b      	ldrh	r3, [r7, #8]
 8004b04:	81bb      	strh	r3, [r7, #12]
			minindex = i;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	72fb      	strb	r3, [r7, #11]
	for(i=0;i < orders.length; i++)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3cc      	bcc.n	8004ab4 <Get_nearest_order+0x28>
		}
	}
	Coordinate nearest = orders.buffer[minindex];
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	463a      	mov	r2, r7
 8004b24:	3302      	adds	r3, #2
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	6010      	str	r0, [r2, #0]

	for(i=minindex + 1; i < orders.length; i++)
 8004b2a:	7afb      	ldrb	r3, [r7, #11]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	e00f      	b.n	8004b52 <Get_nearest_order+0xc6>
	{
		orders.buffer[i - 1] = orders.buffer[i];
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	3a01      	subs	r2, #1
 8004b38:	4912      	ldr	r1, [pc, #72]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	440a      	add	r2, r1
 8004b3e:	4911      	ldr	r1, [pc, #68]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	3202      	adds	r2, #2
 8004b46:	3302      	adds	r3, #2
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6013      	str	r3, [r2, #0]
	for(i=minindex + 1; i < orders.length; i++)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	7bfa      	ldrb	r2, [r7, #15]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d3ea      	bcc.n	8004b32 <Get_nearest_order+0xa6>
	}

	orders.length -= 1;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <Get_nearest_order+0xf8>)
 8004b66:	701a      	strb	r2, [r3, #0]
	return nearest;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	607b      	str	r3, [r7, #4]
}
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	88ba      	ldrh	r2, [r7, #4]
 8004b70:	f362 030f 	bfi	r3, r2, #0, #16
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	f362 431f 	bfi	r3, r2, #16, #16
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	20007ca8 	.word	0x20007ca8
 8004b88:	20000be0 	.word	0x20000be0

08004b8c <GotoDestination>:
extern JY62_HandleTypeDef himu;
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 8004b8c:	b5b0      	push	{r4, r5, r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
	if(mode == 1)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 80a2 	bne.w	8004ce4 <GotoDestination+0x158>
	{
		uint8_t isGetAroad = mingyan_pathfind_avoidObstacle(&myCoord, &Destination);
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4871      	ldr	r0, [pc, #452]	; (8004d6c <GotoDestination+0x1e0>)
 8004ba6:	f7fd fa51 	bl	800204c <mingyan_pathfind_avoidObstacle>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]
		if(isGetAroad != 0)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05c      	beq.n	8004c6e <GotoDestination+0xe2>
		{
			// success get a road
			for(uint8_t i = 0; i < pathlane.Length; i ++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73bb      	strb	r3, [r7, #14]
 8004bb8:	bf00      	nop
 8004bba:	7bbb      	ldrb	r3, [r7, #14]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <GotoDestination+0x1e4>)
 8004bc0:	885b      	ldrh	r3, [r3, #2]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	f080 80cc 	bcs.w	8004d60 <GotoDestination+0x1d4>
			{
				while(1)
				{
					Position_P(&EstiCoord, &pathlane.buffer[pathlane.Head + i]);
 8004bc8:	4b69      	ldr	r3, [pc, #420]	; (8004d70 <GotoDestination+0x1e4>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4a66      	ldr	r2, [pc, #408]	; (8004d70 <GotoDestination+0x1e4>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4865      	ldr	r0, [pc, #404]	; (8004d74 <GotoDestination+0x1e8>)
 8004bde:	f000 f9e7 	bl	8004fb0 <Position_P>
					CheckCoord();
 8004be2:	f000 f931 	bl	8004e48 <CheckCoord>
					if(abs(EstiCoord.x - pathlane.buffer[pathlane.Head + i].x) + abs(EstiCoord.y - pathlane.buffer[pathlane.Head + i].y) <= PATH_PID_TOLERANCE)
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <GotoDestination+0x1e8>)
 8004be8:	681c      	ldr	r4, [r3, #0]
 8004bea:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <GotoDestination+0x1e4>)
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <GotoDestination+0x1e4>)
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fc f89a 	bl	8000d38 <__aeabi_i2f>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4619      	mov	r1, r3
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7fb ffdf 	bl	8000bcc <__aeabi_fsub>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fc faab 	bl	800116c <__aeabi_f2iz>
 8004c16:	4603      	mov	r3, r0
 8004c18:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004c1c:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004c20:	4b54      	ldr	r3, [pc, #336]	; (8004d74 <GotoDestination+0x1e8>)
 8004c22:	685d      	ldr	r5, [r3, #4]
 8004c24:	4b52      	ldr	r3, [pc, #328]	; (8004d70 <GotoDestination+0x1e4>)
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4a50      	ldr	r2, [pc, #320]	; (8004d70 <GotoDestination+0x1e4>)
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fc f87d 	bl	8000d38 <__aeabi_i2f>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4619      	mov	r1, r3
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7fb ffc2 	bl	8000bcc <__aeabi_fsub>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fc fa8e 	bl	800116c <__aeabi_f2iz>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bfb8      	it	lt
 8004c56:	425b      	neglt	r3, r3
 8004c58:	4423      	add	r3, r4
 8004c5a:	2b0a      	cmp	r3, #10
 8004c5c:	dcb4      	bgt.n	8004bc8 <GotoDestination+0x3c>
					{
						chao_move_angle(0,0);
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f7fd f8d7 	bl	8001e18 <chao_move_angle>
						return 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e079      	b.n	8004d62 <GotoDestination+0x1d6>
		}
		else
		{
			while(1)
			{
				Position_P(&EstiCoord, &Destination);
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4840      	ldr	r0, [pc, #256]	; (8004d74 <GotoDestination+0x1e8>)
 8004c74:	f000 f99c 	bl	8004fb0 <Position_P>
				CheckCoord();
 8004c78:	f000 f8e6 	bl	8004e48 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004c7c:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <GotoDestination+0x1e8>)
 8004c7e:	681c      	ldr	r4, [r3, #0]
 8004c80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fc f857 	bl	8000d38 <__aeabi_i2f>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7fb ff9c 	bl	8000bcc <__aeabi_fsub>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fc fa68 	bl	800116c <__aeabi_f2iz>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004ca2:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004ca6:	4b33      	ldr	r3, [pc, #204]	; (8004d74 <GotoDestination+0x1e8>)
 8004ca8:	685d      	ldr	r5, [r3, #4]
 8004caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc f842 	bl	8000d38 <__aeabi_i2f>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f7fb ff87 	bl	8000bcc <__aeabi_fsub>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fc fa53 	bl	800116c <__aeabi_f2iz>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bfb8      	it	lt
 8004ccc:	425b      	neglt	r3, r3
 8004cce:	4423      	add	r3, r4
 8004cd0:	2b0a      	cmp	r3, #10
 8004cd2:	dccc      	bgt.n	8004c6e <GotoDestination+0xe2>
				{
					chao_move_angle(0,0);
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f7fd f89c 	bl	8001e18 <chao_move_angle>
					return 1;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e03e      	b.n	8004d62 <GotoDestination+0x1d6>
				}
			}
		}
	}
	else if(mode == 0)
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d13a      	bne.n	8004d60 <GotoDestination+0x1d4>
	{
		while(1)
		{
			Position_P(&EstiCoord, &Destination);
 8004cea:	1d3b      	adds	r3, r7, #4
 8004cec:	4619      	mov	r1, r3
 8004cee:	4821      	ldr	r0, [pc, #132]	; (8004d74 <GotoDestination+0x1e8>)
 8004cf0:	f000 f95e 	bl	8004fb0 <Position_P>
			CheckCoord();
 8004cf4:	f000 f8a8 	bl	8004e48 <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <GotoDestination+0x1e8>)
 8004cfa:	681c      	ldr	r4, [r3, #0]
 8004cfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fc f819 	bl	8000d38 <__aeabi_i2f>
 8004d06:	4603      	mov	r3, r0
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f7fb ff5e 	bl	8000bcc <__aeabi_fsub>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc fa2a 	bl	800116c <__aeabi_f2iz>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004d1e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <GotoDestination+0x1e8>)
 8004d24:	685d      	ldr	r5, [r3, #4]
 8004d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fc f804 	bl	8000d38 <__aeabi_i2f>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4619      	mov	r1, r3
 8004d34:	4628      	mov	r0, r5
 8004d36:	f7fb ff49 	bl	8000bcc <__aeabi_fsub>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc fa15 	bl	800116c <__aeabi_f2iz>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfb8      	it	lt
 8004d48:	425b      	neglt	r3, r3
 8004d4a:	4423      	add	r3, r4
 8004d4c:	2b0a      	cmp	r3, #10
 8004d4e:	dccc      	bgt.n	8004cea <GotoDestination+0x15e>
			{
				chao_move_angle(0,0);
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0000 	mov.w	r0, #0
 8004d58:	f7fd f85e 	bl	8001e18 <chao_move_angle>
				return 1;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <GotoDestination+0x1d6>
			}
		}
	}
	return 0;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bdb0      	pop	{r4, r5, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000be0 	.word	0x20000be0
 8004d70:	20007c24 	.word	0x20007c24
 8004d74:	20000be4 	.word	0x20000be4

08004d78 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004d84:	e005      	b.n	8004d92 <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 8004d86:	4910      	ldr	r1, [pc, #64]	; (8004dc8 <Angle_normalization+0x50>)
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7fb ff21 	bl	8000bd0 <__addsf3>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7fc f9c0 	bl	800111c <__aeabi_fcmplt>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f1      	bne.n	8004d86 <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 8004da2:	e005      	b.n	8004db0 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 8004da4:	4908      	ldr	r1, [pc, #32]	; (8004dc8 <Angle_normalization+0x50>)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7fb ff10 	bl	8000bcc <__aeabi_fsub>
 8004dac:	4603      	mov	r3, r0
 8004dae:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8004db0:	4905      	ldr	r1, [pc, #20]	; (8004dc8 <Angle_normalization+0x50>)
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7fc f9d0 	bl	8001158 <__aeabi_fcmpgt>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f2      	bne.n	8004da4 <Angle_normalization+0x2c>
	}
	return raw_angle;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	43b40000 	.word	0x43b40000

08004dcc <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	80fb      	strh	r3, [r7, #6]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	80bb      	strh	r3, [r7, #4]
	float kp = 2.0;
 8004ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de0:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 8004de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfb8      	it	lt
 8004dea:	425b      	neglt	r3, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bfb8      	it	lt
 8004df8:	425b      	neglt	r3, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb ff9a 	bl	8000d38 <__aeabi_i2f>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4619      	mov	r1, r3
 8004e08:	68b8      	ldr	r0, [r7, #8]
 8004e0a:	f7fb ffe9 	bl	8000de0 <__aeabi_fmul>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 8004e12:	490b      	ldr	r1, [pc, #44]	; (8004e40 <CalSpeed+0x74>)
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7fc f99f 	bl	8001158 <__aeabi_fcmpgt>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <CalSpeed+0x58>
	{
		Speed = MAX_SPEED;
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <CalSpeed+0x74>)
 8004e22:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 8004e24:	4907      	ldr	r1, [pc, #28]	; (8004e44 <CalSpeed+0x78>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7fc f978 	bl	800111c <__aeabi_fcmplt>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <CalSpeed+0x6a>
	{
		Speed = MIN_SPEED;
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <CalSpeed+0x78>)
 8004e34:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	447a0000 	.word	0x447a0000
 8004e44:	43fa0000 	.word	0x43fa0000

08004e48 <CheckCoord>:

uint8_t CheckCoord(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <CheckCoord+0x40>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d116      	bne.n	8004e82 <CheckCoord+0x3a>
	{
		EstiCoord.x = myCoord.x;
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <CheckCoord+0x44>)
 8004e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb ff6c 	bl	8000d38 <__aeabi_i2f>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a0b      	ldr	r2, [pc, #44]	; (8004e90 <CheckCoord+0x48>)
 8004e64:	6013      	str	r3, [r2, #0]
		EstiCoord.y = myCoord.y;
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <CheckCoord+0x44>)
 8004e68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb ff63 	bl	8000d38 <__aeabi_i2f>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4a06      	ldr	r2, [pc, #24]	; (8004e90 <CheckCoord+0x48>)
 8004e76:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <CheckCoord+0x40>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
		return 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <CheckCoord+0x3c>
	}
	return 0;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000bec 	.word	0x20000bec
 8004e8c:	20000be0 	.word	0x20000be0
 8004e90:	20000be4 	.word	0x20000be4

08004e94 <Get_v_x>:

float Get_v_x(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
	float v_x = (cmotor_rf.last5Speed - cmotor_lf.last5Speed + cmotor_lb.last5Speed - cmotor_rb.last5Speed) * 50.0 / 4000;
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <Get_v_x+0x74>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <Get_v_x+0x78>)
 8004ea0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fb fe91 	bl	8000bcc <__aeabi_fsub>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <Get_v_x+0x7c>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fb fe8b 	bl	8000bd0 <__addsf3>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <Get_v_x+0x80>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fb fe81 	bl	8000bcc <__aeabi_fsub>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb fb0f 	bl	80004f0 <__aeabi_f2d>
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <Get_v_x+0x84>)
 8004ed8:	f7fb fb62 	bl	80005a0 <__aeabi_dmul>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <Get_v_x+0x88>)
 8004eea:	f7fb fc83 	bl	80007f4 <__aeabi_ddiv>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f7fb fe15 	bl	8000b24 <__aeabi_d2f>
 8004efa:	4603      	mov	r3, r0
 8004efc:	607b      	str	r3, [r7, #4]
	return v_x;
 8004efe:	687b      	ldr	r3, [r7, #4]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200009d0 	.word	0x200009d0
 8004f0c:	20000994 	.word	0x20000994
 8004f10:	20000a0c 	.word	0x20000a0c
 8004f14:	20000a48 	.word	0x20000a48
 8004f18:	40490000 	.word	0x40490000
 8004f1c:	40af4000 	.word	0x40af4000

08004f20 <Get_v_y>:

float Get_v_y(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
	float v_y = (cmotor_rf.last5Speed + cmotor_lf.last5Speed + cmotor_lb.last5Speed + cmotor_rb.last5Speed) * 60.0 / 4000;
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <Get_v_y+0x74>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <Get_v_y+0x78>)
 8004f2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb fe4d 	bl	8000bd0 <__addsf3>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <Get_v_y+0x7c>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7fb fe45 	bl	8000bd0 <__addsf3>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <Get_v_y+0x80>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f7fb fe3d 	bl	8000bd0 <__addsf3>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fac9 	bl	80004f0 <__aeabi_f2d>
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <Get_v_y+0x84>)
 8004f64:	f7fb fb1c 	bl	80005a0 <__aeabi_dmul>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <Get_v_y+0x88>)
 8004f76:	f7fb fc3d 	bl	80007f4 <__aeabi_ddiv>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	f7fb fdcf 	bl	8000b24 <__aeabi_d2f>
 8004f86:	4603      	mov	r3, r0
 8004f88:	607b      	str	r3, [r7, #4]
	return v_y;
 8004f8a:	687b      	ldr	r3, [r7, #4]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	200009d0 	.word	0x200009d0
 8004f98:	20000994 	.word	0x20000994
 8004f9c:	20000a0c 	.word	0x20000a0c
 8004fa0:	20000a48 	.word	0x20000a48
 8004fa4:	404e0000 	.word	0x404e0000
 8004fa8:	40af4000 	.word	0x40af4000
 8004fac:	00000000 	.word	0x00000000

08004fb0 <Position_P>:

void Position_P(Coordinate* cur, Coordinate* goal)
{
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	int16_t x_error = goal->x - cur->x;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	827b      	strh	r3, [r7, #18]
	int16_t y_error = goal->y - cur->y;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	823b      	strh	r3, [r7, #16]
	if (y_error == 0)
 8004fe6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d126      	bne.n	800503c <Position_P+0x8c>
	{
		if(x_error < 0)
 8004fee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da0b      	bge.n	800500e <Position_P+0x5e>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 8004ff6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fee5 	bl	8004dcc <CalSpeed>
 8005002:	4603      	mov	r3, r0
 8005004:	4619      	mov	r1, r3
 8005006:	4878      	ldr	r0, [pc, #480]	; (80051e8 <Position_P+0x238>)
 8005008:	f7fc ff06 	bl	8001e18 <chao_move_angle>
 800500c:	e08d      	b.n	800512a <Position_P+0x17a>
		}
		else if(x_error > 0)
 800500e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dd0b      	ble.n	800502e <Position_P+0x7e>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 8005016:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fed5 	bl	8004dcc <CalSpeed>
 8005022:	4603      	mov	r3, r0
 8005024:	4619      	mov	r1, r3
 8005026:	4871      	ldr	r0, [pc, #452]	; (80051ec <Position_P+0x23c>)
 8005028:	f7fc fef6 	bl	8001e18 <chao_move_angle>
 800502c:	e07d      	b.n	800512a <Position_P+0x17a>
		}
		else
		{
			chao_move_angle(0, 0);
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f7fc feef 	bl	8001e18 <chao_move_angle>
 800503a:	e076      	b.n	800512a <Position_P+0x17a>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 800503c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fe79 	bl	8000d38 <__aeabi_i2f>
 8005046:	4604      	mov	r4, r0
 8005048:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fe73 	bl	8000d38 <__aeabi_i2f>
 8005052:	4603      	mov	r3, r0
 8005054:	4619      	mov	r1, r3
 8005056:	4620      	mov	r0, r4
 8005058:	f7fb ff76 	bl	8000f48 <__aeabi_fdiv>
 800505c:	4603      	mov	r3, r0
 800505e:	4618      	mov	r0, r3
 8005060:	f7fb fa46 	bl	80004f0 <__aeabi_f2d>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	f006 fa44 	bl	800b4f8 <atan>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	f7fb fd54 	bl	8000b24 <__aeabi_d2f>
 800507c:	4603      	mov	r3, r0
 800507e:	617b      	str	r3, [r7, #20]
		if(y_error < 0)
 8005080:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	da0f      	bge.n	80050a8 <Position_P+0xf8>
		{
			azimuth += M_PI;
 8005088:	6978      	ldr	r0, [r7, #20]
 800508a:	f7fb fa31 	bl	80004f0 <__aeabi_f2d>
 800508e:	a350      	add	r3, pc, #320	; (adr r3, 80051d0 <Position_P+0x220>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f7fb f8ce 	bl	8000234 <__adddf3>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	f7fb fd40 	bl	8000b24 <__aeabi_d2f>
 80050a4:	4603      	mov	r3, r0
 80050a6:	617b      	str	r3, [r7, #20]
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 80050a8:	6978      	ldr	r0, [r7, #20]
 80050aa:	f7fb fa21 	bl	80004f0 <__aeabi_f2d>
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	4b4f      	ldr	r3, [pc, #316]	; (80051f0 <Position_P+0x240>)
 80050b4:	f7fb fa74 	bl	80005a0 <__aeabi_dmul>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	a345      	add	r3, pc, #276	; (adr r3, 80051d8 <Position_P+0x228>)
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	f7fb fb95 	bl	80007f4 <__aeabi_ddiv>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fb fd27 	bl	8000b24 <__aeabi_d2f>
 80050d6:	4603      	mov	r3, r0
 80050d8:	617b      	str	r3, [r7, #20]
		azimuth = Angle_normalization(azimuth);
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f7ff fe4c 	bl	8004d78 <Angle_normalization>
 80050e0:	6178      	str	r0, [r7, #20]
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 80050e2:	4b44      	ldr	r3, [pc, #272]	; (80051f4 <Position_P+0x244>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a44      	ldr	r2, [pc, #272]	; (80051f8 <Position_P+0x248>)
 80050e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fd6d 	bl	8000bcc <__aeabi_fsub>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff fe3f 	bl	8004d78 <Angle_normalization>
 80050fa:	4603      	mov	r3, r0
 80050fc:	4619      	mov	r1, r3
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7fb fd64 	bl	8000bcc <__aeabi_fsub>
 8005104:	4603      	mov	r3, r0
 8005106:	60fb      	str	r3, [r7, #12]
		angle = Angle_normalization(angle);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fe35 	bl	8004d78 <Angle_normalization>
 800510e:	60f8      	str	r0, [r7, #12]
		chao_move_angle(angle, CalSpeed(x_error, y_error));
 8005110:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005114:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fe56 	bl	8004dcc <CalSpeed>
 8005120:	4603      	mov	r3, r0
 8005122:	4619      	mov	r1, r3
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7fc fe77 	bl	8001e18 <chao_move_angle>
	}
	CheckCoord();
 800512a:	f7ff fe8d 	bl	8004e48 <CheckCoord>
	HAL_Delay(10); // delay 10 ms = 100 Hz
 800512e:	200a      	movs	r0, #10
 8005130:	f001 f81c 	bl	800616c <HAL_Delay>
	if(CheckCoord() == 0)
 8005134:	f7ff fe88 	bl	8004e48 <CheckCoord>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d141      	bne.n	80051c2 <Position_P+0x212>
	{
		EstiCoord.x = EstiCoord.x + 0.01 * Get_v_x();
 800513e:	4b2f      	ldr	r3, [pc, #188]	; (80051fc <Position_P+0x24c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb f9d4 	bl	80004f0 <__aeabi_f2d>
 8005148:	4604      	mov	r4, r0
 800514a:	460d      	mov	r5, r1
 800514c:	f7ff fea2 	bl	8004e94 <Get_v_x>
 8005150:	4603      	mov	r3, r0
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb f9cc 	bl	80004f0 <__aeabi_f2d>
 8005158:	a321      	add	r3, pc, #132	; (adr r3, 80051e0 <Position_P+0x230>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb fa1f 	bl	80005a0 <__aeabi_dmul>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	f7fb f863 	bl	8000234 <__adddf3>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	f7fb fcd5 	bl	8000b24 <__aeabi_d2f>
 800517a:	4603      	mov	r3, r0
 800517c:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <Position_P+0x24c>)
 800517e:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + 0.01 * Get_v_y();
 8005180:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <Position_P+0x24c>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb f9b3 	bl	80004f0 <__aeabi_f2d>
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	f7ff fec7 	bl	8004f20 <Get_v_y>
 8005192:	4603      	mov	r3, r0
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb f9ab 	bl	80004f0 <__aeabi_f2d>
 800519a:	a311      	add	r3, pc, #68	; (adr r3, 80051e0 <Position_P+0x230>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb f9fe 	bl	80005a0 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb f842 	bl	8000234 <__adddf3>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fb fcb4 	bl	8000b24 <__aeabi_d2f>
 80051bc:	4603      	mov	r3, r0
 80051be:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <Position_P+0x24c>)
 80051c0:	6053      	str	r3, [r2, #4]
	}
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	f3af 8000 	nop.w
 80051d0:	54442d18 	.word	0x54442d18
 80051d4:	400921fb 	.word	0x400921fb
 80051d8:	54442d18 	.word	0x54442d18
 80051dc:	401921fb 	.word	0x401921fb
 80051e0:	47ae147b 	.word	0x47ae147b
 80051e4:	3f847ae1 	.word	0x3f847ae1
 80051e8:	43870000 	.word	0x43870000
 80051ec:	42b40000 	.word	0x42b40000
 80051f0:	40768000 	.word	0x40768000
 80051f4:	20000bf0 	.word	0x20000bf0
 80051f8:	20000a84 	.word	0x20000a84
 80051fc:	20000be4 	.word	0x20000be4

08005200 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af04      	add	r7, sp, #16
 8005206:	4603      	mov	r3, r0
 8005208:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	2301      	movs	r3, #1
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	1dfb      	adds	r3, r7, #7
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2301      	movs	r3, #1
 800521a:	2200      	movs	r2, #0
 800521c:	2178      	movs	r1, #120	; 0x78
 800521e:	4803      	ldr	r0, [pc, #12]	; (800522c <ssd1306_WriteCommand+0x2c>)
 8005220:	f002 f848 	bl	80072b4 <HAL_I2C_Mem_Write>
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000638 	.word	0x20000638

08005230 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af04      	add	r7, sp, #16
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f04f 32ff 	mov.w	r2, #4294967295
 8005242:	9202      	str	r2, [sp, #8]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2301      	movs	r3, #1
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	2178      	movs	r1, #120	; 0x78
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <ssd1306_WriteData+0x30>)
 8005252:	f002 f82f 	bl	80072b4 <HAL_I2C_Mem_Write>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000638 	.word	0x20000638

08005264 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800526a:	2300      	movs	r3, #0
 800526c:	71fb      	strb	r3, [r7, #7]
 800526e:	e016      	b.n	800529e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	3b50      	subs	r3, #80	; 0x50
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ffc2 	bl	8005200 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800527c:	2000      	movs	r0, #0
 800527e:	f7ff ffbf 	bl	8005200 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005282:	2010      	movs	r0, #16
 8005284:	f7ff ffbc 	bl	8005200 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <ssd1306_UpdateScreen+0x4c>)
 800528e:	4413      	add	r3, r2
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffcc 	bl	8005230 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	3301      	adds	r3, #1
 800529c:	71fb      	strb	r3, [r7, #7]
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d9e5      	bls.n	8005270 <ssd1306_UpdateScreen+0xc>
    }
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20007d9c 	.word	0x20007d9c

080052b4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
 80052be:	460b      	mov	r3, r1
 80052c0:	71bb      	strb	r3, [r7, #6]
 80052c2:	4613      	mov	r3, r2
 80052c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db3d      	blt.n	800534a <ssd1306_DrawPixel+0x96>
 80052ce:	79bb      	ldrb	r3, [r7, #6]
 80052d0:	2b1f      	cmp	r3, #31
 80052d2:	d83a      	bhi.n	800534a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80052d4:	797b      	ldrb	r3, [r7, #5]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d11a      	bne.n	8005310 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80052da:	79fa      	ldrb	r2, [r7, #7]
 80052dc:	79bb      	ldrb	r3, [r7, #6]
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	b2d8      	uxtb	r0, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	01db      	lsls	r3, r3, #7
 80052e6:	4413      	add	r3, r2
 80052e8:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <ssd1306_DrawPixel+0xa0>)
 80052ea:	5cd3      	ldrb	r3, [r2, r3]
 80052ec:	b25a      	sxtb	r2, r3
 80052ee:	79bb      	ldrb	r3, [r7, #6]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f303 	lsl.w	r3, r1, r3
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b259      	sxtb	r1, r3
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	4603      	mov	r3, r0
 8005304:	01db      	lsls	r3, r3, #7
 8005306:	4413      	add	r3, r2
 8005308:	b2c9      	uxtb	r1, r1
 800530a:	4a12      	ldr	r2, [pc, #72]	; (8005354 <ssd1306_DrawPixel+0xa0>)
 800530c:	54d1      	strb	r1, [r2, r3]
 800530e:	e01d      	b.n	800534c <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005310:	79fa      	ldrb	r2, [r7, #7]
 8005312:	79bb      	ldrb	r3, [r7, #6]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	b2d8      	uxtb	r0, r3
 8005318:	4603      	mov	r3, r0
 800531a:	01db      	lsls	r3, r3, #7
 800531c:	4413      	add	r3, r2
 800531e:	4a0d      	ldr	r2, [pc, #52]	; (8005354 <ssd1306_DrawPixel+0xa0>)
 8005320:	5cd3      	ldrb	r3, [r2, r3]
 8005322:	b25a      	sxtb	r2, r3
 8005324:	79bb      	ldrb	r3, [r7, #6]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2101      	movs	r1, #1
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	b25b      	sxtb	r3, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	b25b      	sxtb	r3, r3
 8005336:	4013      	ands	r3, r2
 8005338:	b259      	sxtb	r1, r3
 800533a:	79fa      	ldrb	r2, [r7, #7]
 800533c:	4603      	mov	r3, r0
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	4413      	add	r3, r2
 8005342:	b2c9      	uxtb	r1, r1
 8005344:	4a03      	ldr	r2, [pc, #12]	; (8005354 <ssd1306_DrawPixel+0xa0>)
 8005346:	54d1      	strb	r1, [r2, r3]
 8005348:	e000      	b.n	800534c <ssd1306_DrawPixel+0x98>
        return;
 800534a:	bf00      	nop
    }
}
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	20007d9c 	.word	0x20007d9c

08005358 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	4604      	mov	r4, r0
 8005360:	1d38      	adds	r0, r7, #4
 8005362:	e880 0006 	stmia.w	r0, {r1, r2}
 8005366:	461a      	mov	r2, r3
 8005368:	4623      	mov	r3, r4
 800536a:	73fb      	strb	r3, [r7, #15]
 800536c:	4613      	mov	r3, r2
 800536e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b1f      	cmp	r3, #31
 8005374:	d902      	bls.n	800537c <ssd1306_WriteChar+0x24>
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	2b7e      	cmp	r3, #126	; 0x7e
 800537a:	d901      	bls.n	8005380 <ssd1306_WriteChar+0x28>
        return 0;
 800537c:	2300      	movs	r3, #0
 800537e:	e06d      	b.n	800545c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005380:	4b38      	ldr	r3, [pc, #224]	; (8005464 <ssd1306_WriteChar+0x10c>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	793b      	ldrb	r3, [r7, #4]
 8005388:	4413      	add	r3, r2
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	dc06      	bgt.n	800539c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <ssd1306_WriteChar+0x10c>)
 8005390:	885b      	ldrh	r3, [r3, #2]
 8005392:	461a      	mov	r2, r3
 8005394:	797b      	ldrb	r3, [r7, #5]
 8005396:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005398:	2b20      	cmp	r3, #32
 800539a:	dd01      	ble.n	80053a0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800539c:	2300      	movs	r3, #0
 800539e:	e05d      	b.n	800545c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	e04c      	b.n	8005440 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	3b20      	subs	r3, #32
 80053ac:	7979      	ldrb	r1, [r7, #5]
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	440b      	add	r3, r1
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e034      	b.n	8005430 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d012      	beq.n	80053fc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80053d6:	4b23      	ldr	r3, [pc, #140]	; (8005464 <ssd1306_WriteChar+0x10c>)
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	b2d8      	uxtb	r0, r3
 80053e4:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <ssd1306_WriteChar+0x10c>)
 80053e6:	885b      	ldrh	r3, [r3, #2]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	7bba      	ldrb	r2, [r7, #14]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7ff ff5d 	bl	80052b4 <ssd1306_DrawPixel>
 80053fa:	e016      	b.n	800542a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <ssd1306_WriteChar+0x10c>)
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	4413      	add	r3, r2
 8005408:	b2d8      	uxtb	r0, r3
 800540a:	4b16      	ldr	r3, [pc, #88]	; (8005464 <ssd1306_WriteChar+0x10c>)
 800540c:	885b      	ldrh	r3, [r3, #2]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	4413      	add	r3, r2
 8005416:	b2d9      	uxtb	r1, r3
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	f7ff ff45 	bl	80052b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	3301      	adds	r3, #1
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	793b      	ldrb	r3, [r7, #4]
 8005432:	461a      	mov	r2, r3
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	4293      	cmp	r3, r2
 8005438:	d3c5      	bcc.n	80053c6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3301      	adds	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	797b      	ldrb	r3, [r7, #5]
 8005442:	461a      	mov	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4293      	cmp	r3, r2
 8005448:	d3ad      	bcc.n	80053a6 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <ssd1306_WriteChar+0x10c>)
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	793b      	ldrb	r3, [r7, #4]
 8005450:	b29b      	uxth	r3, r3
 8005452:	4413      	add	r3, r2
 8005454:	b29a      	uxth	r2, r3
 8005456:	4b03      	ldr	r3, [pc, #12]	; (8005464 <ssd1306_WriteChar+0x10c>)
 8005458:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3724      	adds	r7, #36	; 0x24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}
 8005464:	20007f9c 	.word	0x20007f9c

08005468 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	1d38      	adds	r0, r7, #4
 8005472:	e880 0006 	stmia.w	r0, {r1, r2}
 8005476:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8005478:	e012      	b.n	80054a0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	7818      	ldrb	r0, [r3, #0]
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	1d3a      	adds	r2, r7, #4
 8005482:	ca06      	ldmia	r2, {r1, r2}
 8005484:	f7ff ff68 	bl	8005358 <ssd1306_WriteChar>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d002      	beq.n	800549a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	e008      	b.n	80054ac <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e8      	bne.n	800547a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	781b      	ldrb	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <HAL_MspInit+0x5c>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	4a14      	ldr	r2, [pc, #80]	; (8005510 <HAL_MspInit+0x5c>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6193      	str	r3, [r2, #24]
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_MspInit+0x5c>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <HAL_MspInit+0x5c>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <HAL_MspInit+0x5c>)
 80054d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054dc:	61d3      	str	r3, [r2, #28]
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <HAL_MspInit+0x5c>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <HAL_MspInit+0x60>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_MspInit+0x60>)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	40021000 	.word	0x40021000
 8005514:	40010000 	.word	0x40010000

08005518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <HAL_I2C_MspInit+0x90>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d132      	bne.n	800559e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005538:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <HAL_I2C_MspInit+0x94>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	4a1b      	ldr	r2, [pc, #108]	; (80055ac <HAL_I2C_MspInit+0x94>)
 800553e:	f043 0308 	orr.w	r3, r3, #8
 8005542:	6193      	str	r3, [r2, #24]
 8005544:	4b19      	ldr	r3, [pc, #100]	; (80055ac <HAL_I2C_MspInit+0x94>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005550:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005556:	2312      	movs	r3, #18
 8005558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800555a:	2303      	movs	r3, #3
 800555c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800555e:	f107 0314 	add.w	r3, r7, #20
 8005562:	4619      	mov	r1, r3
 8005564:	4812      	ldr	r0, [pc, #72]	; (80055b0 <HAL_I2C_MspInit+0x98>)
 8005566:	f001 fbb5 	bl	8006cd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <HAL_I2C_MspInit+0x9c>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	f043 0302 	orr.w	r3, r3, #2
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <HAL_I2C_MspInit+0x9c>)
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <HAL_I2C_MspInit+0x94>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4a08      	ldr	r2, [pc, #32]	; (80055ac <HAL_I2C_MspInit+0x94>)
 800558c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005590:	61d3      	str	r3, [r2, #28]
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_I2C_MspInit+0x94>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800559e:	bf00      	nop
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40005400 	.word	0x40005400
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010c00 	.word	0x40010c00
 80055b4:	40010000 	.word	0x40010000

080055b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <HAL_TIM_Base_MspInit+0x8c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055ca:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 80055d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055d4:	6193      	str	r3, [r2, #24]
 80055d6:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80055e2:	e02a      	b.n	800563a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_TIM_Base_MspInit+0x94>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d114      	bne.n	8005618 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 80055f4:	f043 0310 	orr.w	r3, r3, #16
 80055f8:	61d3      	str	r3, [r2, #28]
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8005606:	2200      	movs	r2, #0
 8005608:	2101      	movs	r1, #1
 800560a:	2036      	movs	r0, #54	; 0x36
 800560c:	f000 fea9 	bl	8006362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005610:	2036      	movs	r0, #54	; 0x36
 8005612:	f000 fec2 	bl	800639a <HAL_NVIC_EnableIRQ>
}
 8005616:	e010      	b.n	800563a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a0c      	ldr	r2, [pc, #48]	; (8005650 <HAL_TIM_Base_MspInit+0x98>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10b      	bne.n	800563a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 8005628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800562c:	6193      	str	r3, [r2, #24]
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_TIM_Base_MspInit+0x90>)
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
}
 800563a:	bf00      	nop
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40021000 	.word	0x40021000
 800564c:	40001000 	.word	0x40001000
 8005650:	40013400 	.word	0x40013400

08005654 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b090      	sub	sp, #64	; 0x40
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d14f      	bne.n	8005714 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	4a67      	ldr	r2, [pc, #412]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	61d3      	str	r3, [r2, #28]
 8005680:	4b65      	ldr	r3, [pc, #404]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800568c:	4b62      	ldr	r3, [pc, #392]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4a61      	ldr	r2, [pc, #388]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005692:	f043 0304 	orr.w	r3, r3, #4
 8005696:	6193      	str	r3, [r2, #24]
 8005698:	4b5f      	ldr	r3, [pc, #380]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a4:	4b5c      	ldr	r3, [pc, #368]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	4a5b      	ldr	r2, [pc, #364]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056aa:	f043 0308 	orr.w	r3, r3, #8
 80056ae:	6193      	str	r3, [r2, #24]
 80056b0:	4b59      	ldr	r3, [pc, #356]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80056bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056c2:	2300      	movs	r3, #0
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056ce:	4619      	mov	r1, r3
 80056d0:	4852      	ldr	r0, [pc, #328]	; (800581c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80056d2:	f001 faff 	bl	8006cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056d6:	2308      	movs	r3, #8
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056da:	2300      	movs	r3, #0
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056e6:	4619      	mov	r1, r3
 80056e8:	484d      	ldr	r0, [pc, #308]	; (8005820 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80056ea:	f001 faf3 	bl	8006cd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80056ee:	4b4d      	ldr	r3, [pc, #308]	; (8005824 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800570c:	4a45      	ldr	r2, [pc, #276]	; (8005824 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005712:	e07c      	b.n	800580e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a43      	ldr	r2, [pc, #268]	; (8005828 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d124      	bne.n	8005768 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800571e:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	4a3d      	ldr	r2, [pc, #244]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	61d3      	str	r3, [r2, #28]
 800572a:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005736:	4b38      	ldr	r3, [pc, #224]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	4a37      	ldr	r2, [pc, #220]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800573c:	f043 0304 	orr.w	r3, r3, #4
 8005740:	6193      	str	r3, [r2, #24]
 8005742:	4b35      	ldr	r3, [pc, #212]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800574e:	23c0      	movs	r3, #192	; 0xc0
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005752:	2300      	movs	r3, #0
 8005754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800575e:	4619      	mov	r1, r3
 8005760:	482e      	ldr	r0, [pc, #184]	; (800581c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005762:	f001 fab7 	bl	8006cd4 <HAL_GPIO_Init>
}
 8005766:	e052      	b.n	800580e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2f      	ldr	r2, [pc, #188]	; (800582c <HAL_TIM_Encoder_MspInit+0x1d8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d124      	bne.n	80057bc <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005772:	4b29      	ldr	r3, [pc, #164]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4a28      	ldr	r2, [pc, #160]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005778:	f043 0304 	orr.w	r3, r3, #4
 800577c:	61d3      	str	r3, [r2, #28]
 800577e:	4b26      	ldr	r3, [pc, #152]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578a:	4b23      	ldr	r3, [pc, #140]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	4a22      	ldr	r2, [pc, #136]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005790:	f043 0308 	orr.w	r3, r3, #8
 8005794:	6193      	str	r3, [r2, #24]
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057a2:	23c0      	movs	r3, #192	; 0xc0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a6:	2300      	movs	r3, #0
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057b2:	4619      	mov	r1, r3
 80057b4:	481a      	ldr	r0, [pc, #104]	; (8005820 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80057b6:	f001 fa8d 	bl	8006cd4 <HAL_GPIO_Init>
}
 80057ba:	e028      	b.n	800580e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d123      	bne.n	800580e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057cc:	f043 0308 	orr.w	r3, r3, #8
 80057d0:	61d3      	str	r3, [r2, #28]
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057e4:	f043 0304 	orr.w	r3, r3, #4
 80057e8:	6193      	str	r3, [r2, #24]
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057f6:	2303      	movs	r3, #3
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057fa:	2300      	movs	r3, #0
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005806:	4619      	mov	r1, r3
 8005808:	4804      	ldr	r0, [pc, #16]	; (800581c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800580a:	f001 fa63 	bl	8006cd4 <HAL_GPIO_Init>
}
 800580e:	bf00      	nop
 8005810:	3740      	adds	r7, #64	; 0x40
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	40010800 	.word	0x40010800
 8005820:	40010c00 	.word	0x40010c00
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00

08005834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <HAL_TIM_MspPostInit+0x98>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d119      	bne.n	8005888 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_TIM_MspPostInit+0x9c>)
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_TIM_MspPostInit+0x9c>)
 800585a:	f043 0304 	orr.w	r3, r3, #4
 800585e:	6193      	str	r3, [r2, #24]
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_TIM_MspPostInit+0x9c>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800586c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005872:	2302      	movs	r3, #2
 8005874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005876:	2302      	movs	r3, #2
 8005878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587a:	f107 0310 	add.w	r3, r7, #16
 800587e:	4619      	mov	r1, r3
 8005880:	4814      	ldr	r0, [pc, #80]	; (80058d4 <HAL_TIM_MspPostInit+0xa0>)
 8005882:	f001 fa27 	bl	8006cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005886:	e01d      	b.n	80058c4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <HAL_TIM_MspPostInit+0xa4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d118      	bne.n	80058c4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <HAL_TIM_MspPostInit+0x9c>)
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	4a0e      	ldr	r2, [pc, #56]	; (80058d0 <HAL_TIM_MspPostInit+0x9c>)
 8005898:	f043 0310 	orr.w	r3, r3, #16
 800589c:	6193      	str	r3, [r2, #24]
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <HAL_TIM_MspPostInit+0x9c>)
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80058aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80058ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b4:	2302      	movs	r3, #2
 80058b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058b8:	f107 0310 	add.w	r3, r7, #16
 80058bc:	4619      	mov	r1, r3
 80058be:	4807      	ldr	r0, [pc, #28]	; (80058dc <HAL_TIM_MspPostInit+0xa8>)
 80058c0:	f001 fa08 	bl	8006cd4 <HAL_GPIO_Init>
}
 80058c4:	bf00      	nop
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40010800 	.word	0x40010800
 80058d8:	40013400 	.word	0x40013400
 80058dc:	40011000 	.word	0x40011000

080058e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e8:	f107 031c 	add.w	r3, r7, #28
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6e      	ldr	r2, [pc, #440]	; (8005ab4 <HAL_UART_MspInit+0x1d4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d15e      	bne.n	80059be <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005900:	4b6d      	ldr	r3, [pc, #436]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4a6c      	ldr	r2, [pc, #432]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 8005906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590a:	61d3      	str	r3, [r2, #28]
 800590c:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005918:	4b67      	ldr	r3, [pc, #412]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	4a66      	ldr	r2, [pc, #408]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	6193      	str	r3, [r2, #24]
 8005924:	4b64      	ldr	r3, [pc, #400]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8005930:	2304      	movs	r3, #4
 8005932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005934:	2302      	movs	r3, #2
 8005936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005938:	2303      	movs	r3, #3
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 800593c:	f107 031c 	add.w	r3, r7, #28
 8005940:	4619      	mov	r1, r3
 8005942:	485e      	ldr	r0, [pc, #376]	; (8005abc <HAL_UART_MspInit+0x1dc>)
 8005944:	f001 f9c6 	bl	8006cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8005948:	2308      	movs	r3, #8
 800594a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005950:	2300      	movs	r3, #0
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8005954:	f107 031c 	add.w	r3, r7, #28
 8005958:	4619      	mov	r1, r3
 800595a:	4858      	ldr	r0, [pc, #352]	; (8005abc <HAL_UART_MspInit+0x1dc>)
 800595c:	f001 f9ba 	bl	8006cd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005960:	4b57      	ldr	r3, [pc, #348]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 8005962:	4a58      	ldr	r2, [pc, #352]	; (8005ac4 <HAL_UART_MspInit+0x1e4>)
 8005964:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005966:	4b56      	ldr	r3, [pc, #344]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 8005968:	2200      	movs	r2, #0
 800596a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800596c:	4b54      	ldr	r3, [pc, #336]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005972:	4b53      	ldr	r3, [pc, #332]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005978:	4b51      	ldr	r3, [pc, #324]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800597e:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 8005980:	2200      	movs	r2, #0
 8005982:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005984:	4b4e      	ldr	r3, [pc, #312]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 8005986:	2200      	movs	r2, #0
 8005988:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800598a:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 800598c:	2200      	movs	r2, #0
 800598e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005990:	484b      	ldr	r0, [pc, #300]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 8005992:	f000 fd1d 	bl	80063d0 <HAL_DMA_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800599c:	f7fe fe62 	bl	8004664 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a47      	ldr	r2, [pc, #284]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
 80059a6:	4a46      	ldr	r2, [pc, #280]	; (8005ac0 <HAL_UART_MspInit+0x1e0>)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2102      	movs	r1, #2
 80059b0:	2026      	movs	r0, #38	; 0x26
 80059b2:	f000 fcd6 	bl	8006362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059b6:	2026      	movs	r0, #38	; 0x26
 80059b8:	f000 fcef 	bl	800639a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80059bc:	e076      	b.n	8005aac <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a41      	ldr	r2, [pc, #260]	; (8005ac8 <HAL_UART_MspInit+0x1e8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d171      	bne.n	8005aac <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059c8:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	4a3a      	ldr	r2, [pc, #232]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 80059ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059d2:	61d3      	str	r3, [r2, #28]
 80059d4:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e0:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 80059e6:	f043 0310 	orr.w	r3, r3, #16
 80059ea:	6193      	str	r3, [r2, #24]
 80059ec:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_UART_MspInit+0x1d8>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 80059f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fe:	2302      	movs	r3, #2
 8005a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a02:	2303      	movs	r3, #3
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8005a06:	f107 031c 	add.w	r3, r7, #28
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	482f      	ldr	r0, [pc, #188]	; (8005acc <HAL_UART_MspInit+0x1ec>)
 8005a0e:	f001 f961 	bl	8006cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8005a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	4619      	mov	r1, r3
 8005a26:	4829      	ldr	r0, [pc, #164]	; (8005acc <HAL_UART_MspInit+0x1ec>)
 8005a28:	f001 f954 	bl	8006cd4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_UART_MspInit+0x1f0>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	f043 0310 	orr.w	r3, r3, #16
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4a:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <HAL_UART_MspInit+0x1f0>)
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005a50:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a52:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_UART_MspInit+0x1f8>)
 8005a54:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a56:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a68:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005a74:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a80:	4814      	ldr	r0, [pc, #80]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a82:	f000 fca5 	bl	80063d0 <HAL_DMA_Init>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8005a8c:	f7fe fdea 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
 8005a96:	4a0f      	ldr	r2, [pc, #60]	; (8005ad4 <HAL_UART_MspInit+0x1f4>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	2027      	movs	r0, #39	; 0x27
 8005aa2:	f000 fc5e 	bl	8006362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005aa6:	2027      	movs	r0, #39	; 0x27
 8005aa8:	f000 fc77 	bl	800639a <HAL_NVIC_EnableIRQ>
}
 8005aac:	bf00      	nop
 8005aae:	3730      	adds	r7, #48	; 0x30
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40004400 	.word	0x40004400
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40010800 	.word	0x40010800
 8005ac0:	2000090c 	.word	0x2000090c
 8005ac4:	4002006c 	.word	0x4002006c
 8005ac8:	40004800 	.word	0x40004800
 8005acc:	40011000 	.word	0x40011000
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	20000950 	.word	0x20000950
 8005ad8:	40020030 	.word	0x40020030

08005adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005ae0:	e7fe      	b.n	8005ae0 <NMI_Handler+0x4>

08005ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ae6:	e7fe      	b.n	8005ae6 <HardFault_Handler+0x4>

08005ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005aec:	e7fe      	b.n	8005aec <MemManage_Handler+0x4>

08005aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aee:	b480      	push	{r7}
 8005af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005af2:	e7fe      	b.n	8005af2 <BusFault_Handler+0x4>

08005af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005af8:	e7fe      	b.n	8005af8 <UsageFault_Handler+0x4>

08005afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005afa:	b480      	push	{r7}
 8005afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b22:	f000 fb07 	bl	8006134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <DMA1_Channel3_IRQHandler+0x10>)
 8005b32:	f000 fe65 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000950 	.word	0x20000950

08005b40 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <DMA1_Channel6_IRQHandler+0x10>)
 8005b46:	f000 fe5b 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000090c 	.word	0x2000090c

08005b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b58:	4802      	ldr	r0, [pc, #8]	; (8005b64 <USART2_IRQHandler+0x10>)
 8005b5a:	f003 fd75 	bl	8009648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000884 	.word	0x20000884

08005b68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b6c:	4802      	ldr	r0, [pc, #8]	; (8005b78 <USART3_IRQHandler+0x10>)
 8005b6e:	f003 fd6b 	bl	8009648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	200008c8 	.word	0x200008c8

08005b7c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8005b80:	4808      	ldr	r0, [pc, #32]	; (8005ba4 <TIM6_IRQHandler+0x28>)
 8005b82:	f7fc fec3 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8005b86:	4808      	ldr	r0, [pc, #32]	; (8005ba8 <TIM6_IRQHandler+0x2c>)
 8005b88:	f7fc fec0 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8005b8c:	4807      	ldr	r0, [pc, #28]	; (8005bac <TIM6_IRQHandler+0x30>)
 8005b8e:	f7fc febd 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8005b92:	4807      	ldr	r0, [pc, #28]	; (8005bb0 <TIM6_IRQHandler+0x34>)
 8005b94:	f7fc feba 	bl	800290c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005b98:	4806      	ldr	r0, [pc, #24]	; (8005bb4 <TIM6_IRQHandler+0x38>)
 8005b9a:	f002 fdaf 	bl	80086fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000994 	.word	0x20000994
 8005ba8:	200009d0 	.word	0x200009d0
 8005bac:	20000a0c 	.word	0x20000a0c
 8005bb0:	20000a48 	.word	0x20000a48
 8005bb4:	200007f4 	.word	0x200007f4

08005bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
	return 1;
 8005bbc:	2301      	movs	r3, #1
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <_kill>:

int _kill(int pid, int sig)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005bd0:	f004 faaa 	bl	800a128 <__errno>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2216      	movs	r2, #22
 8005bd8:	601a      	str	r2, [r3, #0]
	return -1;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <_exit>:

void _exit (int status)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005bee:	f04f 31ff 	mov.w	r1, #4294967295
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ffe7 	bl	8005bc6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005bf8:	e7fe      	b.n	8005bf8 <_exit+0x12>

08005bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e00a      	b.n	8005c22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c0c:	f3af 8000 	nop.w
 8005c10:	4601      	mov	r1, r0
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	60ba      	str	r2, [r7, #8]
 8005c18:	b2ca      	uxtb	r2, r1
 8005c1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	dbf0      	blt.n	8005c0c <_read+0x12>
	}

return len;
 8005c2a:	687b      	ldr	r3, [r7, #4]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e009      	b.n	8005c5a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	60ba      	str	r2, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3301      	adds	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	dbf1      	blt.n	8005c46 <_write+0x12>
	}
	return len;
 8005c62:	687b      	ldr	r3, [r7, #4]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <_close>:

int _close(int file)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	return -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c92:	605a      	str	r2, [r3, #4]
	return 0;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <_isatty>:

int _isatty(int file)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	return 1;
 8005ca8:	2301      	movs	r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cd4:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <_sbrk+0x5c>)
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <_sbrk+0x60>)
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ce0:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <_sbrk+0x64>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ce8:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <_sbrk+0x64>)
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <_sbrk+0x68>)
 8005cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <_sbrk+0x64>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d207      	bcs.n	8005d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cfc:	f004 fa14 	bl	800a128 <__errno>
 8005d00:	4603      	mov	r3, r0
 8005d02:	220c      	movs	r2, #12
 8005d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	e009      	b.n	8005d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <_sbrk+0x64>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d12:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <_sbrk+0x64>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <_sbrk+0x64>)
 8005d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	2000c000 	.word	0x2000c000
 8005d2c:	00000400 	.word	0x00000400
 8005d30:	20007fa4 	.word	0x20007fa4
 8005d34:	20007fc0 	.word	0x20007fc0

08005d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <go_Charge>:
extern Order *delivering[5];
extern uint8_t delivering_num;
extern XB_HandleTypeDef hxb;

void go_Charge(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
	Coordinate Beacon;
	Beacon = Get_nearest_Beacon();
 8005d4a:	f000 f933 	bl	8005fb4 <Get_nearest_Beacon>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	607b      	str	r3, [r7, #4]
	GotoDestination(Beacon,1);
 8005d52:	2101      	movs	r1, #1
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fe ff19 	bl	8004b8c <GotoDestination>
}
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <set_Beacons>:

void set_Beacons(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i < 3; i++){
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	71fb      	strb	r3, [r7, #7]
 8005d6e:	e00e      	b.n	8005d8e <set_Beacons+0x2a>
		GotoDestination(want_allyBeacons[i], 1);
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <set_Beacons+0x3c>)
 8005d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe ff05 	bl	8004b8c <GotoDestination>
		huansic_xb_setBeacon(&hxb);
 8005d82:	4808      	ldr	r0, [pc, #32]	; (8005da4 <set_Beacons+0x40>)
 8005d84:	f7fd fc5a 	bl	800363c <huansic_xb_setBeacon>
	for(i = 0;i < 3; i++){
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	71fb      	strb	r3, [r7, #7]
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d9ed      	bls.n	8005d70 <set_Beacons+0xc>
	}
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000bbc 	.word	0x20000bbc
 8005da4:	20000adc 	.word	0x20000adc

08005da8 <Cal_Battery_Coord>:

void Cal_Battery_Coord(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	71fb      	strb	r3, [r7, #7]
	if(Find_crash(32552, 2))
 8005db2:	2102      	movs	r1, #2
 8005db4:	f647 7028 	movw	r0, #32552	; 0x7f28
 8005db8:	f7fb fa1e 	bl	80011f8 <Find_crash>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00d      	beq.n	8005dde <Cal_Battery_Coord+0x36>
	{
		//set a signal
		want_allyBeacons[seted].x = 127;
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	4a42      	ldr	r2, [pc, #264]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005dc6:	217f      	movs	r1, #127	; 0x7f
 8005dc8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 40;
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	4a40      	ldr	r2, [pc, #256]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	2228      	movs	r2, #40	; 0x28
 8005dd6:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(32726, 2))
 8005dde:	2102      	movs	r1, #2
 8005de0:	f647 70d6 	movw	r0, #32726	; 0x7fd6
 8005de4:	f7fb fa08 	bl	80011f8 <Find_crash>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <Cal_Battery_Coord+0x62>
	{
		//set a signal
		want_allyBeacons[seted].x = 127;
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	4a37      	ldr	r2, [pc, #220]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005df2:	217f      	movs	r1, #127	; 0x7f
 8005df4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 214;
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	4a35      	ldr	r2, [pc, #212]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	22d6      	movs	r2, #214	; 0xd6
 8005e02:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	3301      	adds	r3, #1
 8005e08:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(10367, 2))
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	f642 007f 	movw	r0, #10367	; 0x287f
 8005e10:	f7fb f9f2 	bl	80011f8 <Find_crash>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00d      	beq.n	8005e36 <Cal_Battery_Coord+0x8e>
	{
		//set a signal
		want_allyBeacons[seted].x = 40;
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005e1e:	2128      	movs	r1, #40	; 0x28
 8005e20:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 127;
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	227f      	movs	r2, #127	; 0x7f
 8005e2e:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	3301      	adds	r3, #1
 8005e34:	71fb      	strb	r3, [r7, #7]
	}
	if(seted != 3)
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d015      	beq.n	8005e68 <Cal_Battery_Coord+0xc0>
	{
		if(Find_crash(54911, 2))
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	f24d 607f 	movw	r0, #54911	; 0xd67f
 8005e42:	f7fb f9d9 	bl	80011f8 <Find_crash>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <Cal_Battery_Coord+0xc0>
		{
			//set a signal
			want_allyBeacons[seted].x = 214;
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005e50:	21d6      	movs	r1, #214	; 0xd6
 8005e52:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			want_allyBeacons[seted].y = 127;
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	227f      	movs	r2, #127	; 0x7f
 8005e60:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	3301      	adds	r3, #1
 8005e66:	71fb      	strb	r3, [r7, #7]
		}
	}
	uint8_t x_i = 127;
 8005e68:	237f      	movs	r3, #127	; 0x7f
 8005e6a:	71bb      	strb	r3, [r7, #6]
	uint8_t y_i = 127;
 8005e6c:	237f      	movs	r3, #127	; 0x7f
 8005e6e:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005e70:	e026      	b.n	8005ec0 <Cal_Battery_Coord+0x118>
	{
		if(Find_crash(x_i * 256 + y_i, 2))
 8005e72:	79bb      	ldrb	r3, [r7, #6]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	797b      	ldrb	r3, [r7, #5]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2102      	movs	r1, #2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fb f9b7 	bl	80011f8 <Find_crash>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d011      	beq.n	8005eb4 <Cal_Battery_Coord+0x10c>
		{
			want_allyBeacons[seted].x = x_i;
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	79ba      	ldrb	r2, [r7, #6]
 8005e94:	b211      	sxth	r1, r2
 8005e96:	4a0e      	ldr	r2, [pc, #56]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005e98:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			want_allyBeacons[seted].y = y_i;
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	797a      	ldrb	r2, [r7, #5]
 8005ea0:	b211      	sxth	r1, r2
 8005ea2:	4a0b      	ldr	r2, [pc, #44]	; (8005ed0 <Cal_Battery_Coord+0x128>)
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	460a      	mov	r2, r1
 8005eaa:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	71fb      	strb	r3, [r7, #7]
 8005eb2:	e005      	b.n	8005ec0 <Cal_Battery_Coord+0x118>
		}
		else
		{
			x_i -= 5;
 8005eb4:	79bb      	ldrb	r3, [r7, #6]
 8005eb6:	3b05      	subs	r3, #5
 8005eb8:	71bb      	strb	r3, [r7, #6]
			y_i -= 5;
 8005eba:	797b      	ldrb	r3, [r7, #5]
 8005ebc:	3b05      	subs	r3, #5
 8005ebe:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d1d5      	bne.n	8005e72 <Cal_Battery_Coord+0xca>
		}
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000bbc 	.word	0x20000bbc

08005ed4 <Get_packet>:

void Get_packet(Coordinate merchant)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	GotoDestination(merchant,1);
 8005edc:	2101      	movs	r1, #1
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fe fe54 	bl	8004b8c <GotoDestination>
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <Send_packet>:

void Send_packet(Coordinate consumer)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	GotoDestination(consumer,1);
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fe fe48 	bl	8004b8c <GotoDestination>
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <Get_nearest_consumer>:

Coordinate Get_nearest_consumer(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f0e:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	733b      	strb	r3, [r7, #12]
 8005f18:	e02d      	b.n	8005f76 <Get_nearest_consumer+0x72>
	{
		distance = abs(myCoord.x - delivering[i]->destCoord.x) + abs(myCoord.y - delivering[i]->destCoord.y);
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <Get_nearest_consumer+0xa4>)
 8005f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f20:	4619      	mov	r1, r3
 8005f22:	7b3b      	ldrb	r3, [r7, #12]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <Get_nearest_consumer+0xa8>)
 8005f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f2e:	1acb      	subs	r3, r1, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bfb8      	it	lt
 8005f34:	425b      	neglt	r3, r3
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <Get_nearest_consumer+0xa4>)
 8005f3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	7b3b      	ldrb	r3, [r7, #12]
 8005f42:	491a      	ldr	r1, [pc, #104]	; (8005fac <Get_nearest_consumer+0xa8>)
 8005f44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005f4c:	1ac3      	subs	r3, r0, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bfb8      	it	lt
 8005f52:	425b      	neglt	r3, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8005f5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005f60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	da03      	bge.n	8005f70 <Get_nearest_consumer+0x6c>
			mindis = distance;
 8005f68:	897b      	ldrh	r3, [r7, #10]
 8005f6a:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8005f6c:	7b3b      	ldrb	r3, [r7, #12]
 8005f6e:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 8005f70:	7b3b      	ldrb	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	733b      	strb	r3, [r7, #12]
 8005f76:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <Get_nearest_consumer+0xac>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	7b3a      	ldrb	r2, [r7, #12]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d3cc      	bcc.n	8005f1a <Get_nearest_consumer+0x16>
		}
	}
	Coordinate nearest = delivering[minindex]->destCoord;
 8005f80:	7b7b      	ldrb	r3, [r7, #13]
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <Get_nearest_consumer+0xa8>)
 8005f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	603b      	str	r3, [r7, #0]
	return nearest;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	2300      	movs	r3, #0
 8005f92:	88ba      	ldrh	r2, [r7, #4]
 8005f94:	f362 030f 	bfi	r3, r2, #0, #16
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	f362 431f 	bfi	r3, r2, #16, #16

}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	20000be0 	.word	0x20000be0
 8005fac:	20000bc8 	.word	0x20000bc8
 8005fb0:	20000bdc 	.word	0x20000bdc

08005fb4 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fbe:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	733b      	strb	r3, [r7, #12]
 8005fc8:	e02b      	b.n	8006022 <Get_nearest_Beacon+0x6e>
	{

		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 8005fca:	4b22      	ldr	r3, [pc, #136]	; (8006054 <Get_nearest_Beacon+0xa0>)
 8005fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	7b3b      	ldrb	r3, [r7, #12]
 8005fd4:	4a20      	ldr	r2, [pc, #128]	; (8006058 <Get_nearest_Beacon+0xa4>)
 8005fd6:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8005fda:	1acb      	subs	r3, r1, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bfb8      	it	lt
 8005fe0:	425b      	neglt	r3, r3
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <Get_nearest_Beacon+0xa0>)
 8005fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fea:	4618      	mov	r0, r3
 8005fec:	7b3b      	ldrb	r3, [r7, #12]
 8005fee:	491a      	ldr	r1, [pc, #104]	; (8006058 <Get_nearest_Beacon+0xa4>)
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ff8:	1ac3      	subs	r3, r0, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfb8      	it	lt
 8005ffe:	425b      	neglt	r3, r3
 8006000:	b29b      	uxth	r3, r3
 8006002:	4413      	add	r3, r2
 8006004:	b29b      	uxth	r3, r3
 8006006:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8006008:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800600c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006010:	429a      	cmp	r2, r3
 8006012:	da03      	bge.n	800601c <Get_nearest_Beacon+0x68>
			mindis = distance;
 8006014:	897b      	ldrh	r3, [r7, #10]
 8006016:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8006018:	7b3b      	ldrb	r3, [r7, #12]
 800601a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 800601c:	7b3b      	ldrb	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	733b      	strb	r3, [r7, #12]
 8006022:	7b3b      	ldrb	r3, [r7, #12]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d9d0      	bls.n	8005fca <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 8006028:	7b7b      	ldrb	r3, [r7, #13]
 800602a:	490b      	ldr	r1, [pc, #44]	; (8006058 <Get_nearest_Beacon+0xa4>)
 800602c:	463a      	mov	r2, r7
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	6010      	str	r0, [r2, #0]
	return nearest;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	607b      	str	r3, [r7, #4]
 800603a:	2300      	movs	r3, #0
 800603c:	88ba      	ldrh	r2, [r7, #4]
 800603e:	f362 030f 	bfi	r3, r2, #0, #16
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000be0 	.word	0x20000be0
 8006058:	20000ba4 	.word	0x20000ba4

0800605c <Reset_Handler>:
 800605c:	480c      	ldr	r0, [pc, #48]	; (8006090 <LoopFillZerobss+0x12>)
 800605e:	490d      	ldr	r1, [pc, #52]	; (8006094 <LoopFillZerobss+0x16>)
 8006060:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <LoopFillZerobss+0x1a>)
 8006062:	2300      	movs	r3, #0
 8006064:	e002      	b.n	800606c <LoopCopyDataInit>

08006066 <CopyDataInit>:
 8006066:	58d4      	ldr	r4, [r2, r3]
 8006068:	50c4      	str	r4, [r0, r3]
 800606a:	3304      	adds	r3, #4

0800606c <LoopCopyDataInit>:
 800606c:	18c4      	adds	r4, r0, r3
 800606e:	428c      	cmp	r4, r1
 8006070:	d3f9      	bcc.n	8006066 <CopyDataInit>
 8006072:	4a0a      	ldr	r2, [pc, #40]	; (800609c <LoopFillZerobss+0x1e>)
 8006074:	4c0a      	ldr	r4, [pc, #40]	; (80060a0 <LoopFillZerobss+0x22>)
 8006076:	2300      	movs	r3, #0
 8006078:	e001      	b.n	800607e <LoopFillZerobss>

0800607a <FillZerobss>:
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	3204      	adds	r2, #4

0800607e <LoopFillZerobss>:
 800607e:	42a2      	cmp	r2, r4
 8006080:	d3fb      	bcc.n	800607a <FillZerobss>
 8006082:	f7ff fe59 	bl	8005d38 <SystemInit>
 8006086:	f004 f867 	bl	800a158 <__libc_init_array>
 800608a:	f7fd fb6f 	bl	800376c <main>
 800608e:	4770      	bx	lr
 8006090:	20000000 	.word	0x20000000
 8006094:	2000007c 	.word	0x2000007c
 8006098:	0800d270 	.word	0x0800d270
 800609c:	2000007c 	.word	0x2000007c
 80060a0:	20007fbc 	.word	0x20007fbc

080060a4 <ADC1_2_IRQHandler>:
 80060a4:	e7fe      	b.n	80060a4 <ADC1_2_IRQHandler>
	...

080060a8 <HAL_Init>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <HAL_Init+0x28>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a07      	ldr	r2, [pc, #28]	; (80060d0 <HAL_Init+0x28>)
 80060b2:	f043 0310 	orr.w	r3, r3, #16
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	2003      	movs	r0, #3
 80060ba:	f000 f947 	bl	800634c <HAL_NVIC_SetPriorityGrouping>
 80060be:	200f      	movs	r0, #15
 80060c0:	f000 f808 	bl	80060d4 <HAL_InitTick>
 80060c4:	f7ff f9f6 	bl	80054b4 <HAL_MspInit>
 80060c8:	2300      	movs	r3, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40022000 	.word	0x40022000

080060d4 <HAL_InitTick>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <HAL_InitTick+0x54>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_InitTick+0x58>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f95f 	bl	80063b6 <HAL_SYSTICK_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_InitTick+0x2e>
 80060fe:	2301      	movs	r3, #1
 8006100:	e00e      	b.n	8006120 <HAL_InitTick+0x4c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b0f      	cmp	r3, #15
 8006106:	d80a      	bhi.n	800611e <HAL_InitTick+0x4a>
 8006108:	2200      	movs	r2, #0
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	f000 f927 	bl	8006362 <HAL_NVIC_SetPriority>
 8006114:	4a06      	ldr	r2, [pc, #24]	; (8006130 <HAL_InitTick+0x5c>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	e000      	b.n	8006120 <HAL_InitTick+0x4c>
 800611e:	2301      	movs	r3, #1
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	2000000c 	.word	0x2000000c
 800612c:	20000014 	.word	0x20000014
 8006130:	20000010 	.word	0x20000010

08006134 <HAL_IncTick>:
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <HAL_IncTick+0x1c>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_IncTick+0x20>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4413      	add	r3, r2
 8006144:	4a03      	ldr	r2, [pc, #12]	; (8006154 <HAL_IncTick+0x20>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	bf00      	nop
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	20000014 	.word	0x20000014
 8006154:	20007fa8 	.word	0x20007fa8

08006158 <HAL_GetTick>:
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <HAL_GetTick+0x10>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	20007fa8 	.word	0x20007fa8

0800616c <HAL_Delay>:
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	f7ff fff0 	bl	8006158 <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d005      	beq.n	8006192 <HAL_Delay+0x26>
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <HAL_Delay+0x44>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	bf00      	nop
 8006194:	f7ff ffe0 	bl	8006158 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d8f7      	bhi.n	8006194 <HAL_Delay+0x28>
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000014 	.word	0x20000014

080061b4 <__NVIC_SetPriorityGrouping>:
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <__NVIC_SetPriorityGrouping+0x44>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061d0:	4013      	ands	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
 80061dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <__NVIC_SetPriorityGrouping+0x44>)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	60d3      	str	r3, [r2, #12]
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	e000ed00 	.word	0xe000ed00

080061fc <__NVIC_GetPriorityGrouping>:
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <__NVIC_GetPriorityGrouping+0x18>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	4618      	mov	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e000ed00 	.word	0xe000ed00

08006218 <__NVIC_EnableIRQ>:
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
 8006222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006226:	2b00      	cmp	r3, #0
 8006228:	db0b      	blt.n	8006242 <__NVIC_EnableIRQ+0x2a>
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	f003 021f 	and.w	r2, r3, #31
 8006230:	4906      	ldr	r1, [pc, #24]	; (800624c <__NVIC_EnableIRQ+0x34>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2001      	movs	r0, #1
 800623a:	fa00 f202 	lsl.w	r2, r0, r2
 800623e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	e000e100 	.word	0xe000e100

08006250 <__NVIC_SetPriority>:
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	71fb      	strb	r3, [r7, #7]
 800625c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006260:	2b00      	cmp	r3, #0
 8006262:	db0a      	blt.n	800627a <__NVIC_SetPriority+0x2a>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	490c      	ldr	r1, [pc, #48]	; (800629c <__NVIC_SetPriority+0x4c>)
 800626a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626e:	0112      	lsls	r2, r2, #4
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	440b      	add	r3, r1
 8006274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006278:	e00a      	b.n	8006290 <__NVIC_SetPriority+0x40>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	4908      	ldr	r1, [pc, #32]	; (80062a0 <__NVIC_SetPriority+0x50>)
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	3b04      	subs	r3, #4
 8006288:	0112      	lsls	r2, r2, #4
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	440b      	add	r3, r1
 800628e:	761a      	strb	r2, [r3, #24]
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	e000e100 	.word	0xe000e100
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <NVIC_EncodePriority>:
 80062a4:	b480      	push	{r7}
 80062a6:	b089      	sub	sp, #36	; 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f1c3 0307 	rsb	r3, r3, #7
 80062be:	2b04      	cmp	r3, #4
 80062c0:	bf28      	it	cs
 80062c2:	2304      	movcs	r3, #4
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	3304      	adds	r3, #4
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d902      	bls.n	80062d4 <NVIC_EncodePriority+0x30>
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3b03      	subs	r3, #3
 80062d2:	e000      	b.n	80062d6 <NVIC_EncodePriority+0x32>
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43da      	mvns	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	401a      	ands	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	409a      	lsls	r2, r3
 80062ec:	f04f 31ff 	mov.w	r1, #4294967295
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	43d9      	mvns	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	400b      	ands	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	3724      	adds	r7, #36	; 0x24
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <SysTick_Config>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006318:	d301      	bcc.n	800631e <SysTick_Config+0x16>
 800631a:	2301      	movs	r3, #1
 800631c:	e00f      	b.n	800633e <SysTick_Config+0x36>
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <SysTick_Config+0x40>)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3b01      	subs	r3, #1
 8006324:	6053      	str	r3, [r2, #4]
 8006326:	210f      	movs	r1, #15
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	f7ff ff90 	bl	8006250 <__NVIC_SetPriority>
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <SysTick_Config+0x40>)
 8006332:	2200      	movs	r2, #0
 8006334:	609a      	str	r2, [r3, #8]
 8006336:	4b04      	ldr	r3, [pc, #16]	; (8006348 <SysTick_Config+0x40>)
 8006338:	2207      	movs	r2, #7
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	e000e010 	.word	0xe000e010

0800634c <HAL_NVIC_SetPriorityGrouping>:
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ff2d 	bl	80061b4 <__NVIC_SetPriorityGrouping>
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_NVIC_SetPriority>:
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af00      	add	r7, sp, #0
 8006368:	4603      	mov	r3, r0
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	f7ff ff42 	bl	80061fc <__NVIC_GetPriorityGrouping>
 8006378:	6178      	str	r0, [r7, #20]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	6978      	ldr	r0, [r7, #20]
 8006380:	f7ff ff90 	bl	80062a4 <NVIC_EncodePriority>
 8006384:	4602      	mov	r2, r0
 8006386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff ff5f 	bl	8006250 <__NVIC_SetPriority>
 8006392:	bf00      	nop
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_NVIC_EnableIRQ>:
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	4603      	mov	r3, r0
 80063a2:	71fb      	strb	r3, [r7, #7]
 80063a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff ff35 	bl	8006218 <__NVIC_EnableIRQ>
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_SYSTICK_Config>:
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ffa2 	bl	8006308 <SysTick_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_DMA_Init>:
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_DMA_Init+0x16>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e059      	b.n	800649a <HAL_DMA_Init+0xca>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <HAL_DMA_Init+0xd4>)
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d80f      	bhi.n	8006412 <HAL_DMA_Init+0x42>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <HAL_DMA_Init+0xd8>)
 80063fa:	4413      	add	r3, r2
 80063fc:	4a2b      	ldr	r2, [pc, #172]	; (80064ac <HAL_DMA_Init+0xdc>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	009a      	lsls	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <HAL_DMA_Init+0xe0>)
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006410:	e00e      	b.n	8006430 <HAL_DMA_Init+0x60>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <HAL_DMA_Init+0xe4>)
 800641a:	4413      	add	r3, r2
 800641c:	4a23      	ldr	r2, [pc, #140]	; (80064ac <HAL_DMA_Init+0xdc>)
 800641e:	fba2 2303 	umull	r2, r3, r2, r3
 8006422:	091b      	lsrs	r3, r3, #4
 8006424:	009a      	lsls	r2, r3, #2
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <HAL_DMA_Init+0xe8>)
 800642e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006446:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	4313      	orrs	r3, r2
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	639a      	str	r2, [r3, #56]	; 0x38
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2020 	strb.w	r2, [r3, #32]
 8006498:	2300      	movs	r3, #0
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr
 80064a4:	40020407 	.word	0x40020407
 80064a8:	bffdfff8 	.word	0xbffdfff8
 80064ac:	cccccccd 	.word	0xcccccccd
 80064b0:	40020000 	.word	0x40020000
 80064b4:	bffdfbf8 	.word	0xbffdfbf8
 80064b8:	40020400 	.word	0x40020400

080064bc <HAL_DMA_Start_IT>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_DMA_Start_IT+0x20>
 80064d8:	2302      	movs	r3, #2
 80064da:	e04a      	b.n	8006572 <HAL_DMA_Start_IT+0xb6>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2020 	strb.w	r2, [r3, #32]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d13a      	bne.n	8006564 <HAL_DMA_Start_IT+0xa8>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fbb0 	bl	8006c78 <DMA_SetConfig>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_DMA_Start_IT+0x76>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 020e 	orr.w	r2, r2, #14
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e00f      	b.n	8006552 <HAL_DMA_Start_IT+0x96>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0204 	bic.w	r2, r2, #4
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 020a 	orr.w	r2, r2, #10
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e005      	b.n	8006570 <HAL_DMA_Start_IT+0xb4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2020 	strb.w	r2, [r3, #32]
 800656c:	2302      	movs	r3, #2
 800656e:	75fb      	strb	r3, [r7, #23]
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_DMA_Abort>:
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800658c:	2b02      	cmp	r3, #2
 800658e:	d008      	beq.n	80065a2 <HAL_DMA_Abort+0x28>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2204      	movs	r2, #4
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2020 	strb.w	r2, [r3, #32]
 800659e:	2301      	movs	r3, #1
 80065a0:	e020      	b.n	80065e4 <HAL_DMA_Abort+0x6a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 020e 	bic.w	r2, r2, #14
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	2101      	movs	r1, #1
 80065cc:	fa01 f202 	lsl.w	r2, r1, r2
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2020 	strb.w	r2, [r3, #32]
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_DMA_Abort_IT>:
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006602:	2b02      	cmp	r3, #2
 8006604:	d005      	beq.n	8006612 <HAL_DMA_Abort_IT+0x22>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2204      	movs	r2, #4
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
 8006610:	e0d6      	b.n	80067c0 <HAL_DMA_Abort_IT+0x1d0>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 020e 	bic.w	r2, r2, #14
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	4b64      	ldr	r3, [pc, #400]	; (80067cc <HAL_DMA_Abort_IT+0x1dc>)
 800663a:	429a      	cmp	r2, r3
 800663c:	d958      	bls.n	80066f0 <HAL_DMA_Abort_IT+0x100>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a63      	ldr	r2, [pc, #396]	; (80067d0 <HAL_DMA_Abort_IT+0x1e0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d04f      	beq.n	80066e8 <HAL_DMA_Abort_IT+0xf8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a61      	ldr	r2, [pc, #388]	; (80067d4 <HAL_DMA_Abort_IT+0x1e4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d048      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xf4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a60      	ldr	r2, [pc, #384]	; (80067d8 <HAL_DMA_Abort_IT+0x1e8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d040      	beq.n	80066de <HAL_DMA_Abort_IT+0xee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5e      	ldr	r2, [pc, #376]	; (80067dc <HAL_DMA_Abort_IT+0x1ec>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d038      	beq.n	80066d8 <HAL_DMA_Abort_IT+0xe8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5d      	ldr	r2, [pc, #372]	; (80067e0 <HAL_DMA_Abort_IT+0x1f0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d030      	beq.n	80066d2 <HAL_DMA_Abort_IT+0xe2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5b      	ldr	r2, [pc, #364]	; (80067e4 <HAL_DMA_Abort_IT+0x1f4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d028      	beq.n	80066cc <HAL_DMA_Abort_IT+0xdc>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a53      	ldr	r2, [pc, #332]	; (80067cc <HAL_DMA_Abort_IT+0x1dc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d020      	beq.n	80066c6 <HAL_DMA_Abort_IT+0xd6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a57      	ldr	r2, [pc, #348]	; (80067e8 <HAL_DMA_Abort_IT+0x1f8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d019      	beq.n	80066c2 <HAL_DMA_Abort_IT+0xd2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a56      	ldr	r2, [pc, #344]	; (80067ec <HAL_DMA_Abort_IT+0x1fc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d012      	beq.n	80066be <HAL_DMA_Abort_IT+0xce>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a54      	ldr	r2, [pc, #336]	; (80067f0 <HAL_DMA_Abort_IT+0x200>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00a      	beq.n	80066b8 <HAL_DMA_Abort_IT+0xc8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a53      	ldr	r2, [pc, #332]	; (80067f4 <HAL_DMA_Abort_IT+0x204>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d102      	bne.n	80066b2 <HAL_DMA_Abort_IT+0xc2>
 80066ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b0:	e01b      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066b6:	e018      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066bc:	e015      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066be:	2310      	movs	r3, #16
 80066c0:	e013      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e011      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066ca:	e00e      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80066d0:	e00b      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066d6:	e008      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066dc:	e005      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e2:	e002      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066e4:	2310      	movs	r3, #16
 80066e6:	e000      	b.n	80066ea <HAL_DMA_Abort_IT+0xfa>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4a43      	ldr	r2, [pc, #268]	; (80067f8 <HAL_DMA_Abort_IT+0x208>)
 80066ec:	6053      	str	r3, [r2, #4]
 80066ee:	e057      	b.n	80067a0 <HAL_DMA_Abort_IT+0x1b0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a36      	ldr	r2, [pc, #216]	; (80067d0 <HAL_DMA_Abort_IT+0x1e0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d04f      	beq.n	800679a <HAL_DMA_Abort_IT+0x1aa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a35      	ldr	r2, [pc, #212]	; (80067d4 <HAL_DMA_Abort_IT+0x1e4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d048      	beq.n	8006796 <HAL_DMA_Abort_IT+0x1a6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a33      	ldr	r2, [pc, #204]	; (80067d8 <HAL_DMA_Abort_IT+0x1e8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d040      	beq.n	8006790 <HAL_DMA_Abort_IT+0x1a0>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a32      	ldr	r2, [pc, #200]	; (80067dc <HAL_DMA_Abort_IT+0x1ec>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d038      	beq.n	800678a <HAL_DMA_Abort_IT+0x19a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a30      	ldr	r2, [pc, #192]	; (80067e0 <HAL_DMA_Abort_IT+0x1f0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d030      	beq.n	8006784 <HAL_DMA_Abort_IT+0x194>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <HAL_DMA_Abort_IT+0x1f4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d028      	beq.n	800677e <HAL_DMA_Abort_IT+0x18e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_DMA_Abort_IT+0x1dc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d020      	beq.n	8006778 <HAL_DMA_Abort_IT+0x188>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2b      	ldr	r2, [pc, #172]	; (80067e8 <HAL_DMA_Abort_IT+0x1f8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d019      	beq.n	8006774 <HAL_DMA_Abort_IT+0x184>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a29      	ldr	r2, [pc, #164]	; (80067ec <HAL_DMA_Abort_IT+0x1fc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d012      	beq.n	8006770 <HAL_DMA_Abort_IT+0x180>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a28      	ldr	r2, [pc, #160]	; (80067f0 <HAL_DMA_Abort_IT+0x200>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00a      	beq.n	800676a <HAL_DMA_Abort_IT+0x17a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a26      	ldr	r2, [pc, #152]	; (80067f4 <HAL_DMA_Abort_IT+0x204>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d102      	bne.n	8006764 <HAL_DMA_Abort_IT+0x174>
 800675e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006762:	e01b      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006768:	e018      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 800676a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800676e:	e015      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006770:	2310      	movs	r3, #16
 8006772:	e013      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006774:	2301      	movs	r3, #1
 8006776:	e011      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800677c:	e00e      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 800677e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006782:	e00b      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006788:	e008      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 800678a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800678e:	e005      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006794:	e002      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 8006796:	2310      	movs	r3, #16
 8006798:	e000      	b.n	800679c <HAL_DMA_Abort_IT+0x1ac>
 800679a:	2301      	movs	r3, #1
 800679c:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_DMA_Abort_IT+0x20c>)
 800679e:	6053      	str	r3, [r2, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2020 	strb.w	r2, [r3, #32]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_DMA_Abort_IT+0x1d0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40020080 	.word	0x40020080
 80067d0:	40020008 	.word	0x40020008
 80067d4:	4002001c 	.word	0x4002001c
 80067d8:	40020030 	.word	0x40020030
 80067dc:	40020044 	.word	0x40020044
 80067e0:	40020058 	.word	0x40020058
 80067e4:	4002006c 	.word	0x4002006c
 80067e8:	40020408 	.word	0x40020408
 80067ec:	4002041c 	.word	0x4002041c
 80067f0:	40020430 	.word	0x40020430
 80067f4:	40020444 	.word	0x40020444
 80067f8:	40020400 	.word	0x40020400
 80067fc:	40020000 	.word	0x40020000

08006800 <HAL_DMA_IRQHandler>:
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	2204      	movs	r2, #4
 800681e:	409a      	lsls	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80f1 	beq.w	8006a0c <HAL_DMA_IRQHandler+0x20c>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80eb 	beq.w	8006a0c <HAL_DMA_IRQHandler+0x20c>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <HAL_DMA_IRQHandler+0x54>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0204 	bic.w	r2, r2, #4
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	4b5f      	ldr	r3, [pc, #380]	; (80069d8 <HAL_DMA_IRQHandler+0x1d8>)
 800685c:	429a      	cmp	r2, r3
 800685e:	d958      	bls.n	8006912 <HAL_DMA_IRQHandler+0x112>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5d      	ldr	r2, [pc, #372]	; (80069dc <HAL_DMA_IRQHandler+0x1dc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d04f      	beq.n	800690a <HAL_DMA_IRQHandler+0x10a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a5c      	ldr	r2, [pc, #368]	; (80069e0 <HAL_DMA_IRQHandler+0x1e0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d048      	beq.n	8006906 <HAL_DMA_IRQHandler+0x106>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a5a      	ldr	r2, [pc, #360]	; (80069e4 <HAL_DMA_IRQHandler+0x1e4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d040      	beq.n	8006900 <HAL_DMA_IRQHandler+0x100>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a59      	ldr	r2, [pc, #356]	; (80069e8 <HAL_DMA_IRQHandler+0x1e8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d038      	beq.n	80068fa <HAL_DMA_IRQHandler+0xfa>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a57      	ldr	r2, [pc, #348]	; (80069ec <HAL_DMA_IRQHandler+0x1ec>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d030      	beq.n	80068f4 <HAL_DMA_IRQHandler+0xf4>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a56      	ldr	r2, [pc, #344]	; (80069f0 <HAL_DMA_IRQHandler+0x1f0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d028      	beq.n	80068ee <HAL_DMA_IRQHandler+0xee>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a4d      	ldr	r2, [pc, #308]	; (80069d8 <HAL_DMA_IRQHandler+0x1d8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d020      	beq.n	80068e8 <HAL_DMA_IRQHandler+0xe8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a52      	ldr	r2, [pc, #328]	; (80069f4 <HAL_DMA_IRQHandler+0x1f4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d019      	beq.n	80068e4 <HAL_DMA_IRQHandler+0xe4>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a50      	ldr	r2, [pc, #320]	; (80069f8 <HAL_DMA_IRQHandler+0x1f8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d012      	beq.n	80068e0 <HAL_DMA_IRQHandler+0xe0>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a4f      	ldr	r2, [pc, #316]	; (80069fc <HAL_DMA_IRQHandler+0x1fc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00a      	beq.n	80068da <HAL_DMA_IRQHandler+0xda>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a4d      	ldr	r2, [pc, #308]	; (8006a00 <HAL_DMA_IRQHandler+0x200>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d102      	bne.n	80068d4 <HAL_DMA_IRQHandler+0xd4>
 80068ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068d2:	e01b      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068d8:	e018      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068de:	e015      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068e0:	2340      	movs	r3, #64	; 0x40
 80068e2:	e013      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e011      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068ec:	e00e      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068f2:	e00b      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068f8:	e008      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 80068fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068fe:	e005      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 8006900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006904:	e002      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 8006906:	2340      	movs	r3, #64	; 0x40
 8006908:	e000      	b.n	800690c <HAL_DMA_IRQHandler+0x10c>
 800690a:	2304      	movs	r3, #4
 800690c:	4a3d      	ldr	r2, [pc, #244]	; (8006a04 <HAL_DMA_IRQHandler+0x204>)
 800690e:	6053      	str	r3, [r2, #4]
 8006910:	e057      	b.n	80069c2 <HAL_DMA_IRQHandler+0x1c2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a31      	ldr	r2, [pc, #196]	; (80069dc <HAL_DMA_IRQHandler+0x1dc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d04f      	beq.n	80069bc <HAL_DMA_IRQHandler+0x1bc>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <HAL_DMA_IRQHandler+0x1e0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d048      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x1b8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <HAL_DMA_IRQHandler+0x1e4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d040      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x1b2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <HAL_DMA_IRQHandler+0x1e8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d038      	beq.n	80069ac <HAL_DMA_IRQHandler+0x1ac>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <HAL_DMA_IRQHandler+0x1ec>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d030      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x1a6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <HAL_DMA_IRQHandler+0x1f0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d028      	beq.n	80069a0 <HAL_DMA_IRQHandler+0x1a0>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d020      	beq.n	800699a <HAL_DMA_IRQHandler+0x19a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <HAL_DMA_IRQHandler+0x1f4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d019      	beq.n	8006996 <HAL_DMA_IRQHandler+0x196>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a24      	ldr	r2, [pc, #144]	; (80069f8 <HAL_DMA_IRQHandler+0x1f8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d012      	beq.n	8006992 <HAL_DMA_IRQHandler+0x192>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a22      	ldr	r2, [pc, #136]	; (80069fc <HAL_DMA_IRQHandler+0x1fc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00a      	beq.n	800698c <HAL_DMA_IRQHandler+0x18c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a21      	ldr	r2, [pc, #132]	; (8006a00 <HAL_DMA_IRQHandler+0x200>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d102      	bne.n	8006986 <HAL_DMA_IRQHandler+0x186>
 8006980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006984:	e01b      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 8006986:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800698a:	e018      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 800698c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006990:	e015      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	e013      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 8006996:	2304      	movs	r3, #4
 8006998:	e011      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 800699a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800699e:	e00e      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 80069a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069a4:	e00b      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 80069a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069aa:	e008      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 80069ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069b0:	e005      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 80069b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b6:	e002      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 80069b8:	2340      	movs	r3, #64	; 0x40
 80069ba:	e000      	b.n	80069be <HAL_DMA_IRQHandler+0x1be>
 80069bc:	2304      	movs	r3, #4
 80069be:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <HAL_DMA_IRQHandler+0x208>)
 80069c0:	6053      	str	r3, [r2, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8136 	beq.w	8006c38 <HAL_DMA_IRQHandler+0x438>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	e130      	b.n	8006c38 <HAL_DMA_IRQHandler+0x438>
 80069d6:	bf00      	nop
 80069d8:	40020080 	.word	0x40020080
 80069dc:	40020008 	.word	0x40020008
 80069e0:	4002001c 	.word	0x4002001c
 80069e4:	40020030 	.word	0x40020030
 80069e8:	40020044 	.word	0x40020044
 80069ec:	40020058 	.word	0x40020058
 80069f0:	4002006c 	.word	0x4002006c
 80069f4:	40020408 	.word	0x40020408
 80069f8:	4002041c 	.word	0x4002041c
 80069fc:	40020430 	.word	0x40020430
 8006a00:	40020444 	.word	0x40020444
 8006a04:	40020400 	.word	0x40020400
 8006a08:	40020000 	.word	0x40020000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	2202      	movs	r2, #2
 8006a12:	409a      	lsls	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80dd 	beq.w	8006bd8 <HAL_DMA_IRQHandler+0x3d8>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80d7 	beq.w	8006bd8 <HAL_DMA_IRQHandler+0x3d8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <HAL_DMA_IRQHandler+0x250>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 020a 	bic.w	r2, r2, #10
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	4b7b      	ldr	r3, [pc, #492]	; (8006c44 <HAL_DMA_IRQHandler+0x444>)
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d958      	bls.n	8006b0e <HAL_DMA_IRQHandler+0x30e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a79      	ldr	r2, [pc, #484]	; (8006c48 <HAL_DMA_IRQHandler+0x448>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d04f      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x306>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a78      	ldr	r2, [pc, #480]	; (8006c4c <HAL_DMA_IRQHandler+0x44c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d048      	beq.n	8006b02 <HAL_DMA_IRQHandler+0x302>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a76      	ldr	r2, [pc, #472]	; (8006c50 <HAL_DMA_IRQHandler+0x450>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d040      	beq.n	8006afc <HAL_DMA_IRQHandler+0x2fc>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a75      	ldr	r2, [pc, #468]	; (8006c54 <HAL_DMA_IRQHandler+0x454>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d038      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x2f6>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a73      	ldr	r2, [pc, #460]	; (8006c58 <HAL_DMA_IRQHandler+0x458>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d030      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x2f0>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a72      	ldr	r2, [pc, #456]	; (8006c5c <HAL_DMA_IRQHandler+0x45c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d028      	beq.n	8006aea <HAL_DMA_IRQHandler+0x2ea>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a69      	ldr	r2, [pc, #420]	; (8006c44 <HAL_DMA_IRQHandler+0x444>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d020      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x2e4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6e      	ldr	r2, [pc, #440]	; (8006c60 <HAL_DMA_IRQHandler+0x460>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d019      	beq.n	8006ae0 <HAL_DMA_IRQHandler+0x2e0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6c      	ldr	r2, [pc, #432]	; (8006c64 <HAL_DMA_IRQHandler+0x464>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d012      	beq.n	8006adc <HAL_DMA_IRQHandler+0x2dc>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a6b      	ldr	r2, [pc, #428]	; (8006c68 <HAL_DMA_IRQHandler+0x468>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00a      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2d6>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a69      	ldr	r2, [pc, #420]	; (8006c6c <HAL_DMA_IRQHandler+0x46c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d102      	bne.n	8006ad0 <HAL_DMA_IRQHandler+0x2d0>
 8006aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ace:	e01b      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ad4:	e018      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ada:	e015      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006adc:	2320      	movs	r3, #32
 8006ade:	e013      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e011      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ae8:	e00e      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006aea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006aee:	e00b      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006af4:	e008      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006afa:	e005      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b00:	e002      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006b02:	2320      	movs	r3, #32
 8006b04:	e000      	b.n	8006b08 <HAL_DMA_IRQHandler+0x308>
 8006b06:	2302      	movs	r3, #2
 8006b08:	4a59      	ldr	r2, [pc, #356]	; (8006c70 <HAL_DMA_IRQHandler+0x470>)
 8006b0a:	6053      	str	r3, [r2, #4]
 8006b0c:	e057      	b.n	8006bbe <HAL_DMA_IRQHandler+0x3be>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a4d      	ldr	r2, [pc, #308]	; (8006c48 <HAL_DMA_IRQHandler+0x448>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d04f      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x3b8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a4b      	ldr	r2, [pc, #300]	; (8006c4c <HAL_DMA_IRQHandler+0x44c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d048      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x3b4>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a4a      	ldr	r2, [pc, #296]	; (8006c50 <HAL_DMA_IRQHandler+0x450>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d040      	beq.n	8006bae <HAL_DMA_IRQHandler+0x3ae>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a48      	ldr	r2, [pc, #288]	; (8006c54 <HAL_DMA_IRQHandler+0x454>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d038      	beq.n	8006ba8 <HAL_DMA_IRQHandler+0x3a8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a47      	ldr	r2, [pc, #284]	; (8006c58 <HAL_DMA_IRQHandler+0x458>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d030      	beq.n	8006ba2 <HAL_DMA_IRQHandler+0x3a2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a45      	ldr	r2, [pc, #276]	; (8006c5c <HAL_DMA_IRQHandler+0x45c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d028      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x39c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a3d      	ldr	r2, [pc, #244]	; (8006c44 <HAL_DMA_IRQHandler+0x444>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d020      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x396>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a41      	ldr	r2, [pc, #260]	; (8006c60 <HAL_DMA_IRQHandler+0x460>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d019      	beq.n	8006b92 <HAL_DMA_IRQHandler+0x392>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a40      	ldr	r2, [pc, #256]	; (8006c64 <HAL_DMA_IRQHandler+0x464>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d012      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x38e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a3e      	ldr	r2, [pc, #248]	; (8006c68 <HAL_DMA_IRQHandler+0x468>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00a      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x388>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a3d      	ldr	r2, [pc, #244]	; (8006c6c <HAL_DMA_IRQHandler+0x46c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d102      	bne.n	8006b82 <HAL_DMA_IRQHandler+0x382>
 8006b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b80:	e01b      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b86:	e018      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b8c:	e015      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006b8e:	2320      	movs	r3, #32
 8006b90:	e013      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e011      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b9a:	e00e      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006b9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ba0:	e00b      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ba6:	e008      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bac:	e005      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb2:	e002      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	e000      	b.n	8006bba <HAL_DMA_IRQHandler+0x3ba>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <HAL_DMA_IRQHandler+0x474>)
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2020 	strb.w	r2, [r3, #32]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d034      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x438>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	e02f      	b.n	8006c38 <HAL_DMA_IRQHandler+0x438>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	2208      	movs	r2, #8
 8006bde:	409a      	lsls	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d028      	beq.n	8006c3a <HAL_DMA_IRQHandler+0x43a>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d023      	beq.n	8006c3a <HAL_DMA_IRQHandler+0x43a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 020e 	bic.w	r2, r2, #14
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2020 	strb.w	r2, [r3, #32]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_DMA_IRQHandler+0x43a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40020080 	.word	0x40020080
 8006c48:	40020008 	.word	0x40020008
 8006c4c:	4002001c 	.word	0x4002001c
 8006c50:	40020030 	.word	0x40020030
 8006c54:	40020044 	.word	0x40020044
 8006c58:	40020058 	.word	0x40020058
 8006c5c:	4002006c 	.word	0x4002006c
 8006c60:	40020408 	.word	0x40020408
 8006c64:	4002041c 	.word	0x4002041c
 8006c68:	40020430 	.word	0x40020430
 8006c6c:	40020444 	.word	0x40020444
 8006c70:	40020400 	.word	0x40020400
 8006c74:	40020000 	.word	0x40020000

08006c78 <DMA_SetConfig>:
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	2101      	movs	r1, #1
 8006c90:	fa01 f202 	lsl.w	r2, r1, r2
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d108      	bne.n	8006cb8 <DMA_SetConfig+0x40>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	609a      	str	r2, [r3, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	60da      	str	r2, [r3, #12]
 8006cb6:	e007      	b.n	8006cc8 <DMA_SetConfig+0x50>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_GPIO_Init>:
 8006cd4:	b480      	push	{r7}
 8006cd6:	b08b      	sub	sp, #44	; 0x2c
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	e179      	b.n	8006fdc <HAL_GPIO_Init+0x308>
 8006ce8:	2201      	movs	r2, #1
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	f040 8168 	bne.w	8006fd6 <HAL_GPIO_Init+0x302>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4a96      	ldr	r2, [pc, #600]	; (8006f64 <HAL_GPIO_Init+0x290>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d05e      	beq.n	8006dce <HAL_GPIO_Init+0xfa>
 8006d10:	4a94      	ldr	r2, [pc, #592]	; (8006f64 <HAL_GPIO_Init+0x290>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d875      	bhi.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006d16:	4a94      	ldr	r2, [pc, #592]	; (8006f68 <HAL_GPIO_Init+0x294>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d058      	beq.n	8006dce <HAL_GPIO_Init+0xfa>
 8006d1c:	4a92      	ldr	r2, [pc, #584]	; (8006f68 <HAL_GPIO_Init+0x294>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d86f      	bhi.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006d22:	4a92      	ldr	r2, [pc, #584]	; (8006f6c <HAL_GPIO_Init+0x298>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d052      	beq.n	8006dce <HAL_GPIO_Init+0xfa>
 8006d28:	4a90      	ldr	r2, [pc, #576]	; (8006f6c <HAL_GPIO_Init+0x298>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d869      	bhi.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006d2e:	4a90      	ldr	r2, [pc, #576]	; (8006f70 <HAL_GPIO_Init+0x29c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d04c      	beq.n	8006dce <HAL_GPIO_Init+0xfa>
 8006d34:	4a8e      	ldr	r2, [pc, #568]	; (8006f70 <HAL_GPIO_Init+0x29c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d863      	bhi.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006d3a:	4a8e      	ldr	r2, [pc, #568]	; (8006f74 <HAL_GPIO_Init+0x2a0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d046      	beq.n	8006dce <HAL_GPIO_Init+0xfa>
 8006d40:	4a8c      	ldr	r2, [pc, #560]	; (8006f74 <HAL_GPIO_Init+0x2a0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d85d      	bhi.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006d46:	2b12      	cmp	r3, #18
 8006d48:	d82a      	bhi.n	8006da0 <HAL_GPIO_Init+0xcc>
 8006d4a:	2b12      	cmp	r3, #18
 8006d4c:	d859      	bhi.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <HAL_GPIO_Init+0x80>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006dcf 	.word	0x08006dcf
 8006d58:	08006da9 	.word	0x08006da9
 8006d5c:	08006dbb 	.word	0x08006dbb
 8006d60:	08006dfd 	.word	0x08006dfd
 8006d64:	08006e03 	.word	0x08006e03
 8006d68:	08006e03 	.word	0x08006e03
 8006d6c:	08006e03 	.word	0x08006e03
 8006d70:	08006e03 	.word	0x08006e03
 8006d74:	08006e03 	.word	0x08006e03
 8006d78:	08006e03 	.word	0x08006e03
 8006d7c:	08006e03 	.word	0x08006e03
 8006d80:	08006e03 	.word	0x08006e03
 8006d84:	08006e03 	.word	0x08006e03
 8006d88:	08006e03 	.word	0x08006e03
 8006d8c:	08006e03 	.word	0x08006e03
 8006d90:	08006e03 	.word	0x08006e03
 8006d94:	08006e03 	.word	0x08006e03
 8006d98:	08006db1 	.word	0x08006db1
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	4a75      	ldr	r2, [pc, #468]	; (8006f78 <HAL_GPIO_Init+0x2a4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_GPIO_Init+0xfa>
 8006da6:	e02c      	b.n	8006e02 <HAL_GPIO_Init+0x12e>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	623b      	str	r3, [r7, #32]
 8006dae:	e029      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	3304      	adds	r3, #4
 8006db6:	623b      	str	r3, [r7, #32]
 8006db8:	e024      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e01f      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	623b      	str	r3, [r7, #32]
 8006dcc:	e01a      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <HAL_GPIO_Init+0x108>
 8006dd6:	2304      	movs	r3, #4
 8006dd8:	623b      	str	r3, [r7, #32]
 8006dda:	e013      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <HAL_GPIO_Init+0x11c>
 8006de4:	2308      	movs	r3, #8
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	611a      	str	r2, [r3, #16]
 8006dee:	e009      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006df0:	2308      	movs	r3, #8
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	615a      	str	r2, [r3, #20]
 8006dfa:	e003      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	e000      	b.n	8006e04 <HAL_GPIO_Init+0x130>
 8006e02:	bf00      	nop
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2bff      	cmp	r3, #255	; 0xff
 8006e08:	d801      	bhi.n	8006e0e <HAL_GPIO_Init+0x13a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	e001      	b.n	8006e12 <HAL_GPIO_Init+0x13e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2bff      	cmp	r3, #255	; 0xff
 8006e18:	d802      	bhi.n	8006e20 <HAL_GPIO_Init+0x14c>
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	e002      	b.n	8006e26 <HAL_GPIO_Init+0x152>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	3b08      	subs	r3, #8
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	210f      	movs	r1, #15
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	401a      	ands	r2, r3
 8006e38:	6a39      	ldr	r1, [r7, #32]
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	431a      	orrs	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80c1 	beq.w	8006fd6 <HAL_GPIO_Init+0x302>
 8006e54:	4b49      	ldr	r3, [pc, #292]	; (8006f7c <HAL_GPIO_Init+0x2a8>)
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	4a48      	ldr	r2, [pc, #288]	; (8006f7c <HAL_GPIO_Init+0x2a8>)
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	6193      	str	r3, [r2, #24]
 8006e60:	4b46      	ldr	r3, [pc, #280]	; (8006f7c <HAL_GPIO_Init+0x2a8>)
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4a44      	ldr	r2, [pc, #272]	; (8006f80 <HAL_GPIO_Init+0x2ac>)
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	089b      	lsrs	r3, r3, #2
 8006e72:	3302      	adds	r3, #2
 8006e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	220f      	movs	r2, #15
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <HAL_GPIO_Init+0x2b0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d01f      	beq.n	8006ed8 <HAL_GPIO_Init+0x204>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3b      	ldr	r2, [pc, #236]	; (8006f88 <HAL_GPIO_Init+0x2b4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d019      	beq.n	8006ed4 <HAL_GPIO_Init+0x200>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3a      	ldr	r2, [pc, #232]	; (8006f8c <HAL_GPIO_Init+0x2b8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <HAL_GPIO_Init+0x1fc>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a39      	ldr	r2, [pc, #228]	; (8006f90 <HAL_GPIO_Init+0x2bc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00d      	beq.n	8006ecc <HAL_GPIO_Init+0x1f8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a38      	ldr	r2, [pc, #224]	; (8006f94 <HAL_GPIO_Init+0x2c0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d007      	beq.n	8006ec8 <HAL_GPIO_Init+0x1f4>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a37      	ldr	r2, [pc, #220]	; (8006f98 <HAL_GPIO_Init+0x2c4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d101      	bne.n	8006ec4 <HAL_GPIO_Init+0x1f0>
 8006ec0:	2305      	movs	r3, #5
 8006ec2:	e00a      	b.n	8006eda <HAL_GPIO_Init+0x206>
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	e008      	b.n	8006eda <HAL_GPIO_Init+0x206>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	e006      	b.n	8006eda <HAL_GPIO_Init+0x206>
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e004      	b.n	8006eda <HAL_GPIO_Init+0x206>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e002      	b.n	8006eda <HAL_GPIO_Init+0x206>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <HAL_GPIO_Init+0x206>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006edc:	f002 0203 	and.w	r2, r2, #3
 8006ee0:	0092      	lsls	r2, r2, #2
 8006ee2:	4093      	lsls	r3, r2
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	4925      	ldr	r1, [pc, #148]	; (8006f80 <HAL_GPIO_Init+0x2ac>)
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	089b      	lsrs	r3, r3, #2
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <HAL_GPIO_Init+0x23e>
 8006f04:	4b25      	ldr	r3, [pc, #148]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4924      	ldr	r1, [pc, #144]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
 8006f10:	e006      	b.n	8006f20 <HAL_GPIO_Init+0x24c>
 8006f12:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	4920      	ldr	r1, [pc, #128]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <HAL_GPIO_Init+0x266>
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	491a      	ldr	r1, [pc, #104]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]
 8006f38:	e006      	b.n	8006f48 <HAL_GPIO_Init+0x274>
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	4916      	ldr	r1, [pc, #88]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	604b      	str	r3, [r1, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d025      	beq.n	8006fa0 <HAL_GPIO_Init+0x2cc>
 8006f54:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	4910      	ldr	r1, [pc, #64]	; (8006f9c <HAL_GPIO_Init+0x2c8>)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	608b      	str	r3, [r1, #8]
 8006f60:	e025      	b.n	8006fae <HAL_GPIO_Init+0x2da>
 8006f62:	bf00      	nop
 8006f64:	10320000 	.word	0x10320000
 8006f68:	10310000 	.word	0x10310000
 8006f6c:	10220000 	.word	0x10220000
 8006f70:	10210000 	.word	0x10210000
 8006f74:	10120000 	.word	0x10120000
 8006f78:	10110000 	.word	0x10110000
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40010800 	.word	0x40010800
 8006f88:	40010c00 	.word	0x40010c00
 8006f8c:	40011000 	.word	0x40011000
 8006f90:	40011400 	.word	0x40011400
 8006f94:	40011800 	.word	0x40011800
 8006f98:	40011c00 	.word	0x40011c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <HAL_GPIO_Init+0x324>)
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	43db      	mvns	r3, r3
 8006fa8:	4913      	ldr	r1, [pc, #76]	; (8006ff8 <HAL_GPIO_Init+0x324>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <HAL_GPIO_Init+0x2f4>
 8006fba:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <HAL_GPIO_Init+0x324>)
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	490e      	ldr	r1, [pc, #56]	; (8006ff8 <HAL_GPIO_Init+0x324>)
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60cb      	str	r3, [r1, #12]
 8006fc6:	e006      	b.n	8006fd6 <HAL_GPIO_Init+0x302>
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <HAL_GPIO_Init+0x324>)
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	4909      	ldr	r1, [pc, #36]	; (8006ff8 <HAL_GPIO_Init+0x324>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	60cb      	str	r3, [r1, #12]
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	3301      	adds	r3, #1
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f47f ae7e 	bne.w	8006ce8 <HAL_GPIO_Init+0x14>
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	372c      	adds	r7, #44	; 0x2c
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr
 8006ff8:	40010400 	.word	0x40010400

08006ffc <HAL_GPIO_WritePin>:
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
 8007008:	4613      	mov	r3, r2
 800700a:	707b      	strb	r3, [r7, #1]
 800700c:	787b      	ldrb	r3, [r7, #1]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_GPIO_WritePin+0x1e>
 8007012:	887a      	ldrh	r2, [r7, #2]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	611a      	str	r2, [r3, #16]
 8007018:	e003      	b.n	8007022 <HAL_GPIO_WritePin+0x26>
 800701a:	887b      	ldrh	r3, [r7, #2]
 800701c:	041a      	lsls	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	611a      	str	r2, [r3, #16]
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <HAL_I2C_Init>:
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_I2C_Init+0x12>
 800703a:	2301      	movs	r3, #1
 800703c:	e12b      	b.n	8007296 <HAL_I2C_Init+0x26a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_I2C_Init+0x2c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fe fa60 	bl	8005518 <HAL_I2C_MspInit>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2224      	movs	r2, #36	; 0x24
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f000 fffc 	bl	800808c <HAL_RCC_GetPCLK1Freq>
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4a81      	ldr	r2, [pc, #516]	; (80072a0 <HAL_I2C_Init+0x274>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d807      	bhi.n	80070b0 <HAL_I2C_Init+0x84>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a80      	ldr	r2, [pc, #512]	; (80072a4 <HAL_I2C_Init+0x278>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bf94      	ite	ls
 80070a8:	2301      	movls	r3, #1
 80070aa:	2300      	movhi	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e006      	b.n	80070be <HAL_I2C_Init+0x92>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a7d      	ldr	r2, [pc, #500]	; (80072a8 <HAL_I2C_Init+0x27c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bf94      	ite	ls
 80070b8:	2301      	movls	r3, #1
 80070ba:	2300      	movhi	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_I2C_Init+0x9a>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e0e7      	b.n	8007296 <HAL_I2C_Init+0x26a>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a78      	ldr	r2, [pc, #480]	; (80072ac <HAL_I2C_Init+0x280>)
 80070ca:	fba2 2303 	umull	r2, r3, r2, r3
 80070ce:	0c9b      	lsrs	r3, r3, #18
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4a6a      	ldr	r2, [pc, #424]	; (80072a0 <HAL_I2C_Init+0x274>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d802      	bhi.n	8007100 <HAL_I2C_Init+0xd4>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	3301      	adds	r3, #1
 80070fe:	e009      	b.n	8007114 <HAL_I2C_Init+0xe8>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	4a69      	ldr	r2, [pc, #420]	; (80072b0 <HAL_I2C_Init+0x284>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	099b      	lsrs	r3, r3, #6
 8007112:	3301      	adds	r3, #1
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	430b      	orrs	r3, r1
 800711a:	6213      	str	r3, [r2, #32]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	495c      	ldr	r1, [pc, #368]	; (80072a0 <HAL_I2C_Init+0x274>)
 8007130:	428b      	cmp	r3, r1
 8007132:	d819      	bhi.n	8007168 <HAL_I2C_Init+0x13c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	1e59      	subs	r1, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007148:	400b      	ands	r3, r1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_I2C_Init+0x138>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1e59      	subs	r1, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	fbb1 f3f3 	udiv	r3, r1, r3
 800715c:	3301      	adds	r3, #1
 800715e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007162:	e051      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 8007164:	2304      	movs	r3, #4
 8007166:	e04f      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d111      	bne.n	8007194 <HAL_I2C_Init+0x168>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1e58      	subs	r0, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	440b      	add	r3, r1
 800717e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007182:	3301      	adds	r3, #1
 8007184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007188:	2b00      	cmp	r3, #0
 800718a:	bf0c      	ite	eq
 800718c:	2301      	moveq	r3, #1
 800718e:	2300      	movne	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e012      	b.n	80071ba <HAL_I2C_Init+0x18e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1e58      	subs	r0, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	0099      	lsls	r1, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80071aa:	3301      	adds	r3, #1
 80071ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Init+0x196>
 80071be:	2301      	movs	r3, #1
 80071c0:	e022      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10e      	bne.n	80071e8 <HAL_I2C_Init+0x1bc>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1e58      	subs	r0, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6859      	ldr	r1, [r3, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	440b      	add	r3, r1
 80071d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80071dc:	3301      	adds	r3, #1
 80071de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e6:	e00f      	b.n	8007208 <HAL_I2C_Init+0x1dc>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	1e58      	subs	r0, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	0099      	lsls	r1, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80071fe:	3301      	adds	r3, #1
 8007200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	6809      	ldr	r1, [r1, #0]
 800720c:	4313      	orrs	r3, r2
 800720e:	61cb      	str	r3, [r1, #28]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6911      	ldr	r1, [r2, #16]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	68d2      	ldr	r2, [r2, #12]
 8007242:	4311      	orrs	r1, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	430b      	orrs	r3, r1
 800724a:	6093      	str	r3, [r2, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	60da      	str	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007294:	2300      	movs	r3, #0
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	000186a0 	.word	0x000186a0
 80072a4:	001e847f 	.word	0x001e847f
 80072a8:	003d08ff 	.word	0x003d08ff
 80072ac:	431bde83 	.word	0x431bde83
 80072b0:	10624dd3 	.word	0x10624dd3

080072b4 <HAL_I2C_Mem_Write>:
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	4608      	mov	r0, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	461a      	mov	r2, r3
 80072c2:	4603      	mov	r3, r0
 80072c4:	817b      	strh	r3, [r7, #10]
 80072c6:	460b      	mov	r3, r1
 80072c8:	813b      	strh	r3, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80fb      	strh	r3, [r7, #6]
 80072ce:	f7fe ff43 	bl	8006158 <HAL_GetTick>
 80072d2:	6178      	str	r0, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b20      	cmp	r3, #32
 80072de:	f040 80d9 	bne.w	8007494 <HAL_I2C_Mem_Write+0x1e0>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2319      	movs	r3, #25
 80072e8:	2201      	movs	r2, #1
 80072ea:	496d      	ldr	r1, [pc, #436]	; (80074a0 <HAL_I2C_Mem_Write+0x1ec>)
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f971 	bl	80075d4 <I2C_WaitOnFlagUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <HAL_I2C_Mem_Write+0x48>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e0cc      	b.n	8007496 <HAL_I2C_Mem_Write+0x1e2>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <HAL_I2C_Mem_Write+0x56>
 8007306:	2302      	movs	r3, #2
 8007308:	e0c5      	b.n	8007496 <HAL_I2C_Mem_Write+0x1e2>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b01      	cmp	r3, #1
 800731e:	d007      	beq.n	8007330 <HAL_I2C_Mem_Write+0x7c>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2221      	movs	r2, #33	; 0x21
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2240      	movs	r2, #64	; 0x40
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	641a      	str	r2, [r3, #64]	; 0x40
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	625a      	str	r2, [r3, #36]	; 0x24
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007360:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	851a      	strh	r2, [r3, #40]	; 0x28
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a4d      	ldr	r2, [pc, #308]	; (80074a4 <HAL_I2C_Mem_Write+0x1f0>)
 8007370:	62da      	str	r2, [r3, #44]	; 0x2c
 8007372:	88f8      	ldrh	r0, [r7, #6]
 8007374:	893a      	ldrh	r2, [r7, #8]
 8007376:	8979      	ldrh	r1, [r7, #10]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4603      	mov	r3, r0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f890 	bl	80074a8 <I2C_RequestMemoryWrite>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d052      	beq.n	8007434 <HAL_I2C_Mem_Write+0x180>
 800738e:	2301      	movs	r3, #1
 8007390:	e081      	b.n	8007496 <HAL_I2C_Mem_Write+0x1e2>
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f9f2 	bl	8007780 <I2C_WaitOnTXEFlagUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00d      	beq.n	80073be <HAL_I2C_Mem_Write+0x10a>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d107      	bne.n	80073ba <HAL_I2C_Mem_Write+0x106>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	2301      	movs	r3, #1
 80073bc:	e06b      	b.n	8007496 <HAL_I2C_Mem_Write+0x1e2>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	611a      	str	r2, [r3, #16]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d11b      	bne.n	8007434 <HAL_I2C_Mem_Write+0x180>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	d017      	beq.n	8007434 <HAL_I2C_Mem_Write+0x180>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	611a      	str	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	625a      	str	r2, [r3, #36]	; 0x24
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	851a      	strh	r2, [r3, #40]	; 0x28
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1aa      	bne.n	8007392 <HAL_I2C_Mem_Write+0xde>
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f9de 	bl	8007802 <I2C_WaitOnBTFFlagUntilTimeout>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00d      	beq.n	8007468 <HAL_I2C_Mem_Write+0x1b4>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007450:	2b04      	cmp	r3, #4
 8007452:	d107      	bne.n	8007464 <HAL_I2C_Mem_Write+0x1b0>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	2301      	movs	r3, #1
 8007466:	e016      	b.n	8007496 <HAL_I2C_Mem_Write+0x1e2>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007490:	2300      	movs	r3, #0
 8007492:	e000      	b.n	8007496 <HAL_I2C_Mem_Write+0x1e2>
 8007494:	2302      	movs	r3, #2
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	00100002 	.word	0x00100002
 80074a4:	ffff0000 	.word	0xffff0000

080074a8 <I2C_RequestMemoryWrite>:
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	4608      	mov	r0, r1
 80074b2:	4611      	mov	r1, r2
 80074b4:	461a      	mov	r2, r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	817b      	strh	r3, [r7, #10]
 80074ba:	460b      	mov	r3, r1
 80074bc:	813b      	strh	r3, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	2200      	movs	r2, #0
 80074da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f878 	bl	80075d4 <I2C_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00d      	beq.n	8007506 <I2C_RequestMemoryWrite+0x5e>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f8:	d103      	bne.n	8007502 <I2C_RequestMemoryWrite+0x5a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
 8007502:	2303      	movs	r3, #3
 8007504:	e05f      	b.n	80075c6 <I2C_RequestMemoryWrite+0x11e>
 8007506:	897b      	ldrh	r3, [r7, #10]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007514:	611a      	str	r2, [r3, #16]
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	6a3a      	ldr	r2, [r7, #32]
 800751a:	492d      	ldr	r1, [pc, #180]	; (80075d0 <I2C_RequestMemoryWrite+0x128>)
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f8b0 	bl	8007682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <I2C_RequestMemoryWrite+0x84>
 8007528:	2301      	movs	r3, #1
 800752a:	e04c      	b.n	80075c6 <I2C_RequestMemoryWrite+0x11e>
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007544:	6a39      	ldr	r1, [r7, #32]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f91a 	bl	8007780 <I2C_WaitOnTXEFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00d      	beq.n	800756e <I2C_RequestMemoryWrite+0xc6>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	2b04      	cmp	r3, #4
 8007558:	d107      	bne.n	800756a <I2C_RequestMemoryWrite+0xc2>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	2301      	movs	r3, #1
 800756c:	e02b      	b.n	80075c6 <I2C_RequestMemoryWrite+0x11e>
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d105      	bne.n	8007580 <I2C_RequestMemoryWrite+0xd8>
 8007574:	893b      	ldrh	r3, [r7, #8]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	611a      	str	r2, [r3, #16]
 800757e:	e021      	b.n	80075c4 <I2C_RequestMemoryWrite+0x11c>
 8007580:	893b      	ldrh	r3, [r7, #8]
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	b29b      	uxth	r3, r3
 8007586:	b2da      	uxtb	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	611a      	str	r2, [r3, #16]
 800758e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007590:	6a39      	ldr	r1, [r7, #32]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f8f4 	bl	8007780 <I2C_WaitOnTXEFlagUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00d      	beq.n	80075ba <I2C_RequestMemoryWrite+0x112>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d107      	bne.n	80075b6 <I2C_RequestMemoryWrite+0x10e>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	2301      	movs	r3, #1
 80075b8:	e005      	b.n	80075c6 <I2C_RequestMemoryWrite+0x11e>
 80075ba:	893b      	ldrh	r3, [r7, #8]
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	611a      	str	r2, [r3, #16]
 80075c4:	2300      	movs	r3, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	00010002 	.word	0x00010002

080075d4 <I2C_WaitOnFlagUntilTimeout>:
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	71fb      	strb	r3, [r7, #7]
 80075e4:	e025      	b.n	8007632 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ec:	d021      	beq.n	8007632 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80075ee:	f7fe fdb3 	bl	8006158 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d302      	bcc.n	8007604 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d116      	bne.n	8007632 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	; 0x30
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800762e:	2301      	movs	r3, #1
 8007630:	e023      	b.n	800767a <I2C_WaitOnFlagUntilTimeout+0xa6>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d10d      	bne.n	8007658 <I2C_WaitOnFlagUntilTimeout+0x84>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	43da      	mvns	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	e00c      	b.n	8007672 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	43da      	mvns	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	bf0c      	ite	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	2300      	movne	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	429a      	cmp	r2, r3
 8007676:	d0b6      	beq.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0x12>
 8007678:	2300      	movs	r3, #0
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	e051      	b.n	8007736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800769c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a0:	d123      	bne.n	80076ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ba:	615a      	str	r2, [r3, #20]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f043 0204 	orr.w	r2, r3, #4
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076e6:	2301      	movs	r3, #1
 80076e8:	e046      	b.n	8007778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d021      	beq.n	8007736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80076f2:	f7fe fd31 	bl	8006158 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d302      	bcc.n	8007708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d116      	bne.n	8007736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f043 0220 	orr.w	r2, r3, #32
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007732:	2301      	movs	r3, #1
 8007734:	e020      	b.n	8007778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d10c      	bne.n	800775a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	43da      	mvns	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf14      	ite	ne
 8007752:	2301      	movne	r3, #1
 8007754:	2300      	moveq	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	e00b      	b.n	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	43da      	mvns	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4013      	ands	r3, r2
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	bf14      	ite	ne
 800776c:	2301      	movne	r3, #1
 800776e:	2300      	moveq	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d18d      	bne.n	8007692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8007776:	2300      	movs	r3, #0
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <I2C_WaitOnTXEFlagUntilTimeout>:
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	e02d      	b.n	80077ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f878 	bl	8007884 <I2C_IsAcknowledgeFailed>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800779a:	2301      	movs	r3, #1
 800779c:	e02d      	b.n	80077fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a4:	d021      	beq.n	80077ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80077a6:	f7fe fcd7 	bl	8006158 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d302      	bcc.n	80077bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d116      	bne.n	80077ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f043 0220 	orr.w	r2, r3, #32
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80077e6:	2301      	movs	r3, #1
 80077e8:	e007      	b.n	80077fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f4:	2b80      	cmp	r3, #128	; 0x80
 80077f6:	d1ca      	bne.n	800778e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80077f8:	2300      	movs	r3, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <I2C_WaitOnBTFFlagUntilTimeout>:
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	e02d      	b.n	800786c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f837 	bl	8007884 <I2C_IsAcknowledgeFailed>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800781c:	2301      	movs	r3, #1
 800781e:	e02d      	b.n	800787c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d021      	beq.n	800786c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007828:	f7fe fc96 	bl	8006158 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	d302      	bcc.n	800783e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d116      	bne.n	800786c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	f043 0220 	orr.w	r2, r3, #32
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	641a      	str	r2, [r3, #64]	; 0x40
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007868:	2301      	movs	r3, #1
 800786a:	e007      	b.n	800787c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b04      	cmp	r3, #4
 8007878:	d1ca      	bne.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800787a:	2300      	movs	r3, #0
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <I2C_IsAcknowledgeFailed>:
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789a:	d11b      	bne.n	80078d4 <I2C_IsAcknowledgeFailed+0x50>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078a4:	615a      	str	r2, [r3, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	f043 0204 	orr.w	r2, r3, #4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <I2C_IsAcknowledgeFailed+0x52>
 80078d4:	2300      	movs	r3, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <HAL_RCC_OscConfig>:
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_RCC_OscConfig+0x12>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e272      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8087 	beq.w	8007a0e <HAL_RCC_OscConfig+0x12e>
 8007900:	4b92      	ldr	r3, [pc, #584]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f003 030c 	and.w	r3, r3, #12
 8007908:	2b04      	cmp	r3, #4
 800790a:	d00c      	beq.n	8007926 <HAL_RCC_OscConfig+0x46>
 800790c:	4b8f      	ldr	r3, [pc, #572]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f003 030c 	and.w	r3, r3, #12
 8007914:	2b08      	cmp	r3, #8
 8007916:	d112      	bne.n	800793e <HAL_RCC_OscConfig+0x5e>
 8007918:	4b8c      	ldr	r3, [pc, #560]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d10b      	bne.n	800793e <HAL_RCC_OscConfig+0x5e>
 8007926:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d06c      	beq.n	8007a0c <HAL_RCC_OscConfig+0x12c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d168      	bne.n	8007a0c <HAL_RCC_OscConfig+0x12c>
 800793a:	2301      	movs	r3, #1
 800793c:	e24c      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007946:	d106      	bne.n	8007956 <HAL_RCC_OscConfig+0x76>
 8007948:	4b80      	ldr	r3, [pc, #512]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a7f      	ldr	r2, [pc, #508]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 800794e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	e02e      	b.n	80079b4 <HAL_RCC_OscConfig+0xd4>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10c      	bne.n	8007978 <HAL_RCC_OscConfig+0x98>
 800795e:	4b7b      	ldr	r3, [pc, #492]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a7a      	ldr	r2, [pc, #488]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	4b78      	ldr	r3, [pc, #480]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a77      	ldr	r2, [pc, #476]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e01d      	b.n	80079b4 <HAL_RCC_OscConfig+0xd4>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007980:	d10c      	bne.n	800799c <HAL_RCC_OscConfig+0xbc>
 8007982:	4b72      	ldr	r3, [pc, #456]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a71      	ldr	r2, [pc, #452]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b6f      	ldr	r3, [pc, #444]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a6e      	ldr	r2, [pc, #440]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e00b      	b.n	80079b4 <HAL_RCC_OscConfig+0xd4>
 800799c:	4b6b      	ldr	r3, [pc, #428]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a6a      	ldr	r2, [pc, #424]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 80079a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	4b68      	ldr	r3, [pc, #416]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a67      	ldr	r2, [pc, #412]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 80079ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d013      	beq.n	80079e4 <HAL_RCC_OscConfig+0x104>
 80079bc:	f7fe fbcc 	bl	8006158 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0xf6>
 80079c4:	f7fe fbc8 	bl	8006158 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b64      	cmp	r3, #100	; 0x64
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0xf6>
 80079d2:	2303      	movs	r3, #3
 80079d4:	e200      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 80079d6:	4b5d      	ldr	r3, [pc, #372]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f0      	beq.n	80079c4 <HAL_RCC_OscConfig+0xe4>
 80079e2:	e014      	b.n	8007a0e <HAL_RCC_OscConfig+0x12e>
 80079e4:	f7fe fbb8 	bl	8006158 <HAL_GetTick>
 80079e8:	6138      	str	r0, [r7, #16]
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x11e>
 80079ec:	f7fe fbb4 	bl	8006158 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b64      	cmp	r3, #100	; 0x64
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x11e>
 80079fa:	2303      	movs	r3, #3
 80079fc:	e1ec      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 80079fe:	4b53      	ldr	r3, [pc, #332]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1f0      	bne.n	80079ec <HAL_RCC_OscConfig+0x10c>
 8007a0a:	e000      	b.n	8007a0e <HAL_RCC_OscConfig+0x12e>
 8007a0c:	bf00      	nop
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d063      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x202>
 8007a1a:	4b4c      	ldr	r3, [pc, #304]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f003 030c 	and.w	r3, r3, #12
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HAL_RCC_OscConfig+0x15e>
 8007a26:	4b49      	ldr	r3, [pc, #292]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f003 030c 	and.w	r3, r3, #12
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	d11c      	bne.n	8007a6c <HAL_RCC_OscConfig+0x18c>
 8007a32:	4b46      	ldr	r3, [pc, #280]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d116      	bne.n	8007a6c <HAL_RCC_OscConfig+0x18c>
 8007a3e:	4b43      	ldr	r3, [pc, #268]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_RCC_OscConfig+0x176>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d001      	beq.n	8007a56 <HAL_RCC_OscConfig+0x176>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e1c0      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007a56:	4b3d      	ldr	r3, [pc, #244]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4939      	ldr	r1, [pc, #228]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	600b      	str	r3, [r1, #0]
 8007a6a:	e03a      	b.n	8007ae2 <HAL_RCC_OscConfig+0x202>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d020      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x1d6>
 8007a74:	4b36      	ldr	r3, [pc, #216]	; (8007b50 <HAL_RCC_OscConfig+0x270>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	f7fe fb6d 	bl	8006158 <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x1b4>
 8007a82:	f7fe fb69 	bl	8006158 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x1b4>
 8007a90:	2303      	movs	r3, #3
 8007a92:	e1a1      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007a94:	4b2d      	ldr	r3, [pc, #180]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <HAL_RCC_OscConfig+0x1a2>
 8007aa0:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4927      	ldr	r1, [pc, #156]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	600b      	str	r3, [r1, #0]
 8007ab4:	e015      	b.n	8007ae2 <HAL_RCC_OscConfig+0x202>
 8007ab6:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <HAL_RCC_OscConfig+0x270>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	f7fe fb4c 	bl	8006158 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0x1f6>
 8007ac4:	f7fe fb48 	bl	8006158 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x1f6>
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e180      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007ad6:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f0      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x1e4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d03a      	beq.n	8007b64 <HAL_RCC_OscConfig+0x284>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d019      	beq.n	8007b2a <HAL_RCC_OscConfig+0x24a>
 8007af6:	4b17      	ldr	r3, [pc, #92]	; (8007b54 <HAL_RCC_OscConfig+0x274>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	f7fe fb2c 	bl	8006158 <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x236>
 8007b04:	f7fe fb28 	bl	8006158 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x236>
 8007b12:	2303      	movs	r3, #3
 8007b14:	e160      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007b16:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <HAL_RCC_OscConfig+0x26c>)
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0f0      	beq.n	8007b04 <HAL_RCC_OscConfig+0x224>
 8007b22:	2001      	movs	r0, #1
 8007b24:	f000 fada 	bl	80080dc <RCC_Delay>
 8007b28:	e01c      	b.n	8007b64 <HAL_RCC_OscConfig+0x284>
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <HAL_RCC_OscConfig+0x274>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f7fe fb12 	bl	8006158 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]
 8007b36:	e00f      	b.n	8007b58 <HAL_RCC_OscConfig+0x278>
 8007b38:	f7fe fb0e 	bl	8006158 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d908      	bls.n	8007b58 <HAL_RCC_OscConfig+0x278>
 8007b46:	2303      	movs	r3, #3
 8007b48:	e146      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	42420000 	.word	0x42420000
 8007b54:	42420480 	.word	0x42420480
 8007b58:	4b92      	ldr	r3, [pc, #584]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e9      	bne.n	8007b38 <HAL_RCC_OscConfig+0x258>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 80a6 	beq.w	8007cbe <HAL_RCC_OscConfig+0x3de>
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
 8007b76:	4b8b      	ldr	r3, [pc, #556]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10d      	bne.n	8007b9e <HAL_RCC_OscConfig+0x2be>
 8007b82:	4b88      	ldr	r3, [pc, #544]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	4a87      	ldr	r2, [pc, #540]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	61d3      	str	r3, [r2, #28]
 8007b8e:	4b85      	ldr	r3, [pc, #532]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b96:	60bb      	str	r3, [r7, #8]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
 8007b9e:	4b82      	ldr	r3, [pc, #520]	; (8007da8 <HAL_RCC_OscConfig+0x4c8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d118      	bne.n	8007bdc <HAL_RCC_OscConfig+0x2fc>
 8007baa:	4b7f      	ldr	r3, [pc, #508]	; (8007da8 <HAL_RCC_OscConfig+0x4c8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a7e      	ldr	r2, [pc, #504]	; (8007da8 <HAL_RCC_OscConfig+0x4c8>)
 8007bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	f7fe facf 	bl	8006158 <HAL_GetTick>
 8007bba:	6138      	str	r0, [r7, #16]
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x2f0>
 8007bbe:	f7fe facb 	bl	8006158 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b64      	cmp	r3, #100	; 0x64
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x2f0>
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e103      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007bd0:	4b75      	ldr	r3, [pc, #468]	; (8007da8 <HAL_RCC_OscConfig+0x4c8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0f0      	beq.n	8007bbe <HAL_RCC_OscConfig+0x2de>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d106      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x312>
 8007be4:	4b6f      	ldr	r3, [pc, #444]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	4a6e      	ldr	r2, [pc, #440]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	6213      	str	r3, [r2, #32]
 8007bf0:	e02d      	b.n	8007c4e <HAL_RCC_OscConfig+0x36e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10c      	bne.n	8007c14 <HAL_RCC_OscConfig+0x334>
 8007bfa:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	4a69      	ldr	r2, [pc, #420]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	6213      	str	r3, [r2, #32]
 8007c06:	4b67      	ldr	r3, [pc, #412]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	4a66      	ldr	r2, [pc, #408]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c0c:	f023 0304 	bic.w	r3, r3, #4
 8007c10:	6213      	str	r3, [r2, #32]
 8007c12:	e01c      	b.n	8007c4e <HAL_RCC_OscConfig+0x36e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	d10c      	bne.n	8007c36 <HAL_RCC_OscConfig+0x356>
 8007c1c:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	4a60      	ldr	r2, [pc, #384]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c22:	f043 0304 	orr.w	r3, r3, #4
 8007c26:	6213      	str	r3, [r2, #32]
 8007c28:	4b5e      	ldr	r3, [pc, #376]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	4a5d      	ldr	r2, [pc, #372]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	6213      	str	r3, [r2, #32]
 8007c34:	e00b      	b.n	8007c4e <HAL_RCC_OscConfig+0x36e>
 8007c36:	4b5b      	ldr	r3, [pc, #364]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	4a5a      	ldr	r2, [pc, #360]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	6213      	str	r3, [r2, #32]
 8007c42:	4b58      	ldr	r3, [pc, #352]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	4a57      	ldr	r2, [pc, #348]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c48:	f023 0304 	bic.w	r3, r3, #4
 8007c4c:	6213      	str	r3, [r2, #32]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d015      	beq.n	8007c82 <HAL_RCC_OscConfig+0x3a2>
 8007c56:	f7fe fa7f 	bl	8006158 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]
 8007c5c:	e00a      	b.n	8007c74 <HAL_RCC_OscConfig+0x394>
 8007c5e:	f7fe fa7b 	bl	8006158 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d901      	bls.n	8007c74 <HAL_RCC_OscConfig+0x394>
 8007c70:	2303      	movs	r3, #3
 8007c72:	e0b1      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007c74:	4b4b      	ldr	r3, [pc, #300]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0ee      	beq.n	8007c5e <HAL_RCC_OscConfig+0x37e>
 8007c80:	e014      	b.n	8007cac <HAL_RCC_OscConfig+0x3cc>
 8007c82:	f7fe fa69 	bl	8006158 <HAL_GetTick>
 8007c86:	6138      	str	r0, [r7, #16]
 8007c88:	e00a      	b.n	8007ca0 <HAL_RCC_OscConfig+0x3c0>
 8007c8a:	f7fe fa65 	bl	8006158 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x3c0>
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e09b      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007ca0:	4b40      	ldr	r3, [pc, #256]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1ee      	bne.n	8007c8a <HAL_RCC_OscConfig+0x3aa>
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d105      	bne.n	8007cbe <HAL_RCC_OscConfig+0x3de>
 8007cb2:	4b3c      	ldr	r3, [pc, #240]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	4a3b      	ldr	r2, [pc, #236]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cbc:	61d3      	str	r3, [r2, #28]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 8087 	beq.w	8007dd6 <HAL_RCC_OscConfig+0x4f6>
 8007cc8:	4b36      	ldr	r3, [pc, #216]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 030c 	and.w	r3, r3, #12
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d061      	beq.n	8007d98 <HAL_RCC_OscConfig+0x4b8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d146      	bne.n	8007d6a <HAL_RCC_OscConfig+0x48a>
 8007cdc:	4b33      	ldr	r3, [pc, #204]	; (8007dac <HAL_RCC_OscConfig+0x4cc>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f7fe fa39 	bl	8006158 <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]
 8007ce8:	e008      	b.n	8007cfc <HAL_RCC_OscConfig+0x41c>
 8007cea:	f7fe fa35 	bl	8006158 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x41c>
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e06d      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007cfc:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f0      	bne.n	8007cea <HAL_RCC_OscConfig+0x40a>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d10:	d108      	bne.n	8007d24 <HAL_RCC_OscConfig+0x444>
 8007d12:	4b24      	ldr	r3, [pc, #144]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	4921      	ldr	r1, [pc, #132]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	604b      	str	r3, [r1, #4]
 8007d24:	4b1f      	ldr	r3, [pc, #124]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a19      	ldr	r1, [r3, #32]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	430b      	orrs	r3, r1
 8007d36:	491b      	ldr	r1, [pc, #108]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	604b      	str	r3, [r1, #4]
 8007d3c:	4b1b      	ldr	r3, [pc, #108]	; (8007dac <HAL_RCC_OscConfig+0x4cc>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	f7fe fa09 	bl	8006158 <HAL_GetTick>
 8007d46:	6138      	str	r0, [r7, #16]
 8007d48:	e008      	b.n	8007d5c <HAL_RCC_OscConfig+0x47c>
 8007d4a:	f7fe fa05 	bl	8006158 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x47c>
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e03d      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007d5c:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0f0      	beq.n	8007d4a <HAL_RCC_OscConfig+0x46a>
 8007d68:	e035      	b.n	8007dd6 <HAL_RCC_OscConfig+0x4f6>
 8007d6a:	4b10      	ldr	r3, [pc, #64]	; (8007dac <HAL_RCC_OscConfig+0x4cc>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	f7fe f9f2 	bl	8006158 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x4aa>
 8007d78:	f7fe f9ee 	bl	8006158 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x4aa>
 8007d86:	2303      	movs	r3, #3
 8007d88:	e026      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007d8a:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <HAL_RCC_OscConfig+0x4c4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f0      	bne.n	8007d78 <HAL_RCC_OscConfig+0x498>
 8007d96:	e01e      	b.n	8007dd6 <HAL_RCC_OscConfig+0x4f6>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d107      	bne.n	8007db0 <HAL_RCC_OscConfig+0x4d0>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e019      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007da4:	40021000 	.word	0x40021000
 8007da8:	40007000 	.word	0x40007000
 8007dac:	42420060 	.word	0x42420060
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <HAL_RCC_OscConfig+0x500>)
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x4f2>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d001      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x4f6>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCC_OscConfig+0x4f8>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40021000 	.word	0x40021000

08007de4 <HAL_RCC_ClockConfig>:
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <HAL_RCC_ClockConfig+0x14>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0d0      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007df8:	4b6a      	ldr	r3, [pc, #424]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d910      	bls.n	8007e28 <HAL_RCC_ClockConfig+0x44>
 8007e06:	4b67      	ldr	r3, [pc, #412]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f023 0207 	bic.w	r2, r3, #7
 8007e0e:	4965      	ldr	r1, [pc, #404]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	4b63      	ldr	r3, [pc, #396]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0307 	and.w	r3, r3, #7
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d001      	beq.n	8007e28 <HAL_RCC_ClockConfig+0x44>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0b8      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d020      	beq.n	8007e76 <HAL_RCC_ClockConfig+0x92>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x68>
 8007e40:	4b59      	ldr	r3, [pc, #356]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4a58      	ldr	r2, [pc, #352]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e4a:	6053      	str	r3, [r2, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x80>
 8007e58:	4b53      	ldr	r3, [pc, #332]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a52      	ldr	r2, [pc, #328]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007e62:	6053      	str	r3, [r2, #4]
 8007e64:	4b50      	ldr	r3, [pc, #320]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	494d      	ldr	r1, [pc, #308]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	604b      	str	r3, [r1, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d040      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x120>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d107      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xb6>
 8007e8a:	4b47      	ldr	r3, [pc, #284]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d115      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0xde>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e07f      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCC_ClockConfig+0xce>
 8007ea2:	4b41      	ldr	r3, [pc, #260]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0xde>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e073      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007eb2:	4b3d      	ldr	r3, [pc, #244]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0xde>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e06b      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007ec2:	4b39      	ldr	r3, [pc, #228]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f023 0203 	bic.w	r2, r3, #3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	4936      	ldr	r1, [pc, #216]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	604b      	str	r3, [r1, #4]
 8007ed4:	f7fe f940 	bl	8006158 <HAL_GetTick>
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	e00a      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x10e>
 8007edc:	f7fe f93c 	bl	8006158 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_ClockConfig+0x10e>
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e053      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007ef2:	4b2d      	ldr	r3, [pc, #180]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f003 020c 	and.w	r2, r3, #12
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d1eb      	bne.n	8007edc <HAL_RCC_ClockConfig+0xf8>
 8007f04:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d210      	bcs.n	8007f34 <HAL_RCC_ClockConfig+0x150>
 8007f12:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f023 0207 	bic.w	r2, r3, #7
 8007f1a:	4922      	ldr	r1, [pc, #136]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	600b      	str	r3, [r1, #0]
 8007f22:	4b20      	ldr	r3, [pc, #128]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d001      	beq.n	8007f34 <HAL_RCC_ClockConfig+0x150>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e032      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1b6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_RCC_ClockConfig+0x16e>
 8007f40:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	4916      	ldr	r1, [pc, #88]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	604b      	str	r3, [r1, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x18e>
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	490e      	ldr	r1, [pc, #56]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	604b      	str	r3, [r1, #4]
 8007f72:	f000 f821 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 8007f76:	4602      	mov	r2, r0
 8007f78:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	091b      	lsrs	r3, r3, #4
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	490a      	ldr	r1, [pc, #40]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f84:	5ccb      	ldrb	r3, [r1, r3]
 8007f86:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8a:	4a09      	ldr	r2, [pc, #36]	; (8007fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe f89e 	bl	80060d4 <HAL_InitTick>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40022000 	.word	0x40022000
 8007fa8:	40021000 	.word	0x40021000
 8007fac:	0800cf64 	.word	0x0800cf64
 8007fb0:	2000000c 	.word	0x2000000c
 8007fb4:	20000010 	.word	0x20000010

08007fb8 <HAL_RCC_GetSysClockFreq>:
 8007fb8:	b490      	push	{r4, r7}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4b29      	ldr	r3, [pc, #164]	; (8008064 <HAL_RCC_GetSysClockFreq+0xac>)
 8007fc0:	1d3c      	adds	r4, r7, #4
 8007fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007fc8:	f240 2301 	movw	r3, #513	; 0x201
 8007fcc:	803b      	strh	r3, [r7, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	623b      	str	r3, [r7, #32]
 8007fe2:	4b21      	ldr	r3, [pc, #132]	; (8008068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	61fb      	str	r3, [r7, #28]
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f003 030c 	and.w	r3, r3, #12
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d002      	beq.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d003      	beq.n	8007ffe <HAL_RCC_GetSysClockFreq+0x46>
 8007ff6:	e02b      	b.n	8008050 <HAL_RCC_GetSysClockFreq+0x98>
 8007ff8:	4b1c      	ldr	r3, [pc, #112]	; (800806c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007ffa:	623b      	str	r3, [r7, #32]
 8007ffc:	e02b      	b.n	8008056 <HAL_RCC_GetSysClockFreq+0x9e>
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	0c9b      	lsrs	r3, r3, #18
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	3328      	adds	r3, #40	; 0x28
 8008008:	443b      	add	r3, r7
 800800a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d012      	beq.n	8008040 <HAL_RCC_GetSysClockFreq+0x88>
 800801a:	4b13      	ldr	r3, [pc, #76]	; (8008068 <HAL_RCC_GetSysClockFreq+0xb0>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	0c5b      	lsrs	r3, r3, #17
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	3328      	adds	r3, #40	; 0x28
 8008026:	443b      	add	r3, r7
 8008028:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4a0e      	ldr	r2, [pc, #56]	; (800806c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008032:	fb03 f202 	mul.w	r2, r3, r2
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
 800803e:	e004      	b.n	800804a <HAL_RCC_GetSysClockFreq+0x92>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	4a0b      	ldr	r2, [pc, #44]	; (8008070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008044:	fb02 f303 	mul.w	r3, r2, r3
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	e002      	b.n	8008056 <HAL_RCC_GetSysClockFreq+0x9e>
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008052:	623b      	str	r3, [r7, #32]
 8008054:	bf00      	nop
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	; 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bc90      	pop	{r4, r7}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	0800c950 	.word	0x0800c950
 8008068:	40021000 	.word	0x40021000
 800806c:	00f42400 	.word	0x00f42400
 8008070:	003d0900 	.word	0x003d0900
 8008074:	007a1200 	.word	0x007a1200

08008078 <HAL_RCC_GetHCLKFreq>:
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <HAL_RCC_GetHCLKFreq+0x10>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr
 8008088:	2000000c 	.word	0x2000000c

0800808c <HAL_RCC_GetPCLK1Freq>:
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
 8008090:	f7ff fff2 	bl	8008078 <HAL_RCC_GetHCLKFreq>
 8008094:	4602      	mov	r2, r0
 8008096:	4b05      	ldr	r3, [pc, #20]	; (80080ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	4903      	ldr	r1, [pc, #12]	; (80080b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080a2:	5ccb      	ldrb	r3, [r1, r3]
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	4618      	mov	r0, r3
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40021000 	.word	0x40021000
 80080b0:	0800cf74 	.word	0x0800cf74

080080b4 <HAL_RCC_GetPCLK2Freq>:
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	f7ff ffde 	bl	8008078 <HAL_RCC_GetHCLKFreq>
 80080bc:	4602      	mov	r2, r0
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	0adb      	lsrs	r3, r3, #11
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	4903      	ldr	r1, [pc, #12]	; (80080d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ca:	5ccb      	ldrb	r3, [r1, r3]
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
 80080d0:	4618      	mov	r0, r3
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	40021000 	.word	0x40021000
 80080d8:	0800cf74 	.word	0x0800cf74

080080dc <RCC_Delay>:
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <RCC_Delay+0x34>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <RCC_Delay+0x38>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	0a5b      	lsrs	r3, r3, #9
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	fb02 f303 	mul.w	r3, r2, r3
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	bf00      	nop
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	60fa      	str	r2, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f9      	bne.n	80080f8 <RCC_Delay+0x1c>
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr
 8008110:	2000000c 	.word	0x2000000c
 8008114:	10624dd3 	.word	0x10624dd3

08008118 <HAL_TIM_Base_Init>:
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_Base_Init+0x12>
 8008126:	2301      	movs	r3, #1
 8008128:	e041      	b.n	80081ae <HAL_TIM_Base_Init+0x96>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_TIM_Base_Init+0x2c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fd fa3a 	bl	80055b8 <HAL_TIM_Base_MspInit>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f000 fd88 	bl	8008c6c <TIM_Base_SetConfig>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081ac:	2300      	movs	r3, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <HAL_TIM_Base_Start_IT>:
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d001      	beq.n	80081d0 <HAL_TIM_Base_Start_IT+0x18>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e044      	b.n	800825a <HAL_TIM_Base_Start_IT+0xa2>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	60da      	str	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <HAL_TIM_Base_Start_IT+0xac>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d018      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x6c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1c      	ldr	r2, [pc, #112]	; (8008268 <HAL_TIM_Base_Start_IT+0xb0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x6c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008204:	d00e      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x6c>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a18      	ldr	r2, [pc, #96]	; (800826c <HAL_TIM_Base_Start_IT+0xb4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x6c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <HAL_TIM_Base_Start_IT+0xb8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x6c>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a15      	ldr	r2, [pc, #84]	; (8008274 <HAL_TIM_Base_Start_IT+0xbc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d111      	bne.n	8008248 <HAL_TIM_Base_Start_IT+0x90>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b06      	cmp	r3, #6
 8008234:	d010      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0xa0>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e007      	b.n	8008258 <HAL_TIM_Base_Start_IT+0xa0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40013400 	.word	0x40013400
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00

08008278 <HAL_TIM_PWM_Init>:
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_TIM_PWM_Init+0x12>
 8008286:	2301      	movs	r3, #1
 8008288:	e041      	b.n	800830e <HAL_TIM_PWM_Init+0x96>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <HAL_TIM_PWM_Init+0x2c>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f839 	bl	8008316 <HAL_TIM_PWM_MspInit>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f000 fcd8 	bl	8008c6c <TIM_Base_SetConfig>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800830c:	2300      	movs	r3, #0
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_TIM_PWM_MspInit>:
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <HAL_TIM_PWM_Start>:
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d109      	bne.n	800834c <HAL_TIM_PWM_Start+0x24>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b01      	cmp	r3, #1
 8008342:	bf14      	ite	ne
 8008344:	2301      	movne	r3, #1
 8008346:	2300      	moveq	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	e022      	b.n	8008392 <HAL_TIM_PWM_Start+0x6a>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b04      	cmp	r3, #4
 8008350:	d109      	bne.n	8008366 <HAL_TIM_PWM_Start+0x3e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b01      	cmp	r3, #1
 800835c:	bf14      	ite	ne
 800835e:	2301      	movne	r3, #1
 8008360:	2300      	moveq	r3, #0
 8008362:	b2db      	uxtb	r3, r3
 8008364:	e015      	b.n	8008392 <HAL_TIM_PWM_Start+0x6a>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b08      	cmp	r3, #8
 800836a:	d109      	bne.n	8008380 <HAL_TIM_PWM_Start+0x58>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	bf14      	ite	ne
 8008378:	2301      	movne	r3, #1
 800837a:	2300      	moveq	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e008      	b.n	8008392 <HAL_TIM_PWM_Start+0x6a>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b01      	cmp	r3, #1
 800838a:	bf14      	ite	ne
 800838c:	2301      	movne	r3, #1
 800838e:	2300      	moveq	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_TIM_PWM_Start+0x72>
 8008396:	2301      	movs	r3, #1
 8008398:	e072      	b.n	8008480 <HAL_TIM_PWM_Start+0x158>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <HAL_TIM_PWM_Start+0x82>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a8:	e013      	b.n	80083d2 <HAL_TIM_PWM_Start+0xaa>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_PWM_Start+0x92>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083b8:	e00b      	b.n	80083d2 <HAL_TIM_PWM_Start+0xaa>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d104      	bne.n	80083ca <HAL_TIM_PWM_Start+0xa2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083c8:	e003      	b.n	80083d2 <HAL_TIM_PWM_Start+0xaa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2201      	movs	r2, #1
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 ff02 	bl	80091e4 <TIM_CCxChannelCmd>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a28      	ldr	r2, [pc, #160]	; (8008488 <HAL_TIM_PWM_Start+0x160>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d004      	beq.n	80083f4 <HAL_TIM_PWM_Start+0xcc>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a27      	ldr	r2, [pc, #156]	; (800848c <HAL_TIM_PWM_Start+0x164>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d101      	bne.n	80083f8 <HAL_TIM_PWM_Start+0xd0>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <HAL_TIM_PWM_Start+0xd2>
 80083f8:	2300      	movs	r3, #0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <HAL_TIM_PWM_Start+0xe6>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800840c:	645a      	str	r2, [r3, #68]	; 0x44
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1d      	ldr	r2, [pc, #116]	; (8008488 <HAL_TIM_PWM_Start+0x160>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d018      	beq.n	800844a <HAL_TIM_PWM_Start+0x122>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1b      	ldr	r2, [pc, #108]	; (800848c <HAL_TIM_PWM_Start+0x164>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <HAL_TIM_PWM_Start+0x122>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d00e      	beq.n	800844a <HAL_TIM_PWM_Start+0x122>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a17      	ldr	r2, [pc, #92]	; (8008490 <HAL_TIM_PWM_Start+0x168>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d009      	beq.n	800844a <HAL_TIM_PWM_Start+0x122>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a16      	ldr	r2, [pc, #88]	; (8008494 <HAL_TIM_PWM_Start+0x16c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d004      	beq.n	800844a <HAL_TIM_PWM_Start+0x122>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a14      	ldr	r2, [pc, #80]	; (8008498 <HAL_TIM_PWM_Start+0x170>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d111      	bne.n	800846e <HAL_TIM_PWM_Start+0x146>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b06      	cmp	r3, #6
 800845a:	d010      	beq.n	800847e <HAL_TIM_PWM_Start+0x156>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	e007      	b.n	800847e <HAL_TIM_PWM_Start+0x156>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0201 	orr.w	r2, r2, #1
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	40012c00 	.word	0x40012c00
 800848c:	40013400 	.word	0x40013400
 8008490:	40000400 	.word	0x40000400
 8008494:	40000800 	.word	0x40000800
 8008498:	40000c00 	.word	0x40000c00

0800849c <HAL_TIM_Encoder_Init>:
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_TIM_Encoder_Init+0x14>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e093      	b.n	80085d8 <HAL_TIM_Encoder_Init+0x13c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d106      	bne.n	80084ca <HAL_TIM_Encoder_Init+0x2e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fd f8c5 	bl	8005654 <HAL_TIM_Encoder_MspInit>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6812      	ldr	r2, [r2, #0]
 80084dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	6093      	str	r3, [r2, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f000 fbbb 	bl	8008c6c <TIM_Base_SetConfig>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	4313      	orrs	r3, r2
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800853c:	f023 030c 	bic.w	r3, r3, #12
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	4313      	orrs	r3, r2
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	011a      	lsls	r2, r3, #4
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	031b      	lsls	r3, r3, #12
 800856c:	4313      	orrs	r3, r2
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	4313      	orrs	r3, r2
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	609a      	str	r2, [r3, #8]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	619a      	str	r2, [r3, #24]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	621a      	str	r2, [r3, #32]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085d6:	2300      	movs	r3, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_TIM_Encoder_Start>:
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f0:	73fb      	strb	r3, [r7, #15]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085f8:	73bb      	strb	r3, [r7, #14]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008600:	737b      	strb	r3, [r7, #13]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008608:	733b      	strb	r3, [r7, #12]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d110      	bne.n	8008632 <HAL_TIM_Encoder_Start+0x52>
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d102      	bne.n	800861c <HAL_TIM_Encoder_Start+0x3c>
 8008616:	7b7b      	ldrb	r3, [r7, #13]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d001      	beq.n	8008620 <HAL_TIM_Encoder_Start+0x40>
 800861c:	2301      	movs	r3, #1
 800861e:	e069      	b.n	80086f4 <HAL_TIM_Encoder_Start+0x114>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008630:	e031      	b.n	8008696 <HAL_TIM_Encoder_Start+0xb6>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b04      	cmp	r3, #4
 8008636:	d110      	bne.n	800865a <HAL_TIM_Encoder_Start+0x7a>
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d102      	bne.n	8008644 <HAL_TIM_Encoder_Start+0x64>
 800863e:	7b3b      	ldrb	r3, [r7, #12]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d001      	beq.n	8008648 <HAL_TIM_Encoder_Start+0x68>
 8008644:	2301      	movs	r3, #1
 8008646:	e055      	b.n	80086f4 <HAL_TIM_Encoder_Start+0x114>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008658:	e01d      	b.n	8008696 <HAL_TIM_Encoder_Start+0xb6>
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d108      	bne.n	8008672 <HAL_TIM_Encoder_Start+0x92>
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d105      	bne.n	8008672 <HAL_TIM_Encoder_Start+0x92>
 8008666:	7b7b      	ldrb	r3, [r7, #13]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d102      	bne.n	8008672 <HAL_TIM_Encoder_Start+0x92>
 800866c:	7b3b      	ldrb	r3, [r7, #12]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d001      	beq.n	8008676 <HAL_TIM_Encoder_Start+0x96>
 8008672:	2301      	movs	r3, #1
 8008674:	e03e      	b.n	80086f4 <HAL_TIM_Encoder_Start+0x114>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2202      	movs	r2, #2
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2202      	movs	r2, #2
 8008682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2202      	movs	r2, #2
 800868a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_TIM_Encoder_Start+0xc4>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d008      	beq.n	80086b4 <HAL_TIM_Encoder_Start+0xd4>
 80086a2:	e00f      	b.n	80086c4 <HAL_TIM_Encoder_Start+0xe4>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2201      	movs	r2, #1
 80086aa:	2100      	movs	r1, #0
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fd99 	bl	80091e4 <TIM_CCxChannelCmd>
 80086b2:	e016      	b.n	80086e2 <HAL_TIM_Encoder_Start+0x102>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2201      	movs	r2, #1
 80086ba:	2104      	movs	r1, #4
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fd91 	bl	80091e4 <TIM_CCxChannelCmd>
 80086c2:	e00e      	b.n	80086e2 <HAL_TIM_Encoder_Start+0x102>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2201      	movs	r2, #1
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fd89 	bl	80091e4 <TIM_CCxChannelCmd>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2201      	movs	r2, #1
 80086d8:	2104      	movs	r1, #4
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fd82 	bl	80091e4 <TIM_CCxChannelCmd>
 80086e0:	bf00      	nop
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0201 	orr.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	2300      	movs	r3, #0
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_TIM_IRQHandler>:
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b02      	cmp	r3, #2
 8008710:	d122      	bne.n	8008758 <HAL_TIM_IRQHandler+0x5c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d11b      	bne.n	8008758 <HAL_TIM_IRQHandler+0x5c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0202 	mvn.w	r2, #2
 8008728:	611a      	str	r2, [r3, #16]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	771a      	strb	r2, [r3, #28]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_TIM_IRQHandler+0x4a>
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa78 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 8008744:	e005      	b.n	8008752 <HAL_TIM_IRQHandler+0x56>
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa6b 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fa7a 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b04      	cmp	r3, #4
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0xb0>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b04      	cmp	r3, #4
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0xb0>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0204 	mvn.w	r2, #4
 800877c:	611a      	str	r2, [r3, #16]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	771a      	strb	r2, [r3, #28]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x9e>
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa4e 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0xaa>
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa41 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa50 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0x104>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0x104>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0208 	mvn.w	r2, #8
 80087d0:	611a      	str	r2, [r3, #16]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	771a      	strb	r2, [r3, #28]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0xf2>
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa24 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xfe>
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa17 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa26 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	2b10      	cmp	r3, #16
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x158>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b10      	cmp	r3, #16
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x158>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0210 	mvn.w	r2, #16
 8008824:	611a      	str	r2, [r3, #16]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2208      	movs	r2, #8
 800882a:	771a      	strb	r2, [r3, #28]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0x146>
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9fa 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0x152>
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f9ed 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9fc 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10e      	bne.n	8008880 <HAL_TIM_IRQHandler+0x184>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d107      	bne.n	8008880 <HAL_TIM_IRQHandler+0x184>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0201 	mvn.w	r2, #1
 8008878:	611a      	str	r2, [r3, #16]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f9c8 	bl	8008c10 <HAL_TIM_PeriodElapsedCallback>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b80      	cmp	r3, #128	; 0x80
 800888c:	d10e      	bne.n	80088ac <HAL_TIM_IRQHandler+0x1b0>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008898:	2b80      	cmp	r3, #128	; 0x80
 800889a:	d107      	bne.n	80088ac <HAL_TIM_IRQHandler+0x1b0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088a4:	611a      	str	r2, [r3, #16]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fd86 	bl	80093b8 <HAL_TIMEx_BreakCallback>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	d10e      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x1dc>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d107      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x1dc>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088d0:	611a      	str	r2, [r3, #16]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f9c0 	bl	8008c58 <HAL_TIM_TriggerCallback>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d10e      	bne.n	8008904 <HAL_TIM_IRQHandler+0x208>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d107      	bne.n	8008904 <HAL_TIM_IRQHandler+0x208>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0220 	mvn.w	r2, #32
 80088fc:	611a      	str	r2, [r3, #16]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fd51 	bl	80093a6 <HAL_TIMEx_CommutCallback>
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_TIM_PWM_ConfigChannel>:
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008922:	2302      	movs	r3, #2
 8008924:	e0ac      	b.n	8008a80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b0c      	cmp	r3, #12
 8008932:	f200 809f 	bhi.w	8008a74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008971 	.word	0x08008971
 8008940:	08008a75 	.word	0x08008a75
 8008944:	08008a75 	.word	0x08008a75
 8008948:	08008a75 	.word	0x08008a75
 800894c:	080089b1 	.word	0x080089b1
 8008950:	08008a75 	.word	0x08008a75
 8008954:	08008a75 	.word	0x08008a75
 8008958:	08008a75 	.word	0x08008a75
 800895c:	080089f3 	.word	0x080089f3
 8008960:	08008a75 	.word	0x08008a75
 8008964:	08008a75 	.word	0x08008a75
 8008968:	08008a75 	.word	0x08008a75
 800896c:	08008a33 	.word	0x08008a33
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f9f2 	bl	8008d60 <TIM_OC1_SetConfig>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699a      	ldr	r2, [r3, #24]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	619a      	str	r2, [r3, #24]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0204 	bic.w	r2, r2, #4
 800899a:	619a      	str	r2, [r3, #24]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6999      	ldr	r1, [r3, #24]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	619a      	str	r2, [r3, #24]
 80089ae:	e062      	b.n	8008a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fa42 	bl	8008e40 <TIM_OC2_SetConfig>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ca:	619a      	str	r2, [r3, #24]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089da:	619a      	str	r2, [r3, #24]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	021a      	lsls	r2, r3, #8
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	619a      	str	r2, [r3, #24]
 80089f0:	e041      	b.n	8008a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fa95 	bl	8008f28 <TIM_OC3_SetConfig>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69da      	ldr	r2, [r3, #28]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f042 0208 	orr.w	r2, r2, #8
 8008a0c:	61da      	str	r2, [r3, #28]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69da      	ldr	r2, [r3, #28]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0204 	bic.w	r2, r2, #4
 8008a1c:	61da      	str	r2, [r3, #28]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69d9      	ldr	r1, [r3, #28]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	61da      	str	r2, [r3, #28]
 8008a30:	e021      	b.n	8008a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fae9 	bl	8009010 <TIM_OC4_SetConfig>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a4c:	61da      	str	r2, [r3, #28]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69da      	ldr	r2, [r3, #28]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a5c:	61da      	str	r2, [r3, #28]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69d9      	ldr	r1, [r3, #28]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	021a      	lsls	r2, r3, #8
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	61da      	str	r2, [r3, #28]
 8008a72:	e000      	b.n	8008a76 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008a74:	bf00      	nop
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_TIM_ConfigClockSource>:
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d101      	bne.n	8008aa0 <HAL_TIM_ConfigClockSource+0x18>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	e0b3      	b.n	8008c08 <HAL_TIM_ConfigClockSource+0x180>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	609a      	str	r2, [r3, #8]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ad8:	d03e      	beq.n	8008b58 <HAL_TIM_ConfigClockSource+0xd0>
 8008ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ade:	f200 8087 	bhi.w	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae6:	f000 8085 	beq.w	8008bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8008aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aee:	d87f      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008af0:	2b70      	cmp	r3, #112	; 0x70
 8008af2:	d01a      	beq.n	8008b2a <HAL_TIM_ConfigClockSource+0xa2>
 8008af4:	2b70      	cmp	r3, #112	; 0x70
 8008af6:	d87b      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008af8:	2b60      	cmp	r3, #96	; 0x60
 8008afa:	d050      	beq.n	8008b9e <HAL_TIM_ConfigClockSource+0x116>
 8008afc:	2b60      	cmp	r3, #96	; 0x60
 8008afe:	d877      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008b00:	2b50      	cmp	r3, #80	; 0x50
 8008b02:	d03c      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0xf6>
 8008b04:	2b50      	cmp	r3, #80	; 0x50
 8008b06:	d873      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008b08:	2b40      	cmp	r3, #64	; 0x40
 8008b0a:	d058      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0x136>
 8008b0c:	2b40      	cmp	r3, #64	; 0x40
 8008b0e:	d86f      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008b10:	2b30      	cmp	r3, #48	; 0x30
 8008b12:	d064      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x156>
 8008b14:	2b30      	cmp	r3, #48	; 0x30
 8008b16:	d86b      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008b18:	2b20      	cmp	r3, #32
 8008b1a:	d060      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x156>
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d867      	bhi.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d05c      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x156>
 8008b24:	2b10      	cmp	r3, #16
 8008b26:	d05a      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x156>
 8008b28:	e062      	b.n	8008bf0 <HAL_TIM_ConfigClockSource+0x168>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6899      	ldr	r1, [r3, #8]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f000 fb34 	bl	80091a6 <TIM_ETR_SetConfig>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	609a      	str	r2, [r3, #8]
 8008b56:	e04e      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	6899      	ldr	r1, [r3, #8]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f000 fb1d 	bl	80091a6 <TIM_ETR_SetConfig>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689a      	ldr	r2, [r3, #8]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b7a:	609a      	str	r2, [r3, #8]
 8008b7c:	e03b      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6859      	ldr	r1, [r3, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f000 fa94 	bl	80090b8 <TIM_TI1_ConfigInputStage>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2150      	movs	r1, #80	; 0x50
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 faeb 	bl	8009172 <TIM_ITRx_SetConfig>
 8008b9c:	e02b      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6859      	ldr	r1, [r3, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f000 fab2 	bl	8009114 <TIM_TI2_ConfigInputStage>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2160      	movs	r1, #96	; 0x60
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fadb 	bl	8009172 <TIM_ITRx_SetConfig>
 8008bbc:	e01b      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	6859      	ldr	r1, [r3, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f000 fa74 	bl	80090b8 <TIM_TI1_ConfigInputStage>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2140      	movs	r1, #64	; 0x40
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 facb 	bl	8009172 <TIM_ITRx_SetConfig>
 8008bdc:	e00b      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f000 fac2 	bl	8009172 <TIM_ITRx_SetConfig>
 8008bee:	e002      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008bf0:	bf00      	nop
 8008bf2:	e000      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x16e>
 8008bf4:	bf00      	nop
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c06:	2300      	movs	r3, #0
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_TIM_PeriodElapsedCallback>:
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bc80      	pop	{r7}
 8008c20:	4770      	bx	lr

08008c22 <HAL_TIM_OC_DelayElapsedCallback>:
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIM_IC_CaptureCallback>:
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bc80      	pop	{r7}
 8008c56:	4770      	bx	lr

08008c58 <HAL_TIM_TriggerCallback>:
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr
	...

08008c6c <TIM_Base_SetConfig>:
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a33      	ldr	r2, [pc, #204]	; (8008d4c <TIM_Base_SetConfig+0xe0>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d013      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a32      	ldr	r2, [pc, #200]	; (8008d50 <TIM_Base_SetConfig+0xe4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00f      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c92:	d00b      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a2f      	ldr	r2, [pc, #188]	; (8008d54 <TIM_Base_SetConfig+0xe8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d007      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a2e      	ldr	r2, [pc, #184]	; (8008d58 <TIM_Base_SetConfig+0xec>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d003      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a2d      	ldr	r2, [pc, #180]	; (8008d5c <TIM_Base_SetConfig+0xf0>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d108      	bne.n	8008cbe <TIM_Base_SetConfig+0x52>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a22      	ldr	r2, [pc, #136]	; (8008d4c <TIM_Base_SetConfig+0xe0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d013      	beq.n	8008cee <TIM_Base_SetConfig+0x82>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a21      	ldr	r2, [pc, #132]	; (8008d50 <TIM_Base_SetConfig+0xe4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00f      	beq.n	8008cee <TIM_Base_SetConfig+0x82>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd4:	d00b      	beq.n	8008cee <TIM_Base_SetConfig+0x82>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a1e      	ldr	r2, [pc, #120]	; (8008d54 <TIM_Base_SetConfig+0xe8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d007      	beq.n	8008cee <TIM_Base_SetConfig+0x82>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <TIM_Base_SetConfig+0xec>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d003      	beq.n	8008cee <TIM_Base_SetConfig+0x82>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <TIM_Base_SetConfig+0xf0>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d108      	bne.n	8008d00 <TIM_Base_SetConfig+0x94>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	629a      	str	r2, [r3, #40]	; 0x28
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <TIM_Base_SetConfig+0xe0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_Base_SetConfig+0xc8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a08      	ldr	r2, [pc, #32]	; (8008d50 <TIM_Base_SetConfig+0xe4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d103      	bne.n	8008d3c <TIM_Base_SetConfig+0xd0>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	615a      	str	r2, [r3, #20]
 8008d42:	bf00      	nop
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr
 8008d4c:	40012c00 	.word	0x40012c00
 8008d50:	40013400 	.word	0x40013400
 8008d54:	40000400 	.word	0x40000400
 8008d58:	40000800 	.word	0x40000800
 8008d5c:	40000c00 	.word	0x40000c00

08008d60 <TIM_OC1_SetConfig>:
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0201 	bic.w	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	621a      	str	r2, [r3, #32]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 0302 	bic.w	r3, r3, #2
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <TIM_OC1_SetConfig+0xd8>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x64>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1f      	ldr	r2, [pc, #124]	; (8008e3c <TIM_OC1_SetConfig+0xdc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d10c      	bne.n	8008dde <TIM_OC1_SetConfig+0x7e>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 0308 	bic.w	r3, r3, #8
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 0304 	bic.w	r3, r3, #4
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <TIM_OC1_SetConfig+0xd8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d003      	beq.n	8008dee <TIM_OC1_SetConfig+0x8e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a14      	ldr	r2, [pc, #80]	; (8008e3c <TIM_OC1_SetConfig+0xdc>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d111      	bne.n	8008e12 <TIM_OC1_SetConfig+0xb2>
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dfc:	613b      	str	r3, [r7, #16]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	619a      	str	r2, [r3, #24]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	635a      	str	r2, [r3, #52]	; 0x34
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	621a      	str	r2, [r3, #32]
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40012c00 	.word	0x40012c00
 8008e3c:	40013400 	.word	0x40013400

08008e40 <TIM_OC2_SetConfig>:
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	f023 0210 	bic.w	r2, r3, #16
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	621a      	str	r2, [r3, #32]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0320 	bic.w	r3, r3, #32
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a21      	ldr	r2, [pc, #132]	; (8008f20 <TIM_OC2_SetConfig+0xe0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_OC2_SetConfig+0x68>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a20      	ldr	r2, [pc, #128]	; (8008f24 <TIM_OC2_SetConfig+0xe4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d10d      	bne.n	8008ec4 <TIM_OC2_SetConfig+0x84>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a16      	ldr	r2, [pc, #88]	; (8008f20 <TIM_OC2_SetConfig+0xe0>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC2_SetConfig+0x94>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a15      	ldr	r2, [pc, #84]	; (8008f24 <TIM_OC2_SetConfig+0xe4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d113      	bne.n	8008efc <TIM_OC2_SetConfig+0xbc>
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	619a      	str	r2, [r3, #24]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	621a      	str	r2, [r3, #32]
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bc80      	pop	{r7}
 8008f1e:	4770      	bx	lr
 8008f20:	40012c00 	.word	0x40012c00
 8008f24:	40013400 	.word	0x40013400

08008f28 <TIM_OC3_SetConfig>:
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	621a      	str	r2, [r3, #32]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0303 	bic.w	r3, r3, #3
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a21      	ldr	r2, [pc, #132]	; (8009008 <TIM_OC3_SetConfig+0xe0>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d003      	beq.n	8008f8e <TIM_OC3_SetConfig+0x66>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a20      	ldr	r2, [pc, #128]	; (800900c <TIM_OC3_SetConfig+0xe4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d10d      	bne.n	8008faa <TIM_OC3_SetConfig+0x82>
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a16      	ldr	r2, [pc, #88]	; (8009008 <TIM_OC3_SetConfig+0xe0>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d003      	beq.n	8008fba <TIM_OC3_SetConfig+0x92>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a15      	ldr	r2, [pc, #84]	; (800900c <TIM_OC3_SetConfig+0xe4>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d113      	bne.n	8008fe2 <TIM_OC3_SetConfig+0xba>
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fc0:	613b      	str	r3, [r7, #16]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fc8:	613b      	str	r3, [r7, #16]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	61da      	str	r2, [r3, #28]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	621a      	str	r2, [r3, #32]
 8008ffc:	bf00      	nop
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	40012c00 	.word	0x40012c00
 800900c:	40013400 	.word	0x40013400

08009010 <TIM_OC4_SetConfig>:
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	621a      	str	r2, [r3, #32]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	031b      	lsls	r3, r3, #12
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	4313      	orrs	r3, r2
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a11      	ldr	r2, [pc, #68]	; (80090b0 <TIM_OC4_SetConfig+0xa0>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_OC4_SetConfig+0x68>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a10      	ldr	r2, [pc, #64]	; (80090b4 <TIM_OC4_SetConfig+0xa4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d109      	bne.n	800908c <TIM_OC4_SetConfig+0x7c>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	019b      	lsls	r3, r3, #6
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	61da      	str	r2, [r3, #28]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	641a      	str	r2, [r3, #64]	; 0x40
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	621a      	str	r2, [r3, #32]
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bc80      	pop	{r7}
 80090ae:	4770      	bx	lr
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40013400 	.word	0x40013400

080090b8 <TIM_TI1_ConfigInputStage>:
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	f023 0201 	bic.w	r2, r3, #1
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	621a      	str	r2, [r3, #32]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	613b      	str	r3, [r7, #16]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f023 030a 	bic.w	r3, r3, #10
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	619a      	str	r2, [r3, #24]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	621a      	str	r2, [r3, #32]
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <TIM_TI2_ConfigInputStage>:
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f023 0210 	bic.w	r2, r3, #16
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	621a      	str	r2, [r3, #32]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	031b      	lsls	r3, r3, #12
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	4313      	orrs	r3, r2
 800915a:	613b      	str	r3, [r7, #16]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	619a      	str	r2, [r3, #24]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	621a      	str	r2, [r3, #32]
 8009168:	bf00      	nop
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr

08009172 <TIM_ITRx_SetConfig>:
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	f043 0307 	orr.w	r3, r3, #7
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	bf00      	nop
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bc80      	pop	{r7}
 80091a4:	4770      	bx	lr

080091a6 <TIM_ETR_SetConfig>:
 80091a6:	b480      	push	{r7}
 80091a8:	b087      	sub	sp, #28
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	021a      	lsls	r2, r3, #8
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	431a      	orrs	r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	609a      	str	r2, [r3, #8]
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr

080091e4 <TIM_CCxChannelCmd>:
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f003 031f 	and.w	r3, r3, #31
 80091f6:	2201      	movs	r2, #1
 80091f8:	fa02 f303 	lsl.w	r3, r2, r3
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a1a      	ldr	r2, [r3, #32]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	43db      	mvns	r3, r3
 8009206:	401a      	ands	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	621a      	str	r2, [r3, #32]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a1a      	ldr	r2, [r3, #32]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	fa01 f303 	lsl.w	r3, r1, r3
 800921c:	431a      	orrs	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	621a      	str	r2, [r3, #32]
 8009222:	bf00      	nop
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	bc80      	pop	{r7}
 800922a:	4770      	bx	lr

0800922c <HAL_TIMEx_MasterConfigSynchronization>:
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800923c:	2b01      	cmp	r3, #1
 800923e:	d101      	bne.n	8009244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009240:	2302      	movs	r3, #2
 8009242:	e050      	b.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	60bb      	str	r3, [r7, #8]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	605a      	str	r2, [r3, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1b      	ldr	r2, [pc, #108]	; (80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d018      	beq.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929a:	d00e      	beq.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d009      	beq.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a14      	ldr	r2, [pc, #80]	; (80092fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d004      	beq.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a12      	ldr	r2, [pc, #72]	; (8009300 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d10c      	bne.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	609a      	str	r2, [r3, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092e4:	2300      	movs	r3, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	40013400 	.word	0x40013400
 80092f8:	40000400 	.word	0x40000400
 80092fc:	40000800 	.word	0x40000800
 8009300:	40000c00 	.word	0x40000c00

08009304 <HAL_TIMEx_ConfigBreakDeadTime>:
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800931c:	2302      	movs	r3, #2
 800931e:	e03d      	b.n	800939c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	645a      	str	r2, [r3, #68]	; 0x44
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800939a:	2300      	movs	r3, #0
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr

080093a6 <HAL_TIMEx_CommutCallback>:
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_BreakCallback>:
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr

080093ca <HAL_UART_Init>:
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <HAL_UART_Init+0x12>
 80093d8:	2301      	movs	r3, #1
 80093da:	e03f      	b.n	800945c <HAL_UART_Init+0x92>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <HAL_UART_Init+0x2c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7fc fa75 	bl	80058e0 <HAL_UART_MspInit>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2224      	movs	r2, #36	; 0x24
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fdde 	bl	8009fd0 <UART_SetConfig>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691a      	ldr	r2, [r3, #16]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009422:	611a      	str	r2, [r3, #16]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	695a      	ldr	r2, [r3, #20]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009432:	615a      	str	r2, [r3, #20]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009442:	60da      	str	r2, [r3, #12]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	641a      	str	r2, [r3, #64]	; 0x40
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800945a:	2300      	movs	r3, #0
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_UART_Transmit>:
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	; 0x28
 8009468:	af02      	add	r7, sp, #8
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	4613      	mov	r3, r2
 8009472:	80fb      	strh	r3, [r7, #6]
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b20      	cmp	r3, #32
 8009482:	d17c      	bne.n	800957e <HAL_UART_Transmit+0x11a>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <HAL_UART_Transmit+0x2c>
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_UART_Transmit+0x30>
 8009490:	2301      	movs	r3, #1
 8009492:	e075      	b.n	8009580 <HAL_UART_Transmit+0x11c>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_UART_Transmit+0x3e>
 800949e:	2302      	movs	r3, #2
 80094a0:	e06e      	b.n	8009580 <HAL_UART_Transmit+0x11c>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	641a      	str	r2, [r3, #64]	; 0x40
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2221      	movs	r2, #33	; 0x21
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094b8:	f7fc fe4e 	bl	8006158 <HAL_GetTick>
 80094bc:	6178      	str	r0, [r7, #20]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	88fa      	ldrh	r2, [r7, #6]
 80094c2:	849a      	strh	r2, [r3, #36]	; 0x24
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	88fa      	ldrh	r2, [r7, #6]
 80094c8:	84da      	strh	r2, [r3, #38]	; 0x26
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d2:	d108      	bne.n	80094e6 <HAL_UART_Transmit+0x82>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <HAL_UART_Transmit+0x82>
 80094dc:	2300      	movs	r3, #0
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	61bb      	str	r3, [r7, #24]
 80094e4:	e003      	b.n	80094ee <HAL_UART_Transmit+0x8a>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	61fb      	str	r3, [r7, #28]
 80094ea:	2300      	movs	r3, #0
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094f6:	e02a      	b.n	800954e <HAL_UART_Transmit+0xea>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2200      	movs	r2, #0
 8009500:	2180      	movs	r1, #128	; 0x80
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fb17 	bl	8009b36 <UART_WaitOnFlagUntilTimeout>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_UART_Transmit+0xae>
 800950e:	2303      	movs	r3, #3
 8009510:	e036      	b.n	8009580 <HAL_UART_Transmit+0x11c>
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10b      	bne.n	8009530 <HAL_UART_Transmit+0xcc>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009526:	605a      	str	r2, [r3, #4]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	3302      	adds	r3, #2
 800952c:	61bb      	str	r3, [r7, #24]
 800952e:	e007      	b.n	8009540 <HAL_UART_Transmit+0xdc>
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	781a      	ldrb	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	605a      	str	r2, [r3, #4]
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	3301      	adds	r3, #1
 800953e:	61fb      	str	r3, [r7, #28]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	84da      	strh	r2, [r3, #38]	; 0x26
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1cf      	bne.n	80094f8 <HAL_UART_Transmit+0x94>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2200      	movs	r2, #0
 8009560:	2140      	movs	r1, #64	; 0x40
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fae7 	bl	8009b36 <UART_WaitOnFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <HAL_UART_Transmit+0x10e>
 800956e:	2303      	movs	r3, #3
 8009570:	e006      	b.n	8009580 <HAL_UART_Transmit+0x11c>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2220      	movs	r2, #32
 8009576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800957a:	2300      	movs	r3, #0
 800957c:	e000      	b.n	8009580 <HAL_UART_Transmit+0x11c>
 800957e:	2302      	movs	r3, #2
 8009580:	4618      	mov	r0, r3
 8009582:	3720      	adds	r7, #32
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_UART_Receive_IT>:
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d11d      	bne.n	80095de <HAL_UART_Receive_IT+0x56>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <HAL_UART_Receive_IT+0x26>
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <HAL_UART_Receive_IT+0x2a>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e016      	b.n	80095e0 <HAL_UART_Receive_IT+0x58>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_UART_Receive_IT+0x38>
 80095bc:	2302      	movs	r3, #2
 80095be:	e00f      	b.n	80095e0 <HAL_UART_Receive_IT+0x58>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	631a      	str	r2, [r3, #48]	; 0x30
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 faf8 	bl	8009bca <UART_Start_Receive_IT>
 80095da:	4603      	mov	r3, r0
 80095dc:	e000      	b.n	80095e0 <HAL_UART_Receive_IT+0x58>
 80095de:	2302      	movs	r3, #2
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_UART_Receive_DMA>:
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d11d      	bne.n	800963e <HAL_UART_Receive_DMA+0x56>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_UART_Receive_DMA+0x26>
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_UART_Receive_DMA+0x2a>
 800960e:	2301      	movs	r3, #1
 8009610:	e016      	b.n	8009640 <HAL_UART_Receive_DMA+0x58>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_UART_Receive_DMA+0x38>
 800961c:	2302      	movs	r3, #2
 800961e:	e00f      	b.n	8009640 <HAL_UART_Receive_DMA+0x58>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
 800962e:	88fb      	ldrh	r3, [r7, #6]
 8009630:	461a      	mov	r2, r3
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 fb01 	bl	8009c3c <UART_Start_Receive_DMA>
 800963a:	4603      	mov	r3, r0
 800963c:	e000      	b.n	8009640 <HAL_UART_Receive_DMA+0x58>
 800963e:	2302      	movs	r3, #2
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_UART_IRQHandler>:
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	; 0x28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	623b      	str	r3, [r7, #32]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	2300      	movs	r3, #0
 800966a:	61bb      	str	r3, [r7, #24]
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10d      	bne.n	800969a <HAL_UART_IRQHandler+0x52>
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d008      	beq.n	800969a <HAL_UART_IRQHandler+0x52>
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_UART_IRQHandler+0x52>
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fbf2 	bl	8009e7c <UART_Receive_IT>
 8009698:	e17b      	b.n	8009992 <HAL_UART_IRQHandler+0x34a>
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 80b1 	beq.w	8009804 <HAL_UART_IRQHandler+0x1bc>
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d105      	bne.n	80096b8 <HAL_UART_IRQHandler+0x70>
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80a6 	beq.w	8009804 <HAL_UART_IRQHandler+0x1bc>
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <HAL_UART_IRQHandler+0x90>
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <HAL_UART_IRQHandler+0x90>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	f043 0201 	orr.w	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <HAL_UART_IRQHandler+0xb0>
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_UART_IRQHandler+0xb0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	f043 0202 	orr.w	r2, r3, #2
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	641a      	str	r2, [r3, #64]	; 0x40
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <HAL_UART_IRQHandler+0xd0>
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <HAL_UART_IRQHandler+0xd0>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	f043 0204 	orr.w	r2, r3, #4
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	641a      	str	r2, [r3, #64]	; 0x40
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	f003 0308 	and.w	r3, r3, #8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00f      	beq.n	8009742 <HAL_UART_IRQHandler+0xfa>
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <HAL_UART_IRQHandler+0xee>
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <HAL_UART_IRQHandler+0xfa>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	f043 0208 	orr.w	r2, r3, #8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 811e 	beq.w	8009988 <HAL_UART_IRQHandler+0x340>
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d007      	beq.n	8009766 <HAL_UART_IRQHandler+0x11e>
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_UART_IRQHandler+0x11e>
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fb8b 	bl	8009e7c <UART_Receive_IT>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	bf14      	ite	ne
 8009774:	2301      	movne	r3, #1
 8009776:	2300      	moveq	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009780:	f003 0308 	and.w	r3, r3, #8
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <HAL_UART_IRQHandler+0x146>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d031      	beq.n	80097f2 <HAL_UART_IRQHandler+0x1aa>
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 facd 	bl	8009d2e <UART_EndRxTransfer>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d023      	beq.n	80097ea <HAL_UART_IRQHandler+0x1a2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695a      	ldr	r2, [r3, #20]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097b0:	615a      	str	r2, [r3, #20]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d013      	beq.n	80097e2 <HAL_UART_IRQHandler+0x19a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	4a76      	ldr	r2, [pc, #472]	; (8009998 <HAL_UART_IRQHandler+0x350>)
 80097c0:	635a      	str	r2, [r3, #52]	; 0x34
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fc ff12 	bl	80065f0 <HAL_DMA_Abort_IT>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d016      	beq.n	8009800 <HAL_UART_IRQHandler+0x1b8>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	e00e      	b.n	8009800 <HAL_UART_IRQHandler+0x1b8>
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7fa ff0e 	bl	8004604 <HAL_UART_ErrorCallback>
 80097e8:	e00a      	b.n	8009800 <HAL_UART_IRQHandler+0x1b8>
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fa ff0a 	bl	8004604 <HAL_UART_ErrorCallback>
 80097f0:	e006      	b.n	8009800 <HAL_UART_IRQHandler+0x1b8>
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fa ff06 	bl	8004604 <HAL_UART_ErrorCallback>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	641a      	str	r2, [r3, #64]	; 0x40
 80097fe:	e0c3      	b.n	8009988 <HAL_UART_IRQHandler+0x340>
 8009800:	bf00      	nop
 8009802:	e0c1      	b.n	8009988 <HAL_UART_IRQHandler+0x340>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	2b01      	cmp	r3, #1
 800980a:	f040 80a1 	bne.w	8009950 <HAL_UART_IRQHandler+0x308>
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 809b 	beq.w	8009950 <HAL_UART_IRQHandler+0x308>
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 8095 	beq.w	8009950 <HAL_UART_IRQHandler+0x308>
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d04e      	beq.n	80098e8 <HAL_UART_IRQHandler+0x2a0>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	823b      	strh	r3, [r7, #16]
 8009854:	8a3b      	ldrh	r3, [r7, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 8098 	beq.w	800998c <HAL_UART_IRQHandler+0x344>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009860:	8a3a      	ldrh	r2, [r7, #16]
 8009862:	429a      	cmp	r2, r3
 8009864:	f080 8092 	bcs.w	800998c <HAL_UART_IRQHandler+0x344>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	8a3a      	ldrh	r2, [r7, #16]
 800986c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	2b20      	cmp	r3, #32
 8009876:	d02b      	beq.n	80098d0 <HAL_UART_IRQHandler+0x288>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009886:	60da      	str	r2, [r3, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	695a      	ldr	r2, [r3, #20]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0201 	bic.w	r2, r2, #1
 8009896:	615a      	str	r2, [r3, #20]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695a      	ldr	r2, [r3, #20]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a6:	615a      	str	r2, [r3, #20]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	631a      	str	r2, [r3, #48]	; 0x30
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0210 	bic.w	r2, r2, #16
 80098c4:	60da      	str	r2, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fc fe55 	bl	800657a <HAL_DMA_Abort>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f86d 	bl	80099c0 <HAL_UARTEx_RxEventCallback>
 80098e6:	e051      	b.n	800998c <HAL_UART_IRQHandler+0x344>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	827b      	strh	r3, [r7, #18]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d047      	beq.n	8009990 <HAL_UART_IRQHandler+0x348>
 8009900:	8a7b      	ldrh	r3, [r7, #18]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d044      	beq.n	8009990 <HAL_UART_IRQHandler+0x348>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009914:	60da      	str	r2, [r3, #12]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	695a      	ldr	r2, [r3, #20]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f022 0201 	bic.w	r2, r2, #1
 8009924:	615a      	str	r2, [r3, #20]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2220      	movs	r2, #32
 800992a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	631a      	str	r2, [r3, #48]	; 0x30
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0210 	bic.w	r2, r2, #16
 8009942:	60da      	str	r2, [r3, #12]
 8009944:	8a7b      	ldrh	r3, [r7, #18]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f839 	bl	80099c0 <HAL_UARTEx_RxEventCallback>
 800994e:	e01f      	b.n	8009990 <HAL_UART_IRQHandler+0x348>
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <HAL_UART_IRQHandler+0x324>
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_UART_IRQHandler+0x324>
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa22 	bl	8009dae <UART_Transmit_IT>
 800996a:	e012      	b.n	8009992 <HAL_UART_IRQHandler+0x34a>
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <HAL_UART_IRQHandler+0x34a>
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997c:	2b00      	cmp	r3, #0
 800997e:	d008      	beq.n	8009992 <HAL_UART_IRQHandler+0x34a>
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fa63 	bl	8009e4c <UART_EndTransmit_IT>
 8009986:	e004      	b.n	8009992 <HAL_UART_IRQHandler+0x34a>
 8009988:	bf00      	nop
 800998a:	e002      	b.n	8009992 <HAL_UART_IRQHandler+0x34a>
 800998c:	bf00      	nop
 800998e:	e000      	b.n	8009992 <HAL_UART_IRQHandler+0x34a>
 8009990:	bf00      	nop
 8009992:	3728      	adds	r7, #40	; 0x28
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	08009d87 	.word	0x08009d87

0800999c <HAL_UART_TxCpltCallback>:
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr

080099ae <HAL_UART_RxHalfCpltCallback>:
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bc80      	pop	{r7}
 80099be:	4770      	bx	lr

080099c0 <HAL_UARTEx_RxEventCallback>:
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	807b      	strh	r3, [r7, #2]
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr

080099d6 <UART_DMAReceiveCplt>:
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d12a      	bne.n	8009a48 <UART_DMAReceiveCplt+0x72>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a06:	60da      	str	r2, [r3, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695a      	ldr	r2, [r3, #20]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0201 	bic.w	r2, r2, #1
 8009a16:	615a      	str	r2, [r3, #20]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	695a      	ldr	r2, [r3, #20]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a26:	615a      	str	r2, [r3, #20]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d107      	bne.n	8009a48 <UART_DMAReceiveCplt+0x72>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0210 	bic.w	r2, r2, #16
 8009a46:	60da      	str	r2, [r3, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d106      	bne.n	8009a5e <UART_DMAReceiveCplt+0x88>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a54:	4619      	mov	r1, r3
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff ffb2 	bl	80099c0 <HAL_UARTEx_RxEventCallback>
 8009a5c:	e002      	b.n	8009a64 <UART_DMAReceiveCplt+0x8e>
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7fa fda0 	bl	80045a4 <HAL_UART_RxCpltCallback>
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <UART_DMARxHalfCplt>:
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d108      	bne.n	8009a94 <UART_DMARxHalfCplt+0x28>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff ff97 	bl	80099c0 <HAL_UARTEx_RxEventCallback>
 8009a92:	e002      	b.n	8009a9a <UART_DMARxHalfCplt+0x2e>
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7ff ff8a 	bl	80099ae <HAL_UART_RxHalfCpltCallback>
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <UART_DMAError>:
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bf14      	ite	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	2300      	moveq	r3, #0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b21      	cmp	r3, #33	; 0x21
 8009ad4:	d108      	bne.n	8009ae8 <UART_DMAError+0x46>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d005      	beq.n	8009ae8 <UART_DMAError+0x46>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	84da      	strh	r2, [r3, #38]	; 0x26
 8009ae2:	68b8      	ldr	r0, [r7, #8]
 8009ae4:	f000 f90e 	bl	8009d04 <UART_EndTxTransfer>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bf14      	ite	ne
 8009af6:	2301      	movne	r3, #1
 8009af8:	2300      	moveq	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b22      	cmp	r3, #34	; 0x22
 8009b08:	d108      	bne.n	8009b1c <UART_DMAError+0x7a>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <UART_DMAError+0x7a>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009b16:	68b8      	ldr	r0, [r7, #8]
 8009b18:	f000 f909 	bl	8009d2e <UART_EndRxTransfer>
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	f043 0210 	orr.w	r2, r3, #16
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	641a      	str	r2, [r3, #64]	; 0x40
 8009b28:	68b8      	ldr	r0, [r7, #8]
 8009b2a:	f7fa fd6b 	bl	8004604 <HAL_UART_ErrorCallback>
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <UART_WaitOnFlagUntilTimeout>:
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	603b      	str	r3, [r7, #0]
 8009b42:	4613      	mov	r3, r2
 8009b44:	71fb      	strb	r3, [r7, #7]
 8009b46:	e02c      	b.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d028      	beq.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b56:	f7fc faff 	bl	8006158 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d21d      	bcs.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695a      	ldr	r2, [r3, #20]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0201 	bic.w	r2, r2, #1
 8009b84:	615a      	str	r2, [r3, #20]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e00f      	b.n	8009bc2 <UART_WaitOnFlagUntilTimeout+0x8c>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4013      	ands	r3, r2
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	bf0c      	ite	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	2300      	movne	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d0c3      	beq.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x12>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <UART_Start_Receive_IT>:
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	80fb      	strh	r3, [r7, #6]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	629a      	str	r2, [r3, #40]	; 0x28
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	88fa      	ldrh	r2, [r7, #6]
 8009be2:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	88fa      	ldrh	r2, [r7, #6]
 8009be8:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	641a      	str	r2, [r3, #64]	; 0x40
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2222      	movs	r2, #34	; 0x22
 8009bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c0e:	60da      	str	r2, [r3, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695a      	ldr	r2, [r3, #20]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0201 	orr.w	r2, r2, #1
 8009c1e:	615a      	str	r2, [r3, #20]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0220 	orr.w	r2, r2, #32
 8009c2e:	60da      	str	r2, [r3, #12]
 8009c30:	2300      	movs	r3, #0
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bc80      	pop	{r7}
 8009c3a:	4770      	bx	lr

08009c3c <UART_Start_Receive_DMA>:
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	80fb      	strh	r3, [r7, #6]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	88fa      	ldrh	r2, [r7, #6]
 8009c54:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2222      	movs	r2, #34	; 0x22
 8009c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	4a23      	ldr	r2, [pc, #140]	; (8009cf8 <UART_Start_Receive_DMA+0xbc>)
 8009c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <UART_Start_Receive_DMA+0xc0>)
 8009c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	4a21      	ldr	r2, [pc, #132]	; (8009d00 <UART_Start_Receive_DMA+0xc4>)
 8009c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	2200      	movs	r2, #0
 8009c82:	635a      	str	r2, [r3, #52]	; 0x34
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4619      	mov	r1, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	88fb      	ldrh	r3, [r7, #6]
 8009c9c:	f7fc fc0e 	bl	80064bc <HAL_DMA_Start_IT>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	613b      	str	r3, [r7, #16]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ccc:	60da      	str	r2, [r3, #12]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	695a      	ldr	r2, [r3, #20]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f042 0201 	orr.w	r2, r2, #1
 8009cdc:	615a      	str	r2, [r3, #20]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	695a      	ldr	r2, [r3, #20]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cec:	615a      	str	r2, [r3, #20]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	080099d7 	.word	0x080099d7
 8009cfc:	08009a6d 	.word	0x08009a6d
 8009d00:	08009aa3 	.word	0x08009aa3

08009d04 <UART_EndTxTransfer>:
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d1a:	60da      	str	r2, [r3, #12]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bc80      	pop	{r7}
 8009d2c:	4770      	bx	lr

08009d2e <UART_EndRxTransfer>:
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d44:	60da      	str	r2, [r3, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	695a      	ldr	r2, [r3, #20]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0201 	bic.w	r2, r2, #1
 8009d54:	615a      	str	r2, [r3, #20]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d107      	bne.n	8009d6e <UART_EndRxTransfer+0x40>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0210 	bic.w	r2, r2, #16
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bc80      	pop	{r7}
 8009d84:	4770      	bx	lr

08009d86 <UART_DMAAbortOnError>:
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	84da      	strh	r2, [r3, #38]	; 0x26
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7fa fc2f 	bl	8004604 <HAL_UART_ErrorCallback>
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <UART_Transmit_IT>:
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b21      	cmp	r3, #33	; 0x21
 8009dc0:	d13e      	bne.n	8009e40 <UART_Transmit_IT+0x92>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dca:	d114      	bne.n	8009df6 <UART_Transmit_IT+0x48>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d110      	bne.n	8009df6 <UART_Transmit_IT+0x48>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009de8:	605a      	str	r2, [r3, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	1c9a      	adds	r2, r3, #2
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	621a      	str	r2, [r3, #32]
 8009df4:	e008      	b.n	8009e08 <UART_Transmit_IT+0x5a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	1c59      	adds	r1, r3, #1
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6211      	str	r1, [r2, #32]
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	605a      	str	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	4619      	mov	r1, r3
 8009e16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10f      	bne.n	8009e3c <UART_Transmit_IT+0x8e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e2a:	60da      	str	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e3a:	60da      	str	r2, [r3, #12]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e000      	b.n	8009e42 <UART_Transmit_IT+0x94>
 8009e40:	2302      	movs	r3, #2
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <UART_EndTransmit_IT>:
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e62:	60da      	str	r2, [r3, #12]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7ff fd95 	bl	800999c <HAL_UART_TxCpltCallback>
 8009e72:	2300      	movs	r3, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <UART_Receive_IT>:
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b22      	cmp	r3, #34	; 0x22
 8009e8e:	f040 8099 	bne.w	8009fc4 <UART_Receive_IT+0x148>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9a:	d117      	bne.n	8009ecc <UART_Receive_IT+0x50>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d113      	bne.n	8009ecc <UART_Receive_IT+0x50>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eac:	613b      	str	r3, [r7, #16]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec4:	1c9a      	adds	r2, r3, #2
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8009eca:	e026      	b.n	8009f1a <UART_Receive_IT+0x9e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	613b      	str	r3, [r7, #16]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ede:	d007      	beq.n	8009ef0 <UART_Receive_IT+0x74>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <UART_Receive_IT+0x82>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d106      	bne.n	8009efe <UART_Receive_IT+0x82>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e008      	b.n	8009f10 <UART_Receive_IT+0x94>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	629a      	str	r2, [r3, #40]	; 0x28
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	3b01      	subs	r3, #1
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	4619      	mov	r1, r3
 8009f28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d148      	bne.n	8009fc0 <UART_Receive_IT+0x144>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0220 	bic.w	r2, r2, #32
 8009f3c:	60da      	str	r2, [r3, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f4c:	60da      	str	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695a      	ldr	r2, [r3, #20]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0201 	bic.w	r2, r2, #1
 8009f5c:	615a      	str	r2, [r3, #20]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d123      	bne.n	8009fb6 <UART_Receive_IT+0x13a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0210 	bic.w	r2, r2, #16
 8009f82:	60da      	str	r2, [r3, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	2b10      	cmp	r3, #16
 8009f90:	d10a      	bne.n	8009fa8 <UART_Receive_IT+0x12c>
 8009f92:	2300      	movs	r3, #0
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fd06 	bl	80099c0 <HAL_UARTEx_RxEventCallback>
 8009fb4:	e002      	b.n	8009fbc <UART_Receive_IT+0x140>
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fa faf4 	bl	80045a4 <HAL_UART_RxCpltCallback>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e002      	b.n	8009fc6 <UART_Receive_IT+0x14a>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e000      	b.n	8009fc6 <UART_Receive_IT+0x14a>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
	...

08009fd0 <UART_SetConfig>:
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	611a      	str	r2, [r3, #16]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a00a:	f023 030c 	bic.w	r3, r3, #12
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6812      	ldr	r2, [r2, #0]
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	430b      	orrs	r3, r1
 800a016:	60d3      	str	r3, [r2, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	615a      	str	r2, [r3, #20]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a2c      	ldr	r2, [pc, #176]	; (800a0e4 <UART_SetConfig+0x114>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d103      	bne.n	800a040 <UART_SetConfig+0x70>
 800a038:	f7fe f83c 	bl	80080b4 <HAL_RCC_GetPCLK2Freq>
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	e002      	b.n	800a046 <UART_SetConfig+0x76>
 800a040:	f7fe f824 	bl	800808c <HAL_RCC_GetPCLK1Freq>
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	009a      	lsls	r2, r3, #2
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05c:	4a22      	ldr	r2, [pc, #136]	; (800a0e8 <UART_SetConfig+0x118>)
 800a05e:	fba2 2303 	umull	r2, r3, r2, r3
 800a062:	095b      	lsrs	r3, r3, #5
 800a064:	0119      	lsls	r1, r3, #4
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009a      	lsls	r2, r3, #2
 800a070:	441a      	add	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	fbb2 f2f3 	udiv	r2, r2, r3
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <UART_SetConfig+0x118>)
 800a07e:	fba3 0302 	umull	r0, r3, r3, r2
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	2064      	movs	r0, #100	; 0x64
 800a086:	fb00 f303 	mul.w	r3, r0, r3
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	011b      	lsls	r3, r3, #4
 800a08e:	3332      	adds	r3, #50	; 0x32
 800a090:	4a15      	ldr	r2, [pc, #84]	; (800a0e8 <UART_SetConfig+0x118>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a09c:	4419      	add	r1, r3
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009a      	lsls	r2, r3, #2
 800a0a8:	441a      	add	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <UART_SetConfig+0x118>)
 800a0b6:	fba3 0302 	umull	r0, r3, r3, r2
 800a0ba:	095b      	lsrs	r3, r3, #5
 800a0bc:	2064      	movs	r0, #100	; 0x64
 800a0be:	fb00 f303 	mul.w	r3, r0, r3
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	011b      	lsls	r3, r3, #4
 800a0c6:	3332      	adds	r3, #50	; 0x32
 800a0c8:	4a07      	ldr	r2, [pc, #28]	; (800a0e8 <UART_SetConfig+0x118>)
 800a0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	440a      	add	r2, r1
 800a0da:	609a      	str	r2, [r3, #8]
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40013800 	.word	0x40013800
 800a0e8:	51eb851f 	.word	0x51eb851f

0800a0ec <__assert_func>:
 800a0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ee:	4614      	mov	r4, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <__assert_func+0x2c>)
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68d8      	ldr	r0, [r3, #12]
 800a0fa:	b14c      	cbz	r4, 800a110 <__assert_func+0x24>
 800a0fc:	4b07      	ldr	r3, [pc, #28]	; (800a11c <__assert_func+0x30>)
 800a0fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a102:	9100      	str	r1, [sp, #0]
 800a104:	462b      	mov	r3, r5
 800a106:	4906      	ldr	r1, [pc, #24]	; (800a120 <__assert_func+0x34>)
 800a108:	f000 f814 	bl	800a134 <fiprintf>
 800a10c:	f000 fc2c 	bl	800a968 <abort>
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <__assert_func+0x38>)
 800a112:	461c      	mov	r4, r3
 800a114:	e7f3      	b.n	800a0fe <__assert_func+0x12>
 800a116:	bf00      	nop
 800a118:	20000018 	.word	0x20000018
 800a11c:	0800cf7c 	.word	0x0800cf7c
 800a120:	0800cf89 	.word	0x0800cf89
 800a124:	0800cfb7 	.word	0x0800cfb7

0800a128 <__errno>:
 800a128:	4b01      	ldr	r3, [pc, #4]	; (800a130 <__errno+0x8>)
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20000018 	.word	0x20000018

0800a134 <fiprintf>:
 800a134:	b40e      	push	{r1, r2, r3}
 800a136:	b503      	push	{r0, r1, lr}
 800a138:	4601      	mov	r1, r0
 800a13a:	ab03      	add	r3, sp, #12
 800a13c:	4805      	ldr	r0, [pc, #20]	; (800a154 <fiprintf+0x20>)
 800a13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a142:	6800      	ldr	r0, [r0, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	f000 f869 	bl	800a21c <_vfiprintf_r>
 800a14a:	b002      	add	sp, #8
 800a14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a150:	b003      	add	sp, #12
 800a152:	4770      	bx	lr
 800a154:	20000018 	.word	0x20000018

0800a158 <__libc_init_array>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	2600      	movs	r6, #0
 800a15c:	4d0c      	ldr	r5, [pc, #48]	; (800a190 <__libc_init_array+0x38>)
 800a15e:	4c0d      	ldr	r4, [pc, #52]	; (800a194 <__libc_init_array+0x3c>)
 800a160:	1b64      	subs	r4, r4, r5
 800a162:	10a4      	asrs	r4, r4, #2
 800a164:	42a6      	cmp	r6, r4
 800a166:	d109      	bne.n	800a17c <__libc_init_array+0x24>
 800a168:	f002 fbb4 	bl	800c8d4 <_init>
 800a16c:	2600      	movs	r6, #0
 800a16e:	4d0a      	ldr	r5, [pc, #40]	; (800a198 <__libc_init_array+0x40>)
 800a170:	4c0a      	ldr	r4, [pc, #40]	; (800a19c <__libc_init_array+0x44>)
 800a172:	1b64      	subs	r4, r4, r5
 800a174:	10a4      	asrs	r4, r4, #2
 800a176:	42a6      	cmp	r6, r4
 800a178:	d105      	bne.n	800a186 <__libc_init_array+0x2e>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a180:	4798      	blx	r3
 800a182:	3601      	adds	r6, #1
 800a184:	e7ee      	b.n	800a164 <__libc_init_array+0xc>
 800a186:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18a:	4798      	blx	r3
 800a18c:	3601      	adds	r6, #1
 800a18e:	e7f2      	b.n	800a176 <__libc_init_array+0x1e>
 800a190:	0800d268 	.word	0x0800d268
 800a194:	0800d268 	.word	0x0800d268
 800a198:	0800d268 	.word	0x0800d268
 800a19c:	0800d26c 	.word	0x0800d26c

0800a1a0 <memcpy>:
 800a1a0:	440a      	add	r2, r1
 800a1a2:	4291      	cmp	r1, r2
 800a1a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1a8:	d100      	bne.n	800a1ac <memcpy+0xc>
 800a1aa:	4770      	bx	lr
 800a1ac:	b510      	push	{r4, lr}
 800a1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1b2:	4291      	cmp	r1, r2
 800a1b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b8:	d1f9      	bne.n	800a1ae <memcpy+0xe>
 800a1ba:	bd10      	pop	{r4, pc}

0800a1bc <memset>:
 800a1bc:	4603      	mov	r3, r0
 800a1be:	4402      	add	r2, r0
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d100      	bne.n	800a1c6 <memset+0xa>
 800a1c4:	4770      	bx	lr
 800a1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ca:	e7f9      	b.n	800a1c0 <memset+0x4>

0800a1cc <__sfputc_r>:
 800a1cc:	6893      	ldr	r3, [r2, #8]
 800a1ce:	b410      	push	{r4}
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	6093      	str	r3, [r2, #8]
 800a1d6:	da07      	bge.n	800a1e8 <__sfputc_r+0x1c>
 800a1d8:	6994      	ldr	r4, [r2, #24]
 800a1da:	42a3      	cmp	r3, r4
 800a1dc:	db01      	blt.n	800a1e2 <__sfputc_r+0x16>
 800a1de:	290a      	cmp	r1, #10
 800a1e0:	d102      	bne.n	800a1e8 <__sfputc_r+0x1c>
 800a1e2:	bc10      	pop	{r4}
 800a1e4:	f000 bb00 	b.w	800a7e8 <__swbuf_r>
 800a1e8:	6813      	ldr	r3, [r2, #0]
 800a1ea:	1c58      	adds	r0, r3, #1
 800a1ec:	6010      	str	r0, [r2, #0]
 800a1ee:	7019      	strb	r1, [r3, #0]
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	bc10      	pop	{r4}
 800a1f4:	4770      	bx	lr

0800a1f6 <__sfputs_r>:
 800a1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	4614      	mov	r4, r2
 800a1fe:	18d5      	adds	r5, r2, r3
 800a200:	42ac      	cmp	r4, r5
 800a202:	d101      	bne.n	800a208 <__sfputs_r+0x12>
 800a204:	2000      	movs	r0, #0
 800a206:	e007      	b.n	800a218 <__sfputs_r+0x22>
 800a208:	463a      	mov	r2, r7
 800a20a:	4630      	mov	r0, r6
 800a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a210:	f7ff ffdc 	bl	800a1cc <__sfputc_r>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d1f3      	bne.n	800a200 <__sfputs_r+0xa>
 800a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a21c <_vfiprintf_r>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	460d      	mov	r5, r1
 800a222:	4614      	mov	r4, r2
 800a224:	4698      	mov	r8, r3
 800a226:	4606      	mov	r6, r0
 800a228:	b09d      	sub	sp, #116	; 0x74
 800a22a:	b118      	cbz	r0, 800a234 <_vfiprintf_r+0x18>
 800a22c:	6983      	ldr	r3, [r0, #24]
 800a22e:	b90b      	cbnz	r3, 800a234 <_vfiprintf_r+0x18>
 800a230:	f000 fcb8 	bl	800aba4 <__sinit>
 800a234:	4b89      	ldr	r3, [pc, #548]	; (800a45c <_vfiprintf_r+0x240>)
 800a236:	429d      	cmp	r5, r3
 800a238:	d11b      	bne.n	800a272 <_vfiprintf_r+0x56>
 800a23a:	6875      	ldr	r5, [r6, #4]
 800a23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a23e:	07d9      	lsls	r1, r3, #31
 800a240:	d405      	bmi.n	800a24e <_vfiprintf_r+0x32>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	059a      	lsls	r2, r3, #22
 800a246:	d402      	bmi.n	800a24e <_vfiprintf_r+0x32>
 800a248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a24a:	f000 fd49 	bl	800ace0 <__retarget_lock_acquire_recursive>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	071b      	lsls	r3, r3, #28
 800a252:	d501      	bpl.n	800a258 <_vfiprintf_r+0x3c>
 800a254:	692b      	ldr	r3, [r5, #16]
 800a256:	b9eb      	cbnz	r3, 800a294 <_vfiprintf_r+0x78>
 800a258:	4629      	mov	r1, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	f000 fb16 	bl	800a88c <__swsetup_r>
 800a260:	b1c0      	cbz	r0, 800a294 <_vfiprintf_r+0x78>
 800a262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a264:	07dc      	lsls	r4, r3, #31
 800a266:	d50e      	bpl.n	800a286 <_vfiprintf_r+0x6a>
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	b01d      	add	sp, #116	; 0x74
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a272:	4b7b      	ldr	r3, [pc, #492]	; (800a460 <_vfiprintf_r+0x244>)
 800a274:	429d      	cmp	r5, r3
 800a276:	d101      	bne.n	800a27c <_vfiprintf_r+0x60>
 800a278:	68b5      	ldr	r5, [r6, #8]
 800a27a:	e7df      	b.n	800a23c <_vfiprintf_r+0x20>
 800a27c:	4b79      	ldr	r3, [pc, #484]	; (800a464 <_vfiprintf_r+0x248>)
 800a27e:	429d      	cmp	r5, r3
 800a280:	bf08      	it	eq
 800a282:	68f5      	ldreq	r5, [r6, #12]
 800a284:	e7da      	b.n	800a23c <_vfiprintf_r+0x20>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	0598      	lsls	r0, r3, #22
 800a28a:	d4ed      	bmi.n	800a268 <_vfiprintf_r+0x4c>
 800a28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a28e:	f000 fd28 	bl	800ace2 <__retarget_lock_release_recursive>
 800a292:	e7e9      	b.n	800a268 <_vfiprintf_r+0x4c>
 800a294:	2300      	movs	r3, #0
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	2320      	movs	r3, #32
 800a29a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a29e:	2330      	movs	r3, #48	; 0x30
 800a2a0:	f04f 0901 	mov.w	r9, #1
 800a2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a468 <_vfiprintf_r+0x24c>
 800a2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	469a      	mov	sl, r3
 800a2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b8:	b10a      	cbz	r2, 800a2be <_vfiprintf_r+0xa2>
 800a2ba:	2a25      	cmp	r2, #37	; 0x25
 800a2bc:	d1f9      	bne.n	800a2b2 <_vfiprintf_r+0x96>
 800a2be:	ebba 0b04 	subs.w	fp, sl, r4
 800a2c2:	d00b      	beq.n	800a2dc <_vfiprintf_r+0xc0>
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff ff93 	bl	800a1f6 <__sfputs_r>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	f000 80aa 	beq.w	800a42a <_vfiprintf_r+0x20e>
 800a2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2d8:	445a      	add	r2, fp
 800a2da:	9209      	str	r2, [sp, #36]	; 0x24
 800a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 80a2 	beq.w	800a42a <_vfiprintf_r+0x20e>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2f0:	f10a 0a01 	add.w	sl, sl, #1
 800a2f4:	9304      	str	r3, [sp, #16]
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a2fe:	4654      	mov	r4, sl
 800a300:	2205      	movs	r2, #5
 800a302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a306:	4858      	ldr	r0, [pc, #352]	; (800a468 <_vfiprintf_r+0x24c>)
 800a308:	f000 fd52 	bl	800adb0 <memchr>
 800a30c:	9a04      	ldr	r2, [sp, #16]
 800a30e:	b9d8      	cbnz	r0, 800a348 <_vfiprintf_r+0x12c>
 800a310:	06d1      	lsls	r1, r2, #27
 800a312:	bf44      	itt	mi
 800a314:	2320      	movmi	r3, #32
 800a316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a31a:	0713      	lsls	r3, r2, #28
 800a31c:	bf44      	itt	mi
 800a31e:	232b      	movmi	r3, #43	; 0x2b
 800a320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a324:	f89a 3000 	ldrb.w	r3, [sl]
 800a328:	2b2a      	cmp	r3, #42	; 0x2a
 800a32a:	d015      	beq.n	800a358 <_vfiprintf_r+0x13c>
 800a32c:	4654      	mov	r4, sl
 800a32e:	2000      	movs	r0, #0
 800a330:	f04f 0c0a 	mov.w	ip, #10
 800a334:	9a07      	ldr	r2, [sp, #28]
 800a336:	4621      	mov	r1, r4
 800a338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a33c:	3b30      	subs	r3, #48	; 0x30
 800a33e:	2b09      	cmp	r3, #9
 800a340:	d94e      	bls.n	800a3e0 <_vfiprintf_r+0x1c4>
 800a342:	b1b0      	cbz	r0, 800a372 <_vfiprintf_r+0x156>
 800a344:	9207      	str	r2, [sp, #28]
 800a346:	e014      	b.n	800a372 <_vfiprintf_r+0x156>
 800a348:	eba0 0308 	sub.w	r3, r0, r8
 800a34c:	fa09 f303 	lsl.w	r3, r9, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	46a2      	mov	sl, r4
 800a354:	9304      	str	r3, [sp, #16]
 800a356:	e7d2      	b.n	800a2fe <_vfiprintf_r+0xe2>
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	1d19      	adds	r1, r3, #4
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	9103      	str	r1, [sp, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	bfbb      	ittet	lt
 800a364:	425b      	neglt	r3, r3
 800a366:	f042 0202 	orrlt.w	r2, r2, #2
 800a36a:	9307      	strge	r3, [sp, #28]
 800a36c:	9307      	strlt	r3, [sp, #28]
 800a36e:	bfb8      	it	lt
 800a370:	9204      	strlt	r2, [sp, #16]
 800a372:	7823      	ldrb	r3, [r4, #0]
 800a374:	2b2e      	cmp	r3, #46	; 0x2e
 800a376:	d10c      	bne.n	800a392 <_vfiprintf_r+0x176>
 800a378:	7863      	ldrb	r3, [r4, #1]
 800a37a:	2b2a      	cmp	r3, #42	; 0x2a
 800a37c:	d135      	bne.n	800a3ea <_vfiprintf_r+0x1ce>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	3402      	adds	r4, #2
 800a382:	1d1a      	adds	r2, r3, #4
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	9203      	str	r2, [sp, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bfb8      	it	lt
 800a38c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a390:	9305      	str	r3, [sp, #20]
 800a392:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a46c <_vfiprintf_r+0x250>
 800a396:	2203      	movs	r2, #3
 800a398:	4650      	mov	r0, sl
 800a39a:	7821      	ldrb	r1, [r4, #0]
 800a39c:	f000 fd08 	bl	800adb0 <memchr>
 800a3a0:	b140      	cbz	r0, 800a3b4 <_vfiprintf_r+0x198>
 800a3a2:	2340      	movs	r3, #64	; 0x40
 800a3a4:	eba0 000a 	sub.w	r0, r0, sl
 800a3a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	3401      	adds	r4, #1
 800a3b0:	4303      	orrs	r3, r0
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b8:	2206      	movs	r2, #6
 800a3ba:	482d      	ldr	r0, [pc, #180]	; (800a470 <_vfiprintf_r+0x254>)
 800a3bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3c0:	f000 fcf6 	bl	800adb0 <memchr>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d03f      	beq.n	800a448 <_vfiprintf_r+0x22c>
 800a3c8:	4b2a      	ldr	r3, [pc, #168]	; (800a474 <_vfiprintf_r+0x258>)
 800a3ca:	bb1b      	cbnz	r3, 800a414 <_vfiprintf_r+0x1f8>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	3307      	adds	r3, #7
 800a3d0:	f023 0307 	bic.w	r3, r3, #7
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3da:	443b      	add	r3, r7
 800a3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3de:	e767      	b.n	800a2b0 <_vfiprintf_r+0x94>
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e8:	e7a5      	b.n	800a336 <_vfiprintf_r+0x11a>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f04f 0c0a 	mov.w	ip, #10
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	3401      	adds	r4, #1
 800a3f4:	9305      	str	r3, [sp, #20]
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3fc:	3a30      	subs	r2, #48	; 0x30
 800a3fe:	2a09      	cmp	r2, #9
 800a400:	d903      	bls.n	800a40a <_vfiprintf_r+0x1ee>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0c5      	beq.n	800a392 <_vfiprintf_r+0x176>
 800a406:	9105      	str	r1, [sp, #20]
 800a408:	e7c3      	b.n	800a392 <_vfiprintf_r+0x176>
 800a40a:	4604      	mov	r4, r0
 800a40c:	2301      	movs	r3, #1
 800a40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a412:	e7f0      	b.n	800a3f6 <_vfiprintf_r+0x1da>
 800a414:	ab03      	add	r3, sp, #12
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	462a      	mov	r2, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	4b16      	ldr	r3, [pc, #88]	; (800a478 <_vfiprintf_r+0x25c>)
 800a41e:	a904      	add	r1, sp, #16
 800a420:	f3af 8000 	nop.w
 800a424:	4607      	mov	r7, r0
 800a426:	1c78      	adds	r0, r7, #1
 800a428:	d1d6      	bne.n	800a3d8 <_vfiprintf_r+0x1bc>
 800a42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a42c:	07d9      	lsls	r1, r3, #31
 800a42e:	d405      	bmi.n	800a43c <_vfiprintf_r+0x220>
 800a430:	89ab      	ldrh	r3, [r5, #12]
 800a432:	059a      	lsls	r2, r3, #22
 800a434:	d402      	bmi.n	800a43c <_vfiprintf_r+0x220>
 800a436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a438:	f000 fc53 	bl	800ace2 <__retarget_lock_release_recursive>
 800a43c:	89ab      	ldrh	r3, [r5, #12]
 800a43e:	065b      	lsls	r3, r3, #25
 800a440:	f53f af12 	bmi.w	800a268 <_vfiprintf_r+0x4c>
 800a444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a446:	e711      	b.n	800a26c <_vfiprintf_r+0x50>
 800a448:	ab03      	add	r3, sp, #12
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	462a      	mov	r2, r5
 800a44e:	4630      	mov	r0, r6
 800a450:	4b09      	ldr	r3, [pc, #36]	; (800a478 <_vfiprintf_r+0x25c>)
 800a452:	a904      	add	r1, sp, #16
 800a454:	f000 f882 	bl	800a55c <_printf_i>
 800a458:	e7e4      	b.n	800a424 <_vfiprintf_r+0x208>
 800a45a:	bf00      	nop
 800a45c:	0800d010 	.word	0x0800d010
 800a460:	0800d030 	.word	0x0800d030
 800a464:	0800cff0 	.word	0x0800cff0
 800a468:	0800cfbc 	.word	0x0800cfbc
 800a46c:	0800cfc2 	.word	0x0800cfc2
 800a470:	0800cfc6 	.word	0x0800cfc6
 800a474:	00000000 	.word	0x00000000
 800a478:	0800a1f7 	.word	0x0800a1f7

0800a47c <_printf_common>:
 800a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	4616      	mov	r6, r2
 800a482:	4699      	mov	r9, r3
 800a484:	688a      	ldr	r2, [r1, #8]
 800a486:	690b      	ldr	r3, [r1, #16]
 800a488:	4607      	mov	r7, r0
 800a48a:	4293      	cmp	r3, r2
 800a48c:	bfb8      	it	lt
 800a48e:	4613      	movlt	r3, r2
 800a490:	6033      	str	r3, [r6, #0]
 800a492:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a496:	460c      	mov	r4, r1
 800a498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a49c:	b10a      	cbz	r2, 800a4a2 <_printf_common+0x26>
 800a49e:	3301      	adds	r3, #1
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	0699      	lsls	r1, r3, #26
 800a4a6:	bf42      	ittt	mi
 800a4a8:	6833      	ldrmi	r3, [r6, #0]
 800a4aa:	3302      	addmi	r3, #2
 800a4ac:	6033      	strmi	r3, [r6, #0]
 800a4ae:	6825      	ldr	r5, [r4, #0]
 800a4b0:	f015 0506 	ands.w	r5, r5, #6
 800a4b4:	d106      	bne.n	800a4c4 <_printf_common+0x48>
 800a4b6:	f104 0a19 	add.w	sl, r4, #25
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	6832      	ldr	r2, [r6, #0]
 800a4be:	1a9b      	subs	r3, r3, r2
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dc28      	bgt.n	800a516 <_printf_common+0x9a>
 800a4c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4c8:	1e13      	subs	r3, r2, #0
 800a4ca:	6822      	ldr	r2, [r4, #0]
 800a4cc:	bf18      	it	ne
 800a4ce:	2301      	movne	r3, #1
 800a4d0:	0692      	lsls	r2, r2, #26
 800a4d2:	d42d      	bmi.n	800a530 <_printf_common+0xb4>
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4dc:	47c0      	blx	r8
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d020      	beq.n	800a524 <_printf_common+0xa8>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	68e5      	ldr	r5, [r4, #12]
 800a4e6:	f003 0306 	and.w	r3, r3, #6
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	bf18      	it	ne
 800a4ee:	2500      	movne	r5, #0
 800a4f0:	6832      	ldr	r2, [r6, #0]
 800a4f2:	f04f 0600 	mov.w	r6, #0
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	bf08      	it	eq
 800a4fa:	1aad      	subeq	r5, r5, r2
 800a4fc:	6922      	ldr	r2, [r4, #16]
 800a4fe:	bf08      	it	eq
 800a500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a504:	4293      	cmp	r3, r2
 800a506:	bfc4      	itt	gt
 800a508:	1a9b      	subgt	r3, r3, r2
 800a50a:	18ed      	addgt	r5, r5, r3
 800a50c:	341a      	adds	r4, #26
 800a50e:	42b5      	cmp	r5, r6
 800a510:	d11a      	bne.n	800a548 <_printf_common+0xcc>
 800a512:	2000      	movs	r0, #0
 800a514:	e008      	b.n	800a528 <_printf_common+0xac>
 800a516:	2301      	movs	r3, #1
 800a518:	4652      	mov	r2, sl
 800a51a:	4649      	mov	r1, r9
 800a51c:	4638      	mov	r0, r7
 800a51e:	47c0      	blx	r8
 800a520:	3001      	adds	r0, #1
 800a522:	d103      	bne.n	800a52c <_printf_common+0xb0>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52c:	3501      	adds	r5, #1
 800a52e:	e7c4      	b.n	800a4ba <_printf_common+0x3e>
 800a530:	2030      	movs	r0, #48	; 0x30
 800a532:	18e1      	adds	r1, r4, r3
 800a534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a53e:	4422      	add	r2, r4
 800a540:	3302      	adds	r3, #2
 800a542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a546:	e7c5      	b.n	800a4d4 <_printf_common+0x58>
 800a548:	2301      	movs	r3, #1
 800a54a:	4622      	mov	r2, r4
 800a54c:	4649      	mov	r1, r9
 800a54e:	4638      	mov	r0, r7
 800a550:	47c0      	blx	r8
 800a552:	3001      	adds	r0, #1
 800a554:	d0e6      	beq.n	800a524 <_printf_common+0xa8>
 800a556:	3601      	adds	r6, #1
 800a558:	e7d9      	b.n	800a50e <_printf_common+0x92>
	...

0800a55c <_printf_i>:
 800a55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a560:	7e0f      	ldrb	r7, [r1, #24]
 800a562:	4691      	mov	r9, r2
 800a564:	2f78      	cmp	r7, #120	; 0x78
 800a566:	4680      	mov	r8, r0
 800a568:	460c      	mov	r4, r1
 800a56a:	469a      	mov	sl, r3
 800a56c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a56e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a572:	d807      	bhi.n	800a584 <_printf_i+0x28>
 800a574:	2f62      	cmp	r7, #98	; 0x62
 800a576:	d80a      	bhi.n	800a58e <_printf_i+0x32>
 800a578:	2f00      	cmp	r7, #0
 800a57a:	f000 80d9 	beq.w	800a730 <_printf_i+0x1d4>
 800a57e:	2f58      	cmp	r7, #88	; 0x58
 800a580:	f000 80a4 	beq.w	800a6cc <_printf_i+0x170>
 800a584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a58c:	e03a      	b.n	800a604 <_printf_i+0xa8>
 800a58e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a592:	2b15      	cmp	r3, #21
 800a594:	d8f6      	bhi.n	800a584 <_printf_i+0x28>
 800a596:	a101      	add	r1, pc, #4	; (adr r1, 800a59c <_printf_i+0x40>)
 800a598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a59c:	0800a5f5 	.word	0x0800a5f5
 800a5a0:	0800a609 	.word	0x0800a609
 800a5a4:	0800a585 	.word	0x0800a585
 800a5a8:	0800a585 	.word	0x0800a585
 800a5ac:	0800a585 	.word	0x0800a585
 800a5b0:	0800a585 	.word	0x0800a585
 800a5b4:	0800a609 	.word	0x0800a609
 800a5b8:	0800a585 	.word	0x0800a585
 800a5bc:	0800a585 	.word	0x0800a585
 800a5c0:	0800a585 	.word	0x0800a585
 800a5c4:	0800a585 	.word	0x0800a585
 800a5c8:	0800a717 	.word	0x0800a717
 800a5cc:	0800a639 	.word	0x0800a639
 800a5d0:	0800a6f9 	.word	0x0800a6f9
 800a5d4:	0800a585 	.word	0x0800a585
 800a5d8:	0800a585 	.word	0x0800a585
 800a5dc:	0800a739 	.word	0x0800a739
 800a5e0:	0800a585 	.word	0x0800a585
 800a5e4:	0800a639 	.word	0x0800a639
 800a5e8:	0800a585 	.word	0x0800a585
 800a5ec:	0800a585 	.word	0x0800a585
 800a5f0:	0800a701 	.word	0x0800a701
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	1d1a      	adds	r2, r3, #4
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	602a      	str	r2, [r5, #0]
 800a5fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a604:	2301      	movs	r3, #1
 800a606:	e0a4      	b.n	800a752 <_printf_i+0x1f6>
 800a608:	6820      	ldr	r0, [r4, #0]
 800a60a:	6829      	ldr	r1, [r5, #0]
 800a60c:	0606      	lsls	r6, r0, #24
 800a60e:	f101 0304 	add.w	r3, r1, #4
 800a612:	d50a      	bpl.n	800a62a <_printf_i+0xce>
 800a614:	680e      	ldr	r6, [r1, #0]
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	2e00      	cmp	r6, #0
 800a61a:	da03      	bge.n	800a624 <_printf_i+0xc8>
 800a61c:	232d      	movs	r3, #45	; 0x2d
 800a61e:	4276      	negs	r6, r6
 800a620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a624:	230a      	movs	r3, #10
 800a626:	485e      	ldr	r0, [pc, #376]	; (800a7a0 <_printf_i+0x244>)
 800a628:	e019      	b.n	800a65e <_printf_i+0x102>
 800a62a:	680e      	ldr	r6, [r1, #0]
 800a62c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	bf18      	it	ne
 800a634:	b236      	sxthne	r6, r6
 800a636:	e7ef      	b.n	800a618 <_printf_i+0xbc>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	6820      	ldr	r0, [r4, #0]
 800a63c:	1d19      	adds	r1, r3, #4
 800a63e:	6029      	str	r1, [r5, #0]
 800a640:	0601      	lsls	r1, r0, #24
 800a642:	d501      	bpl.n	800a648 <_printf_i+0xec>
 800a644:	681e      	ldr	r6, [r3, #0]
 800a646:	e002      	b.n	800a64e <_printf_i+0xf2>
 800a648:	0646      	lsls	r6, r0, #25
 800a64a:	d5fb      	bpl.n	800a644 <_printf_i+0xe8>
 800a64c:	881e      	ldrh	r6, [r3, #0]
 800a64e:	2f6f      	cmp	r7, #111	; 0x6f
 800a650:	bf0c      	ite	eq
 800a652:	2308      	moveq	r3, #8
 800a654:	230a      	movne	r3, #10
 800a656:	4852      	ldr	r0, [pc, #328]	; (800a7a0 <_printf_i+0x244>)
 800a658:	2100      	movs	r1, #0
 800a65a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a65e:	6865      	ldr	r5, [r4, #4]
 800a660:	2d00      	cmp	r5, #0
 800a662:	bfa8      	it	ge
 800a664:	6821      	ldrge	r1, [r4, #0]
 800a666:	60a5      	str	r5, [r4, #8]
 800a668:	bfa4      	itt	ge
 800a66a:	f021 0104 	bicge.w	r1, r1, #4
 800a66e:	6021      	strge	r1, [r4, #0]
 800a670:	b90e      	cbnz	r6, 800a676 <_printf_i+0x11a>
 800a672:	2d00      	cmp	r5, #0
 800a674:	d04d      	beq.n	800a712 <_printf_i+0x1b6>
 800a676:	4615      	mov	r5, r2
 800a678:	fbb6 f1f3 	udiv	r1, r6, r3
 800a67c:	fb03 6711 	mls	r7, r3, r1, r6
 800a680:	5dc7      	ldrb	r7, [r0, r7]
 800a682:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a686:	4637      	mov	r7, r6
 800a688:	42bb      	cmp	r3, r7
 800a68a:	460e      	mov	r6, r1
 800a68c:	d9f4      	bls.n	800a678 <_printf_i+0x11c>
 800a68e:	2b08      	cmp	r3, #8
 800a690:	d10b      	bne.n	800a6aa <_printf_i+0x14e>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	07de      	lsls	r6, r3, #31
 800a696:	d508      	bpl.n	800a6aa <_printf_i+0x14e>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	6861      	ldr	r1, [r4, #4]
 800a69c:	4299      	cmp	r1, r3
 800a69e:	bfde      	ittt	le
 800a6a0:	2330      	movle	r3, #48	; 0x30
 800a6a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6aa:	1b52      	subs	r2, r2, r5
 800a6ac:	6122      	str	r2, [r4, #16]
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	f8cd a000 	str.w	sl, [sp]
 800a6b8:	aa03      	add	r2, sp, #12
 800a6ba:	f7ff fedf 	bl	800a47c <_printf_common>
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d14c      	bne.n	800a75c <_printf_i+0x200>
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c6:	b004      	add	sp, #16
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	4834      	ldr	r0, [pc, #208]	; (800a7a0 <_printf_i+0x244>)
 800a6ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6d2:	6829      	ldr	r1, [r5, #0]
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6da:	6029      	str	r1, [r5, #0]
 800a6dc:	061d      	lsls	r5, r3, #24
 800a6de:	d514      	bpl.n	800a70a <_printf_i+0x1ae>
 800a6e0:	07df      	lsls	r7, r3, #31
 800a6e2:	bf44      	itt	mi
 800a6e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a6e8:	6023      	strmi	r3, [r4, #0]
 800a6ea:	b91e      	cbnz	r6, 800a6f4 <_printf_i+0x198>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	f023 0320 	bic.w	r3, r3, #32
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	e7af      	b.n	800a658 <_printf_i+0xfc>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	f043 0320 	orr.w	r3, r3, #32
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	2378      	movs	r3, #120	; 0x78
 800a702:	4828      	ldr	r0, [pc, #160]	; (800a7a4 <_printf_i+0x248>)
 800a704:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a708:	e7e3      	b.n	800a6d2 <_printf_i+0x176>
 800a70a:	0659      	lsls	r1, r3, #25
 800a70c:	bf48      	it	mi
 800a70e:	b2b6      	uxthmi	r6, r6
 800a710:	e7e6      	b.n	800a6e0 <_printf_i+0x184>
 800a712:	4615      	mov	r5, r2
 800a714:	e7bb      	b.n	800a68e <_printf_i+0x132>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	6826      	ldr	r6, [r4, #0]
 800a71a:	1d18      	adds	r0, r3, #4
 800a71c:	6961      	ldr	r1, [r4, #20]
 800a71e:	6028      	str	r0, [r5, #0]
 800a720:	0635      	lsls	r5, r6, #24
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	d501      	bpl.n	800a72a <_printf_i+0x1ce>
 800a726:	6019      	str	r1, [r3, #0]
 800a728:	e002      	b.n	800a730 <_printf_i+0x1d4>
 800a72a:	0670      	lsls	r0, r6, #25
 800a72c:	d5fb      	bpl.n	800a726 <_printf_i+0x1ca>
 800a72e:	8019      	strh	r1, [r3, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	4615      	mov	r5, r2
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	e7ba      	b.n	800a6ae <_printf_i+0x152>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	2100      	movs	r1, #0
 800a73c:	1d1a      	adds	r2, r3, #4
 800a73e:	602a      	str	r2, [r5, #0]
 800a740:	681d      	ldr	r5, [r3, #0]
 800a742:	6862      	ldr	r2, [r4, #4]
 800a744:	4628      	mov	r0, r5
 800a746:	f000 fb33 	bl	800adb0 <memchr>
 800a74a:	b108      	cbz	r0, 800a750 <_printf_i+0x1f4>
 800a74c:	1b40      	subs	r0, r0, r5
 800a74e:	6060      	str	r0, [r4, #4]
 800a750:	6863      	ldr	r3, [r4, #4]
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	2300      	movs	r3, #0
 800a756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75a:	e7a8      	b.n	800a6ae <_printf_i+0x152>
 800a75c:	462a      	mov	r2, r5
 800a75e:	4649      	mov	r1, r9
 800a760:	4640      	mov	r0, r8
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	47d0      	blx	sl
 800a766:	3001      	adds	r0, #1
 800a768:	d0ab      	beq.n	800a6c2 <_printf_i+0x166>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	079b      	lsls	r3, r3, #30
 800a76e:	d413      	bmi.n	800a798 <_printf_i+0x23c>
 800a770:	68e0      	ldr	r0, [r4, #12]
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	4298      	cmp	r0, r3
 800a776:	bfb8      	it	lt
 800a778:	4618      	movlt	r0, r3
 800a77a:	e7a4      	b.n	800a6c6 <_printf_i+0x16a>
 800a77c:	2301      	movs	r3, #1
 800a77e:	4632      	mov	r2, r6
 800a780:	4649      	mov	r1, r9
 800a782:	4640      	mov	r0, r8
 800a784:	47d0      	blx	sl
 800a786:	3001      	adds	r0, #1
 800a788:	d09b      	beq.n	800a6c2 <_printf_i+0x166>
 800a78a:	3501      	adds	r5, #1
 800a78c:	68e3      	ldr	r3, [r4, #12]
 800a78e:	9903      	ldr	r1, [sp, #12]
 800a790:	1a5b      	subs	r3, r3, r1
 800a792:	42ab      	cmp	r3, r5
 800a794:	dcf2      	bgt.n	800a77c <_printf_i+0x220>
 800a796:	e7eb      	b.n	800a770 <_printf_i+0x214>
 800a798:	2500      	movs	r5, #0
 800a79a:	f104 0619 	add.w	r6, r4, #25
 800a79e:	e7f5      	b.n	800a78c <_printf_i+0x230>
 800a7a0:	0800cfcd 	.word	0x0800cfcd
 800a7a4:	0800cfde 	.word	0x0800cfde

0800a7a8 <siprintf>:
 800a7a8:	b40e      	push	{r1, r2, r3}
 800a7aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7ae:	b500      	push	{lr}
 800a7b0:	b09c      	sub	sp, #112	; 0x70
 800a7b2:	ab1d      	add	r3, sp, #116	; 0x74
 800a7b4:	9002      	str	r0, [sp, #8]
 800a7b6:	9006      	str	r0, [sp, #24]
 800a7b8:	9107      	str	r1, [sp, #28]
 800a7ba:	9104      	str	r1, [sp, #16]
 800a7bc:	4808      	ldr	r0, [pc, #32]	; (800a7e0 <siprintf+0x38>)
 800a7be:	4909      	ldr	r1, [pc, #36]	; (800a7e4 <siprintf+0x3c>)
 800a7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c4:	9105      	str	r1, [sp, #20]
 800a7c6:	6800      	ldr	r0, [r0, #0]
 800a7c8:	a902      	add	r1, sp, #8
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	f000 fc7e 	bl	800b0cc <_svfiprintf_r>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	9b02      	ldr	r3, [sp, #8]
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	b01c      	add	sp, #112	; 0x70
 800a7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7dc:	b003      	add	sp, #12
 800a7de:	4770      	bx	lr
 800a7e0:	20000018 	.word	0x20000018
 800a7e4:	ffff0208 	.word	0xffff0208

0800a7e8 <__swbuf_r>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	460e      	mov	r6, r1
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	b118      	cbz	r0, 800a7fa <__swbuf_r+0x12>
 800a7f2:	6983      	ldr	r3, [r0, #24]
 800a7f4:	b90b      	cbnz	r3, 800a7fa <__swbuf_r+0x12>
 800a7f6:	f000 f9d5 	bl	800aba4 <__sinit>
 800a7fa:	4b21      	ldr	r3, [pc, #132]	; (800a880 <__swbuf_r+0x98>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	d12b      	bne.n	800a858 <__swbuf_r+0x70>
 800a800:	686c      	ldr	r4, [r5, #4]
 800a802:	69a3      	ldr	r3, [r4, #24]
 800a804:	60a3      	str	r3, [r4, #8]
 800a806:	89a3      	ldrh	r3, [r4, #12]
 800a808:	071a      	lsls	r2, r3, #28
 800a80a:	d52f      	bpl.n	800a86c <__swbuf_r+0x84>
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	b36b      	cbz	r3, 800a86c <__swbuf_r+0x84>
 800a810:	6923      	ldr	r3, [r4, #16]
 800a812:	6820      	ldr	r0, [r4, #0]
 800a814:	b2f6      	uxtb	r6, r6
 800a816:	1ac0      	subs	r0, r0, r3
 800a818:	6963      	ldr	r3, [r4, #20]
 800a81a:	4637      	mov	r7, r6
 800a81c:	4283      	cmp	r3, r0
 800a81e:	dc04      	bgt.n	800a82a <__swbuf_r+0x42>
 800a820:	4621      	mov	r1, r4
 800a822:	4628      	mov	r0, r5
 800a824:	f000 f92a 	bl	800aa7c <_fflush_r>
 800a828:	bb30      	cbnz	r0, 800a878 <__swbuf_r+0x90>
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	3001      	adds	r0, #1
 800a82e:	3b01      	subs	r3, #1
 800a830:	60a3      	str	r3, [r4, #8]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	6022      	str	r2, [r4, #0]
 800a838:	701e      	strb	r6, [r3, #0]
 800a83a:	6963      	ldr	r3, [r4, #20]
 800a83c:	4283      	cmp	r3, r0
 800a83e:	d004      	beq.n	800a84a <__swbuf_r+0x62>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	07db      	lsls	r3, r3, #31
 800a844:	d506      	bpl.n	800a854 <__swbuf_r+0x6c>
 800a846:	2e0a      	cmp	r6, #10
 800a848:	d104      	bne.n	800a854 <__swbuf_r+0x6c>
 800a84a:	4621      	mov	r1, r4
 800a84c:	4628      	mov	r0, r5
 800a84e:	f000 f915 	bl	800aa7c <_fflush_r>
 800a852:	b988      	cbnz	r0, 800a878 <__swbuf_r+0x90>
 800a854:	4638      	mov	r0, r7
 800a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a858:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <__swbuf_r+0x9c>)
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d101      	bne.n	800a862 <__swbuf_r+0x7a>
 800a85e:	68ac      	ldr	r4, [r5, #8]
 800a860:	e7cf      	b.n	800a802 <__swbuf_r+0x1a>
 800a862:	4b09      	ldr	r3, [pc, #36]	; (800a888 <__swbuf_r+0xa0>)
 800a864:	429c      	cmp	r4, r3
 800a866:	bf08      	it	eq
 800a868:	68ec      	ldreq	r4, [r5, #12]
 800a86a:	e7ca      	b.n	800a802 <__swbuf_r+0x1a>
 800a86c:	4621      	mov	r1, r4
 800a86e:	4628      	mov	r0, r5
 800a870:	f000 f80c 	bl	800a88c <__swsetup_r>
 800a874:	2800      	cmp	r0, #0
 800a876:	d0cb      	beq.n	800a810 <__swbuf_r+0x28>
 800a878:	f04f 37ff 	mov.w	r7, #4294967295
 800a87c:	e7ea      	b.n	800a854 <__swbuf_r+0x6c>
 800a87e:	bf00      	nop
 800a880:	0800d010 	.word	0x0800d010
 800a884:	0800d030 	.word	0x0800d030
 800a888:	0800cff0 	.word	0x0800cff0

0800a88c <__swsetup_r>:
 800a88c:	4b32      	ldr	r3, [pc, #200]	; (800a958 <__swsetup_r+0xcc>)
 800a88e:	b570      	push	{r4, r5, r6, lr}
 800a890:	681d      	ldr	r5, [r3, #0]
 800a892:	4606      	mov	r6, r0
 800a894:	460c      	mov	r4, r1
 800a896:	b125      	cbz	r5, 800a8a2 <__swsetup_r+0x16>
 800a898:	69ab      	ldr	r3, [r5, #24]
 800a89a:	b913      	cbnz	r3, 800a8a2 <__swsetup_r+0x16>
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 f981 	bl	800aba4 <__sinit>
 800a8a2:	4b2e      	ldr	r3, [pc, #184]	; (800a95c <__swsetup_r+0xd0>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	d10f      	bne.n	800a8c8 <__swsetup_r+0x3c>
 800a8a8:	686c      	ldr	r4, [r5, #4]
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8b0:	0719      	lsls	r1, r3, #28
 800a8b2:	d42c      	bmi.n	800a90e <__swsetup_r+0x82>
 800a8b4:	06dd      	lsls	r5, r3, #27
 800a8b6:	d411      	bmi.n	800a8dc <__swsetup_r+0x50>
 800a8b8:	2309      	movs	r3, #9
 800a8ba:	6033      	str	r3, [r6, #0]
 800a8bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e03e      	b.n	800a946 <__swsetup_r+0xba>
 800a8c8:	4b25      	ldr	r3, [pc, #148]	; (800a960 <__swsetup_r+0xd4>)
 800a8ca:	429c      	cmp	r4, r3
 800a8cc:	d101      	bne.n	800a8d2 <__swsetup_r+0x46>
 800a8ce:	68ac      	ldr	r4, [r5, #8]
 800a8d0:	e7eb      	b.n	800a8aa <__swsetup_r+0x1e>
 800a8d2:	4b24      	ldr	r3, [pc, #144]	; (800a964 <__swsetup_r+0xd8>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	bf08      	it	eq
 800a8d8:	68ec      	ldreq	r4, [r5, #12]
 800a8da:	e7e6      	b.n	800a8aa <__swsetup_r+0x1e>
 800a8dc:	0758      	lsls	r0, r3, #29
 800a8de:	d512      	bpl.n	800a906 <__swsetup_r+0x7a>
 800a8e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8e2:	b141      	cbz	r1, 800a8f6 <__swsetup_r+0x6a>
 800a8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8e8:	4299      	cmp	r1, r3
 800a8ea:	d002      	beq.n	800a8f2 <__swsetup_r+0x66>
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f000 fa87 	bl	800ae00 <_free_r>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8fc:	81a3      	strh	r3, [r4, #12]
 800a8fe:	2300      	movs	r3, #0
 800a900:	6063      	str	r3, [r4, #4]
 800a902:	6923      	ldr	r3, [r4, #16]
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	f043 0308 	orr.w	r3, r3, #8
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	b94b      	cbnz	r3, 800a926 <__swsetup_r+0x9a>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91c:	d003      	beq.n	800a926 <__swsetup_r+0x9a>
 800a91e:	4621      	mov	r1, r4
 800a920:	4630      	mov	r0, r6
 800a922:	f000 fa05 	bl	800ad30 <__smakebuf_r>
 800a926:	89a0      	ldrh	r0, [r4, #12]
 800a928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a92c:	f010 0301 	ands.w	r3, r0, #1
 800a930:	d00a      	beq.n	800a948 <__swsetup_r+0xbc>
 800a932:	2300      	movs	r3, #0
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	6963      	ldr	r3, [r4, #20]
 800a938:	425b      	negs	r3, r3
 800a93a:	61a3      	str	r3, [r4, #24]
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	b943      	cbnz	r3, 800a952 <__swsetup_r+0xc6>
 800a940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a944:	d1ba      	bne.n	800a8bc <__swsetup_r+0x30>
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	0781      	lsls	r1, r0, #30
 800a94a:	bf58      	it	pl
 800a94c:	6963      	ldrpl	r3, [r4, #20]
 800a94e:	60a3      	str	r3, [r4, #8]
 800a950:	e7f4      	b.n	800a93c <__swsetup_r+0xb0>
 800a952:	2000      	movs	r0, #0
 800a954:	e7f7      	b.n	800a946 <__swsetup_r+0xba>
 800a956:	bf00      	nop
 800a958:	20000018 	.word	0x20000018
 800a95c:	0800d010 	.word	0x0800d010
 800a960:	0800d030 	.word	0x0800d030
 800a964:	0800cff0 	.word	0x0800cff0

0800a968 <abort>:
 800a968:	2006      	movs	r0, #6
 800a96a:	b508      	push	{r3, lr}
 800a96c:	f000 fce6 	bl	800b33c <raise>
 800a970:	2001      	movs	r0, #1
 800a972:	f7fb f938 	bl	8005be6 <_exit>
	...

0800a978 <__sflush_r>:
 800a978:	898a      	ldrh	r2, [r1, #12]
 800a97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97c:	4605      	mov	r5, r0
 800a97e:	0710      	lsls	r0, r2, #28
 800a980:	460c      	mov	r4, r1
 800a982:	d457      	bmi.n	800aa34 <__sflush_r+0xbc>
 800a984:	684b      	ldr	r3, [r1, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	dc04      	bgt.n	800a994 <__sflush_r+0x1c>
 800a98a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dc01      	bgt.n	800a994 <__sflush_r+0x1c>
 800a990:	2000      	movs	r0, #0
 800a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a996:	2e00      	cmp	r6, #0
 800a998:	d0fa      	beq.n	800a990 <__sflush_r+0x18>
 800a99a:	2300      	movs	r3, #0
 800a99c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9a0:	682f      	ldr	r7, [r5, #0]
 800a9a2:	602b      	str	r3, [r5, #0]
 800a9a4:	d032      	beq.n	800aa0c <__sflush_r+0x94>
 800a9a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	075a      	lsls	r2, r3, #29
 800a9ac:	d505      	bpl.n	800a9ba <__sflush_r+0x42>
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	1ac0      	subs	r0, r0, r3
 800a9b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9b4:	b10b      	cbz	r3, 800a9ba <__sflush_r+0x42>
 800a9b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9b8:	1ac0      	subs	r0, r0, r3
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	6a21      	ldr	r1, [r4, #32]
 800a9c4:	47b0      	blx	r6
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	d106      	bne.n	800a9da <__sflush_r+0x62>
 800a9cc:	6829      	ldr	r1, [r5, #0]
 800a9ce:	291d      	cmp	r1, #29
 800a9d0:	d82c      	bhi.n	800aa2c <__sflush_r+0xb4>
 800a9d2:	4a29      	ldr	r2, [pc, #164]	; (800aa78 <__sflush_r+0x100>)
 800a9d4:	40ca      	lsrs	r2, r1
 800a9d6:	07d6      	lsls	r6, r2, #31
 800a9d8:	d528      	bpl.n	800aa2c <__sflush_r+0xb4>
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6062      	str	r2, [r4, #4]
 800a9de:	6922      	ldr	r2, [r4, #16]
 800a9e0:	04d9      	lsls	r1, r3, #19
 800a9e2:	6022      	str	r2, [r4, #0]
 800a9e4:	d504      	bpl.n	800a9f0 <__sflush_r+0x78>
 800a9e6:	1c42      	adds	r2, r0, #1
 800a9e8:	d101      	bne.n	800a9ee <__sflush_r+0x76>
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	b903      	cbnz	r3, 800a9f0 <__sflush_r+0x78>
 800a9ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9f2:	602f      	str	r7, [r5, #0]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	d0cb      	beq.n	800a990 <__sflush_r+0x18>
 800a9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	d002      	beq.n	800aa06 <__sflush_r+0x8e>
 800aa00:	4628      	mov	r0, r5
 800aa02:	f000 f9fd 	bl	800ae00 <_free_r>
 800aa06:	2000      	movs	r0, #0
 800aa08:	6360      	str	r0, [r4, #52]	; 0x34
 800aa0a:	e7c2      	b.n	800a992 <__sflush_r+0x1a>
 800aa0c:	6a21      	ldr	r1, [r4, #32]
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b0      	blx	r6
 800aa14:	1c41      	adds	r1, r0, #1
 800aa16:	d1c7      	bne.n	800a9a8 <__sflush_r+0x30>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0c4      	beq.n	800a9a8 <__sflush_r+0x30>
 800aa1e:	2b1d      	cmp	r3, #29
 800aa20:	d001      	beq.n	800aa26 <__sflush_r+0xae>
 800aa22:	2b16      	cmp	r3, #22
 800aa24:	d101      	bne.n	800aa2a <__sflush_r+0xb2>
 800aa26:	602f      	str	r7, [r5, #0]
 800aa28:	e7b2      	b.n	800a990 <__sflush_r+0x18>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	e7ae      	b.n	800a992 <__sflush_r+0x1a>
 800aa34:	690f      	ldr	r7, [r1, #16]
 800aa36:	2f00      	cmp	r7, #0
 800aa38:	d0aa      	beq.n	800a990 <__sflush_r+0x18>
 800aa3a:	0793      	lsls	r3, r2, #30
 800aa3c:	bf18      	it	ne
 800aa3e:	2300      	movne	r3, #0
 800aa40:	680e      	ldr	r6, [r1, #0]
 800aa42:	bf08      	it	eq
 800aa44:	694b      	ldreq	r3, [r1, #20]
 800aa46:	1bf6      	subs	r6, r6, r7
 800aa48:	600f      	str	r7, [r1, #0]
 800aa4a:	608b      	str	r3, [r1, #8]
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	dd9f      	ble.n	800a990 <__sflush_r+0x18>
 800aa50:	4633      	mov	r3, r6
 800aa52:	463a      	mov	r2, r7
 800aa54:	4628      	mov	r0, r5
 800aa56:	6a21      	ldr	r1, [r4, #32]
 800aa58:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa5c:	47e0      	blx	ip
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	dc06      	bgt.n	800aa70 <__sflush_r+0xf8>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	e790      	b.n	800a992 <__sflush_r+0x1a>
 800aa70:	4407      	add	r7, r0
 800aa72:	1a36      	subs	r6, r6, r0
 800aa74:	e7ea      	b.n	800aa4c <__sflush_r+0xd4>
 800aa76:	bf00      	nop
 800aa78:	20400001 	.word	0x20400001

0800aa7c <_fflush_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	690b      	ldr	r3, [r1, #16]
 800aa80:	4605      	mov	r5, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	b913      	cbnz	r3, 800aa8c <_fflush_r+0x10>
 800aa86:	2500      	movs	r5, #0
 800aa88:	4628      	mov	r0, r5
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	b118      	cbz	r0, 800aa96 <_fflush_r+0x1a>
 800aa8e:	6983      	ldr	r3, [r0, #24]
 800aa90:	b90b      	cbnz	r3, 800aa96 <_fflush_r+0x1a>
 800aa92:	f000 f887 	bl	800aba4 <__sinit>
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <_fflush_r+0x6c>)
 800aa98:	429c      	cmp	r4, r3
 800aa9a:	d11b      	bne.n	800aad4 <_fflush_r+0x58>
 800aa9c:	686c      	ldr	r4, [r5, #4]
 800aa9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0ef      	beq.n	800aa86 <_fflush_r+0xa>
 800aaa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaa8:	07d0      	lsls	r0, r2, #31
 800aaaa:	d404      	bmi.n	800aab6 <_fflush_r+0x3a>
 800aaac:	0599      	lsls	r1, r3, #22
 800aaae:	d402      	bmi.n	800aab6 <_fflush_r+0x3a>
 800aab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab2:	f000 f915 	bl	800ace0 <__retarget_lock_acquire_recursive>
 800aab6:	4628      	mov	r0, r5
 800aab8:	4621      	mov	r1, r4
 800aaba:	f7ff ff5d 	bl	800a978 <__sflush_r>
 800aabe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aac0:	4605      	mov	r5, r0
 800aac2:	07da      	lsls	r2, r3, #31
 800aac4:	d4e0      	bmi.n	800aa88 <_fflush_r+0xc>
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	059b      	lsls	r3, r3, #22
 800aaca:	d4dd      	bmi.n	800aa88 <_fflush_r+0xc>
 800aacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aace:	f000 f908 	bl	800ace2 <__retarget_lock_release_recursive>
 800aad2:	e7d9      	b.n	800aa88 <_fflush_r+0xc>
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <_fflush_r+0x70>)
 800aad6:	429c      	cmp	r4, r3
 800aad8:	d101      	bne.n	800aade <_fflush_r+0x62>
 800aada:	68ac      	ldr	r4, [r5, #8]
 800aadc:	e7df      	b.n	800aa9e <_fflush_r+0x22>
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <_fflush_r+0x74>)
 800aae0:	429c      	cmp	r4, r3
 800aae2:	bf08      	it	eq
 800aae4:	68ec      	ldreq	r4, [r5, #12]
 800aae6:	e7da      	b.n	800aa9e <_fflush_r+0x22>
 800aae8:	0800d010 	.word	0x0800d010
 800aaec:	0800d030 	.word	0x0800d030
 800aaf0:	0800cff0 	.word	0x0800cff0

0800aaf4 <std>:
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	4604      	mov	r4, r0
 800aafa:	e9c0 3300 	strd	r3, r3, [r0]
 800aafe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab02:	6083      	str	r3, [r0, #8]
 800ab04:	8181      	strh	r1, [r0, #12]
 800ab06:	6643      	str	r3, [r0, #100]	; 0x64
 800ab08:	81c2      	strh	r2, [r0, #14]
 800ab0a:	6183      	str	r3, [r0, #24]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	2208      	movs	r2, #8
 800ab10:	305c      	adds	r0, #92	; 0x5c
 800ab12:	f7ff fb53 	bl	800a1bc <memset>
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <std+0x38>)
 800ab18:	6224      	str	r4, [r4, #32]
 800ab1a:	6263      	str	r3, [r4, #36]	; 0x24
 800ab1c:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <std+0x3c>)
 800ab1e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <std+0x40>)
 800ab22:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <std+0x44>)
 800ab26:	6323      	str	r3, [r4, #48]	; 0x30
 800ab28:	bd10      	pop	{r4, pc}
 800ab2a:	bf00      	nop
 800ab2c:	0800b375 	.word	0x0800b375
 800ab30:	0800b397 	.word	0x0800b397
 800ab34:	0800b3cf 	.word	0x0800b3cf
 800ab38:	0800b3f3 	.word	0x0800b3f3

0800ab3c <_cleanup_r>:
 800ab3c:	4901      	ldr	r1, [pc, #4]	; (800ab44 <_cleanup_r+0x8>)
 800ab3e:	f000 b8af 	b.w	800aca0 <_fwalk_reent>
 800ab42:	bf00      	nop
 800ab44:	0800aa7d 	.word	0x0800aa7d

0800ab48 <__sfmoreglue>:
 800ab48:	2268      	movs	r2, #104	; 0x68
 800ab4a:	b570      	push	{r4, r5, r6, lr}
 800ab4c:	1e4d      	subs	r5, r1, #1
 800ab4e:	4355      	muls	r5, r2
 800ab50:	460e      	mov	r6, r1
 800ab52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab56:	f000 f9bb 	bl	800aed0 <_malloc_r>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	b140      	cbz	r0, 800ab70 <__sfmoreglue+0x28>
 800ab5e:	2100      	movs	r1, #0
 800ab60:	e9c0 1600 	strd	r1, r6, [r0]
 800ab64:	300c      	adds	r0, #12
 800ab66:	60a0      	str	r0, [r4, #8]
 800ab68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab6c:	f7ff fb26 	bl	800a1bc <memset>
 800ab70:	4620      	mov	r0, r4
 800ab72:	bd70      	pop	{r4, r5, r6, pc}

0800ab74 <__sfp_lock_acquire>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__sfp_lock_acquire+0x8>)
 800ab76:	f000 b8b3 	b.w	800ace0 <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20007fad 	.word	0x20007fad

0800ab80 <__sfp_lock_release>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__sfp_lock_release+0x8>)
 800ab82:	f000 b8ae 	b.w	800ace2 <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	20007fad 	.word	0x20007fad

0800ab8c <__sinit_lock_acquire>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__sinit_lock_acquire+0x8>)
 800ab8e:	f000 b8a7 	b.w	800ace0 <__retarget_lock_acquire_recursive>
 800ab92:	bf00      	nop
 800ab94:	20007fae 	.word	0x20007fae

0800ab98 <__sinit_lock_release>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__sinit_lock_release+0x8>)
 800ab9a:	f000 b8a2 	b.w	800ace2 <__retarget_lock_release_recursive>
 800ab9e:	bf00      	nop
 800aba0:	20007fae 	.word	0x20007fae

0800aba4 <__sinit>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4604      	mov	r4, r0
 800aba8:	f7ff fff0 	bl	800ab8c <__sinit_lock_acquire>
 800abac:	69a3      	ldr	r3, [r4, #24]
 800abae:	b11b      	cbz	r3, 800abb8 <__sinit+0x14>
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f7ff bff0 	b.w	800ab98 <__sinit_lock_release>
 800abb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abbc:	6523      	str	r3, [r4, #80]	; 0x50
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <__sinit+0x68>)
 800abc0:	4a13      	ldr	r2, [pc, #76]	; (800ac10 <__sinit+0x6c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800abc6:	42a3      	cmp	r3, r4
 800abc8:	bf08      	it	eq
 800abca:	2301      	moveq	r3, #1
 800abcc:	4620      	mov	r0, r4
 800abce:	bf08      	it	eq
 800abd0:	61a3      	streq	r3, [r4, #24]
 800abd2:	f000 f81f 	bl	800ac14 <__sfp>
 800abd6:	6060      	str	r0, [r4, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f81b 	bl	800ac14 <__sfp>
 800abde:	60a0      	str	r0, [r4, #8]
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 f817 	bl	800ac14 <__sfp>
 800abe6:	2200      	movs	r2, #0
 800abe8:	2104      	movs	r1, #4
 800abea:	60e0      	str	r0, [r4, #12]
 800abec:	6860      	ldr	r0, [r4, #4]
 800abee:	f7ff ff81 	bl	800aaf4 <std>
 800abf2:	2201      	movs	r2, #1
 800abf4:	2109      	movs	r1, #9
 800abf6:	68a0      	ldr	r0, [r4, #8]
 800abf8:	f7ff ff7c 	bl	800aaf4 <std>
 800abfc:	2202      	movs	r2, #2
 800abfe:	2112      	movs	r1, #18
 800ac00:	68e0      	ldr	r0, [r4, #12]
 800ac02:	f7ff ff77 	bl	800aaf4 <std>
 800ac06:	2301      	movs	r3, #1
 800ac08:	61a3      	str	r3, [r4, #24]
 800ac0a:	e7d1      	b.n	800abb0 <__sinit+0xc>
 800ac0c:	0800cfb8 	.word	0x0800cfb8
 800ac10:	0800ab3d 	.word	0x0800ab3d

0800ac14 <__sfp>:
 800ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac16:	4607      	mov	r7, r0
 800ac18:	f7ff ffac 	bl	800ab74 <__sfp_lock_acquire>
 800ac1c:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <__sfp+0x84>)
 800ac1e:	681e      	ldr	r6, [r3, #0]
 800ac20:	69b3      	ldr	r3, [r6, #24]
 800ac22:	b913      	cbnz	r3, 800ac2a <__sfp+0x16>
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff ffbd 	bl	800aba4 <__sinit>
 800ac2a:	3648      	adds	r6, #72	; 0x48
 800ac2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	d503      	bpl.n	800ac3c <__sfp+0x28>
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	b30b      	cbz	r3, 800ac7c <__sfp+0x68>
 800ac38:	6836      	ldr	r6, [r6, #0]
 800ac3a:	e7f7      	b.n	800ac2c <__sfp+0x18>
 800ac3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac40:	b9d5      	cbnz	r5, 800ac78 <__sfp+0x64>
 800ac42:	4b16      	ldr	r3, [pc, #88]	; (800ac9c <__sfp+0x88>)
 800ac44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac48:	60e3      	str	r3, [r4, #12]
 800ac4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac4c:	f000 f847 	bl	800acde <__retarget_lock_init_recursive>
 800ac50:	f7ff ff96 	bl	800ab80 <__sfp_lock_release>
 800ac54:	2208      	movs	r2, #8
 800ac56:	4629      	mov	r1, r5
 800ac58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac60:	6025      	str	r5, [r4, #0]
 800ac62:	61a5      	str	r5, [r4, #24]
 800ac64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac68:	f7ff faa8 	bl	800a1bc <memset>
 800ac6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac74:	4620      	mov	r0, r4
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	3468      	adds	r4, #104	; 0x68
 800ac7a:	e7d9      	b.n	800ac30 <__sfp+0x1c>
 800ac7c:	2104      	movs	r1, #4
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f7ff ff62 	bl	800ab48 <__sfmoreglue>
 800ac84:	4604      	mov	r4, r0
 800ac86:	6030      	str	r0, [r6, #0]
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d1d5      	bne.n	800ac38 <__sfp+0x24>
 800ac8c:	f7ff ff78 	bl	800ab80 <__sfp_lock_release>
 800ac90:	230c      	movs	r3, #12
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	e7ee      	b.n	800ac74 <__sfp+0x60>
 800ac96:	bf00      	nop
 800ac98:	0800cfb8 	.word	0x0800cfb8
 800ac9c:	ffff0001 	.word	0xffff0001

0800aca0 <_fwalk_reent>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	4606      	mov	r6, r0
 800aca6:	4688      	mov	r8, r1
 800aca8:	2700      	movs	r7, #0
 800acaa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acb2:	f1b9 0901 	subs.w	r9, r9, #1
 800acb6:	d505      	bpl.n	800acc4 <_fwalk_reent+0x24>
 800acb8:	6824      	ldr	r4, [r4, #0]
 800acba:	2c00      	cmp	r4, #0
 800acbc:	d1f7      	bne.n	800acae <_fwalk_reent+0xe>
 800acbe:	4638      	mov	r0, r7
 800acc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc4:	89ab      	ldrh	r3, [r5, #12]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d907      	bls.n	800acda <_fwalk_reent+0x3a>
 800acca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acce:	3301      	adds	r3, #1
 800acd0:	d003      	beq.n	800acda <_fwalk_reent+0x3a>
 800acd2:	4629      	mov	r1, r5
 800acd4:	4630      	mov	r0, r6
 800acd6:	47c0      	blx	r8
 800acd8:	4307      	orrs	r7, r0
 800acda:	3568      	adds	r5, #104	; 0x68
 800acdc:	e7e9      	b.n	800acb2 <_fwalk_reent+0x12>

0800acde <__retarget_lock_init_recursive>:
 800acde:	4770      	bx	lr

0800ace0 <__retarget_lock_acquire_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <__retarget_lock_release_recursive>:
 800ace2:	4770      	bx	lr

0800ace4 <__swhatbuf_r>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	460e      	mov	r6, r1
 800ace8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acec:	4614      	mov	r4, r2
 800acee:	2900      	cmp	r1, #0
 800acf0:	461d      	mov	r5, r3
 800acf2:	b096      	sub	sp, #88	; 0x58
 800acf4:	da08      	bge.n	800ad08 <__swhatbuf_r+0x24>
 800acf6:	2200      	movs	r2, #0
 800acf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	061a      	lsls	r2, r3, #24
 800ad00:	d410      	bmi.n	800ad24 <__swhatbuf_r+0x40>
 800ad02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad06:	e00e      	b.n	800ad26 <__swhatbuf_r+0x42>
 800ad08:	466a      	mov	r2, sp
 800ad0a:	f000 fb99 	bl	800b440 <_fstat_r>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	dbf1      	blt.n	800acf6 <__swhatbuf_r+0x12>
 800ad12:	9a01      	ldr	r2, [sp, #4]
 800ad14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad1c:	425a      	negs	r2, r3
 800ad1e:	415a      	adcs	r2, r3
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	e7ee      	b.n	800ad02 <__swhatbuf_r+0x1e>
 800ad24:	2340      	movs	r3, #64	; 0x40
 800ad26:	2000      	movs	r0, #0
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	b016      	add	sp, #88	; 0x58
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad30 <__smakebuf_r>:
 800ad30:	898b      	ldrh	r3, [r1, #12]
 800ad32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad34:	079d      	lsls	r5, r3, #30
 800ad36:	4606      	mov	r6, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	d507      	bpl.n	800ad4c <__smakebuf_r+0x1c>
 800ad3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	6123      	str	r3, [r4, #16]
 800ad44:	2301      	movs	r3, #1
 800ad46:	6163      	str	r3, [r4, #20]
 800ad48:	b002      	add	sp, #8
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	466a      	mov	r2, sp
 800ad4e:	ab01      	add	r3, sp, #4
 800ad50:	f7ff ffc8 	bl	800ace4 <__swhatbuf_r>
 800ad54:	9900      	ldr	r1, [sp, #0]
 800ad56:	4605      	mov	r5, r0
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f8b9 	bl	800aed0 <_malloc_r>
 800ad5e:	b948      	cbnz	r0, 800ad74 <__smakebuf_r+0x44>
 800ad60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad64:	059a      	lsls	r2, r3, #22
 800ad66:	d4ef      	bmi.n	800ad48 <__smakebuf_r+0x18>
 800ad68:	f023 0303 	bic.w	r3, r3, #3
 800ad6c:	f043 0302 	orr.w	r3, r3, #2
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	e7e3      	b.n	800ad3c <__smakebuf_r+0xc>
 800ad74:	4b0d      	ldr	r3, [pc, #52]	; (800adac <__smakebuf_r+0x7c>)
 800ad76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	6020      	str	r0, [r4, #0]
 800ad7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	9b00      	ldr	r3, [sp, #0]
 800ad84:	6120      	str	r0, [r4, #16]
 800ad86:	6163      	str	r3, [r4, #20]
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	b15b      	cbz	r3, 800ada4 <__smakebuf_r+0x74>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad92:	f000 fb67 	bl	800b464 <_isatty_r>
 800ad96:	b128      	cbz	r0, 800ada4 <__smakebuf_r+0x74>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f023 0303 	bic.w	r3, r3, #3
 800ad9e:	f043 0301 	orr.w	r3, r3, #1
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	89a0      	ldrh	r0, [r4, #12]
 800ada6:	4305      	orrs	r5, r0
 800ada8:	81a5      	strh	r5, [r4, #12]
 800adaa:	e7cd      	b.n	800ad48 <__smakebuf_r+0x18>
 800adac:	0800ab3d 	.word	0x0800ab3d

0800adb0 <memchr>:
 800adb0:	4603      	mov	r3, r0
 800adb2:	b510      	push	{r4, lr}
 800adb4:	b2c9      	uxtb	r1, r1
 800adb6:	4402      	add	r2, r0
 800adb8:	4293      	cmp	r3, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	d101      	bne.n	800adc2 <memchr+0x12>
 800adbe:	2000      	movs	r0, #0
 800adc0:	e003      	b.n	800adca <memchr+0x1a>
 800adc2:	7804      	ldrb	r4, [r0, #0]
 800adc4:	3301      	adds	r3, #1
 800adc6:	428c      	cmp	r4, r1
 800adc8:	d1f6      	bne.n	800adb8 <memchr+0x8>
 800adca:	bd10      	pop	{r4, pc}

0800adcc <memmove>:
 800adcc:	4288      	cmp	r0, r1
 800adce:	b510      	push	{r4, lr}
 800add0:	eb01 0402 	add.w	r4, r1, r2
 800add4:	d902      	bls.n	800addc <memmove+0x10>
 800add6:	4284      	cmp	r4, r0
 800add8:	4623      	mov	r3, r4
 800adda:	d807      	bhi.n	800adec <memmove+0x20>
 800addc:	1e43      	subs	r3, r0, #1
 800adde:	42a1      	cmp	r1, r4
 800ade0:	d008      	beq.n	800adf4 <memmove+0x28>
 800ade2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adea:	e7f8      	b.n	800adde <memmove+0x12>
 800adec:	4601      	mov	r1, r0
 800adee:	4402      	add	r2, r0
 800adf0:	428a      	cmp	r2, r1
 800adf2:	d100      	bne.n	800adf6 <memmove+0x2a>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adfe:	e7f7      	b.n	800adf0 <memmove+0x24>

0800ae00 <_free_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4605      	mov	r5, r0
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d040      	beq.n	800ae8a <_free_r+0x8a>
 800ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae0c:	1f0c      	subs	r4, r1, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfb8      	it	lt
 800ae12:	18e4      	addlt	r4, r4, r3
 800ae14:	f000 fb48 	bl	800b4a8 <__malloc_lock>
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <_free_r+0x8c>)
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	b933      	cbnz	r3, 800ae2c <_free_r+0x2c>
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6014      	str	r4, [r2, #0]
 800ae22:	4628      	mov	r0, r5
 800ae24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae28:	f000 bb44 	b.w	800b4b4 <__malloc_unlock>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d908      	bls.n	800ae42 <_free_r+0x42>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	1821      	adds	r1, r4, r0
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf01      	itttt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	1809      	addeq	r1, r1, r0
 800ae3e:	6021      	streq	r1, [r4, #0]
 800ae40:	e7ed      	b.n	800ae1e <_free_r+0x1e>
 800ae42:	461a      	mov	r2, r3
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b10b      	cbz	r3, 800ae4c <_free_r+0x4c>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d9fa      	bls.n	800ae42 <_free_r+0x42>
 800ae4c:	6811      	ldr	r1, [r2, #0]
 800ae4e:	1850      	adds	r0, r2, r1
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d10b      	bne.n	800ae6c <_free_r+0x6c>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	4401      	add	r1, r0
 800ae58:	1850      	adds	r0, r2, r1
 800ae5a:	4283      	cmp	r3, r0
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	d1e0      	bne.n	800ae22 <_free_r+0x22>
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4401      	add	r1, r0
 800ae66:	6011      	str	r1, [r2, #0]
 800ae68:	6053      	str	r3, [r2, #4]
 800ae6a:	e7da      	b.n	800ae22 <_free_r+0x22>
 800ae6c:	d902      	bls.n	800ae74 <_free_r+0x74>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	e7d6      	b.n	800ae22 <_free_r+0x22>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	1821      	adds	r1, r4, r0
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf01      	itttt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	1809      	addeq	r1, r1, r0
 800ae82:	6021      	streq	r1, [r4, #0]
 800ae84:	6063      	str	r3, [r4, #4]
 800ae86:	6054      	str	r4, [r2, #4]
 800ae88:	e7cb      	b.n	800ae22 <_free_r+0x22>
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20007fb0 	.word	0x20007fb0

0800ae90 <sbrk_aligned>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	4e0e      	ldr	r6, [pc, #56]	; (800aecc <sbrk_aligned+0x3c>)
 800ae94:	460c      	mov	r4, r1
 800ae96:	6831      	ldr	r1, [r6, #0]
 800ae98:	4605      	mov	r5, r0
 800ae9a:	b911      	cbnz	r1, 800aea2 <sbrk_aligned+0x12>
 800ae9c:	f000 fa16 	bl	800b2cc <_sbrk_r>
 800aea0:	6030      	str	r0, [r6, #0]
 800aea2:	4621      	mov	r1, r4
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 fa11 	bl	800b2cc <_sbrk_r>
 800aeaa:	1c43      	adds	r3, r0, #1
 800aeac:	d00a      	beq.n	800aec4 <sbrk_aligned+0x34>
 800aeae:	1cc4      	adds	r4, r0, #3
 800aeb0:	f024 0403 	bic.w	r4, r4, #3
 800aeb4:	42a0      	cmp	r0, r4
 800aeb6:	d007      	beq.n	800aec8 <sbrk_aligned+0x38>
 800aeb8:	1a21      	subs	r1, r4, r0
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 fa06 	bl	800b2cc <_sbrk_r>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d101      	bne.n	800aec8 <sbrk_aligned+0x38>
 800aec4:	f04f 34ff 	mov.w	r4, #4294967295
 800aec8:	4620      	mov	r0, r4
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	20007fb4 	.word	0x20007fb4

0800aed0 <_malloc_r>:
 800aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed4:	1ccd      	adds	r5, r1, #3
 800aed6:	f025 0503 	bic.w	r5, r5, #3
 800aeda:	3508      	adds	r5, #8
 800aedc:	2d0c      	cmp	r5, #12
 800aede:	bf38      	it	cc
 800aee0:	250c      	movcc	r5, #12
 800aee2:	2d00      	cmp	r5, #0
 800aee4:	4607      	mov	r7, r0
 800aee6:	db01      	blt.n	800aeec <_malloc_r+0x1c>
 800aee8:	42a9      	cmp	r1, r5
 800aeea:	d905      	bls.n	800aef8 <_malloc_r+0x28>
 800aeec:	230c      	movs	r3, #12
 800aeee:	2600      	movs	r6, #0
 800aef0:	603b      	str	r3, [r7, #0]
 800aef2:	4630      	mov	r0, r6
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	4e2e      	ldr	r6, [pc, #184]	; (800afb4 <_malloc_r+0xe4>)
 800aefa:	f000 fad5 	bl	800b4a8 <__malloc_lock>
 800aefe:	6833      	ldr	r3, [r6, #0]
 800af00:	461c      	mov	r4, r3
 800af02:	bb34      	cbnz	r4, 800af52 <_malloc_r+0x82>
 800af04:	4629      	mov	r1, r5
 800af06:	4638      	mov	r0, r7
 800af08:	f7ff ffc2 	bl	800ae90 <sbrk_aligned>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	4604      	mov	r4, r0
 800af10:	d14d      	bne.n	800afae <_malloc_r+0xde>
 800af12:	6834      	ldr	r4, [r6, #0]
 800af14:	4626      	mov	r6, r4
 800af16:	2e00      	cmp	r6, #0
 800af18:	d140      	bne.n	800af9c <_malloc_r+0xcc>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	4631      	mov	r1, r6
 800af1e:	4638      	mov	r0, r7
 800af20:	eb04 0803 	add.w	r8, r4, r3
 800af24:	f000 f9d2 	bl	800b2cc <_sbrk_r>
 800af28:	4580      	cmp	r8, r0
 800af2a:	d13a      	bne.n	800afa2 <_malloc_r+0xd2>
 800af2c:	6821      	ldr	r1, [r4, #0]
 800af2e:	3503      	adds	r5, #3
 800af30:	1a6d      	subs	r5, r5, r1
 800af32:	f025 0503 	bic.w	r5, r5, #3
 800af36:	3508      	adds	r5, #8
 800af38:	2d0c      	cmp	r5, #12
 800af3a:	bf38      	it	cc
 800af3c:	250c      	movcc	r5, #12
 800af3e:	4638      	mov	r0, r7
 800af40:	4629      	mov	r1, r5
 800af42:	f7ff ffa5 	bl	800ae90 <sbrk_aligned>
 800af46:	3001      	adds	r0, #1
 800af48:	d02b      	beq.n	800afa2 <_malloc_r+0xd2>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	442b      	add	r3, r5
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	e00e      	b.n	800af70 <_malloc_r+0xa0>
 800af52:	6822      	ldr	r2, [r4, #0]
 800af54:	1b52      	subs	r2, r2, r5
 800af56:	d41e      	bmi.n	800af96 <_malloc_r+0xc6>
 800af58:	2a0b      	cmp	r2, #11
 800af5a:	d916      	bls.n	800af8a <_malloc_r+0xba>
 800af5c:	1961      	adds	r1, r4, r5
 800af5e:	42a3      	cmp	r3, r4
 800af60:	6025      	str	r5, [r4, #0]
 800af62:	bf18      	it	ne
 800af64:	6059      	strne	r1, [r3, #4]
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	bf08      	it	eq
 800af6a:	6031      	streq	r1, [r6, #0]
 800af6c:	5162      	str	r2, [r4, r5]
 800af6e:	604b      	str	r3, [r1, #4]
 800af70:	4638      	mov	r0, r7
 800af72:	f104 060b 	add.w	r6, r4, #11
 800af76:	f000 fa9d 	bl	800b4b4 <__malloc_unlock>
 800af7a:	f026 0607 	bic.w	r6, r6, #7
 800af7e:	1d23      	adds	r3, r4, #4
 800af80:	1af2      	subs	r2, r6, r3
 800af82:	d0b6      	beq.n	800aef2 <_malloc_r+0x22>
 800af84:	1b9b      	subs	r3, r3, r6
 800af86:	50a3      	str	r3, [r4, r2]
 800af88:	e7b3      	b.n	800aef2 <_malloc_r+0x22>
 800af8a:	6862      	ldr	r2, [r4, #4]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	bf0c      	ite	eq
 800af90:	6032      	streq	r2, [r6, #0]
 800af92:	605a      	strne	r2, [r3, #4]
 800af94:	e7ec      	b.n	800af70 <_malloc_r+0xa0>
 800af96:	4623      	mov	r3, r4
 800af98:	6864      	ldr	r4, [r4, #4]
 800af9a:	e7b2      	b.n	800af02 <_malloc_r+0x32>
 800af9c:	4634      	mov	r4, r6
 800af9e:	6876      	ldr	r6, [r6, #4]
 800afa0:	e7b9      	b.n	800af16 <_malloc_r+0x46>
 800afa2:	230c      	movs	r3, #12
 800afa4:	4638      	mov	r0, r7
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	f000 fa84 	bl	800b4b4 <__malloc_unlock>
 800afac:	e7a1      	b.n	800aef2 <_malloc_r+0x22>
 800afae:	6025      	str	r5, [r4, #0]
 800afb0:	e7de      	b.n	800af70 <_malloc_r+0xa0>
 800afb2:	bf00      	nop
 800afb4:	20007fb0 	.word	0x20007fb0

0800afb8 <_realloc_r>:
 800afb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afbc:	4680      	mov	r8, r0
 800afbe:	4614      	mov	r4, r2
 800afc0:	460e      	mov	r6, r1
 800afc2:	b921      	cbnz	r1, 800afce <_realloc_r+0x16>
 800afc4:	4611      	mov	r1, r2
 800afc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afca:	f7ff bf81 	b.w	800aed0 <_malloc_r>
 800afce:	b92a      	cbnz	r2, 800afdc <_realloc_r+0x24>
 800afd0:	f7ff ff16 	bl	800ae00 <_free_r>
 800afd4:	4625      	mov	r5, r4
 800afd6:	4628      	mov	r0, r5
 800afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afdc:	f000 fa70 	bl	800b4c0 <_malloc_usable_size_r>
 800afe0:	4284      	cmp	r4, r0
 800afe2:	4607      	mov	r7, r0
 800afe4:	d802      	bhi.n	800afec <_realloc_r+0x34>
 800afe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afea:	d812      	bhi.n	800b012 <_realloc_r+0x5a>
 800afec:	4621      	mov	r1, r4
 800afee:	4640      	mov	r0, r8
 800aff0:	f7ff ff6e 	bl	800aed0 <_malloc_r>
 800aff4:	4605      	mov	r5, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d0ed      	beq.n	800afd6 <_realloc_r+0x1e>
 800affa:	42bc      	cmp	r4, r7
 800affc:	4622      	mov	r2, r4
 800affe:	4631      	mov	r1, r6
 800b000:	bf28      	it	cs
 800b002:	463a      	movcs	r2, r7
 800b004:	f7ff f8cc 	bl	800a1a0 <memcpy>
 800b008:	4631      	mov	r1, r6
 800b00a:	4640      	mov	r0, r8
 800b00c:	f7ff fef8 	bl	800ae00 <_free_r>
 800b010:	e7e1      	b.n	800afd6 <_realloc_r+0x1e>
 800b012:	4635      	mov	r5, r6
 800b014:	e7df      	b.n	800afd6 <_realloc_r+0x1e>

0800b016 <__ssputs_r>:
 800b016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01a:	688e      	ldr	r6, [r1, #8]
 800b01c:	4682      	mov	sl, r0
 800b01e:	429e      	cmp	r6, r3
 800b020:	460c      	mov	r4, r1
 800b022:	4690      	mov	r8, r2
 800b024:	461f      	mov	r7, r3
 800b026:	d838      	bhi.n	800b09a <__ssputs_r+0x84>
 800b028:	898a      	ldrh	r2, [r1, #12]
 800b02a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b02e:	d032      	beq.n	800b096 <__ssputs_r+0x80>
 800b030:	6825      	ldr	r5, [r4, #0]
 800b032:	6909      	ldr	r1, [r1, #16]
 800b034:	3301      	adds	r3, #1
 800b036:	eba5 0901 	sub.w	r9, r5, r1
 800b03a:	6965      	ldr	r5, [r4, #20]
 800b03c:	444b      	add	r3, r9
 800b03e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b046:	106d      	asrs	r5, r5, #1
 800b048:	429d      	cmp	r5, r3
 800b04a:	bf38      	it	cc
 800b04c:	461d      	movcc	r5, r3
 800b04e:	0553      	lsls	r3, r2, #21
 800b050:	d531      	bpl.n	800b0b6 <__ssputs_r+0xa0>
 800b052:	4629      	mov	r1, r5
 800b054:	f7ff ff3c 	bl	800aed0 <_malloc_r>
 800b058:	4606      	mov	r6, r0
 800b05a:	b950      	cbnz	r0, 800b072 <__ssputs_r+0x5c>
 800b05c:	230c      	movs	r3, #12
 800b05e:	f04f 30ff 	mov.w	r0, #4294967295
 800b062:	f8ca 3000 	str.w	r3, [sl]
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	464a      	mov	r2, r9
 800b074:	6921      	ldr	r1, [r4, #16]
 800b076:	f7ff f893 	bl	800a1a0 <memcpy>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	6126      	str	r6, [r4, #16]
 800b088:	444e      	add	r6, r9
 800b08a:	6026      	str	r6, [r4, #0]
 800b08c:	463e      	mov	r6, r7
 800b08e:	6165      	str	r5, [r4, #20]
 800b090:	eba5 0509 	sub.w	r5, r5, r9
 800b094:	60a5      	str	r5, [r4, #8]
 800b096:	42be      	cmp	r6, r7
 800b098:	d900      	bls.n	800b09c <__ssputs_r+0x86>
 800b09a:	463e      	mov	r6, r7
 800b09c:	4632      	mov	r2, r6
 800b09e:	4641      	mov	r1, r8
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	f7ff fe93 	bl	800adcc <memmove>
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	1b9b      	subs	r3, r3, r6
 800b0ac:	60a3      	str	r3, [r4, #8]
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	4433      	add	r3, r6
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	e7db      	b.n	800b06e <__ssputs_r+0x58>
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	f7ff ff7e 	bl	800afb8 <_realloc_r>
 800b0bc:	4606      	mov	r6, r0
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d1e1      	bne.n	800b086 <__ssputs_r+0x70>
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	6921      	ldr	r1, [r4, #16]
 800b0c6:	f7ff fe9b 	bl	800ae00 <_free_r>
 800b0ca:	e7c7      	b.n	800b05c <__ssputs_r+0x46>

0800b0cc <_svfiprintf_r>:
 800b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	4698      	mov	r8, r3
 800b0d2:	898b      	ldrh	r3, [r1, #12]
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	061b      	lsls	r3, r3, #24
 800b0d8:	460d      	mov	r5, r1
 800b0da:	4614      	mov	r4, r2
 800b0dc:	b09d      	sub	sp, #116	; 0x74
 800b0de:	d50e      	bpl.n	800b0fe <_svfiprintf_r+0x32>
 800b0e0:	690b      	ldr	r3, [r1, #16]
 800b0e2:	b963      	cbnz	r3, 800b0fe <_svfiprintf_r+0x32>
 800b0e4:	2140      	movs	r1, #64	; 0x40
 800b0e6:	f7ff fef3 	bl	800aed0 <_malloc_r>
 800b0ea:	6028      	str	r0, [r5, #0]
 800b0ec:	6128      	str	r0, [r5, #16]
 800b0ee:	b920      	cbnz	r0, 800b0fa <_svfiprintf_r+0x2e>
 800b0f0:	230c      	movs	r3, #12
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	e0d1      	b.n	800b29e <_svfiprintf_r+0x1d2>
 800b0fa:	2340      	movs	r3, #64	; 0x40
 800b0fc:	616b      	str	r3, [r5, #20]
 800b0fe:	2300      	movs	r3, #0
 800b100:	9309      	str	r3, [sp, #36]	; 0x24
 800b102:	2320      	movs	r3, #32
 800b104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b108:	2330      	movs	r3, #48	; 0x30
 800b10a:	f04f 0901 	mov.w	r9, #1
 800b10e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b2b8 <_svfiprintf_r+0x1ec>
 800b116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b11a:	4623      	mov	r3, r4
 800b11c:	469a      	mov	sl, r3
 800b11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b122:	b10a      	cbz	r2, 800b128 <_svfiprintf_r+0x5c>
 800b124:	2a25      	cmp	r2, #37	; 0x25
 800b126:	d1f9      	bne.n	800b11c <_svfiprintf_r+0x50>
 800b128:	ebba 0b04 	subs.w	fp, sl, r4
 800b12c:	d00b      	beq.n	800b146 <_svfiprintf_r+0x7a>
 800b12e:	465b      	mov	r3, fp
 800b130:	4622      	mov	r2, r4
 800b132:	4629      	mov	r1, r5
 800b134:	4638      	mov	r0, r7
 800b136:	f7ff ff6e 	bl	800b016 <__ssputs_r>
 800b13a:	3001      	adds	r0, #1
 800b13c:	f000 80aa 	beq.w	800b294 <_svfiprintf_r+0x1c8>
 800b140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b142:	445a      	add	r2, fp
 800b144:	9209      	str	r2, [sp, #36]	; 0x24
 800b146:	f89a 3000 	ldrb.w	r3, [sl]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 80a2 	beq.w	800b294 <_svfiprintf_r+0x1c8>
 800b150:	2300      	movs	r3, #0
 800b152:	f04f 32ff 	mov.w	r2, #4294967295
 800b156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b15a:	f10a 0a01 	add.w	sl, sl, #1
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	9307      	str	r3, [sp, #28]
 800b162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b166:	931a      	str	r3, [sp, #104]	; 0x68
 800b168:	4654      	mov	r4, sl
 800b16a:	2205      	movs	r2, #5
 800b16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b170:	4851      	ldr	r0, [pc, #324]	; (800b2b8 <_svfiprintf_r+0x1ec>)
 800b172:	f7ff fe1d 	bl	800adb0 <memchr>
 800b176:	9a04      	ldr	r2, [sp, #16]
 800b178:	b9d8      	cbnz	r0, 800b1b2 <_svfiprintf_r+0xe6>
 800b17a:	06d0      	lsls	r0, r2, #27
 800b17c:	bf44      	itt	mi
 800b17e:	2320      	movmi	r3, #32
 800b180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b184:	0711      	lsls	r1, r2, #28
 800b186:	bf44      	itt	mi
 800b188:	232b      	movmi	r3, #43	; 0x2b
 800b18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18e:	f89a 3000 	ldrb.w	r3, [sl]
 800b192:	2b2a      	cmp	r3, #42	; 0x2a
 800b194:	d015      	beq.n	800b1c2 <_svfiprintf_r+0xf6>
 800b196:	4654      	mov	r4, sl
 800b198:	2000      	movs	r0, #0
 800b19a:	f04f 0c0a 	mov.w	ip, #10
 800b19e:	9a07      	ldr	r2, [sp, #28]
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a6:	3b30      	subs	r3, #48	; 0x30
 800b1a8:	2b09      	cmp	r3, #9
 800b1aa:	d94e      	bls.n	800b24a <_svfiprintf_r+0x17e>
 800b1ac:	b1b0      	cbz	r0, 800b1dc <_svfiprintf_r+0x110>
 800b1ae:	9207      	str	r2, [sp, #28]
 800b1b0:	e014      	b.n	800b1dc <_svfiprintf_r+0x110>
 800b1b2:	eba0 0308 	sub.w	r3, r0, r8
 800b1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	46a2      	mov	sl, r4
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	e7d2      	b.n	800b168 <_svfiprintf_r+0x9c>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	1d19      	adds	r1, r3, #4
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	9103      	str	r1, [sp, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfbb      	ittet	lt
 800b1ce:	425b      	neglt	r3, r3
 800b1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d4:	9307      	strge	r3, [sp, #28]
 800b1d6:	9307      	strlt	r3, [sp, #28]
 800b1d8:	bfb8      	it	lt
 800b1da:	9204      	strlt	r2, [sp, #16]
 800b1dc:	7823      	ldrb	r3, [r4, #0]
 800b1de:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e0:	d10c      	bne.n	800b1fc <_svfiprintf_r+0x130>
 800b1e2:	7863      	ldrb	r3, [r4, #1]
 800b1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e6:	d135      	bne.n	800b254 <_svfiprintf_r+0x188>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	3402      	adds	r4, #2
 800b1ec:	1d1a      	adds	r2, r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	9203      	str	r2, [sp, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bfb8      	it	lt
 800b1f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1fa:	9305      	str	r3, [sp, #20]
 800b1fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b2bc <_svfiprintf_r+0x1f0>
 800b200:	2203      	movs	r2, #3
 800b202:	4650      	mov	r0, sl
 800b204:	7821      	ldrb	r1, [r4, #0]
 800b206:	f7ff fdd3 	bl	800adb0 <memchr>
 800b20a:	b140      	cbz	r0, 800b21e <_svfiprintf_r+0x152>
 800b20c:	2340      	movs	r3, #64	; 0x40
 800b20e:	eba0 000a 	sub.w	r0, r0, sl
 800b212:	fa03 f000 	lsl.w	r0, r3, r0
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	3401      	adds	r4, #1
 800b21a:	4303      	orrs	r3, r0
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	2206      	movs	r2, #6
 800b224:	4826      	ldr	r0, [pc, #152]	; (800b2c0 <_svfiprintf_r+0x1f4>)
 800b226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b22a:	f7ff fdc1 	bl	800adb0 <memchr>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d038      	beq.n	800b2a4 <_svfiprintf_r+0x1d8>
 800b232:	4b24      	ldr	r3, [pc, #144]	; (800b2c4 <_svfiprintf_r+0x1f8>)
 800b234:	bb1b      	cbnz	r3, 800b27e <_svfiprintf_r+0x1b2>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	3307      	adds	r3, #7
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	3308      	adds	r3, #8
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b244:	4433      	add	r3, r6
 800b246:	9309      	str	r3, [sp, #36]	; 0x24
 800b248:	e767      	b.n	800b11a <_svfiprintf_r+0x4e>
 800b24a:	460c      	mov	r4, r1
 800b24c:	2001      	movs	r0, #1
 800b24e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b252:	e7a5      	b.n	800b1a0 <_svfiprintf_r+0xd4>
 800b254:	2300      	movs	r3, #0
 800b256:	f04f 0c0a 	mov.w	ip, #10
 800b25a:	4619      	mov	r1, r3
 800b25c:	3401      	adds	r4, #1
 800b25e:	9305      	str	r3, [sp, #20]
 800b260:	4620      	mov	r0, r4
 800b262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b266:	3a30      	subs	r2, #48	; 0x30
 800b268:	2a09      	cmp	r2, #9
 800b26a:	d903      	bls.n	800b274 <_svfiprintf_r+0x1a8>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0c5      	beq.n	800b1fc <_svfiprintf_r+0x130>
 800b270:	9105      	str	r1, [sp, #20]
 800b272:	e7c3      	b.n	800b1fc <_svfiprintf_r+0x130>
 800b274:	4604      	mov	r4, r0
 800b276:	2301      	movs	r3, #1
 800b278:	fb0c 2101 	mla	r1, ip, r1, r2
 800b27c:	e7f0      	b.n	800b260 <_svfiprintf_r+0x194>
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	462a      	mov	r2, r5
 800b284:	4638      	mov	r0, r7
 800b286:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <_svfiprintf_r+0x1fc>)
 800b288:	a904      	add	r1, sp, #16
 800b28a:	f3af 8000 	nop.w
 800b28e:	1c42      	adds	r2, r0, #1
 800b290:	4606      	mov	r6, r0
 800b292:	d1d6      	bne.n	800b242 <_svfiprintf_r+0x176>
 800b294:	89ab      	ldrh	r3, [r5, #12]
 800b296:	065b      	lsls	r3, r3, #25
 800b298:	f53f af2c 	bmi.w	800b0f4 <_svfiprintf_r+0x28>
 800b29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b29e:	b01d      	add	sp, #116	; 0x74
 800b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a4:	ab03      	add	r3, sp, #12
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	4b06      	ldr	r3, [pc, #24]	; (800b2c8 <_svfiprintf_r+0x1fc>)
 800b2ae:	a904      	add	r1, sp, #16
 800b2b0:	f7ff f954 	bl	800a55c <_printf_i>
 800b2b4:	e7eb      	b.n	800b28e <_svfiprintf_r+0x1c2>
 800b2b6:	bf00      	nop
 800b2b8:	0800cfbc 	.word	0x0800cfbc
 800b2bc:	0800cfc2 	.word	0x0800cfc2
 800b2c0:	0800cfc6 	.word	0x0800cfc6
 800b2c4:	00000000 	.word	0x00000000
 800b2c8:	0800b017 	.word	0x0800b017

0800b2cc <_sbrk_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	4d05      	ldr	r5, [pc, #20]	; (800b2e8 <_sbrk_r+0x1c>)
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	f7fa fcf8 	bl	8005ccc <_sbrk>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_sbrk_r+0x1a>
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_sbrk_r+0x1a>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	20007fb8 	.word	0x20007fb8

0800b2ec <_raise_r>:
 800b2ec:	291f      	cmp	r1, #31
 800b2ee:	b538      	push	{r3, r4, r5, lr}
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	d904      	bls.n	800b300 <_raise_r+0x14>
 800b2f6:	2316      	movs	r3, #22
 800b2f8:	6003      	str	r3, [r0, #0]
 800b2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b302:	b112      	cbz	r2, 800b30a <_raise_r+0x1e>
 800b304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b308:	b94b      	cbnz	r3, 800b31e <_raise_r+0x32>
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 f830 	bl	800b370 <_getpid_r>
 800b310:	462a      	mov	r2, r5
 800b312:	4601      	mov	r1, r0
 800b314:	4620      	mov	r0, r4
 800b316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b31a:	f000 b817 	b.w	800b34c <_kill_r>
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d00a      	beq.n	800b338 <_raise_r+0x4c>
 800b322:	1c59      	adds	r1, r3, #1
 800b324:	d103      	bne.n	800b32e <_raise_r+0x42>
 800b326:	2316      	movs	r3, #22
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	2001      	movs	r0, #1
 800b32c:	e7e7      	b.n	800b2fe <_raise_r+0x12>
 800b32e:	2400      	movs	r4, #0
 800b330:	4628      	mov	r0, r5
 800b332:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b336:	4798      	blx	r3
 800b338:	2000      	movs	r0, #0
 800b33a:	e7e0      	b.n	800b2fe <_raise_r+0x12>

0800b33c <raise>:
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <raise+0xc>)
 800b33e:	4601      	mov	r1, r0
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	f7ff bfd3 	b.w	800b2ec <_raise_r>
 800b346:	bf00      	nop
 800b348:	20000018 	.word	0x20000018

0800b34c <_kill_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	2300      	movs	r3, #0
 800b350:	4d06      	ldr	r5, [pc, #24]	; (800b36c <_kill_r+0x20>)
 800b352:	4604      	mov	r4, r0
 800b354:	4608      	mov	r0, r1
 800b356:	4611      	mov	r1, r2
 800b358:	602b      	str	r3, [r5, #0]
 800b35a:	f7fa fc34 	bl	8005bc6 <_kill>
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	d102      	bne.n	800b368 <_kill_r+0x1c>
 800b362:	682b      	ldr	r3, [r5, #0]
 800b364:	b103      	cbz	r3, 800b368 <_kill_r+0x1c>
 800b366:	6023      	str	r3, [r4, #0]
 800b368:	bd38      	pop	{r3, r4, r5, pc}
 800b36a:	bf00      	nop
 800b36c:	20007fb8 	.word	0x20007fb8

0800b370 <_getpid_r>:
 800b370:	f7fa bc22 	b.w	8005bb8 <_getpid>

0800b374 <__sread>:
 800b374:	b510      	push	{r4, lr}
 800b376:	460c      	mov	r4, r1
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	f000 f8a8 	bl	800b4d0 <_read_r>
 800b380:	2800      	cmp	r0, #0
 800b382:	bfab      	itete	ge
 800b384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b386:	89a3      	ldrhlt	r3, [r4, #12]
 800b388:	181b      	addge	r3, r3, r0
 800b38a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b38e:	bfac      	ite	ge
 800b390:	6563      	strge	r3, [r4, #84]	; 0x54
 800b392:	81a3      	strhlt	r3, [r4, #12]
 800b394:	bd10      	pop	{r4, pc}

0800b396 <__swrite>:
 800b396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	461f      	mov	r7, r3
 800b39c:	898b      	ldrh	r3, [r1, #12]
 800b39e:	4605      	mov	r5, r0
 800b3a0:	05db      	lsls	r3, r3, #23
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	d505      	bpl.n	800b3b4 <__swrite+0x1e>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	f000 f868 	bl	800b484 <_lseek_r>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	4628      	mov	r0, r5
 800b3c0:	463b      	mov	r3, r7
 800b3c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ca:	f000 b817 	b.w	800b3fc <_write_r>

0800b3ce <__sseek>:
 800b3ce:	b510      	push	{r4, lr}
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d6:	f000 f855 	bl	800b484 <_lseek_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	bf15      	itete	ne
 800b3e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ea:	81a3      	strheq	r3, [r4, #12]
 800b3ec:	bf18      	it	ne
 800b3ee:	81a3      	strhne	r3, [r4, #12]
 800b3f0:	bd10      	pop	{r4, pc}

0800b3f2 <__sclose>:
 800b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f6:	f000 b813 	b.w	800b420 <_close_r>
	...

0800b3fc <_write_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	2200      	movs	r2, #0
 800b406:	4d05      	ldr	r5, [pc, #20]	; (800b41c <_write_r+0x20>)
 800b408:	602a      	str	r2, [r5, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f7fa fc12 	bl	8005c34 <_write>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_write_r+0x1e>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_write_r+0x1e>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20007fb8 	.word	0x20007fb8

0800b420 <_close_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	2300      	movs	r3, #0
 800b424:	4d05      	ldr	r5, [pc, #20]	; (800b43c <_close_r+0x1c>)
 800b426:	4604      	mov	r4, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	f7fa fc1e 	bl	8005c6c <_close>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_close_r+0x1a>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b103      	cbz	r3, 800b43a <_close_r+0x1a>
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	20007fb8 	.word	0x20007fb8

0800b440 <_fstat_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	2300      	movs	r3, #0
 800b444:	4d06      	ldr	r5, [pc, #24]	; (800b460 <_fstat_r+0x20>)
 800b446:	4604      	mov	r4, r0
 800b448:	4608      	mov	r0, r1
 800b44a:	4611      	mov	r1, r2
 800b44c:	602b      	str	r3, [r5, #0]
 800b44e:	f7fa fc18 	bl	8005c82 <_fstat>
 800b452:	1c43      	adds	r3, r0, #1
 800b454:	d102      	bne.n	800b45c <_fstat_r+0x1c>
 800b456:	682b      	ldr	r3, [r5, #0]
 800b458:	b103      	cbz	r3, 800b45c <_fstat_r+0x1c>
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	bd38      	pop	{r3, r4, r5, pc}
 800b45e:	bf00      	nop
 800b460:	20007fb8 	.word	0x20007fb8

0800b464 <_isatty_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	2300      	movs	r3, #0
 800b468:	4d05      	ldr	r5, [pc, #20]	; (800b480 <_isatty_r+0x1c>)
 800b46a:	4604      	mov	r4, r0
 800b46c:	4608      	mov	r0, r1
 800b46e:	602b      	str	r3, [r5, #0]
 800b470:	f7fa fc16 	bl	8005ca0 <_isatty>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	d102      	bne.n	800b47e <_isatty_r+0x1a>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	b103      	cbz	r3, 800b47e <_isatty_r+0x1a>
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	20007fb8 	.word	0x20007fb8

0800b484 <_lseek_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4604      	mov	r4, r0
 800b488:	4608      	mov	r0, r1
 800b48a:	4611      	mov	r1, r2
 800b48c:	2200      	movs	r2, #0
 800b48e:	4d05      	ldr	r5, [pc, #20]	; (800b4a4 <_lseek_r+0x20>)
 800b490:	602a      	str	r2, [r5, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	f7fa fc0e 	bl	8005cb4 <_lseek>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	d102      	bne.n	800b4a2 <_lseek_r+0x1e>
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	b103      	cbz	r3, 800b4a2 <_lseek_r+0x1e>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	20007fb8 	.word	0x20007fb8

0800b4a8 <__malloc_lock>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__malloc_lock+0x8>)
 800b4aa:	f7ff bc19 	b.w	800ace0 <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20007fac 	.word	0x20007fac

0800b4b4 <__malloc_unlock>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	; (800b4bc <__malloc_unlock+0x8>)
 800b4b6:	f7ff bc14 	b.w	800ace2 <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	20007fac 	.word	0x20007fac

0800b4c0 <_malloc_usable_size_r>:
 800b4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c4:	1f18      	subs	r0, r3, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfbc      	itt	lt
 800b4ca:	580b      	ldrlt	r3, [r1, r0]
 800b4cc:	18c0      	addlt	r0, r0, r3
 800b4ce:	4770      	bx	lr

0800b4d0 <_read_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4d05      	ldr	r5, [pc, #20]	; (800b4f0 <_read_r+0x20>)
 800b4dc:	602a      	str	r2, [r5, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f7fa fb8b 	bl	8005bfa <_read>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_read_r+0x1e>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_read_r+0x1e>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	20007fb8 	.word	0x20007fb8
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <atan>:
 800b4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	4bb6      	ldr	r3, [pc, #728]	; (800b7d8 <atan+0x2e0>)
 800b4fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b502:	429e      	cmp	r6, r3
 800b504:	4604      	mov	r4, r0
 800b506:	460d      	mov	r5, r1
 800b508:	468b      	mov	fp, r1
 800b50a:	dd17      	ble.n	800b53c <atan+0x44>
 800b50c:	4bb3      	ldr	r3, [pc, #716]	; (800b7dc <atan+0x2e4>)
 800b50e:	429e      	cmp	r6, r3
 800b510:	dc01      	bgt.n	800b516 <atan+0x1e>
 800b512:	d109      	bne.n	800b528 <atan+0x30>
 800b514:	b140      	cbz	r0, 800b528 <atan+0x30>
 800b516:	4622      	mov	r2, r4
 800b518:	462b      	mov	r3, r5
 800b51a:	4620      	mov	r0, r4
 800b51c:	4629      	mov	r1, r5
 800b51e:	f7f4 fe89 	bl	8000234 <__adddf3>
 800b522:	4604      	mov	r4, r0
 800b524:	460d      	mov	r5, r1
 800b526:	e005      	b.n	800b534 <atan+0x3c>
 800b528:	f1bb 0f00 	cmp.w	fp, #0
 800b52c:	4cac      	ldr	r4, [pc, #688]	; (800b7e0 <atan+0x2e8>)
 800b52e:	f300 8121 	bgt.w	800b774 <atan+0x27c>
 800b532:	4dac      	ldr	r5, [pc, #688]	; (800b7e4 <atan+0x2ec>)
 800b534:	4620      	mov	r0, r4
 800b536:	4629      	mov	r1, r5
 800b538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53c:	4baa      	ldr	r3, [pc, #680]	; (800b7e8 <atan+0x2f0>)
 800b53e:	429e      	cmp	r6, r3
 800b540:	dc11      	bgt.n	800b566 <atan+0x6e>
 800b542:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b546:	429e      	cmp	r6, r3
 800b548:	dc0a      	bgt.n	800b560 <atan+0x68>
 800b54a:	a38b      	add	r3, pc, #556	; (adr r3, 800b778 <atan+0x280>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f4 fe70 	bl	8000234 <__adddf3>
 800b554:	2200      	movs	r2, #0
 800b556:	4ba5      	ldr	r3, [pc, #660]	; (800b7ec <atan+0x2f4>)
 800b558:	f7f5 fab2 	bl	8000ac0 <__aeabi_dcmpgt>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d1e9      	bne.n	800b534 <atan+0x3c>
 800b560:	f04f 3aff 	mov.w	sl, #4294967295
 800b564:	e027      	b.n	800b5b6 <atan+0xbe>
 800b566:	f000 f997 	bl	800b898 <fabs>
 800b56a:	4ba1      	ldr	r3, [pc, #644]	; (800b7f0 <atan+0x2f8>)
 800b56c:	4604      	mov	r4, r0
 800b56e:	429e      	cmp	r6, r3
 800b570:	460d      	mov	r5, r1
 800b572:	f300 80b8 	bgt.w	800b6e6 <atan+0x1ee>
 800b576:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b57a:	429e      	cmp	r6, r3
 800b57c:	f300 809c 	bgt.w	800b6b8 <atan+0x1c0>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	f7f4 fe56 	bl	8000234 <__adddf3>
 800b588:	2200      	movs	r2, #0
 800b58a:	4b98      	ldr	r3, [pc, #608]	; (800b7ec <atan+0x2f4>)
 800b58c:	f7f4 fe50 	bl	8000230 <__aeabi_dsub>
 800b590:	2200      	movs	r2, #0
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b59a:	4620      	mov	r0, r4
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7f4 fe49 	bl	8000234 <__adddf3>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 f923 	bl	80007f4 <__aeabi_ddiv>
 800b5ae:	f04f 0a00 	mov.w	sl, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	4629      	mov	r1, r5
 800b5be:	f7f4 ffef 	bl	80005a0 <__aeabi_dmul>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	f7f4 ffe9 	bl	80005a0 <__aeabi_dmul>
 800b5ce:	a36c      	add	r3, pc, #432	; (adr r3, 800b780 <atan+0x288>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	f7f4 ffe2 	bl	80005a0 <__aeabi_dmul>
 800b5dc:	a36a      	add	r3, pc, #424	; (adr r3, 800b788 <atan+0x290>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f7f4 fe27 	bl	8000234 <__adddf3>
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	463b      	mov	r3, r7
 800b5ea:	f7f4 ffd9 	bl	80005a0 <__aeabi_dmul>
 800b5ee:	a368      	add	r3, pc, #416	; (adr r3, 800b790 <atan+0x298>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	f7f4 fe1e 	bl	8000234 <__adddf3>
 800b5f8:	4632      	mov	r2, r6
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	f7f4 ffd0 	bl	80005a0 <__aeabi_dmul>
 800b600:	a365      	add	r3, pc, #404	; (adr r3, 800b798 <atan+0x2a0>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f4 fe15 	bl	8000234 <__adddf3>
 800b60a:	4632      	mov	r2, r6
 800b60c:	463b      	mov	r3, r7
 800b60e:	f7f4 ffc7 	bl	80005a0 <__aeabi_dmul>
 800b612:	a363      	add	r3, pc, #396	; (adr r3, 800b7a0 <atan+0x2a8>)
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	f7f4 fe0c 	bl	8000234 <__adddf3>
 800b61c:	4632      	mov	r2, r6
 800b61e:	463b      	mov	r3, r7
 800b620:	f7f4 ffbe 	bl	80005a0 <__aeabi_dmul>
 800b624:	a360      	add	r3, pc, #384	; (adr r3, 800b7a8 <atan+0x2b0>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f7f4 fe03 	bl	8000234 <__adddf3>
 800b62e:	4642      	mov	r2, r8
 800b630:	464b      	mov	r3, r9
 800b632:	f7f4 ffb5 	bl	80005a0 <__aeabi_dmul>
 800b636:	a35e      	add	r3, pc, #376	; (adr r3, 800b7b0 <atan+0x2b8>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	4680      	mov	r8, r0
 800b63e:	4689      	mov	r9, r1
 800b640:	4630      	mov	r0, r6
 800b642:	4639      	mov	r1, r7
 800b644:	f7f4 ffac 	bl	80005a0 <__aeabi_dmul>
 800b648:	a35b      	add	r3, pc, #364	; (adr r3, 800b7b8 <atan+0x2c0>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f4 fdef 	bl	8000230 <__aeabi_dsub>
 800b652:	4632      	mov	r2, r6
 800b654:	463b      	mov	r3, r7
 800b656:	f7f4 ffa3 	bl	80005a0 <__aeabi_dmul>
 800b65a:	a359      	add	r3, pc, #356	; (adr r3, 800b7c0 <atan+0x2c8>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 fde6 	bl	8000230 <__aeabi_dsub>
 800b664:	4632      	mov	r2, r6
 800b666:	463b      	mov	r3, r7
 800b668:	f7f4 ff9a 	bl	80005a0 <__aeabi_dmul>
 800b66c:	a356      	add	r3, pc, #344	; (adr r3, 800b7c8 <atan+0x2d0>)
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	f7f4 fddd 	bl	8000230 <__aeabi_dsub>
 800b676:	4632      	mov	r2, r6
 800b678:	463b      	mov	r3, r7
 800b67a:	f7f4 ff91 	bl	80005a0 <__aeabi_dmul>
 800b67e:	a354      	add	r3, pc, #336	; (adr r3, 800b7d0 <atan+0x2d8>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f7f4 fdd4 	bl	8000230 <__aeabi_dsub>
 800b688:	4632      	mov	r2, r6
 800b68a:	463b      	mov	r3, r7
 800b68c:	f7f4 ff88 	bl	80005a0 <__aeabi_dmul>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4640      	mov	r0, r8
 800b696:	4649      	mov	r1, r9
 800b698:	f7f4 fdcc 	bl	8000234 <__adddf3>
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f7f4 ff7e 	bl	80005a0 <__aeabi_dmul>
 800b6a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	d144      	bne.n	800b738 <atan+0x240>
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	f7f4 fdbd 	bl	8000230 <__aeabi_dsub>
 800b6b6:	e734      	b.n	800b522 <atan+0x2a>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4b4c      	ldr	r3, [pc, #304]	; (800b7ec <atan+0x2f4>)
 800b6bc:	f7f4 fdb8 	bl	8000230 <__aeabi_dsub>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4b48      	ldr	r3, [pc, #288]	; (800b7ec <atan+0x2f4>)
 800b6cc:	f7f4 fdb2 	bl	8000234 <__adddf3>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f5 f88c 	bl	80007f4 <__aeabi_ddiv>
 800b6dc:	f04f 0a01 	mov.w	sl, #1
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	e767      	b.n	800b5b6 <atan+0xbe>
 800b6e6:	4b43      	ldr	r3, [pc, #268]	; (800b7f4 <atan+0x2fc>)
 800b6e8:	429e      	cmp	r6, r3
 800b6ea:	da1a      	bge.n	800b722 <atan+0x22a>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	4b42      	ldr	r3, [pc, #264]	; (800b7f8 <atan+0x300>)
 800b6f0:	f7f4 fd9e 	bl	8000230 <__aeabi_dsub>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4b3e      	ldr	r3, [pc, #248]	; (800b7f8 <atan+0x300>)
 800b700:	f7f4 ff4e 	bl	80005a0 <__aeabi_dmul>
 800b704:	2200      	movs	r2, #0
 800b706:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <atan+0x2f4>)
 800b708:	f7f4 fd94 	bl	8000234 <__adddf3>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f5 f86e 	bl	80007f4 <__aeabi_ddiv>
 800b718:	f04f 0a02 	mov.w	sl, #2
 800b71c:	4604      	mov	r4, r0
 800b71e:	460d      	mov	r5, r1
 800b720:	e749      	b.n	800b5b6 <atan+0xbe>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	2000      	movs	r0, #0
 800b728:	4934      	ldr	r1, [pc, #208]	; (800b7fc <atan+0x304>)
 800b72a:	f7f5 f863 	bl	80007f4 <__aeabi_ddiv>
 800b72e:	f04f 0a03 	mov.w	sl, #3
 800b732:	4604      	mov	r4, r0
 800b734:	460d      	mov	r5, r1
 800b736:	e73e      	b.n	800b5b6 <atan+0xbe>
 800b738:	4b31      	ldr	r3, [pc, #196]	; (800b800 <atan+0x308>)
 800b73a:	4e32      	ldr	r6, [pc, #200]	; (800b804 <atan+0x30c>)
 800b73c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b740:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b744:	e9da 2300 	ldrd	r2, r3, [sl]
 800b748:	f7f4 fd72 	bl	8000230 <__aeabi_dsub>
 800b74c:	4622      	mov	r2, r4
 800b74e:	462b      	mov	r3, r5
 800b750:	f7f4 fd6e 	bl	8000230 <__aeabi_dsub>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b75c:	f7f4 fd68 	bl	8000230 <__aeabi_dsub>
 800b760:	f1bb 0f00 	cmp.w	fp, #0
 800b764:	4604      	mov	r4, r0
 800b766:	460d      	mov	r5, r1
 800b768:	f6bf aee4 	bge.w	800b534 <atan+0x3c>
 800b76c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b770:	461d      	mov	r5, r3
 800b772:	e6df      	b.n	800b534 <atan+0x3c>
 800b774:	4d24      	ldr	r5, [pc, #144]	; (800b808 <atan+0x310>)
 800b776:	e6dd      	b.n	800b534 <atan+0x3c>
 800b778:	8800759c 	.word	0x8800759c
 800b77c:	7e37e43c 	.word	0x7e37e43c
 800b780:	e322da11 	.word	0xe322da11
 800b784:	3f90ad3a 	.word	0x3f90ad3a
 800b788:	24760deb 	.word	0x24760deb
 800b78c:	3fa97b4b 	.word	0x3fa97b4b
 800b790:	a0d03d51 	.word	0xa0d03d51
 800b794:	3fb10d66 	.word	0x3fb10d66
 800b798:	c54c206e 	.word	0xc54c206e
 800b79c:	3fb745cd 	.word	0x3fb745cd
 800b7a0:	920083ff 	.word	0x920083ff
 800b7a4:	3fc24924 	.word	0x3fc24924
 800b7a8:	5555550d 	.word	0x5555550d
 800b7ac:	3fd55555 	.word	0x3fd55555
 800b7b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b7b4:	bfa2b444 	.word	0xbfa2b444
 800b7b8:	52defd9a 	.word	0x52defd9a
 800b7bc:	3fadde2d 	.word	0x3fadde2d
 800b7c0:	af749a6d 	.word	0xaf749a6d
 800b7c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b7c8:	fe231671 	.word	0xfe231671
 800b7cc:	3fbc71c6 	.word	0x3fbc71c6
 800b7d0:	9998ebc4 	.word	0x9998ebc4
 800b7d4:	3fc99999 	.word	0x3fc99999
 800b7d8:	440fffff 	.word	0x440fffff
 800b7dc:	7ff00000 	.word	0x7ff00000
 800b7e0:	54442d18 	.word	0x54442d18
 800b7e4:	bff921fb 	.word	0xbff921fb
 800b7e8:	3fdbffff 	.word	0x3fdbffff
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	3ff2ffff 	.word	0x3ff2ffff
 800b7f4:	40038000 	.word	0x40038000
 800b7f8:	3ff80000 	.word	0x3ff80000
 800b7fc:	bff00000 	.word	0xbff00000
 800b800:	0800d070 	.word	0x0800d070
 800b804:	0800d050 	.word	0x0800d050
 800b808:	3ff921fb 	.word	0x3ff921fb

0800b80c <cos>:
 800b80c:	b530      	push	{r4, r5, lr}
 800b80e:	4a20      	ldr	r2, [pc, #128]	; (800b890 <cos+0x84>)
 800b810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b814:	4293      	cmp	r3, r2
 800b816:	b087      	sub	sp, #28
 800b818:	dc06      	bgt.n	800b828 <cos+0x1c>
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	b007      	add	sp, #28
 800b820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b824:	f000 baa0 	b.w	800bd68 <__kernel_cos>
 800b828:	4a1a      	ldr	r2, [pc, #104]	; (800b894 <cos+0x88>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	dd05      	ble.n	800b83a <cos+0x2e>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	f7f4 fcfd 	bl	8000230 <__aeabi_dsub>
 800b836:	b007      	add	sp, #28
 800b838:	bd30      	pop	{r4, r5, pc}
 800b83a:	aa02      	add	r2, sp, #8
 800b83c:	f000 f89c 	bl	800b978 <__ieee754_rem_pio2>
 800b840:	f000 0003 	and.w	r0, r0, #3
 800b844:	2801      	cmp	r0, #1
 800b846:	d009      	beq.n	800b85c <cos+0x50>
 800b848:	2802      	cmp	r0, #2
 800b84a:	d011      	beq.n	800b870 <cos+0x64>
 800b84c:	b9b8      	cbnz	r0, 800b87e <cos+0x72>
 800b84e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b856:	f000 fa87 	bl	800bd68 <__kernel_cos>
 800b85a:	e7ec      	b.n	800b836 <cos+0x2a>
 800b85c:	9000      	str	r0, [sp, #0]
 800b85e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b866:	f000 fe7f 	bl	800c568 <__kernel_sin>
 800b86a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b86e:	e7e2      	b.n	800b836 <cos+0x2a>
 800b870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b878:	f000 fa76 	bl	800bd68 <__kernel_cos>
 800b87c:	e7f5      	b.n	800b86a <cos+0x5e>
 800b87e:	2301      	movs	r3, #1
 800b880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88a:	f000 fe6d 	bl	800c568 <__kernel_sin>
 800b88e:	e7d2      	b.n	800b836 <cos+0x2a>
 800b890:	3fe921fb 	.word	0x3fe921fb
 800b894:	7fefffff 	.word	0x7fefffff

0800b898 <fabs>:
 800b898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b89c:	4770      	bx	lr
	...

0800b8a0 <sin>:
 800b8a0:	b530      	push	{r4, r5, lr}
 800b8a2:	4a20      	ldr	r2, [pc, #128]	; (800b924 <sin+0x84>)
 800b8a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	dc06      	bgt.n	800b8bc <sin+0x1c>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f000 fe57 	bl	800c568 <__kernel_sin>
 800b8ba:	e006      	b.n	800b8ca <sin+0x2a>
 800b8bc:	4a1a      	ldr	r2, [pc, #104]	; (800b928 <sin+0x88>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	dd05      	ble.n	800b8ce <sin+0x2e>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	f7f4 fcb3 	bl	8000230 <__aeabi_dsub>
 800b8ca:	b007      	add	sp, #28
 800b8cc:	bd30      	pop	{r4, r5, pc}
 800b8ce:	aa02      	add	r2, sp, #8
 800b8d0:	f000 f852 	bl	800b978 <__ieee754_rem_pio2>
 800b8d4:	f000 0003 	and.w	r0, r0, #3
 800b8d8:	2801      	cmp	r0, #1
 800b8da:	d009      	beq.n	800b8f0 <sin+0x50>
 800b8dc:	2802      	cmp	r0, #2
 800b8de:	d00e      	beq.n	800b8fe <sin+0x5e>
 800b8e0:	b9c0      	cbnz	r0, 800b914 <sin+0x74>
 800b8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ee:	e7e2      	b.n	800b8b6 <sin+0x16>
 800b8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f8:	f000 fa36 	bl	800bd68 <__kernel_cos>
 800b8fc:	e7e5      	b.n	800b8ca <sin+0x2a>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b90a:	f000 fe2d 	bl	800c568 <__kernel_sin>
 800b90e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b912:	e7da      	b.n	800b8ca <sin+0x2a>
 800b914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91c:	f000 fa24 	bl	800bd68 <__kernel_cos>
 800b920:	e7f5      	b.n	800b90e <sin+0x6e>
 800b922:	bf00      	nop
 800b924:	3fe921fb 	.word	0x3fe921fb
 800b928:	7fefffff 	.word	0x7fefffff

0800b92c <roundf>:
 800b92c:	b508      	push	{r3, lr}
 800b92e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b932:	3b7f      	subs	r3, #127	; 0x7f
 800b934:	2b16      	cmp	r3, #22
 800b936:	4601      	mov	r1, r0
 800b938:	4602      	mov	r2, r0
 800b93a:	dc14      	bgt.n	800b966 <roundf+0x3a>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da07      	bge.n	800b950 <roundf+0x24>
 800b940:	3301      	adds	r3, #1
 800b942:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b946:	d101      	bne.n	800b94c <roundf+0x20>
 800b948:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b94c:	4608      	mov	r0, r1
 800b94e:	bd08      	pop	{r3, pc}
 800b950:	4808      	ldr	r0, [pc, #32]	; (800b974 <roundf+0x48>)
 800b952:	4118      	asrs	r0, r3
 800b954:	4201      	tst	r1, r0
 800b956:	d0f9      	beq.n	800b94c <roundf+0x20>
 800b958:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b95c:	4119      	asrs	r1, r3
 800b95e:	4411      	add	r1, r2
 800b960:	ea21 0100 	bic.w	r1, r1, r0
 800b964:	e7f2      	b.n	800b94c <roundf+0x20>
 800b966:	2b80      	cmp	r3, #128	; 0x80
 800b968:	d1f0      	bne.n	800b94c <roundf+0x20>
 800b96a:	f7f5 f931 	bl	8000bd0 <__addsf3>
 800b96e:	4601      	mov	r1, r0
 800b970:	e7ec      	b.n	800b94c <roundf+0x20>
 800b972:	bf00      	nop
 800b974:	007fffff 	.word	0x007fffff

0800b978 <__ieee754_rem_pio2>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	4614      	mov	r4, r2
 800b97e:	4ac4      	ldr	r2, [pc, #784]	; (800bc90 <__ieee754_rem_pio2+0x318>)
 800b980:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b984:	b08d      	sub	sp, #52	; 0x34
 800b986:	4592      	cmp	sl, r2
 800b988:	9104      	str	r1, [sp, #16]
 800b98a:	dc07      	bgt.n	800b99c <__ieee754_rem_pio2+0x24>
 800b98c:	2200      	movs	r2, #0
 800b98e:	2300      	movs	r3, #0
 800b990:	e9c4 0100 	strd	r0, r1, [r4]
 800b994:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b998:	2500      	movs	r5, #0
 800b99a:	e024      	b.n	800b9e6 <__ieee754_rem_pio2+0x6e>
 800b99c:	4abd      	ldr	r2, [pc, #756]	; (800bc94 <__ieee754_rem_pio2+0x31c>)
 800b99e:	4592      	cmp	sl, r2
 800b9a0:	dc72      	bgt.n	800ba88 <__ieee754_rem_pio2+0x110>
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	4dbc      	ldr	r5, [pc, #752]	; (800bc98 <__ieee754_rem_pio2+0x320>)
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	a3ab      	add	r3, pc, #684	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2e0>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	dd36      	ble.n	800ba1e <__ieee754_rem_pio2+0xa6>
 800b9b0:	f7f4 fc3e 	bl	8000230 <__aeabi_dsub>
 800b9b4:	45aa      	cmp	sl, r5
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	d018      	beq.n	800b9ee <__ieee754_rem_pio2+0x76>
 800b9bc:	a3a8      	add	r3, pc, #672	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x2e8>)
 800b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c2:	f7f4 fc35 	bl	8000230 <__aeabi_dsub>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	e9c4 2300 	strd	r2, r3, [r4]
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f4 fc2d 	bl	8000230 <__aeabi_dsub>
 800b9d6:	a3a2      	add	r3, pc, #648	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x2e8>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fc28 	bl	8000230 <__aeabi_dsub>
 800b9e0:	2501      	movs	r5, #1
 800b9e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	b00d      	add	sp, #52	; 0x34
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	a39e      	add	r3, pc, #632	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x2f0>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fc1c 	bl	8000230 <__aeabi_dsub>
 800b9f8:	a39d      	add	r3, pc, #628	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x2f8>)
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	4606      	mov	r6, r0
 800ba00:	460f      	mov	r7, r1
 800ba02:	f7f4 fc15 	bl	8000230 <__aeabi_dsub>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	e9c4 2300 	strd	r2, r3, [r4]
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f4 fc0d 	bl	8000230 <__aeabi_dsub>
 800ba16:	a396      	add	r3, pc, #600	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x2f8>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	e7de      	b.n	800b9dc <__ieee754_rem_pio2+0x64>
 800ba1e:	f7f4 fc09 	bl	8000234 <__adddf3>
 800ba22:	45aa      	cmp	sl, r5
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	d016      	beq.n	800ba58 <__ieee754_rem_pio2+0xe0>
 800ba2a:	a38d      	add	r3, pc, #564	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x2e8>)
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f7f4 fc00 	bl	8000234 <__adddf3>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4630      	mov	r0, r6
 800ba3a:	e9c4 2300 	strd	r2, r3, [r4]
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fbf6 	bl	8000230 <__aeabi_dsub>
 800ba44:	a386      	add	r3, pc, #536	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x2e8>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fbf3 	bl	8000234 <__adddf3>
 800ba4e:	f04f 35ff 	mov.w	r5, #4294967295
 800ba52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba56:	e7c6      	b.n	800b9e6 <__ieee754_rem_pio2+0x6e>
 800ba58:	a383      	add	r3, pc, #524	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x2f0>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fbe9 	bl	8000234 <__adddf3>
 800ba62:	a383      	add	r3, pc, #524	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x2f8>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	4606      	mov	r6, r0
 800ba6a:	460f      	mov	r7, r1
 800ba6c:	f7f4 fbe2 	bl	8000234 <__adddf3>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4630      	mov	r0, r6
 800ba76:	e9c4 2300 	strd	r2, r3, [r4]
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	f7f4 fbd8 	bl	8000230 <__aeabi_dsub>
 800ba80:	a37b      	add	r3, pc, #492	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x2f8>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	e7e0      	b.n	800ba4a <__ieee754_rem_pio2+0xd2>
 800ba88:	4a84      	ldr	r2, [pc, #528]	; (800bc9c <__ieee754_rem_pio2+0x324>)
 800ba8a:	4592      	cmp	sl, r2
 800ba8c:	f300 80d5 	bgt.w	800bc3a <__ieee754_rem_pio2+0x2c2>
 800ba90:	f7ff ff02 	bl	800b898 <fabs>
 800ba94:	a378      	add	r3, pc, #480	; (adr r3, 800bc78 <__ieee754_rem_pio2+0x300>)
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460f      	mov	r7, r1
 800ba9e:	f7f4 fd7f 	bl	80005a0 <__aeabi_dmul>
 800baa2:	2200      	movs	r2, #0
 800baa4:	4b7e      	ldr	r3, [pc, #504]	; (800bca0 <__ieee754_rem_pio2+0x328>)
 800baa6:	f7f4 fbc5 	bl	8000234 <__adddf3>
 800baaa:	f7f5 f813 	bl	8000ad4 <__aeabi_d2iz>
 800baae:	4605      	mov	r5, r0
 800bab0:	f7f4 fd0c 	bl	80004cc <__aeabi_i2d>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800babc:	a366      	add	r3, pc, #408	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2e0>)
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	f7f4 fd6d 	bl	80005a0 <__aeabi_dmul>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f4 fbaf 	bl	8000230 <__aeabi_dsub>
 800bad2:	a363      	add	r3, pc, #396	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x2e8>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	4680      	mov	r8, r0
 800bada:	4689      	mov	r9, r1
 800badc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae0:	f7f4 fd5e 	bl	80005a0 <__aeabi_dmul>
 800bae4:	2d1f      	cmp	r5, #31
 800bae6:	4606      	mov	r6, r0
 800bae8:	460f      	mov	r7, r1
 800baea:	dc0e      	bgt.n	800bb0a <__ieee754_rem_pio2+0x192>
 800baec:	4b6d      	ldr	r3, [pc, #436]	; (800bca4 <__ieee754_rem_pio2+0x32c>)
 800baee:	1e6a      	subs	r2, r5, #1
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	4553      	cmp	r3, sl
 800baf6:	d008      	beq.n	800bb0a <__ieee754_rem_pio2+0x192>
 800baf8:	4632      	mov	r2, r6
 800bafa:	463b      	mov	r3, r7
 800bafc:	4640      	mov	r0, r8
 800bafe:	4649      	mov	r1, r9
 800bb00:	f7f4 fb96 	bl	8000230 <__aeabi_dsub>
 800bb04:	e9c4 0100 	strd	r0, r1, [r4]
 800bb08:	e013      	b.n	800bb32 <__ieee754_rem_pio2+0x1ba>
 800bb0a:	463b      	mov	r3, r7
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4640      	mov	r0, r8
 800bb10:	4649      	mov	r1, r9
 800bb12:	f7f4 fb8d 	bl	8000230 <__aeabi_dsub>
 800bb16:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bb1a:	9305      	str	r3, [sp, #20]
 800bb1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb20:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800bb24:	f1ba 0f10 	cmp.w	sl, #16
 800bb28:	dc1f      	bgt.n	800bb6a <__ieee754_rem_pio2+0x1f2>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e9c4 2300 	strd	r2, r3, [r4]
 800bb32:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bb36:	4640      	mov	r0, r8
 800bb38:	4653      	mov	r3, sl
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	f7f4 fb78 	bl	8000230 <__aeabi_dsub>
 800bb40:	4632      	mov	r2, r6
 800bb42:	463b      	mov	r3, r7
 800bb44:	f7f4 fb74 	bl	8000230 <__aeabi_dsub>
 800bb48:	460b      	mov	r3, r1
 800bb4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb4e:	9904      	ldr	r1, [sp, #16]
 800bb50:	4602      	mov	r2, r0
 800bb52:	2900      	cmp	r1, #0
 800bb54:	f6bf af47 	bge.w	800b9e6 <__ieee754_rem_pio2+0x6e>
 800bb58:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800bb5c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bb60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	60e3      	str	r3, [r4, #12]
 800bb66:	426d      	negs	r5, r5
 800bb68:	e73d      	b.n	800b9e6 <__ieee754_rem_pio2+0x6e>
 800bb6a:	a33f      	add	r3, pc, #252	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x2f0>)
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb74:	f7f4 fd14 	bl	80005a0 <__aeabi_dmul>
 800bb78:	4606      	mov	r6, r0
 800bb7a:	460f      	mov	r7, r1
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4640      	mov	r0, r8
 800bb82:	4649      	mov	r1, r9
 800bb84:	f7f4 fb54 	bl	8000230 <__aeabi_dsub>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	468b      	mov	fp, r1
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	f7f4 fb4c 	bl	8000230 <__aeabi_dsub>
 800bb98:	4632      	mov	r2, r6
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	f7f4 fb48 	bl	8000230 <__aeabi_dsub>
 800bba0:	a333      	add	r3, pc, #204	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x2f8>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbae:	f7f4 fcf7 	bl	80005a0 <__aeabi_dmul>
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	f7f4 fb3b 	bl	8000230 <__aeabi_dsub>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	4659      	mov	r1, fp
 800bbc6:	f7f4 fb33 	bl	8000230 <__aeabi_dsub>
 800bbca:	9a05      	ldr	r2, [sp, #20]
 800bbcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	2b31      	cmp	r3, #49	; 0x31
 800bbd4:	dc06      	bgt.n	800bbe4 <__ieee754_rem_pio2+0x26c>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	46d0      	mov	r8, sl
 800bbdc:	46d9      	mov	r9, fp
 800bbde:	e9c4 2300 	strd	r2, r3, [r4]
 800bbe2:	e7a6      	b.n	800bb32 <__ieee754_rem_pio2+0x1ba>
 800bbe4:	a326      	add	r3, pc, #152	; (adr r3, 800bc80 <__ieee754_rem_pio2+0x308>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbee:	f7f4 fcd7 	bl	80005a0 <__aeabi_dmul>
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460f      	mov	r7, r1
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	4650      	mov	r0, sl
 800bbfc:	4659      	mov	r1, fp
 800bbfe:	f7f4 fb17 	bl	8000230 <__aeabi_dsub>
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	4680      	mov	r8, r0
 800bc08:	4689      	mov	r9, r1
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	4659      	mov	r1, fp
 800bc0e:	f7f4 fb0f 	bl	8000230 <__aeabi_dsub>
 800bc12:	4632      	mov	r2, r6
 800bc14:	463b      	mov	r3, r7
 800bc16:	f7f4 fb0b 	bl	8000230 <__aeabi_dsub>
 800bc1a:	a31b      	add	r3, pc, #108	; (adr r3, 800bc88 <__ieee754_rem_pio2+0x310>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	4606      	mov	r6, r0
 800bc22:	460f      	mov	r7, r1
 800bc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc28:	f7f4 fcba 	bl	80005a0 <__aeabi_dmul>
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	463b      	mov	r3, r7
 800bc30:	f7f4 fafe 	bl	8000230 <__aeabi_dsub>
 800bc34:	4606      	mov	r6, r0
 800bc36:	460f      	mov	r7, r1
 800bc38:	e75e      	b.n	800baf8 <__ieee754_rem_pio2+0x180>
 800bc3a:	4a1b      	ldr	r2, [pc, #108]	; (800bca8 <__ieee754_rem_pio2+0x330>)
 800bc3c:	4592      	cmp	sl, r2
 800bc3e:	dd35      	ble.n	800bcac <__ieee754_rem_pio2+0x334>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	f7f4 faf4 	bl	8000230 <__aeabi_dsub>
 800bc48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc4c:	e9c4 0100 	strd	r0, r1, [r4]
 800bc50:	e6a2      	b.n	800b998 <__ieee754_rem_pio2+0x20>
 800bc52:	bf00      	nop
 800bc54:	f3af 8000 	nop.w
 800bc58:	54400000 	.word	0x54400000
 800bc5c:	3ff921fb 	.word	0x3ff921fb
 800bc60:	1a626331 	.word	0x1a626331
 800bc64:	3dd0b461 	.word	0x3dd0b461
 800bc68:	1a600000 	.word	0x1a600000
 800bc6c:	3dd0b461 	.word	0x3dd0b461
 800bc70:	2e037073 	.word	0x2e037073
 800bc74:	3ba3198a 	.word	0x3ba3198a
 800bc78:	6dc9c883 	.word	0x6dc9c883
 800bc7c:	3fe45f30 	.word	0x3fe45f30
 800bc80:	2e000000 	.word	0x2e000000
 800bc84:	3ba3198a 	.word	0x3ba3198a
 800bc88:	252049c1 	.word	0x252049c1
 800bc8c:	397b839a 	.word	0x397b839a
 800bc90:	3fe921fb 	.word	0x3fe921fb
 800bc94:	4002d97b 	.word	0x4002d97b
 800bc98:	3ff921fb 	.word	0x3ff921fb
 800bc9c:	413921fb 	.word	0x413921fb
 800bca0:	3fe00000 	.word	0x3fe00000
 800bca4:	0800d090 	.word	0x0800d090
 800bca8:	7fefffff 	.word	0x7fefffff
 800bcac:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bcb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bcb4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bcb8:	460f      	mov	r7, r1
 800bcba:	4606      	mov	r6, r0
 800bcbc:	f7f4 ff0a 	bl	8000ad4 <__aeabi_d2iz>
 800bcc0:	f7f4 fc04 	bl	80004cc <__aeabi_i2d>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4630      	mov	r0, r6
 800bcca:	4639      	mov	r1, r7
 800bccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcd0:	f7f4 faae 	bl	8000230 <__aeabi_dsub>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <__ieee754_rem_pio2+0x3e8>)
 800bcd8:	f7f4 fc62 	bl	80005a0 <__aeabi_dmul>
 800bcdc:	460f      	mov	r7, r1
 800bcde:	4606      	mov	r6, r0
 800bce0:	f7f4 fef8 	bl	8000ad4 <__aeabi_d2iz>
 800bce4:	f7f4 fbf2 	bl	80004cc <__aeabi_i2d>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4630      	mov	r0, r6
 800bcee:	4639      	mov	r1, r7
 800bcf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bcf4:	f7f4 fa9c 	bl	8000230 <__aeabi_dsub>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4b19      	ldr	r3, [pc, #100]	; (800bd60 <__ieee754_rem_pio2+0x3e8>)
 800bcfc:	f7f4 fc50 	bl	80005a0 <__aeabi_dmul>
 800bd00:	f04f 0803 	mov.w	r8, #3
 800bd04:	2600      	movs	r6, #0
 800bd06:	2700      	movs	r7, #0
 800bd08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd0c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800bd10:	4632      	mov	r2, r6
 800bd12:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800bd16:	463b      	mov	r3, r7
 800bd18:	46c2      	mov	sl, r8
 800bd1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd1e:	f7f4 fea7 	bl	8000a70 <__aeabi_dcmpeq>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d1f4      	bne.n	800bd10 <__ieee754_rem_pio2+0x398>
 800bd26:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <__ieee754_rem_pio2+0x3ec>)
 800bd28:	462a      	mov	r2, r5
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	4621      	mov	r1, r4
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	a806      	add	r0, sp, #24
 800bd34:	4653      	mov	r3, sl
 800bd36:	f000 f8d5 	bl	800bee4 <__kernel_rem_pio2>
 800bd3a:	9b04      	ldr	r3, [sp, #16]
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f6bf ae51 	bge.w	800b9e6 <__ieee754_rem_pio2+0x6e>
 800bd44:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bd48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd4c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bd54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bd5c:	e703      	b.n	800bb66 <__ieee754_rem_pio2+0x1ee>
 800bd5e:	bf00      	nop
 800bd60:	41700000 	.word	0x41700000
 800bd64:	0800d110 	.word	0x0800d110

0800bd68 <__kernel_cos>:
 800bd68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd70:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800bd74:	4680      	mov	r8, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	e9cd 2300 	strd	r2, r3, [sp]
 800bd7c:	da04      	bge.n	800bd88 <__kernel_cos+0x20>
 800bd7e:	f7f4 fea9 	bl	8000ad4 <__aeabi_d2iz>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f000 8086 	beq.w	800be94 <__kernel_cos+0x12c>
 800bd88:	4642      	mov	r2, r8
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	4640      	mov	r0, r8
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 fc06 	bl	80005a0 <__aeabi_dmul>
 800bd94:	2200      	movs	r2, #0
 800bd96:	4b4e      	ldr	r3, [pc, #312]	; (800bed0 <__kernel_cos+0x168>)
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	f7f4 fc00 	bl	80005a0 <__aeabi_dmul>
 800bda0:	a33f      	add	r3, pc, #252	; (adr r3, 800bea0 <__kernel_cos+0x138>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	4682      	mov	sl, r0
 800bda8:	468b      	mov	fp, r1
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	f7f4 fbf7 	bl	80005a0 <__aeabi_dmul>
 800bdb2:	a33d      	add	r3, pc, #244	; (adr r3, 800bea8 <__kernel_cos+0x140>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa3c 	bl	8000234 <__adddf3>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fbee 	bl	80005a0 <__aeabi_dmul>
 800bdc4:	a33a      	add	r3, pc, #232	; (adr r3, 800beb0 <__kernel_cos+0x148>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa31 	bl	8000230 <__aeabi_dsub>
 800bdce:	4622      	mov	r2, r4
 800bdd0:	462b      	mov	r3, r5
 800bdd2:	f7f4 fbe5 	bl	80005a0 <__aeabi_dmul>
 800bdd6:	a338      	add	r3, pc, #224	; (adr r3, 800beb8 <__kernel_cos+0x150>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	f7f4 fa2a 	bl	8000234 <__adddf3>
 800bde0:	4622      	mov	r2, r4
 800bde2:	462b      	mov	r3, r5
 800bde4:	f7f4 fbdc 	bl	80005a0 <__aeabi_dmul>
 800bde8:	a335      	add	r3, pc, #212	; (adr r3, 800bec0 <__kernel_cos+0x158>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa1f 	bl	8000230 <__aeabi_dsub>
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	f7f4 fbd3 	bl	80005a0 <__aeabi_dmul>
 800bdfa:	a333      	add	r3, pc, #204	; (adr r3, 800bec8 <__kernel_cos+0x160>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	f7f4 fa18 	bl	8000234 <__adddf3>
 800be04:	4622      	mov	r2, r4
 800be06:	462b      	mov	r3, r5
 800be08:	f7f4 fbca 	bl	80005a0 <__aeabi_dmul>
 800be0c:	4622      	mov	r2, r4
 800be0e:	462b      	mov	r3, r5
 800be10:	f7f4 fbc6 	bl	80005a0 <__aeabi_dmul>
 800be14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be18:	4604      	mov	r4, r0
 800be1a:	460d      	mov	r5, r1
 800be1c:	4640      	mov	r0, r8
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fbbe 	bl	80005a0 <__aeabi_dmul>
 800be24:	460b      	mov	r3, r1
 800be26:	4602      	mov	r2, r0
 800be28:	4629      	mov	r1, r5
 800be2a:	4620      	mov	r0, r4
 800be2c:	f7f4 fa00 	bl	8000230 <__aeabi_dsub>
 800be30:	4b28      	ldr	r3, [pc, #160]	; (800bed4 <__kernel_cos+0x16c>)
 800be32:	4680      	mov	r8, r0
 800be34:	429e      	cmp	r6, r3
 800be36:	4689      	mov	r9, r1
 800be38:	dc0e      	bgt.n	800be58 <__kernel_cos+0xf0>
 800be3a:	4602      	mov	r2, r0
 800be3c:	460b      	mov	r3, r1
 800be3e:	4650      	mov	r0, sl
 800be40:	4659      	mov	r1, fp
 800be42:	f7f4 f9f5 	bl	8000230 <__aeabi_dsub>
 800be46:	4602      	mov	r2, r0
 800be48:	2000      	movs	r0, #0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4922      	ldr	r1, [pc, #136]	; (800bed8 <__kernel_cos+0x170>)
 800be4e:	f7f4 f9ef 	bl	8000230 <__aeabi_dsub>
 800be52:	b003      	add	sp, #12
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	2400      	movs	r4, #0
 800be5a:	4b20      	ldr	r3, [pc, #128]	; (800bedc <__kernel_cos+0x174>)
 800be5c:	4622      	mov	r2, r4
 800be5e:	429e      	cmp	r6, r3
 800be60:	bfcc      	ite	gt
 800be62:	4d1f      	ldrgt	r5, [pc, #124]	; (800bee0 <__kernel_cos+0x178>)
 800be64:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800be68:	462b      	mov	r3, r5
 800be6a:	2000      	movs	r0, #0
 800be6c:	491a      	ldr	r1, [pc, #104]	; (800bed8 <__kernel_cos+0x170>)
 800be6e:	f7f4 f9df 	bl	8000230 <__aeabi_dsub>
 800be72:	4622      	mov	r2, r4
 800be74:	4606      	mov	r6, r0
 800be76:	460f      	mov	r7, r1
 800be78:	462b      	mov	r3, r5
 800be7a:	4650      	mov	r0, sl
 800be7c:	4659      	mov	r1, fp
 800be7e:	f7f4 f9d7 	bl	8000230 <__aeabi_dsub>
 800be82:	4642      	mov	r2, r8
 800be84:	464b      	mov	r3, r9
 800be86:	f7f4 f9d3 	bl	8000230 <__aeabi_dsub>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	e7dc      	b.n	800be4e <__kernel_cos+0xe6>
 800be94:	2000      	movs	r0, #0
 800be96:	4910      	ldr	r1, [pc, #64]	; (800bed8 <__kernel_cos+0x170>)
 800be98:	e7db      	b.n	800be52 <__kernel_cos+0xea>
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w
 800bea0:	be8838d4 	.word	0xbe8838d4
 800bea4:	bda8fae9 	.word	0xbda8fae9
 800bea8:	bdb4b1c4 	.word	0xbdb4b1c4
 800beac:	3e21ee9e 	.word	0x3e21ee9e
 800beb0:	809c52ad 	.word	0x809c52ad
 800beb4:	3e927e4f 	.word	0x3e927e4f
 800beb8:	19cb1590 	.word	0x19cb1590
 800bebc:	3efa01a0 	.word	0x3efa01a0
 800bec0:	16c15177 	.word	0x16c15177
 800bec4:	3f56c16c 	.word	0x3f56c16c
 800bec8:	5555554c 	.word	0x5555554c
 800becc:	3fa55555 	.word	0x3fa55555
 800bed0:	3fe00000 	.word	0x3fe00000
 800bed4:	3fd33332 	.word	0x3fd33332
 800bed8:	3ff00000 	.word	0x3ff00000
 800bedc:	3fe90000 	.word	0x3fe90000
 800bee0:	3fd20000 	.word	0x3fd20000

0800bee4 <__kernel_rem_pio2>:
 800bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800beec:	9308      	str	r3, [sp, #32]
 800beee:	9106      	str	r1, [sp, #24]
 800bef0:	4bb6      	ldr	r3, [pc, #728]	; (800c1cc <__kernel_rem_pio2+0x2e8>)
 800bef2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bef4:	f112 0f14 	cmn.w	r2, #20
 800bef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800befc:	bfa8      	it	ge
 800befe:	1ed4      	subge	r4, r2, #3
 800bf00:	9302      	str	r3, [sp, #8]
 800bf02:	9b08      	ldr	r3, [sp, #32]
 800bf04:	bfb8      	it	lt
 800bf06:	2400      	movlt	r4, #0
 800bf08:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	bfa4      	itt	ge
 800bf10:	2318      	movge	r3, #24
 800bf12:	fb94 f4f3 	sdivge	r4, r4, r3
 800bf16:	f06f 0317 	mvn.w	r3, #23
 800bf1a:	fb04 3303 	mla	r3, r4, r3, r3
 800bf1e:	eb03 0b02 	add.w	fp, r3, r2
 800bf22:	9a07      	ldr	r2, [sp, #28]
 800bf24:	9b02      	ldr	r3, [sp, #8]
 800bf26:	1aa7      	subs	r7, r4, r2
 800bf28:	eb03 0802 	add.w	r8, r3, r2
 800bf2c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bf2e:	2500      	movs	r5, #0
 800bf30:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf34:	2200      	movs	r2, #0
 800bf36:	2300      	movs	r3, #0
 800bf38:	9009      	str	r0, [sp, #36]	; 0x24
 800bf3a:	ae20      	add	r6, sp, #128	; 0x80
 800bf3c:	4545      	cmp	r5, r8
 800bf3e:	dd14      	ble.n	800bf6a <__kernel_rem_pio2+0x86>
 800bf40:	f04f 0800 	mov.w	r8, #0
 800bf44:	9a08      	ldr	r2, [sp, #32]
 800bf46:	ab20      	add	r3, sp, #128	; 0x80
 800bf48:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800bf4c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	4598      	cmp	r8, r3
 800bf54:	dc35      	bgt.n	800bfc2 <__kernel_rem_pio2+0xde>
 800bf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f1a3 0908 	sub.w	r9, r3, #8
 800bf5e:	2300      	movs	r3, #0
 800bf60:	462f      	mov	r7, r5
 800bf62:	2600      	movs	r6, #0
 800bf64:	e9cd 2300 	strd	r2, r3, [sp]
 800bf68:	e01f      	b.n	800bfaa <__kernel_rem_pio2+0xc6>
 800bf6a:	42ef      	cmn	r7, r5
 800bf6c:	d40b      	bmi.n	800bf86 <__kernel_rem_pio2+0xa2>
 800bf6e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf72:	e9cd 2300 	strd	r2, r3, [sp]
 800bf76:	f7f4 faa9 	bl	80004cc <__aeabi_i2d>
 800bf7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf7e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf82:	3501      	adds	r5, #1
 800bf84:	e7da      	b.n	800bf3c <__kernel_rem_pio2+0x58>
 800bf86:	4610      	mov	r0, r2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	e7f8      	b.n	800bf7e <__kernel_rem_pio2+0x9a>
 800bf8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf90:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bf94:	f7f4 fb04 	bl	80005a0 <__aeabi_dmul>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfa0:	f7f4 f948 	bl	8000234 <__adddf3>
 800bfa4:	e9cd 0100 	strd	r0, r1, [sp]
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	9b07      	ldr	r3, [sp, #28]
 800bfac:	3f08      	subs	r7, #8
 800bfae:	429e      	cmp	r6, r3
 800bfb0:	ddec      	ble.n	800bf8c <__kernel_rem_pio2+0xa8>
 800bfb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfb6:	f108 0801 	add.w	r8, r8, #1
 800bfba:	e8ea 2302 	strd	r2, r3, [sl], #8
 800bfbe:	3508      	adds	r5, #8
 800bfc0:	e7c6      	b.n	800bf50 <__kernel_rem_pio2+0x6c>
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	aa0c      	add	r2, sp, #48	; 0x30
 800bfc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfcc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bfce:	9e02      	ldr	r6, [sp, #8]
 800bfd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bfd4:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd6:	ab98      	add	r3, sp, #608	; 0x260
 800bfd8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfdc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800bfe0:	ab70      	add	r3, sp, #448	; 0x1c0
 800bfe2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800bfe6:	46d0      	mov	r8, sl
 800bfe8:	46b1      	mov	r9, r6
 800bfea:	af0c      	add	r7, sp, #48	; 0x30
 800bfec:	9700      	str	r7, [sp, #0]
 800bfee:	f1b9 0f00 	cmp.w	r9, #0
 800bff2:	f1a8 0808 	sub.w	r8, r8, #8
 800bff6:	dc71      	bgt.n	800c0dc <__kernel_rem_pio2+0x1f8>
 800bff8:	465a      	mov	r2, fp
 800bffa:	4620      	mov	r0, r4
 800bffc:	4629      	mov	r1, r5
 800bffe:	f000 fbeb 	bl	800c7d8 <scalbn>
 800c002:	2200      	movs	r2, #0
 800c004:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c008:	4604      	mov	r4, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	f7f4 fac8 	bl	80005a0 <__aeabi_dmul>
 800c010:	f000 fb62 	bl	800c6d8 <floor>
 800c014:	2200      	movs	r2, #0
 800c016:	4b6e      	ldr	r3, [pc, #440]	; (800c1d0 <__kernel_rem_pio2+0x2ec>)
 800c018:	f7f4 fac2 	bl	80005a0 <__aeabi_dmul>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4620      	mov	r0, r4
 800c022:	4629      	mov	r1, r5
 800c024:	f7f4 f904 	bl	8000230 <__aeabi_dsub>
 800c028:	460d      	mov	r5, r1
 800c02a:	4604      	mov	r4, r0
 800c02c:	f7f4 fd52 	bl	8000ad4 <__aeabi_d2iz>
 800c030:	9004      	str	r0, [sp, #16]
 800c032:	f7f4 fa4b 	bl	80004cc <__aeabi_i2d>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	4620      	mov	r0, r4
 800c03c:	4629      	mov	r1, r5
 800c03e:	f7f4 f8f7 	bl	8000230 <__aeabi_dsub>
 800c042:	f1bb 0f00 	cmp.w	fp, #0
 800c046:	4680      	mov	r8, r0
 800c048:	4689      	mov	r9, r1
 800c04a:	dd70      	ble.n	800c12e <__kernel_rem_pio2+0x24a>
 800c04c:	1e72      	subs	r2, r6, #1
 800c04e:	ab0c      	add	r3, sp, #48	; 0x30
 800c050:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c054:	9c04      	ldr	r4, [sp, #16]
 800c056:	f1cb 0118 	rsb	r1, fp, #24
 800c05a:	fa40 f301 	asr.w	r3, r0, r1
 800c05e:	441c      	add	r4, r3
 800c060:	408b      	lsls	r3, r1
 800c062:	1ac0      	subs	r0, r0, r3
 800c064:	ab0c      	add	r3, sp, #48	; 0x30
 800c066:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c06a:	f1cb 0317 	rsb	r3, fp, #23
 800c06e:	9404      	str	r4, [sp, #16]
 800c070:	fa40 f303 	asr.w	r3, r0, r3
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	9b00      	ldr	r3, [sp, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dd66      	ble.n	800c14a <__kernel_rem_pio2+0x266>
 800c07c:	2200      	movs	r2, #0
 800c07e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c082:	4614      	mov	r4, r2
 800c084:	9b04      	ldr	r3, [sp, #16]
 800c086:	3301      	adds	r3, #1
 800c088:	9304      	str	r3, [sp, #16]
 800c08a:	4296      	cmp	r6, r2
 800c08c:	f300 80ac 	bgt.w	800c1e8 <__kernel_rem_pio2+0x304>
 800c090:	f1bb 0f00 	cmp.w	fp, #0
 800c094:	dd07      	ble.n	800c0a6 <__kernel_rem_pio2+0x1c2>
 800c096:	f1bb 0f01 	cmp.w	fp, #1
 800c09a:	f000 80b4 	beq.w	800c206 <__kernel_rem_pio2+0x322>
 800c09e:	f1bb 0f02 	cmp.w	fp, #2
 800c0a2:	f000 80ba 	beq.w	800c21a <__kernel_rem_pio2+0x336>
 800c0a6:	9b00      	ldr	r3, [sp, #0]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d14e      	bne.n	800c14a <__kernel_rem_pio2+0x266>
 800c0ac:	4642      	mov	r2, r8
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	4948      	ldr	r1, [pc, #288]	; (800c1d4 <__kernel_rem_pio2+0x2f0>)
 800c0b4:	f7f4 f8bc 	bl	8000230 <__aeabi_dsub>
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	4689      	mov	r9, r1
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	d044      	beq.n	800c14a <__kernel_rem_pio2+0x266>
 800c0c0:	465a      	mov	r2, fp
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	4943      	ldr	r1, [pc, #268]	; (800c1d4 <__kernel_rem_pio2+0x2f0>)
 800c0c6:	f000 fb87 	bl	800c7d8 <scalbn>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	f7f4 f8ad 	bl	8000230 <__aeabi_dsub>
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	4689      	mov	r9, r1
 800c0da:	e036      	b.n	800c14a <__kernel_rem_pio2+0x266>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4b3e      	ldr	r3, [pc, #248]	; (800c1d8 <__kernel_rem_pio2+0x2f4>)
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f7f4 fa5c 	bl	80005a0 <__aeabi_dmul>
 800c0e8:	f7f4 fcf4 	bl	8000ad4 <__aeabi_d2iz>
 800c0ec:	f7f4 f9ee 	bl	80004cc <__aeabi_i2d>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	4b38      	ldr	r3, [pc, #224]	; (800c1dc <__kernel_rem_pio2+0x2f8>)
 800c0fc:	f7f4 fa50 	bl	80005a0 <__aeabi_dmul>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4620      	mov	r0, r4
 800c106:	4629      	mov	r1, r5
 800c108:	f7f4 f892 	bl	8000230 <__aeabi_dsub>
 800c10c:	f7f4 fce2 	bl	8000ad4 <__aeabi_d2iz>
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	f109 39ff 	add.w	r9, r9, #4294967295
 800c116:	f843 0b04 	str.w	r0, [r3], #4
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c120:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c124:	f7f4 f886 	bl	8000234 <__adddf3>
 800c128:	4604      	mov	r4, r0
 800c12a:	460d      	mov	r5, r1
 800c12c:	e75f      	b.n	800bfee <__kernel_rem_pio2+0x10a>
 800c12e:	d105      	bne.n	800c13c <__kernel_rem_pio2+0x258>
 800c130:	1e73      	subs	r3, r6, #1
 800c132:	aa0c      	add	r2, sp, #48	; 0x30
 800c134:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c138:	15c3      	asrs	r3, r0, #23
 800c13a:	e79b      	b.n	800c074 <__kernel_rem_pio2+0x190>
 800c13c:	2200      	movs	r2, #0
 800c13e:	4b28      	ldr	r3, [pc, #160]	; (800c1e0 <__kernel_rem_pio2+0x2fc>)
 800c140:	f7f4 fcb4 	bl	8000aac <__aeabi_dcmpge>
 800c144:	2800      	cmp	r0, #0
 800c146:	d13e      	bne.n	800c1c6 <__kernel_rem_pio2+0x2e2>
 800c148:	9000      	str	r0, [sp, #0]
 800c14a:	2200      	movs	r2, #0
 800c14c:	2300      	movs	r3, #0
 800c14e:	4640      	mov	r0, r8
 800c150:	4649      	mov	r1, r9
 800c152:	f7f4 fc8d 	bl	8000a70 <__aeabi_dcmpeq>
 800c156:	2800      	cmp	r0, #0
 800c158:	f000 80b1 	beq.w	800c2be <__kernel_rem_pio2+0x3da>
 800c15c:	1e74      	subs	r4, r6, #1
 800c15e:	4623      	mov	r3, r4
 800c160:	2200      	movs	r2, #0
 800c162:	9902      	ldr	r1, [sp, #8]
 800c164:	428b      	cmp	r3, r1
 800c166:	da5f      	bge.n	800c228 <__kernel_rem_pio2+0x344>
 800c168:	2a00      	cmp	r2, #0
 800c16a:	d074      	beq.n	800c256 <__kernel_rem_pio2+0x372>
 800c16c:	ab0c      	add	r3, sp, #48	; 0x30
 800c16e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c172:	f1ab 0b18 	sub.w	fp, fp, #24
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 809f 	beq.w	800c2ba <__kernel_rem_pio2+0x3d6>
 800c17c:	465a      	mov	r2, fp
 800c17e:	2000      	movs	r0, #0
 800c180:	4914      	ldr	r1, [pc, #80]	; (800c1d4 <__kernel_rem_pio2+0x2f0>)
 800c182:	f000 fb29 	bl	800c7d8 <scalbn>
 800c186:	46a2      	mov	sl, r4
 800c188:	4606      	mov	r6, r0
 800c18a:	460f      	mov	r7, r1
 800c18c:	f04f 0800 	mov.w	r8, #0
 800c190:	ab70      	add	r3, sp, #448	; 0x1c0
 800c192:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c1d8 <__kernel_rem_pio2+0x2f4>
 800c196:	00e5      	lsls	r5, r4, #3
 800c198:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c19c:	f1ba 0f00 	cmp.w	sl, #0
 800c1a0:	f280 80c3 	bge.w	800c32a <__kernel_rem_pio2+0x446>
 800c1a4:	4626      	mov	r6, r4
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	f2c0 80f5 	blt.w	800c396 <__kernel_rem_pio2+0x4b2>
 800c1ac:	4b0d      	ldr	r3, [pc, #52]	; (800c1e4 <__kernel_rem_pio2+0x300>)
 800c1ae:	f04f 0a00 	mov.w	sl, #0
 800c1b2:	9307      	str	r3, [sp, #28]
 800c1b4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c1b6:	f04f 0b00 	mov.w	fp, #0
 800c1ba:	f04f 0800 	mov.w	r8, #0
 800c1be:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c1c2:	1ba7      	subs	r7, r4, r6
 800c1c4:	e0db      	b.n	800c37e <__kernel_rem_pio2+0x49a>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	e757      	b.n	800c07c <__kernel_rem_pio2+0x198>
 800c1cc:	0800d258 	.word	0x0800d258
 800c1d0:	40200000 	.word	0x40200000
 800c1d4:	3ff00000 	.word	0x3ff00000
 800c1d8:	3e700000 	.word	0x3e700000
 800c1dc:	41700000 	.word	0x41700000
 800c1e0:	3fe00000 	.word	0x3fe00000
 800c1e4:	0800d218 	.word	0x0800d218
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	b944      	cbnz	r4, 800c1fe <__kernel_rem_pio2+0x31a>
 800c1ec:	b11b      	cbz	r3, 800c1f6 <__kernel_rem_pio2+0x312>
 800c1ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	461c      	mov	r4, r3
 800c1f8:	3201      	adds	r2, #1
 800c1fa:	3704      	adds	r7, #4
 800c1fc:	e745      	b.n	800c08a <__kernel_rem_pio2+0x1a6>
 800c1fe:	1acb      	subs	r3, r1, r3
 800c200:	603b      	str	r3, [r7, #0]
 800c202:	4623      	mov	r3, r4
 800c204:	e7f7      	b.n	800c1f6 <__kernel_rem_pio2+0x312>
 800c206:	1e72      	subs	r2, r6, #1
 800c208:	ab0c      	add	r3, sp, #48	; 0x30
 800c20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c212:	a90c      	add	r1, sp, #48	; 0x30
 800c214:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c218:	e745      	b.n	800c0a6 <__kernel_rem_pio2+0x1c2>
 800c21a:	1e72      	subs	r2, r6, #1
 800c21c:	ab0c      	add	r3, sp, #48	; 0x30
 800c21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c222:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c226:	e7f4      	b.n	800c212 <__kernel_rem_pio2+0x32e>
 800c228:	a90c      	add	r1, sp, #48	; 0x30
 800c22a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c22e:	3b01      	subs	r3, #1
 800c230:	430a      	orrs	r2, r1
 800c232:	e796      	b.n	800c162 <__kernel_rem_pio2+0x27e>
 800c234:	3401      	adds	r4, #1
 800c236:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	d0fa      	beq.n	800c234 <__kernel_rem_pio2+0x350>
 800c23e:	9b08      	ldr	r3, [sp, #32]
 800c240:	f106 0801 	add.w	r8, r6, #1
 800c244:	18f5      	adds	r5, r6, r3
 800c246:	ab20      	add	r3, sp, #128	; 0x80
 800c248:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c24c:	4434      	add	r4, r6
 800c24e:	4544      	cmp	r4, r8
 800c250:	da04      	bge.n	800c25c <__kernel_rem_pio2+0x378>
 800c252:	4626      	mov	r6, r4
 800c254:	e6bf      	b.n	800bfd6 <__kernel_rem_pio2+0xf2>
 800c256:	2401      	movs	r4, #1
 800c258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c25a:	e7ec      	b.n	800c236 <__kernel_rem_pio2+0x352>
 800c25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25e:	f04f 0900 	mov.w	r9, #0
 800c262:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c266:	f7f4 f931 	bl	80004cc <__aeabi_i2d>
 800c26a:	2600      	movs	r6, #0
 800c26c:	2700      	movs	r7, #0
 800c26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c270:	e9c5 0100 	strd	r0, r1, [r5]
 800c274:	3b08      	subs	r3, #8
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	9504      	str	r5, [sp, #16]
 800c27a:	9b07      	ldr	r3, [sp, #28]
 800c27c:	4599      	cmp	r9, r3
 800c27e:	dd05      	ble.n	800c28c <__kernel_rem_pio2+0x3a8>
 800c280:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c284:	f108 0801 	add.w	r8, r8, #1
 800c288:	3508      	adds	r5, #8
 800c28a:	e7e0      	b.n	800c24e <__kernel_rem_pio2+0x36a>
 800c28c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c290:	9900      	ldr	r1, [sp, #0]
 800c292:	f109 0901 	add.w	r9, r9, #1
 800c296:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c29a:	9100      	str	r1, [sp, #0]
 800c29c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c2a0:	f8cd c010 	str.w	ip, [sp, #16]
 800c2a4:	f7f4 f97c 	bl	80005a0 <__aeabi_dmul>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f3 ffc0 	bl	8000234 <__adddf3>
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	e7df      	b.n	800c27a <__kernel_rem_pio2+0x396>
 800c2ba:	3c01      	subs	r4, #1
 800c2bc:	e756      	b.n	800c16c <__kernel_rem_pio2+0x288>
 800c2be:	f1cb 0200 	rsb	r2, fp, #0
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	f000 fa87 	bl	800c7d8 <scalbn>
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4ba4      	ldr	r3, [pc, #656]	; (800c560 <__kernel_rem_pio2+0x67c>)
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	f7f4 fbeb 	bl	8000aac <__aeabi_dcmpge>
 800c2d6:	b1f8      	cbz	r0, 800c318 <__kernel_rem_pio2+0x434>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	4ba2      	ldr	r3, [pc, #648]	; (800c564 <__kernel_rem_pio2+0x680>)
 800c2dc:	4620      	mov	r0, r4
 800c2de:	4629      	mov	r1, r5
 800c2e0:	f7f4 f95e 	bl	80005a0 <__aeabi_dmul>
 800c2e4:	f7f4 fbf6 	bl	8000ad4 <__aeabi_d2iz>
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	f7f4 f8ef 	bl	80004cc <__aeabi_i2d>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	4b9b      	ldr	r3, [pc, #620]	; (800c560 <__kernel_rem_pio2+0x67c>)
 800c2f2:	f7f4 f955 	bl	80005a0 <__aeabi_dmul>
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f7f3 ff97 	bl	8000230 <__aeabi_dsub>
 800c302:	f7f4 fbe7 	bl	8000ad4 <__aeabi_d2iz>
 800c306:	1c74      	adds	r4, r6, #1
 800c308:	ab0c      	add	r3, sp, #48	; 0x30
 800c30a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c30e:	f10b 0b18 	add.w	fp, fp, #24
 800c312:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c316:	e731      	b.n	800c17c <__kernel_rem_pio2+0x298>
 800c318:	4620      	mov	r0, r4
 800c31a:	4629      	mov	r1, r5
 800c31c:	f7f4 fbda 	bl	8000ad4 <__aeabi_d2iz>
 800c320:	ab0c      	add	r3, sp, #48	; 0x30
 800c322:	4634      	mov	r4, r6
 800c324:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c328:	e728      	b.n	800c17c <__kernel_rem_pio2+0x298>
 800c32a:	ab0c      	add	r3, sp, #48	; 0x30
 800c32c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c330:	f7f4 f8cc 	bl	80004cc <__aeabi_i2d>
 800c334:	4632      	mov	r2, r6
 800c336:	463b      	mov	r3, r7
 800c338:	f7f4 f932 	bl	80005a0 <__aeabi_dmul>
 800c33c:	4642      	mov	r2, r8
 800c33e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c342:	464b      	mov	r3, r9
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f4 f92a 	bl	80005a0 <__aeabi_dmul>
 800c34c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c350:	4606      	mov	r6, r0
 800c352:	460f      	mov	r7, r1
 800c354:	e722      	b.n	800c19c <__kernel_rem_pio2+0x2b8>
 800c356:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c35a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c35e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c362:	f8cd c01c 	str.w	ip, [sp, #28]
 800c366:	f7f4 f91b 	bl	80005a0 <__aeabi_dmul>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4650      	mov	r0, sl
 800c370:	4659      	mov	r1, fp
 800c372:	f7f3 ff5f 	bl	8000234 <__adddf3>
 800c376:	4682      	mov	sl, r0
 800c378:	468b      	mov	fp, r1
 800c37a:	f108 0801 	add.w	r8, r8, #1
 800c37e:	9b02      	ldr	r3, [sp, #8]
 800c380:	4598      	cmp	r8, r3
 800c382:	dc01      	bgt.n	800c388 <__kernel_rem_pio2+0x4a4>
 800c384:	45b8      	cmp	r8, r7
 800c386:	dde6      	ble.n	800c356 <__kernel_rem_pio2+0x472>
 800c388:	ab48      	add	r3, sp, #288	; 0x120
 800c38a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c38e:	e9c7 ab00 	strd	sl, fp, [r7]
 800c392:	3e01      	subs	r6, #1
 800c394:	e707      	b.n	800c1a6 <__kernel_rem_pio2+0x2c2>
 800c396:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c398:	2b02      	cmp	r3, #2
 800c39a:	dc09      	bgt.n	800c3b0 <__kernel_rem_pio2+0x4cc>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	dc32      	bgt.n	800c406 <__kernel_rem_pio2+0x522>
 800c3a0:	d05a      	beq.n	800c458 <__kernel_rem_pio2+0x574>
 800c3a2:	9b04      	ldr	r3, [sp, #16]
 800c3a4:	f003 0007 	and.w	r0, r3, #7
 800c3a8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d1f5      	bne.n	800c3a2 <__kernel_rem_pio2+0x4be>
 800c3b6:	ab48      	add	r3, sp, #288	; 0x120
 800c3b8:	441d      	add	r5, r3
 800c3ba:	46aa      	mov	sl, r5
 800c3bc:	46a3      	mov	fp, r4
 800c3be:	f1bb 0f00 	cmp.w	fp, #0
 800c3c2:	dc76      	bgt.n	800c4b2 <__kernel_rem_pio2+0x5ce>
 800c3c4:	46aa      	mov	sl, r5
 800c3c6:	46a3      	mov	fp, r4
 800c3c8:	f1bb 0f01 	cmp.w	fp, #1
 800c3cc:	f300 8090 	bgt.w	800c4f0 <__kernel_rem_pio2+0x60c>
 800c3d0:	2700      	movs	r7, #0
 800c3d2:	463e      	mov	r6, r7
 800c3d4:	2c01      	cmp	r4, #1
 800c3d6:	f300 80aa 	bgt.w	800c52e <__kernel_rem_pio2+0x64a>
 800c3da:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c3de:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f040 80ac 	bne.w	800c542 <__kernel_rem_pio2+0x65e>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	9806      	ldr	r0, [sp, #24]
 800c3f0:	e9c0 2300 	strd	r2, r3, [r0]
 800c3f4:	4622      	mov	r2, r4
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c3fc:	463a      	mov	r2, r7
 800c3fe:	4633      	mov	r3, r6
 800c400:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c404:	e7cd      	b.n	800c3a2 <__kernel_rem_pio2+0x4be>
 800c406:	2000      	movs	r0, #0
 800c408:	46a0      	mov	r8, r4
 800c40a:	4601      	mov	r1, r0
 800c40c:	ab48      	add	r3, sp, #288	; 0x120
 800c40e:	441d      	add	r5, r3
 800c410:	f1b8 0f00 	cmp.w	r8, #0
 800c414:	da3a      	bge.n	800c48c <__kernel_rem_pio2+0x5a8>
 800c416:	9b00      	ldr	r3, [sp, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d03e      	beq.n	800c49a <__kernel_rem_pio2+0x5b6>
 800c41c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c420:	4602      	mov	r2, r0
 800c422:	462b      	mov	r3, r5
 800c424:	9d06      	ldr	r5, [sp, #24]
 800c426:	2601      	movs	r6, #1
 800c428:	e9c5 2300 	strd	r2, r3, [r5]
 800c42c:	460b      	mov	r3, r1
 800c42e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c432:	f7f3 fefd 	bl	8000230 <__aeabi_dsub>
 800c436:	4684      	mov	ip, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	ad48      	add	r5, sp, #288	; 0x120
 800c43c:	42b4      	cmp	r4, r6
 800c43e:	f105 0508 	add.w	r5, r5, #8
 800c442:	da2c      	bge.n	800c49e <__kernel_rem_pio2+0x5ba>
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	b10b      	cbz	r3, 800c44c <__kernel_rem_pio2+0x568>
 800c448:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c44c:	4662      	mov	r2, ip
 800c44e:	463b      	mov	r3, r7
 800c450:	9906      	ldr	r1, [sp, #24]
 800c452:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c456:	e7a4      	b.n	800c3a2 <__kernel_rem_pio2+0x4be>
 800c458:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c45a:	ab48      	add	r3, sp, #288	; 0x120
 800c45c:	4637      	mov	r7, r6
 800c45e:	441d      	add	r5, r3
 800c460:	2c00      	cmp	r4, #0
 800c462:	da09      	bge.n	800c478 <__kernel_rem_pio2+0x594>
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	b10b      	cbz	r3, 800c46c <__kernel_rem_pio2+0x588>
 800c468:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	9906      	ldr	r1, [sp, #24]
 800c472:	e9c1 2300 	strd	r2, r3, [r1]
 800c476:	e794      	b.n	800c3a2 <__kernel_rem_pio2+0x4be>
 800c478:	4630      	mov	r0, r6
 800c47a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c47e:	4639      	mov	r1, r7
 800c480:	f7f3 fed8 	bl	8000234 <__adddf3>
 800c484:	3c01      	subs	r4, #1
 800c486:	4606      	mov	r6, r0
 800c488:	460f      	mov	r7, r1
 800c48a:	e7e9      	b.n	800c460 <__kernel_rem_pio2+0x57c>
 800c48c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c490:	f7f3 fed0 	bl	8000234 <__adddf3>
 800c494:	f108 38ff 	add.w	r8, r8, #4294967295
 800c498:	e7ba      	b.n	800c410 <__kernel_rem_pio2+0x52c>
 800c49a:	460d      	mov	r5, r1
 800c49c:	e7c0      	b.n	800c420 <__kernel_rem_pio2+0x53c>
 800c49e:	4660      	mov	r0, ip
 800c4a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	f7f3 fec5 	bl	8000234 <__adddf3>
 800c4aa:	3601      	adds	r6, #1
 800c4ac:	4684      	mov	ip, r0
 800c4ae:	460f      	mov	r7, r1
 800c4b0:	e7c4      	b.n	800c43c <__kernel_rem_pio2+0x558>
 800c4b2:	e9da 6700 	ldrd	r6, r7, [sl]
 800c4b6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c4ba:	4632      	mov	r2, r6
 800c4bc:	463b      	mov	r3, r7
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f3 feb7 	bl	8000234 <__adddf3>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	f7f3 fead 	bl	8000230 <__aeabi_dsub>
 800c4d6:	4632      	mov	r2, r6
 800c4d8:	463b      	mov	r3, r7
 800c4da:	f7f3 feab 	bl	8000234 <__adddf3>
 800c4de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4e2:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c4e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4ea:	e9ca 2300 	strd	r2, r3, [sl]
 800c4ee:	e766      	b.n	800c3be <__kernel_rem_pio2+0x4da>
 800c4f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4f4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c4f8:	4642      	mov	r2, r8
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f3 fe98 	bl	8000234 <__adddf3>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c50c:	4630      	mov	r0, r6
 800c50e:	4639      	mov	r1, r7
 800c510:	f7f3 fe8e 	bl	8000230 <__aeabi_dsub>
 800c514:	4642      	mov	r2, r8
 800c516:	464b      	mov	r3, r9
 800c518:	f7f3 fe8c 	bl	8000234 <__adddf3>
 800c51c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c520:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c524:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c528:	e9ca 2300 	strd	r2, r3, [sl]
 800c52c:	e74c      	b.n	800c3c8 <__kernel_rem_pio2+0x4e4>
 800c52e:	4638      	mov	r0, r7
 800c530:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c534:	4631      	mov	r1, r6
 800c536:	f7f3 fe7d 	bl	8000234 <__adddf3>
 800c53a:	3c01      	subs	r4, #1
 800c53c:	4607      	mov	r7, r0
 800c53e:	460e      	mov	r6, r1
 800c540:	e748      	b.n	800c3d4 <__kernel_rem_pio2+0x4f0>
 800c542:	9b06      	ldr	r3, [sp, #24]
 800c544:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c548:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c54c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c550:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c554:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c558:	601d      	str	r5, [r3, #0]
 800c55a:	615e      	str	r6, [r3, #20]
 800c55c:	e721      	b.n	800c3a2 <__kernel_rem_pio2+0x4be>
 800c55e:	bf00      	nop
 800c560:	41700000 	.word	0x41700000
 800c564:	3e700000 	.word	0x3e700000

0800c568 <__kernel_sin>:
 800c568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c56c:	b086      	sub	sp, #24
 800c56e:	e9cd 2300 	strd	r2, r3, [sp]
 800c572:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c576:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c57a:	4682      	mov	sl, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c580:	da03      	bge.n	800c58a <__kernel_sin+0x22>
 800c582:	f7f4 faa7 	bl	8000ad4 <__aeabi_d2iz>
 800c586:	2800      	cmp	r0, #0
 800c588:	d050      	beq.n	800c62c <__kernel_sin+0xc4>
 800c58a:	4652      	mov	r2, sl
 800c58c:	4623      	mov	r3, r4
 800c58e:	4650      	mov	r0, sl
 800c590:	4621      	mov	r1, r4
 800c592:	f7f4 f805 	bl	80005a0 <__aeabi_dmul>
 800c596:	4606      	mov	r6, r0
 800c598:	460f      	mov	r7, r1
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4650      	mov	r0, sl
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	f7f3 fffd 	bl	80005a0 <__aeabi_dmul>
 800c5a6:	a33e      	add	r3, pc, #248	; (adr r3, 800c6a0 <__kernel_sin+0x138>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	4689      	mov	r9, r1
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f3 fff4 	bl	80005a0 <__aeabi_dmul>
 800c5b8:	a33b      	add	r3, pc, #236	; (adr r3, 800c6a8 <__kernel_sin+0x140>)
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f7f3 fe37 	bl	8000230 <__aeabi_dsub>
 800c5c2:	4632      	mov	r2, r6
 800c5c4:	463b      	mov	r3, r7
 800c5c6:	f7f3 ffeb 	bl	80005a0 <__aeabi_dmul>
 800c5ca:	a339      	add	r3, pc, #228	; (adr r3, 800c6b0 <__kernel_sin+0x148>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f3 fe30 	bl	8000234 <__adddf3>
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	f7f3 ffe2 	bl	80005a0 <__aeabi_dmul>
 800c5dc:	a336      	add	r3, pc, #216	; (adr r3, 800c6b8 <__kernel_sin+0x150>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	f7f3 fe25 	bl	8000230 <__aeabi_dsub>
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	463b      	mov	r3, r7
 800c5ea:	f7f3 ffd9 	bl	80005a0 <__aeabi_dmul>
 800c5ee:	a334      	add	r3, pc, #208	; (adr r3, 800c6c0 <__kernel_sin+0x158>)
 800c5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f4:	f7f3 fe1e 	bl	8000234 <__adddf3>
 800c5f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5fc:	b9dd      	cbnz	r5, 800c636 <__kernel_sin+0xce>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f3 ffcb 	bl	80005a0 <__aeabi_dmul>
 800c60a:	a32f      	add	r3, pc, #188	; (adr r3, 800c6c8 <__kernel_sin+0x160>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f7f3 fe0e 	bl	8000230 <__aeabi_dsub>
 800c614:	4642      	mov	r2, r8
 800c616:	464b      	mov	r3, r9
 800c618:	f7f3 ffc2 	bl	80005a0 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4650      	mov	r0, sl
 800c622:	4621      	mov	r1, r4
 800c624:	f7f3 fe06 	bl	8000234 <__adddf3>
 800c628:	4682      	mov	sl, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	4650      	mov	r0, sl
 800c62e:	4621      	mov	r1, r4
 800c630:	b006      	add	sp, #24
 800c632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c636:	2200      	movs	r2, #0
 800c638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c63c:	4b24      	ldr	r3, [pc, #144]	; (800c6d0 <__kernel_sin+0x168>)
 800c63e:	f7f3 ffaf 	bl	80005a0 <__aeabi_dmul>
 800c642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c64a:	4640      	mov	r0, r8
 800c64c:	4649      	mov	r1, r9
 800c64e:	f7f3 ffa7 	bl	80005a0 <__aeabi_dmul>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c65a:	f7f3 fde9 	bl	8000230 <__aeabi_dsub>
 800c65e:	4632      	mov	r2, r6
 800c660:	463b      	mov	r3, r7
 800c662:	f7f3 ff9d 	bl	80005a0 <__aeabi_dmul>
 800c666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c66a:	f7f3 fde1 	bl	8000230 <__aeabi_dsub>
 800c66e:	a316      	add	r3, pc, #88	; (adr r3, 800c6c8 <__kernel_sin+0x160>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	4640      	mov	r0, r8
 800c67a:	4649      	mov	r1, r9
 800c67c:	f7f3 ff90 	bl	80005a0 <__aeabi_dmul>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f3 fdd4 	bl	8000234 <__adddf3>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	4650      	mov	r0, sl
 800c692:	4621      	mov	r1, r4
 800c694:	f7f3 fdcc 	bl	8000230 <__aeabi_dsub>
 800c698:	e7c6      	b.n	800c628 <__kernel_sin+0xc0>
 800c69a:	bf00      	nop
 800c69c:	f3af 8000 	nop.w
 800c6a0:	5acfd57c 	.word	0x5acfd57c
 800c6a4:	3de5d93a 	.word	0x3de5d93a
 800c6a8:	8a2b9ceb 	.word	0x8a2b9ceb
 800c6ac:	3e5ae5e6 	.word	0x3e5ae5e6
 800c6b0:	57b1fe7d 	.word	0x57b1fe7d
 800c6b4:	3ec71de3 	.word	0x3ec71de3
 800c6b8:	19c161d5 	.word	0x19c161d5
 800c6bc:	3f2a01a0 	.word	0x3f2a01a0
 800c6c0:	1110f8a6 	.word	0x1110f8a6
 800c6c4:	3f811111 	.word	0x3f811111
 800c6c8:	55555549 	.word	0x55555549
 800c6cc:	3fc55555 	.word	0x3fc55555
 800c6d0:	3fe00000 	.word	0x3fe00000
 800c6d4:	00000000 	.word	0x00000000

0800c6d8 <floor>:
 800c6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c6e0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c6e4:	2e13      	cmp	r6, #19
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4607      	mov	r7, r0
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	dc33      	bgt.n	800c75a <floor+0x82>
 800c6f2:	2e00      	cmp	r6, #0
 800c6f4:	da14      	bge.n	800c720 <floor+0x48>
 800c6f6:	a334      	add	r3, pc, #208	; (adr r3, 800c7c8 <floor+0xf0>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 fd9a 	bl	8000234 <__adddf3>
 800c700:	2200      	movs	r2, #0
 800c702:	2300      	movs	r3, #0
 800c704:	f7f4 f9dc 	bl	8000ac0 <__aeabi_dcmpgt>
 800c708:	b138      	cbz	r0, 800c71a <floor+0x42>
 800c70a:	2c00      	cmp	r4, #0
 800c70c:	da58      	bge.n	800c7c0 <floor+0xe8>
 800c70e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c712:	431d      	orrs	r5, r3
 800c714:	d001      	beq.n	800c71a <floor+0x42>
 800c716:	2500      	movs	r5, #0
 800c718:	4c2d      	ldr	r4, [pc, #180]	; (800c7d0 <floor+0xf8>)
 800c71a:	4623      	mov	r3, r4
 800c71c:	462f      	mov	r7, r5
 800c71e:	e025      	b.n	800c76c <floor+0x94>
 800c720:	4a2c      	ldr	r2, [pc, #176]	; (800c7d4 <floor+0xfc>)
 800c722:	fa42 f806 	asr.w	r8, r2, r6
 800c726:	ea01 0208 	and.w	r2, r1, r8
 800c72a:	4302      	orrs	r2, r0
 800c72c:	d01e      	beq.n	800c76c <floor+0x94>
 800c72e:	a326      	add	r3, pc, #152	; (adr r3, 800c7c8 <floor+0xf0>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fd7e 	bl	8000234 <__adddf3>
 800c738:	2200      	movs	r2, #0
 800c73a:	2300      	movs	r3, #0
 800c73c:	f7f4 f9c0 	bl	8000ac0 <__aeabi_dcmpgt>
 800c740:	2800      	cmp	r0, #0
 800c742:	d0ea      	beq.n	800c71a <floor+0x42>
 800c744:	2c00      	cmp	r4, #0
 800c746:	bfbe      	ittt	lt
 800c748:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c74c:	fa43 f606 	asrlt.w	r6, r3, r6
 800c750:	19a4      	addlt	r4, r4, r6
 800c752:	2500      	movs	r5, #0
 800c754:	ea24 0408 	bic.w	r4, r4, r8
 800c758:	e7df      	b.n	800c71a <floor+0x42>
 800c75a:	2e33      	cmp	r6, #51	; 0x33
 800c75c:	dd0a      	ble.n	800c774 <floor+0x9c>
 800c75e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c762:	d103      	bne.n	800c76c <floor+0x94>
 800c764:	f7f3 fd66 	bl	8000234 <__adddf3>
 800c768:	4607      	mov	r7, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4638      	mov	r0, r7
 800c76e:	4619      	mov	r1, r3
 800c770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c77c:	fa22 f808 	lsr.w	r8, r2, r8
 800c780:	ea18 0f00 	tst.w	r8, r0
 800c784:	d0f2      	beq.n	800c76c <floor+0x94>
 800c786:	a310      	add	r3, pc, #64	; (adr r3, 800c7c8 <floor+0xf0>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 fd52 	bl	8000234 <__adddf3>
 800c790:	2200      	movs	r2, #0
 800c792:	2300      	movs	r3, #0
 800c794:	f7f4 f994 	bl	8000ac0 <__aeabi_dcmpgt>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d0be      	beq.n	800c71a <floor+0x42>
 800c79c:	2c00      	cmp	r4, #0
 800c79e:	da02      	bge.n	800c7a6 <floor+0xce>
 800c7a0:	2e14      	cmp	r6, #20
 800c7a2:	d103      	bne.n	800c7ac <floor+0xd4>
 800c7a4:	3401      	adds	r4, #1
 800c7a6:	ea25 0508 	bic.w	r5, r5, r8
 800c7aa:	e7b6      	b.n	800c71a <floor+0x42>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c7b2:	fa03 f606 	lsl.w	r6, r3, r6
 800c7b6:	4435      	add	r5, r6
 800c7b8:	42bd      	cmp	r5, r7
 800c7ba:	bf38      	it	cc
 800c7bc:	18e4      	addcc	r4, r4, r3
 800c7be:	e7f2      	b.n	800c7a6 <floor+0xce>
 800c7c0:	2500      	movs	r5, #0
 800c7c2:	462c      	mov	r4, r5
 800c7c4:	e7a9      	b.n	800c71a <floor+0x42>
 800c7c6:	bf00      	nop
 800c7c8:	8800759c 	.word	0x8800759c
 800c7cc:	7e37e43c 	.word	0x7e37e43c
 800c7d0:	bff00000 	.word	0xbff00000
 800c7d4:	000fffff 	.word	0x000fffff

0800c7d8 <scalbn>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c7de:	4604      	mov	r4, r0
 800c7e0:	460d      	mov	r5, r1
 800c7e2:	4617      	mov	r7, r2
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	b996      	cbnz	r6, 800c80e <scalbn+0x36>
 800c7e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7ec:	4303      	orrs	r3, r0
 800c7ee:	d039      	beq.n	800c864 <scalbn+0x8c>
 800c7f0:	4b33      	ldr	r3, [pc, #204]	; (800c8c0 <scalbn+0xe8>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f7f3 fed4 	bl	80005a0 <__aeabi_dmul>
 800c7f8:	4b32      	ldr	r3, [pc, #200]	; (800c8c4 <scalbn+0xec>)
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	429f      	cmp	r7, r3
 800c7fe:	460d      	mov	r5, r1
 800c800:	da0f      	bge.n	800c822 <scalbn+0x4a>
 800c802:	a32b      	add	r3, pc, #172	; (adr r3, 800c8b0 <scalbn+0xd8>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f7f3 feca 	bl	80005a0 <__aeabi_dmul>
 800c80c:	e006      	b.n	800c81c <scalbn+0x44>
 800c80e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c812:	4296      	cmp	r6, r2
 800c814:	d10a      	bne.n	800c82c <scalbn+0x54>
 800c816:	4602      	mov	r2, r0
 800c818:	f7f3 fd0c 	bl	8000234 <__adddf3>
 800c81c:	4604      	mov	r4, r0
 800c81e:	460d      	mov	r5, r1
 800c820:	e020      	b.n	800c864 <scalbn+0x8c>
 800c822:	460b      	mov	r3, r1
 800c824:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c828:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c82c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c830:	19b9      	adds	r1, r7, r6
 800c832:	4291      	cmp	r1, r2
 800c834:	dd0e      	ble.n	800c854 <scalbn+0x7c>
 800c836:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c83a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c83e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c842:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c846:	4820      	ldr	r0, [pc, #128]	; (800c8c8 <scalbn+0xf0>)
 800c848:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c84c:	a31a      	add	r3, pc, #104	; (adr r3, 800c8b8 <scalbn+0xe0>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	e7d9      	b.n	800c808 <scalbn+0x30>
 800c854:	2900      	cmp	r1, #0
 800c856:	dd08      	ble.n	800c86a <scalbn+0x92>
 800c858:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c85c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c860:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c86a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c86e:	da12      	bge.n	800c896 <scalbn+0xbe>
 800c870:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c874:	429f      	cmp	r7, r3
 800c876:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c87a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c87e:	dcdc      	bgt.n	800c83a <scalbn+0x62>
 800c880:	a30b      	add	r3, pc, #44	; (adr r3, 800c8b0 <scalbn+0xd8>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c88a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c88e:	480f      	ldr	r0, [pc, #60]	; (800c8cc <scalbn+0xf4>)
 800c890:	f041 011f 	orr.w	r1, r1, #31
 800c894:	e7b8      	b.n	800c808 <scalbn+0x30>
 800c896:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c89a:	3136      	adds	r1, #54	; 0x36
 800c89c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <scalbn+0xf8>)
 800c8ac:	e7ac      	b.n	800c808 <scalbn+0x30>
 800c8ae:	bf00      	nop
 800c8b0:	c2f8f359 	.word	0xc2f8f359
 800c8b4:	01a56e1f 	.word	0x01a56e1f
 800c8b8:	8800759c 	.word	0x8800759c
 800c8bc:	7e37e43c 	.word	0x7e37e43c
 800c8c0:	43500000 	.word	0x43500000
 800c8c4:	ffff3cb0 	.word	0xffff3cb0
 800c8c8:	8800759c 	.word	0x8800759c
 800c8cc:	c2f8f359 	.word	0xc2f8f359
 800c8d0:	3c900000 	.word	0x3c900000

0800c8d4 <_init>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr

0800c8e0 <_fini>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	bf00      	nop
 800c8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e6:	bc08      	pop	{r3}
 800c8e8:	469e      	mov	lr, r3
 800c8ea:	4770      	bx	lr
