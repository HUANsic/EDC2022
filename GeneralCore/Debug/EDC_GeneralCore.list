
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d084  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800d270  0800d270  0001d270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe8  0800dbe8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbe8  0800dbe8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbe8  0800dbe8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbe8  0800dbe8  0001dbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800dbf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f64  20000088  0800dc78  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007fec  0800dc78  00027fec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001547a  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003710  00000000  00000000  0003552b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca6d  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bcf  00000000  00000000  00057d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3c7  00000000  00000000  0007193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fd03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006324  00000000  00000000  0010fd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000088 	.word	0x20000088
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d254 	.word	0x0800d254

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000008c 	.word	0x2000008c
 8000224:	0800d254 	.word	0x0800d254

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <Find_crash>:
extern Rectangle obstacles[5];			// area that depletes charge faster
extern Coordinate oppoBeacons[3];		// opponent charging station coordinate
extern Queue openlist;
extern List closelist;

uint8_t Find_crash(uint16_t cor, uint8_t flag) {
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	uint16_t x = cor / 256;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	81bb      	strh	r3, [r7, #12]
	uint16_t y = cor % 256;
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	817b      	strh	r3, [r7, #10]

	if (flag == 0) {
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <Find_crash+0x26>
		return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e109      	b.n	8001432 <Find_crash+0x23a>
	}
	if (flag == 1) {
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d151      	bne.n	80012c8 <Find_crash+0xd0>
		//walls
		if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	2b25      	cmp	r3, #37	; 0x25
 8001228:	d910      	bls.n	800124c <Find_crash+0x54>
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	2b28      	cmp	r3, #40	; 0x28
 800122e:	d80d      	bhi.n	800124c <Find_crash+0x54>
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	2b25      	cmp	r3, #37	; 0x25
 8001234:	d902      	bls.n	800123c <Find_crash+0x44>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	d905      	bls.n	8001248 <Find_crash+0x50>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b92      	cmp	r3, #146	; 0x92
 8001240:	d904      	bls.n	800124c <Find_crash+0x54>
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	2bd8      	cmp	r3, #216	; 0xd8
 8001246:	d801      	bhi.n	800124c <Find_crash+0x54>
			return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e0f2      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2bd5      	cmp	r3, #213	; 0xd5
 8001250:	d910      	bls.n	8001274 <Find_crash+0x7c>
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bd8      	cmp	r3, #216	; 0xd8
 8001256:	d80d      	bhi.n	8001274 <Find_crash+0x7c>
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b25      	cmp	r3, #37	; 0x25
 800125c:	d902      	bls.n	8001264 <Find_crash+0x6c>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	2b6b      	cmp	r3, #107	; 0x6b
 8001262:	d905      	bls.n	8001270 <Find_crash+0x78>
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b92      	cmp	r3, #146	; 0x92
 8001268:	d904      	bls.n	8001274 <Find_crash+0x7c>
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	2bd8      	cmp	r3, #216	; 0xd8
 800126e:	d801      	bhi.n	8001274 <Find_crash+0x7c>
			return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e0de      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	2b25      	cmp	r3, #37	; 0x25
 8001278:	d910      	bls.n	800129c <Find_crash+0xa4>
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	2b28      	cmp	r3, #40	; 0x28
 800127e:	d80d      	bhi.n	800129c <Find_crash+0xa4>
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d902      	bls.n	800128c <Find_crash+0x94>
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d905      	bls.n	8001298 <Find_crash+0xa0>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2b92      	cmp	r3, #146	; 0x92
 8001290:	d904      	bls.n	800129c <Find_crash+0xa4>
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2bd8      	cmp	r3, #216	; 0xd8
 8001296:	d801      	bhi.n	800129c <Find_crash+0xa4>
			return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e0ca      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2bd5      	cmp	r3, #213	; 0xd5
 80012a0:	d910      	bls.n	80012c4 <Find_crash+0xcc>
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2bd8      	cmp	r3, #216	; 0xd8
 80012a6:	d80d      	bhi.n	80012c4 <Find_crash+0xcc>
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	2b25      	cmp	r3, #37	; 0x25
 80012ac:	d902      	bls.n	80012b4 <Find_crash+0xbc>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	2b6b      	cmp	r3, #107	; 0x6b
 80012b2:	d905      	bls.n	80012c0 <Find_crash+0xc8>
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	2b92      	cmp	r3, #146	; 0x92
 80012b8:	d904      	bls.n	80012c4 <Find_crash+0xcc>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	2bd8      	cmp	r3, #216	; 0xd8
 80012be:	d801      	bhi.n	80012c4 <Find_crash+0xcc>
			return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b6      	b.n	8001432 <Find_crash+0x23a>
		}
		return 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0b4      	b.n	8001432 <Find_crash+0x23a>
	}
	//walls
	if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	2b25      	cmp	r3, #37	; 0x25
 80012cc:	d910      	bls.n	80012f0 <Find_crash+0xf8>
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	d80d      	bhi.n	80012f0 <Find_crash+0xf8>
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	2b25      	cmp	r3, #37	; 0x25
 80012d8:	d902      	bls.n	80012e0 <Find_crash+0xe8>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	2b6b      	cmp	r3, #107	; 0x6b
 80012de:	d905      	bls.n	80012ec <Find_crash+0xf4>
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	2b92      	cmp	r3, #146	; 0x92
 80012e4:	d904      	bls.n	80012f0 <Find_crash+0xf8>
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	2bd8      	cmp	r3, #216	; 0xd8
 80012ea:	d801      	bhi.n	80012f0 <Find_crash+0xf8>
		return 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0a0      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2bd5      	cmp	r3, #213	; 0xd5
 80012f4:	d910      	bls.n	8001318 <Find_crash+0x120>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	2bd8      	cmp	r3, #216	; 0xd8
 80012fa:	d80d      	bhi.n	8001318 <Find_crash+0x120>
 80012fc:	897b      	ldrh	r3, [r7, #10]
 80012fe:	2b25      	cmp	r3, #37	; 0x25
 8001300:	d902      	bls.n	8001308 <Find_crash+0x110>
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	2b6b      	cmp	r3, #107	; 0x6b
 8001306:	d905      	bls.n	8001314 <Find_crash+0x11c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	2b92      	cmp	r3, #146	; 0x92
 800130c:	d904      	bls.n	8001318 <Find_crash+0x120>
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	2bd8      	cmp	r3, #216	; 0xd8
 8001312:	d801      	bhi.n	8001318 <Find_crash+0x120>
		return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e08c      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b25      	cmp	r3, #37	; 0x25
 800131c:	d910      	bls.n	8001340 <Find_crash+0x148>
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	d80d      	bhi.n	8001340 <Find_crash+0x148>
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b25      	cmp	r3, #37	; 0x25
 8001328:	d902      	bls.n	8001330 <Find_crash+0x138>
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	2b6b      	cmp	r3, #107	; 0x6b
 800132e:	d905      	bls.n	800133c <Find_crash+0x144>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b92      	cmp	r3, #146	; 0x92
 8001334:	d904      	bls.n	8001340 <Find_crash+0x148>
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	2bd8      	cmp	r3, #216	; 0xd8
 800133a:	d801      	bhi.n	8001340 <Find_crash+0x148>
		return 0;
 800133c:	2300      	movs	r3, #0
 800133e:	e078      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	2bd5      	cmp	r3, #213	; 0xd5
 8001344:	d910      	bls.n	8001368 <Find_crash+0x170>
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d80d      	bhi.n	8001368 <Find_crash+0x170>
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	d902      	bls.n	8001358 <Find_crash+0x160>
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	2b6b      	cmp	r3, #107	; 0x6b
 8001356:	d905      	bls.n	8001364 <Find_crash+0x16c>
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b92      	cmp	r3, #146	; 0x92
 800135c:	d904      	bls.n	8001368 <Find_crash+0x170>
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	2bd8      	cmp	r3, #216	; 0xd8
 8001362:	d801      	bhi.n	8001368 <Find_crash+0x170>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e064      	b.n	8001432 <Find_crash+0x23a>
	}
	//obstacles
	for (uint8_t k = 0; k < 5; k++) {
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e026      	b.n	80013bc <Find_crash+0x1c4>
		if (x >= obstacles[k].coord1.x && y >= obstacles[k].coord1.y && x <= obstacles[k].coord2.x
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <Find_crash+0x244>)
 8001374:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 8001378:	4293      	cmp	r3, r2
 800137a:	db1c      	blt.n	80013b6 <Find_crash+0x1be>
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <Find_crash+0x244>)
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	db13      	blt.n	80013b6 <Find_crash+0x1be>
 800138e:	89ba      	ldrh	r2, [r7, #12]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <Find_crash+0x244>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dc0a      	bgt.n	80013b6 <Find_crash+0x1be>
				&& y <= obstacles[k].coord2.y) {
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4925      	ldr	r1, [pc, #148]	; (800143c <Find_crash+0x244>)
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <Find_crash+0x1be>
			return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e03d      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k < 5; k++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d9d5      	bls.n	800136e <Find_crash+0x176>
		}
	}
	// oppoBeacons
	for (uint8_t k = 0; k <= 2; k++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e030      	b.n	800142a <Find_crash+0x232>
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <Find_crash+0x248>)
 80013ce:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 80013d2:	1a9b      	subs	r3, r3, r2
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013d4:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013d6:	89ba      	ldrh	r2, [r7, #12]
 80013d8:	7bb9      	ldrb	r1, [r7, #14]
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <Find_crash+0x248>)
 80013dc:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 80013e0:	1a52      	subs	r2, r2, r1
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013e2:	b292      	uxth	r2, r2
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <Find_crash+0x248>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	b299      	uxth	r1, r3
 80013fc:	8978      	ldrh	r0, [r7, #10]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4c0f      	ldr	r4, [pc, #60]	; (8001440 <Find_crash+0x248>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4423      	add	r3, r4
 8001406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140a:	1ac3      	subs	r3, r0, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 8001414:	4413      	add	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
		if (distance <= 400) {
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	d801      	bhi.n	8001424 <Find_crash+0x22c>
			return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k <= 2; k++) {
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d9cb      	bls.n	80013c8 <Find_crash+0x1d0>
		}
	}
	return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	4770      	bx	lr
 800143c:	20000b88 	.word	0x20000b88
 8001440:	20000bbc 	.word	0x20000bbc

08001444 <cal_H>:

uint16_t cal_H(uint16_t cor1, uint16_t cor2) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
	return abs(x1 - x2) + abs(y1 - y2);
 800146c:	89fa      	ldrh	r2, [r7, #14]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <dir>:

int8_t dir(uint16_t cor1, uint16_t cor2) {
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	460a      	mov	r2, r1
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]
	return ((x2 - x1) + 2 * (y2 - y1));
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8939      	ldrh	r1, [r7, #8]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25b      	sxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <findend>:

uint8_t findend(uint16_t cur, uint16_t end, uint8_t step)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70fb      	strb	r3, [r7, #3]
	uint16_t x1 = cur / 256;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cur % 256;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = end / 256;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = end % 256;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	if (abs(x2 - x1) < step && abs(y2 - y1) < step)
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0b      	bge.n	800153c <findend+0x56>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	da01      	bge.n	800153c <findend+0x56>
	{
		return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <findend+0x58>
	}
	else
		return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Find_around_node>:

void Find_around_node(uint16_t currentindex, int8_t lastdir, A_Star_Node *end, uint8_t step) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	603a      	str	r2, [r7, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	717b      	strb	r3, [r7, #5]
 800155a:	4613      	mov	r3, r2
 800155c:	713b      	strb	r3, [r7, #4]
	uint16_t x = openlist.buffer[currentindex].cor / 256;
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	49b3      	ldr	r1, [pc, #716]	; (8001830 <Find_around_node+0x2e8>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t y = openlist.buffer[currentindex].cor % 256;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	49ad      	ldr	r1, [pc, #692]	; (8001830 <Find_around_node+0x2e8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t obstacleflag = 2;		//负责检测采取何种程度的避障
 800158e:	2302      	movs	r3, #2
 8001590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// left
	if (x >= step) {
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800159c:	429a      	cmp	r2, r3
 800159e:	f0c0 80a3 	bcc.w	80016e8 <Find_around_node+0x1a0>
		uint16_t curx = x - step;
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		uint16_t cury = y;
 80015b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t coordinateindex = curx * 256 + cury;
 80015b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c4:	4413      	add	r3, r2
 80015c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		if (Find_crash(coordinateindex, obstacleflag)) {
 80015ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80015ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe0f 	bl	80011f8 <Find_crash>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8083 	beq.w	80016e8 <Find_around_node+0x1a0>
			//not in close_list
			if (!findin_list(coordinateindex))
 80015e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fc18 	bl	8004e1c <findin_list>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17a      	bne.n	80016e8 <Find_around_node+0x1a0>
					{
				uint16_t index = findin_queue(coordinateindex);
 80015f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fbe2 	bl	8004dc0 <findin_queue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001602:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001606:	85bb      	strh	r3, [r7, #44]	; 0x2c
				newnode.fatherindex = currentindex;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	86fb      	strh	r3, [r7, #54]	; 0x36
				newnode.cost = openlist.buffer[currentindex].cost + step;
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <Find_around_node+0x2e8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800161e:	4623      	mov	r3, r4
 8001620:	461c      	mov	r4, r3
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff face 	bl	8000bd0 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800163a:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 800163e:	4623      	mov	r3, r4
 8001640:	461c      	mov	r4, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fef9 	bl	8001444 <cal_H>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb6f 	bl	8000d38 <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fab6 	bl	8000bd0 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	4970      	ldr	r1, [pc, #448]	; (8001830 <Find_around_node+0x2e8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff07 	bl	8001496 <dir>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <Find_around_node+0x17c>
						&& lastdir != 0)
 8001694:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <Find_around_node+0x17c>
					newnode.total += 10 * step;
 800169c:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80016a0:	4623      	mov	r3, r4
 80016a2:	461c      	mov	r4, r3
 80016a4:	793a      	ldrb	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb42 	bl	8000d38 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fa89 	bl	8000bd0 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (!index)	//not in open_list
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Find_around_node+0x190>
				{
					queue_append(&newnode);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fa9d 	bl	8004c10 <queue_append>
 80016d6:	e007      	b.n	80016e8 <Find_around_node+0x1a0>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 80016d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fbc0 	bl	8004e68 <editcost>
				}
			}
		}
	}
	// right
	if (x <= 255 - step) {
 80016e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f300 80a6 	bgt.w	8001844 <Find_around_node+0x2fc>
		uint16_t curx = x + step;
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001700:	4413      	add	r3, r2
 8001702:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t cury = y;
 8001706:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800170a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t coordinateindex = curx * 256 + cury;
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800171a:	4413      	add	r3, r2
 800171c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Find_crash(coordinateindex, obstacleflag)) {
 8001720:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd64 	bl	80011f8 <Find_crash>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8086 	beq.w	8001844 <Find_around_node+0x2fc>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fb6d 	bl	8004e1c <findin_list>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <Find_around_node+0x2fc>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fb37 	bl	8004dc0 <findin_queue>
 8001752:	4603      	mov	r3, r0
 8001754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001758:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175c:	843b      	strh	r3, [r7, #32]
				newnode.fatherindex = currentindex;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4932      	ldr	r1, [pc, #200]	; (8001830 <Find_around_node+0x2e8>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001774:	4623      	mov	r3, r4
 8001776:	461c      	mov	r4, r3
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fadc 	bl	8000d38 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fa23 	bl	8000bd0 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001790:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 8001794:	4623      	mov	r3, r4
 8001796:	461c      	mov	r4, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe4e 	bl	8001444 <cal_H>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fac4 	bl	8000d38 <__aeabi_i2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa0b 	bl	8000bd0 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Find_around_node+0x2e8>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5c 	bl	8001496 <dir>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d017      	beq.n	800181a <Find_around_node+0x2d2>
						&& lastdir != 0)
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <Find_around_node+0x2d2>
					newnode.total += 10 * step;
 80017f2:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 80017f6:	4623      	mov	r3, r4
 80017f8:	461c      	mov	r4, r3
 80017fa:	793a      	ldrb	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa97 	bl	8000d38 <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f9de 	bl	8000bd0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (!index)	//not in open_list
 800181a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <Find_around_node+0x2ec>
				{
					queue_append(&newnode);
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f003 f9f2 	bl	8004c10 <queue_append>
 800182c:	e00a      	b.n	8001844 <Find_around_node+0x2fc>
 800182e:	bf00      	nop
 8001830:	20000c48 	.word	0x20000c48
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fb12 	bl	8004e68 <editcost>
				}
			}
		}
	}
	// up
	if (y >= step) {
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800184c:	429a      	cmp	r2, r3
 800184e:	f0c0 80a3 	bcc.w	8001998 <Find_around_node+0x450>
		uint16_t curx = x;
 8001852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t cury = y - step;
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t coordinateindex = curx * 256 + cury;
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	4413      	add	r3, r2
 8001876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (Find_crash(coordinateindex, obstacleflag)) {
 800187a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800187e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcb7 	bl	80011f8 <Find_crash>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8083 	beq.w	8001998 <Find_around_node+0x450>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fac0 	bl	8004e1c <findin_list>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d17a      	bne.n	8001998 <Find_around_node+0x450>
					{
				uint16_t index = findin_queue(coordinateindex);
 80018a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fa8a 	bl	8004dc0 <findin_queue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80018b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018b6:	82bb      	strh	r3, [r7, #20]
				newnode.fatherindex = currentindex;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	83fb      	strh	r3, [r7, #30]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	4987      	ldr	r1, [pc, #540]	; (8001adc <Find_around_node+0x594>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80018ce:	4623      	mov	r3, r4
 80018d0:	461c      	mov	r4, r3
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa2f 	bl	8000d38 <__aeabi_i2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f976 	bl	8000bd0 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3016 	str.w	r3, [r7, #22]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 80018ea:	f8d7 4016 	ldr.w	r4, [r7, #22]
 80018ee:	4623      	mov	r3, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fda1 	bl	8001444 <cal_H>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa17 	bl	8000d38 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f95e 	bl	8000bd0 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 301a 	str.w	r3, [r7, #26]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <Find_around_node+0x594>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <dir>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <Find_around_node+0x42c>
						&& lastdir != 0)
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <Find_around_node+0x42c>
					newnode.total += 10 * step;
 800194c:	f8d7 401a 	ldr.w	r4, [r7, #26]
 8001950:	4623      	mov	r3, r4
 8001952:	461c      	mov	r4, r3
 8001954:	793a      	ldrb	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f931 	bl	8000bd0 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 301a 	str.w	r3, [r7, #26]
				if (!index)	//not in open_list
 8001974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <Find_around_node+0x440>
				{
					queue_append(&newnode);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f003 f945 	bl	8004c10 <queue_append>
 8001986:	e007      	b.n	8001998 <Find_around_node+0x450>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fa68 	bl	8004e68 <editcost>
				}
			}
		}
	}
	// down
	if (y <= 255 - step) {
 8001998:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f300 8096 	bgt.w	8001ad4 <Find_around_node+0x58c>
		uint16_t curx = x;
 80019a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t cury = y + step;
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b8:	4413      	add	r3, r2
 80019ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t coordinateindex = curx * 256 + cury;
 80019bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019c6:	4413      	add	r3, r2
 80019c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (Find_crash(coordinateindex, obstacleflag)) {
 80019ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc10 	bl	80011f8 <Find_crash>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07a      	beq.n	8001ad4 <Find_around_node+0x58c>
			//not in close_list
			if (!findin_list(coordinateindex))
 80019de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fa1b 	bl	8004e1c <findin_list>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d173      	bne.n	8001ad4 <Find_around_node+0x58c>
					{
				uint16_t index = findin_queue(coordinateindex);
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f9e6 	bl	8004dc0 <findin_queue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	877b      	strh	r3, [r7, #58]	; 0x3a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80019f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fa:	813b      	strh	r3, [r7, #8]
				newnode.fatherindex = currentindex;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	827b      	strh	r3, [r7, #18]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <Find_around_node+0x594>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001a12:	4623      	mov	r3, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98d 	bl	8000d38 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8d4 	bl	8000bd0 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 300a 	str.w	r3, [r7, #10]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001a2e:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001a32:	4623      	mov	r3, r4
 8001a34:	461c      	mov	r4, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd00 	bl	8001444 <cal_H>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f976 	bl	8000d38 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f8bd 	bl	8000bd0 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 300e 	str.w	r3, [r7, #14]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <Find_around_node+0x594>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd0f 	bl	8001496 <dir>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d017      	beq.n	8001ab4 <Find_around_node+0x56c>
						&& lastdir != 0)
 8001a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <Find_around_node+0x56c>
					newnode.total += 10 * step;
 8001a8c:	f8d7 400e 	ldr.w	r4, [r7, #14]
 8001a90:	4623      	mov	r3, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	793a      	ldrb	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f94a 	bl	8000d38 <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f891 	bl	8000bd0 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 300e 	str.w	r3, [r7, #14]
				if (!index)	//not in open_list
 8001ab4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <Find_around_node+0x57e>
				{
					queue_append(&newnode);
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f8a6 	bl	8004c10 <queue_append>
					editcost(index, &newnode);
				}
			}
		}
	}
}
 8001ac4:	e006      	b.n	8001ad4 <Find_around_node+0x58c>
					editcost(index, &newnode);
 8001ac6:	f107 0208 	add.w	r2, r7, #8
 8001aca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f9ca 	bl	8004e68 <editcost>
}
 8001ad4:	bf00      	nop
 8001ad6:	3764      	adds	r7, #100	; 0x64
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000c48 	.word	0x20000c48

08001ae0 <A_Star_main>:

uint8_t A_Star_main(Coordinate *start, Coordinate *last, uint8_t step) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
	A_Star_Node begin;
	A_Star_Node end;
	begin.cor = (start->x) * 256 + start->y;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	end.cor = (last->x) * 256 + last->y;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	begin.cost = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
	begin.total = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
	begin.fatherindex = 65535;
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	queue_append(&begin);
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 f864 	bl	8004c10 <queue_append>
	uint16_t curindex = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t Flag = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int8_t lastdir = 0;     		// left:-step up:-2*step right:step down:2*step
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (1) {
		curindex = queue_top();
 8001b5a:	f003 f911 	bl	8004d80 <queue_top>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (curindex == 65535)
 8001b64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <A_Star_main+0x94>
			return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e148      	b.n	8001e06 <A_Star_main+0x326>
		if (openlist.buffer[curindex].fatherindex != 65535) {
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b78:	49a5      	ldr	r1, [pc, #660]	; (8001e10 <A_Star_main+0x330>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330e      	adds	r3, #14
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <A_Star_main+0xf6>
			lastdir = dir(openlist.buffer[openlist.buffer[curindex].fatherindex].cor,
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b94:	499e      	ldr	r1, [pc, #632]	; (8001e10 <A_Star_main+0x330>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <A_Star_main+0x330>)
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4995      	ldr	r1, [pc, #596]	; (8001e10 <A_Star_main+0x330>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fc63 	bl	8001496 <dir>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					openlist.buffer[curindex].cor);
		}
		list_append(openlist.buffer[curindex].cor);
 8001bd6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bda:	498d      	ldr	r1, [pc, #564]	; (8001e10 <A_Star_main+0x330>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f89a 	bl	8004d24 <list_append>
		if(findend(openlist.buffer[curindex].cor, end.cor, step))
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4986      	ldr	r1, [pc, #536]	; (8001e10 <A_Star_main+0x330>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc6b 	bl	80014e6 <findend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <A_Star_main+0x17c>
		{
			Flag = curindex;
 8001c16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			break;
 8001c1e:	bf00      	nop
		Find_around_node(curindex, lastdir, &end, step);
	}

	//we now get the path
	Coordinate Astar_path[16];
	Astar_path[15].x = last->x;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Astar_path[15].y = last->y;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t i = 14;
 8001c34:	230e      	movs	r3, #14
 8001c36:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	A_Star_Node *p = &openlist.buffer[Flag];
 8001c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <A_Star_main+0x330>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
	if (p->cor != end.cor) {
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d027      	beq.n	8001caa <A_Star_main+0x1ca>
 8001c5a:	e009      	b.n	8001c70 <A_Star_main+0x190>
		Find_around_node(curindex, lastdir, &end, step);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001c66:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001c6a:	f7ff fc6d 	bl	8001548 <Find_around_node>
		curindex = queue_top();
 8001c6e:	e774      	b.n	8001b5a <A_Star_main+0x7a>
		Astar_path[i].x = p->cor / 256;
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3378      	adds	r3, #120	; 0x78
 8001c82:	443b      	add	r3, r7
 8001c84:	f823 2c68 	strh.w	r2, [r3, #-104]
		Astar_path[i].y = p->cor % 256;
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	b212      	sxth	r2, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3378      	adds	r3, #120	; 0x78
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f823 2c66 	strh.w	r2, [r3, #-102]
		i--;
 8001ca0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	if (p->fatherindex != 65535)
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d07a      	beq.n	8001dac <A_Star_main+0x2cc>
		lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <A_Star_main+0x330>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fbdf 	bl	8001496 <dir>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (p->fatherindex != 65535) {
 8001cde:	e065      	b.n	8001dac <A_Star_main+0x2cc>
		if (lastdir != dir(openlist.buffer[p->fatherindex].cor, p->cor))
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	895b      	ldrh	r3, [r3, #10]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <A_Star_main+0x330>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fbca 	bl	8001496 <dir>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d043      	beq.n	8001d96 <A_Star_main+0x2b6>
		{
			Astar_path[i].x = p->cor / 256;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3378      	adds	r3, #120	; 0x78
 8001d20:	443b      	add	r3, r7
 8001d22:	f823 2c68 	strh.w	r2, [r3, #-104]
			Astar_path[i].y = p->cor % 256;
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	b212      	sxth	r2, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3378      	adds	r3, #120	; 0x78
 8001d38:	443b      	add	r3, r7
 8001d3a:	f823 2c66 	strh.w	r2, [r3, #-102]
			if (i == 1) {
 8001d3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <A_Star_main+0x284>
				i = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				p = &(openlist.buffer[p->fatherindex]);
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <A_Star_main+0x330>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001d62:	e029      	b.n	8001db8 <A_Star_main+0x2d8>
			}
			i = i - 1;
 8001d64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <A_Star_main+0x330>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fb83 	bl	8001496 <dir>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		p = &(openlist.buffer[p->fatherindex]);
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <A_Star_main+0x330>)
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
	while (p->fatherindex != 65535) {
 8001dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dae:	895b      	ldrh	r3, [r3, #10]
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d193      	bne.n	8001ce0 <A_Star_main+0x200>
	}
	Astar_path[i].x = p->cor / 256;
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3378      	adds	r3, #120	; 0x78
 8001dca:	443b      	add	r3, r7
 8001dcc:	f823 2c68 	strh.w	r2, [r3, #-104]
	Astar_path[i].y = p->cor % 256;
 8001dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	b212      	sxth	r2, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3378      	adds	r3, #120	; 0x78
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c66 	strh.w	r2, [r3, #-102]

	Lane_init();
 8001de8:	f002 ff04 	bl	8004bf4 <Lane_init>
	uint8_t Laneis_OK = Insert_inLane(&Astar_path[0], i);
 8001dec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f880 	bl	8004efc <Insert_inLane>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	return Laneis_OK;
 8001e02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3778      	adds	r7, #120	; 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000c48 	.word	0x20000c48
 8001e14:	00000000 	.word	0x00000000

08001e18 <chao_move_angle>:
	straightPath->end = *end;
	return straightPath;
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 8001e24:	4984      	ldr	r1, [pc, #528]	; (8002038 <chao_move_angle+0x220>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f88e 	bl	8000f48 <__aeabi_fdiv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb5e 	bl	80004f0 <__aeabi_f2d>
 8001e34:	a37e      	add	r3, pc, #504	; (adr r3, 8002030 <chao_move_angle+0x218>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbb1 	bl	80005a0 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe6d 	bl	8000b24 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe fb4e 	bl	80004f0 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb49 	bl	80004f0 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f00a f991 	bl	800c18c <cos>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb36 	bl	80004f0 <__aeabi_f2d>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fb31 	bl	80004f0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f00a f9c3 	bl	800c220 <sin>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fb7d 	bl	80005a0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe f9c1 	bl	8000234 <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe33 	bl	8000b24 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <chao_move_angle+0x224>)
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7fe fb13 	bl	80004f0 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb0e 	bl	80004f0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f00a f956 	bl	800c18c <cos>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb5a 	bl	80005a0 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fafb 	bl	80004f0 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe faf6 	bl	80004f0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f00a f988 	bl	800c220 <sin>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb42 	bl	80005a0 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4640      	mov	r0, r8
 8001f22:	4649      	mov	r1, r9
 8001f24:	f7fe f984 	bl	8000230 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdf8 	bl	8000b24 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <chao_move_angle+0x228>)
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe fad8 	bl	80004f0 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fad3 	bl	80004f0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f00a f91b 	bl	800c18c <cos>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fb1f 	bl	80005a0 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fac0 	bl	80004f0 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7fe fabb 	bl	80004f0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f00a f94d 	bl	800c220 <sin>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb07 	bl	80005a0 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe f949 	bl	8000230 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbd 	bl	8000b24 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <chao_move_angle+0x22c>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f7fe fa9d 	bl	80004f0 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fa98 	bl	80004f0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f00a f8e0 	bl	800c18c <cos>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fae4 	bl	80005a0 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe fa85 	bl	80004f0 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fa80 	bl	80004f0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f00a f912 	bl	800c220 <sin>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe facc 	bl	80005a0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f910 	bl	8000234 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd82 	bl	8000b24 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <chao_move_angle+0x230>)
 8002024:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002030:	54442d18 	.word	0x54442d18
 8002034:	400921fb 	.word	0x400921fb
 8002038:	43340000 	.word	0x43340000
 800203c:	200009a0 	.word	0x200009a0
 8002040:	200009dc 	.word	0x200009dc
 8002044:	20000a18 	.word	0x20000a18
 8002048:	20000a54 	.word	0x20000a54
 800204c:	00000000 	.word	0x00000000

08002050 <move_angle_omega>:

void move_angle_omega(float _angle, float speed){
 8002050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
	float omega = _angle <= 180 ? _angle: (_angle - 360);
 800205c:	49c2      	ldr	r1, [pc, #776]	; (8002368 <move_angle_omega+0x318>)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff f866 	bl	8001130 <__aeabi_fcmple>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <move_angle_omega+0x1e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	e004      	b.n	8002078 <move_angle_omega+0x28>
 800206e:	49bf      	ldr	r1, [pc, #764]	; (800236c <move_angle_omega+0x31c>)
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7fe fdab 	bl	8000bcc <__aeabi_fsub>
 8002076:	4603      	mov	r3, r0
 8002078:	60fb      	str	r3, [r7, #12]
	if(abs(omega) < 15)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff f876 	bl	800116c <__aeabi_f2iz>
 8002080:	4603      	mov	r3, r0
 8002082:	f113 0f0e 	cmn.w	r3, #14
 8002086:	db09      	blt.n	800209c <move_angle_omega+0x4c>
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff f86f 	bl	800116c <__aeabi_f2iz>
 800208e:	4603      	mov	r3, r0
 8002090:	2b0e      	cmp	r3, #14
 8002092:	dc03      	bgt.n	800209c <move_angle_omega+0x4c>
		omega = 0;
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e00f      	b.n	80020bc <move_angle_omega+0x6c>
	else
		omega = 0.4 * omega;
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7fe fa27 	bl	80004f0 <__aeabi_f2d>
 80020a2:	a3ad      	add	r3, pc, #692	; (adr r3, 8002358 <move_angle_omega+0x308>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fa7a 	bl	80005a0 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fd36 	bl	8000b24 <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
	float angle_arc = (_angle / 180) * M_PI;
 80020bc:	49aa      	ldr	r1, [pc, #680]	; (8002368 <move_angle_omega+0x318>)
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe ff42 	bl	8000f48 <__aeabi_fdiv>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa12 	bl	80004f0 <__aeabi_f2d>
 80020cc:	a3a4      	add	r3, pc, #656	; (adr r3, 8002360 <move_angle_omega+0x310>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fa65 	bl	80005a0 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd21 	bl	8000b24 <__aeabi_d2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	60bb      	str	r3, [r7, #8]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc) - omega * HALFLENGTH;
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f7fe fa02 	bl	80004f0 <__aeabi_f2d>
 80020ec:	4604      	mov	r4, r0
 80020ee:	460d      	mov	r5, r1
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	f7fe f9fd 	bl	80004f0 <__aeabi_f2d>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f00a f845 	bl	800c18c <cos>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe fa49 	bl	80005a0 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4690      	mov	r8, r2
 8002114:	4699      	mov	r9, r3
 8002116:	6838      	ldr	r0, [r7, #0]
 8002118:	f7fe f9ea 	bl	80004f0 <__aeabi_f2d>
 800211c:	4604      	mov	r4, r0
 800211e:	460d      	mov	r5, r1
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f7fe f9e5 	bl	80004f0 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f00a f877 	bl	800c220 <sin>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe fa31 	bl	80005a0 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4640      	mov	r0, r8
 8002144:	4649      	mov	r1, r9
 8002146:	f7fe f875 	bl	8000234 <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4614      	mov	r4, r2
 8002150:	461d      	mov	r5, r3
 8002152:	4987      	ldr	r1, [pc, #540]	; (8002370 <move_angle_omega+0x320>)
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7fe fe43 	bl	8000de0 <__aeabi_fmul>
 800215a:	4603      	mov	r3, r0
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f9c7 	bl	80004f0 <__aeabi_f2d>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f7fe f861 	bl	8000230 <__aeabi_dsub>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fcd5 	bl	8000b24 <__aeabi_d2f>
 800217a:	4603      	mov	r3, r0
 800217c:	4a7d      	ldr	r2, [pc, #500]	; (8002374 <move_angle_omega+0x324>)
 800217e:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc) + omega * HALFLENGTH;
 8002180:	6838      	ldr	r0, [r7, #0]
 8002182:	f7fe f9b5 	bl	80004f0 <__aeabi_f2d>
 8002186:	4604      	mov	r4, r0
 8002188:	460d      	mov	r5, r1
 800218a:	68b8      	ldr	r0, [r7, #8]
 800218c:	f7fe f9b0 	bl	80004f0 <__aeabi_f2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f009 fff8 	bl	800c18c <cos>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe f9fc 	bl	80005a0 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4690      	mov	r8, r2
 80021ae:	4699      	mov	r9, r3
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f7fe f99d 	bl	80004f0 <__aeabi_f2d>
 80021b6:	4604      	mov	r4, r0
 80021b8:	460d      	mov	r5, r1
 80021ba:	68b8      	ldr	r0, [r7, #8]
 80021bc:	f7fe f998 	bl	80004f0 <__aeabi_f2d>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f00a f82a 	bl	800c220 <sin>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe f9e4 	bl	80005a0 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4640      	mov	r0, r8
 80021de:	4649      	mov	r1, r9
 80021e0:	f7fe f826 	bl	8000230 <__aeabi_dsub>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4614      	mov	r4, r2
 80021ea:	461d      	mov	r5, r3
 80021ec:	4960      	ldr	r1, [pc, #384]	; (8002370 <move_angle_omega+0x320>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7fe fdf6 	bl	8000de0 <__aeabi_fmul>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f97a 	bl	80004f0 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4620      	mov	r0, r4
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe f816 	bl	8000234 <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f7fe fc88 	bl	8000b24 <__aeabi_d2f>
 8002214:	4603      	mov	r3, r0
 8002216:	4a58      	ldr	r2, [pc, #352]	; (8002378 <move_angle_omega+0x328>)
 8002218:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc) - omega * HALFLENGTH;
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f7fe f968 	bl	80004f0 <__aeabi_f2d>
 8002220:	4604      	mov	r4, r0
 8002222:	460d      	mov	r5, r1
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	f7fe f963 	bl	80004f0 <__aeabi_f2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f009 ffab 	bl	800c18c <cos>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4620      	mov	r0, r4
 800223c:	4629      	mov	r1, r5
 800223e:	f7fe f9af 	bl	80005a0 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4690      	mov	r8, r2
 8002248:	4699      	mov	r9, r3
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	f7fe f950 	bl	80004f0 <__aeabi_f2d>
 8002250:	4604      	mov	r4, r0
 8002252:	460d      	mov	r5, r1
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f7fe f94b 	bl	80004f0 <__aeabi_f2d>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f009 ffdd 	bl	800c220 <sin>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4620      	mov	r0, r4
 800226c:	4629      	mov	r1, r5
 800226e:	f7fe f997 	bl	80005a0 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4640      	mov	r0, r8
 8002278:	4649      	mov	r1, r9
 800227a:	f7fd ffd9 	bl	8000230 <__aeabi_dsub>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	493a      	ldr	r1, [pc, #232]	; (8002370 <move_angle_omega+0x320>)
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7fe fda9 	bl	8000de0 <__aeabi_fmul>
 800228e:	4603      	mov	r3, r0
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f92d 	bl	80004f0 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fd ffc7 	bl	8000230 <__aeabi_dsub>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc3b 	bl	8000b24 <__aeabi_d2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a32      	ldr	r2, [pc, #200]	; (800237c <move_angle_omega+0x32c>)
 80022b2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc) + omega * HALFLENGTH;
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f7fe f91b 	bl	80004f0 <__aeabi_f2d>
 80022ba:	4604      	mov	r4, r0
 80022bc:	460d      	mov	r5, r1
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f7fe f916 	bl	80004f0 <__aeabi_f2d>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f009 ff5e 	bl	800c18c <cos>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fe f962 	bl	80005a0 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4690      	mov	r8, r2
 80022e2:	4699      	mov	r9, r3
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f7fe f903 	bl	80004f0 <__aeabi_f2d>
 80022ea:	4604      	mov	r4, r0
 80022ec:	460d      	mov	r5, r1
 80022ee:	68b8      	ldr	r0, [r7, #8]
 80022f0:	f7fe f8fe 	bl	80004f0 <__aeabi_f2d>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f009 ff90 	bl	800c220 <sin>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fe f94a 	bl	80005a0 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4640      	mov	r0, r8
 8002312:	4649      	mov	r1, r9
 8002314:	f7fd ff8e 	bl	8000234 <__adddf3>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4913      	ldr	r1, [pc, #76]	; (8002370 <move_angle_omega+0x320>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7fe fd5c 	bl	8000de0 <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f8e0 	bl	80004f0 <__aeabi_f2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fd ff7c 	bl	8000234 <__adddf3>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fbee 	bl	8000b24 <__aeabi_d2f>
 8002348:	4603      	mov	r3, r0
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <move_angle_omega+0x330>)
 800234c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fd99999 	.word	0x3fd99999
 8002360:	54442d18 	.word	0x54442d18
 8002364:	400921fb 	.word	0x400921fb
 8002368:	43340000 	.word	0x43340000
 800236c:	43b40000 	.word	0x43b40000
 8002370:	41600000 	.word	0x41600000
 8002374:	200009a0 	.word	0x200009a0
 8002378:	200009dc 	.word	0x200009dc
 800237c:	20000a18 	.word	0x20000a18
 8002380:	20000a54 	.word	0x20000a54

08002384 <mingyan_pathfind_avoidObstacle>:


uint8_t mingyan_pathfind_avoidObstacle(Coordinate *start, Coordinate *end) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	return A_Star_main(start, end, 5);
 800238e:	2205      	movs	r2, #5
 8002390:	6839      	ldr	r1, [r7, #0]
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fba4 	bl	8001ae0 <A_Star_main>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <huansic_jy62_init+0x12>
		return IMU_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e026      	b.n	8002404 <huansic_jy62_init+0x60>

	if (!himu->huart)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e020      	b.n	8002404 <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 80023c2:	2003      	movs	r0, #3
 80023c4:	f004 fb92 	bl	8006aec <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	230a      	movs	r3, #10
 80023ce:	2203      	movs	r2, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <huansic_jy62_init+0x68>)
 80023d2:	f007 fd07 	bl	8009de4 <HAL_UART_Transmit>

	// instead, just use DMA
	himu->pending_alignment = 0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3334      	adds	r3, #52	; 0x34
 80023e6:	2221      	movs	r2, #33	; 0x21
 80023e8:	4619      	mov	r1, r3
 80023ea:	f007 fdbd 	bl	8009f68 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0204 	bic.w	r2, r2, #4
 8002400:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000000 	.word	0x20000000

08002410 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	if (!himu)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e112      	b.n	8002648 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	2300      	movs	r3, #0
 8002428:	73bb      	strb	r3, [r7, #14]
 800242a:	e0ed      	b.n	8002608 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800242c:	7bbb      	ldrb	r3, [r7, #14]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002436:	2b55      	cmp	r3, #85	; 0x55
 8002438:	d01c      	beq.n	8002474 <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3334      	adds	r3, #52	; 0x34
 800244a:	2201      	movs	r2, #1
 800244c:	4619      	mov	r1, r3
 800244e:	f007 fd5b 	bl	8009f08 <HAL_UART_Receive_IT>
			if (i) {
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3b01      	subs	r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa69 	bl	8002938 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8002466:	f004 fb37 	bl	8006ad8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8002470:	2305      	movs	r3, #5
 8002472:	e0e9      	b.n	8002648 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800247e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	4413      	add	r3, r2
 8002490:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	3302      	adds	r3, #2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800249e:	7b7b      	ldrb	r3, [r7, #13]
 80024a0:	4413      	add	r3, r2
 80024a2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	3303      	adds	r3, #3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80024b0:	7b7b      	ldrb	r3, [r7, #13]
 80024b2:	4413      	add	r3, r2
 80024b4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 80024b6:	7bbb      	ldrb	r3, [r7, #14]
 80024b8:	3304      	adds	r3, #4
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80024c2:	7b7b      	ldrb	r3, [r7, #13]
 80024c4:	4413      	add	r3, r2
 80024c6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	3305      	adds	r3, #5
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80024d4:	7b7b      	ldrb	r3, [r7, #13]
 80024d6:	4413      	add	r3, r2
 80024d8:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	3306      	adds	r3, #6
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80024e6:	7b7b      	ldrb	r3, [r7, #13]
 80024e8:	4413      	add	r3, r2
 80024ea:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	3307      	adds	r3, #7
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	4413      	add	r3, r2
 80024fc:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80024fe:	7bbb      	ldrb	r3, [r7, #14]
 8002500:	3308      	adds	r3, #8
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800250a:	7b7b      	ldrb	r3, [r7, #13]
 800250c:	4413      	add	r3, r2
 800250e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 8002510:	7bbb      	ldrb	r3, [r7, #14]
 8002512:	3309      	adds	r3, #9
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800251c:	7b7b      	ldrb	r3, [r7, #13]
 800251e:	4413      	add	r3, r2
 8002520:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 8002522:	7bbb      	ldrb	r3, [r7, #14]
 8002524:	330a      	adds	r3, #10
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800252e:	7b7a      	ldrb	r2, [r7, #13]
 8002530:	429a      	cmp	r2, r3
 8002532:	d01c      	beq.n	800256e <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3334      	adds	r3, #52	; 0x34
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	f007 fcde 	bl	8009f08 <HAL_UART_Receive_IT>
				if (i) {
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3b01      	subs	r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9ec 	bl	8002938 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8002560:	f004 faba 	bl	8006ad8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 800256a:	2304      	movs	r3, #4
 800256c:	e06c      	b.n	8002648 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	3301      	adds	r3, #1
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800257a:	2b51      	cmp	r3, #81	; 0x51
 800257c:	d105      	bne.n	800258a <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8c4 	bl	8002710 <__huansic_jy62_decode_accel>
 8002588:	e038      	b.n	80025fc <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	3301      	adds	r3, #1
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002596:	2b52      	cmp	r3, #82	; 0x52
 8002598:	d105      	bne.n	80025a6 <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	4619      	mov	r1, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f920 	bl	80027e4 <__huansic_jy62_decode_omega>
 80025a4:	e02a      	b.n	80025fc <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	3301      	adds	r3, #1
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025b2:	2b53      	cmp	r3, #83	; 0x53
 80025b4:	d105      	bne.n	80025c2 <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f966 	bl	800288c <__huansic_jy62_decode_theta>
 80025c0:	e01c      	b.n	80025fc <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3334      	adds	r3, #52	; 0x34
 80025d2:	2201      	movs	r2, #1
 80025d4:	4619      	mov	r1, r3
 80025d6:	f007 fc97 	bl	8009f08 <HAL_UART_Receive_IT>
				if (i) {
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f9a5 	bl	8002938 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80025ee:	f004 fa73 	bl	8006ad8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80025f8:	2306      	movs	r3, #6
 80025fa:	e025      	b.n	8002648 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	330b      	adds	r3, #11
 8002606:	73bb      	strb	r3, [r7, #14]
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b02      	cmp	r3, #2
 800260c:	f67f af0e 	bls.w	800242c <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 8002610:	f004 fa62 	bl	8006ad8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 800261a:	2102      	movs	r1, #2
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f98b 	bl	8002938 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3334      	adds	r3, #52	; 0x34
 800262a:	2221      	movs	r2, #33	; 0x21
 800262c:	4619      	mov	r1, r3
 800262e:	f007 fc9b 	bl	8009f68 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0204 	bic.w	r2, r2, #4
 8002644:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	if (!himu)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e029      	b.n	80026b6 <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002668:	2b55      	cmp	r3, #85	; 0x55
 800266a:	d00d      	beq.n	8002688 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3334      	adds	r3, #52	; 0x34
 800267c:	2201      	movs	r2, #1
 800267e:	4619      	mov	r1, r3
 8002680:	f007 fc42 	bl	8009f08 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8002684:	2305      	movs	r3, #5
 8002686:	e016      	b.n	80026b6 <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3335      	adds	r3, #53	; 0x35
 8002698:	2220      	movs	r2, #32
 800269a:	4619      	mov	r1, r3
 800269c:	f007 fc64 	bl	8009f68 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 80026b4:	2300      	movs	r3, #0
	}
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3334      	adds	r3, #52	; 0x34
 80026d6:	2201      	movs	r2, #1
 80026d8:	4619      	mov	r1, r3
 80026da:	f007 fc15 	bl	8009f08 <HAL_UART_Receive_IT>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3334      	adds	r3, #52	; 0x34
 80026fe:	2201      	movs	r2, #1
 8002700:	4619      	mov	r1, r3
 8002702:	f007 fc01 	bl	8009f08 <HAL_UART_Receive_IT>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e050      	b.n	80027c4 <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	1cd9      	adds	r1, r3, #3
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	440b      	add	r3, r1
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800273e:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002740:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	0059      	lsls	r1, r3, #1
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	440b      	add	r3, r1
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002764:	b21a      	sxth	r2, r3
 8002766:	89bb      	ldrh	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 800276c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fae1 	bl	8000d38 <__aeabi_i2f>
 8002776:	4603      	mov	r3, r0
 8002778:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fb2f 	bl	8000de0 <__aeabi_fmul>
 8002782:	4603      	mov	r3, r0
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd feb3 	bl	80004f0 <__aeabi_f2d>
 800278a:	a313      	add	r3, pc, #76	; (adr r3, 80027d8 <__huansic_jy62_decode_accel+0xc8>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd ff06 	bl	80005a0 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <__huansic_jy62_decode_accel+0xd0>)
 80027a2:	f7fe f827 	bl	80007f4 <__aeabi_ddiv>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	7bfc      	ldrb	r4, [r7, #15]
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f9b8 	bl	8000b24 <__aeabi_d2f>
 80027b4:	4601      	mov	r1, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ca2      	adds	r2, r4, #2
 80027ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3301      	adds	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d9ab      	bls.n	8002722 <__huansic_jy62_decode_accel+0x12>
	}
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	f3af 8000 	nop.w
 80027d8:	9999999a 	.word	0x9999999a
 80027dc:	40239999 	.word	0x40239999
 80027e0:	40e00000 	.word	0x40e00000

080027e4 <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e03f      	b.n	8002876 <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	1cd9      	adds	r1, r3, #3
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	440b      	add	r3, r1
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002812:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	3301      	adds	r3, #1
 8002820:	0059      	lsls	r1, r3, #1
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	440b      	add	r3, r1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002838:	b21a      	sxth	r2, r3
 800283a:	89bb      	ldrh	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8002840:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fa77 	bl	8000d38 <__aeabi_i2f>
 800284a:	4603      	mov	r3, r0
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <__huansic_jy62_decode_omega+0xa4>)
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fac6 	bl	8000de0 <__aeabi_fmul>
 8002854:	4603      	mov	r3, r0
 8002856:	7bfc      	ldrb	r4, [r7, #15]
 8002858:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fb73 	bl	8000f48 <__aeabi_fdiv>
 8002862:	4603      	mov	r3, r0
 8002864:	4619      	mov	r1, r3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	1d23      	adds	r3, r4, #4
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	3301      	adds	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d9bc      	bls.n	80027f6 <__huansic_jy62_decode_omega+0x12>
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	44fa0000 	.word	0x44fa0000

0800288c <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e03f      	b.n	800291e <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	1cd9      	adds	r1, r3, #3
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ba:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80028bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	0059      	lsls	r1, r3, #1
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	89bb      	ldrh	r3, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 80028e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fa23 	bl	8000d38 <__aeabi_i2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <__huansic_jy62_decode_theta+0xa4>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fa72 	bl	8000de0 <__aeabi_fmul>
 80028fc:	4603      	mov	r3, r0
 80028fe:	7bfc      	ldrb	r4, [r7, #15]
 8002900:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fb1f 	bl	8000f48 <__aeabi_fdiv>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f104 0208 	add.w	r2, r4, #8
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3301      	adds	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d9bc      	bls.n	800289e <__huansic_jy62_decode_theta+0x12>
	}
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	43340000 	.word	0x43340000
 8002934:	00000000 	.word	0x00000000

08002938 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	3308      	adds	r3, #8
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800295a:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 800295c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	3309      	adds	r3, #9
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297a:	b21a      	sxth	r2, r3
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	4313      	orrs	r3, r2
 8002980:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 8002982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f9d6 	bl	8000d38 <__aeabi_i2f>
 800298c:	4603      	mov	r3, r0
 800298e:	4910      	ldr	r1, [pc, #64]	; (80029d0 <__huansic_jy62_decode_temp+0x98>)
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fad9 	bl	8000f48 <__aeabi_fdiv>
 8002996:	4603      	mov	r3, r0
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fda9 	bl	80004f0 <__aeabi_f2d>
 800299e:	a30a      	add	r3, pc, #40	; (adr r3, 80029c8 <__huansic_jy62_decode_temp+0x90>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fc46 	bl	8000234 <__adddf3>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f8b8 	bl	8000b24 <__aeabi_d2f>
 80029b4:	4602      	mov	r2, r0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	f3af 8000 	nop.w
 80029c8:	0a3d70a4 	.word	0x0a3d70a4
 80029cc:	404243d7 	.word	0x404243d7
 80029d0:	43aa0000 	.word	0x43aa0000

080029d4 <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <huansic_order_init>:
		newTail->nextPath = 0;
	}
	return retPath;
}

void huansic_order_init() {
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	71fb      	strb	r3, [r7, #7]
 80029f2:	e00d      	b.n	8002a10 <huansic_order_init+0x28>
		orderBuffers[i].id = -1;
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	4915      	ldr	r1, [pc, #84]	; (8002a4c <huansic_order_init+0x64>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3310      	adds	r3, #16
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	71fb      	strb	r3, [r7, #7]
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b3b      	cmp	r3, #59	; 0x3b
 8002a14:	d9ee      	bls.n	80029f4 <huansic_order_init+0xc>
	for (i = 0; i < 5; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	e00d      	b.n	8002a38 <huansic_order_init+0x50>
		delivering[i] = &orderBuffers[i];		// give it some default value
 8002a1c:	79fa      	ldrb	r2, [r7, #7]
 8002a1e:	79f9      	ldrb	r1, [r7, #7]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <huansic_order_init+0x64>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <huansic_order_init+0x68>)
 8002a2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (i = 0; i < 5; i++)
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	3301      	adds	r3, #1
 8002a36:	71fb      	strb	r3, [r7, #7]
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d9ee      	bls.n	8002a1c <huansic_order_init+0x34>
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200000a4 	.word	0x200000a4
 8002a50:	20000bf4 	.word	0x20000bf4

08002a54 <huansic_order_new>:

Order* huansic_order_new(int8_t id) {
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d101      	bne.n	8002a6c <huansic_order_new+0x18>
		return 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e046      	b.n	8002afa <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e017      	b.n	8002aa2 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	4923      	ldr	r1, [pc, #140]	; (8002b04 <huansic_order_new+0xb0>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3310      	adds	r3, #16
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d107      	bne.n	8002a9c <huansic_order_new+0x48>
			return &orderBuffers[i];
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <huansic_order_new+0xb0>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	e02e      	b.n	8002afa <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b3b      	cmp	r3, #59	; 0x3b
 8002aa6:	d9e4      	bls.n	8002a72 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e021      	b.n	8002af2 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	4914      	ldr	r1, [pc, #80]	; (8002b04 <huansic_order_new+0xb0>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3310      	adds	r3, #16
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d112      	bne.n	8002aec <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <huansic_order_new+0xb0>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4403      	add	r3, r0
 8002ad8:	3310      	adds	r3, #16
 8002ada:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <huansic_order_new+0xb0>)
 8002ae8:	4413      	add	r3, r2
 8002aea:	e006      	b.n	8002afa <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b3b      	cmp	r3, #59	; 0x3b
 8002af6:	d9da      	bls.n	8002aae <huansic_order_new+0x5a>
		}
	}

	return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	200000a4 	.word	0x200000a4

08002b08 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d103      	bne.n	8002b22 <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff5a 	bl	80029d4 <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 8002b20:	e003      	b.n	8002b2a <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	611a      	str	r2, [r3, #16]
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <huansic_motor_init+0x1c>
 8002b44:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <huansic_motor_init+0x168>)
 8002b46:	4a56      	ldr	r2, [pc, #344]	; (8002ca0 <huansic_motor_init+0x16c>)
 8002b48:	210c      	movs	r1, #12
 8002b4a:	4856      	ldr	r0, [pc, #344]	; (8002ca4 <huansic_motor_init+0x170>)
 8002b4c:	f007 ff8e 	bl	800aa6c <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <huansic_motor_init+0x30>
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <huansic_motor_init+0x174>)
 8002b5a:	4a51      	ldr	r2, [pc, #324]	; (8002ca0 <huansic_motor_init+0x16c>)
 8002b5c:	210d      	movs	r1, #13
 8002b5e:	4851      	ldr	r0, [pc, #324]	; (8002ca4 <huansic_motor_init+0x170>)
 8002b60:	f007 ff84 	bl	800aa6c <__assert_func>
	assert(hmotor->dt);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe facb 	bl	8001108 <__aeabi_fcmpeq>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <huansic_motor_init+0x50>
 8002b78:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <huansic_motor_init+0x178>)
 8002b7a:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <huansic_motor_init+0x16c>)
 8002b7c:	210e      	movs	r1, #14
 8002b7e:	4849      	ldr	r0, [pc, #292]	; (8002ca4 <huansic_motor_init+0x170>)
 8002b80:	f007 ff74 	bl	800aa6c <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bce:	e01c      	b.n	8002c0a <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d105      	bne.n	8002be4 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38
 8002be2:	e012      	b.n	8002c0a <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d105      	bne.n	8002bf8 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bf6:	e008      	b.n	8002c0a <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d104      	bne.n	8002c0a <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d026      	beq.n	8002c60 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34
 8002c24:	e01c      	b.n	8002c60 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d105      	bne.n	8002c3a <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
 8002c38:	e012      	b.n	8002c60 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d105      	bne.n	8002c4e <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c4c:	e008      	b.n	8002c60 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d104      	bne.n	8002c60 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	213c      	movs	r1, #60	; 0x3c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f006 f97a 	bl	8008f60 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f006 f816 	bl	8008ca8 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f006 f80a 	bl	8008ca8 <HAL_TIM_PWM_Start>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	0800d270 	.word	0x0800d270
 8002ca0:	0800d2e0 	.word	0x0800d2e0
 8002ca4:	0800d280 	.word	0x0800d280
 8002ca8:	0800d2a0 	.word	0x0800d2a0
 8002cac:	0800d2b4 	.word	0x0800d2b4

08002cb0 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	425b      	negs	r3, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8002cd4:	8afa      	ldrh	r2, [r7, #22]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 8002ce0:	8afa      	ldrh	r2, [r7, #22]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8002ce6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f824 	bl	8000d38 <__aeabi_i2f>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f7fe f925 	bl	8000f48 <__aeabi_fdiv>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fbf0 	bl	80004f0 <__aeabi_f2d>
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	4b93      	ldr	r3, [pc, #588]	; (8002f64 <huansic_motor_pid+0x2b4>)
 8002d16:	f7fd fc43 	bl	80005a0 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4614      	mov	r4, r2
 8002d20:	461d      	mov	r5, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fbe2 	bl	80004f0 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4620      	mov	r0, r4
 8002d32:	4629      	mov	r1, r5
 8002d34:	f7fd fa7e 	bl	8000234 <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <huansic_motor_pid+0x2b8>)
 8002d46:	f7fd fd55 	bl	80007f4 <__aeabi_ddiv>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd fee7 	bl	8000b24 <__aeabi_d2f>
 8002d56:	4602      	mov	r2, r0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f7fd ff2e 	bl	8000bcc <__aeabi_fsub>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4619      	mov	r1, r3
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7fd ff29 	bl	8000bcc <__aeabi_fsub>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7fd ff1f 	bl	8000bcc <__aeabi_fsub>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fd ff15 	bl	8000bd0 <__addsf3>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7fe f811 	bl	8000de0 <__aeabi_fmul>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7fe f807 	bl	8000de0 <__aeabi_fmul>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f7fd fefa 	bl	8000bd0 <__addsf3>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	6939      	ldr	r1, [r7, #16]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fffa 	bl	8000de0 <__aeabi_fmul>
 8002dec:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002dee:	4619      	mov	r1, r3
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7fd feed 	bl	8000bd0 <__addsf3>
 8002df6:	4603      	mov	r3, r0
 8002df8:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8002dfa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7fe f9aa 	bl	8001158 <__aeabi_fcmpgt>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <huansic_motor_pid+0x160>
 8002e0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e0e:	e009      	b.n	8002e24 <huansic_motor_pid+0x174>
 8002e10:	4956      	ldr	r1, [pc, #344]	; (8002f6c <huansic_motor_pid+0x2bc>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7fe f982 	bl	800111c <__aeabi_fcmplt>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <huansic_motor_pid+0x172>
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <huansic_motor_pid+0x2bc>)
 8002e20:	e000      	b.n	8002e24 <huansic_motor_pid+0x174>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7fe f994 	bl	8001158 <__aeabi_fcmpgt>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <huansic_motor_pid+0x1ba>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ff73 	bl	8000d30 <__aeabi_ui2f>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7fd ffc6 	bl	8000de0 <__aeabi_fmul>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f009 fa28 	bl	800c2ac <roundf>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe f9aa 	bl	80011b8 <__aeabi_f2uiz>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	e000      	b.n	8002e6c <huansic_motor_pid+0x1bc>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7fe f952 	bl	800111c <__aeabi_fcmplt>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d019      	beq.n	8002eb2 <huansic_motor_pid+0x202>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd ff4f 	bl	8000d30 <__aeabi_ui2f>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4619      	mov	r1, r3
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fd ffa2 	bl	8000de0 <__aeabi_fmul>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f009 fa04 	bl	800c2ac <roundf>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f986 	bl	80011b8 <__aeabi_f2uiz>
 8002eac:	4603      	mov	r3, r0
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	e000      	b.n	8002eb4 <huansic_motor_pid+0x204>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <huansic_motor_pid+0x21a>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	897a      	ldrh	r2, [r7, #10]
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec8:	e01c      	b.n	8002f04 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d105      	bne.n	8002ede <huansic_motor_pid+0x22e>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	897a      	ldrh	r2, [r7, #10]
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
 8002edc:	e012      	b.n	8002f04 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d105      	bne.n	8002ef2 <huansic_motor_pid+0x242>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	897a      	ldrh	r2, [r7, #10]
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef0:	e008      	b.n	8002f04 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d104      	bne.n	8002f04 <huansic_motor_pid+0x254>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	897a      	ldrh	r2, [r7, #10]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d026      	beq.n	8002f5a <huansic_motor_pid+0x2aa>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <huansic_motor_pid+0x270>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	893a      	ldrh	r2, [r7, #8]
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8002f1e:	e01c      	b.n	8002f5a <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d105      	bne.n	8002f34 <huansic_motor_pid+0x284>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	893a      	ldrh	r2, [r7, #8]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f32:	e012      	b.n	8002f5a <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d105      	bne.n	8002f48 <huansic_motor_pid+0x298>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	893a      	ldrh	r2, [r7, #8]
 8002f44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f46:	e008      	b.n	8002f5a <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d104      	bne.n	8002f5a <huansic_motor_pid+0x2aa>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	893a      	ldrh	r2, [r7, #8]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40100000 	.word	0x40100000
 8002f68:	40140000 	.word	0x40140000
 8002f6c:	bf800000 	.word	0xbf800000

08002f70 <custom_order_new_failed>:
extern uint8_t CoordinateUpdate;
extern uint8_t delivering_num;
uint8_t zigbeeSend[2][6]={0x55,0xAA,0x00,0x00,0x00,0x00,
                          0x55,0xAA,0x02,0x00,0x00,0x00};        //小车可能发送的信息（0x00:请求游戏信息 0x02:设置充电桩）

__weak void custom_order_new_failed(uint8_t id) {
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]

}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	hxb->pending_alignment = 0;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->nextPackageID = 0x00;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	731a      	strb	r2, [r3, #12]
	hxb->nextPackageLength = 6;		// header length
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2206      	movs	r2, #6
 8002f9e:	735a      	strb	r2, [r3, #13]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f103 010e 	add.w	r1, r3, #14
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7b5b      	ldrb	r3, [r3, #13]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f006 ffd9 	bl	8009f68 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0204 	bic.w	r2, r2, #4
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <huansic_xb_decodeHeader>:

enum XB_STATUS huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <huansic_xb_decodeHeader+0x12>
		return XB_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e03c      	b.n	800305e <huansic_xb_decodeHeader+0x8c>

	// record checksum
	hxb->checksum = hxb->buffer[5];
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7cda      	ldrb	r2, [r3, #19]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7c1b      	ldrb	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d015      	beq.n	8003022 <huansic_xb_decodeHeader+0x50>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7c1b      	ldrb	r3, [r3, #16]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d011      	beq.n	8003022 <huansic_xb_decodeHeader+0x50>
		hxb->pending_alignment = 1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = 0x00;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	330e      	adds	r3, #14
 8003016:	2201      	movs	r2, #1
 8003018:	4619      	mov	r1, r3
 800301a:	f006 ff75 	bl	8009f08 <HAL_UART_Receive_IT>
		return XB_ID_ERROR;
 800301e:	2306      	movs	r3, #6
 8003020:	e01d      	b.n	800305e <huansic_xb_decodeHeader+0x8c>
	}
	hxb->nextPackageID = hxb->buffer[2];
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7c1a      	ldrb	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	731a      	strb	r2, [r3, #12]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[3]; // the length shall not be longer than 255 (the max possible is 225)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7c5a      	ldrb	r2, [r3, #17]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	735a      	strb	r2, [r3, #13]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f103 010e 	add.w	r1, r3, #14
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7b5b      	ldrb	r3, [r3, #13]
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	f006 ff90 	bl	8009f68 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]
	return XB_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <huansic_xb_decodeBody>:

enum XB_STATUS huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	2300      	movs	r3, #0
 8003076:	777b      	strb	r3, [r7, #29]
	uint32_t temp;

	if (!hxb)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <huansic_xb_decodeBody+0x1c>
		return XB_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f000 bcf5 	b.w	8003a6e <huansic_xb_decodeBody+0xa06>

	// checksum
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	2300      	movs	r3, #0
 800308a:	77bb      	strb	r3, [r7, #30]
 800308c:	e009      	b.n	80030a2 <huansic_xb_decodeBody+0x3a>
		j ^= hxb->buffer[i];
 800308e:	7ffb      	ldrb	r3, [r7, #31]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	7b9a      	ldrb	r2, [r3, #14]
 8003096:	7fbb      	ldrb	r3, [r7, #30]
 8003098:	4053      	eors	r3, r2
 800309a:	77bb      	strb	r3, [r7, #30]
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	3301      	adds	r3, #1
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7b5b      	ldrb	r3, [r3, #13]
 80030a6:	7ffa      	ldrb	r2, [r7, #31]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3f0      	bcc.n	800308e <huansic_xb_decodeBody+0x26>

	if (j != hxb->checksum) {
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80030b2:	7fba      	ldrb	r2, [r7, #30]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d012      	beq.n	80030de <huansic_xb_decodeBody+0x76>
		hxb->pending_alignment = 1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = 0x00;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	330e      	adds	r3, #14
 80030d0:	2201      	movs	r2, #1
 80030d2:	4619      	mov	r1, r3
 80030d4:	f006 ff18 	bl	8009f08 <HAL_UART_Receive_IT>
		return XB_SUM_ERROR;
 80030d8:	2304      	movs	r3, #4
 80030da:	f000 bcc8 	b.w	8003a6e <huansic_xb_decodeBody+0xa06>
	}

	if (hxb->nextPackageID == 0x01) {		// game information
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7b1b      	ldrb	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	f040 8164 	bne.w	80033b0 <huansic_xb_decodeBody+0x348>
		/* game stage */
		gameStage = hxb->buffer[index++];// 0
 80030e8:	7f7b      	ldrb	r3, [r7, #29]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	777a      	strb	r2, [r7, #29]
 80030ee:	461a      	mov	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	7b9a      	ldrb	r2, [r3, #14]
 80030f6:	4b86      	ldr	r3, [pc, #536]	; (8003310 <huansic_xb_decodeBody+0x2a8>)
 80030f8:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 80030fa:	7f7b      	ldrb	r3, [r7, #29]
 80030fc:	3301      	adds	r3, #1
 80030fe:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e06a      	b.n	80031dc <huansic_xb_decodeBody+0x174>
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index+1] << 8;
 8003106:	7f7b      	ldrb	r3, [r7, #29]
 8003108:	3301      	adds	r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	7b9b      	ldrb	r3, [r3, #14]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	7ffb      	ldrb	r3, [r7, #31]
 8003114:	b211      	sxth	r1, r2
 8003116:	4a7f      	ldr	r2, [pc, #508]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 8003118:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index];
 800311c:	7f7b      	ldrb	r3, [r7, #29]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	7b9a      	ldrb	r2, [r3, #14]
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	b211      	sxth	r1, r2
 8003128:	4a7a      	ldr	r2, [pc, #488]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 800312a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 800312e:	7f7b      	ldrb	r3, [r7, #29]
 8003130:	3302      	adds	r3, #2
 8003132:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index+1] << 8;
 8003134:	7f7b      	ldrb	r3, [r7, #29]
 8003136:	3301      	adds	r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	7b9b      	ldrb	r3, [r3, #14]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	7ffb      	ldrb	r3, [r7, #31]
 8003142:	b211      	sxth	r1, r2
 8003144:	4a73      	ldr	r2, [pc, #460]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	460a      	mov	r2, r1
 800314c:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 800314e:	7f7b      	ldrb	r3, [r7, #29]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	7b9a      	ldrb	r2, [r3, #14]
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	b211      	sxth	r1, r2
 800315a:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	460a      	mov	r2, r1
 8003162:	805a      	strh	r2, [r3, #2]
			index += 2;
 8003164:	7f7b      	ldrb	r3, [r7, #29]
 8003166:	3302      	adds	r3, #2
 8003168:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index+1] << 8;
 800316a:	7f7b      	ldrb	r3, [r7, #29]
 800316c:	3301      	adds	r3, #1
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	7b9b      	ldrb	r3, [r3, #14]
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	b211      	sxth	r1, r2
 800317a:	4a66      	ldr	r2, [pc, #408]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	460a      	mov	r2, r1
 8003182:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8003184:	7f7b      	ldrb	r3, [r7, #29]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	7b9a      	ldrb	r2, [r3, #14]
 800318c:	7ffb      	ldrb	r3, [r7, #31]
 800318e:	b211      	sxth	r1, r2
 8003190:	4a60      	ldr	r2, [pc, #384]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	460a      	mov	r2, r1
 8003198:	809a      	strh	r2, [r3, #4]
			index += 2;
 800319a:	7f7b      	ldrb	r3, [r7, #29]
 800319c:	3302      	adds	r3, #2
 800319e:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index+1] << 8;
 80031a0:	7f7b      	ldrb	r3, [r7, #29]
 80031a2:	3301      	adds	r3, #1
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	7b9b      	ldrb	r3, [r3, #14]
 80031aa:	021a      	lsls	r2, r3, #8
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
 80031ae:	b211      	sxth	r1, r2
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	460a      	mov	r2, r1
 80031b8:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 80031ba:	7f7b      	ldrb	r3, [r7, #29]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	7b9a      	ldrb	r2, [r3, #14]
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	b211      	sxth	r1, r2
 80031c6:	4a53      	ldr	r2, [pc, #332]	; (8003314 <huansic_xb_decodeBody+0x2ac>)
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	460a      	mov	r2, r1
 80031ce:	80da      	strh	r2, [r3, #6]
			index += 2;
 80031d0:	7f7b      	ldrb	r3, [r7, #29]
 80031d2:	3302      	adds	r3, #2
 80031d4:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 80031d6:	7ffb      	ldrb	r3, [r7, #31]
 80031d8:	3301      	adds	r3, #1
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d991      	bls.n	8003106 <huansic_xb_decodeBody+0x9e>
		}//2 ~ 41

		/* total time of this round */
		gameStageTimeLimit = hxb->buffer[index+3];
 80031e2:	7f7b      	ldrb	r3, [r7, #29]
 80031e4:	3303      	adds	r3, #3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	7b9b      	ldrb	r3, [r3, #14]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 80031f0:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4a47      	ldr	r2, [pc, #284]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 80031fa:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index+2];
 80031fc:	7f7b      	ldrb	r3, [r7, #29]
 80031fe:	3302      	adds	r3, #2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	7b9b      	ldrb	r3, [r3, #14]
 8003206:	461a      	mov	r2, r3
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	4a42      	ldr	r2, [pc, #264]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 8003210:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 800321a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index+1];
 800321c:	7f7b      	ldrb	r3, [r7, #29]
 800321e:	3301      	adds	r3, #1
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	7b9b      	ldrb	r3, [r3, #14]
 8003226:	461a      	mov	r2, r3
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4313      	orrs	r3, r2
 800322e:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 8003230:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	4a37      	ldr	r2, [pc, #220]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 800323a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index];
 800323c:	7f7b      	ldrb	r3, [r7, #29]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	7b9b      	ldrb	r3, [r3, #14]
 8003244:	461a      	mov	r2, r3
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <huansic_xb_decodeBody+0x2b0>)
 800324e:	6013      	str	r3, [r2, #0]
		index += 4;// 42 ~ 45
 8003250:	7f7b      	ldrb	r3, [r7, #29]
 8003252:	3304      	adds	r3, #4
 8003254:	777b      	strb	r3, [r7, #29]

		/* ally beacons */
		listLength = hxb->buffer[index++];//46
 8003256:	7f7b      	ldrb	r3, [r7, #29]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	777a      	strb	r2, [r7, #29]
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	7b9b      	ldrb	r3, [r3, #14]
 8003264:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8003266:	2300      	movs	r3, #0
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e042      	b.n	80032f2 <huansic_xb_decodeBody+0x28a>
			allyBeacons[i].x = (uint16_t) hxb->buffer[index+1] << 8;
 800326c:	7f7b      	ldrb	r3, [r7, #29]
 800326e:	3301      	adds	r3, #1
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	7b9b      	ldrb	r3, [r3, #14]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	7ffb      	ldrb	r3, [r7, #31]
 800327a:	b211      	sxth	r1, r2
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <huansic_xb_decodeBody+0x2b4>)
 800327e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x |= hxb->buffer[index];
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <huansic_xb_decodeBody+0x2b4>)
 8003286:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 800328a:	7f7b      	ldrb	r3, [r7, #29]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	7b9b      	ldrb	r3, [r3, #14]
 8003292:	b21a      	sxth	r2, r3
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	430a      	orrs	r2, r1
 8003298:	b211      	sxth	r1, r2
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <huansic_xb_decodeBody+0x2b4>)
 800329c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 80032a0:	7f7b      	ldrb	r3, [r7, #29]
 80032a2:	3302      	adds	r3, #2
 80032a4:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index+1] << 8;
 80032a6:	7f7b      	ldrb	r3, [r7, #29]
 80032a8:	3301      	adds	r3, #1
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	7b9b      	ldrb	r3, [r3, #14]
 80032b0:	021a      	lsls	r2, r3, #8
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	b211      	sxth	r1, r2
 80032b6:	4a19      	ldr	r2, [pc, #100]	; (800331c <huansic_xb_decodeBody+0x2b4>)
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	460a      	mov	r2, r1
 80032be:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y |= hxb->buffer[index];
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <huansic_xb_decodeBody+0x2b4>)
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80032cc:	7f7b      	ldrb	r3, [r7, #29]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	7b9b      	ldrb	r3, [r3, #14]
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	430a      	orrs	r2, r1
 80032da:	b211      	sxth	r1, r2
 80032dc:	4a0f      	ldr	r2, [pc, #60]	; (800331c <huansic_xb_decodeBody+0x2b4>)
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	460a      	mov	r2, r1
 80032e4:	805a      	strh	r2, [r3, #2]
			index += 2;
 80032e6:	7f7b      	ldrb	r3, [r7, #29]
 80032e8:	3302      	adds	r3, #2
 80032ea:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < listLength; i++) {
 80032ec:	7ffb      	ldrb	r3, [r7, #31]
 80032ee:	3301      	adds	r3, #1
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	7ffa      	ldrb	r2, [r7, #31]
 80032f4:	7efb      	ldrb	r3, [r7, #27]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d3b8      	bcc.n	800326c <huansic_xb_decodeBody+0x204>
		}

		/* opponent beacons */
		listLength = hxb->buffer[index++];
 80032fa:	7f7b      	ldrb	r3, [r7, #29]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	777a      	strb	r2, [r7, #29]
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	7b9b      	ldrb	r3, [r3, #14]
 8003308:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800330a:	2300      	movs	r3, #0
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e04a      	b.n	80033a6 <huansic_xb_decodeBody+0x33e>
 8003310:	20000b7c 	.word	0x20000b7c
 8003314:	20000b88 	.word	0x20000b88
 8003318:	20000b80 	.word	0x20000b80
 800331c:	20000bb0 	.word	0x20000bb0
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index+1] << 8;
 8003320:	7f7b      	ldrb	r3, [r7, #29]
 8003322:	3301      	adds	r3, #1
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	7b9b      	ldrb	r3, [r3, #14]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	b211      	sxth	r1, r2
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <huansic_xb_decodeBody+0x4d8>)
 8003332:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x |= hxb->buffer[index];
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	4a81      	ldr	r2, [pc, #516]	; (8003540 <huansic_xb_decodeBody+0x4d8>)
 800333a:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 800333e:	7f7b      	ldrb	r3, [r7, #29]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	7b9b      	ldrb	r3, [r3, #14]
 8003346:	b21a      	sxth	r2, r3
 8003348:	7ffb      	ldrb	r3, [r7, #31]
 800334a:	430a      	orrs	r2, r1
 800334c:	b211      	sxth	r1, r2
 800334e:	4a7c      	ldr	r2, [pc, #496]	; (8003540 <huansic_xb_decodeBody+0x4d8>)
 8003350:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8003354:	7f7b      	ldrb	r3, [r7, #29]
 8003356:	3302      	adds	r3, #2
 8003358:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index+1] << 8;
 800335a:	7f7b      	ldrb	r3, [r7, #29]
 800335c:	3301      	adds	r3, #1
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	7b9b      	ldrb	r3, [r3, #14]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	b211      	sxth	r1, r2
 800336a:	4a75      	ldr	r2, [pc, #468]	; (8003540 <huansic_xb_decodeBody+0x4d8>)
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	460a      	mov	r2, r1
 8003372:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y |= hxb->buffer[index];
 8003374:	7ffb      	ldrb	r3, [r7, #31]
 8003376:	4a72      	ldr	r2, [pc, #456]	; (8003540 <huansic_xb_decodeBody+0x4d8>)
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8003380:	7f7b      	ldrb	r3, [r7, #29]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	7b9b      	ldrb	r3, [r3, #14]
 8003388:	b21a      	sxth	r2, r3
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	430a      	orrs	r2, r1
 800338e:	b211      	sxth	r1, r2
 8003390:	4a6b      	ldr	r2, [pc, #428]	; (8003540 <huansic_xb_decodeBody+0x4d8>)
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	460a      	mov	r2, r1
 8003398:	805a      	strh	r2, [r3, #2]
			index += 2;
 800339a:	7f7b      	ldrb	r3, [r7, #29]
 800339c:	3302      	adds	r3, #2
 800339e:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < listLength; i++) {
 80033a0:	7ffb      	ldrb	r3, [r7, #31]
 80033a2:	3301      	adds	r3, #1
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	7ffa      	ldrb	r2, [r7, #31]
 80033a8:	7efb      	ldrb	r3, [r7, #27]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3b8      	bcc.n	8003320 <huansic_xb_decodeBody+0x2b8>
 80033ae:	e33d      	b.n	8003a2c <huansic_xb_decodeBody+0x9c4>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7b1b      	ldrb	r3, [r3, #12]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	f040 8327 	bne.w	8003a08 <huansic_xb_decodeBody+0x9a0>
		/* game status */
		gameStatus = hxb->buffer[index++];//1
 80033ba:	7f7b      	ldrb	r3, [r7, #29]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	777a      	strb	r2, [r7, #29]
 80033c0:	461a      	mov	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	7b9a      	ldrb	r2, [r3, #14]
 80033c8:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <huansic_xb_decodeBody+0x4dc>)
 80033ca:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index+3];
 80033cc:	7f7b      	ldrb	r3, [r7, #29]
 80033ce:	3303      	adds	r3, #3
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	7b9b      	ldrb	r3, [r3, #14]
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 80033da:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 80033dc:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4a59      	ldr	r2, [pc, #356]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 80033e4:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index+2];
 80033e6:	7f7b      	ldrb	r3, [r7, #29]
 80033e8:	3302      	adds	r3, #2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	7b9b      	ldrb	r3, [r3, #14]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b55      	ldr	r3, [pc, #340]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	4a53      	ldr	r2, [pc, #332]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 80033fa:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80033fc:	4b52      	ldr	r3, [pc, #328]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4a51      	ldr	r2, [pc, #324]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 8003404:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index+1];
 8003406:	7f7b      	ldrb	r3, [r7, #29]
 8003408:	3301      	adds	r3, #1
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	7b9b      	ldrb	r3, [r3, #14]
 8003410:	461a      	mov	r2, r3
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 800341a:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 800341c:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	4a49      	ldr	r2, [pc, #292]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 8003424:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index];//index = 1
 8003426:	7f7b      	ldrb	r3, [r7, #29]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	7b9b      	ldrb	r3, [r3, #14]
 800342e:	461a      	mov	r2, r3
 8003430:	4b45      	ldr	r3, [pc, #276]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	4a44      	ldr	r2, [pc, #272]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 8003438:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 800343a:	4b44      	ldr	r3, [pc, #272]	; (800354c <huansic_xb_decodeBody+0x4e4>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b42      	ldr	r3, [pc, #264]	; (8003548 <huansic_xb_decodeBody+0x4e0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4a42      	ldr	r2, [pc, #264]	; (8003550 <huansic_xb_decodeBody+0x4e8>)
 8003446:	6013      	str	r3, [r2, #0]
		index += 4;//5
 8003448:	7f7b      	ldrb	r3, [r7, #29]
 800344a:	3304      	adds	r3, #4
 800344c:	777b      	strb	r3, [r7, #29]

		/* fetch score */
		temp = hxb->buffer[index+3];
 800344e:	7f7b      	ldrb	r3, [r7, #29]
 8003450:	3303      	adds	r3, #3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	7b9b      	ldrb	r3, [r3, #14]
 8003458:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+2];
 8003460:	7f7b      	ldrb	r3, [r7, #29]
 8003462:	3302      	adds	r3, #2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	7b9b      	ldrb	r3, [r3, #14]
 800346a:	461a      	mov	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+1];
 8003478:	7f7b      	ldrb	r3, [r7, #29]
 800347a:	3301      	adds	r3, #1
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	7b9b      	ldrb	r3, [r3, #14]
 8003482:	461a      	mov	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index];
 8003490:	7f7b      	ldrb	r3, [r7, #29]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	7b9b      	ldrb	r3, [r3, #14]
 8003498:	461a      	mov	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <huansic_xb_decodeBody+0x4ec>)
 80034a8:	6013      	str	r3, [r2, #0]
		index += 4;//9
 80034aa:	7f7b      	ldrb	r3, [r7, #29]
 80034ac:	3304      	adds	r3, #4
 80034ae:	777b      	strb	r3, [r7, #29]

		/* my position */
		myCoord.x = hxb->buffer[index+1];
 80034b0:	7f7b      	ldrb	r3, [r7, #29]
 80034b2:	3301      	adds	r3, #1
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	7b9b      	ldrb	r3, [r3, #14]
 80034ba:	b21a      	sxth	r2, r3
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 80034be:	801a      	strh	r2, [r3, #0]
		if(myCoord.x == 255){
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 80034c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d10b      	bne.n	80034e2 <huansic_xb_decodeBody+0x47a>
			myCoord.x = hxb->buffer[index] - 256;
 80034ca:	7f7b      	ldrb	r3, [r7, #29]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	7b9b      	ldrb	r3, [r3, #14]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b21a      	sxth	r2, r3
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	e012      	b.n	8003508 <huansic_xb_decodeBody+0x4a0>
		}
		else{
			myCoord.x = myCoord.x << 8;
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 80034e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 80034ee:	801a      	strh	r2, [r3, #0]
			myCoord.x |= hxb->buffer[index];
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 80034f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034f6:	7f7b      	ldrb	r3, [r7, #29]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	440b      	add	r3, r1
 80034fc:	7b9b      	ldrb	r3, [r3, #14]
 80034fe:	b21b      	sxth	r3, r3
 8003500:	4313      	orrs	r3, r2
 8003502:	b21a      	sxth	r2, r3
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 8003506:	801a      	strh	r2, [r3, #0]
		}
		index += 2;//11
 8003508:	7f7b      	ldrb	r3, [r7, #29]
 800350a:	3302      	adds	r3, #2
 800350c:	777b      	strb	r3, [r7, #29]
		myCoord.y = hxb->buffer[index+1];
 800350e:	7f7b      	ldrb	r3, [r7, #29]
 8003510:	3301      	adds	r3, #1
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	7b9b      	ldrb	r3, [r3, #14]
 8003518:	b21a      	sxth	r2, r3
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 800351c:	805a      	strh	r2, [r3, #2]
		if(myCoord.y == 255){
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 8003520:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003524:	2bff      	cmp	r3, #255	; 0xff
 8003526:	d119      	bne.n	800355c <huansic_xb_decodeBody+0x4f4>
			myCoord.y = hxb->buffer[index] - 256;
 8003528:	7f7b      	ldrb	r3, [r7, #29]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	7b9b      	ldrb	r3, [r3, #14]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003536:	b29b      	uxth	r3, r3
 8003538:	b21a      	sxth	r2, r3
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <huansic_xb_decodeBody+0x4f0>)
 800353c:	805a      	strh	r2, [r3, #2]
 800353e:	e020      	b.n	8003582 <huansic_xb_decodeBody+0x51a>
 8003540:	20000bbc 	.word	0x20000bbc
 8003544:	20000b7d 	.word	0x20000b7d
 8003548:	20000b84 	.word	0x20000b84
 800354c:	20000b80 	.word	0x20000b80
 8003550:	20000c28 	.word	0x20000c28
 8003554:	20000c20 	.word	0x20000c20
 8003558:	20000c0c 	.word	0x20000c0c
		}
		else{
			myCoord.y = myCoord.y << 8;
 800355c:	4ba2      	ldr	r3, [pc, #648]	; (80037e8 <huansic_xb_decodeBody+0x780>)
 800355e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	b21a      	sxth	r2, r3
 8003566:	4ba0      	ldr	r3, [pc, #640]	; (80037e8 <huansic_xb_decodeBody+0x780>)
 8003568:	805a      	strh	r2, [r3, #2]
			myCoord.y |= hxb->buffer[index];
 800356a:	4b9f      	ldr	r3, [pc, #636]	; (80037e8 <huansic_xb_decodeBody+0x780>)
 800356c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003570:	7f7b      	ldrb	r3, [r7, #29]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	440b      	add	r3, r1
 8003576:	7b9b      	ldrb	r3, [r3, #14]
 8003578:	b21b      	sxth	r3, r3
 800357a:	4313      	orrs	r3, r2
 800357c:	b21a      	sxth	r2, r3
 800357e:	4b9a      	ldr	r3, [pc, #616]	; (80037e8 <huansic_xb_decodeBody+0x780>)
 8003580:	805a      	strh	r2, [r3, #2]
		}
		index += 2;//13
 8003582:	7f7b      	ldrb	r3, [r7, #29]
 8003584:	3302      	adds	r3, #2
 8003586:	777b      	strb	r3, [r7, #29]
		CoordinateUpdate = 1;
 8003588:	4b98      	ldr	r3, [pc, #608]	; (80037ec <huansic_xb_decodeBody+0x784>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]

		/* fetch battery */
		temp = hxb->buffer[index+3];
 800358e:	7f7b      	ldrb	r3, [r7, #29]
 8003590:	3303      	adds	r3, #3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	7b9b      	ldrb	r3, [r3, #14]
 8003598:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+2];
 80035a0:	7f7b      	ldrb	r3, [r7, #29]
 80035a2:	3302      	adds	r3, #2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	7b9b      	ldrb	r3, [r3, #14]
 80035aa:	461a      	mov	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index+1];
 80035b8:	7f7b      	ldrb	r3, [r7, #29]
 80035ba:	3301      	adds	r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	7b9b      	ldrb	r3, [r3, #14]
 80035c2:	461a      	mov	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index];
 80035d0:	7f7b      	ldrb	r3, [r7, #29]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	7b9b      	ldrb	r3, [r3, #14]
 80035d8:	461a      	mov	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a82      	ldr	r2, [pc, #520]	; (80037f0 <huansic_xb_decodeBody+0x788>)
 80035e8:	6013      	str	r3, [r2, #0]
		index += 4;//17
 80035ea:	7f7b      	ldrb	r3, [r7, #29]
 80035ec:	3304      	adds	r3, #4
 80035ee:	777b      	strb	r3, [r7, #29]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 80035f0:	4a80      	ldr	r2, [pc, #512]	; (80037f4 <huansic_xb_decodeBody+0x78c>)
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035fa:	6018      	str	r0, [r3, #0]
 80035fc:	3304      	adds	r3, #4
 80035fe:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];//after_update : 18
 8003604:	7f7b      	ldrb	r3, [r7, #29]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	777a      	strb	r2, [r7, #29]
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	7b9b      	ldrb	r3, [r3, #14]
 8003612:	76fb      	strb	r3, [r7, #27]
		delivering_num = listLength;
 8003614:	4a78      	ldr	r2, [pc, #480]	; (80037f8 <huansic_xb_decodeBody+0x790>)
 8003616:	7efb      	ldrb	r3, [r7, #27]
 8003618:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 800361a:	2300      	movs	r3, #0
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e0da      	b.n	80037d6 <huansic_xb_decodeBody+0x76e>
			temp |= hxb->buffer[index + 17];
 8003620:	7f7b      	ldrb	r3, [r7, #29]
 8003622:	3311      	adds	r3, #17
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	7b9b      	ldrb	r3, [r3, #14]
 800362a:	461a      	mov	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 16];
 8003638:	7f7b      	ldrb	r3, [r7, #29]
 800363a:	3310      	adds	r3, #16
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	7b9b      	ldrb	r3, [r3, #14]
 8003642:	461a      	mov	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	b25b      	sxtb	r3, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fa00 	bl	8002a54 <huansic_order_new>
 8003654:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d108      	bne.n	800366e <huansic_xb_decodeBody+0x606>
				index += 18;
 800365c:	7f7b      	ldrb	r3, [r7, #29]
 800365e:	3312      	adds	r3, #18
 8003660:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fc82 	bl	8002f70 <custom_order_new_failed>
				continue;
 800366c:	e0b0      	b.n	80037d0 <huansic_xb_decodeBody+0x768>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 800366e:	7f7b      	ldrb	r3, [r7, #29]
 8003670:	3301      	adds	r3, #1
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	7b9b      	ldrb	r3, [r3, #14]
 8003678:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index];
 800367a:	b21a      	sxth	r2, r3
 800367c:	7f7b      	ldrb	r3, [r7, #29]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	440b      	add	r3, r1
 8003682:	7b9b      	ldrb	r3, [r3, #14]
 8003684:	b21b      	sxth	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 800368e:	7f7b      	ldrb	r3, [r7, #29]
 8003690:	3303      	adds	r3, #3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	7b9b      	ldrb	r3, [r3, #14]
 8003698:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 2];
 800369a:	b21a      	sxth	r2, r3
 800369c:	7f7b      	ldrb	r3, [r7, #29]
 800369e:	3302      	adds	r3, #2
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	440b      	add	r3, r1
 80036a4:	7b9b      	ldrb	r3, [r3, #14]
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	4313      	orrs	r3, r2
 80036aa:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 80036b0:	7f7b      	ldrb	r3, [r7, #29]
 80036b2:	3305      	adds	r3, #5
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	7b9b      	ldrb	r3, [r3, #14]
 80036ba:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 4];
 80036bc:	b21a      	sxth	r2, r3
 80036be:	7f7b      	ldrb	r3, [r7, #29]
 80036c0:	3304      	adds	r3, #4
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	440b      	add	r3, r1
 80036c6:	7b9b      	ldrb	r3, [r3, #14]
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	4313      	orrs	r3, r2
 80036cc:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 80036d2:	7f7b      	ldrb	r3, [r7, #29]
 80036d4:	3307      	adds	r3, #7
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	7b9b      	ldrb	r3, [r3, #14]
 80036dc:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 6];
 80036de:	b21a      	sxth	r2, r3
 80036e0:	7f7b      	ldrb	r3, [r7, #29]
 80036e2:	3306      	adds	r3, #6
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	440b      	add	r3, r1
 80036e8:	7b9b      	ldrb	r3, [r3, #14]
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	4313      	orrs	r3, r2
 80036ee:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 11];
 80036f4:	7f7b      	ldrb	r3, [r7, #29]
 80036f6:	330b      	adds	r3, #11
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	7b9b      	ldrb	r3, [r3, #14]
 80036fe:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 10];
 8003706:	7f7b      	ldrb	r3, [r7, #29]
 8003708:	330a      	adds	r3, #10
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	7b9b      	ldrb	r3, [r3, #14]
 8003710:	461a      	mov	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 9];
 800371e:	7f7b      	ldrb	r3, [r7, #29]
 8003720:	3309      	adds	r3, #9
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	7b9b      	ldrb	r3, [r3, #14]
 8003728:	461a      	mov	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 8];
 8003736:	7f7b      	ldrb	r3, [r7, #29]
 8003738:	3308      	adds	r3, #8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	7b9b      	ldrb	r3, [r3, #14]
 8003740:	461a      	mov	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 15];
 800374e:	7f7b      	ldrb	r3, [r7, #29]
 8003750:	330f      	adds	r3, #15
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	7b9b      	ldrb	r3, [r3, #14]
 8003758:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 14];
 8003760:	7f7b      	ldrb	r3, [r7, #29]
 8003762:	330e      	adds	r3, #14
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	7b9b      	ldrb	r3, [r3, #14]
 800376a:	461a      	mov	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 13];
 8003778:	7f7b      	ldrb	r3, [r7, #29]
 800377a:	330d      	adds	r3, #13
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	7b9b      	ldrb	r3, [r3, #14]
 8003782:	461a      	mov	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 12];
 8003790:	7f7b      	ldrb	r3, [r7, #29]
 8003792:	330c      	adds	r3, #12
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	7b9b      	ldrb	r3, [r3, #14]
 800379a:	461a      	mov	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	615a      	str	r2, [r3, #20]

			delivering[i] = tempOrder;
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	4913      	ldr	r1, [pc, #76]	; (80037fc <huansic_xb_decodeBody+0x794>)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// increment index and record id
			index += 18;//18+listLength*18
 80037b6:	7f7b      	ldrb	r3, [r7, #29]
 80037b8:	3312      	adds	r3, #18
 80037ba:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	7f3b      	ldrb	r3, [r7, #28]
 80037c2:	1c59      	adds	r1, r3, #1
 80037c4:	7739      	strb	r1, [r7, #28]
 80037c6:	b252      	sxtb	r2, r2
 80037c8:	3320      	adds	r3, #32
 80037ca:	443b      	add	r3, r7
 80037cc:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80037d0:	7ffb      	ldrb	r3, [r7, #31]
 80037d2:	3301      	adds	r3, #1
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	7ffa      	ldrb	r2, [r7, #31]
 80037d8:	7efb      	ldrb	r3, [r7, #27]
 80037da:	429a      	cmp	r2, r3
 80037dc:	f4ff af20 	bcc.w	8003620 <huansic_xb_decodeBody+0x5b8>
		}

		/* order management */
		for (i = 0; i < 5; i++){
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e043      	b.n	800386e <huansic_xb_decodeBody+0x806>
 80037e6:	bf00      	nop
 80037e8:	20000c0c 	.word	0x20000c0c
 80037ec:	20000c18 	.word	0x20000c18
 80037f0:	20000c24 	.word	0x20000c24
 80037f4:	0800d2c0 	.word	0x0800d2c0
 80037f8:	20000c08 	.word	0x20000c08
 80037fc:	20000bf4 	.word	0x20000bf4
			if (delivering[i] != 0 && delivering[i]->id != -1) {
 8003800:	7ffb      	ldrb	r3, [r7, #31]
 8003802:	4a9d      	ldr	r2, [pc, #628]	; (8003a78 <huansic_xb_decodeBody+0xa10>)
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02d      	beq.n	8003868 <huansic_xb_decodeBody+0x800>
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	4a9a      	ldr	r2, [pc, #616]	; (8003a78 <huansic_xb_decodeBody+0xa10>)
 8003810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d025      	beq.n	8003868 <huansic_xb_decodeBody+0x800>
				for (j = 0; j < updatedOrderIndex; j++)
 800381c:	2300      	movs	r3, #0
 800381e:	77bb      	strb	r3, [r7, #30]
 8003820:	e011      	b.n	8003846 <huansic_xb_decodeBody+0x7de>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	4a94      	ldr	r2, [pc, #592]	; (8003a78 <huansic_xb_decodeBody+0xa10>)
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	7fba      	ldrb	r2, [r7, #30]
 800382e:	3220      	adds	r2, #32
 8003830:	443a      	add	r2, r7
 8003832:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 8003836:	4293      	cmp	r3, r2
 8003838:	d102      	bne.n	8003840 <huansic_xb_decodeBody+0x7d8>
						j = 255;
 800383a:	23ff      	movs	r3, #255	; 0xff
 800383c:	77bb      	strb	r3, [r7, #30]
						break;
 800383e:	e006      	b.n	800384e <huansic_xb_decodeBody+0x7e6>
				for (j = 0; j < updatedOrderIndex; j++)
 8003840:	7fbb      	ldrb	r3, [r7, #30]
 8003842:	3301      	adds	r3, #1
 8003844:	77bb      	strb	r3, [r7, #30]
 8003846:	7fba      	ldrb	r2, [r7, #30]
 8003848:	7f3b      	ldrb	r3, [r7, #28]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3e9      	bcc.n	8003822 <huansic_xb_decodeBody+0x7ba>
					}
				if (j != 255 && j != 0)
 800384e:	7fbb      	ldrb	r3, [r7, #30]
 8003850:	2bff      	cmp	r3, #255	; 0xff
 8003852:	d009      	beq.n	8003868 <huansic_xb_decodeBody+0x800>
 8003854:	7fbb      	ldrb	r3, [r7, #30]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <huansic_xb_decodeBody+0x800>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	4a86      	ldr	r2, [pc, #536]	; (8003a78 <huansic_xb_decodeBody+0xa10>)
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f950 	bl	8002b08 <huansic_order_delete>
		for (i = 0; i < 5; i++){
 8003868:	7ffb      	ldrb	r3, [r7, #31]
 800386a:	3301      	adds	r3, #1
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d9c5      	bls.n	8003800 <huansic_xb_decodeBody+0x798>
			}
		}
		/* record latest order */
		temp |= hxb->buffer[index + 17];
 8003874:	7f7b      	ldrb	r3, [r7, #29]
 8003876:	3311      	adds	r3, #17
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	7b9b      	ldrb	r3, [r3, #14]
 800387e:	461a      	mov	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 16];
 800388c:	7f7b      	ldrb	r3, [r7, #29]
 800388e:	3310      	adds	r3, #16
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	4413      	add	r3, r2
 8003894:	7b9b      	ldrb	r3, [r3, #14]
 8003896:	461a      	mov	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f8d6 	bl	8002a54 <huansic_order_new>
 80038a8:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <huansic_xb_decodeBody+0x85a>
			index += 18;
 80038b0:	7f7b      	ldrb	r3, [r7, #29]
 80038b2:	3312      	adds	r3, #18
 80038b4:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fb58 	bl	8002f70 <custom_order_new_failed>
 80038c0:	e0b4      	b.n	8003a2c <huansic_xb_decodeBody+0x9c4>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 80038c2:	7f7b      	ldrb	r3, [r7, #29]
 80038c4:	3301      	adds	r3, #1
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	7b9b      	ldrb	r3, [r3, #14]
 80038cc:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index];
 80038ce:	b21a      	sxth	r2, r3
 80038d0:	7f7b      	ldrb	r3, [r7, #29]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	440b      	add	r3, r1
 80038d6:	7b9b      	ldrb	r3, [r3, #14]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 1] << 8)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 80038e2:	7f7b      	ldrb	r3, [r7, #29]
 80038e4:	3303      	adds	r3, #3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	7b9b      	ldrb	r3, [r3, #14]
 80038ec:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 2];
 80038ee:	b21a      	sxth	r2, r3
 80038f0:	7f7b      	ldrb	r3, [r7, #29]
 80038f2:	3302      	adds	r3, #2
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	440b      	add	r3, r1
 80038f8:	7b9b      	ldrb	r3, [r3, #14]
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 3] << 8)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	805a      	strh	r2, [r3, #2]
			order_append(tempOrder);
 8003904:	6978      	ldr	r0, [r7, #20]
 8003906:	f001 fb3f 	bl	8004f88 <order_append>
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 800390a:	7f7b      	ldrb	r3, [r7, #29]
 800390c:	3305      	adds	r3, #5
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	7b9b      	ldrb	r3, [r3, #14]
 8003914:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 4];
 8003916:	b21a      	sxth	r2, r3
 8003918:	7f7b      	ldrb	r3, [r7, #29]
 800391a:	3304      	adds	r3, #4
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	440b      	add	r3, r1
 8003920:	7b9b      	ldrb	r3, [r3, #14]
 8003922:	b21b      	sxth	r3, r3
 8003924:	4313      	orrs	r3, r2
 8003926:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 5] << 8)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 800392c:	7f7b      	ldrb	r3, [r7, #29]
 800392e:	3307      	adds	r3, #7
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	7b9b      	ldrb	r3, [r3, #14]
 8003936:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 6];
 8003938:	b21a      	sxth	r2, r3
 800393a:	7f7b      	ldrb	r3, [r7, #29]
 800393c:	3306      	adds	r3, #6
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	440b      	add	r3, r1
 8003942:	7b9b      	ldrb	r3, [r3, #14]
 8003944:	b21b      	sxth	r3, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 7] << 8)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 11];
 800394e:	7f7b      	ldrb	r3, [r7, #29]
 8003950:	330b      	adds	r3, #11
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	7b9b      	ldrb	r3, [r3, #14]
 8003958:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 10];
 8003960:	7f7b      	ldrb	r3, [r7, #29]
 8003962:	330a      	adds	r3, #10
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	7b9b      	ldrb	r3, [r3, #14]
 800396a:	461a      	mov	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 9];
 8003978:	7f7b      	ldrb	r3, [r7, #29]
 800397a:	3309      	adds	r3, #9
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	7b9b      	ldrb	r3, [r3, #14]
 8003982:	461a      	mov	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 8];
 8003990:	7f7b      	ldrb	r3, [r7, #29]
 8003992:	3308      	adds	r3, #8
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	7b9b      	ldrb	r3, [r3, #14]
 800399a:	461a      	mov	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 15];
 80039a8:	7f7b      	ldrb	r3, [r7, #29]
 80039aa:	330f      	adds	r3, #15
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	7b9b      	ldrb	r3, [r3, #14]
 80039b2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 14];
 80039ba:	7f7b      	ldrb	r3, [r7, #29]
 80039bc:	330e      	adds	r3, #14
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	7b9b      	ldrb	r3, [r3, #14]
 80039c4:	461a      	mov	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 13];
 80039d2:	7f7b      	ldrb	r3, [r7, #29]
 80039d4:	330d      	adds	r3, #13
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	7b9b      	ldrb	r3, [r3, #14]
 80039dc:	461a      	mov	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 12];
 80039ea:	7f7b      	ldrb	r3, [r7, #29]
 80039ec:	330c      	adds	r3, #12
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	7b9b      	ldrb	r3, [r3, #14]
 80039f4:	461a      	mov	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	615a      	str	r2, [r3, #20]
 8003a06:	e011      	b.n	8003a2c <huansic_xb_decodeBody+0x9c4>
		}
	} else {
		hxb->pending_alignment = 1;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = 0x00;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	330e      	adds	r3, #14
 8003a20:	2201      	movs	r2, #1
 8003a22:	4619      	mov	r1, r3
 8003a24:	f006 fa70 	bl	8009f08 <HAL_UART_Receive_IT>
		return XB_ID_ERROR;
 8003a28:	2306      	movs	r3, #6
 8003a2a:	e020      	b.n	8003a6e <huansic_xb_decodeBody+0xa06>
	}

	// set up next DMA
	hxb->lastUpdated = HAL_GetTick();		// update last updated time stamp
 8003a2c:	f003 f854 	bl	8006ad8 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	609a      	str	r2, [r3, #8]
	hxb->nextPackageLength = 6;		// header length
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2206      	movs	r2, #6
 8003a3a:	735a      	strb	r2, [r3, #13]
	hxb->nextPackageID = 0x00;		// the next one is header
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	731a      	strb	r2, [r3, #12]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f103 010e 	add.w	r1, r3, #14
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7b5b      	ldrb	r3, [r3, #13]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	f006 fa88 	bl	8009f68 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	601a      	str	r2, [r3, #0]
	return XB_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000bf4 	.word	0x20000bf4

08003a7c <huansic_xb_requestGameInfo>:

void huansic_xb_requestGameInfo(XB_HandleTypeDef *hxb) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
//	uint8_t buffer = 0x00;
//	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
	HAL_UART_Transmit(hxb->huart, zigbeeSend[0], 6, HAL_MAX_DELAY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	2206      	movs	r2, #6
 8003a8e:	4903      	ldr	r1, [pc, #12]	; (8003a9c <huansic_xb_requestGameInfo+0x20>)
 8003a90:	f006 f9a8 	bl	8009de4 <HAL_UART_Transmit>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <huansic_xb_setBeacon>:

void huansic_xb_setBeacon(XB_HandleTypeDef *hxb) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
//	uint8_t buffer = 0x02;
//	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
	HAL_UART_Transmit(hxb->huart, zigbeeSend[1], 6, HAL_MAX_DELAY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab0:	2206      	movs	r2, #6
 8003ab2:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <huansic_xb_setBeacon+0x20>)
 8003ab4:	f006 f996 	bl	8009de4 <HAL_UART_Transmit>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	2000000a 	.word	0x2000000a

08003ac4 <huansic_xb_dma_error>:

void huansic_xb_dma_error(XB_HandleTypeDef *hxb) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	330e      	adds	r3, #14
 8003adc:	2201      	movs	r2, #1
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f006 fa12 	bl	8009f08 <HAL_UART_Receive_IT>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <huansic_xb_it_error>:

void huansic_xb_it_error(XB_HandleTypeDef *hxb) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->lastByte = 0x00;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	330e      	adds	r3, #14
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f006 f9fa 	bl	8009f08 <HAL_UART_Receive_IT>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <huansic_xb_isr>:

enum XB_STATUS huansic_xb_isr(XB_HandleTypeDef *hxb) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <huansic_xb_isr+0x12>
		return XB_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e038      	b.n	8003ba0 <huansic_xb_isr+0x84>

	if (hxb->buffer[0] == 0xAA && hxb->lastByte == 0x55) {		// if aligned (look for header)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7b9b      	ldrb	r3, [r3, #14]
 8003b32:	2baa      	cmp	r3, #170	; 0xaa
 8003b34:	d122      	bne.n	8003b7c <huansic_xb_isr+0x60>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003b3c:	2b55      	cmp	r3, #85	; 0x55
 8003b3e:	d11d      	bne.n	8003b7c <huansic_xb_isr+0x60>
		hxb->pending_alignment = 0;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->nextPackageID = 0x00;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	731a      	strb	r2, [r3, #12]
		hxb->buffer[1] = 0x55;		// for further processing
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2255      	movs	r2, #85	; 0x55
 8003b52:	73da      	strb	r2, [r3, #15]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2], 4);		// receive the rest of header
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f006 fa02 	bl	8009f68 <HAL_UART_Receive_DMA>
		hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]
		return XB_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e011      	b.n	8003ba0 <huansic_xb_isr+0x84>
	} else {
		hxb->pending_alignment = 1;		// enter aligning mode if not already
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = hxb->buffer[0];
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7b9a      	ldrb	r2, [r3, #14]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	330e      	adds	r3, #14
 8003b96:	2201      	movs	r2, #1
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f006 f9b5 	bl	8009f08 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8003b9e:	2305      	movs	r3, #5
	}
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <huansic_xb_dma_isr>:

enum XB_STATUS huansic_xb_dma_isr(XB_HandleTypeDef *hxb) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <huansic_xb_dma_isr+0x12>
		return XB_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00c      	b.n	8003bd4 <huansic_xb_dma_isr+0x2c>

	if (hxb->nextPackageID == 0x00)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7b1b      	ldrb	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <huansic_xb_dma_isr+0x24>
		return huansic_xb_decodeHeader(hxb);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fa05 	bl	8002fd2 <huansic_xb_decodeHeader>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	e003      	b.n	8003bd4 <huansic_xb_dma_isr+0x2c>
	else
		return huansic_xb_decodeBody(hxb);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fa4b 	bl	8003068 <huansic_xb_decodeBody>
 8003bd2:	4603      	mov	r3, r0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003be2:	f002 ff21 	bl	8006a28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003be6:	f000 fa55 	bl	8004094 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003bea:	f000 fe4f 	bl	800488c <MX_GPIO_Init>
	MX_DMA_Init();
 8003bee:	f000 fe27 	bl	8004840 <MX_DMA_Init>
	MX_I2C1_Init();
 8003bf2:	f000 fa95 	bl	8004120 <MX_I2C1_Init>
	MX_TIM1_Init();
 8003bf6:	f000 fac1 	bl	800417c <MX_TIM1_Init>
	MX_TIM2_Init();
 8003bfa:	f000 fb83 	bl	8004304 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003bfe:	f000 fbd5 	bl	80043ac <MX_TIM3_Init>
	MX_TIM4_Init();
 8003c02:	f000 fc27 	bl	8004454 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003c06:	f000 fc79 	bl	80044fc <MX_TIM5_Init>
	MX_TIM8_Init();
 8003c0a:	f000 fd01 	bl	8004610 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8003c0e:	f000 fdc3 	bl	8004798 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8003c12:	f000 fdeb 	bl	80047ec <MX_USART3_UART_Init>
	MX_TIM6_Init();
 8003c16:	f000 fcc5 	bl	80045a4 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//Motor initialization part
	cmotor_lf.encoderInverted = 1;
 8003c1a:	4ba0      	ldr	r3, [pc, #640]	; (8003e9c <main+0x2c0>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 8003c22:	4b9f      	ldr	r3, [pc, #636]	; (8003ea0 <main+0x2c4>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 8003c2a:	f000 fe85 	bl	8004938 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8003c2e:	f000 feb7 	bl	80049a0 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8003c32:	f000 fee9 	bl	8004a08 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8003c36:	f000 ff1b 	bl	8004a70 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8003c3a:	f000 ff4d 	bl	8004ad8 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8003c3e:	f000 ff5f 	bl	8004b00 <HUAN_ZIGBEE_Init>
	huansic_order_init();
 8003c42:	f7fe fed1 	bl	80029e8 <huansic_order_init>
	order_list_init();
 8003c46:	f001 f991 	bl	8004f6c <order_list_init>
	exitpoints_init();
 8003c4a:	f001 fa31 	bl	80050b0 <exitpoints_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 8003c4e:	2014      	movs	r0, #20
 8003c50:	f002 ff4c 	bl	8006aec <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8003c54:	4893      	ldr	r0, [pc, #588]	; (8003ea4 <main+0x2c8>)
 8003c56:	f004 ff6f 	bl	8008b38 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 8003c5a:	4993      	ldr	r1, [pc, #588]	; (8003ea8 <main+0x2cc>)
 8003c5c:	4893      	ldr	r0, [pc, #588]	; (8003eac <main+0x2d0>)
 8003c5e:	f007 fa63 	bl	800b128 <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 8003c62:	4a93      	ldr	r2, [pc, #588]	; (8003eb0 <main+0x2d4>)
 8003c64:	2301      	movs	r3, #1
 8003c66:	ca06      	ldmia	r2, {r1, r2}
 8003c68:	4890      	ldr	r0, [pc, #576]	; (8003eac <main+0x2d0>)
 8003c6a:	f002 f915 	bl	8005e98 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003c6e:	f002 f811 	bl	8005c94 <ssd1306_UpdateScreen>
//	Coordinate goal;
//	goal.x = 0;
//	goal.y = 50;
//	EstiCoord.x = (float)myCoord.x;
//	EstiCoord.y = (float)myCoord.y;
	CoordinateUpdate = 0;
 8003c72:	4b90      	ldr	r3, [pc, #576]	; (8003eb4 <main+0x2d8>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

		if(gameStatus == 0){		// if the game is not running
 8003c78:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <main+0x2dc>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0fb      	beq.n	8003c78 <main+0x9c>
//	    	HAL_Delay(1000);
//	    	LED1_OFF;
		}
		else
		{
			while (gameStage == 0) {		// pre-match
 8003c80:	e00d      	b.n	8003c9e <main+0xc2>
				chao_move_angle(0, 0);
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f7fe f8c5 	bl	8001e18 <chao_move_angle>
				// find angle offset
				//initangleZ = -himu.theta[2];
				// do some initialization
				Cal_Battery_Coord();
 8003c8e:	f002 fd95 	bl	80067bc <Cal_Battery_Coord>
				// get obstacle list
				huansic_xb_requestGameInfo(&hxb);
 8003c92:	488a      	ldr	r0, [pc, #552]	; (8003ebc <main+0x2e0>)
 8003c94:	f7ff fef2 	bl	8003a7c <huansic_xb_requestGameInfo>
				task_mode = 0;
 8003c98:	4b89      	ldr	r3, [pc, #548]	; (8003ec0 <main+0x2e4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
			while (gameStage == 0) {		// pre-match
 8003c9e:	4b89      	ldr	r3, [pc, #548]	; (8003ec4 <main+0x2e8>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ed      	beq.n	8003c82 <main+0xa6>
			}

			while (gameStage == 1){			// first-half
 8003ca6:	e0d8      	b.n	8003e5a <main+0x27e>
				if(task_mode == 0){
 8003ca8:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <main+0x2e4>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d110      	bne.n	8003cd2 <main+0xf6>
					//setChargingPile
					set_Beacons();
 8003cb0:	f002 fd60 	bl	8006774 <set_Beacons>
					while(orders.length == 0)
 8003cb4:	e005      	b.n	8003cc2 <main+0xe6>
					{
						chao_move_angle(0,0);
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f7fe f8ab 	bl	8001e18 <chao_move_angle>
					while(orders.length == 0)
 8003cc2:	4b81      	ldr	r3, [pc, #516]	; (8003ec8 <main+0x2ec>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f5      	beq.n	8003cb6 <main+0xda>
					}
					task_mode = 4;
 8003cca:	4b7d      	ldr	r3, [pc, #500]	; (8003ec0 <main+0x2e4>)
 8003ccc:	2204      	movs	r2, #4
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e0c3      	b.n	8003e5a <main+0x27e>
				}
				else {
					if(task_mode == 1){
 8003cd2:	4b7b      	ldr	r3, [pc, #492]	; (8003ec0 <main+0x2e4>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d126      	bne.n	8003d28 <main+0x14c>
						for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	71bb      	strb	r3, [r7, #6]
 8003ce0:	e00f      	b.n	8003d02 <main+0x126>
						{
							orders.buffer[i - 1] = orders.buffer[i];
 8003ce2:	79bb      	ldrb	r3, [r7, #6]
 8003ce4:	79ba      	ldrb	r2, [r7, #6]
 8003ce6:	3a01      	subs	r2, #1
 8003ce8:	4977      	ldr	r1, [pc, #476]	; (8003ec8 <main+0x2ec>)
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	440a      	add	r2, r1
 8003cee:	4976      	ldr	r1, [pc, #472]	; (8003ec8 <main+0x2ec>)
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3202      	adds	r2, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6013      	str	r3, [r2, #0]
						for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 8003cfc:	79bb      	ldrb	r3, [r7, #6]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	71bb      	strb	r3, [r7, #6]
 8003d02:	4b71      	ldr	r3, [pc, #452]	; (8003ec8 <main+0x2ec>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	79ba      	ldrb	r2, [r7, #6]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3ea      	bcc.n	8003ce2 <main+0x106>
						}
						orders.length -= 1;
 8003d0c:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <main+0x2ec>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <main+0x2ec>)
 8003d16:	701a      	strb	r2, [r3, #0]
						Get_packet(merchant);
 8003d18:	4b6c      	ldr	r3, [pc, #432]	; (8003ecc <main+0x2f0>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f002 fd84 	bl	8006828 <Get_packet>
						task_mode = 4;
 8003d20:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <main+0x2e4>)
 8003d22:	2204      	movs	r2, #4
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e098      	b.n	8003e5a <main+0x27e>
					}
					else if(task_mode == 2){
 8003d28:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <main+0x2e4>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d107      	bne.n	8003d40 <main+0x164>
						Send_packet(consumer);
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <main+0x2f4>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	f002 fd84 	bl	8006840 <Send_packet>
						task_mode = 4;
 8003d38:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <main+0x2e4>)
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e08c      	b.n	8003e5a <main+0x27e>
					}
					else if(task_mode == 4)// if task_mode == 4
 8003d40:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <main+0x2e4>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	f040 8088 	bne.w	8003e5a <main+0x27e>
					{
						merchant_index = Get_nearest_order();
 8003d4a:	f001 f961 	bl	8005010 <Get_nearest_order>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
						if(merchant_index == -1)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d104      	bne.n	8003d66 <main+0x18a>
							merchant = myCoord;
 8003d5c:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <main+0x2f0>)
 8003d5e:	4b5d      	ldr	r3, [pc, #372]	; (8003ed4 <main+0x2f8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e009      	b.n	8003d7a <main+0x19e>
						else
							merchant = orders.buffer[merchant_index];
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	4958      	ldr	r1, [pc, #352]	; (8003ecc <main+0x2f0>)
 8003d6c:	4a56      	ldr	r2, [pc, #344]	; (8003ec8 <main+0x2ec>)
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	460a      	mov	r2, r1
 8003d74:	3302      	adds	r3, #2
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	6010      	str	r0, [r2, #0]
						consumer = Get_nearest_consumer();
 8003d7a:	f002 fd6d 	bl	8006858 <Get_nearest_consumer>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4a53      	ldr	r2, [pc, #332]	; (8003ed0 <main+0x2f4>)
 8003d82:	6013      	str	r3, [r2, #0]

						if(delivering_num > 4){
 8003d84:	4b54      	ldr	r3, [pc, #336]	; (8003ed8 <main+0x2fc>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d903      	bls.n	8003d94 <main+0x1b8>
							task_mode = 2;
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <main+0x2e4>)
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e062      	b.n	8003e5a <main+0x27e>
						}
						else if(merchant_index == -1)
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d10e      	bne.n	8003dbc <main+0x1e0>
						{
							if(delivering_num == 0){
 8003d9e:	4b4e      	ldr	r3, [pc, #312]	; (8003ed8 <main+0x2fc>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <main+0x1d8>
								chao_move_angle(0,0);
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0000 	mov.w	r0, #0
 8003dae:	f7fe f833 	bl	8001e18 <chao_move_angle>
 8003db2:	e052      	b.n	8003e5a <main+0x27e>
							}
							else{
								task_mode = 2;
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <main+0x2e4>)
 8003db6:	2202      	movs	r2, #2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e04e      	b.n	8003e5a <main+0x27e>
							}
						}
						else if(delivering_num == 0){
 8003dbc:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <main+0x2fc>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <main+0x1f0>
							task_mode = 1;
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <main+0x2e4>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e046      	b.n	8003e5a <main+0x27e>
						}
						else if(gameStageTimeLeft < 10000 && delivering_num > 0){
 8003dcc:	4b43      	ldr	r3, [pc, #268]	; (8003edc <main+0x300>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d807      	bhi.n	8003de8 <main+0x20c>
 8003dd8:	4b3f      	ldr	r3, [pc, #252]	; (8003ed8 <main+0x2fc>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <main+0x20c>
							task_mode = 2;
 8003de0:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <main+0x2e4>)
 8003de2:	2202      	movs	r2, #2
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e038      	b.n	8003e5a <main+0x27e>
						}
						else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003de8:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <main+0x2f0>)
 8003dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <main+0x2f8>)
 8003df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003dfc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003e00:	4b32      	ldr	r3, [pc, #200]	; (8003ecc <main+0x2f0>)
 8003e02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <main+0x2f8>)
 8003e0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e0e:	1acb      	subs	r3, r1, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	425b      	neglt	r3, r3
 8003e16:	441a      	add	r2, r3
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <main+0x2f4>)
 8003e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <main+0x2f8>)
 8003e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e26:	1acb      	subs	r3, r1, r3
 8003e28:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003e2c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <main+0x2f4>)
 8003e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e36:	4618      	mov	r0, r3
 8003e38:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <main+0x2f8>)
 8003e3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e3e:	1ac3      	subs	r3, r0, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bfb8      	it	lt
 8003e44:	425b      	neglt	r3, r3
 8003e46:	440b      	add	r3, r1
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	da03      	bge.n	8003e54 <main+0x278>
							task_mode = 1;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <main+0x2e4>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <main+0x27e>
						}
						else{
							task_mode = 2;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <main+0x2e4>)
 8003e56:	2202      	movs	r2, #2
 8003e58:	701a      	strb	r2, [r3, #0]
			while (gameStage == 1){			// first-half
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <main+0x2e8>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	f43f af22 	beq.w	8003ca8 <main+0xcc>
					}
				}

			}
			//得做初始化
			while (gameStage == 2){			// second-half
 8003e64:	e100      	b.n	8004068 <main+0x48c>
				while(myCharge < 500)
				{
					huansic_xb_requestGameInfo(&hxb);
 8003e66:	4815      	ldr	r0, [pc, #84]	; (8003ebc <main+0x2e0>)
 8003e68:	f7ff fe08 	bl	8003a7c <huansic_xb_requestGameInfo>
					charge = Get_nearest_Beacon();
 8003e6c:	f002 fd62 	bl	8006934 <Get_nearest_Beacon>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <main+0x304>)
 8003e74:	6013      	str	r3, [r2, #0]
					GotoDestination(charge, 0);
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <main+0x304>)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f001 f950 	bl	8005120 <GotoDestination>
				while(myCharge < 500)
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <main+0x308>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e88:	dbed      	blt.n	8003e66 <main+0x28a>
				}
				if(task_mode == 1){
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <main+0x2e4>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d14d      	bne.n	8003f2e <main+0x352>
					for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	3301      	adds	r3, #1
 8003e96:	717b      	strb	r3, [r7, #5]
 8003e98:	e036      	b.n	8003f08 <main+0x32c>
 8003e9a:	bf00      	nop
 8003e9c:	200009a0 	.word	0x200009a0
 8003ea0:	20000a18 	.word	0x20000a18
 8003ea4:	20000800 	.word	0x20000800
 8003ea8:	0800d2c8 	.word	0x0800d2c8
 8003eac:	20000c2c 	.word	0x20000c2c
 8003eb0:	20000010 	.word	0x20000010
 8003eb4:	20000c18 	.word	0x20000c18
 8003eb8:	20000b7d 	.word	0x20000b7d
 8003ebc:	20000ae8 	.word	0x20000ae8
 8003ec0:	20000b7e 	.word	0x20000b7e
 8003ec4:	20000b7c 	.word	0x20000b7c
 8003ec8:	20007cd8 	.word	0x20007cd8
 8003ecc:	20000c3c 	.word	0x20000c3c
 8003ed0:	20000c40 	.word	0x20000c40
 8003ed4:	20000c0c 	.word	0x20000c0c
 8003ed8:	20000c08 	.word	0x20000c08
 8003edc:	20000c28 	.word	0x20000c28
 8003ee0:	20000c44 	.word	0x20000c44
 8003ee4:	20000c24 	.word	0x20000c24
					{
						orders.buffer[i - 1] = orders.buffer[i];
 8003ee8:	797b      	ldrb	r3, [r7, #5]
 8003eea:	797a      	ldrb	r2, [r7, #5]
 8003eec:	3a01      	subs	r2, #1
 8003eee:	4961      	ldr	r1, [pc, #388]	; (8004074 <main+0x498>)
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	440a      	add	r2, r1
 8003ef4:	495f      	ldr	r1, [pc, #380]	; (8004074 <main+0x498>)
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	3202      	adds	r2, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6013      	str	r3, [r2, #0]
					for(uint8_t i= merchant_index + 1; i < orders.length; i++)
 8003f02:	797b      	ldrb	r3, [r7, #5]
 8003f04:	3301      	adds	r3, #1
 8003f06:	717b      	strb	r3, [r7, #5]
 8003f08:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <main+0x498>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	797a      	ldrb	r2, [r7, #5]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d3ea      	bcc.n	8003ee8 <main+0x30c>
					}
					orders.length -= 1;
 8003f12:	4b58      	ldr	r3, [pc, #352]	; (8004074 <main+0x498>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <main+0x498>)
 8003f1c:	701a      	strb	r2, [r3, #0]
					Get_packet(merchant);
 8003f1e:	4b56      	ldr	r3, [pc, #344]	; (8004078 <main+0x49c>)
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	f002 fc81 	bl	8006828 <Get_packet>
					task_mode = 4;
 8003f26:	4b55      	ldr	r3, [pc, #340]	; (800407c <main+0x4a0>)
 8003f28:	2204      	movs	r2, #4
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e09c      	b.n	8004068 <main+0x48c>
				}
				else if(task_mode == 2){
 8003f2e:	4b53      	ldr	r3, [pc, #332]	; (800407c <main+0x4a0>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <main+0x36a>
					Send_packet(consumer);
 8003f36:	4b52      	ldr	r3, [pc, #328]	; (8004080 <main+0x4a4>)
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f002 fc81 	bl	8006840 <Send_packet>
					task_mode = 4;
 8003f3e:	4b4f      	ldr	r3, [pc, #316]	; (800407c <main+0x4a0>)
 8003f40:	2204      	movs	r2, #4
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e090      	b.n	8004068 <main+0x48c>
				}
				else if(task_mode == 4)// if task_mode == 4
 8003f46:	4b4d      	ldr	r3, [pc, #308]	; (800407c <main+0x4a0>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	f040 8089 	bne.w	8004062 <main+0x486>
				{
					merchant_index = Get_nearest_order();
 8003f50:	f001 f85e 	bl	8005010 <Get_nearest_order>
 8003f54:	4603      	mov	r3, r0
 8003f56:	71fb      	strb	r3, [r7, #7]
					if(merchant_index == -1)
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d104      	bne.n	8003f6c <main+0x390>
						merchant = myCoord;
 8003f62:	4a45      	ldr	r2, [pc, #276]	; (8004078 <main+0x49c>)
 8003f64:	4b47      	ldr	r3, [pc, #284]	; (8004084 <main+0x4a8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e009      	b.n	8003f80 <main+0x3a4>
					else
						merchant = orders.buffer[merchant_index];
 8003f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f70:	4941      	ldr	r1, [pc, #260]	; (8004078 <main+0x49c>)
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <main+0x498>)
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	460a      	mov	r2, r1
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	6010      	str	r0, [r2, #0]
					consumer = Get_nearest_consumer();
 8003f80:	f002 fc6a 	bl	8006858 <Get_nearest_consumer>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4a3e      	ldr	r2, [pc, #248]	; (8004080 <main+0x4a4>)
 8003f88:	6013      	str	r3, [r2, #0]

					if(delivering_num > 3){
 8003f8a:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <main+0x4ac>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d903      	bls.n	8003f9a <main+0x3be>
						task_mode = 2;
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <main+0x4a0>)
 8003f94:	2202      	movs	r2, #2
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e066      	b.n	8004068 <main+0x48c>
					}
					else if(merchant_index == -1)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d10e      	bne.n	8003fc2 <main+0x3e6>
					{
						if(delivering_num == 0){
 8003fa4:	4b38      	ldr	r3, [pc, #224]	; (8004088 <main+0x4ac>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <main+0x3de>
							chao_move_angle(0,0);
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f7fd ff30 	bl	8001e18 <chao_move_angle>
 8003fb8:	e056      	b.n	8004068 <main+0x48c>
						}
						else{
							task_mode = 2;
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <main+0x4a0>)
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e052      	b.n	8004068 <main+0x48c>
						}
					}
					else if(delivering_num == 0){
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <main+0x4ac>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <main+0x3f6>
						task_mode = 1;
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <main+0x4a0>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e04a      	b.n	8004068 <main+0x48c>
					}
					else if(gameStageTimeLeft < 10000 && delivering_num > 0){
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <main+0x4b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d807      	bhi.n	8003fee <main+0x412>
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <main+0x4ac>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <main+0x412>
						task_mode = 2;
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <main+0x4a0>)
 8003fe8:	2202      	movs	r2, #2
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e03c      	b.n	8004068 <main+0x48c>
					}
					else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <main+0x49c>)
 8003ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <main+0x4a8>)
 8003ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004002:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <main+0x49c>)
 8004008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800400c:	4619      	mov	r1, r3
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <main+0x4a8>)
 8004010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004014:	1acb      	subs	r3, r1, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfb8      	it	lt
 800401a:	425b      	neglt	r3, r3
 800401c:	441a      	add	r2, r3
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <main+0x4a4>)
 8004020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004024:	4619      	mov	r1, r3
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <main+0x4a8>)
 8004028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800402c:	1acb      	subs	r3, r1, r3
 800402e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004032:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <main+0x4a4>)
 8004038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800403c:	4618      	mov	r0, r3
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <main+0x4a8>)
 8004040:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004044:	1ac3      	subs	r3, r0, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfb8      	it	lt
 800404a:	425b      	neglt	r3, r3
 800404c:	440b      	add	r3, r1
 800404e:	429a      	cmp	r2, r3
 8004050:	da03      	bge.n	800405a <main+0x47e>
						task_mode = 1;
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <main+0x4a0>)
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e006      	b.n	8004068 <main+0x48c>
					}
					else{
						task_mode = 2;
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <main+0x4a0>)
 800405c:	2202      	movs	r2, #2
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e002      	b.n	8004068 <main+0x48c>
					}
				}
				else
					task_mode = 4;
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <main+0x4a0>)
 8004064:	2204      	movs	r2, #4
 8004066:	701a      	strb	r2, [r3, #0]
			while (gameStage == 2){			// second-half
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <main+0x4b4>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b02      	cmp	r3, #2
 800406e:	f43f af07 	beq.w	8003e80 <main+0x2a4>
		if(gameStatus == 0){		// if the game is not running
 8004072:	e601      	b.n	8003c78 <main+0x9c>
 8004074:	20007cd8 	.word	0x20007cd8
 8004078:	20000c3c 	.word	0x20000c3c
 800407c:	20000b7e 	.word	0x20000b7e
 8004080:	20000c40 	.word	0x20000c40
 8004084:	20000c0c 	.word	0x20000c0c
 8004088:	20000c08 	.word	0x20000c08
 800408c:	20000c28 	.word	0x20000c28
 8004090:	20000b7c 	.word	0x20000b7c

08004094 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b090      	sub	sp, #64	; 0x40
 8004098:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800409a:	f107 0318 	add.w	r3, r7, #24
 800409e:	2228      	movs	r2, #40	; 0x28
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f006 fd4a 	bl	800ab3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80040c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040c6:	2301      	movs	r3, #1
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040ca:	2302      	movs	r3, #2
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80040d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040da:	f107 0318 	add.w	r3, r7, #24
 80040de:	4618      	mov	r0, r3
 80040e0:	f004 f8be 	bl	8008260 <HAL_RCC_OscConfig>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <SystemClock_Config+0x5a>
			{
		Error_Handler();
 80040ea:	f000 fd7d 	bl	8004be8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80040ee:	230f      	movs	r3, #15
 80040f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040f2:	2302      	movs	r3, #2
 80040f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f004 fb2b 	bl	8008764 <HAL_RCC_ClockConfig>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <SystemClock_Config+0x84>
			{
		Error_Handler();
 8004114:	f000 fd68 	bl	8004be8 <Error_Handler>
	}
}
 8004118:	bf00      	nop
 800411a:	3740      	adds	r7, #64	; 0x40
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <MX_I2C1_Init+0x50>)
 8004126:	4a13      	ldr	r2, [pc, #76]	; (8004174 <MX_I2C1_Init+0x54>)
 8004128:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <MX_I2C1_Init+0x50>)
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <MX_I2C1_Init+0x58>)
 800412e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <MX_I2C1_Init+0x50>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <MX_I2C1_Init+0x50>)
 8004138:	2200      	movs	r2, #0
 800413a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <MX_I2C1_Init+0x50>)
 800413e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004142:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <MX_I2C1_Init+0x50>)
 8004146:	2200      	movs	r2, #0
 8004148:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <MX_I2C1_Init+0x50>)
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <MX_I2C1_Init+0x50>)
 8004152:	2200      	movs	r2, #0
 8004154:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <MX_I2C1_Init+0x50>)
 8004158:	2200      	movs	r2, #0
 800415a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800415c:	4804      	ldr	r0, [pc, #16]	; (8004170 <MX_I2C1_Init+0x50>)
 800415e:	f003 fc25 	bl	80079ac <HAL_I2C_Init>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8004168:	f000 fd3e 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000644 	.word	0x20000644
 8004174:	40005400 	.word	0x40005400
 8004178:	000186a0 	.word	0x000186a0

0800417c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b096      	sub	sp, #88	; 0x58
 8004180:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004182:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800419a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	60da      	str	r2, [r3, #12]
 80041a8:	611a      	str	r2, [r3, #16]
 80041aa:	615a      	str	r2, [r3, #20]
 80041ac:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	2220      	movs	r2, #32
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f006 fcc1 	bl	800ab3c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80041ba:	4b50      	ldr	r3, [pc, #320]	; (80042fc <MX_TIM1_Init+0x180>)
 80041bc:	4a50      	ldr	r2, [pc, #320]	; (8004300 <MX_TIM1_Init+0x184>)
 80041be:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80041c0:	4b4e      	ldr	r3, [pc, #312]	; (80042fc <MX_TIM1_Init+0x180>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c6:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <MX_TIM1_Init+0x180>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80041cc:	4b4b      	ldr	r3, [pc, #300]	; (80042fc <MX_TIM1_Init+0x180>)
 80041ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d4:	4b49      	ldr	r3, [pc, #292]	; (80042fc <MX_TIM1_Init+0x180>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80041da:	4b48      	ldr	r3, [pc, #288]	; (80042fc <MX_TIM1_Init+0x180>)
 80041dc:	2200      	movs	r2, #0
 80041de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041e0:	4b46      	ldr	r3, [pc, #280]	; (80042fc <MX_TIM1_Init+0x180>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80041e6:	4845      	ldr	r0, [pc, #276]	; (80042fc <MX_TIM1_Init+0x180>)
 80041e8:	f004 fc56 	bl	8008a98 <HAL_TIM_Base_Init>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 80041f2:	f000 fcf9 	bl	8004be8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041fa:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80041fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004200:	4619      	mov	r1, r3
 8004202:	483e      	ldr	r0, [pc, #248]	; (80042fc <MX_TIM1_Init+0x180>)
 8004204:	f005 f900 	bl	8009408 <HAL_TIM_ConfigClockSource>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 800420e:	f000 fceb 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004212:	483a      	ldr	r0, [pc, #232]	; (80042fc <MX_TIM1_Init+0x180>)
 8004214:	f004 fcf0 	bl	8008bf8 <HAL_TIM_PWM_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 800421e:	f000 fce3 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004226:	2300      	movs	r3, #0
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800422a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800422e:	4619      	mov	r1, r3
 8004230:	4832      	ldr	r0, [pc, #200]	; (80042fc <MX_TIM1_Init+0x180>)
 8004232:	f005 fcbb 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 800423c:	f000 fcd4 	bl	8004be8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004240:	2360      	movs	r3, #96	; 0x60
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004248:	2300      	movs	r3, #0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800424c:	2300      	movs	r3, #0
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004250:	2300      	movs	r3, #0
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004258:	2300      	movs	r3, #0
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800425c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004260:	2200      	movs	r2, #0
 8004262:	4619      	mov	r1, r3
 8004264:	4825      	ldr	r0, [pc, #148]	; (80042fc <MX_TIM1_Init+0x180>)
 8004266:	f005 f811 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 8004270:	f000 fcba 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004278:	2204      	movs	r2, #4
 800427a:	4619      	mov	r1, r3
 800427c:	481f      	ldr	r0, [pc, #124]	; (80042fc <MX_TIM1_Init+0x180>)
 800427e:	f005 f805 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8004288:	f000 fcae 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800428c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004290:	2208      	movs	r2, #8
 8004292:	4619      	mov	r1, r3
 8004294:	4819      	ldr	r0, [pc, #100]	; (80042fc <MX_TIM1_Init+0x180>)
 8004296:	f004 fff9 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 80042a0:	f000 fca2 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a8:	220c      	movs	r2, #12
 80042aa:	4619      	mov	r1, r3
 80042ac:	4813      	ldr	r0, [pc, #76]	; (80042fc <MX_TIM1_Init+0x180>)
 80042ae:	f004 ffed 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 80042b8:	f000 fc96 	bl	8004be8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042d4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4807      	ldr	r0, [pc, #28]	; (80042fc <MX_TIM1_Init+0x180>)
 80042e0:	f005 fcd0 	bl	8009c84 <HAL_TIMEx_ConfigBreakDeadTime>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 80042ea:	f000 fc7d 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80042ee:	4803      	ldr	r0, [pc, #12]	; (80042fc <MX_TIM1_Init+0x180>)
 80042f0:	f001 ffb8 	bl	8006264 <HAL_TIM_MspPostInit>

}
 80042f4:	bf00      	nop
 80042f6:	3758      	adds	r7, #88	; 0x58
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000698 	.word	0x20000698
 8004300:	40012c00 	.word	0x40012c00

08004304 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	; 0x30
 8004308:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f006 fc12 	bl	800ab3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <MX_TIM2_Init+0xa4>)
 8004322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004326:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <MX_TIM2_Init+0xa4>)
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <MX_TIM2_Init+0xa4>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <MX_TIM2_Init+0xa4>)
 8004336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <MX_TIM2_Init+0xa4>)
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <MX_TIM2_Init+0xa4>)
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004348:	2301      	movs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004360:	2301      	movs	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004364:	2300      	movs	r3, #0
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	4619      	mov	r1, r3
 8004372:	480d      	ldr	r0, [pc, #52]	; (80043a8 <MX_TIM2_Init+0xa4>)
 8004374:	f004 fd52 	bl	8008e1c <HAL_TIM_Encoder_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 800437e:	f000 fc33 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4806      	ldr	r0, [pc, #24]	; (80043a8 <MX_TIM2_Init+0xa4>)
 8004390:	f005 fc0c 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 800439a:	f000 fc25 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800439e:	bf00      	nop
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200006e0 	.word	0x200006e0

080043ac <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08c      	sub	sp, #48	; 0x30
 80043b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80043b2:	f107 030c 	add.w	r3, r7, #12
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f006 fbbe 	bl	800ab3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <MX_TIM3_Init+0xa0>)
 80043ca:	4a21      	ldr	r2, [pc, #132]	; (8004450 <MX_TIM3_Init+0xa4>)
 80043cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <MX_TIM3_Init+0xa0>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	; (800444c <MX_TIM3_Init+0xa0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <MX_TIM3_Init+0xa0>)
 80043dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e2:	4b1a      	ldr	r3, [pc, #104]	; (800444c <MX_TIM3_Init+0xa0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <MX_TIM3_Init+0xa0>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004406:	2301      	movs	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004412:	f107 030c 	add.w	r3, r7, #12
 8004416:	4619      	mov	r1, r3
 8004418:	480c      	ldr	r0, [pc, #48]	; (800444c <MX_TIM3_Init+0xa0>)
 800441a:	f004 fcff 	bl	8008e1c <HAL_TIM_Encoder_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 8004424:	f000 fbe0 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4805      	ldr	r0, [pc, #20]	; (800444c <MX_TIM3_Init+0xa0>)
 8004436:	f005 fbb9 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8004440:	f000 fbd2 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8004444:	bf00      	nop
 8004446:	3730      	adds	r7, #48	; 0x30
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000728 	.word	0x20000728
 8004450:	40000400 	.word	0x40000400

08004454 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f006 fb6a 	bl	800ab3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <MX_TIM4_Init+0xa0>)
 8004472:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <MX_TIM4_Init+0xa4>)
 8004474:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <MX_TIM4_Init+0xa0>)
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <MX_TIM4_Init+0xa0>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <MX_TIM4_Init+0xa0>)
 8004484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004488:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <MX_TIM4_Init+0xa0>)
 800448c:	2200      	movs	r2, #0
 800448e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <MX_TIM4_Init+0xa0>)
 8004492:	2200      	movs	r2, #0
 8004494:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004496:	2301      	movs	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800449e:	2301      	movs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044ae:	2301      	movs	r3, #1
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	4619      	mov	r1, r3
 80044c0:	480c      	ldr	r0, [pc, #48]	; (80044f4 <MX_TIM4_Init+0xa0>)
 80044c2:	f004 fcab 	bl	8008e1c <HAL_TIM_Encoder_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 80044cc:	f000 fb8c 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4805      	ldr	r0, [pc, #20]	; (80044f4 <MX_TIM4_Init+0xa0>)
 80044de:	f005 fb65 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 80044e8:	f000 fb7e 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80044ec:	bf00      	nop
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000770 	.word	0x20000770
 80044f8:	40000800 	.word	0x40000800

080044fc <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f006 fb16 	bl	800ab3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <MX_TIM5_Init+0xa0>)
 800451a:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <MX_TIM5_Init+0xa4>)
 800451c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <MX_TIM5_Init+0xa0>)
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <MX_TIM5_Init+0xa0>)
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <MX_TIM5_Init+0xa0>)
 800452c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004530:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004532:	4b1a      	ldr	r3, [pc, #104]	; (800459c <MX_TIM5_Init+0xa0>)
 8004534:	2200      	movs	r2, #0
 8004536:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004538:	4b18      	ldr	r3, [pc, #96]	; (800459c <MX_TIM5_Init+0xa0>)
 800453a:	2200      	movs	r2, #0
 800453c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800453e:	2301      	movs	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004552:	2300      	movs	r3, #0
 8004554:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004556:	2301      	movs	r3, #1
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800455a:	2300      	movs	r3, #0
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004562:	f107 030c 	add.w	r3, r7, #12
 8004566:	4619      	mov	r1, r3
 8004568:	480c      	ldr	r0, [pc, #48]	; (800459c <MX_TIM5_Init+0xa0>)
 800456a:	f004 fc57 	bl	8008e1c <HAL_TIM_Encoder_Init>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 8004574:	f000 fb38 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004578:	2300      	movs	r3, #0
 800457a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <MX_TIM5_Init+0xa0>)
 8004586:	f005 fb11 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 8004590:	f000 fb2a 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8004594:	bf00      	nop
 8004596:	3730      	adds	r7, #48	; 0x30
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	200007b8 	.word	0x200007b8
 80045a0:	40000c00 	.word	0x40000c00

080045a4 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80045aa:	463b      	mov	r3, r7
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <MX_TIM6_Init+0x64>)
 80045b4:	4a15      	ldr	r2, [pc, #84]	; (800460c <MX_TIM6_Init+0x68>)
 80045b6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <MX_TIM6_Init+0x64>)
 80045ba:	2247      	movs	r2, #71	; 0x47
 80045bc:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <MX_TIM6_Init+0x64>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <MX_TIM6_Init+0x64>)
 80045c6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80045ca:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <MX_TIM6_Init+0x64>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <MX_TIM6_Init+0x64>)
 80045d4:	f004 fa60 	bl	8008a98 <HAL_TIM_Base_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 80045de:	f000 fb03 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80045ea:	463b      	mov	r3, r7
 80045ec:	4619      	mov	r1, r3
 80045ee:	4806      	ldr	r0, [pc, #24]	; (8004608 <MX_TIM6_Init+0x64>)
 80045f0:	f005 fadc 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 80045fa:	f000 faf5 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000800 	.word	0x20000800
 800460c:	40001000 	.word	0x40001000

08004610 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b096      	sub	sp, #88	; 0x58
 8004614:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800462e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	60da      	str	r2, [r3, #12]
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	615a      	str	r2, [r3, #20]
 8004640:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004642:	1d3b      	adds	r3, r7, #4
 8004644:	2220      	movs	r2, #32
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f006 fa77 	bl	800ab3c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800464e:	4b50      	ldr	r3, [pc, #320]	; (8004790 <MX_TIM8_Init+0x180>)
 8004650:	4a50      	ldr	r2, [pc, #320]	; (8004794 <MX_TIM8_Init+0x184>)
 8004652:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8004654:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <MX_TIM8_Init+0x180>)
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800465a:	4b4d      	ldr	r3, [pc, #308]	; (8004790 <MX_TIM8_Init+0x180>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <MX_TIM8_Init+0x180>)
 8004662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004666:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004668:	4b49      	ldr	r3, [pc, #292]	; (8004790 <MX_TIM8_Init+0x180>)
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800466e:	4b48      	ldr	r3, [pc, #288]	; (8004790 <MX_TIM8_Init+0x180>)
 8004670:	2200      	movs	r2, #0
 8004672:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004674:	4b46      	ldr	r3, [pc, #280]	; (8004790 <MX_TIM8_Init+0x180>)
 8004676:	2200      	movs	r2, #0
 8004678:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800467a:	4845      	ldr	r0, [pc, #276]	; (8004790 <MX_TIM8_Init+0x180>)
 800467c:	f004 fa0c 	bl	8008a98 <HAL_TIM_Base_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 8004686:	f000 faaf 	bl	8004be8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800468a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004694:	4619      	mov	r1, r3
 8004696:	483e      	ldr	r0, [pc, #248]	; (8004790 <MX_TIM8_Init+0x180>)
 8004698:	f004 feb6 	bl	8009408 <HAL_TIM_ConfigClockSource>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 80046a2:	f000 faa1 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80046a6:	483a      	ldr	r0, [pc, #232]	; (8004790 <MX_TIM8_Init+0x180>)
 80046a8:	f004 faa6 	bl	8008bf8 <HAL_TIM_PWM_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 80046b2:	f000 fa99 	bl	8004be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80046be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046c2:	4619      	mov	r1, r3
 80046c4:	4832      	ldr	r0, [pc, #200]	; (8004790 <MX_TIM8_Init+0x180>)
 80046c6:	f005 fa71 	bl	8009bac <HAL_TIMEx_MasterConfigSynchronization>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 80046d0:	f000 fa8a 	bl	8004be8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046d4:	2360      	movs	r3, #96	; 0x60
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046dc:	2300      	movs	r3, #0
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046e0:	2300      	movs	r3, #0
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046e8:	2300      	movs	r3, #0
 80046ea:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046ec:	2300      	movs	r3, #0
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f4:	2200      	movs	r2, #0
 80046f6:	4619      	mov	r1, r3
 80046f8:	4825      	ldr	r0, [pc, #148]	; (8004790 <MX_TIM8_Init+0x180>)
 80046fa:	f004 fdc7 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 8004704:	f000 fa70 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800470c:	2204      	movs	r2, #4
 800470e:	4619      	mov	r1, r3
 8004710:	481f      	ldr	r0, [pc, #124]	; (8004790 <MX_TIM8_Init+0x180>)
 8004712:	f004 fdbb 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 800471c:	f000 fa64 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004724:	2208      	movs	r2, #8
 8004726:	4619      	mov	r1, r3
 8004728:	4819      	ldr	r0, [pc, #100]	; (8004790 <MX_TIM8_Init+0x180>)
 800472a:	f004 fdaf 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 8004734:	f000 fa58 	bl	8004be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473c:	220c      	movs	r2, #12
 800473e:	4619      	mov	r1, r3
 8004740:	4813      	ldr	r0, [pc, #76]	; (8004790 <MX_TIM8_Init+0x180>)
 8004742:	f004 fda3 	bl	800928c <HAL_TIM_PWM_ConfigChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 800474c:	f000 fa4c 	bl	8004be8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004768:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800476e:	1d3b      	adds	r3, r7, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4807      	ldr	r0, [pc, #28]	; (8004790 <MX_TIM8_Init+0x180>)
 8004774:	f005 fa86 	bl	8009c84 <HAL_TIMEx_ConfigBreakDeadTime>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 800477e:	f000 fa33 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8004782:	4803      	ldr	r0, [pc, #12]	; (8004790 <MX_TIM8_Init+0x180>)
 8004784:	f001 fd6e 	bl	8006264 <HAL_TIM_MspPostInit>

}
 8004788:	bf00      	nop
 800478a:	3758      	adds	r7, #88	; 0x58
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000848 	.word	0x20000848
 8004794:	40013400 	.word	0x40013400

08004798 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 800479e:	4a12      	ldr	r2, [pc, #72]	; (80047e8 <MX_USART2_UART_Init+0x50>)
 80047a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047be:	220c      	movs	r2, #12
 80047c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80047ce:	4805      	ldr	r0, [pc, #20]	; (80047e4 <MX_USART2_UART_Init+0x4c>)
 80047d0:	f005 fabb 	bl	8009d4a <HAL_UART_Init>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 80047da:	f000 fa05 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000890 	.word	0x20000890
 80047e8:	40004400 	.word	0x40004400

080047ec <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <MX_USART3_UART_Init+0x50>)
 80047f4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 80047f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047fc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047fe:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 8004800:	2200      	movs	r2, #0
 8004802:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 8004806:	2200      	movs	r2, #0
 8004808:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 800480c:	2200      	movs	r2, #0
 800480e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 8004812:	220c      	movs	r2, #12
 8004814:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 8004818:	2200      	movs	r2, #0
 800481a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004822:	4805      	ldr	r0, [pc, #20]	; (8004838 <MX_USART3_UART_Init+0x4c>)
 8004824:	f005 fa91 	bl	8009d4a <HAL_UART_Init>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 800482e:	f000 f9db 	bl	8004be8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200008d4 	.word	0x200008d4
 800483c:	40004800 	.word	0x40004800

08004840 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <MX_DMA_Init+0x48>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <MX_DMA_Init+0x48>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6153      	str	r3, [r2, #20]
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <MX_DMA_Init+0x48>)
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2103      	movs	r1, #3
 8004862:	200d      	movs	r0, #13
 8004864:	f002 fa3d 	bl	8006ce2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004868:	200d      	movs	r0, #13
 800486a:	f002 fa56 	bl	8006d1a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 800486e:	2200      	movs	r2, #0
 8004870:	2103      	movs	r1, #3
 8004872:	2010      	movs	r0, #16
 8004874:	f002 fa35 	bl	8006ce2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004878:	2010      	movs	r0, #16
 800487a:	f002 fa4e 	bl	8006d1a <HAL_NVIC_EnableIRQ>

}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000

0800488c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004892:	f107 0310 	add.w	r3, r7, #16
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	609a      	str	r2, [r3, #8]
 800489e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80048a0:	4b23      	ldr	r3, [pc, #140]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	4a22      	ldr	r2, [pc, #136]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	6193      	str	r3, [r2, #24]
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	6193      	str	r3, [r2, #24]
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	4a16      	ldr	r2, [pc, #88]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048d6:	f043 0308 	orr.w	r3, r3, #8
 80048da:	6193      	str	r3, [r2, #24]
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	4a10      	ldr	r2, [pc, #64]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048ee:	f043 0310 	orr.w	r3, r3, #16
 80048f2:	6193      	str	r3, [r2, #24]
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <MX_GPIO_Init+0xa4>)
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8004900:	2200      	movs	r2, #0
 8004902:	2107      	movs	r1, #7
 8004904:	480b      	ldr	r0, [pc, #44]	; (8004934 <MX_GPIO_Init+0xa8>)
 8004906:	f003 f839 	bl	800797c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 800490a:	2307      	movs	r3, #7
 800490c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2302      	movs	r3, #2
 8004918:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	4619      	mov	r1, r3
 8004920:	4804      	ldr	r0, [pc, #16]	; (8004934 <MX_GPIO_Init+0xa8>)
 8004922:	f002 fe97 	bl	8007654 <HAL_GPIO_Init>

}
 8004926:	bf00      	nop
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	40010c00 	.word	0x40010c00

08004938 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <HUAN_MOTOR1_Init+0x50>)
 8004940:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <HUAN_MOTOR1_Init+0x54>)
 8004946:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 800494a:	4a11      	ldr	r2, [pc, #68]	; (8004990 <HUAN_MOTOR1_Init+0x58>)
 800494c:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 8004950:	220c      	movs	r2, #12
 8004952:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 8004956:	4a0e      	ldr	r2, [pc, #56]	; (8004990 <HUAN_MOTOR1_Init+0x58>)
 8004958:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 800495c:	2208      	movs	r2, #8
 800495e:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <HUAN_MOTOR1_Init+0x5c>)
 800496c:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 8004970:	4a09      	ldr	r2, [pc, #36]	; (8004998 <HUAN_MOTOR1_Init+0x60>)
 8004972:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HUAN_MOTOR1_Init+0x64>)
 8004978:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 800497a:	4802      	ldr	r0, [pc, #8]	; (8004984 <HUAN_MOTOR1_Init+0x4c>)
 800497c:	f7fe f8da 	bl	8002b34 <huansic_motor_init>
}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}
 8004984:	200009a0 	.word	0x200009a0
 8004988:	200006e0 	.word	0x200006e0
 800498c:	3d4ccccd 	.word	0x3d4ccccd
 8004990:	20000698 	.word	0x20000698
 8004994:	399d4952 	.word	0x399d4952
 8004998:	37a7c5ac 	.word	0x37a7c5ac
 800499c:	387ba882 	.word	0x387ba882

080049a0 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049a6:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <HUAN_MOTOR2_Init+0x50>)
 80049a8:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049ac:	4a11      	ldr	r2, [pc, #68]	; (80049f4 <HUAN_MOTOR2_Init+0x54>)
 80049ae:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <HUAN_MOTOR2_Init+0x58>)
 80049b4:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <HUAN_MOTOR2_Init+0x58>)
 80049c0:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049c4:	2204      	movs	r2, #4
 80049c6:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <HUAN_MOTOR2_Init+0x5c>)
 80049d4:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <HUAN_MOTOR2_Init+0x60>)
 80049da:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049de:	4a09      	ldr	r2, [pc, #36]	; (8004a04 <HUAN_MOTOR2_Init+0x64>)
 80049e0:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80049e2:	4802      	ldr	r0, [pc, #8]	; (80049ec <HUAN_MOTOR2_Init+0x4c>)
 80049e4:	f7fe f8a6 	bl	8002b34 <huansic_motor_init>
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	200009dc 	.word	0x200009dc
 80049f0:	20000770 	.word	0x20000770
 80049f4:	3d4ccccd 	.word	0x3d4ccccd
 80049f8:	20000698 	.word	0x20000698
 80049fc:	399d4952 	.word	0x399d4952
 8004a00:	37a7c5ac 	.word	0x37a7c5ac
 8004a04:	387ba882 	.word	0x387ba882

08004a08 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <HUAN_MOTOR3_Init+0x50>)
 8004a10:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HUAN_MOTOR3_Init+0x54>)
 8004a16:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a1a:	4a11      	ldr	r2, [pc, #68]	; (8004a60 <HUAN_MOTOR3_Init+0x58>)
 8004a1c:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a20:	220c      	movs	r2, #12
 8004a22:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HUAN_MOTOR3_Init+0x58>)
 8004a28:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <HUAN_MOTOR3_Init+0x5c>)
 8004a3c:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <HUAN_MOTOR3_Init+0x60>)
 8004a42:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <HUAN_MOTOR3_Init+0x64>)
 8004a48:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8004a4a:	4802      	ldr	r0, [pc, #8]	; (8004a54 <HUAN_MOTOR3_Init+0x4c>)
 8004a4c:	f7fe f872 	bl	8002b34 <huansic_motor_init>
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000a18 	.word	0x20000a18
 8004a58:	20000728 	.word	0x20000728
 8004a5c:	3d4ccccd 	.word	0x3d4ccccd
 8004a60:	20000848 	.word	0x20000848
 8004a64:	399d4952 	.word	0x399d4952
 8004a68:	37a7c5ac 	.word	0x37a7c5ac
 8004a6c:	387ba882 	.word	0x387ba882

08004a70 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <HUAN_MOTOR4_Init+0x50>)
 8004a78:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a7c:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HUAN_MOTOR4_Init+0x54>)
 8004a7e:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a82:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <HUAN_MOTOR4_Init+0x58>)
 8004a84:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <HUAN_MOTOR4_Init+0x58>)
 8004a90:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a94:	2204      	movs	r2, #4
 8004a96:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <HUAN_MOTOR4_Init+0x5c>)
 8004aa4:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HUAN_MOTOR4_Init+0x60>)
 8004aaa:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <HUAN_MOTOR4_Init+0x64>)
 8004ab0:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 8004ab2:	4802      	ldr	r0, [pc, #8]	; (8004abc <HUAN_MOTOR4_Init+0x4c>)
 8004ab4:	f7fe f83e 	bl	8002b34 <huansic_motor_init>
}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000a54 	.word	0x20000a54
 8004ac0:	200007b8 	.word	0x200007b8
 8004ac4:	3d4ccccd 	.word	0x3d4ccccd
 8004ac8:	20000848 	.word	0x20000848
 8004acc:	399d4952 	.word	0x399d4952
 8004ad0:	37a7c5ac 	.word	0x37a7c5ac
 8004ad4:	387ba882 	.word	0x387ba882

08004ad8 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HUAN_IMU_Init+0x1c>)
 8004ade:	4a06      	ldr	r2, [pc, #24]	; (8004af8 <HUAN_IMU_Init+0x20>)
 8004ae0:	601a      	str	r2, [r3, #0]
	himu.hdma = &hdma_usart3_rx;
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <HUAN_IMU_Init+0x1c>)
 8004ae4:	4a05      	ldr	r2, [pc, #20]	; (8004afc <HUAN_IMU_Init+0x24>)
 8004ae6:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <HUAN_IMU_Init+0x1c>)
 8004aea:	f7fd fc5b 	bl	80023a4 <huansic_jy62_init>
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000a90 	.word	0x20000a90
 8004af8:	200008d4 	.word	0x200008d4
 8004afc:	2000095c 	.word	0x2000095c

08004b00 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	hxb.huart = &huart2;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HUAN_ZIGBEE_Init+0x1c>)
 8004b06:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <HUAN_ZIGBEE_Init+0x20>)
 8004b08:	601a      	str	r2, [r3, #0]
	hxb.hdma = &hdma_usart2_rx;
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HUAN_ZIGBEE_Init+0x1c>)
 8004b0c:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HUAN_ZIGBEE_Init+0x24>)
 8004b0e:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 8004b10:	4802      	ldr	r0, [pc, #8]	; (8004b1c <HUAN_ZIGBEE_Init+0x1c>)
 8004b12:	f7fe fa37 	bl	8002f84 <huansic_xb_init>
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000ae8 	.word	0x20000ae8
 8004b20:	20000890 	.word	0x20000890
 8004b24:	20000918 	.word	0x20000918

08004b28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004b30:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <HAL_UART_RxCpltCallback+0x58>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10c      	bne.n	8004b54 <HAL_UART_RxCpltCallback+0x2c>
		if (himu.pending_alignment)
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <HAL_UART_RxCpltCallback+0x58>)
 8004b3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 8004b44:	480e      	ldr	r0, [pc, #56]	; (8004b80 <HAL_UART_RxCpltCallback+0x58>)
 8004b46:	f7fd fd83 	bl	8002650 <huansic_jy62_isr>
		if(hxb.pending_alignment)
			huansic_xb_isr(&hxb);
		else
			huansic_xb_dma_isr(&hxb);
	}
}
 8004b4a:	e014      	b.n	8004b76 <HAL_UART_RxCpltCallback+0x4e>
			huansic_jy62_dma_isr(&himu);
 8004b4c:	480c      	ldr	r0, [pc, #48]	; (8004b80 <HAL_UART_RxCpltCallback+0x58>)
 8004b4e:	f7fd fc5f 	bl	8002410 <huansic_jy62_dma_isr>
}
 8004b52:	e010      	b.n	8004b76 <HAL_UART_RxCpltCallback+0x4e>
	} else if (hxb.huart == huart) {
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_UART_RxCpltCallback+0x5c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d10b      	bne.n	8004b76 <HAL_UART_RxCpltCallback+0x4e>
		if(hxb.pending_alignment)
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_UART_RxCpltCallback+0x5c>)
 8004b60:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_UART_RxCpltCallback+0x48>
			huansic_xb_isr(&hxb);
 8004b68:	4806      	ldr	r0, [pc, #24]	; (8004b84 <HAL_UART_RxCpltCallback+0x5c>)
 8004b6a:	f7fe ffd7 	bl	8003b1c <huansic_xb_isr>
}
 8004b6e:	e002      	b.n	8004b76 <HAL_UART_RxCpltCallback+0x4e>
			huansic_xb_dma_isr(&hxb);
 8004b70:	4804      	ldr	r0, [pc, #16]	; (8004b84 <HAL_UART_RxCpltCallback+0x5c>)
 8004b72:	f7ff f819 	bl	8003ba8 <huansic_xb_dma_isr>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000a90 	.word	0x20000a90
 8004b84:	20000ae8 	.word	0x20000ae8

08004b88 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_UART_ErrorCallback+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d10c      	bne.n	8004bb4 <HAL_UART_ErrorCallback+0x2c>
		if (himu.pending_alignment)
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <HAL_UART_ErrorCallback+0x58>)
 8004b9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8004ba4:	480e      	ldr	r0, [pc, #56]	; (8004be0 <HAL_UART_ErrorCallback+0x58>)
 8004ba6:	f7fd fd9e 	bl	80026e6 <huansic_jy62_error>
		if (hxb.pending_alignment)
			huansic_xb_it_error(&hxb);
		else
			huansic_xb_dma_error(&hxb);
	}
}
 8004baa:	e014      	b.n	8004bd6 <HAL_UART_ErrorCallback+0x4e>
			huansic_jy62_dma_error(&himu);
 8004bac:	480c      	ldr	r0, [pc, #48]	; (8004be0 <HAL_UART_ErrorCallback+0x58>)
 8004bae:	f7fd fd86 	bl	80026be <huansic_jy62_dma_error>
}
 8004bb2:	e010      	b.n	8004bd6 <HAL_UART_ErrorCallback+0x4e>
	} else if (hxb.huart == huart) {
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_UART_ErrorCallback+0x5c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_UART_ErrorCallback+0x4e>
		if (hxb.pending_alignment)
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_UART_ErrorCallback+0x5c>)
 8004bc0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_UART_ErrorCallback+0x48>
			huansic_xb_it_error(&hxb);
 8004bc8:	4806      	ldr	r0, [pc, #24]	; (8004be4 <HAL_UART_ErrorCallback+0x5c>)
 8004bca:	f7fe ff8f 	bl	8003aec <huansic_xb_it_error>
}
 8004bce:	e002      	b.n	8004bd6 <HAL_UART_ErrorCallback+0x4e>
			huansic_xb_dma_error(&hxb);
 8004bd0:	4804      	ldr	r0, [pc, #16]	; (8004be4 <HAL_UART_ErrorCallback+0x5c>)
 8004bd2:	f7fe ff77 	bl	8003ac4 <huansic_xb_dma_error>
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000a90 	.word	0x20000a90
 8004be4:	20000ae8 	.word	0x20000ae8

08004be8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004bf0:	e7fe      	b.n	8004bf0 <Error_Handler+0x8>
	...

08004bf4 <Lane_init>:
	closelist.Head = 0;
	closelist.Tail = 0;
	closelist.Length = 0;
}

void Lane_init(void){
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
	pathlane.Head = 0;
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <Lane_init+0x18>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 0;
 8004bfe:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <Lane_init+0x18>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	805a      	strh	r2, [r3, #2]
}
 8004c04:	bf00      	nop
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	20007c54 	.word	0x20007c54

08004c10 <queue_append>:

uint8_t queue_append(A_Star_Node* node)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	if (openlist.Length + openlist.Head >= QUEUE_SIZE)
 8004c18:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <queue_append+0x110>)
 8004c1a:	885b      	ldrh	r3, [r3, #2]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <queue_append+0x110>)
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	4413      	add	r3, r2
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	db01      	blt.n	8004c2e <queue_append+0x1e>
	{
		return 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e073      	b.n	8004d16 <queue_append+0x106>
	}
	else
	{
		uint16_t i = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	82fb      	strh	r3, [r7, #22]
		while (i < openlist.Length)
 8004c32:	e052      	b.n	8004cda <queue_append+0xca>
		{
			if (openlist.buffer[i + openlist.Head].total <= node->total)
 8004c34:	8afb      	ldrh	r3, [r7, #22]
 8004c36:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <queue_append+0x110>)
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	441a      	add	r2, r3
 8004c3c:	4938      	ldr	r1, [pc, #224]	; (8004d20 <queue_append+0x110>)
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc fa6b 	bl	8001130 <__aeabi_fcmple>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <queue_append+0x58>
			{
				i++;
 8004c60:	8afb      	ldrh	r3, [r7, #22]
 8004c62:	3301      	adds	r3, #1
 8004c64:	82fb      	strh	r3, [r7, #22]
 8004c66:	e038      	b.n	8004cda <queue_append+0xca>
			}
			else
			{
				A_Star_Node change;
				while (i < openlist.Length + 1)
 8004c68:	e02a      	b.n	8004cc0 <queue_append+0xb0>
				{
					change = openlist.buffer[i + openlist.Head];
 8004c6a:	8afb      	ldrh	r3, [r7, #22]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	; (8004d20 <queue_append+0x110>)
 8004c6e:	8812      	ldrh	r2, [r2, #0]
 8004c70:	441a      	add	r2, r3
 8004c72:	492b      	ldr	r1, [pc, #172]	; (8004d20 <queue_append+0x110>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	18ca      	adds	r2, r1, r3
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	3204      	adds	r2, #4
 8004c84:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					openlist.buffer[i + openlist.Head] = *node;
 8004c8a:	8afb      	ldrh	r3, [r7, #22]
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <queue_append+0x110>)
 8004c8e:	8812      	ldrh	r2, [r2, #0]
 8004c90:	441a      	add	r2, r3
 8004c92:	4923      	ldr	r1, [pc, #140]	; (8004d20 <queue_append+0x110>)
 8004c94:	4613      	mov	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	6810      	ldr	r0, [r2, #0]
 8004ca4:	6851      	ldr	r1, [r2, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	c307      	stmia	r3!, {r0, r1, r2}
					*node = change;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	461c      	mov	r4, r3
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004cb4:	6020      	str	r0, [r4, #0]
 8004cb6:	6061      	str	r1, [r4, #4]
 8004cb8:	60a2      	str	r2, [r4, #8]
					i++;
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	82fb      	strh	r3, [r7, #22]
				while (i < openlist.Length + 1)
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <queue_append+0x110>)
 8004cc2:	885b      	ldrh	r3, [r3, #2]
 8004cc4:	8afa      	ldrh	r2, [r7, #22]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d9cf      	bls.n	8004c6a <queue_append+0x5a>
				}
				openlist.Length += 1;
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <queue_append+0x110>)
 8004ccc:	885b      	ldrh	r3, [r3, #2]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <queue_append+0x110>)
 8004cd4:	805a      	strh	r2, [r3, #2]
				return 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e01d      	b.n	8004d16 <queue_append+0x106>
		while (i < openlist.Length)
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <queue_append+0x110>)
 8004cdc:	885b      	ldrh	r3, [r3, #2]
 8004cde:	8afa      	ldrh	r2, [r7, #22]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3a7      	bcc.n	8004c34 <queue_append+0x24>
			}
		}
		openlist.buffer[openlist.Head + openlist.Length] = *node;
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <queue_append+0x110>)
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <queue_append+0x110>)
 8004cec:	885b      	ldrh	r3, [r3, #2]
 8004cee:	441a      	add	r2, r3
 8004cf0:	490b      	ldr	r1, [pc, #44]	; (8004d20 <queue_append+0x110>)
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	6810      	ldr	r0, [r2, #0]
 8004d02:	6851      	ldr	r1, [r2, #4]
 8004d04:	6892      	ldr	r2, [r2, #8]
 8004d06:	c307      	stmia	r3!, {r0, r1, r2}
		openlist.Length++;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <queue_append+0x110>)
 8004d0a:	885b      	ldrh	r3, [r3, #2]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <queue_append+0x110>)
 8004d12:	805a      	strh	r2, [r3, #2]
		return 1;
 8004d14:	2301      	movs	r3, #1
	}
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd90      	pop	{r4, r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000c48 	.word	0x20000c48

08004d24 <list_append>:

uint8_t list_append(uint16_t c)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
	if (closelist.Length >= LIST_SIZE)
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <list_append+0x58>)
 8004d30:	889b      	ldrh	r3, [r3, #4]
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d36:	d301      	bcc.n	8004d3c <list_append+0x18>
	{
		return 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e01a      	b.n	8004d72 <list_append+0x4e>
	}
	else
	{
		closelist.buffer[closelist.Tail] = c;
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <list_append+0x58>)
 8004d3e:	885b      	ldrh	r3, [r3, #2]
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <list_append+0x58>)
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	80da      	strh	r2, [r3, #6]
		closelist.Tail = (closelist.Tail + 1) % LIST_SIZE;
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <list_append+0x58>)
 8004d4c:	885b      	ldrh	r3, [r3, #2]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	425a      	negs	r2, r3
 8004d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d56:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004d5a:	bf58      	it	pl
 8004d5c:	4253      	negpl	r3, r2
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <list_append+0x58>)
 8004d62:	805a      	strh	r2, [r3, #2]
		closelist.Length++;
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <list_append+0x58>)
 8004d66:	889b      	ldrh	r3, [r3, #4]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <list_append+0x58>)
 8004d6e:	809a      	strh	r2, [r3, #4]
		return 1;
 8004d70:	2301      	movs	r3, #1
	}
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	20006c4c 	.word	0x20006c4c

08004d80 <queue_top>:

uint16_t queue_top()
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	if (openlist.Length > 0)
 8004d84:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <queue_top+0x3c>)
 8004d86:	885b      	ldrh	r3, [r3, #2]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <queue_top+0x2e>
	{
		openlist.Head++;
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <queue_top+0x3c>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <queue_top+0x3c>)
 8004d96:	801a      	strh	r2, [r3, #0]
		openlist.Length--;
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <queue_top+0x3c>)
 8004d9a:	885b      	ldrh	r3, [r3, #2]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <queue_top+0x3c>)
 8004da2:	805a      	strh	r2, [r3, #2]
		return openlist.Head - 1;
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <queue_top+0x3c>)
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	e001      	b.n	8004db2 <queue_top+0x32>
	}
	else {
		return 65535;
 8004dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000c48 	.word	0x20000c48

08004dc0 <findin_queue>:

uint16_t findin_queue(uint16_t c)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < openlist.Length; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	81fb      	strh	r3, [r7, #14]
 8004dce:	e017      	b.n	8004e00 <findin_queue+0x40>
	{
		if (openlist.buffer[i + openlist.Head].cor == c) return (i + openlist.Head);
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
 8004dd2:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <findin_queue+0x58>)
 8004dd4:	8812      	ldrh	r2, [r2, #0]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	490f      	ldr	r1, [pc, #60]	; (8004e18 <findin_queue+0x58>)
 8004dda:	4613      	mov	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	3304      	adds	r3, #4
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d105      	bne.n	8004dfa <findin_queue+0x3a>
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <findin_queue+0x58>)
 8004df0:	881a      	ldrh	r2, [r3, #0]
 8004df2:	89fb      	ldrh	r3, [r7, #14]
 8004df4:	4413      	add	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	e008      	b.n	8004e0c <findin_queue+0x4c>
	for (i = 0; i < openlist.Length; i++)
 8004dfa:	89fb      	ldrh	r3, [r7, #14]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	81fb      	strh	r3, [r7, #14]
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <findin_queue+0x58>)
 8004e02:	885b      	ldrh	r3, [r3, #2]
 8004e04:	89fa      	ldrh	r2, [r7, #14]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3e2      	bcc.n	8004dd0 <findin_queue+0x10>
	}
	return 0;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000c48 	.word	0x20000c48

08004e1c <findin_list>:
	}
	return 0;
}

uint8_t findin_list(uint16_t c)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < closelist.Length; i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	81fb      	strh	r3, [r7, #14]
 8004e2a:	e00f      	b.n	8004e4c <findin_list+0x30>
	{
		if (closelist.buffer[i + closelist.Head] == c) return 1;
 8004e2c:	89fb      	ldrh	r3, [r7, #14]
 8004e2e:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <findin_list+0x48>)
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	4413      	add	r3, r2
 8004e34:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <findin_list+0x48>)
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	88db      	ldrh	r3, [r3, #6]
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d101      	bne.n	8004e46 <findin_list+0x2a>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e008      	b.n	8004e58 <findin_list+0x3c>
	for (i = 0; i < closelist.Length; i++)
 8004e46:	89fb      	ldrh	r3, [r7, #14]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	81fb      	strh	r3, [r7, #14]
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <findin_list+0x48>)
 8004e4e:	889b      	ldrh	r3, [r3, #4]
 8004e50:	89fa      	ldrh	r2, [r7, #14]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d3ea      	bcc.n	8004e2c <findin_list+0x10>
	}
	return 0;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20006c4c 	.word	0x20006c4c

08004e68 <editcost>:

void editcost(uint16_t index, A_Star_Node* node)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	6039      	str	r1, [r7, #0]
 8004e72:	80fb      	strh	r3, [r7, #6]
	if (openlist.buffer[index].total > node->total)
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	4920      	ldr	r1, [pc, #128]	; (8004ef8 <editcost+0x90>)
 8004e78:	4613      	mov	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fc f962 	bl	8001158 <__aeabi_fcmpgt>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d100      	bne.n	8004e9c <editcost+0x34>
	{
		openlist.buffer[index].total = node->total;
		openlist.buffer[index].cost = node->cost;
		openlist.buffer[index].fatherindex = node->fatherindex;
	}
}
 8004e9a:	e029      	b.n	8004ef0 <editcost+0x88>
		openlist.buffer[index].total = node->total;
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4813      	ldr	r0, [pc, #76]	; (8004ef8 <editcost+0x90>)
 8004eaa:	4613      	mov	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4403      	add	r3, r0
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	f8c3 200a 	str.w	r2, [r3, #10]
		openlist.buffer[index].cost = node->cost;
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	480c      	ldr	r0, [pc, #48]	; (8004ef8 <editcost+0x90>)
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4403      	add	r3, r0
 8004ed2:	460a      	mov	r2, r1
 8004ed4:	f8c3 2006 	str.w	r2, [r3, #6]
		openlist.buffer[index].fatherindex = node->fatherindex;
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	8958      	ldrh	r0, [r3, #10]
 8004ede:	4906      	ldr	r1, [pc, #24]	; (8004ef8 <editcost+0x90>)
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	330e      	adds	r3, #14
 8004eec:	4602      	mov	r2, r0
 8004eee:	801a      	strh	r2, [r3, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000c48 	.word	0x20000c48

08004efc <Insert_inLane>:

uint8_t Insert_inLane(Coordinate *head_coor, uint8_t head_index)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
	if(!head_coor) return 0;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <Insert_inLane+0x16>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e025      	b.n	8004f5e <Insert_inLane+0x62>
	pathlane.Head = 0;
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <Insert_inLane+0x6c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 16 - head_index;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f1c3 0310 	rsb	r3, r3, #16
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <Insert_inLane+0x6c>)
 8004f24:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = head_index; i < 16; i++)
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	e014      	b.n	8004f56 <Insert_inLane+0x5a>
	{
		pathlane.buffer[pathlane.Head + i - head_index] = *(head_coor + i);
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	18d1      	adds	r1, r2, r3
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <Insert_inLane+0x6c>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <Insert_inLane+0x6c>)
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	3304      	adds	r3, #4
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	6810      	ldr	r0, [r2, #0]
 8004f4e:	6018      	str	r0, [r3, #0]
	for(uint8_t i = head_index; i < 16; i++)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	3301      	adds	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b0f      	cmp	r3, #15
 8004f5a:	d9e7      	bls.n	8004f2c <Insert_inLane+0x30>
	}
	return 1;
 8004f5c:	2301      	movs	r3, #1
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	20007c54 	.word	0x20007c54

08004f6c <order_list_init>:

void order_list_init(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
	orders.length = 0;
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <order_list_init+0x18>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
	orders.new = 0;
 8004f76:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <order_list_init+0x18>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	705a      	strb	r2, [r3, #1]
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	20007cd8 	.word	0x20007cd8

08004f88 <order_append>:

void order_append(Order *an_order)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	if((an_order->startCoord.x != orders.buffer[orders.new].x) || (an_order->startCoord.y != orders.buffer[orders.new].y))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <order_append+0x84>)
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	491c      	ldr	r1, [pc, #112]	; (800500c <order_append+0x84>)
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d10b      	bne.n	8004fc0 <order_append+0x38>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004fae:	4b17      	ldr	r3, [pc, #92]	; (800500c <order_append+0x84>)
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	4916      	ldr	r1, [pc, #88]	; (800500c <order_append+0x84>)
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d01f      	beq.n	8005000 <order_append+0x78>
	{
		orders.buffer[orders.length].x = an_order->startCoord.x;
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <order_append+0x84>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	; (800500c <order_append+0x84>)
 8004fce:	0083      	lsls	r3, r0, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	805a      	strh	r2, [r3, #2]
		orders.buffer[orders.length].y = an_order->startCoord.y;
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <order_append+0x84>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	; (800500c <order_append+0x84>)
 8004fe4:	0083      	lsls	r3, r0, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	460a      	mov	r2, r1
 8004fea:	809a      	strh	r2, [r3, #4]
		orders.new = orders.length;
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <order_append+0x84>)
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <order_append+0x84>)
 8004ff2:	705a      	strb	r2, [r3, #1]
		orders.length = orders.length + 1;
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <order_append+0x84>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <order_append+0x84>)
 8004ffe:	701a      	strb	r2, [r3, #0]
	}
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20007cd8 	.word	0x20007cd8

08005010 <Get_nearest_order>:

int8_t Get_nearest_order(void)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
	uint8_t i;
	int16_t mindis = 512;
 8005016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800501a:	80bb      	strh	r3, [r7, #4]
	int8_t minindex = -1;
 800501c:	23ff      	movs	r3, #255	; 0xff
 800501e:	70fb      	strb	r3, [r7, #3]
	if(orders.length == 0)
 8005020:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <Get_nearest_order+0x98>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <Get_nearest_order+0x1e>
		return minindex;
 8005028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800502c:	e037      	b.n	800509e <Get_nearest_order+0x8e>
	for(i=0;i < orders.length; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	71fb      	strb	r3, [r7, #7]
 8005032:	e02d      	b.n	8005090 <Get_nearest_order+0x80>
	{
		int16_t distance = abs(orders.buffer[i].x - myCoord.x) + abs(orders.buffer[i].y - myCoord.y);
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <Get_nearest_order+0x98>)
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005040:	461a      	mov	r2, r3
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <Get_nearest_order+0x9c>)
 8005044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	425b      	neglt	r3, r3
 8005050:	b29a      	uxth	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	4914      	ldr	r1, [pc, #80]	; (80050a8 <Get_nearest_order+0x98>)
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800505e:	4619      	mov	r1, r3
 8005060:	4b12      	ldr	r3, [pc, #72]	; (80050ac <Get_nearest_order+0x9c>)
 8005062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005066:	1acb      	subs	r3, r1, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	bfb8      	it	lt
 800506c:	425b      	neglt	r3, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	4413      	add	r3, r2
 8005072:	b29b      	uxth	r3, r3
 8005074:	803b      	strh	r3, [r7, #0]
		if(distance < mindis)
 8005076:	f9b7 2000 	ldrsh.w	r2, [r7]
 800507a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	da03      	bge.n	800508a <Get_nearest_order+0x7a>
		{
			mindis = distance;
 8005082:	883b      	ldrh	r3, [r7, #0]
 8005084:	80bb      	strh	r3, [r7, #4]
			minindex = i;
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	70fb      	strb	r3, [r7, #3]
	for(i=0;i < orders.length; i++)
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	3301      	adds	r3, #1
 800508e:	71fb      	strb	r3, [r7, #7]
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <Get_nearest_order+0x98>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	79fa      	ldrb	r2, [r7, #7]
 8005096:	429a      	cmp	r2, r3
 8005098:	d3cc      	bcc.n	8005034 <Get_nearest_order+0x24>
		}
	}
    return minindex;
 800509a:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	20007cd8 	.word	0x20007cd8
 80050ac:	20000c0c 	.word	0x20000c0c

080050b0 <exitpoints_init>:

void exitpoints_init(void){
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
	exitpoints[0].x = 127;
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <exitpoints_init+0x6c>)
 80050b6:	227f      	movs	r2, #127	; 0x7f
 80050b8:	801a      	strh	r2, [r3, #0]
	exitpoints[0].y = 18;
 80050ba:	4b18      	ldr	r3, [pc, #96]	; (800511c <exitpoints_init+0x6c>)
 80050bc:	2212      	movs	r2, #18
 80050be:	805a      	strh	r2, [r3, #2]
	exitpoints[1].x = 127;
 80050c0:	4b16      	ldr	r3, [pc, #88]	; (800511c <exitpoints_init+0x6c>)
 80050c2:	227f      	movs	r2, #127	; 0x7f
 80050c4:	809a      	strh	r2, [r3, #4]
	exitpoints[1].y = 60;
 80050c6:	4b15      	ldr	r3, [pc, #84]	; (800511c <exitpoints_init+0x6c>)
 80050c8:	223c      	movs	r2, #60	; 0x3c
 80050ca:	80da      	strh	r2, [r3, #6]
	exitpoints[2].x = 236;
 80050cc:	4b13      	ldr	r3, [pc, #76]	; (800511c <exitpoints_init+0x6c>)
 80050ce:	22ec      	movs	r2, #236	; 0xec
 80050d0:	811a      	strh	r2, [r3, #8]
	exitpoints[2].y = 127;
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <exitpoints_init+0x6c>)
 80050d4:	227f      	movs	r2, #127	; 0x7f
 80050d6:	815a      	strh	r2, [r3, #10]
	exitpoints[3].x = 194;
 80050d8:	4b10      	ldr	r3, [pc, #64]	; (800511c <exitpoints_init+0x6c>)
 80050da:	22c2      	movs	r2, #194	; 0xc2
 80050dc:	819a      	strh	r2, [r3, #12]
	exitpoints[3].y = 127;
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <exitpoints_init+0x6c>)
 80050e0:	227f      	movs	r2, #127	; 0x7f
 80050e2:	81da      	strh	r2, [r3, #14]
	exitpoints[4].x = 127;
 80050e4:	4b0d      	ldr	r3, [pc, #52]	; (800511c <exitpoints_init+0x6c>)
 80050e6:	227f      	movs	r2, #127	; 0x7f
 80050e8:	821a      	strh	r2, [r3, #16]
	exitpoints[4].y = 236;
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <exitpoints_init+0x6c>)
 80050ec:	22ec      	movs	r2, #236	; 0xec
 80050ee:	825a      	strh	r2, [r3, #18]
	exitpoints[5].x = 127;
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <exitpoints_init+0x6c>)
 80050f2:	227f      	movs	r2, #127	; 0x7f
 80050f4:	829a      	strh	r2, [r3, #20]
	exitpoints[5].y = 194;
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <exitpoints_init+0x6c>)
 80050f8:	22c2      	movs	r2, #194	; 0xc2
 80050fa:	82da      	strh	r2, [r3, #22]
	exitpoints[6].x = 18;
 80050fc:	4b07      	ldr	r3, [pc, #28]	; (800511c <exitpoints_init+0x6c>)
 80050fe:	2212      	movs	r2, #18
 8005100:	831a      	strh	r2, [r3, #24]
	exitpoints[6].y = 127;
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <exitpoints_init+0x6c>)
 8005104:	227f      	movs	r2, #127	; 0x7f
 8005106:	835a      	strh	r2, [r3, #26]
	exitpoints[7].x = 60;
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <exitpoints_init+0x6c>)
 800510a:	223c      	movs	r2, #60	; 0x3c
 800510c:	839a      	strh	r2, [r3, #28]
	exitpoints[7].y = 127;
 800510e:	4b03      	ldr	r3, [pc, #12]	; (800511c <exitpoints_init+0x6c>)
 8005110:	227f      	movs	r2, #127	; 0x7f
 8005112:	83da      	strh	r2, [r3, #30]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	20000bd4 	.word	0x20000bd4

08005120 <GotoDestination>:
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;
extern Coordinate exitpoints[8];

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
	if(mode == 1)
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	2b01      	cmp	r3, #1
 8005130:	f040 80a2 	bne.w	8005278 <GotoDestination+0x158>
	{
		uint8_t isGetAroad = mingyan_pathfind_avoidObstacle(&myCoord, &Destination);
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	4619      	mov	r1, r3
 8005138:	48ab      	ldr	r0, [pc, #684]	; (80053e8 <GotoDestination+0x2c8>)
 800513a:	f7fd f923 	bl	8002384 <mingyan_pathfind_avoidObstacle>
 800513e:	4603      	mov	r3, r0
 8005140:	753b      	strb	r3, [r7, #20]
		if(isGetAroad != 0)
 8005142:	7d3b      	ldrb	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d05c      	beq.n	8005202 <GotoDestination+0xe2>
		{
			// success get a road
			for(uint8_t i = 0; i < pathlane.Length; i ++)
 8005148:	2300      	movs	r3, #0
 800514a:	74fb      	strb	r3, [r7, #19]
 800514c:	bf00      	nop
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	b29a      	uxth	r2, r3
 8005152:	4ba6      	ldr	r3, [pc, #664]	; (80053ec <GotoDestination+0x2cc>)
 8005154:	885b      	ldrh	r3, [r3, #2]
 8005156:	429a      	cmp	r2, r3
 8005158:	f080 82f3 	bcs.w	8005742 <GotoDestination+0x622>
			{
				while(1)
				{
					Position_P(&EstiCoord, &pathlane.buffer[pathlane.Head + i]);
 800515c:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <GotoDestination+0x2cc>)
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	7cfb      	ldrb	r3, [r7, #19]
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4aa0      	ldr	r2, [pc, #640]	; (80053ec <GotoDestination+0x2cc>)
 800516a:	4413      	add	r3, r2
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	489f      	ldr	r0, [pc, #636]	; (80053f0 <GotoDestination+0x2d0>)
 8005172:	f000 fb7d 	bl	8005870 <Position_P>
					CheckCoord();
 8005176:	f000 fb55 	bl	8005824 <CheckCoord>
					if(abs(EstiCoord.x - pathlane.buffer[pathlane.Head + i].x) + abs(EstiCoord.y - pathlane.buffer[pathlane.Head + i].y) <= PATH_PID_TOLERANCE)
 800517a:	4b9d      	ldr	r3, [pc, #628]	; (80053f0 <GotoDestination+0x2d0>)
 800517c:	681c      	ldr	r4, [r3, #0]
 800517e:	4b9b      	ldr	r3, [pc, #620]	; (80053ec <GotoDestination+0x2cc>)
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	4413      	add	r3, r2
 8005188:	4a98      	ldr	r2, [pc, #608]	; (80053ec <GotoDestination+0x2cc>)
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb fdd0 	bl	8000d38 <__aeabi_i2f>
 8005198:	4603      	mov	r3, r0
 800519a:	4619      	mov	r1, r3
 800519c:	4620      	mov	r0, r4
 800519e:	f7fb fd15 	bl	8000bcc <__aeabi_fsub>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fb ffe1 	bl	800116c <__aeabi_f2iz>
 80051aa:	4603      	mov	r3, r0
 80051ac:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80051b0:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80051b4:	4b8e      	ldr	r3, [pc, #568]	; (80053f0 <GotoDestination+0x2d0>)
 80051b6:	685d      	ldr	r5, [r3, #4]
 80051b8:	4b8c      	ldr	r3, [pc, #560]	; (80053ec <GotoDestination+0x2cc>)
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	4413      	add	r3, r2
 80051c2:	4a8a      	ldr	r2, [pc, #552]	; (80053ec <GotoDestination+0x2cc>)
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb fdb3 	bl	8000d38 <__aeabi_i2f>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4619      	mov	r1, r3
 80051d6:	4628      	mov	r0, r5
 80051d8:	f7fb fcf8 	bl	8000bcc <__aeabi_fsub>
 80051dc:	4603      	mov	r3, r0
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb ffc4 	bl	800116c <__aeabi_f2iz>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfb8      	it	lt
 80051ea:	425b      	neglt	r3, r3
 80051ec:	4423      	add	r3, r4
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	dcb4      	bgt.n	800515c <GotoDestination+0x3c>
					{
						chao_move_angle(0,0);
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f7fc fe0d 	bl	8001e18 <chao_move_angle>
						return 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	e2a0      	b.n	8005744 <GotoDestination+0x624>
		}
		else
		{
			while(1)
			{
				Position_P(&EstiCoord, &Destination);
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	4619      	mov	r1, r3
 8005206:	487a      	ldr	r0, [pc, #488]	; (80053f0 <GotoDestination+0x2d0>)
 8005208:	f000 fb32 	bl	8005870 <Position_P>
				CheckCoord();
 800520c:	f000 fb0a 	bl	8005824 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8005210:	4b77      	ldr	r3, [pc, #476]	; (80053f0 <GotoDestination+0x2d0>)
 8005212:	681c      	ldr	r4, [r3, #0]
 8005214:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005218:	4618      	mov	r0, r3
 800521a:	f7fb fd8d 	bl	8000d38 <__aeabi_i2f>
 800521e:	4603      	mov	r3, r0
 8005220:	4619      	mov	r1, r3
 8005222:	4620      	mov	r0, r4
 8005224:	f7fb fcd2 	bl	8000bcc <__aeabi_fsub>
 8005228:	4603      	mov	r3, r0
 800522a:	4618      	mov	r0, r3
 800522c:	f7fb ff9e 	bl	800116c <__aeabi_f2iz>
 8005230:	4603      	mov	r3, r0
 8005232:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8005236:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800523a:	4b6d      	ldr	r3, [pc, #436]	; (80053f0 <GotoDestination+0x2d0>)
 800523c:	685d      	ldr	r5, [r3, #4]
 800523e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb fd78 	bl	8000d38 <__aeabi_i2f>
 8005248:	4603      	mov	r3, r0
 800524a:	4619      	mov	r1, r3
 800524c:	4628      	mov	r0, r5
 800524e:	f7fb fcbd 	bl	8000bcc <__aeabi_fsub>
 8005252:	4603      	mov	r3, r0
 8005254:	4618      	mov	r0, r3
 8005256:	f7fb ff89 	bl	800116c <__aeabi_f2iz>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	bfb8      	it	lt
 8005260:	425b      	neglt	r3, r3
 8005262:	4423      	add	r3, r4
 8005264:	2b05      	cmp	r3, #5
 8005266:	dccc      	bgt.n	8005202 <GotoDestination+0xe2>
				{
					chao_move_angle(0,0);
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	f04f 0000 	mov.w	r0, #0
 8005270:	f7fc fdd2 	bl	8001e18 <chao_move_angle>
					return 1;
 8005274:	2301      	movs	r3, #1
 8005276:	e265      	b.n	8005744 <GotoDestination+0x624>
				}
			}
		}
	}
	else if(mode == 0)
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d13a      	bne.n	80052f4 <GotoDestination+0x1d4>
	{
		while(1)
		{
			Position_P(&EstiCoord, &Destination);
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	4619      	mov	r1, r3
 8005282:	485b      	ldr	r0, [pc, #364]	; (80053f0 <GotoDestination+0x2d0>)
 8005284:	f000 faf4 	bl	8005870 <Position_P>
			CheckCoord();
 8005288:	f000 facc 	bl	8005824 <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 800528c:	4b58      	ldr	r3, [pc, #352]	; (80053f0 <GotoDestination+0x2d0>)
 800528e:	681c      	ldr	r4, [r3, #0]
 8005290:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fb fd4f 	bl	8000d38 <__aeabi_i2f>
 800529a:	4603      	mov	r3, r0
 800529c:	4619      	mov	r1, r3
 800529e:	4620      	mov	r0, r4
 80052a0:	f7fb fc94 	bl	8000bcc <__aeabi_fsub>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fb ff60 	bl	800116c <__aeabi_f2iz>
 80052ac:	4603      	mov	r3, r0
 80052ae:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80052b2:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80052b6:	4b4e      	ldr	r3, [pc, #312]	; (80053f0 <GotoDestination+0x2d0>)
 80052b8:	685d      	ldr	r5, [r3, #4]
 80052ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb fd3a 	bl	8000d38 <__aeabi_i2f>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4619      	mov	r1, r3
 80052c8:	4628      	mov	r0, r5
 80052ca:	f7fb fc7f 	bl	8000bcc <__aeabi_fsub>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb ff4b 	bl	800116c <__aeabi_f2iz>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfb8      	it	lt
 80052dc:	425b      	neglt	r3, r3
 80052de:	4423      	add	r3, r4
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	dccc      	bgt.n	800527e <GotoDestination+0x15e>
			{
				chao_move_angle(0,0);
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	f04f 0000 	mov.w	r0, #0
 80052ec:	f7fc fd94 	bl	8001e18 <chao_move_angle>
				return 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e227      	b.n	8005744 <GotoDestination+0x624>
			}
		}
	}
	//只避障墙壁
	else if(mode == 2){
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	f040 8223 	bne.w	8005742 <GotoDestination+0x622>
		uint8_t myCoordState, DesCoordState = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75bb      	strb	r3, [r7, #22]
		if(myCoord.x > 40 && myCoord.x < 214 && myCoord.y > 40 && myCoord.y < 214)
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <GotoDestination+0x2c8>)
 8005302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005306:	2b28      	cmp	r3, #40	; 0x28
 8005308:	dd11      	ble.n	800532e <GotoDestination+0x20e>
 800530a:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <GotoDestination+0x2c8>)
 800530c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005310:	2bd5      	cmp	r3, #213	; 0xd5
 8005312:	dc0c      	bgt.n	800532e <GotoDestination+0x20e>
 8005314:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <GotoDestination+0x2c8>)
 8005316:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800531a:	2b28      	cmp	r3, #40	; 0x28
 800531c:	dd07      	ble.n	800532e <GotoDestination+0x20e>
 800531e:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <GotoDestination+0x2c8>)
 8005320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005324:	2bd5      	cmp	r3, #213	; 0xd5
 8005326:	dc02      	bgt.n	800532e <GotoDestination+0x20e>
			myCoordState = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	75fb      	strb	r3, [r7, #23]
 800532c:	e028      	b.n	8005380 <GotoDestination+0x260>
		else{
			//计算起点划分
			if(myCoord.x > myCoord.y){
 800532e:	4b2e      	ldr	r3, [pc, #184]	; (80053e8 <GotoDestination+0x2c8>)
 8005330:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005334:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <GotoDestination+0x2c8>)
 8005336:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800533a:	429a      	cmp	r2, r3
 800533c:	dd10      	ble.n	8005360 <GotoDestination+0x240>
				if(myCoord.x <= 254 - myCoord.y)
 800533e:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <GotoDestination+0x2c8>)
 8005340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005344:	461a      	mov	r2, r3
 8005346:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <GotoDestination+0x2c8>)
 8005348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800534c:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8005350:	429a      	cmp	r2, r3
 8005352:	dc02      	bgt.n	800535a <GotoDestination+0x23a>
					myCoordState = 1;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
 8005358:	e012      	b.n	8005380 <GotoDestination+0x260>
				else
					myCoordState = 2;
 800535a:	2302      	movs	r3, #2
 800535c:	75fb      	strb	r3, [r7, #23]
 800535e:	e00f      	b.n	8005380 <GotoDestination+0x260>
			}
			else{
				if(myCoord.x <= 254 - myCoord.y)
 8005360:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <GotoDestination+0x2c8>)
 8005362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005366:	461a      	mov	r2, r3
 8005368:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <GotoDestination+0x2c8>)
 800536a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800536e:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8005372:	429a      	cmp	r2, r3
 8005374:	dc02      	bgt.n	800537c <GotoDestination+0x25c>
					myCoordState = 4;
 8005376:	2304      	movs	r3, #4
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e001      	b.n	8005380 <GotoDestination+0x260>
				else
					myCoordState = 3;
 800537c:	2303      	movs	r3, #3
 800537e:	75fb      	strb	r3, [r7, #23]
			}
		}
		if(Destination.x > 40 && Destination.x < 214 && Destination.y > 40 && Destination.y < 214)
 8005380:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005384:	2b28      	cmp	r3, #40	; 0x28
 8005386:	dd0e      	ble.n	80053a6 <GotoDestination+0x286>
 8005388:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800538c:	2bd5      	cmp	r3, #213	; 0xd5
 800538e:	dc0a      	bgt.n	80053a6 <GotoDestination+0x286>
 8005390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005394:	2b28      	cmp	r3, #40	; 0x28
 8005396:	dd06      	ble.n	80053a6 <GotoDestination+0x286>
 8005398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800539c:	2bd5      	cmp	r3, #213	; 0xd5
 800539e:	dc02      	bgt.n	80053a6 <GotoDestination+0x286>
			DesCoordState = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	75bb      	strb	r3, [r7, #22]
 80053a4:	e028      	b.n	80053f8 <GotoDestination+0x2d8>
		else{
			// 计算终点划分
			if(Destination.x > Destination.y){
 80053a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80053aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	dd0e      	ble.n	80053d0 <GotoDestination+0x2b0>
				if(Destination.x <= 254 - Destination.y)
 80053b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053bc:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 80053c0:	429a      	cmp	r2, r3
 80053c2:	dc02      	bgt.n	80053ca <GotoDestination+0x2aa>
					DesCoordState = 1;
 80053c4:	2301      	movs	r3, #1
 80053c6:	75bb      	strb	r3, [r7, #22]
 80053c8:	e016      	b.n	80053f8 <GotoDestination+0x2d8>
				else
					DesCoordState = 2;
 80053ca:	2302      	movs	r3, #2
 80053cc:	75bb      	strb	r3, [r7, #22]
 80053ce:	e013      	b.n	80053f8 <GotoDestination+0x2d8>
			}
			else{
				if(Destination.x <= 254 - Destination.y)
 80053d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053da:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 80053de:	429a      	cmp	r2, r3
 80053e0:	dc08      	bgt.n	80053f4 <GotoDestination+0x2d4>
					DesCoordState = 4;
 80053e2:	2304      	movs	r3, #4
 80053e4:	75bb      	strb	r3, [r7, #22]
 80053e6:	e007      	b.n	80053f8 <GotoDestination+0x2d8>
 80053e8:	20000c0c 	.word	0x20000c0c
 80053ec:	20007c54 	.word	0x20007c54
 80053f0:	20000c10 	.word	0x20000c10
				else
					DesCoordState = 3;
 80053f4:	2303      	movs	r3, #3
 80053f6:	75bb      	strb	r3, [r7, #22]
			}
		}
		// 里 里，或者在外面同一区域的直接走
		if((myCoordState == 0 && DesCoordState == 0)||(myCoord.x<38&&Destination.x<38)||(myCoord.x>216&&Destination.x>216)||(myCoord.y<38&&Destination.y<38)||(myCoord.y>216&&Destination.y>216)){
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <GotoDestination+0x2e4>
 80053fe:	7dbb      	ldrb	r3, [r7, #22]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d023      	beq.n	800544c <GotoDestination+0x32c>
 8005404:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <GotoDestination+0x4a0>)
 8005406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800540a:	2b25      	cmp	r3, #37	; 0x25
 800540c:	dc03      	bgt.n	8005416 <GotoDestination+0x2f6>
 800540e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005412:	2b25      	cmp	r3, #37	; 0x25
 8005414:	dd1a      	ble.n	800544c <GotoDestination+0x32c>
 8005416:	4b6a      	ldr	r3, [pc, #424]	; (80055c0 <GotoDestination+0x4a0>)
 8005418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800541c:	2bd8      	cmp	r3, #216	; 0xd8
 800541e:	dd03      	ble.n	8005428 <GotoDestination+0x308>
 8005420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005424:	2bd8      	cmp	r3, #216	; 0xd8
 8005426:	dc11      	bgt.n	800544c <GotoDestination+0x32c>
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <GotoDestination+0x4a0>)
 800542a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800542e:	2b25      	cmp	r3, #37	; 0x25
 8005430:	dc03      	bgt.n	800543a <GotoDestination+0x31a>
 8005432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005436:	2b25      	cmp	r3, #37	; 0x25
 8005438:	dd08      	ble.n	800544c <GotoDestination+0x32c>
 800543a:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <GotoDestination+0x4a0>)
 800543c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005440:	2bd8      	cmp	r3, #216	; 0xd8
 8005442:	dd3e      	ble.n	80054c2 <GotoDestination+0x3a2>
 8005444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005448:	2bd8      	cmp	r3, #216	; 0xd8
 800544a:	dd3a      	ble.n	80054c2 <GotoDestination+0x3a2>
			while(1){
				Position_P(&EstiCoord, &Destination);
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	4619      	mov	r1, r3
 8005450:	485c      	ldr	r0, [pc, #368]	; (80055c4 <GotoDestination+0x4a4>)
 8005452:	f000 fa0d 	bl	8005870 <Position_P>
				CheckCoord();
 8005456:	f000 f9e5 	bl	8005824 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE){
 800545a:	4b5a      	ldr	r3, [pc, #360]	; (80055c4 <GotoDestination+0x4a4>)
 800545c:	681c      	ldr	r4, [r3, #0]
 800545e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb fc68 	bl	8000d38 <__aeabi_i2f>
 8005468:	4603      	mov	r3, r0
 800546a:	4619      	mov	r1, r3
 800546c:	4620      	mov	r0, r4
 800546e:	f7fb fbad 	bl	8000bcc <__aeabi_fsub>
 8005472:	4603      	mov	r3, r0
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb fe79 	bl	800116c <__aeabi_f2iz>
 800547a:	4603      	mov	r3, r0
 800547c:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8005480:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8005484:	4b4f      	ldr	r3, [pc, #316]	; (80055c4 <GotoDestination+0x4a4>)
 8005486:	685d      	ldr	r5, [r3, #4]
 8005488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb fc53 	bl	8000d38 <__aeabi_i2f>
 8005492:	4603      	mov	r3, r0
 8005494:	4619      	mov	r1, r3
 8005496:	4628      	mov	r0, r5
 8005498:	f7fb fb98 	bl	8000bcc <__aeabi_fsub>
 800549c:	4603      	mov	r3, r0
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fb fe64 	bl	800116c <__aeabi_f2iz>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	425b      	neglt	r3, r3
 80054ac:	4423      	add	r3, r4
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	dccc      	bgt.n	800544c <GotoDestination+0x32c>
					chao_move_angle(0,0);
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	f7fc fcad 	bl	8001e18 <chao_move_angle>
					return 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	e140      	b.n	8005744 <GotoDestination+0x624>
		//外外或者里外
		else
		{
			Coordinate middle1 , middle2;
			//里外或歪理
			if(myCoordState == 0 || DesCoordState == 0){
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <GotoDestination+0x3ae>
 80054c8:	7dbb      	ldrb	r3, [r7, #22]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d132      	bne.n	8005534 <GotoDestination+0x414>
				uint8_t index = (myCoordState > DesCoordState)?myCoordState : DesCoordState;
 80054ce:	7dba      	ldrb	r2, [r7, #22]
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bf38      	it	cc
 80054d6:	4613      	movcc	r3, r2
 80054d8:	757b      	strb	r3, [r7, #21]
				if(myCoordState == 0){
 80054da:	7dfb      	ldrb	r3, [r7, #23]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d114      	bne.n	800550a <GotoDestination+0x3ea>
					middle1 = exitpoints[index * 2 - 1];
 80054e0:	7d7b      	ldrb	r3, [r7, #21]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	3b01      	subs	r3, #1
 80054e6:	4938      	ldr	r1, [pc, #224]	; (80055c8 <GotoDestination+0x4a8>)
 80054e8:	f107 020c 	add.w	r2, r7, #12
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	6010      	str	r0, [r2, #0]
					middle2 = exitpoints[index * 2 - 2];
 80054f4:	7d7b      	ldrb	r3, [r7, #21]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4933      	ldr	r1, [pc, #204]	; (80055c8 <GotoDestination+0x4a8>)
 80054fc:	f107 0208 	add.w	r2, r7, #8
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	6010      	str	r0, [r2, #0]
			if(myCoordState == 0 || DesCoordState == 0){
 8005508:	e06c      	b.n	80055e4 <GotoDestination+0x4c4>
				}
				else{
					middle2 = exitpoints[index * 2 - 1];
 800550a:	7d7b      	ldrb	r3, [r7, #21]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	3b01      	subs	r3, #1
 8005510:	492d      	ldr	r1, [pc, #180]	; (80055c8 <GotoDestination+0x4a8>)
 8005512:	f107 0208 	add.w	r2, r7, #8
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	6010      	str	r0, [r2, #0]
					middle1 = exitpoints[index * 2 - 2];
 800551e:	7d7b      	ldrb	r3, [r7, #21]
 8005520:	3b01      	subs	r3, #1
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4928      	ldr	r1, [pc, #160]	; (80055c8 <GotoDestination+0x4a8>)
 8005526:	f107 020c 	add.w	r2, r7, #12
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	6010      	str	r0, [r2, #0]
			if(myCoordState == 0 || DesCoordState == 0){
 8005532:	e057      	b.n	80055e4 <GotoDestination+0x4c4>
				}
			}
			// 外外
			else{
				// 跨俩区域
				if(abs(DesCoordState - myCoordState) % 2 == 0)
 8005534:	7dba      	ldrb	r2, [r7, #22]
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfb8      	it	lt
 800553e:	425b      	neglt	r3, r3
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d114      	bne.n	8005572 <GotoDestination+0x452>
				{
					middle1 = exitpoints[myCoordState * 2 - 2];
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	3b01      	subs	r3, #1
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	491e      	ldr	r1, [pc, #120]	; (80055c8 <GotoDestination+0x4a8>)
 8005550:	f107 020c 	add.w	r2, r7, #12
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	6010      	str	r0, [r2, #0]
					middle2 = exitpoints[DesCoordState * 2 - 2];
 800555c:	7dbb      	ldrb	r3, [r7, #22]
 800555e:	3b01      	subs	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4919      	ldr	r1, [pc, #100]	; (80055c8 <GotoDestination+0x4a8>)
 8005564:	f107 0208 	add.w	r2, r7, #8
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	6010      	str	r0, [r2, #0]
 8005570:	e038      	b.n	80055e4 <GotoDestination+0x4c4>
				}
				// 只跨一个区域
				else{
					if(DesCoordState * myCoordState == 4){
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	7dfa      	ldrb	r2, [r7, #23]
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	2b04      	cmp	r3, #4
 800557c:	d106      	bne.n	800558c <GotoDestination+0x46c>
						middle1.x = 18;
 800557e:	2312      	movs	r3, #18
 8005580:	81bb      	strh	r3, [r7, #12]
						middle1.y = 18;
 8005582:	2312      	movs	r3, #18
 8005584:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	e02b      	b.n	80055e4 <GotoDestination+0x4c4>
					}
					else if(DesCoordState * myCoordState == 2){
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	7dfa      	ldrb	r2, [r7, #23]
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d106      	bne.n	80055a6 <GotoDestination+0x486>
						middle1.x = 236;
 8005598:	23ec      	movs	r3, #236	; 0xec
 800559a:	81bb      	strh	r3, [r7, #12]
						middle1.y = 18;
 800559c:	2312      	movs	r3, #18
 800559e:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	e01e      	b.n	80055e4 <GotoDestination+0x4c4>
					}
					else if(DesCoordState * myCoordState == 6){
 80055a6:	7dbb      	ldrb	r3, [r7, #22]
 80055a8:	7dfa      	ldrb	r2, [r7, #23]
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	2b06      	cmp	r3, #6
 80055b0:	d10c      	bne.n	80055cc <GotoDestination+0x4ac>
						middle1.x = 236;
 80055b2:	23ec      	movs	r3, #236	; 0xec
 80055b4:	81bb      	strh	r3, [r7, #12]
						middle1.y = 236;
 80055b6:	23ec      	movs	r3, #236	; 0xec
 80055b8:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	e011      	b.n	80055e4 <GotoDestination+0x4c4>
 80055c0:	20000c0c 	.word	0x20000c0c
 80055c4:	20000c10 	.word	0x20000c10
 80055c8:	20000bd4 	.word	0x20000bd4
					}
					else if(DesCoordState * myCoordState == 12)
 80055cc:	7dbb      	ldrb	r3, [r7, #22]
 80055ce:	7dfa      	ldrb	r2, [r7, #23]
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	d105      	bne.n	80055e4 <GotoDestination+0x4c4>
					{
						middle1.x = 18;
 80055d8:	2312      	movs	r3, #18
 80055da:	81bb      	strh	r3, [r7, #12]
						middle1.y = 236;
 80055dc:	23ec      	movs	r3, #236	; 0xec
 80055de:	81fb      	strh	r3, [r7, #14]
						middle2 = middle1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	60bb      	str	r3, [r7, #8]
					}
				}
			}
			while(1){
				Position_P(&EstiCoord, &middle1);
 80055e4:	f107 030c 	add.w	r3, r7, #12
 80055e8:	4619      	mov	r1, r3
 80055ea:	4858      	ldr	r0, [pc, #352]	; (800574c <GotoDestination+0x62c>)
 80055ec:	f000 f940 	bl	8005870 <Position_P>
				CheckCoord();
 80055f0:	f000 f918 	bl	8005824 <CheckCoord>
				if(abs(EstiCoord.x - middle1.x) + abs(EstiCoord.y - middle1.y) <= PATH_PID_TOLERANCE){
 80055f4:	4b55      	ldr	r3, [pc, #340]	; (800574c <GotoDestination+0x62c>)
 80055f6:	681c      	ldr	r4, [r3, #0]
 80055f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fb fb9b 	bl	8000d38 <__aeabi_i2f>
 8005602:	4603      	mov	r3, r0
 8005604:	4619      	mov	r1, r3
 8005606:	4620      	mov	r0, r4
 8005608:	f7fb fae0 	bl	8000bcc <__aeabi_fsub>
 800560c:	4603      	mov	r3, r0
 800560e:	4618      	mov	r0, r3
 8005610:	f7fb fdac 	bl	800116c <__aeabi_f2iz>
 8005614:	4603      	mov	r3, r0
 8005616:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800561a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800561e:	4b4b      	ldr	r3, [pc, #300]	; (800574c <GotoDestination+0x62c>)
 8005620:	685d      	ldr	r5, [r3, #4]
 8005622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fb fb86 	bl	8000d38 <__aeabi_i2f>
 800562c:	4603      	mov	r3, r0
 800562e:	4619      	mov	r1, r3
 8005630:	4628      	mov	r0, r5
 8005632:	f7fb facb 	bl	8000bcc <__aeabi_fsub>
 8005636:	4603      	mov	r3, r0
 8005638:	4618      	mov	r0, r3
 800563a:	f7fb fd97 	bl	800116c <__aeabi_f2iz>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	bfb8      	it	lt
 8005644:	425b      	neglt	r3, r3
 8005646:	4423      	add	r3, r4
 8005648:	2b05      	cmp	r3, #5
 800564a:	dccb      	bgt.n	80055e4 <GotoDestination+0x4c4>
					chao_move_angle(0,0);
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	f04f 0000 	mov.w	r0, #0
 8005654:	f7fc fbe0 	bl	8001e18 <chao_move_angle>
					break;
				}
			}
			while(1){
				Position_P(&EstiCoord, &middle2);
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	4619      	mov	r1, r3
 800565e:	483b      	ldr	r0, [pc, #236]	; (800574c <GotoDestination+0x62c>)
 8005660:	f000 f906 	bl	8005870 <Position_P>
				CheckCoord();
 8005664:	f000 f8de 	bl	8005824 <CheckCoord>
				if(abs(EstiCoord.x - middle2.x) + abs(EstiCoord.y - middle2.y) <= PATH_PID_TOLERANCE){
 8005668:	4b38      	ldr	r3, [pc, #224]	; (800574c <GotoDestination+0x62c>)
 800566a:	681c      	ldr	r4, [r3, #0]
 800566c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fb fb61 	bl	8000d38 <__aeabi_i2f>
 8005676:	4603      	mov	r3, r0
 8005678:	4619      	mov	r1, r3
 800567a:	4620      	mov	r0, r4
 800567c:	f7fb faa6 	bl	8000bcc <__aeabi_fsub>
 8005680:	4603      	mov	r3, r0
 8005682:	4618      	mov	r0, r3
 8005684:	f7fb fd72 	bl	800116c <__aeabi_f2iz>
 8005688:	4603      	mov	r3, r0
 800568a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800568e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <GotoDestination+0x62c>)
 8005694:	685d      	ldr	r5, [r3, #4]
 8005696:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fb fb4c 	bl	8000d38 <__aeabi_i2f>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4619      	mov	r1, r3
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7fb fa91 	bl	8000bcc <__aeabi_fsub>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fb fd5d 	bl	800116c <__aeabi_f2iz>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfb8      	it	lt
 80056b8:	425b      	neglt	r3, r3
 80056ba:	4423      	add	r3, r4
 80056bc:	2b05      	cmp	r3, #5
 80056be:	dccb      	bgt.n	8005658 <GotoDestination+0x538>
					chao_move_angle(0,0);
 80056c0:	f04f 0100 	mov.w	r1, #0
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f7fc fba6 	bl	8001e18 <chao_move_angle>
					break;
				}
			}
			while(1){
				Position_P(&EstiCoord, &Destination);
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	481e      	ldr	r0, [pc, #120]	; (800574c <GotoDestination+0x62c>)
 80056d2:	f000 f8cd 	bl	8005870 <Position_P>
				CheckCoord();
 80056d6:	f000 f8a5 	bl	8005824 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE){
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <GotoDestination+0x62c>)
 80056dc:	681c      	ldr	r4, [r3, #0]
 80056de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fb fb28 	bl	8000d38 <__aeabi_i2f>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4619      	mov	r1, r3
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fb fa6d 	bl	8000bcc <__aeabi_fsub>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fb fd39 	bl	800116c <__aeabi_f2iz>
 80056fa:	4603      	mov	r3, r0
 80056fc:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8005700:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <GotoDestination+0x62c>)
 8005706:	685d      	ldr	r5, [r3, #4]
 8005708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800570c:	4618      	mov	r0, r3
 800570e:	f7fb fb13 	bl	8000d38 <__aeabi_i2f>
 8005712:	4603      	mov	r3, r0
 8005714:	4619      	mov	r1, r3
 8005716:	4628      	mov	r0, r5
 8005718:	f7fb fa58 	bl	8000bcc <__aeabi_fsub>
 800571c:	4603      	mov	r3, r0
 800571e:	4618      	mov	r0, r3
 8005720:	f7fb fd24 	bl	800116c <__aeabi_f2iz>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	425b      	neglt	r3, r3
 800572c:	4423      	add	r3, r4
 800572e:	2b05      	cmp	r3, #5
 8005730:	dccc      	bgt.n	80056cc <GotoDestination+0x5ac>
					chao_move_angle(0,0);
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	f04f 0000 	mov.w	r0, #0
 800573a:	f7fc fb6d 	bl	8001e18 <chao_move_angle>
					return 1;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <GotoDestination+0x624>
				}
			}
		}
	}
	return 0;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bdb0      	pop	{r4, r5, r7, pc}
 800574c:	20000c10 	.word	0x20000c10

08005750 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 800575c:	e005      	b.n	800576a <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 800575e:	4910      	ldr	r1, [pc, #64]	; (80057a0 <Angle_normalization+0x50>)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7fb fa35 	bl	8000bd0 <__addsf3>
 8005766:	4603      	mov	r3, r0
 8005768:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7fb fcd4 	bl	800111c <__aeabi_fcmplt>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f1      	bne.n	800575e <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 800577a:	e005      	b.n	8005788 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 800577c:	4908      	ldr	r1, [pc, #32]	; (80057a0 <Angle_normalization+0x50>)
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7fb fa24 	bl	8000bcc <__aeabi_fsub>
 8005784:	4603      	mov	r3, r0
 8005786:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8005788:	4905      	ldr	r1, [pc, #20]	; (80057a0 <Angle_normalization+0x50>)
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7fb fce4 	bl	8001158 <__aeabi_fcmpgt>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f2      	bne.n	800577c <Angle_normalization+0x2c>
	}
	return raw_angle;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	43b40000 	.word	0x43b40000

080057a4 <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	460a      	mov	r2, r1
 80057ae:	80fb      	strh	r3, [r7, #6]
 80057b0:	4613      	mov	r3, r2
 80057b2:	80bb      	strh	r3, [r7, #4]
	float kp = 50.0;
 80057b4:	4b18      	ldr	r3, [pc, #96]	; (8005818 <CalSpeed+0x74>)
 80057b6:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 80057b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfb8      	it	lt
 80057c0:	425b      	neglt	r3, r3
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb8      	it	lt
 80057ce:	425b      	neglt	r3, r3
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fb faaf 	bl	8000d38 <__aeabi_i2f>
 80057da:	4603      	mov	r3, r0
 80057dc:	4619      	mov	r1, r3
 80057de:	68b8      	ldr	r0, [r7, #8]
 80057e0:	f7fb fafe 	bl	8000de0 <__aeabi_fmul>
 80057e4:	4603      	mov	r3, r0
 80057e6:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 80057e8:	490c      	ldr	r1, [pc, #48]	; (800581c <CalSpeed+0x78>)
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7fb fcb4 	bl	8001158 <__aeabi_fcmpgt>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <CalSpeed+0x56>
	{
		Speed = MAX_SPEED;
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <CalSpeed+0x78>)
 80057f8:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 80057fa:	4909      	ldr	r1, [pc, #36]	; (8005820 <CalSpeed+0x7c>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7fb fc8d 	bl	800111c <__aeabi_fcmplt>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <CalSpeed+0x68>
	{
		Speed = MIN_SPEED;
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <CalSpeed+0x7c>)
 800580a:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 800580c:	68fb      	ldr	r3, [r7, #12]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	42480000 	.word	0x42480000
 800581c:	44fa0000 	.word	0x44fa0000
 8005820:	447a0000 	.word	0x447a0000

08005824 <CheckCoord>:

uint8_t CheckCoord(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <CheckCoord+0x40>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d116      	bne.n	800585e <CheckCoord+0x3a>
	{
		EstiCoord.x = (float)myCoord.x;
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <CheckCoord+0x44>)
 8005832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fb fa7e 	bl	8000d38 <__aeabi_i2f>
 800583c:	4603      	mov	r3, r0
 800583e:	4a0b      	ldr	r2, [pc, #44]	; (800586c <CheckCoord+0x48>)
 8005840:	6013      	str	r3, [r2, #0]
		EstiCoord.y = (float)myCoord.y;
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <CheckCoord+0x44>)
 8005844:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fb fa75 	bl	8000d38 <__aeabi_i2f>
 800584e:	4603      	mov	r3, r0
 8005850:	4a06      	ldr	r2, [pc, #24]	; (800586c <CheckCoord+0x48>)
 8005852:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <CheckCoord+0x40>)
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
		return 1;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <CheckCoord+0x3c>
	}
	return 0;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000c18 	.word	0x20000c18
 8005868:	20000c0c 	.word	0x20000c0c
 800586c:	20000c10 	.word	0x20000c10

08005870 <Position_P>:
	float v_y = (cmotor_rf.lastSpeed + cmotor_lf.lastSpeed + cmotor_lb.lastSpeed + cmotor_rb.lastSpeed) * 60.0 / 20000;
	return v_y;
}

void Position_P(fCoordinate* cur, Coordinate* goal)
{
 8005870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005874:	b08e      	sub	sp, #56	; 0x38
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
	float x_error = cur->x - goal->x;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681c      	ldr	r4, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fb fa56 	bl	8000d38 <__aeabi_i2f>
 800588c:	4603      	mov	r3, r0
 800588e:	4619      	mov	r1, r3
 8005890:	4620      	mov	r0, r4
 8005892:	f7fb f99b 	bl	8000bcc <__aeabi_fsub>
 8005896:	4603      	mov	r3, r0
 8005898:	633b      	str	r3, [r7, #48]	; 0x30
	float y_error = goal->y - cur->y;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fb fa49 	bl	8000d38 <__aeabi_i2f>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f7fb f98c 	bl	8000bcc <__aeabi_fsub>
 80058b4:	4603      	mov	r3, r0
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (y_error == 0)
 80058b8:	f04f 0100 	mov.w	r1, #0
 80058bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058be:	f7fb fc23 	bl	8001108 <__aeabi_fcmpeq>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d034      	beq.n	8005932 <Position_P+0xc2>
	{
		if(x_error < 0)
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ce:	f7fb fc25 	bl	800111c <__aeabi_fcmplt>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <Position_P+0x86>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 80058d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058da:	f7fb fc47 	bl	800116c <__aeabi_f2iz>
 80058de:	4603      	mov	r3, r0
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff ff5d 	bl	80057a4 <CalSpeed>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4619      	mov	r1, r3
 80058ee:	4862      	ldr	r0, [pc, #392]	; (8005a78 <Position_P+0x208>)
 80058f0:	f7fc fa92 	bl	8001e18 <chao_move_angle>
 80058f4:	e0e1      	b.n	8005aba <Position_P+0x24a>
		}
		else if(x_error > 0)
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058fc:	f7fb fc2c 	bl	8001158 <__aeabi_fcmpgt>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <Position_P+0xb4>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 8005906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005908:	f7fb fc30 	bl	800116c <__aeabi_f2iz>
 800590c:	4603      	mov	r3, r0
 800590e:	b21b      	sxth	r3, r3
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff ff46 	bl	80057a4 <CalSpeed>
 8005918:	4603      	mov	r3, r0
 800591a:	4619      	mov	r1, r3
 800591c:	4857      	ldr	r0, [pc, #348]	; (8005a7c <Position_P+0x20c>)
 800591e:	f7fc fa7b 	bl	8001e18 <chao_move_angle>
 8005922:	e0ca      	b.n	8005aba <Position_P+0x24a>
		}
		else
		{
			chao_move_angle(0, 0);
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	f04f 0000 	mov.w	r0, #0
 800592c:	f7fc fa74 	bl	8001e18 <chao_move_angle>
 8005930:	e0c3      	b.n	8005aba <Position_P+0x24a>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 8005932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005936:	f7fb fb07 	bl	8000f48 <__aeabi_fdiv>
 800593a:	4603      	mov	r3, r0
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fdd7 	bl	80004f0 <__aeabi_f2d>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	f006 fa95 	bl	800be78 <atan>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4610      	mov	r0, r2
 8005954:	4619      	mov	r1, r3
 8005956:	f7fb f8e5 	bl	8000b24 <__aeabi_d2f>
 800595a:	4603      	mov	r3, r0
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
		if(y_error < 0)
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005964:	f7fb fbda 	bl	800111c <__aeabi_fcmplt>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <Position_P+0x11e>
		{
			azimuth += M_PI;
 800596e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005970:	f7fa fdbe 	bl	80004f0 <__aeabi_f2d>
 8005974:	a33c      	add	r3, pc, #240	; (adr r3, 8005a68 <Position_P+0x1f8>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fc5b 	bl	8000234 <__adddf3>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	f7fb f8cd 	bl	8000b24 <__aeabi_d2f>
 800598a:	4603      	mov	r3, r0
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 800598e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005990:	f7fa fdae 	bl	80004f0 <__aeabi_f2d>
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <Position_P+0x210>)
 800599a:	f7fa fe01 	bl	80005a0 <__aeabi_dmul>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	a332      	add	r3, pc, #200	; (adr r3, 8005a70 <Position_P+0x200>)
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f7fa ff22 	bl	80007f4 <__aeabi_ddiv>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7fb f8b4 	bl	8000b24 <__aeabi_d2f>
 80059bc:	4603      	mov	r3, r0
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
		azimuth = Angle_normalization(azimuth);
 80059c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059c2:	f7ff fec5 	bl	8005750 <Angle_normalization>
 80059c6:	6378      	str	r0, [r7, #52]	; 0x34
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 80059c8:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <Position_P+0x214>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2e      	ldr	r2, [pc, #184]	; (8005a88 <Position_P+0x218>)
 80059ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fb f8fa 	bl	8000bcc <__aeabi_fsub>
 80059d8:	4603      	mov	r3, r0
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff feb8 	bl	8005750 <Angle_normalization>
 80059e0:	4603      	mov	r3, r0
 80059e2:	4619      	mov	r1, r3
 80059e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059e6:	f7fb f8f1 	bl	8000bcc <__aeabi_fsub>
 80059ea:	4603      	mov	r3, r0
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
		angle = Angle_normalization(angle);
 80059ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f0:	f7ff feae 	bl	8005750 <Angle_normalization>
 80059f4:	62b8      	str	r0, [r7, #40]	; 0x28
//		chao_move_angle(angle, CalSpeed(x_error, y_error));
		if(cur->x < 10 || cur->x > 244 || cur->y < 10 || cur->y >244)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4924      	ldr	r1, [pc, #144]	; (8005a8c <Position_P+0x21c>)
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fb fb8d 	bl	800111c <__aeabi_fcmplt>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11a      	bne.n	8005a3e <Position_P+0x1ce>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4920      	ldr	r1, [pc, #128]	; (8005a90 <Position_P+0x220>)
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fb fba2 	bl	8001158 <__aeabi_fcmpgt>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d111      	bne.n	8005a3e <Position_P+0x1ce>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	491b      	ldr	r1, [pc, #108]	; (8005a8c <Position_P+0x21c>)
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fb fb7b 	bl	800111c <__aeabi_fcmplt>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d108      	bne.n	8005a3e <Position_P+0x1ce>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4917      	ldr	r1, [pc, #92]	; (8005a90 <Position_P+0x220>)
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fb fb90 	bl	8001158 <__aeabi_fcmpgt>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02a      	beq.n	8005a94 <Position_P+0x224>
			move_angle_omega(angle, CalSpeed(x_error, y_error));
 8005a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a40:	f7fb fb94 	bl	800116c <__aeabi_f2iz>
 8005a44:	4603      	mov	r3, r0
 8005a46:	b21c      	sxth	r4, r3
 8005a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a4a:	f7fb fb8f 	bl	800116c <__aeabi_f2iz>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	b21b      	sxth	r3, r3
 8005a52:	4619      	mov	r1, r3
 8005a54:	4620      	mov	r0, r4
 8005a56:	f7ff fea5 	bl	80057a4 <CalSpeed>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a60:	f7fc faf6 	bl	8002050 <move_angle_omega>
 8005a64:	e029      	b.n	8005aba <Position_P+0x24a>
 8005a66:	bf00      	nop
 8005a68:	54442d18 	.word	0x54442d18
 8005a6c:	400921fb 	.word	0x400921fb
 8005a70:	54442d18 	.word	0x54442d18
 8005a74:	401921fb 	.word	0x401921fb
 8005a78:	43870000 	.word	0x43870000
 8005a7c:	42b40000 	.word	0x42b40000
 8005a80:	40768000 	.word	0x40768000
 8005a84:	20000c1c 	.word	0x20000c1c
 8005a88:	20000a90 	.word	0x20000a90
 8005a8c:	41200000 	.word	0x41200000
 8005a90:	43740000 	.word	0x43740000
		else
			chao_move_angle(angle, CalSpeed(x_error, y_error));
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f7fb fb69 	bl	800116c <__aeabi_f2iz>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	b21c      	sxth	r4, r3
 8005a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aa0:	f7fb fb64 	bl	800116c <__aeabi_f2iz>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f7ff fe7a 	bl	80057a4 <CalSpeed>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab6:	f7fc f9af 	bl	8001e18 <chao_move_angle>
	}
	CheckCoord();
 8005aba:	f7ff feb3 	bl	8005824 <CheckCoord>
	uint32_t timestart = HAL_GetTick();
 8005abe:	f001 f80b 	bl	8006ad8 <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(10); // delay 10 ms = 100 Hz
 8005ac4:	200a      	movs	r0, #10
 8005ac6:	f001 f811 	bl	8006aec <HAL_Delay>
	if(CheckCoord() == 0)
 8005aca:	f7ff feab 	bl	8005824 <CheckCoord>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 8095 	bne.w	8005c00 <Position_P+0x390>
	{
		float lf_v = cmotor_lf.lastSpeed;
 8005ad6:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <Position_P+0x3a8>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	623b      	str	r3, [r7, #32]
		float lb_v = cmotor_lb.lastSpeed;
 8005adc:	4b4f      	ldr	r3, [pc, #316]	; (8005c1c <Position_P+0x3ac>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	61fb      	str	r3, [r7, #28]
		float rf_v = cmotor_rf.lastSpeed;
 8005ae2:	4b4f      	ldr	r3, [pc, #316]	; (8005c20 <Position_P+0x3b0>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	61bb      	str	r3, [r7, #24]
		float rb_v = cmotor_rb.lastSpeed;
 8005ae8:	4b4e      	ldr	r3, [pc, #312]	; (8005c24 <Position_P+0x3b4>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	617b      	str	r3, [r7, #20]
//		float v_x = -((rf_v - lf_v + lb_v - rb_v) / 500);
		float v_x = ((rf_v - lf_v + lb_v - rb_v) / 200);
 8005aee:	6a39      	ldr	r1, [r7, #32]
 8005af0:	69b8      	ldr	r0, [r7, #24]
 8005af2:	f7fb f86b 	bl	8000bcc <__aeabi_fsub>
 8005af6:	4603      	mov	r3, r0
 8005af8:	69f9      	ldr	r1, [r7, #28]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fb f868 	bl	8000bd0 <__addsf3>
 8005b00:	4603      	mov	r3, r0
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fb f861 	bl	8000bcc <__aeabi_fsub>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4946      	ldr	r1, [pc, #280]	; (8005c28 <Position_P+0x3b8>)
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fb fa1a 	bl	8000f48 <__aeabi_fdiv>
 8005b14:	4603      	mov	r3, r0
 8005b16:	613b      	str	r3, [r7, #16]
		float v_y = ((rf_v + lf_v + lb_v + rb_v) / 200);
 8005b18:	6a39      	ldr	r1, [r7, #32]
 8005b1a:	69b8      	ldr	r0, [r7, #24]
 8005b1c:	f7fb f858 	bl	8000bd0 <__addsf3>
 8005b20:	4603      	mov	r3, r0
 8005b22:	69f9      	ldr	r1, [r7, #28]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fb f853 	bl	8000bd0 <__addsf3>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fb f84e 	bl	8000bd0 <__addsf3>
 8005b34:	4603      	mov	r3, r0
 8005b36:	493c      	ldr	r1, [pc, #240]	; (8005c28 <Position_P+0x3b8>)
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fb fa05 	bl	8000f48 <__aeabi_fdiv>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	60fb      	str	r3, [r7, #12]
		uint32_t timeend = HAL_GetTick();
 8005b42:	f000 ffc9 	bl	8006ad8 <HAL_GetTick>
 8005b46:	60b8      	str	r0, [r7, #8]
		EstiCoord.x = EstiCoord.x + (timeend - timestart) * 0.001 * v_x;
 8005b48:	4b38      	ldr	r3, [pc, #224]	; (8005c2c <Position_P+0x3bc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fa fccf 	bl	80004f0 <__aeabi_f2d>
 8005b52:	4604      	mov	r4, r0
 8005b54:	460d      	mov	r5, r1
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fa fca5 	bl	80004ac <__aeabi_ui2d>
 8005b62:	a32b      	add	r3, pc, #172	; (adr r3, 8005c10 <Position_P+0x3a0>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fd1a 	bl	80005a0 <__aeabi_dmul>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4690      	mov	r8, r2
 8005b72:	4699      	mov	r9, r3
 8005b74:	6938      	ldr	r0, [r7, #16]
 8005b76:	f7fa fcbb 	bl	80004f0 <__aeabi_f2d>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f7fa fd0d 	bl	80005a0 <__aeabi_dmul>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	f7fa fb51 	bl	8000234 <__adddf3>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f7fa ffc3 	bl	8000b24 <__aeabi_d2f>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4a22      	ldr	r2, [pc, #136]	; (8005c2c <Position_P+0x3bc>)
 8005ba2:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + (timeend - timestart) * 0.001 * v_y;
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <Position_P+0x3bc>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fa fca1 	bl	80004f0 <__aeabi_f2d>
 8005bae:	4604      	mov	r4, r0
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fa fc77 	bl	80004ac <__aeabi_ui2d>
 8005bbe:	a314      	add	r3, pc, #80	; (adr r3, 8005c10 <Position_P+0x3a0>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f7fa fcec 	bl	80005a0 <__aeabi_dmul>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4690      	mov	r8, r2
 8005bce:	4699      	mov	r9, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7fa fc8d 	bl	80004f0 <__aeabi_f2d>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4640      	mov	r0, r8
 8005bdc:	4649      	mov	r1, r9
 8005bde:	f7fa fcdf 	bl	80005a0 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fb23 	bl	8000234 <__adddf3>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f7fa ff95 	bl	8000b24 <__aeabi_d2f>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4a0b      	ldr	r2, [pc, #44]	; (8005c2c <Position_P+0x3bc>)
 8005bfe:	6053      	str	r3, [r2, #4]
	}
}
 8005c00:	bf00      	nop
 8005c02:	3738      	adds	r7, #56	; 0x38
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c14:	3f50624d 	.word	0x3f50624d
 8005c18:	200009a0 	.word	0x200009a0
 8005c1c:	20000a18 	.word	0x20000a18
 8005c20:	200009dc 	.word	0x200009dc
 8005c24:	20000a54 	.word	0x20000a54
 8005c28:	43480000 	.word	0x43480000
 8005c2c:	20000c10 	.word	0x20000c10

08005c30 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af04      	add	r7, sp, #16
 8005c36:	4603      	mov	r3, r0
 8005c38:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	9302      	str	r3, [sp, #8]
 8005c40:	2301      	movs	r3, #1
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	1dfb      	adds	r3, r7, #7
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2178      	movs	r1, #120	; 0x78
 8005c4e:	4803      	ldr	r0, [pc, #12]	; (8005c5c <ssd1306_WriteCommand+0x2c>)
 8005c50:	f001 fff0 	bl	8007c34 <HAL_I2C_Mem_Write>
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000644 	.word	0x20000644

08005c60 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af04      	add	r7, sp, #16
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	9202      	str	r2, [sp, #8]
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	2178      	movs	r1, #120	; 0x78
 8005c80:	4803      	ldr	r0, [pc, #12]	; (8005c90 <ssd1306_WriteData+0x30>)
 8005c82:	f001 ffd7 	bl	8007c34 <HAL_I2C_Mem_Write>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000644 	.word	0x20000644

08005c94 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	71fb      	strb	r3, [r7, #7]
 8005c9e:	e016      	b.n	8005cce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	3b50      	subs	r3, #80	; 0x50
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ffc2 	bl	8005c30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005cac:	2000      	movs	r0, #0
 8005cae:	f7ff ffbf 	bl	8005c30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	f7ff ffbc 	bl	8005c30 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <ssd1306_UpdateScreen+0x4c>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	2180      	movs	r1, #128	; 0x80
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff ffcc 	bl	8005c60 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	71fb      	strb	r3, [r7, #7]
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d9e5      	bls.n	8005ca0 <ssd1306_UpdateScreen+0xc>
    }
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20007dcc 	.word	0x20007dcc

08005ce4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	71fb      	strb	r3, [r7, #7]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	71bb      	strb	r3, [r7, #6]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	db3d      	blt.n	8005d7a <ssd1306_DrawPixel+0x96>
 8005cfe:	79bb      	ldrb	r3, [r7, #6]
 8005d00:	2b1f      	cmp	r3, #31
 8005d02:	d83a      	bhi.n	8005d7a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8005d04:	797b      	ldrb	r3, [r7, #5]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d11a      	bne.n	8005d40 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005d0a:	79fa      	ldrb	r2, [r7, #7]
 8005d0c:	79bb      	ldrb	r3, [r7, #6]
 8005d0e:	08db      	lsrs	r3, r3, #3
 8005d10:	b2d8      	uxtb	r0, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	01db      	lsls	r3, r3, #7
 8005d16:	4413      	add	r3, r2
 8005d18:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <ssd1306_DrawPixel+0xa0>)
 8005d1a:	5cd3      	ldrb	r3, [r2, r3]
 8005d1c:	b25a      	sxtb	r2, r3
 8005d1e:	79bb      	ldrb	r3, [r7, #6]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	b259      	sxtb	r1, r3
 8005d30:	79fa      	ldrb	r2, [r7, #7]
 8005d32:	4603      	mov	r3, r0
 8005d34:	01db      	lsls	r3, r3, #7
 8005d36:	4413      	add	r3, r2
 8005d38:	b2c9      	uxtb	r1, r1
 8005d3a:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <ssd1306_DrawPixel+0xa0>)
 8005d3c:	54d1      	strb	r1, [r2, r3]
 8005d3e:	e01d      	b.n	8005d7c <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005d40:	79fa      	ldrb	r2, [r7, #7]
 8005d42:	79bb      	ldrb	r3, [r7, #6]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	b2d8      	uxtb	r0, r3
 8005d48:	4603      	mov	r3, r0
 8005d4a:	01db      	lsls	r3, r3, #7
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <ssd1306_DrawPixel+0xa0>)
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	b25a      	sxtb	r2, r3
 8005d54:	79bb      	ldrb	r3, [r7, #6]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	4013      	ands	r3, r2
 8005d68:	b259      	sxtb	r1, r3
 8005d6a:	79fa      	ldrb	r2, [r7, #7]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	01db      	lsls	r3, r3, #7
 8005d70:	4413      	add	r3, r2
 8005d72:	b2c9      	uxtb	r1, r1
 8005d74:	4a03      	ldr	r2, [pc, #12]	; (8005d84 <ssd1306_DrawPixel+0xa0>)
 8005d76:	54d1      	strb	r1, [r2, r3]
 8005d78:	e000      	b.n	8005d7c <ssd1306_DrawPixel+0x98>
        return;
 8005d7a:	bf00      	nop
    }
}
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	20007dcc 	.word	0x20007dcc

08005d88 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b089      	sub	sp, #36	; 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	1d38      	adds	r0, r7, #4
 8005d92:	e880 0006 	stmia.w	r0, {r1, r2}
 8005d96:	461a      	mov	r2, r3
 8005d98:	4623      	mov	r3, r4
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b1f      	cmp	r3, #31
 8005da4:	d902      	bls.n	8005dac <ssd1306_WriteChar+0x24>
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b7e      	cmp	r3, #126	; 0x7e
 8005daa:	d901      	bls.n	8005db0 <ssd1306_WriteChar+0x28>
        return 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e06d      	b.n	8005e8c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005db0:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	793b      	ldrb	r3, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	dc06      	bgt.n	8005dcc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005dbe:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	797b      	ldrb	r3, [r7, #5]
 8005dc6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	dd01      	ble.n	8005dd0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e05d      	b.n	8005e8c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e04c      	b.n	8005e70 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	3b20      	subs	r3, #32
 8005ddc:	7979      	ldrb	r1, [r7, #5]
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	4619      	mov	r1, r3
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	440b      	add	r3, r1
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e034      	b.n	8005e60 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d012      	beq.n	8005e2c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005e06:	4b23      	ldr	r3, [pc, #140]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	b2d8      	uxtb	r0, r3
 8005e14:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	7bba      	ldrb	r2, [r7, #14]
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7ff ff5d 	bl	8005ce4 <ssd1306_DrawPixel>
 8005e2a:	e016      	b.n	8005e5a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	b2d8      	uxtb	r0, r3
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005e3c:	885b      	ldrh	r3, [r3, #2]
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	b2d9      	uxtb	r1, r3
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	f7ff ff45 	bl	8005ce4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	793b      	ldrb	r3, [r7, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d3c5      	bcc.n	8005df6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	797b      	ldrb	r3, [r7, #5]
 8005e72:	461a      	mov	r2, r3
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d3ad      	bcc.n	8005dd6 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	793b      	ldrb	r3, [r7, #4]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <ssd1306_WriteChar+0x10c>)
 8005e88:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3724      	adds	r7, #36	; 0x24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd90      	pop	{r4, r7, pc}
 8005e94:	20007fcc 	.word	0x20007fcc

08005e98 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	1d38      	adds	r0, r7, #4
 8005ea2:	e880 0006 	stmia.w	r0, {r1, r2}
 8005ea6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8005ea8:	e012      	b.n	8005ed0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	7818      	ldrb	r0, [r3, #0]
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	1d3a      	adds	r2, r7, #4
 8005eb2:	ca06      	ldmia	r2, {r1, r2}
 8005eb4:	f7ff ff68 	bl	8005d88 <ssd1306_WriteChar>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d002      	beq.n	8005eca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	e008      	b.n	8005edc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e8      	bne.n	8005eaa <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	781b      	ldrb	r3, [r3, #0]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <HAL_MspInit+0x5c>)
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <HAL_MspInit+0x5c>)
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	6193      	str	r3, [r2, #24]
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_MspInit+0x5c>)
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
 8005f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f02:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <HAL_MspInit+0x5c>)
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	4a0e      	ldr	r2, [pc, #56]	; (8005f40 <HAL_MspInit+0x5c>)
 8005f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	61d3      	str	r3, [r2, #28]
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <HAL_MspInit+0x5c>)
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <HAL_MspInit+0x60>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <HAL_MspInit+0x60>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40010000 	.word	0x40010000

08005f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f50:	f107 0314 	add.w	r3, r7, #20
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <HAL_I2C_MspInit+0x90>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d132      	bne.n	8005fce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f68:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <HAL_I2C_MspInit+0x94>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <HAL_I2C_MspInit+0x94>)
 8005f6e:	f043 0308 	orr.w	r3, r3, #8
 8005f72:	6193      	str	r3, [r2, #24]
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <HAL_I2C_MspInit+0x94>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f86:	2312      	movs	r3, #18
 8005f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	4619      	mov	r1, r3
 8005f94:	4812      	ldr	r0, [pc, #72]	; (8005fe0 <HAL_I2C_MspInit+0x98>)
 8005f96:	f001 fb5d 	bl	8007654 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <HAL_I2C_MspInit+0x9c>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <HAL_I2C_MspInit+0x9c>)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_I2C_MspInit+0x94>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <HAL_I2C_MspInit+0x94>)
 8005fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fc0:	61d3      	str	r3, [r2, #28]
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_I2C_MspInit+0x94>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005fce:	bf00      	nop
 8005fd0:	3728      	adds	r7, #40	; 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40005400 	.word	0x40005400
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40010c00 	.word	0x40010c00
 8005fe4:	40010000 	.word	0x40010000

08005fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <HAL_TIM_Base_MspInit+0x8c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10c      	bne.n	8006014 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006004:	6193      	str	r3, [r2, #24]
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006012:	e02a      	b.n	800606a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <HAL_TIM_Base_MspInit+0x94>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d114      	bne.n	8006048 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800601e:	4b16      	ldr	r3, [pc, #88]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006024:	f043 0310 	orr.w	r3, r3, #16
 8006028:	61d3      	str	r3, [r2, #28]
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8006036:	2200      	movs	r2, #0
 8006038:	2101      	movs	r1, #1
 800603a:	2036      	movs	r0, #54	; 0x36
 800603c:	f000 fe51 	bl	8006ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8006040:	2036      	movs	r0, #54	; 0x36
 8006042:	f000 fe6a 	bl	8006d1a <HAL_NVIC_EnableIRQ>
}
 8006046:	e010      	b.n	800606a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <HAL_TIM_Base_MspInit+0x98>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d10b      	bne.n	800606a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	4a08      	ldr	r2, [pc, #32]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006058:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800605c:	6193      	str	r3, [r2, #24]
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_TIM_Base_MspInit+0x90>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40021000 	.word	0x40021000
 800607c:	40001000 	.word	0x40001000
 8006080:	40013400 	.word	0x40013400

08006084 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b090      	sub	sp, #64	; 0x40
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800608c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d14f      	bne.n	8006144 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060a4:	4b68      	ldr	r3, [pc, #416]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	4a67      	ldr	r2, [pc, #412]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	61d3      	str	r3, [r2, #28]
 80060b0:	4b65      	ldr	r3, [pc, #404]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060bc:	4b62      	ldr	r3, [pc, #392]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	4a61      	ldr	r2, [pc, #388]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	6193      	str	r3, [r2, #24]
 80060c8:	4b5f      	ldr	r3, [pc, #380]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d4:	4b5c      	ldr	r3, [pc, #368]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	4a5b      	ldr	r2, [pc, #364]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060da:	f043 0308 	orr.w	r3, r3, #8
 80060de:	6193      	str	r3, [r2, #24]
 80060e0:	4b59      	ldr	r3, [pc, #356]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80060ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060f2:	2300      	movs	r3, #0
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060fe:	4619      	mov	r1, r3
 8006100:	4852      	ldr	r0, [pc, #328]	; (800624c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006102:	f001 faa7 	bl	8007654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006106:	2308      	movs	r3, #8
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800610a:	2300      	movs	r3, #0
 800610c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610e:	2300      	movs	r3, #0
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006116:	4619      	mov	r1, r3
 8006118:	484d      	ldr	r0, [pc, #308]	; (8006250 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800611a:	f001 fa9b 	bl	8007654 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613c:	4a45      	ldr	r2, [pc, #276]	; (8006254 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006142:	e07c      	b.n	800623e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a43      	ldr	r2, [pc, #268]	; (8006258 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d124      	bne.n	8006198 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800614e:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	4a3d      	ldr	r2, [pc, #244]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006154:	f043 0302 	orr.w	r3, r3, #2
 8006158:	61d3      	str	r3, [r2, #28]
 800615a:	4b3b      	ldr	r3, [pc, #236]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006166:	4b38      	ldr	r3, [pc, #224]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	4a37      	ldr	r2, [pc, #220]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800616c:	f043 0304 	orr.w	r3, r3, #4
 8006170:	6193      	str	r3, [r2, #24]
 8006172:	4b35      	ldr	r3, [pc, #212]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800617e:	23c0      	movs	r3, #192	; 0xc0
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006182:	2300      	movs	r3, #0
 8006184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006186:	2300      	movs	r3, #0
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800618a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800618e:	4619      	mov	r1, r3
 8006190:	482e      	ldr	r0, [pc, #184]	; (800624c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006192:	f001 fa5f 	bl	8007654 <HAL_GPIO_Init>
}
 8006196:	e052      	b.n	800623e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2f      	ldr	r2, [pc, #188]	; (800625c <HAL_TIM_Encoder_MspInit+0x1d8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d124      	bne.n	80061ec <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	4a28      	ldr	r2, [pc, #160]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061a8:	f043 0304 	orr.w	r3, r3, #4
 80061ac:	61d3      	str	r3, [r2, #28]
 80061ae:	4b26      	ldr	r3, [pc, #152]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ba:	4b23      	ldr	r3, [pc, #140]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	4a22      	ldr	r2, [pc, #136]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061c0:	f043 0308 	orr.w	r3, r3, #8
 80061c4:	6193      	str	r3, [r2, #24]
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061d2:	23c0      	movs	r3, #192	; 0xc0
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061d6:	2300      	movs	r3, #0
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061e2:	4619      	mov	r1, r3
 80061e4:	481a      	ldr	r0, [pc, #104]	; (8006250 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80061e6:	f001 fa35 	bl	8007654 <HAL_GPIO_Init>
}
 80061ea:	e028      	b.n	800623e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d123      	bne.n	800623e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	4a13      	ldr	r2, [pc, #76]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80061fc:	f043 0308 	orr.w	r3, r3, #8
 8006200:	61d3      	str	r3, [r2, #28]
 8006202:	4b11      	ldr	r3, [pc, #68]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620e:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	4a0d      	ldr	r2, [pc, #52]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006214:	f043 0304 	orr.w	r3, r3, #4
 8006218:	6193      	str	r3, [r2, #24]
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	60bb      	str	r3, [r7, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006226:	2303      	movs	r3, #3
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800622a:	2300      	movs	r3, #0
 800622c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006236:	4619      	mov	r1, r3
 8006238:	4804      	ldr	r0, [pc, #16]	; (800624c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800623a:	f001 fa0b 	bl	8007654 <HAL_GPIO_Init>
}
 800623e:	bf00      	nop
 8006240:	3740      	adds	r7, #64	; 0x40
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	40010800 	.word	0x40010800
 8006250:	40010c00 	.word	0x40010c00
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00

08006264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800626c:	f107 0310 	add.w	r3, r7, #16
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <HAL_TIM_MspPostInit+0x98>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d119      	bne.n	80062b8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <HAL_TIM_MspPostInit+0x9c>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_TIM_MspPostInit+0x9c>)
 800628a:	f043 0304 	orr.w	r3, r3, #4
 800628e:	6193      	str	r3, [r2, #24]
 8006290:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <HAL_TIM_MspPostInit+0x9c>)
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800629c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80062a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a2:	2302      	movs	r3, #2
 80062a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a6:	2302      	movs	r3, #2
 80062a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062aa:	f107 0310 	add.w	r3, r7, #16
 80062ae:	4619      	mov	r1, r3
 80062b0:	4814      	ldr	r0, [pc, #80]	; (8006304 <HAL_TIM_MspPostInit+0xa0>)
 80062b2:	f001 f9cf 	bl	8007654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80062b6:	e01d      	b.n	80062f4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a12      	ldr	r2, [pc, #72]	; (8006308 <HAL_TIM_MspPostInit+0xa4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d118      	bne.n	80062f4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <HAL_TIM_MspPostInit+0x9c>)
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <HAL_TIM_MspPostInit+0x9c>)
 80062c8:	f043 0310 	orr.w	r3, r3, #16
 80062cc:	6193      	str	r3, [r2, #24]
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <HAL_TIM_MspPostInit+0x9c>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80062da:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80062de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e0:	2302      	movs	r3, #2
 80062e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e4:	2302      	movs	r3, #2
 80062e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062e8:	f107 0310 	add.w	r3, r7, #16
 80062ec:	4619      	mov	r1, r3
 80062ee:	4807      	ldr	r0, [pc, #28]	; (800630c <HAL_TIM_MspPostInit+0xa8>)
 80062f0:	f001 f9b0 	bl	8007654 <HAL_GPIO_Init>
}
 80062f4:	bf00      	nop
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40021000 	.word	0x40021000
 8006304:	40010800 	.word	0x40010800
 8006308:	40013400 	.word	0x40013400
 800630c:	40011000 	.word	0x40011000

08006310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006318:	f107 031c 	add.w	r3, r7, #28
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	609a      	str	r2, [r3, #8]
 8006324:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a6e      	ldr	r2, [pc, #440]	; (80064e4 <HAL_UART_MspInit+0x1d4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d15e      	bne.n	80063ee <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006330:	4b6d      	ldr	r3, [pc, #436]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	4a6c      	ldr	r2, [pc, #432]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 8006336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633a:	61d3      	str	r3, [r2, #28]
 800633c:	4b6a      	ldr	r3, [pc, #424]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006348:	4b67      	ldr	r3, [pc, #412]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	4a66      	ldr	r2, [pc, #408]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 800634e:	f043 0304 	orr.w	r3, r3, #4
 8006352:	6193      	str	r3, [r2, #24]
 8006354:	4b64      	ldr	r3, [pc, #400]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8006360:	2304      	movs	r3, #4
 8006362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006364:	2302      	movs	r3, #2
 8006366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006368:	2303      	movs	r3, #3
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 800636c:	f107 031c 	add.w	r3, r7, #28
 8006370:	4619      	mov	r1, r3
 8006372:	485e      	ldr	r0, [pc, #376]	; (80064ec <HAL_UART_MspInit+0x1dc>)
 8006374:	f001 f96e 	bl	8007654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8006378:	2308      	movs	r3, #8
 800637a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800637c:	2300      	movs	r3, #0
 800637e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006380:	2300      	movs	r3, #0
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8006384:	f107 031c 	add.w	r3, r7, #28
 8006388:	4619      	mov	r1, r3
 800638a:	4858      	ldr	r0, [pc, #352]	; (80064ec <HAL_UART_MspInit+0x1dc>)
 800638c:	f001 f962 	bl	8007654 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006390:	4b57      	ldr	r3, [pc, #348]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 8006392:	4a58      	ldr	r2, [pc, #352]	; (80064f4 <HAL_UART_MspInit+0x1e4>)
 8006394:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006396:	4b56      	ldr	r3, [pc, #344]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 8006398:	2200      	movs	r2, #0
 800639a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800639c:	4b54      	ldr	r3, [pc, #336]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063a2:	4b53      	ldr	r3, [pc, #332]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063a8:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063ae:	4b50      	ldr	r3, [pc, #320]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80063b4:	4b4e      	ldr	r3, [pc, #312]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063ba:	4b4d      	ldr	r3, [pc, #308]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063bc:	2200      	movs	r2, #0
 80063be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80063c0:	484b      	ldr	r0, [pc, #300]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063c2:	f000 fcc5 	bl	8006d50 <HAL_DMA_Init>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80063cc:	f7fe fc0c 	bl	8004be8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a47      	ldr	r2, [pc, #284]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
 80063d6:	4a46      	ldr	r2, [pc, #280]	; (80064f0 <HAL_UART_MspInit+0x1e0>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80063dc:	2200      	movs	r2, #0
 80063de:	2102      	movs	r1, #2
 80063e0:	2026      	movs	r0, #38	; 0x26
 80063e2:	f000 fc7e 	bl	8006ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063e6:	2026      	movs	r0, #38	; 0x26
 80063e8:	f000 fc97 	bl	8006d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80063ec:	e076      	b.n	80064dc <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a41      	ldr	r2, [pc, #260]	; (80064f8 <HAL_UART_MspInit+0x1e8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d171      	bne.n	80064dc <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80063f8:	4b3b      	ldr	r3, [pc, #236]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	4a3a      	ldr	r2, [pc, #232]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 80063fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006402:	61d3      	str	r3, [r2, #28]
 8006404:	4b38      	ldr	r3, [pc, #224]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006410:	4b35      	ldr	r3, [pc, #212]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	4a34      	ldr	r2, [pc, #208]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 8006416:	f043 0310 	orr.w	r3, r3, #16
 800641a:	6193      	str	r3, [r2, #24]
 800641c:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <HAL_UART_MspInit+0x1d8>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8006428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800642c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642e:	2302      	movs	r3, #2
 8006430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006432:	2303      	movs	r3, #3
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8006436:	f107 031c 	add.w	r3, r7, #28
 800643a:	4619      	mov	r1, r3
 800643c:	482f      	ldr	r0, [pc, #188]	; (80064fc <HAL_UART_MspInit+0x1ec>)
 800643e:	f001 f909 	bl	8007654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8006442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006448:	2300      	movs	r3, #0
 800644a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644c:	2300      	movs	r3, #0
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8006450:	f107 031c 	add.w	r3, r7, #28
 8006454:	4619      	mov	r1, r3
 8006456:	4829      	ldr	r0, [pc, #164]	; (80064fc <HAL_UART_MspInit+0x1ec>)
 8006458:	f001 f8fc 	bl	8007654 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800645c:	4b28      	ldr	r3, [pc, #160]	; (8006500 <HAL_UART_MspInit+0x1f0>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	f043 0310 	orr.w	r3, r3, #16
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647a:	4a21      	ldr	r2, [pc, #132]	; (8006500 <HAL_UART_MspInit+0x1f0>)
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006480:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_UART_MspInit+0x1f8>)
 8006484:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006486:	4b1f      	ldr	r3, [pc, #124]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 8006488:	2200      	movs	r2, #0
 800648a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800648c:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 8006494:	2280      	movs	r2, #128	; 0x80
 8006496:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006498:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 800649a:	2200      	movs	r2, #0
 800649c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800649e:	4b19      	ldr	r3, [pc, #100]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80064a4:	4b17      	ldr	r3, [pc, #92]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80064b0:	4814      	ldr	r0, [pc, #80]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 80064b2:	f000 fc4d 	bl	8006d50 <HAL_DMA_Init>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80064bc:	f7fe fb94 	bl	8004be8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a10      	ldr	r2, [pc, #64]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
 80064c6:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <HAL_UART_MspInit+0x1f4>)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80064cc:	2200      	movs	r2, #0
 80064ce:	2102      	movs	r1, #2
 80064d0:	2027      	movs	r0, #39	; 0x27
 80064d2:	f000 fc06 	bl	8006ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80064d6:	2027      	movs	r0, #39	; 0x27
 80064d8:	f000 fc1f 	bl	8006d1a <HAL_NVIC_EnableIRQ>
}
 80064dc:	bf00      	nop
 80064de:	3730      	adds	r7, #48	; 0x30
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40021000 	.word	0x40021000
 80064ec:	40010800 	.word	0x40010800
 80064f0:	20000918 	.word	0x20000918
 80064f4:	4002006c 	.word	0x4002006c
 80064f8:	40004800 	.word	0x40004800
 80064fc:	40011000 	.word	0x40011000
 8006500:	40010000 	.word	0x40010000
 8006504:	2000095c 	.word	0x2000095c
 8006508:	40020030 	.word	0x40020030

0800650c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8006510:	e7fe      	b.n	8006510 <NMI_Handler+0x4>

08006512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006512:	b480      	push	{r7}
 8006514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006516:	e7fe      	b.n	8006516 <HardFault_Handler+0x4>

08006518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800651c:	e7fe      	b.n	800651c <MemManage_Handler+0x4>

0800651e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800651e:	b480      	push	{r7}
 8006520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006522:	e7fe      	b.n	8006522 <BusFault_Handler+0x4>

08006524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006528:	e7fe      	b.n	8006528 <UsageFault_Handler+0x4>

0800652a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800652a:	b480      	push	{r7}
 800652c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800652e:	bf00      	nop
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006536:	b480      	push	{r7}
 8006538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800653a:	bf00      	nop
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr

08006542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006552:	f000 faaf 	bl	8006ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006560:	4802      	ldr	r0, [pc, #8]	; (800656c <DMA1_Channel3_IRQHandler+0x10>)
 8006562:	f000 fe0d 	bl	8007180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006566:	bf00      	nop
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	2000095c 	.word	0x2000095c

08006570 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006574:	4802      	ldr	r0, [pc, #8]	; (8006580 <DMA1_Channel6_IRQHandler+0x10>)
 8006576:	f000 fe03 	bl	8007180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800657a:	bf00      	nop
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000918 	.word	0x20000918

08006584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006588:	4802      	ldr	r0, [pc, #8]	; (8006594 <USART2_IRQHandler+0x10>)
 800658a:	f003 fd1d 	bl	8009fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800658e:	bf00      	nop
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000890 	.word	0x20000890

08006598 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800659c:	4802      	ldr	r0, [pc, #8]	; (80065a8 <USART3_IRQHandler+0x10>)
 800659e:	f003 fd13 	bl	8009fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200008d4 	.word	0x200008d4

080065ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 80065b0:	4808      	ldr	r0, [pc, #32]	; (80065d4 <TIM6_IRQHandler+0x28>)
 80065b2:	f7fc fb7d 	bl	8002cb0 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 80065b6:	4808      	ldr	r0, [pc, #32]	; (80065d8 <TIM6_IRQHandler+0x2c>)
 80065b8:	f7fc fb7a 	bl	8002cb0 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 80065bc:	4807      	ldr	r0, [pc, #28]	; (80065dc <TIM6_IRQHandler+0x30>)
 80065be:	f7fc fb77 	bl	8002cb0 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 80065c2:	4807      	ldr	r0, [pc, #28]	; (80065e0 <TIM6_IRQHandler+0x34>)
 80065c4:	f7fc fb74 	bl	8002cb0 <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80065c8:	4806      	ldr	r0, [pc, #24]	; (80065e4 <TIM6_IRQHandler+0x38>)
 80065ca:	f002 fd57 	bl	800907c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80065ce:	bf00      	nop
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200009a0 	.word	0x200009a0
 80065d8:	200009dc 	.word	0x200009dc
 80065dc:	20000a18 	.word	0x20000a18
 80065e0:	20000a54 	.word	0x20000a54
 80065e4:	20000800 	.word	0x20000800

080065e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
	return 1;
 80065ec:	2301      	movs	r3, #1
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <_kill>:

int _kill(int pid, int sig)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006600:	f004 fa52 	bl	800aaa8 <__errno>
 8006604:	4603      	mov	r3, r0
 8006606:	2216      	movs	r2, #22
 8006608:	601a      	str	r2, [r3, #0]
	return -1;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <_exit>:

void _exit (int status)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800661e:	f04f 31ff 	mov.w	r1, #4294967295
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff ffe7 	bl	80065f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006628:	e7fe      	b.n	8006628 <_exit+0x12>

0800662a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e00a      	b.n	8006652 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800663c:	f3af 8000 	nop.w
 8006640:	4601      	mov	r1, r0
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	60ba      	str	r2, [r7, #8]
 8006648:	b2ca      	uxtb	r2, r1
 800664a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3301      	adds	r3, #1
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	dbf0      	blt.n	800663c <_read+0x12>
	}

return len;
 800665a:	687b      	ldr	r3, [r7, #4]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e009      	b.n	800668a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	60ba      	str	r2, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	dbf1      	blt.n	8006676 <_write+0x12>
	}
	return len;
 8006692:	687b      	ldr	r3, [r7, #4]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <_close>:

int _close(int file)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	return -1;
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066c2:	605a      	str	r2, [r3, #4]
	return 0;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <_isatty>:

int _isatty(int file)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	return 1;
 80066d8:	2301      	movs	r3, #1
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
	return 0;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <_sbrk+0x5c>)
 8006706:	4b15      	ldr	r3, [pc, #84]	; (800675c <_sbrk+0x60>)
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006710:	4b13      	ldr	r3, [pc, #76]	; (8006760 <_sbrk+0x64>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <_sbrk+0x64>)
 800671a:	4a12      	ldr	r2, [pc, #72]	; (8006764 <_sbrk+0x68>)
 800671c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <_sbrk+0x64>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	429a      	cmp	r2, r3
 800672a:	d207      	bcs.n	800673c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800672c:	f004 f9bc 	bl	800aaa8 <__errno>
 8006730:	4603      	mov	r3, r0
 8006732:	220c      	movs	r2, #12
 8006734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	e009      	b.n	8006750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <_sbrk+0x64>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <_sbrk+0x64>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4413      	add	r3, r2
 800674a:	4a05      	ldr	r2, [pc, #20]	; (8006760 <_sbrk+0x64>)
 800674c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	2000c000 	.word	0x2000c000
 800675c:	00000400 	.word	0x00000400
 8006760:	20007fd4 	.word	0x20007fd4
 8006764:	20007ff0 	.word	0x20007ff0

08006768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800676c:	bf00      	nop
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <set_Beacons>:
extern Order *delivering[5];
extern uint8_t delivering_num;
extern XB_HandleTypeDef hxb;

void set_Beacons(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i < 3; i++){
 800677a:	2300      	movs	r3, #0
 800677c:	71fb      	strb	r3, [r7, #7]
 800677e:	e011      	b.n	80067a4 <set_Beacons+0x30>
		GotoDestination(want_allyBeacons[i], 0);
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <set_Beacons+0x40>)
 8006784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006788:	4613      	mov	r3, r2
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fcc7 	bl	8005120 <GotoDestination>
		huansic_xb_setBeacon(&hxb);
 8006792:	4809      	ldr	r0, [pc, #36]	; (80067b8 <set_Beacons+0x44>)
 8006794:	f7fd f984 	bl	8003aa0 <huansic_xb_setBeacon>
		HAL_Delay(100);
 8006798:	2064      	movs	r0, #100	; 0x64
 800679a:	f000 f9a7 	bl	8006aec <HAL_Delay>
	for(i = 0;i < 3; i++){
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	3301      	adds	r3, #1
 80067a2:	71fb      	strb	r3, [r7, #7]
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d9ea      	bls.n	8006780 <set_Beacons+0xc>
	}
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000bc8 	.word	0x20000bc8
 80067b8:	20000ae8 	.word	0x20000ae8

080067bc <Cal_Battery_Coord>:

void Cal_Battery_Coord(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <Cal_Battery_Coord+0x68>)
 80067ca:	217f      	movs	r1, #127	; 0x7f
 80067cc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 40;
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	4a14      	ldr	r2, [pc, #80]	; (8006824 <Cal_Battery_Coord+0x68>)
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	2228      	movs	r2, #40	; 0x28
 80067da:	805a      	strh	r2, [r3, #2]
	seted += 1;
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	3301      	adds	r3, #1
 80067e0:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <Cal_Battery_Coord+0x68>)
 80067e6:	217f      	movs	r1, #127	; 0x7f
 80067e8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 100;
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <Cal_Battery_Coord+0x68>)
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	2264      	movs	r2, #100	; 0x64
 80067f6:	805a      	strh	r2, [r3, #2]
	seted += 1;
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	3301      	adds	r3, #1
 80067fc:	71fb      	strb	r3, [r7, #7]
	//set a signal
	want_allyBeacons[seted].x = 127;
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <Cal_Battery_Coord+0x68>)
 8006802:	217f      	movs	r1, #127	; 0x7f
 8006804:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	want_allyBeacons[seted].y = 160;
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	4a06      	ldr	r2, [pc, #24]	; (8006824 <Cal_Battery_Coord+0x68>)
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	22a0      	movs	r2, #160	; 0xa0
 8006812:	805a      	strh	r2, [r3, #2]
	seted += 1;
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	3301      	adds	r3, #1
 8006818:	71fb      	strb	r3, [r7, #7]
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr
 8006824:	20000bc8 	.word	0x20000bc8

08006828 <Get_packet>:

void Get_packet(Coordinate merchant)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	GotoDestination(merchant,0);
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fe fc74 	bl	8005120 <GotoDestination>
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <Send_packet>:

void Send_packet(Coordinate consumer)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	GotoDestination(consumer,0);
 8006848:	2100      	movs	r1, #0
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fe fc68 	bl	8005120 <GotoDestination>
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <Get_nearest_consumer>:

Coordinate Get_nearest_consumer(void)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 800685e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006862:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	737b      	strb	r3, [r7, #13]
	if(delivering_num == 0)
 8006868:	4b2f      	ldr	r3, [pc, #188]	; (8006928 <Get_nearest_consumer+0xd0>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <Get_nearest_consumer+0x22>
		return myCoord;
 8006870:	4a2e      	ldr	r2, [pc, #184]	; (800692c <Get_nearest_consumer+0xd4>)
 8006872:	1d3b      	adds	r3, r7, #4
 8006874:	6810      	ldr	r0, [r2, #0]
 8006876:	6018      	str	r0, [r3, #0]
 8006878:	e049      	b.n	800690e <Get_nearest_consumer+0xb6>
	for(uint8_t i = 0;i < delivering_num; i++)
 800687a:	2300      	movs	r3, #0
 800687c:	733b      	strb	r3, [r7, #12]
 800687e:	e039      	b.n	80068f4 <Get_nearest_consumer+0x9c>
	{
		if(delivering[i]->timeLimit < 7000){
 8006880:	7b3b      	ldrb	r3, [r7, #12]
 8006882:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <Get_nearest_consumer+0xd8>)
 8006884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800688e:	4293      	cmp	r3, r2
 8006890:	d802      	bhi.n	8006898 <Get_nearest_consumer+0x40>
			minindex = i;
 8006892:	7b3b      	ldrb	r3, [r7, #12]
 8006894:	737b      	strb	r3, [r7, #13]
			break;
 8006896:	e032      	b.n	80068fe <Get_nearest_consumer+0xa6>
		}
		distance = abs(myCoord.x - delivering[i]->destCoord.x) + abs(myCoord.y - delivering[i]->destCoord.y);
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <Get_nearest_consumer+0xd4>)
 800689a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800689e:	4619      	mov	r1, r3
 80068a0:	7b3b      	ldrb	r3, [r7, #12]
 80068a2:	4a23      	ldr	r2, [pc, #140]	; (8006930 <Get_nearest_consumer+0xd8>)
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068ac:	1acb      	subs	r3, r1, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfb8      	it	lt
 80068b2:	425b      	neglt	r3, r3
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	4b1d      	ldr	r3, [pc, #116]	; (800692c <Get_nearest_consumer+0xd4>)
 80068b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068bc:	4618      	mov	r0, r3
 80068be:	7b3b      	ldrb	r3, [r7, #12]
 80068c0:	491b      	ldr	r1, [pc, #108]	; (8006930 <Get_nearest_consumer+0xd8>)
 80068c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80068ca:	1ac3      	subs	r3, r0, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfb8      	it	lt
 80068d0:	425b      	neglt	r3, r3
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	4413      	add	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 80068da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80068de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	da03      	bge.n	80068ee <Get_nearest_consumer+0x96>
			mindis = distance;
 80068e6:	897b      	ldrh	r3, [r7, #10]
 80068e8:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 80068ea:	7b3b      	ldrb	r3, [r7, #12]
 80068ec:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 80068ee:	7b3b      	ldrb	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	733b      	strb	r3, [r7, #12]
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <Get_nearest_consumer+0xd0>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	7b3a      	ldrb	r2, [r7, #12]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d3c0      	bcc.n	8006880 <Get_nearest_consumer+0x28>
		}
	}
	Coordinate nearest = delivering[minindex]->destCoord;
 80068fe:	7b7b      	ldrb	r3, [r7, #13]
 8006900:	4a0b      	ldr	r2, [pc, #44]	; (8006930 <Get_nearest_consumer+0xd8>)
 8006902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	603b      	str	r3, [r7, #0]
	return nearest;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	607b      	str	r3, [r7, #4]

}
 800690e:	2300      	movs	r3, #0
 8006910:	88ba      	ldrh	r2, [r7, #4]
 8006912:	f362 030f 	bfi	r3, r2, #0, #16
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	f362 431f 	bfi	r3, r2, #16, #16
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000c08 	.word	0x20000c08
 800692c:	20000c0c 	.word	0x20000c0c
 8006930:	20000bf4 	.word	0x20000bf4

08006934 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 800693a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800693e:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8006944:	2300      	movs	r3, #0
 8006946:	733b      	strb	r3, [r7, #12]
 8006948:	e02b      	b.n	80069a2 <Get_nearest_Beacon+0x6e>
	{
		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 800694a:	4b22      	ldr	r3, [pc, #136]	; (80069d4 <Get_nearest_Beacon+0xa0>)
 800694c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006950:	4619      	mov	r1, r3
 8006952:	7b3b      	ldrb	r3, [r7, #12]
 8006954:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <Get_nearest_Beacon+0xa4>)
 8006956:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 800695a:	1acb      	subs	r3, r1, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	bfb8      	it	lt
 8006960:	425b      	neglt	r3, r3
 8006962:	b29a      	uxth	r2, r3
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <Get_nearest_Beacon+0xa0>)
 8006966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800696a:	4618      	mov	r0, r3
 800696c:	7b3b      	ldrb	r3, [r7, #12]
 800696e:	491a      	ldr	r1, [pc, #104]	; (80069d8 <Get_nearest_Beacon+0xa4>)
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006978:	1ac3      	subs	r3, r0, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	bfb8      	it	lt
 800697e:	425b      	neglt	r3, r3
 8006980:	b29b      	uxth	r3, r3
 8006982:	4413      	add	r3, r2
 8006984:	b29b      	uxth	r3, r3
 8006986:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8006988:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800698c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006990:	429a      	cmp	r2, r3
 8006992:	da03      	bge.n	800699c <Get_nearest_Beacon+0x68>
			mindis = distance;
 8006994:	897b      	ldrh	r3, [r7, #10]
 8006996:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8006998:	7b3b      	ldrb	r3, [r7, #12]
 800699a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 800699c:	7b3b      	ldrb	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	733b      	strb	r3, [r7, #12]
 80069a2:	7b3b      	ldrb	r3, [r7, #12]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d9d0      	bls.n	800694a <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 80069a8:	7b7b      	ldrb	r3, [r7, #13]
 80069aa:	490b      	ldr	r1, [pc, #44]	; (80069d8 <Get_nearest_Beacon+0xa4>)
 80069ac:	463a      	mov	r2, r7
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	6010      	str	r0, [r2, #0]
	return nearest;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	2300      	movs	r3, #0
 80069bc:	88ba      	ldrh	r2, [r7, #4]
 80069be:	f362 030f 	bfi	r3, r2, #0, #16
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	f362 431f 	bfi	r3, r2, #16, #16
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000c0c 	.word	0x20000c0c
 80069d8:	20000bb0 	.word	0x20000bb0

080069dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069dc:	480c      	ldr	r0, [pc, #48]	; (8006a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80069de:	490d      	ldr	r1, [pc, #52]	; (8006a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80069e0:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80069e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069e4:	e002      	b.n	80069ec <LoopCopyDataInit>

080069e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069ea:	3304      	adds	r3, #4

080069ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069f0:	d3f9      	bcc.n	80069e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069f2:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80069f4:	4c0a      	ldr	r4, [pc, #40]	; (8006a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80069f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069f8:	e001      	b.n	80069fe <LoopFillZerobss>

080069fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069fc:	3204      	adds	r2, #4

080069fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a00:	d3fb      	bcc.n	80069fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a02:	f7ff feb1 	bl	8006768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a06:	f004 f867 	bl	800aad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a0a:	f7fd f8e7 	bl	8003bdc <main>
  bx lr
 8006a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8006a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a14:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006a18:	0800dbf0 	.word	0x0800dbf0
  ldr r2, =_sbss
 8006a1c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006a20:	20007fec 	.word	0x20007fec

08006a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a24:	e7fe      	b.n	8006a24 <ADC1_2_IRQHandler>
	...

08006a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a2c:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <HAL_Init+0x28>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a07      	ldr	r2, [pc, #28]	; (8006a50 <HAL_Init+0x28>)
 8006a32:	f043 0310 	orr.w	r3, r3, #16
 8006a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a38:	2003      	movs	r0, #3
 8006a3a:	f000 f947 	bl	8006ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a3e:	200f      	movs	r0, #15
 8006a40:	f000 f808 	bl	8006a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a44:	f7ff fa4e 	bl	8005ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40022000 	.word	0x40022000

08006a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_InitTick+0x54>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4b12      	ldr	r3, [pc, #72]	; (8006aac <HAL_InitTick+0x58>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	4619      	mov	r1, r3
 8006a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f95f 	bl	8006d36 <HAL_SYSTICK_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e00e      	b.n	8006aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b0f      	cmp	r3, #15
 8006a86:	d80a      	bhi.n	8006a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a88:	2200      	movs	r2, #0
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	f000 f927 	bl	8006ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a94:	4a06      	ldr	r2, [pc, #24]	; (8006ab0 <HAL_InitTick+0x5c>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000018 	.word	0x20000018
 8006aac:	20000020 	.word	0x20000020
 8006ab0:	2000001c 	.word	0x2000001c

08006ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <HAL_IncTick+0x1c>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_IncTick+0x20>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	4a03      	ldr	r2, [pc, #12]	; (8006ad4 <HAL_IncTick+0x20>)
 8006ac6:	6013      	str	r3, [r2, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr
 8006ad0:	20000020 	.word	0x20000020
 8006ad4:	20007fd8 	.word	0x20007fd8

08006ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return uwTick;
 8006adc:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <HAL_GetTick+0x10>)
 8006ade:	681b      	ldr	r3, [r3, #0]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr
 8006ae8:	20007fd8 	.word	0x20007fd8

08006aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006af4:	f7ff fff0 	bl	8006ad8 <HAL_GetTick>
 8006af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d005      	beq.n	8006b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_Delay+0x44>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b12:	bf00      	nop
 8006b14:	f7ff ffe0 	bl	8006ad8 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d8f7      	bhi.n	8006b14 <HAL_Delay+0x28>
  {
  }
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000020 	.word	0x20000020

08006b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <__NVIC_SetPriorityGrouping+0x44>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b50:	4013      	ands	r3, r2
 8006b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b66:	4a04      	ldr	r2, [pc, #16]	; (8006b78 <__NVIC_SetPriorityGrouping+0x44>)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	60d3      	str	r3, [r2, #12]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	e000ed00 	.word	0xe000ed00

08006b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <__NVIC_GetPriorityGrouping+0x18>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	f003 0307 	and.w	r3, r3, #7
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	e000ed00 	.word	0xe000ed00

08006b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	db0b      	blt.n	8006bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	f003 021f 	and.w	r2, r3, #31
 8006bb0:	4906      	ldr	r1, [pc, #24]	; (8006bcc <__NVIC_EnableIRQ+0x34>)
 8006bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	2001      	movs	r0, #1
 8006bba:	fa00 f202 	lsl.w	r2, r0, r2
 8006bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	e000e100 	.word	0xe000e100

08006bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	db0a      	blt.n	8006bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	490c      	ldr	r1, [pc, #48]	; (8006c1c <__NVIC_SetPriority+0x4c>)
 8006bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bee:	0112      	lsls	r2, r2, #4
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bf8:	e00a      	b.n	8006c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4908      	ldr	r1, [pc, #32]	; (8006c20 <__NVIC_SetPriority+0x50>)
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	3b04      	subs	r3, #4
 8006c08:	0112      	lsls	r2, r2, #4
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	761a      	strb	r2, [r3, #24]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	e000e100 	.word	0xe000e100
 8006c20:	e000ed00 	.word	0xe000ed00

08006c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b089      	sub	sp, #36	; 0x24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f1c3 0307 	rsb	r3, r3, #7
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	bf28      	it	cs
 8006c42:	2304      	movcs	r3, #4
 8006c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	d902      	bls.n	8006c54 <NVIC_EncodePriority+0x30>
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	3b03      	subs	r3, #3
 8006c52:	e000      	b.n	8006c56 <NVIC_EncodePriority+0x32>
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43da      	mvns	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	401a      	ands	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	43d9      	mvns	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c7c:	4313      	orrs	r3, r2
         );
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3724      	adds	r7, #36	; 0x24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c98:	d301      	bcc.n	8006c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e00f      	b.n	8006cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c9e:	4a0a      	ldr	r2, [pc, #40]	; (8006cc8 <SysTick_Config+0x40>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ca6:	210f      	movs	r1, #15
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	f7ff ff90 	bl	8006bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <SysTick_Config+0x40>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cb6:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <SysTick_Config+0x40>)
 8006cb8:	2207      	movs	r2, #7
 8006cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	e000e010 	.word	0xe000e010

08006ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff ff2d 	bl	8006b34 <__NVIC_SetPriorityGrouping>
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	4603      	mov	r3, r0
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006cf4:	f7ff ff42 	bl	8006b7c <__NVIC_GetPriorityGrouping>
 8006cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	6978      	ldr	r0, [r7, #20]
 8006d00:	f7ff ff90 	bl	8006c24 <NVIC_EncodePriority>
 8006d04:	4602      	mov	r2, r0
 8006d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff ff5f 	bl	8006bd0 <__NVIC_SetPriority>
}
 8006d12:	bf00      	nop
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	4603      	mov	r3, r0
 8006d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ff35 	bl	8006b98 <__NVIC_EnableIRQ>
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff ffa2 	bl	8006c88 <SysTick_Config>
 8006d44:	4603      	mov	r3, r0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e059      	b.n	8006e1a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <HAL_DMA_Init+0xd4>)
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d80f      	bhi.n	8006d92 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <HAL_DMA_Init+0xd8>)
 8006d7a:	4413      	add	r3, r2
 8006d7c:	4a2b      	ldr	r2, [pc, #172]	; (8006e2c <HAL_DMA_Init+0xdc>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	009a      	lsls	r2, r3, #2
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a28      	ldr	r2, [pc, #160]	; (8006e30 <HAL_DMA_Init+0xe0>)
 8006d8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d90:	e00e      	b.n	8006db0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	4b26      	ldr	r3, [pc, #152]	; (8006e34 <HAL_DMA_Init+0xe4>)
 8006d9a:	4413      	add	r3, r2
 8006d9c:	4a23      	ldr	r2, [pc, #140]	; (8006e2c <HAL_DMA_Init+0xdc>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	009a      	lsls	r2, r3, #2
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a22      	ldr	r2, [pc, #136]	; (8006e38 <HAL_DMA_Init+0xe8>)
 8006dae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006dc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr
 8006e24:	40020407 	.word	0x40020407
 8006e28:	bffdfff8 	.word	0xbffdfff8
 8006e2c:	cccccccd 	.word	0xcccccccd
 8006e30:	40020000 	.word	0x40020000
 8006e34:	bffdfbf8 	.word	0xbffdfbf8
 8006e38:	40020400 	.word	0x40020400

08006e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_DMA_Start_IT+0x20>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e04a      	b.n	8006ef2 <HAL_DMA_Start_IT+0xb6>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d13a      	bne.n	8006ee4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fbb0 	bl	80075f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 020e 	orr.w	r2, r2, #14
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e00f      	b.n	8006ed2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0204 	bic.w	r2, r2, #4
 8006ec0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 020a 	orr.w	r2, r2, #10
 8006ed0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e005      	b.n	8006ef0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006eec:	2302      	movs	r3, #2
 8006eee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d008      	beq.n	8006f22 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2204      	movs	r2, #4
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e020      	b.n	8006f64 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 020e 	bic.w	r2, r2, #14
 8006f30:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d005      	beq.n	8006f92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e0d6      	b.n	8007140 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 020e 	bic.w	r2, r2, #14
 8006fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4b64      	ldr	r3, [pc, #400]	; (800714c <HAL_DMA_Abort_IT+0x1dc>)
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d958      	bls.n	8007070 <HAL_DMA_Abort_IT+0x100>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a63      	ldr	r2, [pc, #396]	; (8007150 <HAL_DMA_Abort_IT+0x1e0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d04f      	beq.n	8007068 <HAL_DMA_Abort_IT+0xf8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a61      	ldr	r2, [pc, #388]	; (8007154 <HAL_DMA_Abort_IT+0x1e4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d048      	beq.n	8007064 <HAL_DMA_Abort_IT+0xf4>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a60      	ldr	r2, [pc, #384]	; (8007158 <HAL_DMA_Abort_IT+0x1e8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d040      	beq.n	800705e <HAL_DMA_Abort_IT+0xee>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a5e      	ldr	r2, [pc, #376]	; (800715c <HAL_DMA_Abort_IT+0x1ec>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d038      	beq.n	8007058 <HAL_DMA_Abort_IT+0xe8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a5d      	ldr	r2, [pc, #372]	; (8007160 <HAL_DMA_Abort_IT+0x1f0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d030      	beq.n	8007052 <HAL_DMA_Abort_IT+0xe2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a5b      	ldr	r2, [pc, #364]	; (8007164 <HAL_DMA_Abort_IT+0x1f4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d028      	beq.n	800704c <HAL_DMA_Abort_IT+0xdc>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a53      	ldr	r2, [pc, #332]	; (800714c <HAL_DMA_Abort_IT+0x1dc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d020      	beq.n	8007046 <HAL_DMA_Abort_IT+0xd6>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a57      	ldr	r2, [pc, #348]	; (8007168 <HAL_DMA_Abort_IT+0x1f8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d019      	beq.n	8007042 <HAL_DMA_Abort_IT+0xd2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a56      	ldr	r2, [pc, #344]	; (800716c <HAL_DMA_Abort_IT+0x1fc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d012      	beq.n	800703e <HAL_DMA_Abort_IT+0xce>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a54      	ldr	r2, [pc, #336]	; (8007170 <HAL_DMA_Abort_IT+0x200>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00a      	beq.n	8007038 <HAL_DMA_Abort_IT+0xc8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a53      	ldr	r2, [pc, #332]	; (8007174 <HAL_DMA_Abort_IT+0x204>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d102      	bne.n	8007032 <HAL_DMA_Abort_IT+0xc2>
 800702c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007030:	e01b      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007036:	e018      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800703c:	e015      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 800703e:	2310      	movs	r3, #16
 8007040:	e013      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007042:	2301      	movs	r3, #1
 8007044:	e011      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800704a:	e00e      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 800704c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007050:	e00b      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007056:	e008      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800705c:	e005      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 800705e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007062:	e002      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007064:	2310      	movs	r3, #16
 8007066:	e000      	b.n	800706a <HAL_DMA_Abort_IT+0xfa>
 8007068:	2301      	movs	r3, #1
 800706a:	4a43      	ldr	r2, [pc, #268]	; (8007178 <HAL_DMA_Abort_IT+0x208>)
 800706c:	6053      	str	r3, [r2, #4]
 800706e:	e057      	b.n	8007120 <HAL_DMA_Abort_IT+0x1b0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a36      	ldr	r2, [pc, #216]	; (8007150 <HAL_DMA_Abort_IT+0x1e0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d04f      	beq.n	800711a <HAL_DMA_Abort_IT+0x1aa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a35      	ldr	r2, [pc, #212]	; (8007154 <HAL_DMA_Abort_IT+0x1e4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d048      	beq.n	8007116 <HAL_DMA_Abort_IT+0x1a6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a33      	ldr	r2, [pc, #204]	; (8007158 <HAL_DMA_Abort_IT+0x1e8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d040      	beq.n	8007110 <HAL_DMA_Abort_IT+0x1a0>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a32      	ldr	r2, [pc, #200]	; (800715c <HAL_DMA_Abort_IT+0x1ec>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d038      	beq.n	800710a <HAL_DMA_Abort_IT+0x19a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a30      	ldr	r2, [pc, #192]	; (8007160 <HAL_DMA_Abort_IT+0x1f0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d030      	beq.n	8007104 <HAL_DMA_Abort_IT+0x194>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2f      	ldr	r2, [pc, #188]	; (8007164 <HAL_DMA_Abort_IT+0x1f4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d028      	beq.n	80070fe <HAL_DMA_Abort_IT+0x18e>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a26      	ldr	r2, [pc, #152]	; (800714c <HAL_DMA_Abort_IT+0x1dc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d020      	beq.n	80070f8 <HAL_DMA_Abort_IT+0x188>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2b      	ldr	r2, [pc, #172]	; (8007168 <HAL_DMA_Abort_IT+0x1f8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d019      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x184>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a29      	ldr	r2, [pc, #164]	; (800716c <HAL_DMA_Abort_IT+0x1fc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d012      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x180>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a28      	ldr	r2, [pc, #160]	; (8007170 <HAL_DMA_Abort_IT+0x200>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00a      	beq.n	80070ea <HAL_DMA_Abort_IT+0x17a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a26      	ldr	r2, [pc, #152]	; (8007174 <HAL_DMA_Abort_IT+0x204>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d102      	bne.n	80070e4 <HAL_DMA_Abort_IT+0x174>
 80070de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e2:	e01b      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 80070e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070e8:	e018      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 80070ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ee:	e015      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 80070f0:	2310      	movs	r3, #16
 80070f2:	e013      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e011      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 80070f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070fc:	e00e      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 80070fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007102:	e00b      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 8007104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007108:	e008      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 800710a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800710e:	e005      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 8007110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007114:	e002      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 8007116:	2310      	movs	r3, #16
 8007118:	e000      	b.n	800711c <HAL_DMA_Abort_IT+0x1ac>
 800711a:	2301      	movs	r3, #1
 800711c:	4a17      	ldr	r2, [pc, #92]	; (800717c <HAL_DMA_Abort_IT+0x20c>)
 800711e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
    } 
  }
  return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40020080 	.word	0x40020080
 8007150:	40020008 	.word	0x40020008
 8007154:	4002001c 	.word	0x4002001c
 8007158:	40020030 	.word	0x40020030
 800715c:	40020044 	.word	0x40020044
 8007160:	40020058 	.word	0x40020058
 8007164:	4002006c 	.word	0x4002006c
 8007168:	40020408 	.word	0x40020408
 800716c:	4002041c 	.word	0x4002041c
 8007170:	40020430 	.word	0x40020430
 8007174:	40020444 	.word	0x40020444
 8007178:	40020400 	.word	0x40020400
 800717c:	40020000 	.word	0x40020000

08007180 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	2204      	movs	r2, #4
 800719e:	409a      	lsls	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4013      	ands	r3, r2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80f1 	beq.w	800738c <HAL_DMA_IRQHandler+0x20c>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80eb 	beq.w	800738c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d107      	bne.n	80071d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0204 	bic.w	r2, r2, #4
 80071d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	4b5f      	ldr	r3, [pc, #380]	; (8007358 <HAL_DMA_IRQHandler+0x1d8>)
 80071dc:	429a      	cmp	r2, r3
 80071de:	d958      	bls.n	8007292 <HAL_DMA_IRQHandler+0x112>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a5d      	ldr	r2, [pc, #372]	; (800735c <HAL_DMA_IRQHandler+0x1dc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d04f      	beq.n	800728a <HAL_DMA_IRQHandler+0x10a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a5c      	ldr	r2, [pc, #368]	; (8007360 <HAL_DMA_IRQHandler+0x1e0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d048      	beq.n	8007286 <HAL_DMA_IRQHandler+0x106>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a5a      	ldr	r2, [pc, #360]	; (8007364 <HAL_DMA_IRQHandler+0x1e4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d040      	beq.n	8007280 <HAL_DMA_IRQHandler+0x100>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a59      	ldr	r2, [pc, #356]	; (8007368 <HAL_DMA_IRQHandler+0x1e8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d038      	beq.n	800727a <HAL_DMA_IRQHandler+0xfa>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a57      	ldr	r2, [pc, #348]	; (800736c <HAL_DMA_IRQHandler+0x1ec>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d030      	beq.n	8007274 <HAL_DMA_IRQHandler+0xf4>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a56      	ldr	r2, [pc, #344]	; (8007370 <HAL_DMA_IRQHandler+0x1f0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d028      	beq.n	800726e <HAL_DMA_IRQHandler+0xee>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a4d      	ldr	r2, [pc, #308]	; (8007358 <HAL_DMA_IRQHandler+0x1d8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d020      	beq.n	8007268 <HAL_DMA_IRQHandler+0xe8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a52      	ldr	r2, [pc, #328]	; (8007374 <HAL_DMA_IRQHandler+0x1f4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d019      	beq.n	8007264 <HAL_DMA_IRQHandler+0xe4>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a50      	ldr	r2, [pc, #320]	; (8007378 <HAL_DMA_IRQHandler+0x1f8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d012      	beq.n	8007260 <HAL_DMA_IRQHandler+0xe0>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a4f      	ldr	r2, [pc, #316]	; (800737c <HAL_DMA_IRQHandler+0x1fc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00a      	beq.n	800725a <HAL_DMA_IRQHandler+0xda>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a4d      	ldr	r2, [pc, #308]	; (8007380 <HAL_DMA_IRQHandler+0x200>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d102      	bne.n	8007254 <HAL_DMA_IRQHandler+0xd4>
 800724e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007252:	e01b      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007258:	e018      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 800725a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800725e:	e015      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	e013      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007264:	2304      	movs	r3, #4
 8007266:	e011      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007268:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800726c:	e00e      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 800726e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007272:	e00b      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007274:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007278:	e008      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 800727a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800727e:	e005      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007284:	e002      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 8007286:	2340      	movs	r3, #64	; 0x40
 8007288:	e000      	b.n	800728c <HAL_DMA_IRQHandler+0x10c>
 800728a:	2304      	movs	r3, #4
 800728c:	4a3d      	ldr	r2, [pc, #244]	; (8007384 <HAL_DMA_IRQHandler+0x204>)
 800728e:	6053      	str	r3, [r2, #4]
 8007290:	e057      	b.n	8007342 <HAL_DMA_IRQHandler+0x1c2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a31      	ldr	r2, [pc, #196]	; (800735c <HAL_DMA_IRQHandler+0x1dc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d04f      	beq.n	800733c <HAL_DMA_IRQHandler+0x1bc>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2f      	ldr	r2, [pc, #188]	; (8007360 <HAL_DMA_IRQHandler+0x1e0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d048      	beq.n	8007338 <HAL_DMA_IRQHandler+0x1b8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2e      	ldr	r2, [pc, #184]	; (8007364 <HAL_DMA_IRQHandler+0x1e4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d040      	beq.n	8007332 <HAL_DMA_IRQHandler+0x1b2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <HAL_DMA_IRQHandler+0x1e8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d038      	beq.n	800732c <HAL_DMA_IRQHandler+0x1ac>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a2b      	ldr	r2, [pc, #172]	; (800736c <HAL_DMA_IRQHandler+0x1ec>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d030      	beq.n	8007326 <HAL_DMA_IRQHandler+0x1a6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a29      	ldr	r2, [pc, #164]	; (8007370 <HAL_DMA_IRQHandler+0x1f0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d028      	beq.n	8007320 <HAL_DMA_IRQHandler+0x1a0>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <HAL_DMA_IRQHandler+0x1d8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d020      	beq.n	800731a <HAL_DMA_IRQHandler+0x19a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a25      	ldr	r2, [pc, #148]	; (8007374 <HAL_DMA_IRQHandler+0x1f4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d019      	beq.n	8007316 <HAL_DMA_IRQHandler+0x196>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a24      	ldr	r2, [pc, #144]	; (8007378 <HAL_DMA_IRQHandler+0x1f8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d012      	beq.n	8007312 <HAL_DMA_IRQHandler+0x192>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a22      	ldr	r2, [pc, #136]	; (800737c <HAL_DMA_IRQHandler+0x1fc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00a      	beq.n	800730c <HAL_DMA_IRQHandler+0x18c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a21      	ldr	r2, [pc, #132]	; (8007380 <HAL_DMA_IRQHandler+0x200>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d102      	bne.n	8007306 <HAL_DMA_IRQHandler+0x186>
 8007300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007304:	e01b      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007306:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800730a:	e018      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 800730c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007310:	e015      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	e013      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007316:	2304      	movs	r3, #4
 8007318:	e011      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 800731a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800731e:	e00e      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007324:	e00b      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007326:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800732a:	e008      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 800732c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007330:	e005      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007336:	e002      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 8007338:	2340      	movs	r3, #64	; 0x40
 800733a:	e000      	b.n	800733e <HAL_DMA_IRQHandler+0x1be>
 800733c:	2304      	movs	r3, #4
 800733e:	4a12      	ldr	r2, [pc, #72]	; (8007388 <HAL_DMA_IRQHandler+0x208>)
 8007340:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8136 	beq.w	80075b8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007354:	e130      	b.n	80075b8 <HAL_DMA_IRQHandler+0x438>
 8007356:	bf00      	nop
 8007358:	40020080 	.word	0x40020080
 800735c:	40020008 	.word	0x40020008
 8007360:	4002001c 	.word	0x4002001c
 8007364:	40020030 	.word	0x40020030
 8007368:	40020044 	.word	0x40020044
 800736c:	40020058 	.word	0x40020058
 8007370:	4002006c 	.word	0x4002006c
 8007374:	40020408 	.word	0x40020408
 8007378:	4002041c 	.word	0x4002041c
 800737c:	40020430 	.word	0x40020430
 8007380:	40020444 	.word	0x40020444
 8007384:	40020400 	.word	0x40020400
 8007388:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2202      	movs	r2, #2
 8007392:	409a      	lsls	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80dd 	beq.w	8007558 <HAL_DMA_IRQHandler+0x3d8>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80d7 	beq.w	8007558 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 020a 	bic.w	r2, r2, #10
 80073c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b7b      	ldr	r3, [pc, #492]	; (80075c4 <HAL_DMA_IRQHandler+0x444>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	d958      	bls.n	800748e <HAL_DMA_IRQHandler+0x30e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a79      	ldr	r2, [pc, #484]	; (80075c8 <HAL_DMA_IRQHandler+0x448>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d04f      	beq.n	8007486 <HAL_DMA_IRQHandler+0x306>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a78      	ldr	r2, [pc, #480]	; (80075cc <HAL_DMA_IRQHandler+0x44c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d048      	beq.n	8007482 <HAL_DMA_IRQHandler+0x302>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a76      	ldr	r2, [pc, #472]	; (80075d0 <HAL_DMA_IRQHandler+0x450>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d040      	beq.n	800747c <HAL_DMA_IRQHandler+0x2fc>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a75      	ldr	r2, [pc, #468]	; (80075d4 <HAL_DMA_IRQHandler+0x454>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d038      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2f6>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a73      	ldr	r2, [pc, #460]	; (80075d8 <HAL_DMA_IRQHandler+0x458>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d030      	beq.n	8007470 <HAL_DMA_IRQHandler+0x2f0>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a72      	ldr	r2, [pc, #456]	; (80075dc <HAL_DMA_IRQHandler+0x45c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d028      	beq.n	800746a <HAL_DMA_IRQHandler+0x2ea>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a69      	ldr	r2, [pc, #420]	; (80075c4 <HAL_DMA_IRQHandler+0x444>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d020      	beq.n	8007464 <HAL_DMA_IRQHandler+0x2e4>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a6e      	ldr	r2, [pc, #440]	; (80075e0 <HAL_DMA_IRQHandler+0x460>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d019      	beq.n	8007460 <HAL_DMA_IRQHandler+0x2e0>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a6c      	ldr	r2, [pc, #432]	; (80075e4 <HAL_DMA_IRQHandler+0x464>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d012      	beq.n	800745c <HAL_DMA_IRQHandler+0x2dc>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a6b      	ldr	r2, [pc, #428]	; (80075e8 <HAL_DMA_IRQHandler+0x468>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00a      	beq.n	8007456 <HAL_DMA_IRQHandler+0x2d6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a69      	ldr	r2, [pc, #420]	; (80075ec <HAL_DMA_IRQHandler+0x46c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d102      	bne.n	8007450 <HAL_DMA_IRQHandler+0x2d0>
 800744a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800744e:	e01b      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007454:	e018      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745a:	e015      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 800745c:	2320      	movs	r3, #32
 800745e:	e013      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007460:	2302      	movs	r3, #2
 8007462:	e011      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007468:	e00e      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 800746a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800746e:	e00b      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007474:	e008      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800747a:	e005      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 800747c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007480:	e002      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007482:	2320      	movs	r3, #32
 8007484:	e000      	b.n	8007488 <HAL_DMA_IRQHandler+0x308>
 8007486:	2302      	movs	r3, #2
 8007488:	4a59      	ldr	r2, [pc, #356]	; (80075f0 <HAL_DMA_IRQHandler+0x470>)
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e057      	b.n	800753e <HAL_DMA_IRQHandler+0x3be>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a4d      	ldr	r2, [pc, #308]	; (80075c8 <HAL_DMA_IRQHandler+0x448>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d04f      	beq.n	8007538 <HAL_DMA_IRQHandler+0x3b8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a4b      	ldr	r2, [pc, #300]	; (80075cc <HAL_DMA_IRQHandler+0x44c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d048      	beq.n	8007534 <HAL_DMA_IRQHandler+0x3b4>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4a      	ldr	r2, [pc, #296]	; (80075d0 <HAL_DMA_IRQHandler+0x450>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d040      	beq.n	800752e <HAL_DMA_IRQHandler+0x3ae>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a48      	ldr	r2, [pc, #288]	; (80075d4 <HAL_DMA_IRQHandler+0x454>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d038      	beq.n	8007528 <HAL_DMA_IRQHandler+0x3a8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a47      	ldr	r2, [pc, #284]	; (80075d8 <HAL_DMA_IRQHandler+0x458>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d030      	beq.n	8007522 <HAL_DMA_IRQHandler+0x3a2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a45      	ldr	r2, [pc, #276]	; (80075dc <HAL_DMA_IRQHandler+0x45c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d028      	beq.n	800751c <HAL_DMA_IRQHandler+0x39c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a3d      	ldr	r2, [pc, #244]	; (80075c4 <HAL_DMA_IRQHandler+0x444>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d020      	beq.n	8007516 <HAL_DMA_IRQHandler+0x396>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a41      	ldr	r2, [pc, #260]	; (80075e0 <HAL_DMA_IRQHandler+0x460>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d019      	beq.n	8007512 <HAL_DMA_IRQHandler+0x392>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a40      	ldr	r2, [pc, #256]	; (80075e4 <HAL_DMA_IRQHandler+0x464>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d012      	beq.n	800750e <HAL_DMA_IRQHandler+0x38e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a3e      	ldr	r2, [pc, #248]	; (80075e8 <HAL_DMA_IRQHandler+0x468>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00a      	beq.n	8007508 <HAL_DMA_IRQHandler+0x388>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a3d      	ldr	r2, [pc, #244]	; (80075ec <HAL_DMA_IRQHandler+0x46c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d102      	bne.n	8007502 <HAL_DMA_IRQHandler+0x382>
 80074fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007500:	e01b      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007506:	e018      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750c:	e015      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 800750e:	2320      	movs	r3, #32
 8007510:	e013      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007512:	2302      	movs	r3, #2
 8007514:	e011      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800751a:	e00e      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 800751c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007520:	e00b      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007526:	e008      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800752c:	e005      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 800752e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007532:	e002      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007534:	2320      	movs	r3, #32
 8007536:	e000      	b.n	800753a <HAL_DMA_IRQHandler+0x3ba>
 8007538:	2302      	movs	r3, #2
 800753a:	4a2e      	ldr	r2, [pc, #184]	; (80075f4 <HAL_DMA_IRQHandler+0x474>)
 800753c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d034      	beq.n	80075b8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007556:	e02f      	b.n	80075b8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	2208      	movs	r2, #8
 800755e:	409a      	lsls	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d028      	beq.n	80075ba <HAL_DMA_IRQHandler+0x43a>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d023      	beq.n	80075ba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 020e 	bic.w	r2, r2, #14
 8007580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	2101      	movs	r1, #1
 800758c:	fa01 f202 	lsl.w	r2, r1, r2
 8007590:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
    }
  }
  return;
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
}
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40020080 	.word	0x40020080
 80075c8:	40020008 	.word	0x40020008
 80075cc:	4002001c 	.word	0x4002001c
 80075d0:	40020030 	.word	0x40020030
 80075d4:	40020044 	.word	0x40020044
 80075d8:	40020058 	.word	0x40020058
 80075dc:	4002006c 	.word	0x4002006c
 80075e0:	40020408 	.word	0x40020408
 80075e4:	4002041c 	.word	0x4002041c
 80075e8:	40020430 	.word	0x40020430
 80075ec:	40020444 	.word	0x40020444
 80075f0:	40020400 	.word	0x40020400
 80075f4:	40020000 	.word	0x40020000

080075f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	2101      	movs	r1, #1
 8007610:	fa01 f202 	lsl.w	r2, r1, r2
 8007614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b10      	cmp	r3, #16
 8007624:	d108      	bne.n	8007638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007636:	e007      	b.n	8007648 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	60da      	str	r2, [r3, #12]
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr
	...

08007654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007654:	b480      	push	{r7}
 8007656:	b08b      	sub	sp, #44	; 0x2c
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007662:	2300      	movs	r3, #0
 8007664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007666:	e179      	b.n	800795c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007668:	2201      	movs	r2, #1
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	4013      	ands	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	429a      	cmp	r2, r3
 8007682:	f040 8168 	bne.w	8007956 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4a96      	ldr	r2, [pc, #600]	; (80078e4 <HAL_GPIO_Init+0x290>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d05e      	beq.n	800774e <HAL_GPIO_Init+0xfa>
 8007690:	4a94      	ldr	r2, [pc, #592]	; (80078e4 <HAL_GPIO_Init+0x290>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d875      	bhi.n	8007782 <HAL_GPIO_Init+0x12e>
 8007696:	4a94      	ldr	r2, [pc, #592]	; (80078e8 <HAL_GPIO_Init+0x294>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d058      	beq.n	800774e <HAL_GPIO_Init+0xfa>
 800769c:	4a92      	ldr	r2, [pc, #584]	; (80078e8 <HAL_GPIO_Init+0x294>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d86f      	bhi.n	8007782 <HAL_GPIO_Init+0x12e>
 80076a2:	4a92      	ldr	r2, [pc, #584]	; (80078ec <HAL_GPIO_Init+0x298>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d052      	beq.n	800774e <HAL_GPIO_Init+0xfa>
 80076a8:	4a90      	ldr	r2, [pc, #576]	; (80078ec <HAL_GPIO_Init+0x298>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d869      	bhi.n	8007782 <HAL_GPIO_Init+0x12e>
 80076ae:	4a90      	ldr	r2, [pc, #576]	; (80078f0 <HAL_GPIO_Init+0x29c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d04c      	beq.n	800774e <HAL_GPIO_Init+0xfa>
 80076b4:	4a8e      	ldr	r2, [pc, #568]	; (80078f0 <HAL_GPIO_Init+0x29c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d863      	bhi.n	8007782 <HAL_GPIO_Init+0x12e>
 80076ba:	4a8e      	ldr	r2, [pc, #568]	; (80078f4 <HAL_GPIO_Init+0x2a0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d046      	beq.n	800774e <HAL_GPIO_Init+0xfa>
 80076c0:	4a8c      	ldr	r2, [pc, #560]	; (80078f4 <HAL_GPIO_Init+0x2a0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d85d      	bhi.n	8007782 <HAL_GPIO_Init+0x12e>
 80076c6:	2b12      	cmp	r3, #18
 80076c8:	d82a      	bhi.n	8007720 <HAL_GPIO_Init+0xcc>
 80076ca:	2b12      	cmp	r3, #18
 80076cc:	d859      	bhi.n	8007782 <HAL_GPIO_Init+0x12e>
 80076ce:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <HAL_GPIO_Init+0x80>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	0800774f 	.word	0x0800774f
 80076d8:	08007729 	.word	0x08007729
 80076dc:	0800773b 	.word	0x0800773b
 80076e0:	0800777d 	.word	0x0800777d
 80076e4:	08007783 	.word	0x08007783
 80076e8:	08007783 	.word	0x08007783
 80076ec:	08007783 	.word	0x08007783
 80076f0:	08007783 	.word	0x08007783
 80076f4:	08007783 	.word	0x08007783
 80076f8:	08007783 	.word	0x08007783
 80076fc:	08007783 	.word	0x08007783
 8007700:	08007783 	.word	0x08007783
 8007704:	08007783 	.word	0x08007783
 8007708:	08007783 	.word	0x08007783
 800770c:	08007783 	.word	0x08007783
 8007710:	08007783 	.word	0x08007783
 8007714:	08007783 	.word	0x08007783
 8007718:	08007731 	.word	0x08007731
 800771c:	08007745 	.word	0x08007745
 8007720:	4a75      	ldr	r2, [pc, #468]	; (80078f8 <HAL_GPIO_Init+0x2a4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007726:	e02c      	b.n	8007782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	623b      	str	r3, [r7, #32]
          break;
 800772e:	e029      	b.n	8007784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	623b      	str	r3, [r7, #32]
          break;
 8007738:	e024      	b.n	8007784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	3308      	adds	r3, #8
 8007740:	623b      	str	r3, [r7, #32]
          break;
 8007742:	e01f      	b.n	8007784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	330c      	adds	r3, #12
 800774a:	623b      	str	r3, [r7, #32]
          break;
 800774c:	e01a      	b.n	8007784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007756:	2304      	movs	r3, #4
 8007758:	623b      	str	r3, [r7, #32]
          break;
 800775a:	e013      	b.n	8007784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d105      	bne.n	8007770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007764:	2308      	movs	r3, #8
 8007766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	611a      	str	r2, [r3, #16]
          break;
 800776e:	e009      	b.n	8007784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007770:	2308      	movs	r3, #8
 8007772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	615a      	str	r2, [r3, #20]
          break;
 800777a:	e003      	b.n	8007784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800777c:	2300      	movs	r3, #0
 800777e:	623b      	str	r3, [r7, #32]
          break;
 8007780:	e000      	b.n	8007784 <HAL_GPIO_Init+0x130>
          break;
 8007782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2bff      	cmp	r3, #255	; 0xff
 8007788:	d801      	bhi.n	800778e <HAL_GPIO_Init+0x13a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	e001      	b.n	8007792 <HAL_GPIO_Init+0x13e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3304      	adds	r3, #4
 8007792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2bff      	cmp	r3, #255	; 0xff
 8007798:	d802      	bhi.n	80077a0 <HAL_GPIO_Init+0x14c>
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	e002      	b.n	80077a6 <HAL_GPIO_Init+0x152>
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	3b08      	subs	r3, #8
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	210f      	movs	r1, #15
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	6a39      	ldr	r1, [r7, #32]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80c1 	beq.w	8007956 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80077d4:	4b49      	ldr	r3, [pc, #292]	; (80078fc <HAL_GPIO_Init+0x2a8>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	4a48      	ldr	r2, [pc, #288]	; (80078fc <HAL_GPIO_Init+0x2a8>)
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	6193      	str	r3, [r2, #24]
 80077e0:	4b46      	ldr	r3, [pc, #280]	; (80078fc <HAL_GPIO_Init+0x2a8>)
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80077ec:	4a44      	ldr	r2, [pc, #272]	; (8007900 <HAL_GPIO_Init+0x2ac>)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	089b      	lsrs	r3, r3, #2
 80077f2:	3302      	adds	r3, #2
 80077f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	220f      	movs	r2, #15
 8007804:	fa02 f303 	lsl.w	r3, r2, r3
 8007808:	43db      	mvns	r3, r3
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4013      	ands	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3c      	ldr	r2, [pc, #240]	; (8007904 <HAL_GPIO_Init+0x2b0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d01f      	beq.n	8007858 <HAL_GPIO_Init+0x204>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3b      	ldr	r2, [pc, #236]	; (8007908 <HAL_GPIO_Init+0x2b4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d019      	beq.n	8007854 <HAL_GPIO_Init+0x200>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a3a      	ldr	r2, [pc, #232]	; (800790c <HAL_GPIO_Init+0x2b8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d013      	beq.n	8007850 <HAL_GPIO_Init+0x1fc>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a39      	ldr	r2, [pc, #228]	; (8007910 <HAL_GPIO_Init+0x2bc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00d      	beq.n	800784c <HAL_GPIO_Init+0x1f8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a38      	ldr	r2, [pc, #224]	; (8007914 <HAL_GPIO_Init+0x2c0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d007      	beq.n	8007848 <HAL_GPIO_Init+0x1f4>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a37      	ldr	r2, [pc, #220]	; (8007918 <HAL_GPIO_Init+0x2c4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d101      	bne.n	8007844 <HAL_GPIO_Init+0x1f0>
 8007840:	2305      	movs	r3, #5
 8007842:	e00a      	b.n	800785a <HAL_GPIO_Init+0x206>
 8007844:	2306      	movs	r3, #6
 8007846:	e008      	b.n	800785a <HAL_GPIO_Init+0x206>
 8007848:	2304      	movs	r3, #4
 800784a:	e006      	b.n	800785a <HAL_GPIO_Init+0x206>
 800784c:	2303      	movs	r3, #3
 800784e:	e004      	b.n	800785a <HAL_GPIO_Init+0x206>
 8007850:	2302      	movs	r3, #2
 8007852:	e002      	b.n	800785a <HAL_GPIO_Init+0x206>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <HAL_GPIO_Init+0x206>
 8007858:	2300      	movs	r3, #0
 800785a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785c:	f002 0203 	and.w	r2, r2, #3
 8007860:	0092      	lsls	r2, r2, #2
 8007862:	4093      	lsls	r3, r2
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800786a:	4925      	ldr	r1, [pc, #148]	; (8007900 <HAL_GPIO_Init+0x2ac>)
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	089b      	lsrs	r3, r3, #2
 8007870:	3302      	adds	r3, #2
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d006      	beq.n	8007892 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007884:	4b25      	ldr	r3, [pc, #148]	; (800791c <HAL_GPIO_Init+0x2c8>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4924      	ldr	r1, [pc, #144]	; (800791c <HAL_GPIO_Init+0x2c8>)
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	4313      	orrs	r3, r2
 800788e:	600b      	str	r3, [r1, #0]
 8007890:	e006      	b.n	80078a0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007892:	4b22      	ldr	r3, [pc, #136]	; (800791c <HAL_GPIO_Init+0x2c8>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	43db      	mvns	r3, r3
 800789a:	4920      	ldr	r1, [pc, #128]	; (800791c <HAL_GPIO_Init+0x2c8>)
 800789c:	4013      	ands	r3, r2
 800789e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d006      	beq.n	80078ba <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80078ac:	4b1b      	ldr	r3, [pc, #108]	; (800791c <HAL_GPIO_Init+0x2c8>)
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	491a      	ldr	r1, [pc, #104]	; (800791c <HAL_GPIO_Init+0x2c8>)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	604b      	str	r3, [r1, #4]
 80078b8:	e006      	b.n	80078c8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80078ba:	4b18      	ldr	r3, [pc, #96]	; (800791c <HAL_GPIO_Init+0x2c8>)
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	43db      	mvns	r3, r3
 80078c2:	4916      	ldr	r1, [pc, #88]	; (800791c <HAL_GPIO_Init+0x2c8>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d025      	beq.n	8007920 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <HAL_GPIO_Init+0x2c8>)
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	4910      	ldr	r1, [pc, #64]	; (800791c <HAL_GPIO_Init+0x2c8>)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	4313      	orrs	r3, r2
 80078de:	608b      	str	r3, [r1, #8]
 80078e0:	e025      	b.n	800792e <HAL_GPIO_Init+0x2da>
 80078e2:	bf00      	nop
 80078e4:	10320000 	.word	0x10320000
 80078e8:	10310000 	.word	0x10310000
 80078ec:	10220000 	.word	0x10220000
 80078f0:	10210000 	.word	0x10210000
 80078f4:	10120000 	.word	0x10120000
 80078f8:	10110000 	.word	0x10110000
 80078fc:	40021000 	.word	0x40021000
 8007900:	40010000 	.word	0x40010000
 8007904:	40010800 	.word	0x40010800
 8007908:	40010c00 	.word	0x40010c00
 800790c:	40011000 	.word	0x40011000
 8007910:	40011400 	.word	0x40011400
 8007914:	40011800 	.word	0x40011800
 8007918:	40011c00 	.word	0x40011c00
 800791c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007920:	4b15      	ldr	r3, [pc, #84]	; (8007978 <HAL_GPIO_Init+0x324>)
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	43db      	mvns	r3, r3
 8007928:	4913      	ldr	r1, [pc, #76]	; (8007978 <HAL_GPIO_Init+0x324>)
 800792a:	4013      	ands	r3, r2
 800792c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d006      	beq.n	8007948 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <HAL_GPIO_Init+0x324>)
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	490e      	ldr	r1, [pc, #56]	; (8007978 <HAL_GPIO_Init+0x324>)
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	4313      	orrs	r3, r2
 8007944:	60cb      	str	r3, [r1, #12]
 8007946:	e006      	b.n	8007956 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <HAL_GPIO_Init+0x324>)
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	43db      	mvns	r3, r3
 8007950:	4909      	ldr	r1, [pc, #36]	; (8007978 <HAL_GPIO_Init+0x324>)
 8007952:	4013      	ands	r3, r2
 8007954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	3301      	adds	r3, #1
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	fa22 f303 	lsr.w	r3, r2, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	f47f ae7e 	bne.w	8007668 <HAL_GPIO_Init+0x14>
  }
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	372c      	adds	r7, #44	; 0x2c
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	40010400 	.word	0x40010400

0800797c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	807b      	strh	r3, [r7, #2]
 8007988:	4613      	mov	r3, r2
 800798a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800798c:	787b      	ldrb	r3, [r7, #1]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007992:	887a      	ldrh	r2, [r7, #2]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007998:	e003      	b.n	80079a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	041a      	lsls	r2, r3, #16
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	611a      	str	r2, [r3, #16]
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e12b      	b.n	8007c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fe fab8 	bl	8005f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2224      	movs	r2, #36	; 0x24
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a10:	f000 fffc 	bl	8008a0c <HAL_RCC_GetPCLK1Freq>
 8007a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	4a81      	ldr	r2, [pc, #516]	; (8007c20 <HAL_I2C_Init+0x274>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d807      	bhi.n	8007a30 <HAL_I2C_Init+0x84>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4a80      	ldr	r2, [pc, #512]	; (8007c24 <HAL_I2C_Init+0x278>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	bf94      	ite	ls
 8007a28:	2301      	movls	r3, #1
 8007a2a:	2300      	movhi	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	e006      	b.n	8007a3e <HAL_I2C_Init+0x92>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4a7d      	ldr	r2, [pc, #500]	; (8007c28 <HAL_I2C_Init+0x27c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bf94      	ite	ls
 8007a38:	2301      	movls	r3, #1
 8007a3a:	2300      	movhi	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e0e7      	b.n	8007c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4a78      	ldr	r2, [pc, #480]	; (8007c2c <HAL_I2C_Init+0x280>)
 8007a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4e:	0c9b      	lsrs	r3, r3, #18
 8007a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4a6a      	ldr	r2, [pc, #424]	; (8007c20 <HAL_I2C_Init+0x274>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d802      	bhi.n	8007a80 <HAL_I2C_Init+0xd4>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	e009      	b.n	8007a94 <HAL_I2C_Init+0xe8>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	4a69      	ldr	r2, [pc, #420]	; (8007c30 <HAL_I2C_Init+0x284>)
 8007a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a90:	099b      	lsrs	r3, r3, #6
 8007a92:	3301      	adds	r3, #1
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	495c      	ldr	r1, [pc, #368]	; (8007c20 <HAL_I2C_Init+0x274>)
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	d819      	bhi.n	8007ae8 <HAL_I2C_Init+0x13c>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1e59      	subs	r1, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ac2:	1c59      	adds	r1, r3, #1
 8007ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ac8:	400b      	ands	r3, r1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_I2C_Init+0x138>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1e59      	subs	r1, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007adc:	3301      	adds	r3, #1
 8007ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae2:	e051      	b.n	8007b88 <HAL_I2C_Init+0x1dc>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	e04f      	b.n	8007b88 <HAL_I2C_Init+0x1dc>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d111      	bne.n	8007b14 <HAL_I2C_Init+0x168>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	1e58      	subs	r0, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6859      	ldr	r1, [r3, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	440b      	add	r3, r1
 8007afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b02:	3301      	adds	r3, #1
 8007b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	e012      	b.n	8007b3a <HAL_I2C_Init+0x18e>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	1e58      	subs	r0, r3, #1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6859      	ldr	r1, [r3, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	0099      	lsls	r1, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_I2C_Init+0x196>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e022      	b.n	8007b88 <HAL_I2C_Init+0x1dc>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10e      	bne.n	8007b68 <HAL_I2C_Init+0x1bc>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1e58      	subs	r0, r3, #1
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	440b      	add	r3, r1
 8007b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b66:	e00f      	b.n	8007b88 <HAL_I2C_Init+0x1dc>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	1e58      	subs	r0, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6859      	ldr	r1, [r3, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	440b      	add	r3, r1
 8007b76:	0099      	lsls	r1, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b7e:	3301      	adds	r3, #1
 8007b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	6809      	ldr	r1, [r1, #0]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69da      	ldr	r2, [r3, #28]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6911      	ldr	r1, [r2, #16]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	68d2      	ldr	r2, [r2, #12]
 8007bc2:	4311      	orrs	r1, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	695a      	ldr	r2, [r3, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	000186a0 	.word	0x000186a0
 8007c24:	001e847f 	.word	0x001e847f
 8007c28:	003d08ff 	.word	0x003d08ff
 8007c2c:	431bde83 	.word	0x431bde83
 8007c30:	10624dd3 	.word	0x10624dd3

08007c34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	461a      	mov	r2, r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	817b      	strh	r3, [r7, #10]
 8007c46:	460b      	mov	r3, r1
 8007c48:	813b      	strh	r3, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c4e:	f7fe ff43 	bl	8006ad8 <HAL_GetTick>
 8007c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	f040 80d9 	bne.w	8007e14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	2319      	movs	r3, #25
 8007c68:	2201      	movs	r2, #1
 8007c6a:	496d      	ldr	r1, [pc, #436]	; (8007e20 <HAL_I2C_Mem_Write+0x1ec>)
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f971 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e0cc      	b.n	8007e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_I2C_Mem_Write+0x56>
 8007c86:	2302      	movs	r3, #2
 8007c88:	e0c5      	b.n	8007e16 <HAL_I2C_Mem_Write+0x1e2>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d007      	beq.n	8007cb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2221      	movs	r2, #33	; 0x21
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2240      	movs	r2, #64	; 0x40
 8007ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a3a      	ldr	r2, [r7, #32]
 8007cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a4d      	ldr	r2, [pc, #308]	; (8007e24 <HAL_I2C_Mem_Write+0x1f0>)
 8007cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cf2:	88f8      	ldrh	r0, [r7, #6]
 8007cf4:	893a      	ldrh	r2, [r7, #8]
 8007cf6:	8979      	ldrh	r1, [r7, #10]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	4603      	mov	r3, r0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f890 	bl	8007e28 <I2C_RequestMemoryWrite>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d052      	beq.n	8007db4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e081      	b.n	8007e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f9f2 	bl	8008100 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00d      	beq.n	8007d3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d107      	bne.n	8007d3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e06b      	b.n	8007e16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d11b      	bne.n	8007db4 <HAL_I2C_Mem_Write+0x180>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d017      	beq.n	8007db4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	781a      	ldrb	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1aa      	bne.n	8007d12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f9de 	bl	8008182 <I2C_WaitOnBTFFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00d      	beq.n	8007de8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d107      	bne.n	8007de4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e016      	b.n	8007e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	e000      	b.n	8007e16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007e14:	2302      	movs	r3, #2
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	00100002 	.word	0x00100002
 8007e24:	ffff0000 	.word	0xffff0000

08007e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	817b      	strh	r3, [r7, #10]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	813b      	strh	r3, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f878 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00d      	beq.n	8007e86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e78:	d103      	bne.n	8007e82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e05f      	b.n	8007f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e86:	897b      	ldrh	r3, [r7, #10]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	6a3a      	ldr	r2, [r7, #32]
 8007e9a:	492d      	ldr	r1, [pc, #180]	; (8007f50 <I2C_RequestMemoryWrite+0x128>)
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f8b0 	bl	8008002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e04c      	b.n	8007f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec4:	6a39      	ldr	r1, [r7, #32]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 f91a 	bl	8008100 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d107      	bne.n	8007eea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e02b      	b.n	8007f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d105      	bne.n	8007f00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ef4:	893b      	ldrh	r3, [r7, #8]
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	611a      	str	r2, [r3, #16]
 8007efe:	e021      	b.n	8007f44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f00:	893b      	ldrh	r3, [r7, #8]
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f10:	6a39      	ldr	r1, [r7, #32]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f8f4 	bl	8008100 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d107      	bne.n	8007f36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e005      	b.n	8007f46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f3a:	893b      	ldrh	r3, [r7, #8]
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	00010002 	.word	0x00010002

08007f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f64:	e025      	b.n	8007fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6c:	d021      	beq.n	8007fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6e:	f7fe fdb3 	bl	8006ad8 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d116      	bne.n	8007fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f043 0220 	orr.w	r2, r3, #32
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e023      	b.n	8007ffa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d10d      	bne.n	8007fd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	43da      	mvns	r2, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bf0c      	ite	eq
 8007fce:	2301      	moveq	r3, #1
 8007fd0:	2300      	movne	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	e00c      	b.n	8007ff2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	43da      	mvns	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d0b6      	beq.n	8007f66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008010:	e051      	b.n	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008020:	d123      	bne.n	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008030:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800803a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f043 0204 	orr.w	r2, r3, #4
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e046      	b.n	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008070:	d021      	beq.n	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008072:	f7fe fd31 	bl	8006ad8 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d116      	bne.n	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	f043 0220 	orr.w	r2, r3, #32
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e020      	b.n	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	0c1b      	lsrs	r3, r3, #16
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d10c      	bne.n	80080da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	43da      	mvns	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4013      	ands	r3, r2
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bf14      	ite	ne
 80080d2:	2301      	movne	r3, #1
 80080d4:	2300      	moveq	r3, #0
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	e00b      	b.n	80080f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	43da      	mvns	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4013      	ands	r3, r2
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bf14      	ite	ne
 80080ec:	2301      	movne	r3, #1
 80080ee:	2300      	moveq	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d18d      	bne.n	8008012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800810c:	e02d      	b.n	800816a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f878 	bl	8008204 <I2C_IsAcknowledgeFailed>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e02d      	b.n	800817a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d021      	beq.n	800816a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008126:	f7fe fcd7 	bl	8006ad8 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	429a      	cmp	r2, r3
 8008134:	d302      	bcc.n	800813c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d116      	bne.n	800816a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	f043 0220 	orr.w	r2, r3, #32
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e007      	b.n	800817a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d1ca      	bne.n	800810e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800818e:	e02d      	b.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f837 	bl	8008204 <I2C_IsAcknowledgeFailed>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e02d      	b.n	80081fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	d021      	beq.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a8:	f7fe fc96 	bl	8006ad8 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d302      	bcc.n	80081be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d116      	bne.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	f043 0220 	orr.w	r2, r3, #32
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e007      	b.n	80081fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d1ca      	bne.n	8008190 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800821a:	d11b      	bne.n	8008254 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008224:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	f043 0204 	orr.w	r2, r3, #4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e272      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8087 	beq.w	800838e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008280:	4b92      	ldr	r3, [pc, #584]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f003 030c 	and.w	r3, r3, #12
 8008288:	2b04      	cmp	r3, #4
 800828a:	d00c      	beq.n	80082a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800828c:	4b8f      	ldr	r3, [pc, #572]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f003 030c 	and.w	r3, r3, #12
 8008294:	2b08      	cmp	r3, #8
 8008296:	d112      	bne.n	80082be <HAL_RCC_OscConfig+0x5e>
 8008298:	4b8c      	ldr	r3, [pc, #560]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a4:	d10b      	bne.n	80082be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a6:	4b89      	ldr	r3, [pc, #548]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d06c      	beq.n	800838c <HAL_RCC_OscConfig+0x12c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d168      	bne.n	800838c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e24c      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCC_OscConfig+0x76>
 80082c8:	4b80      	ldr	r3, [pc, #512]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a7f      	ldr	r2, [pc, #508]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e02e      	b.n	8008334 <HAL_RCC_OscConfig+0xd4>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10c      	bne.n	80082f8 <HAL_RCC_OscConfig+0x98>
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a7a      	ldr	r2, [pc, #488]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4b78      	ldr	r3, [pc, #480]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a77      	ldr	r2, [pc, #476]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80082f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	e01d      	b.n	8008334 <HAL_RCC_OscConfig+0xd4>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008300:	d10c      	bne.n	800831c <HAL_RCC_OscConfig+0xbc>
 8008302:	4b72      	ldr	r3, [pc, #456]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a71      	ldr	r2, [pc, #452]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	4b6f      	ldr	r3, [pc, #444]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a6e      	ldr	r2, [pc, #440]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	e00b      	b.n	8008334 <HAL_RCC_OscConfig+0xd4>
 800831c:	4b6b      	ldr	r3, [pc, #428]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a6a      	ldr	r2, [pc, #424]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	4b68      	ldr	r3, [pc, #416]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a67      	ldr	r2, [pc, #412]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 800832e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008332:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d013      	beq.n	8008364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800833c:	f7fe fbcc 	bl	8006ad8 <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008344:	f7fe fbc8 	bl	8006ad8 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b64      	cmp	r3, #100	; 0x64
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e200      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008356:	4b5d      	ldr	r3, [pc, #372]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0f0      	beq.n	8008344 <HAL_RCC_OscConfig+0xe4>
 8008362:	e014      	b.n	800838e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008364:	f7fe fbb8 	bl	8006ad8 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800836c:	f7fe fbb4 	bl	8006ad8 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b64      	cmp	r3, #100	; 0x64
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e1ec      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800837e:	4b53      	ldr	r3, [pc, #332]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f0      	bne.n	800836c <HAL_RCC_OscConfig+0x10c>
 800838a:	e000      	b.n	800838e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800838c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d063      	beq.n	8008462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800839a:	4b4c      	ldr	r3, [pc, #304]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f003 030c 	and.w	r3, r3, #12
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80083a6:	4b49      	ldr	r3, [pc, #292]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f003 030c 	and.w	r3, r3, #12
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	d11c      	bne.n	80083ec <HAL_RCC_OscConfig+0x18c>
 80083b2:	4b46      	ldr	r3, [pc, #280]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d116      	bne.n	80083ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083be:	4b43      	ldr	r3, [pc, #268]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d005      	beq.n	80083d6 <HAL_RCC_OscConfig+0x176>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d001      	beq.n	80083d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e1c0      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083d6:	4b3d      	ldr	r3, [pc, #244]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	4939      	ldr	r1, [pc, #228]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083ea:	e03a      	b.n	8008462 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d020      	beq.n	8008436 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083f4:	4b36      	ldr	r3, [pc, #216]	; (80084d0 <HAL_RCC_OscConfig+0x270>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fa:	f7fe fb6d 	bl	8006ad8 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008400:	e008      	b.n	8008414 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008402:	f7fe fb69 	bl	8006ad8 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d901      	bls.n	8008414 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e1a1      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008414:	4b2d      	ldr	r3, [pc, #180]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f0      	beq.n	8008402 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008420:	4b2a      	ldr	r3, [pc, #168]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	4927      	ldr	r1, [pc, #156]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008430:	4313      	orrs	r3, r2
 8008432:	600b      	str	r3, [r1, #0]
 8008434:	e015      	b.n	8008462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008436:	4b26      	ldr	r3, [pc, #152]	; (80084d0 <HAL_RCC_OscConfig+0x270>)
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843c:	f7fe fb4c 	bl	8006ad8 <HAL_GetTick>
 8008440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008444:	f7fe fb48 	bl	8006ad8 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e180      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008456:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f0      	bne.n	8008444 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d03a      	beq.n	80084e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d019      	beq.n	80084aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008476:	4b17      	ldr	r3, [pc, #92]	; (80084d4 <HAL_RCC_OscConfig+0x274>)
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800847c:	f7fe fb2c 	bl	8006ad8 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008484:	f7fe fb28 	bl	8006ad8 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e160      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008496:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <HAL_RCC_OscConfig+0x26c>)
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0f0      	beq.n	8008484 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80084a2:	2001      	movs	r0, #1
 80084a4:	f000 fada 	bl	8008a5c <RCC_Delay>
 80084a8:	e01c      	b.n	80084e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084aa:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <HAL_RCC_OscConfig+0x274>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084b0:	f7fe fb12 	bl	8006ad8 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084b6:	e00f      	b.n	80084d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b8:	f7fe fb0e 	bl	8006ad8 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d908      	bls.n	80084d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e146      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
 80084ca:	bf00      	nop
 80084cc:	40021000 	.word	0x40021000
 80084d0:	42420000 	.word	0x42420000
 80084d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084d8:	4b92      	ldr	r3, [pc, #584]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e9      	bne.n	80084b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80a6 	beq.w	800863e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084f2:	2300      	movs	r3, #0
 80084f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084f6:	4b8b      	ldr	r3, [pc, #556]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10d      	bne.n	800851e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008502:	4b88      	ldr	r3, [pc, #544]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	4a87      	ldr	r2, [pc, #540]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800850c:	61d3      	str	r3, [r2, #28]
 800850e:	4b85      	ldr	r3, [pc, #532]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800851a:	2301      	movs	r3, #1
 800851c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800851e:	4b82      	ldr	r3, [pc, #520]	; (8008728 <HAL_RCC_OscConfig+0x4c8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d118      	bne.n	800855c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800852a:	4b7f      	ldr	r3, [pc, #508]	; (8008728 <HAL_RCC_OscConfig+0x4c8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a7e      	ldr	r2, [pc, #504]	; (8008728 <HAL_RCC_OscConfig+0x4c8>)
 8008530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008536:	f7fe facf 	bl	8006ad8 <HAL_GetTick>
 800853a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800853c:	e008      	b.n	8008550 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800853e:	f7fe facb 	bl	8006ad8 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b64      	cmp	r3, #100	; 0x64
 800854a:	d901      	bls.n	8008550 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e103      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008550:	4b75      	ldr	r3, [pc, #468]	; (8008728 <HAL_RCC_OscConfig+0x4c8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0f0      	beq.n	800853e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d106      	bne.n	8008572 <HAL_RCC_OscConfig+0x312>
 8008564:	4b6f      	ldr	r3, [pc, #444]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	4a6e      	ldr	r2, [pc, #440]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6213      	str	r3, [r2, #32]
 8008570:	e02d      	b.n	80085ce <HAL_RCC_OscConfig+0x36e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10c      	bne.n	8008594 <HAL_RCC_OscConfig+0x334>
 800857a:	4b6a      	ldr	r3, [pc, #424]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	4a69      	ldr	r2, [pc, #420]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	6213      	str	r3, [r2, #32]
 8008586:	4b67      	ldr	r3, [pc, #412]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	4a66      	ldr	r2, [pc, #408]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800858c:	f023 0304 	bic.w	r3, r3, #4
 8008590:	6213      	str	r3, [r2, #32]
 8008592:	e01c      	b.n	80085ce <HAL_RCC_OscConfig+0x36e>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b05      	cmp	r3, #5
 800859a:	d10c      	bne.n	80085b6 <HAL_RCC_OscConfig+0x356>
 800859c:	4b61      	ldr	r3, [pc, #388]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	4a60      	ldr	r2, [pc, #384]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085a2:	f043 0304 	orr.w	r3, r3, #4
 80085a6:	6213      	str	r3, [r2, #32]
 80085a8:	4b5e      	ldr	r3, [pc, #376]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	4a5d      	ldr	r2, [pc, #372]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	6213      	str	r3, [r2, #32]
 80085b4:	e00b      	b.n	80085ce <HAL_RCC_OscConfig+0x36e>
 80085b6:	4b5b      	ldr	r3, [pc, #364]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	4a5a      	ldr	r2, [pc, #360]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	6213      	str	r3, [r2, #32]
 80085c2:	4b58      	ldr	r3, [pc, #352]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	4a57      	ldr	r2, [pc, #348]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085c8:	f023 0304 	bic.w	r3, r3, #4
 80085cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d015      	beq.n	8008602 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085d6:	f7fe fa7f 	bl	8006ad8 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085dc:	e00a      	b.n	80085f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085de:	f7fe fa7b 	bl	8006ad8 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d901      	bls.n	80085f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e0b1      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f4:	4b4b      	ldr	r3, [pc, #300]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0ee      	beq.n	80085de <HAL_RCC_OscConfig+0x37e>
 8008600:	e014      	b.n	800862c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008602:	f7fe fa69 	bl	8006ad8 <HAL_GetTick>
 8008606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008608:	e00a      	b.n	8008620 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800860a:	f7fe fa65 	bl	8006ad8 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f241 3288 	movw	r2, #5000	; 0x1388
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e09b      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008620:	4b40      	ldr	r3, [pc, #256]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1ee      	bne.n	800860a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d105      	bne.n	800863e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008632:	4b3c      	ldr	r3, [pc, #240]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	4a3b      	ldr	r2, [pc, #236]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800863c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 8087 	beq.w	8008756 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008648:	4b36      	ldr	r3, [pc, #216]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f003 030c 	and.w	r3, r3, #12
 8008650:	2b08      	cmp	r3, #8
 8008652:	d061      	beq.n	8008718 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d146      	bne.n	80086ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800865c:	4b33      	ldr	r3, [pc, #204]	; (800872c <HAL_RCC_OscConfig+0x4cc>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008662:	f7fe fa39 	bl	8006ad8 <HAL_GetTick>
 8008666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008668:	e008      	b.n	800867c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800866a:	f7fe fa35 	bl	8006ad8 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e06d      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800867c:	4b29      	ldr	r3, [pc, #164]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f0      	bne.n	800866a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008690:	d108      	bne.n	80086a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008692:	4b24      	ldr	r3, [pc, #144]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	4921      	ldr	r1, [pc, #132]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086a4:	4b1f      	ldr	r3, [pc, #124]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a19      	ldr	r1, [r3, #32]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	430b      	orrs	r3, r1
 80086b6:	491b      	ldr	r1, [pc, #108]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086bc:	4b1b      	ldr	r3, [pc, #108]	; (800872c <HAL_RCC_OscConfig+0x4cc>)
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c2:	f7fe fa09 	bl	8006ad8 <HAL_GetTick>
 80086c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ca:	f7fe fa05 	bl	8006ad8 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e03d      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086dc:	4b11      	ldr	r3, [pc, #68]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0f0      	beq.n	80086ca <HAL_RCC_OscConfig+0x46a>
 80086e8:	e035      	b.n	8008756 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ea:	4b10      	ldr	r3, [pc, #64]	; (800872c <HAL_RCC_OscConfig+0x4cc>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f0:	f7fe f9f2 	bl	8006ad8 <HAL_GetTick>
 80086f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f8:	f7fe f9ee 	bl	8006ad8 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e026      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800870a:	4b06      	ldr	r3, [pc, #24]	; (8008724 <HAL_RCC_OscConfig+0x4c4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f0      	bne.n	80086f8 <HAL_RCC_OscConfig+0x498>
 8008716:	e01e      	b.n	8008756 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d107      	bne.n	8008730 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e019      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
 8008724:	40021000 	.word	0x40021000
 8008728:	40007000 	.word	0x40007000
 800872c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <HAL_RCC_OscConfig+0x500>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	429a      	cmp	r2, r3
 8008742:	d106      	bne.n	8008752 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800874e:	429a      	cmp	r2, r3
 8008750:	d001      	beq.n	8008756 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40021000 	.word	0x40021000

08008764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e0d0      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008778:	4b6a      	ldr	r3, [pc, #424]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d910      	bls.n	80087a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008786:	4b67      	ldr	r3, [pc, #412]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f023 0207 	bic.w	r2, r3, #7
 800878e:	4965      	ldr	r1, [pc, #404]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	4313      	orrs	r3, r2
 8008794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008796:	4b63      	ldr	r3, [pc, #396]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d001      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e0b8      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d020      	beq.n	80087f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087c0:	4b59      	ldr	r3, [pc, #356]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	4a58      	ldr	r2, [pc, #352]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80087c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80087ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0308 	and.w	r3, r3, #8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087d8:	4b53      	ldr	r3, [pc, #332]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	4a52      	ldr	r2, [pc, #328]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80087de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80087e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087e4:	4b50      	ldr	r3, [pc, #320]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	494d      	ldr	r1, [pc, #308]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d040      	beq.n	8008884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880a:	4b47      	ldr	r3, [pc, #284]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d115      	bne.n	8008842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e07f      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d107      	bne.n	8008832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008822:	4b41      	ldr	r3, [pc, #260]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e073      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008832:	4b3d      	ldr	r3, [pc, #244]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e06b      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008842:	4b39      	ldr	r3, [pc, #228]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f023 0203 	bic.w	r2, r3, #3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	4936      	ldr	r1, [pc, #216]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 8008850:	4313      	orrs	r3, r2
 8008852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008854:	f7fe f940 	bl	8006ad8 <HAL_GetTick>
 8008858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800885a:	e00a      	b.n	8008872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800885c:	f7fe f93c 	bl	8006ad8 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	f241 3288 	movw	r2, #5000	; 0x1388
 800886a:	4293      	cmp	r3, r2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e053      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008872:	4b2d      	ldr	r3, [pc, #180]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f003 020c 	and.w	r2, r3, #12
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	429a      	cmp	r2, r3
 8008882:	d1eb      	bne.n	800885c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008884:	4b27      	ldr	r3, [pc, #156]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d210      	bcs.n	80088b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008892:	4b24      	ldr	r3, [pc, #144]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 0207 	bic.w	r2, r3, #7
 800889a:	4922      	ldr	r1, [pc, #136]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	4313      	orrs	r3, r2
 80088a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088a2:	4b20      	ldr	r3, [pc, #128]	; (8008924 <HAL_RCC_ClockConfig+0x1c0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d001      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e032      	b.n	800891a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088c0:	4b19      	ldr	r3, [pc, #100]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	4916      	ldr	r1, [pc, #88]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80088de:	4b12      	ldr	r3, [pc, #72]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	490e      	ldr	r1, [pc, #56]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80088f2:	f000 f821 	bl	8008938 <HAL_RCC_GetSysClockFreq>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <HAL_RCC_ClockConfig+0x1c4>)
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	091b      	lsrs	r3, r3, #4
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	490a      	ldr	r1, [pc, #40]	; (800892c <HAL_RCC_ClockConfig+0x1c8>)
 8008904:	5ccb      	ldrb	r3, [r1, r3]
 8008906:	fa22 f303 	lsr.w	r3, r2, r3
 800890a:	4a09      	ldr	r2, [pc, #36]	; (8008930 <HAL_RCC_ClockConfig+0x1cc>)
 800890c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800890e:	4b09      	ldr	r3, [pc, #36]	; (8008934 <HAL_RCC_ClockConfig+0x1d0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe f89e 	bl	8006a54 <HAL_InitTick>

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	40022000 	.word	0x40022000
 8008928:	40021000 	.word	0x40021000
 800892c:	0800d8e4 	.word	0x0800d8e4
 8008930:	20000018 	.word	0x20000018
 8008934:	2000001c 	.word	0x2000001c

08008938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008938:	b490      	push	{r4, r7}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800893e:	4b29      	ldr	r3, [pc, #164]	; (80089e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8008940:	1d3c      	adds	r4, r7, #4
 8008942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008948:	f240 2301 	movw	r3, #513	; 0x201
 800894c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	2300      	movs	r3, #0
 8008954:	61bb      	str	r3, [r7, #24]
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008962:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f003 030c 	and.w	r3, r3, #12
 800896e:	2b04      	cmp	r3, #4
 8008970:	d002      	beq.n	8008978 <HAL_RCC_GetSysClockFreq+0x40>
 8008972:	2b08      	cmp	r3, #8
 8008974:	d003      	beq.n	800897e <HAL_RCC_GetSysClockFreq+0x46>
 8008976:	e02b      	b.n	80089d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800897a:	623b      	str	r3, [r7, #32]
      break;
 800897c:	e02b      	b.n	80089d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	0c9b      	lsrs	r3, r3, #18
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	3328      	adds	r3, #40	; 0x28
 8008988:	443b      	add	r3, r7
 800898a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800898e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d012      	beq.n	80089c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	0c5b      	lsrs	r3, r3, #17
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	3328      	adds	r3, #40	; 0x28
 80089a6:	443b      	add	r3, r7
 80089a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80089ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	4a0e      	ldr	r2, [pc, #56]	; (80089ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80089b2:	fb03 f202 	mul.w	r2, r3, r2
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	e004      	b.n	80089ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	4a0b      	ldr	r2, [pc, #44]	; (80089f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	623b      	str	r3, [r7, #32]
      break;
 80089ce:	e002      	b.n	80089d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089d2:	623b      	str	r3, [r7, #32]
      break;
 80089d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089d6:	6a3b      	ldr	r3, [r7, #32]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3728      	adds	r7, #40	; 0x28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc90      	pop	{r4, r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	0800d2d0 	.word	0x0800d2d0
 80089e8:	40021000 	.word	0x40021000
 80089ec:	00f42400 	.word	0x00f42400
 80089f0:	003d0900 	.word	0x003d0900
 80089f4:	007a1200 	.word	0x007a1200

080089f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80089fe:	681b      	ldr	r3, [r3, #0]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr
 8008a08:	20000018 	.word	0x20000018

08008a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a10:	f7ff fff2 	bl	80089f8 <HAL_RCC_GetHCLKFreq>
 8008a14:	4602      	mov	r2, r0
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	4903      	ldr	r1, [pc, #12]	; (8008a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a22:	5ccb      	ldrb	r3, [r1, r3]
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40021000 	.word	0x40021000
 8008a30:	0800d8f4 	.word	0x0800d8f4

08008a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a38:	f7ff ffde 	bl	80089f8 <HAL_RCC_GetHCLKFreq>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	0adb      	lsrs	r3, r3, #11
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	4903      	ldr	r1, [pc, #12]	; (8008a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a4a:	5ccb      	ldrb	r3, [r1, r3]
 8008a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40021000 	.word	0x40021000
 8008a58:	0800d8f4 	.word	0x0800d8f4

08008a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <RCC_Delay+0x34>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a0a      	ldr	r2, [pc, #40]	; (8008a94 <RCC_Delay+0x38>)
 8008a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6e:	0a5b      	lsrs	r3, r3, #9
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008a78:	bf00      	nop
  }
  while (Delay --);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1e5a      	subs	r2, r3, #1
 8008a7e:	60fa      	str	r2, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1f9      	bne.n	8008a78 <RCC_Delay+0x1c>
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr
 8008a90:	20000018 	.word	0x20000018
 8008a94:	10624dd3 	.word	0x10624dd3

08008a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e041      	b.n	8008b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fd fa92 	bl	8005fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	f000 fd88 	bl	80095ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d001      	beq.n	8008b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e044      	b.n	8008bda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <HAL_TIM_Base_Start_IT+0xac>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d018      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a1c      	ldr	r2, [pc, #112]	; (8008be8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d013      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b84:	d00e      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a18      	ldr	r2, [pc, #96]	; (8008bec <HAL_TIM_Base_Start_IT+0xb4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d009      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a15      	ldr	r2, [pc, #84]	; (8008bf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d111      	bne.n	8008bc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d010      	beq.n	8008bd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0201 	orr.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc6:	e007      	b.n	8008bd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr
 8008be4:	40012c00 	.word	0x40012c00
 8008be8:	40013400 	.word	0x40013400
 8008bec:	40000400 	.word	0x40000400
 8008bf0:	40000800 	.word	0x40000800
 8008bf4:	40000c00 	.word	0x40000c00

08008bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e041      	b.n	8008c8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f839 	bl	8008c96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f000 fcd8 	bl	80095ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <HAL_TIM_PWM_Start+0x24>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	bf14      	ite	ne
 8008cc4:	2301      	movne	r3, #1
 8008cc6:	2300      	moveq	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	e022      	b.n	8008d12 <HAL_TIM_PWM_Start+0x6a>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d109      	bne.n	8008ce6 <HAL_TIM_PWM_Start+0x3e>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	bf14      	ite	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	2300      	moveq	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	e015      	b.n	8008d12 <HAL_TIM_PWM_Start+0x6a>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d109      	bne.n	8008d00 <HAL_TIM_PWM_Start+0x58>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	e008      	b.n	8008d12 <HAL_TIM_PWM_Start+0x6a>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	bf14      	ite	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	2300      	moveq	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e072      	b.n	8008e00 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <HAL_TIM_PWM_Start+0x82>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d28:	e013      	b.n	8008d52 <HAL_TIM_PWM_Start+0xaa>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d104      	bne.n	8008d3a <HAL_TIM_PWM_Start+0x92>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d38:	e00b      	b.n	8008d52 <HAL_TIM_PWM_Start+0xaa>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d104      	bne.n	8008d4a <HAL_TIM_PWM_Start+0xa2>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d48:	e003      	b.n	8008d52 <HAL_TIM_PWM_Start+0xaa>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2201      	movs	r2, #1
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 ff02 	bl	8009b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a28      	ldr	r2, [pc, #160]	; (8008e08 <HAL_TIM_PWM_Start+0x160>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_TIM_PWM_Start+0xcc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a27      	ldr	r2, [pc, #156]	; (8008e0c <HAL_TIM_PWM_Start+0x164>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d101      	bne.n	8008d78 <HAL_TIM_PWM_Start+0xd0>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <HAL_TIM_PWM_Start+0xd2>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1d      	ldr	r2, [pc, #116]	; (8008e08 <HAL_TIM_PWM_Start+0x160>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d018      	beq.n	8008dca <HAL_TIM_PWM_Start+0x122>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1b      	ldr	r2, [pc, #108]	; (8008e0c <HAL_TIM_PWM_Start+0x164>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <HAL_TIM_PWM_Start+0x122>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008daa:	d00e      	beq.n	8008dca <HAL_TIM_PWM_Start+0x122>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <HAL_TIM_PWM_Start+0x168>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d009      	beq.n	8008dca <HAL_TIM_PWM_Start+0x122>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a16      	ldr	r2, [pc, #88]	; (8008e14 <HAL_TIM_PWM_Start+0x16c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d004      	beq.n	8008dca <HAL_TIM_PWM_Start+0x122>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <HAL_TIM_PWM_Start+0x170>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d111      	bne.n	8008dee <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b06      	cmp	r3, #6
 8008dda:	d010      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dec:	e007      	b.n	8008dfe <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0201 	orr.w	r2, r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	40012c00 	.word	0x40012c00
 8008e0c:	40013400 	.word	0x40013400
 8008e10:	40000400 	.word	0x40000400
 8008e14:	40000800 	.word	0x40000800
 8008e18:	40000c00 	.word	0x40000c00

08008e1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e093      	b.n	8008f58 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7fd f91d 	bl	8006084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e60:	f023 0307 	bic.w	r3, r3, #7
 8008e64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f000 fbbb 	bl	80095ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ebc:	f023 030c 	bic.w	r3, r3, #12
 8008ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	011a      	lsls	r2, r3, #4
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	031b      	lsls	r3, r3, #12
 8008eec:	4313      	orrs	r3, r2
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008efa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	4313      	orrs	r3, r2
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d110      	bne.n	8008fb2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d102      	bne.n	8008f9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f96:	7b7b      	ldrb	r3, [r7, #13]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d001      	beq.n	8008fa0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e069      	b.n	8009074 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fb0:	e031      	b.n	8009016 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d110      	bne.n	8008fda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d102      	bne.n	8008fc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008fbe:	7b3b      	ldrb	r3, [r7, #12]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d001      	beq.n	8008fc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e055      	b.n	8009074 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fd8:	e01d      	b.n	8009016 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d108      	bne.n	8008ff2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d105      	bne.n	8008ff2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fe6:	7b7b      	ldrb	r3, [r7, #13]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d102      	bne.n	8008ff2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008fec:	7b3b      	ldrb	r3, [r7, #12]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d001      	beq.n	8008ff6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e03e      	b.n	8009074 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2202      	movs	r2, #2
 800900a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_TIM_Encoder_Start+0xc4>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b04      	cmp	r3, #4
 8009020:	d008      	beq.n	8009034 <HAL_TIM_Encoder_Start+0xd4>
 8009022:	e00f      	b.n	8009044 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2201      	movs	r2, #1
 800902a:	2100      	movs	r1, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fd99 	bl	8009b64 <TIM_CCxChannelCmd>
      break;
 8009032:	e016      	b.n	8009062 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2201      	movs	r2, #1
 800903a:	2104      	movs	r1, #4
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fd91 	bl	8009b64 <TIM_CCxChannelCmd>
      break;
 8009042:	e00e      	b.n	8009062 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2201      	movs	r2, #1
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fd89 	bl	8009b64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	2104      	movs	r1, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fd82 	bl	8009b64 <TIM_CCxChannelCmd>
      break;
 8009060:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f042 0201 	orr.w	r2, r2, #1
 8009070:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b02      	cmp	r3, #2
 8009090:	d122      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b02      	cmp	r3, #2
 800909e:	d11b      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0202 	mvn.w	r2, #2
 80090a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa78 	bl	80095b4 <HAL_TIM_IC_CaptureCallback>
 80090c4:	e005      	b.n	80090d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa6b 	bl	80095a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa7a 	bl	80095c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d122      	bne.n	800912c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d11b      	bne.n	800912c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0204 	mvn.w	r2, #4
 80090fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa4e 	bl	80095b4 <HAL_TIM_IC_CaptureCallback>
 8009118:	e005      	b.n	8009126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fa41 	bl	80095a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa50 	bl	80095c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b08      	cmp	r3, #8
 8009138:	d122      	bne.n	8009180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b08      	cmp	r3, #8
 8009146:	d11b      	bne.n	8009180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f06f 0208 	mvn.w	r2, #8
 8009150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2204      	movs	r2, #4
 8009156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa24 	bl	80095b4 <HAL_TIM_IC_CaptureCallback>
 800916c:	e005      	b.n	800917a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa17 	bl	80095a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fa26 	bl	80095c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0310 	and.w	r3, r3, #16
 800918a:	2b10      	cmp	r3, #16
 800918c:	d122      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0310 	and.w	r3, r3, #16
 8009198:	2b10      	cmp	r3, #16
 800919a:	d11b      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0210 	mvn.w	r2, #16
 80091a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2208      	movs	r2, #8
 80091aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f9fa 	bl	80095b4 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f9ed 	bl	80095a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f9fc 	bl	80095c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d10e      	bne.n	8009200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d107      	bne.n	8009200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0201 	mvn.w	r2, #1
 80091f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9c8 	bl	8009590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	2b80      	cmp	r3, #128	; 0x80
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009218:	2b80      	cmp	r3, #128	; 0x80
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fd86 	bl	8009d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d10e      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009244:	2b40      	cmp	r3, #64	; 0x40
 8009246:	d107      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f9c0 	bl	80095d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b20      	cmp	r3, #32
 8009264:	d10e      	bne.n	8009284 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b20      	cmp	r3, #32
 8009272:	d107      	bne.n	8009284 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0220 	mvn.w	r2, #32
 800927c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fd51 	bl	8009d26 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80092a2:	2302      	movs	r3, #2
 80092a4:	e0ac      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x174>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b0c      	cmp	r3, #12
 80092b2:	f200 809f 	bhi.w	80093f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80092b6:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092f1 	.word	0x080092f1
 80092c0:	080093f5 	.word	0x080093f5
 80092c4:	080093f5 	.word	0x080093f5
 80092c8:	080093f5 	.word	0x080093f5
 80092cc:	08009331 	.word	0x08009331
 80092d0:	080093f5 	.word	0x080093f5
 80092d4:	080093f5 	.word	0x080093f5
 80092d8:	080093f5 	.word	0x080093f5
 80092dc:	08009373 	.word	0x08009373
 80092e0:	080093f5 	.word	0x080093f5
 80092e4:	080093f5 	.word	0x080093f5
 80092e8:	080093f5 	.word	0x080093f5
 80092ec:	080093b3 	.word	0x080093b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f9f2 	bl	80096e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0208 	orr.w	r2, r2, #8
 800930a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0204 	bic.w	r2, r2, #4
 800931a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6999      	ldr	r1, [r3, #24]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	619a      	str	r2, [r3, #24]
      break;
 800932e:	e062      	b.n	80093f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fa42 	bl	80097c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6999      	ldr	r1, [r3, #24]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	021a      	lsls	r2, r3, #8
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	619a      	str	r2, [r3, #24]
      break;
 8009370:	e041      	b.n	80093f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68b9      	ldr	r1, [r7, #8]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fa95 	bl	80098a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69da      	ldr	r2, [r3, #28]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0208 	orr.w	r2, r2, #8
 800938c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0204 	bic.w	r2, r2, #4
 800939c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69d9      	ldr	r1, [r3, #28]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	691a      	ldr	r2, [r3, #16]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	61da      	str	r2, [r3, #28]
      break;
 80093b0:	e021      	b.n	80093f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fae9 	bl	8009990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	69da      	ldr	r2, [r3, #28]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69da      	ldr	r2, [r3, #28]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69d9      	ldr	r1, [r3, #28]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	021a      	lsls	r2, r3, #8
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	61da      	str	r2, [r3, #28]
      break;
 80093f2:	e000      	b.n	80093f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80093f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_TIM_ConfigClockSource+0x18>
 800941c:	2302      	movs	r3, #2
 800941e:	e0b3      	b.n	8009588 <HAL_TIM_ConfigClockSource+0x180>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800943e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009446:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009458:	d03e      	beq.n	80094d8 <HAL_TIM_ConfigClockSource+0xd0>
 800945a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800945e:	f200 8087 	bhi.w	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009466:	f000 8085 	beq.w	8009574 <HAL_TIM_ConfigClockSource+0x16c>
 800946a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800946e:	d87f      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009470:	2b70      	cmp	r3, #112	; 0x70
 8009472:	d01a      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0xa2>
 8009474:	2b70      	cmp	r3, #112	; 0x70
 8009476:	d87b      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009478:	2b60      	cmp	r3, #96	; 0x60
 800947a:	d050      	beq.n	800951e <HAL_TIM_ConfigClockSource+0x116>
 800947c:	2b60      	cmp	r3, #96	; 0x60
 800947e:	d877      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009480:	2b50      	cmp	r3, #80	; 0x50
 8009482:	d03c      	beq.n	80094fe <HAL_TIM_ConfigClockSource+0xf6>
 8009484:	2b50      	cmp	r3, #80	; 0x50
 8009486:	d873      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d058      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x136>
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d86f      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009490:	2b30      	cmp	r3, #48	; 0x30
 8009492:	d064      	beq.n	800955e <HAL_TIM_ConfigClockSource+0x156>
 8009494:	2b30      	cmp	r3, #48	; 0x30
 8009496:	d86b      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 8009498:	2b20      	cmp	r3, #32
 800949a:	d060      	beq.n	800955e <HAL_TIM_ConfigClockSource+0x156>
 800949c:	2b20      	cmp	r3, #32
 800949e:	d867      	bhi.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d05c      	beq.n	800955e <HAL_TIM_ConfigClockSource+0x156>
 80094a4:	2b10      	cmp	r3, #16
 80094a6:	d05a      	beq.n	800955e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80094a8:	e062      	b.n	8009570 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6899      	ldr	r1, [r3, #8]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f000 fb34 	bl	8009b26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	609a      	str	r2, [r3, #8]
      break;
 80094d6:	e04e      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	6899      	ldr	r1, [r3, #8]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f000 fb1d 	bl	8009b26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094fa:	609a      	str	r2, [r3, #8]
      break;
 80094fc:	e03b      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	6859      	ldr	r1, [r3, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	461a      	mov	r2, r3
 800950c:	f000 fa94 	bl	8009a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2150      	movs	r1, #80	; 0x50
 8009516:	4618      	mov	r0, r3
 8009518:	f000 faeb 	bl	8009af2 <TIM_ITRx_SetConfig>
      break;
 800951c:	e02b      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	6859      	ldr	r1, [r3, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	461a      	mov	r2, r3
 800952c:	f000 fab2 	bl	8009a94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2160      	movs	r1, #96	; 0x60
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fadb 	bl	8009af2 <TIM_ITRx_SetConfig>
      break;
 800953c:	e01b      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6859      	ldr	r1, [r3, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	461a      	mov	r2, r3
 800954c:	f000 fa74 	bl	8009a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2140      	movs	r1, #64	; 0x40
 8009556:	4618      	mov	r0, r3
 8009558:	f000 facb 	bl	8009af2 <TIM_ITRx_SetConfig>
      break;
 800955c:	e00b      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f000 fac2 	bl	8009af2 <TIM_ITRx_SetConfig>
        break;
 800956e:	e002      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009570:	bf00      	nop
 8009572:	e000      	b.n	8009576 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009574:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	bc80      	pop	{r7}
 80095a0:	4770      	bx	lr

080095a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bc80      	pop	{r7}
 80095b2:	4770      	bx	lr

080095b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bc80      	pop	{r7}
 80095d6:	4770      	bx	lr

080095d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bc80      	pop	{r7}
 80095e8:	4770      	bx	lr
	...

080095ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a33      	ldr	r2, [pc, #204]	; (80096cc <TIM_Base_SetConfig+0xe0>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d013      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a32      	ldr	r2, [pc, #200]	; (80096d0 <TIM_Base_SetConfig+0xe4>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d00f      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009612:	d00b      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a2f      	ldr	r2, [pc, #188]	; (80096d4 <TIM_Base_SetConfig+0xe8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d007      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a2e      	ldr	r2, [pc, #184]	; (80096d8 <TIM_Base_SetConfig+0xec>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d003      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a2d      	ldr	r2, [pc, #180]	; (80096dc <TIM_Base_SetConfig+0xf0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d108      	bne.n	800963e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a22      	ldr	r2, [pc, #136]	; (80096cc <TIM_Base_SetConfig+0xe0>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d013      	beq.n	800966e <TIM_Base_SetConfig+0x82>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a21      	ldr	r2, [pc, #132]	; (80096d0 <TIM_Base_SetConfig+0xe4>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00f      	beq.n	800966e <TIM_Base_SetConfig+0x82>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009654:	d00b      	beq.n	800966e <TIM_Base_SetConfig+0x82>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a1e      	ldr	r2, [pc, #120]	; (80096d4 <TIM_Base_SetConfig+0xe8>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d007      	beq.n	800966e <TIM_Base_SetConfig+0x82>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a1d      	ldr	r2, [pc, #116]	; (80096d8 <TIM_Base_SetConfig+0xec>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_Base_SetConfig+0x82>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a1c      	ldr	r2, [pc, #112]	; (80096dc <TIM_Base_SetConfig+0xf0>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d108      	bne.n	8009680 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4313      	orrs	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a09      	ldr	r2, [pc, #36]	; (80096cc <TIM_Base_SetConfig+0xe0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_Base_SetConfig+0xc8>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a08      	ldr	r2, [pc, #32]	; (80096d0 <TIM_Base_SetConfig+0xe4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d103      	bne.n	80096bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	691a      	ldr	r2, [r3, #16]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	615a      	str	r2, [r3, #20]
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800
 80096dc:	40000c00 	.word	0x40000c00

080096e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f023 0201 	bic.w	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f023 0302 	bic.w	r3, r3, #2
 8009728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <TIM_OC1_SetConfig+0xd8>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_OC1_SetConfig+0x64>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <TIM_OC1_SetConfig+0xdc>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d10c      	bne.n	800975e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f023 0308 	bic.w	r3, r3, #8
 800974a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	4313      	orrs	r3, r2
 8009754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f023 0304 	bic.w	r3, r3, #4
 800975c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a15      	ldr	r2, [pc, #84]	; (80097b8 <TIM_OC1_SetConfig+0xd8>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d003      	beq.n	800976e <TIM_OC1_SetConfig+0x8e>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a14      	ldr	r2, [pc, #80]	; (80097bc <TIM_OC1_SetConfig+0xdc>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d111      	bne.n	8009792 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800977c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	621a      	str	r2, [r3, #32]
}
 80097ac:	bf00      	nop
 80097ae:	371c      	adds	r7, #28
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40012c00 	.word	0x40012c00
 80097bc:	40013400 	.word	0x40013400

080097c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f023 0210 	bic.w	r2, r3, #16
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4313      	orrs	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f023 0320 	bic.w	r3, r3, #32
 800980a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a21      	ldr	r2, [pc, #132]	; (80098a0 <TIM_OC2_SetConfig+0xe0>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_OC2_SetConfig+0x68>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a20      	ldr	r2, [pc, #128]	; (80098a4 <TIM_OC2_SetConfig+0xe4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d10d      	bne.n	8009844 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800982e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <TIM_OC2_SetConfig+0xe0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d003      	beq.n	8009854 <TIM_OC2_SetConfig+0x94>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a15      	ldr	r2, [pc, #84]	; (80098a4 <TIM_OC2_SetConfig+0xe4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d113      	bne.n	800987c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800985a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	621a      	str	r2, [r3, #32]
}
 8009896:	bf00      	nop
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	bc80      	pop	{r7}
 800989e:	4770      	bx	lr
 80098a0:	40012c00 	.word	0x40012c00
 80098a4:	40013400 	.word	0x40013400

080098a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	021b      	lsls	r3, r3, #8
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a21      	ldr	r2, [pc, #132]	; (8009988 <TIM_OC3_SetConfig+0xe0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <TIM_OC3_SetConfig+0x66>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a20      	ldr	r2, [pc, #128]	; (800998c <TIM_OC3_SetConfig+0xe4>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d10d      	bne.n	800992a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	021b      	lsls	r3, r3, #8
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a16      	ldr	r2, [pc, #88]	; (8009988 <TIM_OC3_SetConfig+0xe0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d003      	beq.n	800993a <TIM_OC3_SetConfig+0x92>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a15      	ldr	r2, [pc, #84]	; (800998c <TIM_OC3_SetConfig+0xe4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d113      	bne.n	8009962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	4313      	orrs	r3, r2
 8009954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	621a      	str	r2, [r3, #32]
}
 800997c:	bf00      	nop
 800997e:	371c      	adds	r7, #28
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40012c00 	.word	0x40012c00
 800998c:	40013400 	.word	0x40013400

08009990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	031b      	lsls	r3, r3, #12
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a11      	ldr	r2, [pc, #68]	; (8009a30 <TIM_OC4_SetConfig+0xa0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d003      	beq.n	80099f8 <TIM_OC4_SetConfig+0x68>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a10      	ldr	r2, [pc, #64]	; (8009a34 <TIM_OC4_SetConfig+0xa4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d109      	bne.n	8009a0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	019b      	lsls	r3, r3, #6
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	621a      	str	r2, [r3, #32]
}
 8009a26:	bf00      	nop
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bc80      	pop	{r7}
 8009a2e:	4770      	bx	lr
 8009a30:	40012c00 	.word	0x40012c00
 8009a34:	40013400 	.word	0x40013400

08009a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f023 0201 	bic.w	r2, r3, #1
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 030a 	bic.w	r3, r3, #10
 8009a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	621a      	str	r2, [r3, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bc80      	pop	{r7}
 8009a92:	4770      	bx	lr

08009a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
 8009aa4:	f023 0210 	bic.w	r2, r3, #16
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	031b      	lsls	r3, r3, #12
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	621a      	str	r2, [r3, #32]
}
 8009ae8:	bf00      	nop
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr

08009af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	f043 0307 	orr.w	r3, r3, #7
 8009b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	609a      	str	r2, [r3, #8]
}
 8009b1c:	bf00      	nop
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr

08009b26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	021a      	lsls	r2, r3, #8
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	609a      	str	r2, [r3, #8]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f003 031f 	and.w	r3, r3, #31
 8009b76:	2201      	movs	r2, #1
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1a      	ldr	r2, [r3, #32]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	43db      	mvns	r3, r3
 8009b86:	401a      	ands	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6a1a      	ldr	r2, [r3, #32]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f003 031f 	and.w	r3, r3, #31
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	fa01 f303 	lsl.w	r3, r1, r3
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	621a      	str	r2, [r3, #32]
}
 8009ba2:	bf00      	nop
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr

08009bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e050      	b.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a1b      	ldr	r2, [pc, #108]	; (8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d018      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a19      	ldr	r2, [pc, #100]	; (8009c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d013      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c1a:	d00e      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a15      	ldr	r2, [pc, #84]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d009      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a14      	ldr	r2, [pc, #80]	; (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d004      	beq.n	8009c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a12      	ldr	r2, [pc, #72]	; (8009c80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d10c      	bne.n	8009c54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	4770      	bx	lr
 8009c70:	40012c00 	.word	0x40012c00
 8009c74:	40013400 	.word	0x40013400
 8009c78:	40000400 	.word	0x40000400
 8009c7c:	40000800 	.word	0x40000800
 8009c80:	40000c00 	.word	0x40000c00

08009c84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e03d      	b.n	8009d1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bc80      	pop	{r7}
 8009d24:	4770      	bx	lr

08009d26 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bc80      	pop	{r7}
 8009d36:	4770      	bx	lr

08009d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr

08009d4a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e03f      	b.n	8009ddc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7fc facd 	bl	8006310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2224      	movs	r2, #36	; 0x24
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fdde 	bl	800a950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009da2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695a      	ldr	r2, [r3, #20]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009db2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	; 0x28
 8009de8:	af02      	add	r7, sp, #8
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d17c      	bne.n	8009efe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_UART_Transmit+0x2c>
 8009e0a:	88fb      	ldrh	r3, [r7, #6]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e075      	b.n	8009f00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_UART_Transmit+0x3e>
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e06e      	b.n	8009f00 <HAL_UART_Transmit+0x11c>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2221      	movs	r2, #33	; 0x21
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e38:	f7fc fe4e 	bl	8006ad8 <HAL_GetTick>
 8009e3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	88fa      	ldrh	r2, [r7, #6]
 8009e48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e52:	d108      	bne.n	8009e66 <HAL_UART_Transmit+0x82>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	61bb      	str	r3, [r7, #24]
 8009e64:	e003      	b.n	8009e6e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e76:	e02a      	b.n	8009ece <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2180      	movs	r1, #128	; 0x80
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 fb17 	bl	800a4b6 <UART_WaitOnFlagUntilTimeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e036      	b.n	8009f00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ea6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	3302      	adds	r3, #2
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	e007      	b.n	8009ec0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1cf      	bne.n	8009e78 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2140      	movs	r1, #64	; 0x40
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 fae7 	bl	800a4b6 <UART_WaitOnFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e006      	b.n	8009f00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e000      	b.n	8009f00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009efe:	2302      	movs	r3, #2
  }
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3720      	adds	r7, #32
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d11d      	bne.n	8009f5e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_UART_Receive_IT+0x26>
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e016      	b.n	8009f60 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d101      	bne.n	8009f40 <HAL_UART_Receive_IT+0x38>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	e00f      	b.n	8009f60 <HAL_UART_Receive_IT+0x58>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	461a      	mov	r2, r3
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 faf8 	bl	800a54a <UART_Start_Receive_IT>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	e000      	b.n	8009f60 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f5e:	2302      	movs	r3, #2
  }
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b20      	cmp	r3, #32
 8009f80:	d11d      	bne.n	8009fbe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <HAL_UART_Receive_DMA+0x26>
 8009f88:	88fb      	ldrh	r3, [r7, #6]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e016      	b.n	8009fc0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <HAL_UART_Receive_DMA+0x38>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e00f      	b.n	8009fc0 <HAL_UART_Receive_DMA+0x58>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fb01 	bl	800a5bc <UART_Start_Receive_DMA>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	e000      	b.n	8009fc0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009fbe:	2302      	movs	r3, #2
  }
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08a      	sub	sp, #40	; 0x28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	f003 030f 	and.w	r3, r3, #15
 8009ff6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10d      	bne.n	800a01a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d008      	beq.n	800a01a <HAL_UART_IRQHandler+0x52>
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fbf2 	bl	800a7fc <UART_Receive_IT>
      return;
 800a018:	e17b      	b.n	800a312 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 80b1 	beq.w	800a184 <HAL_UART_IRQHandler+0x1bc>
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d105      	bne.n	800a038 <HAL_UART_IRQHandler+0x70>
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 80a6 	beq.w	800a184 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <HAL_UART_IRQHandler+0x90>
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a050:	f043 0201 	orr.w	r2, r3, #1
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <HAL_UART_IRQHandler+0xb0>
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	f043 0202 	orr.w	r2, r3, #2
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00a      	beq.n	800a098 <HAL_UART_IRQHandler+0xd0>
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	f043 0204 	orr.w	r2, r3, #4
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00f      	beq.n	800a0c2 <HAL_UART_IRQHandler+0xfa>
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	f003 0320 	and.w	r3, r3, #32
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <HAL_UART_IRQHandler+0xee>
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	f043 0208 	orr.w	r2, r3, #8
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 811e 	beq.w	800a308 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d007      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x11e>
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb8b 	bl	800a7fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bf14      	ite	ne
 800a0f4:	2301      	movne	r3, #1
 800a0f6:	2300      	moveq	r3, #0
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <HAL_UART_IRQHandler+0x146>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d031      	beq.n	800a172 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 facd 	bl	800a6ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d023      	beq.n	800a16a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	695a      	ldr	r2, [r3, #20]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a130:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	2b00      	cmp	r3, #0
 800a138:	d013      	beq.n	800a162 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	4a76      	ldr	r2, [pc, #472]	; (800a318 <HAL_UART_IRQHandler+0x350>)
 800a140:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	4618      	mov	r0, r3
 800a148:	f7fc ff12 	bl	8006f70 <HAL_DMA_Abort_IT>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d016      	beq.n	800a180 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a160:	e00e      	b.n	800a180 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fa fd10 	bl	8004b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a168:	e00a      	b.n	800a180 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7fa fd0c 	bl	8004b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a170:	e006      	b.n	800a180 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7fa fd08 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a17e:	e0c3      	b.n	800a308 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a180:	bf00      	nop
    return;
 800a182:	e0c1      	b.n	800a308 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a188:	2b01      	cmp	r3, #1
 800a18a:	f040 80a1 	bne.w	800a2d0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 809b 	beq.w	800a2d0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	f003 0310 	and.w	r3, r3, #16
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8095 	beq.w	800a2d0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d04e      	beq.n	800a268 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a1d4:	8a3b      	ldrh	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8098 	beq.w	800a30c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1e0:	8a3a      	ldrh	r2, [r7, #16]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	f080 8092 	bcs.w	800a30c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8a3a      	ldrh	r2, [r7, #16]
 800a1ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	2b20      	cmp	r3, #32
 800a1f6:	d02b      	beq.n	800a250 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a206:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	695a      	ldr	r2, [r3, #20]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0201 	bic.w	r2, r2, #1
 800a216:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695a      	ldr	r2, [r3, #20]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a226:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0210 	bic.w	r2, r2, #16
 800a244:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fc fe55 	bl	8006efa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a258:	b29b      	uxth	r3, r3
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f86d 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a266:	e051      	b.n	800a30c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a270:	b29b      	uxth	r3, r3
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d047      	beq.n	800a310 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a280:	8a7b      	ldrh	r3, [r7, #18]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d044      	beq.n	800a310 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a294:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	695a      	ldr	r2, [r3, #20]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 0201 	bic.w	r2, r2, #1
 800a2a4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68da      	ldr	r2, [r3, #12]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0210 	bic.w	r2, r2, #16
 800a2c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2c4:	8a7b      	ldrh	r3, [r7, #18]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f839 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a2ce:	e01f      	b.n	800a310 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d008      	beq.n	800a2ec <HAL_UART_IRQHandler+0x324>
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fa22 	bl	800a72e <UART_Transmit_IT>
    return;
 800a2ea:	e012      	b.n	800a312 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00d      	beq.n	800a312 <HAL_UART_IRQHandler+0x34a>
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d008      	beq.n	800a312 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fa63 	bl	800a7cc <UART_EndTransmit_IT>
    return;
 800a306:	e004      	b.n	800a312 <HAL_UART_IRQHandler+0x34a>
    return;
 800a308:	bf00      	nop
 800a30a:	e002      	b.n	800a312 <HAL_UART_IRQHandler+0x34a>
      return;
 800a30c:	bf00      	nop
 800a30e:	e000      	b.n	800a312 <HAL_UART_IRQHandler+0x34a>
      return;
 800a310:	bf00      	nop
  }
}
 800a312:	3728      	adds	r7, #40	; 0x28
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0800a707 	.word	0x0800a707

0800a31c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	bc80      	pop	{r7}
 800a32c:	4770      	bx	lr

0800a32e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr

0800a340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr

0800a356 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d12a      	bne.n	800a3c8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a386:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	695a      	ldr	r2, [r3, #20]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0201 	bic.w	r2, r2, #1
 800a396:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695a      	ldr	r2, [r3, #20]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3a6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d107      	bne.n	800a3c8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0210 	bic.w	r2, r2, #16
 800a3c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d106      	bne.n	800a3de <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff ffb2 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3dc:	e002      	b.n	800a3e4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7fa fba2 	bl	8004b28 <HAL_UART_RxCpltCallback>
}
 800a3e4:	bf00      	nop
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d108      	bne.n	800a414 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a406:	085b      	lsrs	r3, r3, #1
 800a408:	b29b      	uxth	r3, r3
 800a40a:	4619      	mov	r1, r3
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff ff97 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a412:	e002      	b.n	800a41a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff ff8a 	bl	800a32e <HAL_UART_RxHalfCpltCallback>
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bf14      	ite	ne
 800a442:	2301      	movne	r3, #1
 800a444:	2300      	moveq	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b21      	cmp	r3, #33	; 0x21
 800a454:	d108      	bne.n	800a468 <UART_DMAError+0x46>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2200      	movs	r2, #0
 800a460:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a462:	68b8      	ldr	r0, [r7, #8]
 800a464:	f000 f90e 	bl	800a684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a472:	2b00      	cmp	r3, #0
 800a474:	bf14      	ite	ne
 800a476:	2301      	movne	r3, #1
 800a478:	2300      	moveq	r3, #0
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b22      	cmp	r3, #34	; 0x22
 800a488:	d108      	bne.n	800a49c <UART_DMAError+0x7a>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a496:	68b8      	ldr	r0, [r7, #8]
 800a498:	f000 f909 	bl	800a6ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	f043 0210 	orr.w	r2, r3, #16
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4a8:	68b8      	ldr	r0, [r7, #8]
 800a4aa:	f7fa fb6d 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	603b      	str	r3, [r7, #0]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4c6:	e02c      	b.n	800a522 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d028      	beq.n	800a522 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4d6:	f7fc faff 	bl	8006ad8 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	69ba      	ldr	r2, [r7, #24]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d21d      	bcs.n	800a522 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	695a      	ldr	r2, [r3, #20]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0201 	bic.w	r2, r2, #1
 800a504:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2220      	movs	r2, #32
 800a50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2220      	movs	r2, #32
 800a512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e00f      	b.n	800a542 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4013      	ands	r3, r2
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	429a      	cmp	r2, r3
 800a530:	bf0c      	ite	eq
 800a532:	2301      	moveq	r3, #1
 800a534:	2300      	movne	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d0c3      	beq.n	800a4c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	4613      	mov	r3, r2
 800a556:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	88fa      	ldrh	r2, [r7, #6]
 800a562:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	88fa      	ldrh	r2, [r7, #6]
 800a568:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2222      	movs	r2, #34	; 0x22
 800a574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a58e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	695a      	ldr	r2, [r3, #20]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f042 0220 	orr.w	r2, r2, #32
 800a5ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc80      	pop	{r7}
 800a5ba:	4770      	bx	lr

0800a5bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2222      	movs	r2, #34	; 0x22
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	4a23      	ldr	r2, [pc, #140]	; (800a678 <UART_Start_Receive_DMA+0xbc>)
 800a5ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	4a22      	ldr	r2, [pc, #136]	; (800a67c <UART_Start_Receive_DMA+0xc0>)
 800a5f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	4a21      	ldr	r2, [pc, #132]	; (800a680 <UART_Start_Receive_DMA+0xc4>)
 800a5fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a600:	2200      	movs	r2, #0
 800a602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	f7fc fc0e 	bl	8006e3c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a620:	2300      	movs	r3, #0
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	613b      	str	r3, [r7, #16]
 800a634:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a64c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f042 0201 	orr.w	r2, r2, #1
 800a65c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	695a      	ldr	r2, [r3, #20]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a66c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	0800a357 	.word	0x0800a357
 800a67c:	0800a3ed 	.word	0x0800a3ed
 800a680:	0800a423 	.word	0x0800a423

0800a684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a69a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bc80      	pop	{r7}
 800a6ac:	4770      	bx	lr

0800a6ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a6c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695a      	ldr	r2, [r3, #20]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0201 	bic.w	r2, r2, #1
 800a6d4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d107      	bne.n	800a6ee <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0210 	bic.w	r2, r2, #16
 800a6ec:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	bc80      	pop	{r7}
 800a704:	4770      	bx	lr

0800a706 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f7fa fa31 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a72e:	b480      	push	{r7}
 800a730:	b085      	sub	sp, #20
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b21      	cmp	r3, #33	; 0x21
 800a740:	d13e      	bne.n	800a7c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a74a:	d114      	bne.n	800a776 <UART_Transmit_IT+0x48>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d110      	bne.n	800a776 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	1c9a      	adds	r2, r3, #2
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	621a      	str	r2, [r3, #32]
 800a774:	e008      	b.n	800a788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	1c59      	adds	r1, r3, #1
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6211      	str	r1, [r2, #32]
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	3b01      	subs	r3, #1
 800a790:	b29b      	uxth	r3, r3
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	4619      	mov	r1, r3
 800a796:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10f      	bne.n	800a7bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68da      	ldr	r2, [r3, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	e000      	b.n	800a7c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7c0:	2302      	movs	r3, #2
  }
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bc80      	pop	{r7}
 800a7ca:	4770      	bx	lr

0800a7cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff fd95 	bl	800a31c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b22      	cmp	r3, #34	; 0x22
 800a80e:	f040 8099 	bne.w	800a944 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a81a:	d117      	bne.n	800a84c <UART_Receive_IT+0x50>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d113      	bne.n	800a84c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	b29b      	uxth	r3, r3
 800a836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a844:	1c9a      	adds	r2, r3, #2
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	629a      	str	r2, [r3, #40]	; 0x28
 800a84a:	e026      	b.n	800a89a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a850:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a852:	2300      	movs	r3, #0
 800a854:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85e:	d007      	beq.n	800a870 <UART_Receive_IT+0x74>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <UART_Receive_IT+0x82>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	b2da      	uxtb	r2, r3
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	e008      	b.n	800a890 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a894:	1c5a      	adds	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d148      	bne.n	800a940 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68da      	ldr	r2, [r3, #12]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0220 	bic.w	r2, r2, #32
 800a8bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68da      	ldr	r2, [r3, #12]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695a      	ldr	r2, [r3, #20]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0201 	bic.w	r2, r2, #1
 800a8dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d123      	bne.n	800a936 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0210 	bic.w	r2, r2, #16
 800a902:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0310 	and.w	r3, r3, #16
 800a90e:	2b10      	cmp	r3, #16
 800a910:	d10a      	bne.n	800a928 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a912:	2300      	movs	r3, #0
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff fd06 	bl	800a340 <HAL_UARTEx_RxEventCallback>
 800a934:	e002      	b.n	800a93c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7fa f8f6 	bl	8004b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	e002      	b.n	800a946 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	e000      	b.n	800a946 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a944:	2302      	movs	r3, #2
  }
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689a      	ldr	r2, [r3, #8]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	431a      	orrs	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a98a:	f023 030c 	bic.w	r3, r3, #12
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	430b      	orrs	r3, r1
 800a996:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	699a      	ldr	r2, [r3, #24]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a2c      	ldr	r2, [pc, #176]	; (800aa64 <UART_SetConfig+0x114>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d103      	bne.n	800a9c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a9b8:	f7fe f83c 	bl	8008a34 <HAL_RCC_GetPCLK2Freq>
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	e002      	b.n	800a9c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a9c0:	f7fe f824 	bl	8008a0c <HAL_RCC_GetPCLK1Freq>
 800a9c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	009a      	lsls	r2, r3, #2
 800a9d0:	441a      	add	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9dc:	4a22      	ldr	r2, [pc, #136]	; (800aa68 <UART_SetConfig+0x118>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	0119      	lsls	r1, r3, #4
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009a      	lsls	r2, r3, #2
 800a9f0:	441a      	add	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a9fc:	4b1a      	ldr	r3, [pc, #104]	; (800aa68 <UART_SetConfig+0x118>)
 800a9fe:	fba3 0302 	umull	r0, r3, r3, r2
 800aa02:	095b      	lsrs	r3, r3, #5
 800aa04:	2064      	movs	r0, #100	; 0x64
 800aa06:	fb00 f303 	mul.w	r3, r0, r3
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	3332      	adds	r3, #50	; 0x32
 800aa10:	4a15      	ldr	r2, [pc, #84]	; (800aa68 <UART_SetConfig+0x118>)
 800aa12:	fba2 2303 	umull	r2, r3, r2, r3
 800aa16:	095b      	lsrs	r3, r3, #5
 800aa18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa1c:	4419      	add	r1, r3
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	009a      	lsls	r2, r3, #2
 800aa28:	441a      	add	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <UART_SetConfig+0x118>)
 800aa36:	fba3 0302 	umull	r0, r3, r3, r2
 800aa3a:	095b      	lsrs	r3, r3, #5
 800aa3c:	2064      	movs	r0, #100	; 0x64
 800aa3e:	fb00 f303 	mul.w	r3, r0, r3
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	3332      	adds	r3, #50	; 0x32
 800aa48:	4a07      	ldr	r2, [pc, #28]	; (800aa68 <UART_SetConfig+0x118>)
 800aa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4e:	095b      	lsrs	r3, r3, #5
 800aa50:	f003 020f 	and.w	r2, r3, #15
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	440a      	add	r2, r1
 800aa5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800aa5c:	bf00      	nop
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	40013800 	.word	0x40013800
 800aa68:	51eb851f 	.word	0x51eb851f

0800aa6c <__assert_func>:
 800aa6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa6e:	4614      	mov	r4, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <__assert_func+0x2c>)
 800aa74:	4605      	mov	r5, r0
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68d8      	ldr	r0, [r3, #12]
 800aa7a:	b14c      	cbz	r4, 800aa90 <__assert_func+0x24>
 800aa7c:	4b07      	ldr	r3, [pc, #28]	; (800aa9c <__assert_func+0x30>)
 800aa7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa82:	9100      	str	r1, [sp, #0]
 800aa84:	462b      	mov	r3, r5
 800aa86:	4906      	ldr	r1, [pc, #24]	; (800aaa0 <__assert_func+0x34>)
 800aa88:	f000 f814 	bl	800aab4 <fiprintf>
 800aa8c:	f000 fc2c 	bl	800b2e8 <abort>
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <__assert_func+0x38>)
 800aa92:	461c      	mov	r4, r3
 800aa94:	e7f3      	b.n	800aa7e <__assert_func+0x12>
 800aa96:	bf00      	nop
 800aa98:	20000024 	.word	0x20000024
 800aa9c:	0800d8fc 	.word	0x0800d8fc
 800aaa0:	0800d909 	.word	0x0800d909
 800aaa4:	0800d937 	.word	0x0800d937

0800aaa8 <__errno>:
 800aaa8:	4b01      	ldr	r3, [pc, #4]	; (800aab0 <__errno+0x8>)
 800aaaa:	6818      	ldr	r0, [r3, #0]
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000024 	.word	0x20000024

0800aab4 <fiprintf>:
 800aab4:	b40e      	push	{r1, r2, r3}
 800aab6:	b503      	push	{r0, r1, lr}
 800aab8:	4601      	mov	r1, r0
 800aaba:	ab03      	add	r3, sp, #12
 800aabc:	4805      	ldr	r0, [pc, #20]	; (800aad4 <fiprintf+0x20>)
 800aabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac2:	6800      	ldr	r0, [r0, #0]
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	f000 f869 	bl	800ab9c <_vfiprintf_r>
 800aaca:	b002      	add	sp, #8
 800aacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad0:	b003      	add	sp, #12
 800aad2:	4770      	bx	lr
 800aad4:	20000024 	.word	0x20000024

0800aad8 <__libc_init_array>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	2600      	movs	r6, #0
 800aadc:	4d0c      	ldr	r5, [pc, #48]	; (800ab10 <__libc_init_array+0x38>)
 800aade:	4c0d      	ldr	r4, [pc, #52]	; (800ab14 <__libc_init_array+0x3c>)
 800aae0:	1b64      	subs	r4, r4, r5
 800aae2:	10a4      	asrs	r4, r4, #2
 800aae4:	42a6      	cmp	r6, r4
 800aae6:	d109      	bne.n	800aafc <__libc_init_array+0x24>
 800aae8:	f002 fbb4 	bl	800d254 <_init>
 800aaec:	2600      	movs	r6, #0
 800aaee:	4d0a      	ldr	r5, [pc, #40]	; (800ab18 <__libc_init_array+0x40>)
 800aaf0:	4c0a      	ldr	r4, [pc, #40]	; (800ab1c <__libc_init_array+0x44>)
 800aaf2:	1b64      	subs	r4, r4, r5
 800aaf4:	10a4      	asrs	r4, r4, #2
 800aaf6:	42a6      	cmp	r6, r4
 800aaf8:	d105      	bne.n	800ab06 <__libc_init_array+0x2e>
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab00:	4798      	blx	r3
 800ab02:	3601      	adds	r6, #1
 800ab04:	e7ee      	b.n	800aae4 <__libc_init_array+0xc>
 800ab06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab0a:	4798      	blx	r3
 800ab0c:	3601      	adds	r6, #1
 800ab0e:	e7f2      	b.n	800aaf6 <__libc_init_array+0x1e>
 800ab10:	0800dbe8 	.word	0x0800dbe8
 800ab14:	0800dbe8 	.word	0x0800dbe8
 800ab18:	0800dbe8 	.word	0x0800dbe8
 800ab1c:	0800dbec 	.word	0x0800dbec

0800ab20 <memcpy>:
 800ab20:	440a      	add	r2, r1
 800ab22:	4291      	cmp	r1, r2
 800ab24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab28:	d100      	bne.n	800ab2c <memcpy+0xc>
 800ab2a:	4770      	bx	lr
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab32:	4291      	cmp	r1, r2
 800ab34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab38:	d1f9      	bne.n	800ab2e <memcpy+0xe>
 800ab3a:	bd10      	pop	{r4, pc}

0800ab3c <memset>:
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	4402      	add	r2, r0
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d100      	bne.n	800ab46 <memset+0xa>
 800ab44:	4770      	bx	lr
 800ab46:	f803 1b01 	strb.w	r1, [r3], #1
 800ab4a:	e7f9      	b.n	800ab40 <memset+0x4>

0800ab4c <__sfputc_r>:
 800ab4c:	6893      	ldr	r3, [r2, #8]
 800ab4e:	b410      	push	{r4}
 800ab50:	3b01      	subs	r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	6093      	str	r3, [r2, #8]
 800ab56:	da07      	bge.n	800ab68 <__sfputc_r+0x1c>
 800ab58:	6994      	ldr	r4, [r2, #24]
 800ab5a:	42a3      	cmp	r3, r4
 800ab5c:	db01      	blt.n	800ab62 <__sfputc_r+0x16>
 800ab5e:	290a      	cmp	r1, #10
 800ab60:	d102      	bne.n	800ab68 <__sfputc_r+0x1c>
 800ab62:	bc10      	pop	{r4}
 800ab64:	f000 bb00 	b.w	800b168 <__swbuf_r>
 800ab68:	6813      	ldr	r3, [r2, #0]
 800ab6a:	1c58      	adds	r0, r3, #1
 800ab6c:	6010      	str	r0, [r2, #0]
 800ab6e:	7019      	strb	r1, [r3, #0]
 800ab70:	4608      	mov	r0, r1
 800ab72:	bc10      	pop	{r4}
 800ab74:	4770      	bx	lr

0800ab76 <__sfputs_r>:
 800ab76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab78:	4606      	mov	r6, r0
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	4614      	mov	r4, r2
 800ab7e:	18d5      	adds	r5, r2, r3
 800ab80:	42ac      	cmp	r4, r5
 800ab82:	d101      	bne.n	800ab88 <__sfputs_r+0x12>
 800ab84:	2000      	movs	r0, #0
 800ab86:	e007      	b.n	800ab98 <__sfputs_r+0x22>
 800ab88:	463a      	mov	r2, r7
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab90:	f7ff ffdc 	bl	800ab4c <__sfputc_r>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d1f3      	bne.n	800ab80 <__sfputs_r+0xa>
 800ab98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab9c <_vfiprintf_r>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	460d      	mov	r5, r1
 800aba2:	4614      	mov	r4, r2
 800aba4:	4698      	mov	r8, r3
 800aba6:	4606      	mov	r6, r0
 800aba8:	b09d      	sub	sp, #116	; 0x74
 800abaa:	b118      	cbz	r0, 800abb4 <_vfiprintf_r+0x18>
 800abac:	6983      	ldr	r3, [r0, #24]
 800abae:	b90b      	cbnz	r3, 800abb4 <_vfiprintf_r+0x18>
 800abb0:	f000 fcb8 	bl	800b524 <__sinit>
 800abb4:	4b89      	ldr	r3, [pc, #548]	; (800addc <_vfiprintf_r+0x240>)
 800abb6:	429d      	cmp	r5, r3
 800abb8:	d11b      	bne.n	800abf2 <_vfiprintf_r+0x56>
 800abba:	6875      	ldr	r5, [r6, #4]
 800abbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abbe:	07d9      	lsls	r1, r3, #31
 800abc0:	d405      	bmi.n	800abce <_vfiprintf_r+0x32>
 800abc2:	89ab      	ldrh	r3, [r5, #12]
 800abc4:	059a      	lsls	r2, r3, #22
 800abc6:	d402      	bmi.n	800abce <_vfiprintf_r+0x32>
 800abc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abca:	f000 fd49 	bl	800b660 <__retarget_lock_acquire_recursive>
 800abce:	89ab      	ldrh	r3, [r5, #12]
 800abd0:	071b      	lsls	r3, r3, #28
 800abd2:	d501      	bpl.n	800abd8 <_vfiprintf_r+0x3c>
 800abd4:	692b      	ldr	r3, [r5, #16]
 800abd6:	b9eb      	cbnz	r3, 800ac14 <_vfiprintf_r+0x78>
 800abd8:	4629      	mov	r1, r5
 800abda:	4630      	mov	r0, r6
 800abdc:	f000 fb16 	bl	800b20c <__swsetup_r>
 800abe0:	b1c0      	cbz	r0, 800ac14 <_vfiprintf_r+0x78>
 800abe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe4:	07dc      	lsls	r4, r3, #31
 800abe6:	d50e      	bpl.n	800ac06 <_vfiprintf_r+0x6a>
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295
 800abec:	b01d      	add	sp, #116	; 0x74
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	4b7b      	ldr	r3, [pc, #492]	; (800ade0 <_vfiprintf_r+0x244>)
 800abf4:	429d      	cmp	r5, r3
 800abf6:	d101      	bne.n	800abfc <_vfiprintf_r+0x60>
 800abf8:	68b5      	ldr	r5, [r6, #8]
 800abfa:	e7df      	b.n	800abbc <_vfiprintf_r+0x20>
 800abfc:	4b79      	ldr	r3, [pc, #484]	; (800ade4 <_vfiprintf_r+0x248>)
 800abfe:	429d      	cmp	r5, r3
 800ac00:	bf08      	it	eq
 800ac02:	68f5      	ldreq	r5, [r6, #12]
 800ac04:	e7da      	b.n	800abbc <_vfiprintf_r+0x20>
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	0598      	lsls	r0, r3, #22
 800ac0a:	d4ed      	bmi.n	800abe8 <_vfiprintf_r+0x4c>
 800ac0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac0e:	f000 fd28 	bl	800b662 <__retarget_lock_release_recursive>
 800ac12:	e7e9      	b.n	800abe8 <_vfiprintf_r+0x4c>
 800ac14:	2300      	movs	r3, #0
 800ac16:	9309      	str	r3, [sp, #36]	; 0x24
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac1e:	2330      	movs	r3, #48	; 0x30
 800ac20:	f04f 0901 	mov.w	r9, #1
 800ac24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ade8 <_vfiprintf_r+0x24c>
 800ac2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac30:	4623      	mov	r3, r4
 800ac32:	469a      	mov	sl, r3
 800ac34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac38:	b10a      	cbz	r2, 800ac3e <_vfiprintf_r+0xa2>
 800ac3a:	2a25      	cmp	r2, #37	; 0x25
 800ac3c:	d1f9      	bne.n	800ac32 <_vfiprintf_r+0x96>
 800ac3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac42:	d00b      	beq.n	800ac5c <_vfiprintf_r+0xc0>
 800ac44:	465b      	mov	r3, fp
 800ac46:	4622      	mov	r2, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ff93 	bl	800ab76 <__sfputs_r>
 800ac50:	3001      	adds	r0, #1
 800ac52:	f000 80aa 	beq.w	800adaa <_vfiprintf_r+0x20e>
 800ac56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac58:	445a      	add	r2, fp
 800ac5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80a2 	beq.w	800adaa <_vfiprintf_r+0x20e>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac70:	f10a 0a01 	add.w	sl, sl, #1
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac7e:	4654      	mov	r4, sl
 800ac80:	2205      	movs	r2, #5
 800ac82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac86:	4858      	ldr	r0, [pc, #352]	; (800ade8 <_vfiprintf_r+0x24c>)
 800ac88:	f000 fd52 	bl	800b730 <memchr>
 800ac8c:	9a04      	ldr	r2, [sp, #16]
 800ac8e:	b9d8      	cbnz	r0, 800acc8 <_vfiprintf_r+0x12c>
 800ac90:	06d1      	lsls	r1, r2, #27
 800ac92:	bf44      	itt	mi
 800ac94:	2320      	movmi	r3, #32
 800ac96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac9a:	0713      	lsls	r3, r2, #28
 800ac9c:	bf44      	itt	mi
 800ac9e:	232b      	movmi	r3, #43	; 0x2b
 800aca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca4:	f89a 3000 	ldrb.w	r3, [sl]
 800aca8:	2b2a      	cmp	r3, #42	; 0x2a
 800acaa:	d015      	beq.n	800acd8 <_vfiprintf_r+0x13c>
 800acac:	4654      	mov	r4, sl
 800acae:	2000      	movs	r0, #0
 800acb0:	f04f 0c0a 	mov.w	ip, #10
 800acb4:	9a07      	ldr	r2, [sp, #28]
 800acb6:	4621      	mov	r1, r4
 800acb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acbc:	3b30      	subs	r3, #48	; 0x30
 800acbe:	2b09      	cmp	r3, #9
 800acc0:	d94e      	bls.n	800ad60 <_vfiprintf_r+0x1c4>
 800acc2:	b1b0      	cbz	r0, 800acf2 <_vfiprintf_r+0x156>
 800acc4:	9207      	str	r2, [sp, #28]
 800acc6:	e014      	b.n	800acf2 <_vfiprintf_r+0x156>
 800acc8:	eba0 0308 	sub.w	r3, r0, r8
 800accc:	fa09 f303 	lsl.w	r3, r9, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	46a2      	mov	sl, r4
 800acd4:	9304      	str	r3, [sp, #16]
 800acd6:	e7d2      	b.n	800ac7e <_vfiprintf_r+0xe2>
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	1d19      	adds	r1, r3, #4
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	9103      	str	r1, [sp, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbb      	ittet	lt
 800ace4:	425b      	neglt	r3, r3
 800ace6:	f042 0202 	orrlt.w	r2, r2, #2
 800acea:	9307      	strge	r3, [sp, #28]
 800acec:	9307      	strlt	r3, [sp, #28]
 800acee:	bfb8      	it	lt
 800acf0:	9204      	strlt	r2, [sp, #16]
 800acf2:	7823      	ldrb	r3, [r4, #0]
 800acf4:	2b2e      	cmp	r3, #46	; 0x2e
 800acf6:	d10c      	bne.n	800ad12 <_vfiprintf_r+0x176>
 800acf8:	7863      	ldrb	r3, [r4, #1]
 800acfa:	2b2a      	cmp	r3, #42	; 0x2a
 800acfc:	d135      	bne.n	800ad6a <_vfiprintf_r+0x1ce>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	3402      	adds	r4, #2
 800ad02:	1d1a      	adds	r2, r3, #4
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	9203      	str	r2, [sp, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bfb8      	it	lt
 800ad0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad10:	9305      	str	r3, [sp, #20]
 800ad12:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800adec <_vfiprintf_r+0x250>
 800ad16:	2203      	movs	r2, #3
 800ad18:	4650      	mov	r0, sl
 800ad1a:	7821      	ldrb	r1, [r4, #0]
 800ad1c:	f000 fd08 	bl	800b730 <memchr>
 800ad20:	b140      	cbz	r0, 800ad34 <_vfiprintf_r+0x198>
 800ad22:	2340      	movs	r3, #64	; 0x40
 800ad24:	eba0 000a 	sub.w	r0, r0, sl
 800ad28:	fa03 f000 	lsl.w	r0, r3, r0
 800ad2c:	9b04      	ldr	r3, [sp, #16]
 800ad2e:	3401      	adds	r4, #1
 800ad30:	4303      	orrs	r3, r0
 800ad32:	9304      	str	r3, [sp, #16]
 800ad34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad38:	2206      	movs	r2, #6
 800ad3a:	482d      	ldr	r0, [pc, #180]	; (800adf0 <_vfiprintf_r+0x254>)
 800ad3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad40:	f000 fcf6 	bl	800b730 <memchr>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d03f      	beq.n	800adc8 <_vfiprintf_r+0x22c>
 800ad48:	4b2a      	ldr	r3, [pc, #168]	; (800adf4 <_vfiprintf_r+0x258>)
 800ad4a:	bb1b      	cbnz	r3, 800ad94 <_vfiprintf_r+0x1f8>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	3307      	adds	r3, #7
 800ad50:	f023 0307 	bic.w	r3, r3, #7
 800ad54:	3308      	adds	r3, #8
 800ad56:	9303      	str	r3, [sp, #12]
 800ad58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5a:	443b      	add	r3, r7
 800ad5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5e:	e767      	b.n	800ac30 <_vfiprintf_r+0x94>
 800ad60:	460c      	mov	r4, r1
 800ad62:	2001      	movs	r0, #1
 800ad64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad68:	e7a5      	b.n	800acb6 <_vfiprintf_r+0x11a>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f04f 0c0a 	mov.w	ip, #10
 800ad70:	4619      	mov	r1, r3
 800ad72:	3401      	adds	r4, #1
 800ad74:	9305      	str	r3, [sp, #20]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad7c:	3a30      	subs	r2, #48	; 0x30
 800ad7e:	2a09      	cmp	r2, #9
 800ad80:	d903      	bls.n	800ad8a <_vfiprintf_r+0x1ee>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0c5      	beq.n	800ad12 <_vfiprintf_r+0x176>
 800ad86:	9105      	str	r1, [sp, #20]
 800ad88:	e7c3      	b.n	800ad12 <_vfiprintf_r+0x176>
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad92:	e7f0      	b.n	800ad76 <_vfiprintf_r+0x1da>
 800ad94:	ab03      	add	r3, sp, #12
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	462a      	mov	r2, r5
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <_vfiprintf_r+0x25c>)
 800ad9e:	a904      	add	r1, sp, #16
 800ada0:	f3af 8000 	nop.w
 800ada4:	4607      	mov	r7, r0
 800ada6:	1c78      	adds	r0, r7, #1
 800ada8:	d1d6      	bne.n	800ad58 <_vfiprintf_r+0x1bc>
 800adaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adac:	07d9      	lsls	r1, r3, #31
 800adae:	d405      	bmi.n	800adbc <_vfiprintf_r+0x220>
 800adb0:	89ab      	ldrh	r3, [r5, #12]
 800adb2:	059a      	lsls	r2, r3, #22
 800adb4:	d402      	bmi.n	800adbc <_vfiprintf_r+0x220>
 800adb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adb8:	f000 fc53 	bl	800b662 <__retarget_lock_release_recursive>
 800adbc:	89ab      	ldrh	r3, [r5, #12]
 800adbe:	065b      	lsls	r3, r3, #25
 800adc0:	f53f af12 	bmi.w	800abe8 <_vfiprintf_r+0x4c>
 800adc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc6:	e711      	b.n	800abec <_vfiprintf_r+0x50>
 800adc8:	ab03      	add	r3, sp, #12
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	462a      	mov	r2, r5
 800adce:	4630      	mov	r0, r6
 800add0:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <_vfiprintf_r+0x25c>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	f000 f882 	bl	800aedc <_printf_i>
 800add8:	e7e4      	b.n	800ada4 <_vfiprintf_r+0x208>
 800adda:	bf00      	nop
 800addc:	0800d990 	.word	0x0800d990
 800ade0:	0800d9b0 	.word	0x0800d9b0
 800ade4:	0800d970 	.word	0x0800d970
 800ade8:	0800d93c 	.word	0x0800d93c
 800adec:	0800d942 	.word	0x0800d942
 800adf0:	0800d946 	.word	0x0800d946
 800adf4:	00000000 	.word	0x00000000
 800adf8:	0800ab77 	.word	0x0800ab77

0800adfc <_printf_common>:
 800adfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	4616      	mov	r6, r2
 800ae02:	4699      	mov	r9, r3
 800ae04:	688a      	ldr	r2, [r1, #8]
 800ae06:	690b      	ldr	r3, [r1, #16]
 800ae08:	4607      	mov	r7, r0
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	bfb8      	it	lt
 800ae0e:	4613      	movlt	r3, r2
 800ae10:	6033      	str	r3, [r6, #0]
 800ae12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae16:	460c      	mov	r4, r1
 800ae18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae1c:	b10a      	cbz	r2, 800ae22 <_printf_common+0x26>
 800ae1e:	3301      	adds	r3, #1
 800ae20:	6033      	str	r3, [r6, #0]
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	0699      	lsls	r1, r3, #26
 800ae26:	bf42      	ittt	mi
 800ae28:	6833      	ldrmi	r3, [r6, #0]
 800ae2a:	3302      	addmi	r3, #2
 800ae2c:	6033      	strmi	r3, [r6, #0]
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	f015 0506 	ands.w	r5, r5, #6
 800ae34:	d106      	bne.n	800ae44 <_printf_common+0x48>
 800ae36:	f104 0a19 	add.w	sl, r4, #25
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	6832      	ldr	r2, [r6, #0]
 800ae3e:	1a9b      	subs	r3, r3, r2
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dc28      	bgt.n	800ae96 <_printf_common+0x9a>
 800ae44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae48:	1e13      	subs	r3, r2, #0
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	2301      	movne	r3, #1
 800ae50:	0692      	lsls	r2, r2, #26
 800ae52:	d42d      	bmi.n	800aeb0 <_printf_common+0xb4>
 800ae54:	4649      	mov	r1, r9
 800ae56:	4638      	mov	r0, r7
 800ae58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae5c:	47c0      	blx	r8
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d020      	beq.n	800aea4 <_printf_common+0xa8>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	68e5      	ldr	r5, [r4, #12]
 800ae66:	f003 0306 	and.w	r3, r3, #6
 800ae6a:	2b04      	cmp	r3, #4
 800ae6c:	bf18      	it	ne
 800ae6e:	2500      	movne	r5, #0
 800ae70:	6832      	ldr	r2, [r6, #0]
 800ae72:	f04f 0600 	mov.w	r6, #0
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	bf08      	it	eq
 800ae7a:	1aad      	subeq	r5, r5, r2
 800ae7c:	6922      	ldr	r2, [r4, #16]
 800ae7e:	bf08      	it	eq
 800ae80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae84:	4293      	cmp	r3, r2
 800ae86:	bfc4      	itt	gt
 800ae88:	1a9b      	subgt	r3, r3, r2
 800ae8a:	18ed      	addgt	r5, r5, r3
 800ae8c:	341a      	adds	r4, #26
 800ae8e:	42b5      	cmp	r5, r6
 800ae90:	d11a      	bne.n	800aec8 <_printf_common+0xcc>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e008      	b.n	800aea8 <_printf_common+0xac>
 800ae96:	2301      	movs	r3, #1
 800ae98:	4652      	mov	r2, sl
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	47c0      	blx	r8
 800aea0:	3001      	adds	r0, #1
 800aea2:	d103      	bne.n	800aeac <_printf_common+0xb0>
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295
 800aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeac:	3501      	adds	r5, #1
 800aeae:	e7c4      	b.n	800ae3a <_printf_common+0x3e>
 800aeb0:	2030      	movs	r0, #48	; 0x30
 800aeb2:	18e1      	adds	r1, r4, r3
 800aeb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aebe:	4422      	add	r2, r4
 800aec0:	3302      	adds	r3, #2
 800aec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aec6:	e7c5      	b.n	800ae54 <_printf_common+0x58>
 800aec8:	2301      	movs	r3, #1
 800aeca:	4622      	mov	r2, r4
 800aecc:	4649      	mov	r1, r9
 800aece:	4638      	mov	r0, r7
 800aed0:	47c0      	blx	r8
 800aed2:	3001      	adds	r0, #1
 800aed4:	d0e6      	beq.n	800aea4 <_printf_common+0xa8>
 800aed6:	3601      	adds	r6, #1
 800aed8:	e7d9      	b.n	800ae8e <_printf_common+0x92>
	...

0800aedc <_printf_i>:
 800aedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	7e0f      	ldrb	r7, [r1, #24]
 800aee2:	4691      	mov	r9, r2
 800aee4:	2f78      	cmp	r7, #120	; 0x78
 800aee6:	4680      	mov	r8, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	469a      	mov	sl, r3
 800aeec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aeee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aef2:	d807      	bhi.n	800af04 <_printf_i+0x28>
 800aef4:	2f62      	cmp	r7, #98	; 0x62
 800aef6:	d80a      	bhi.n	800af0e <_printf_i+0x32>
 800aef8:	2f00      	cmp	r7, #0
 800aefa:	f000 80d9 	beq.w	800b0b0 <_printf_i+0x1d4>
 800aefe:	2f58      	cmp	r7, #88	; 0x58
 800af00:	f000 80a4 	beq.w	800b04c <_printf_i+0x170>
 800af04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af0c:	e03a      	b.n	800af84 <_printf_i+0xa8>
 800af0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af12:	2b15      	cmp	r3, #21
 800af14:	d8f6      	bhi.n	800af04 <_printf_i+0x28>
 800af16:	a101      	add	r1, pc, #4	; (adr r1, 800af1c <_printf_i+0x40>)
 800af18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af1c:	0800af75 	.word	0x0800af75
 800af20:	0800af89 	.word	0x0800af89
 800af24:	0800af05 	.word	0x0800af05
 800af28:	0800af05 	.word	0x0800af05
 800af2c:	0800af05 	.word	0x0800af05
 800af30:	0800af05 	.word	0x0800af05
 800af34:	0800af89 	.word	0x0800af89
 800af38:	0800af05 	.word	0x0800af05
 800af3c:	0800af05 	.word	0x0800af05
 800af40:	0800af05 	.word	0x0800af05
 800af44:	0800af05 	.word	0x0800af05
 800af48:	0800b097 	.word	0x0800b097
 800af4c:	0800afb9 	.word	0x0800afb9
 800af50:	0800b079 	.word	0x0800b079
 800af54:	0800af05 	.word	0x0800af05
 800af58:	0800af05 	.word	0x0800af05
 800af5c:	0800b0b9 	.word	0x0800b0b9
 800af60:	0800af05 	.word	0x0800af05
 800af64:	0800afb9 	.word	0x0800afb9
 800af68:	0800af05 	.word	0x0800af05
 800af6c:	0800af05 	.word	0x0800af05
 800af70:	0800b081 	.word	0x0800b081
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	602a      	str	r2, [r5, #0]
 800af7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af84:	2301      	movs	r3, #1
 800af86:	e0a4      	b.n	800b0d2 <_printf_i+0x1f6>
 800af88:	6820      	ldr	r0, [r4, #0]
 800af8a:	6829      	ldr	r1, [r5, #0]
 800af8c:	0606      	lsls	r6, r0, #24
 800af8e:	f101 0304 	add.w	r3, r1, #4
 800af92:	d50a      	bpl.n	800afaa <_printf_i+0xce>
 800af94:	680e      	ldr	r6, [r1, #0]
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	2e00      	cmp	r6, #0
 800af9a:	da03      	bge.n	800afa4 <_printf_i+0xc8>
 800af9c:	232d      	movs	r3, #45	; 0x2d
 800af9e:	4276      	negs	r6, r6
 800afa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afa4:	230a      	movs	r3, #10
 800afa6:	485e      	ldr	r0, [pc, #376]	; (800b120 <_printf_i+0x244>)
 800afa8:	e019      	b.n	800afde <_printf_i+0x102>
 800afaa:	680e      	ldr	r6, [r1, #0]
 800afac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	bf18      	it	ne
 800afb4:	b236      	sxthne	r6, r6
 800afb6:	e7ef      	b.n	800af98 <_printf_i+0xbc>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	6820      	ldr	r0, [r4, #0]
 800afbc:	1d19      	adds	r1, r3, #4
 800afbe:	6029      	str	r1, [r5, #0]
 800afc0:	0601      	lsls	r1, r0, #24
 800afc2:	d501      	bpl.n	800afc8 <_printf_i+0xec>
 800afc4:	681e      	ldr	r6, [r3, #0]
 800afc6:	e002      	b.n	800afce <_printf_i+0xf2>
 800afc8:	0646      	lsls	r6, r0, #25
 800afca:	d5fb      	bpl.n	800afc4 <_printf_i+0xe8>
 800afcc:	881e      	ldrh	r6, [r3, #0]
 800afce:	2f6f      	cmp	r7, #111	; 0x6f
 800afd0:	bf0c      	ite	eq
 800afd2:	2308      	moveq	r3, #8
 800afd4:	230a      	movne	r3, #10
 800afd6:	4852      	ldr	r0, [pc, #328]	; (800b120 <_printf_i+0x244>)
 800afd8:	2100      	movs	r1, #0
 800afda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afde:	6865      	ldr	r5, [r4, #4]
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	bfa8      	it	ge
 800afe4:	6821      	ldrge	r1, [r4, #0]
 800afe6:	60a5      	str	r5, [r4, #8]
 800afe8:	bfa4      	itt	ge
 800afea:	f021 0104 	bicge.w	r1, r1, #4
 800afee:	6021      	strge	r1, [r4, #0]
 800aff0:	b90e      	cbnz	r6, 800aff6 <_printf_i+0x11a>
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	d04d      	beq.n	800b092 <_printf_i+0x1b6>
 800aff6:	4615      	mov	r5, r2
 800aff8:	fbb6 f1f3 	udiv	r1, r6, r3
 800affc:	fb03 6711 	mls	r7, r3, r1, r6
 800b000:	5dc7      	ldrb	r7, [r0, r7]
 800b002:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b006:	4637      	mov	r7, r6
 800b008:	42bb      	cmp	r3, r7
 800b00a:	460e      	mov	r6, r1
 800b00c:	d9f4      	bls.n	800aff8 <_printf_i+0x11c>
 800b00e:	2b08      	cmp	r3, #8
 800b010:	d10b      	bne.n	800b02a <_printf_i+0x14e>
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	07de      	lsls	r6, r3, #31
 800b016:	d508      	bpl.n	800b02a <_printf_i+0x14e>
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	6861      	ldr	r1, [r4, #4]
 800b01c:	4299      	cmp	r1, r3
 800b01e:	bfde      	ittt	le
 800b020:	2330      	movle	r3, #48	; 0x30
 800b022:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b026:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b02a:	1b52      	subs	r2, r2, r5
 800b02c:	6122      	str	r2, [r4, #16]
 800b02e:	464b      	mov	r3, r9
 800b030:	4621      	mov	r1, r4
 800b032:	4640      	mov	r0, r8
 800b034:	f8cd a000 	str.w	sl, [sp]
 800b038:	aa03      	add	r2, sp, #12
 800b03a:	f7ff fedf 	bl	800adfc <_printf_common>
 800b03e:	3001      	adds	r0, #1
 800b040:	d14c      	bne.n	800b0dc <_printf_i+0x200>
 800b042:	f04f 30ff 	mov.w	r0, #4294967295
 800b046:	b004      	add	sp, #16
 800b048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04c:	4834      	ldr	r0, [pc, #208]	; (800b120 <_printf_i+0x244>)
 800b04e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b052:	6829      	ldr	r1, [r5, #0]
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	f851 6b04 	ldr.w	r6, [r1], #4
 800b05a:	6029      	str	r1, [r5, #0]
 800b05c:	061d      	lsls	r5, r3, #24
 800b05e:	d514      	bpl.n	800b08a <_printf_i+0x1ae>
 800b060:	07df      	lsls	r7, r3, #31
 800b062:	bf44      	itt	mi
 800b064:	f043 0320 	orrmi.w	r3, r3, #32
 800b068:	6023      	strmi	r3, [r4, #0]
 800b06a:	b91e      	cbnz	r6, 800b074 <_printf_i+0x198>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	f023 0320 	bic.w	r3, r3, #32
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	2310      	movs	r3, #16
 800b076:	e7af      	b.n	800afd8 <_printf_i+0xfc>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	f043 0320 	orr.w	r3, r3, #32
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	2378      	movs	r3, #120	; 0x78
 800b082:	4828      	ldr	r0, [pc, #160]	; (800b124 <_printf_i+0x248>)
 800b084:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b088:	e7e3      	b.n	800b052 <_printf_i+0x176>
 800b08a:	0659      	lsls	r1, r3, #25
 800b08c:	bf48      	it	mi
 800b08e:	b2b6      	uxthmi	r6, r6
 800b090:	e7e6      	b.n	800b060 <_printf_i+0x184>
 800b092:	4615      	mov	r5, r2
 800b094:	e7bb      	b.n	800b00e <_printf_i+0x132>
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	6826      	ldr	r6, [r4, #0]
 800b09a:	1d18      	adds	r0, r3, #4
 800b09c:	6961      	ldr	r1, [r4, #20]
 800b09e:	6028      	str	r0, [r5, #0]
 800b0a0:	0635      	lsls	r5, r6, #24
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	d501      	bpl.n	800b0aa <_printf_i+0x1ce>
 800b0a6:	6019      	str	r1, [r3, #0]
 800b0a8:	e002      	b.n	800b0b0 <_printf_i+0x1d4>
 800b0aa:	0670      	lsls	r0, r6, #25
 800b0ac:	d5fb      	bpl.n	800b0a6 <_printf_i+0x1ca>
 800b0ae:	8019      	strh	r1, [r3, #0]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4615      	mov	r5, r2
 800b0b4:	6123      	str	r3, [r4, #16]
 800b0b6:	e7ba      	b.n	800b02e <_printf_i+0x152>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	1d1a      	adds	r2, r3, #4
 800b0be:	602a      	str	r2, [r5, #0]
 800b0c0:	681d      	ldr	r5, [r3, #0]
 800b0c2:	6862      	ldr	r2, [r4, #4]
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f000 fb33 	bl	800b730 <memchr>
 800b0ca:	b108      	cbz	r0, 800b0d0 <_printf_i+0x1f4>
 800b0cc:	1b40      	subs	r0, r0, r5
 800b0ce:	6060      	str	r0, [r4, #4]
 800b0d0:	6863      	ldr	r3, [r4, #4]
 800b0d2:	6123      	str	r3, [r4, #16]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0da:	e7a8      	b.n	800b02e <_printf_i+0x152>
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4649      	mov	r1, r9
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	47d0      	blx	sl
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	d0ab      	beq.n	800b042 <_printf_i+0x166>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	079b      	lsls	r3, r3, #30
 800b0ee:	d413      	bmi.n	800b118 <_printf_i+0x23c>
 800b0f0:	68e0      	ldr	r0, [r4, #12]
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	4298      	cmp	r0, r3
 800b0f6:	bfb8      	it	lt
 800b0f8:	4618      	movlt	r0, r3
 800b0fa:	e7a4      	b.n	800b046 <_printf_i+0x16a>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	4632      	mov	r2, r6
 800b100:	4649      	mov	r1, r9
 800b102:	4640      	mov	r0, r8
 800b104:	47d0      	blx	sl
 800b106:	3001      	adds	r0, #1
 800b108:	d09b      	beq.n	800b042 <_printf_i+0x166>
 800b10a:	3501      	adds	r5, #1
 800b10c:	68e3      	ldr	r3, [r4, #12]
 800b10e:	9903      	ldr	r1, [sp, #12]
 800b110:	1a5b      	subs	r3, r3, r1
 800b112:	42ab      	cmp	r3, r5
 800b114:	dcf2      	bgt.n	800b0fc <_printf_i+0x220>
 800b116:	e7eb      	b.n	800b0f0 <_printf_i+0x214>
 800b118:	2500      	movs	r5, #0
 800b11a:	f104 0619 	add.w	r6, r4, #25
 800b11e:	e7f5      	b.n	800b10c <_printf_i+0x230>
 800b120:	0800d94d 	.word	0x0800d94d
 800b124:	0800d95e 	.word	0x0800d95e

0800b128 <siprintf>:
 800b128:	b40e      	push	{r1, r2, r3}
 800b12a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b12e:	b500      	push	{lr}
 800b130:	b09c      	sub	sp, #112	; 0x70
 800b132:	ab1d      	add	r3, sp, #116	; 0x74
 800b134:	9002      	str	r0, [sp, #8]
 800b136:	9006      	str	r0, [sp, #24]
 800b138:	9107      	str	r1, [sp, #28]
 800b13a:	9104      	str	r1, [sp, #16]
 800b13c:	4808      	ldr	r0, [pc, #32]	; (800b160 <siprintf+0x38>)
 800b13e:	4909      	ldr	r1, [pc, #36]	; (800b164 <siprintf+0x3c>)
 800b140:	f853 2b04 	ldr.w	r2, [r3], #4
 800b144:	9105      	str	r1, [sp, #20]
 800b146:	6800      	ldr	r0, [r0, #0]
 800b148:	a902      	add	r1, sp, #8
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	f000 fc7e 	bl	800ba4c <_svfiprintf_r>
 800b150:	2200      	movs	r2, #0
 800b152:	9b02      	ldr	r3, [sp, #8]
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	b01c      	add	sp, #112	; 0x70
 800b158:	f85d eb04 	ldr.w	lr, [sp], #4
 800b15c:	b003      	add	sp, #12
 800b15e:	4770      	bx	lr
 800b160:	20000024 	.word	0x20000024
 800b164:	ffff0208 	.word	0xffff0208

0800b168 <__swbuf_r>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	460e      	mov	r6, r1
 800b16c:	4614      	mov	r4, r2
 800b16e:	4605      	mov	r5, r0
 800b170:	b118      	cbz	r0, 800b17a <__swbuf_r+0x12>
 800b172:	6983      	ldr	r3, [r0, #24]
 800b174:	b90b      	cbnz	r3, 800b17a <__swbuf_r+0x12>
 800b176:	f000 f9d5 	bl	800b524 <__sinit>
 800b17a:	4b21      	ldr	r3, [pc, #132]	; (800b200 <__swbuf_r+0x98>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d12b      	bne.n	800b1d8 <__swbuf_r+0x70>
 800b180:	686c      	ldr	r4, [r5, #4]
 800b182:	69a3      	ldr	r3, [r4, #24]
 800b184:	60a3      	str	r3, [r4, #8]
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	071a      	lsls	r2, r3, #28
 800b18a:	d52f      	bpl.n	800b1ec <__swbuf_r+0x84>
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	b36b      	cbz	r3, 800b1ec <__swbuf_r+0x84>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	6820      	ldr	r0, [r4, #0]
 800b194:	b2f6      	uxtb	r6, r6
 800b196:	1ac0      	subs	r0, r0, r3
 800b198:	6963      	ldr	r3, [r4, #20]
 800b19a:	4637      	mov	r7, r6
 800b19c:	4283      	cmp	r3, r0
 800b19e:	dc04      	bgt.n	800b1aa <__swbuf_r+0x42>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 f92a 	bl	800b3fc <_fflush_r>
 800b1a8:	bb30      	cbnz	r0, 800b1f8 <__swbuf_r+0x90>
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	701e      	strb	r6, [r3, #0]
 800b1ba:	6963      	ldr	r3, [r4, #20]
 800b1bc:	4283      	cmp	r3, r0
 800b1be:	d004      	beq.n	800b1ca <__swbuf_r+0x62>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d506      	bpl.n	800b1d4 <__swbuf_r+0x6c>
 800b1c6:	2e0a      	cmp	r6, #10
 800b1c8:	d104      	bne.n	800b1d4 <__swbuf_r+0x6c>
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f000 f915 	bl	800b3fc <_fflush_r>
 800b1d2:	b988      	cbnz	r0, 800b1f8 <__swbuf_r+0x90>
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <__swbuf_r+0x9c>)
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	d101      	bne.n	800b1e2 <__swbuf_r+0x7a>
 800b1de:	68ac      	ldr	r4, [r5, #8]
 800b1e0:	e7cf      	b.n	800b182 <__swbuf_r+0x1a>
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <__swbuf_r+0xa0>)
 800b1e4:	429c      	cmp	r4, r3
 800b1e6:	bf08      	it	eq
 800b1e8:	68ec      	ldreq	r4, [r5, #12]
 800b1ea:	e7ca      	b.n	800b182 <__swbuf_r+0x1a>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f80c 	bl	800b20c <__swsetup_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d0cb      	beq.n	800b190 <__swbuf_r+0x28>
 800b1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800b1fc:	e7ea      	b.n	800b1d4 <__swbuf_r+0x6c>
 800b1fe:	bf00      	nop
 800b200:	0800d990 	.word	0x0800d990
 800b204:	0800d9b0 	.word	0x0800d9b0
 800b208:	0800d970 	.word	0x0800d970

0800b20c <__swsetup_r>:
 800b20c:	4b32      	ldr	r3, [pc, #200]	; (800b2d8 <__swsetup_r+0xcc>)
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	681d      	ldr	r5, [r3, #0]
 800b212:	4606      	mov	r6, r0
 800b214:	460c      	mov	r4, r1
 800b216:	b125      	cbz	r5, 800b222 <__swsetup_r+0x16>
 800b218:	69ab      	ldr	r3, [r5, #24]
 800b21a:	b913      	cbnz	r3, 800b222 <__swsetup_r+0x16>
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 f981 	bl	800b524 <__sinit>
 800b222:	4b2e      	ldr	r3, [pc, #184]	; (800b2dc <__swsetup_r+0xd0>)
 800b224:	429c      	cmp	r4, r3
 800b226:	d10f      	bne.n	800b248 <__swsetup_r+0x3c>
 800b228:	686c      	ldr	r4, [r5, #4]
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b230:	0719      	lsls	r1, r3, #28
 800b232:	d42c      	bmi.n	800b28e <__swsetup_r+0x82>
 800b234:	06dd      	lsls	r5, r3, #27
 800b236:	d411      	bmi.n	800b25c <__swsetup_r+0x50>
 800b238:	2309      	movs	r3, #9
 800b23a:	6033      	str	r3, [r6, #0]
 800b23c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	81a3      	strh	r3, [r4, #12]
 800b246:	e03e      	b.n	800b2c6 <__swsetup_r+0xba>
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <__swsetup_r+0xd4>)
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d101      	bne.n	800b252 <__swsetup_r+0x46>
 800b24e:	68ac      	ldr	r4, [r5, #8]
 800b250:	e7eb      	b.n	800b22a <__swsetup_r+0x1e>
 800b252:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <__swsetup_r+0xd8>)
 800b254:	429c      	cmp	r4, r3
 800b256:	bf08      	it	eq
 800b258:	68ec      	ldreq	r4, [r5, #12]
 800b25a:	e7e6      	b.n	800b22a <__swsetup_r+0x1e>
 800b25c:	0758      	lsls	r0, r3, #29
 800b25e:	d512      	bpl.n	800b286 <__swsetup_r+0x7a>
 800b260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b262:	b141      	cbz	r1, 800b276 <__swsetup_r+0x6a>
 800b264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b268:	4299      	cmp	r1, r3
 800b26a:	d002      	beq.n	800b272 <__swsetup_r+0x66>
 800b26c:	4630      	mov	r0, r6
 800b26e:	f000 fa87 	bl	800b780 <_free_r>
 800b272:	2300      	movs	r3, #0
 800b274:	6363      	str	r3, [r4, #52]	; 0x34
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b27c:	81a3      	strh	r3, [r4, #12]
 800b27e:	2300      	movs	r3, #0
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f043 0308 	orr.w	r3, r3, #8
 800b28c:	81a3      	strh	r3, [r4, #12]
 800b28e:	6923      	ldr	r3, [r4, #16]
 800b290:	b94b      	cbnz	r3, 800b2a6 <__swsetup_r+0x9a>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b29c:	d003      	beq.n	800b2a6 <__swsetup_r+0x9a>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 fa05 	bl	800b6b0 <__smakebuf_r>
 800b2a6:	89a0      	ldrh	r0, [r4, #12]
 800b2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ac:	f010 0301 	ands.w	r3, r0, #1
 800b2b0:	d00a      	beq.n	800b2c8 <__swsetup_r+0xbc>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60a3      	str	r3, [r4, #8]
 800b2b6:	6963      	ldr	r3, [r4, #20]
 800b2b8:	425b      	negs	r3, r3
 800b2ba:	61a3      	str	r3, [r4, #24]
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	b943      	cbnz	r3, 800b2d2 <__swsetup_r+0xc6>
 800b2c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2c4:	d1ba      	bne.n	800b23c <__swsetup_r+0x30>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	0781      	lsls	r1, r0, #30
 800b2ca:	bf58      	it	pl
 800b2cc:	6963      	ldrpl	r3, [r4, #20]
 800b2ce:	60a3      	str	r3, [r4, #8]
 800b2d0:	e7f4      	b.n	800b2bc <__swsetup_r+0xb0>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e7f7      	b.n	800b2c6 <__swsetup_r+0xba>
 800b2d6:	bf00      	nop
 800b2d8:	20000024 	.word	0x20000024
 800b2dc:	0800d990 	.word	0x0800d990
 800b2e0:	0800d9b0 	.word	0x0800d9b0
 800b2e4:	0800d970 	.word	0x0800d970

0800b2e8 <abort>:
 800b2e8:	2006      	movs	r0, #6
 800b2ea:	b508      	push	{r3, lr}
 800b2ec:	f000 fce6 	bl	800bcbc <raise>
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f7fb f990 	bl	8006616 <_exit>
	...

0800b2f8 <__sflush_r>:
 800b2f8:	898a      	ldrh	r2, [r1, #12]
 800b2fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	0710      	lsls	r0, r2, #28
 800b300:	460c      	mov	r4, r1
 800b302:	d457      	bmi.n	800b3b4 <__sflush_r+0xbc>
 800b304:	684b      	ldr	r3, [r1, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	dc04      	bgt.n	800b314 <__sflush_r+0x1c>
 800b30a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dc01      	bgt.n	800b314 <__sflush_r+0x1c>
 800b310:	2000      	movs	r0, #0
 800b312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b316:	2e00      	cmp	r6, #0
 800b318:	d0fa      	beq.n	800b310 <__sflush_r+0x18>
 800b31a:	2300      	movs	r3, #0
 800b31c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b320:	682f      	ldr	r7, [r5, #0]
 800b322:	602b      	str	r3, [r5, #0]
 800b324:	d032      	beq.n	800b38c <__sflush_r+0x94>
 800b326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	075a      	lsls	r2, r3, #29
 800b32c:	d505      	bpl.n	800b33a <__sflush_r+0x42>
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	1ac0      	subs	r0, r0, r3
 800b332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b334:	b10b      	cbz	r3, 800b33a <__sflush_r+0x42>
 800b336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b338:	1ac0      	subs	r0, r0, r3
 800b33a:	2300      	movs	r3, #0
 800b33c:	4602      	mov	r2, r0
 800b33e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b340:	4628      	mov	r0, r5
 800b342:	6a21      	ldr	r1, [r4, #32]
 800b344:	47b0      	blx	r6
 800b346:	1c43      	adds	r3, r0, #1
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	d106      	bne.n	800b35a <__sflush_r+0x62>
 800b34c:	6829      	ldr	r1, [r5, #0]
 800b34e:	291d      	cmp	r1, #29
 800b350:	d82c      	bhi.n	800b3ac <__sflush_r+0xb4>
 800b352:	4a29      	ldr	r2, [pc, #164]	; (800b3f8 <__sflush_r+0x100>)
 800b354:	40ca      	lsrs	r2, r1
 800b356:	07d6      	lsls	r6, r2, #31
 800b358:	d528      	bpl.n	800b3ac <__sflush_r+0xb4>
 800b35a:	2200      	movs	r2, #0
 800b35c:	6062      	str	r2, [r4, #4]
 800b35e:	6922      	ldr	r2, [r4, #16]
 800b360:	04d9      	lsls	r1, r3, #19
 800b362:	6022      	str	r2, [r4, #0]
 800b364:	d504      	bpl.n	800b370 <__sflush_r+0x78>
 800b366:	1c42      	adds	r2, r0, #1
 800b368:	d101      	bne.n	800b36e <__sflush_r+0x76>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	b903      	cbnz	r3, 800b370 <__sflush_r+0x78>
 800b36e:	6560      	str	r0, [r4, #84]	; 0x54
 800b370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b372:	602f      	str	r7, [r5, #0]
 800b374:	2900      	cmp	r1, #0
 800b376:	d0cb      	beq.n	800b310 <__sflush_r+0x18>
 800b378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b37c:	4299      	cmp	r1, r3
 800b37e:	d002      	beq.n	800b386 <__sflush_r+0x8e>
 800b380:	4628      	mov	r0, r5
 800b382:	f000 f9fd 	bl	800b780 <_free_r>
 800b386:	2000      	movs	r0, #0
 800b388:	6360      	str	r0, [r4, #52]	; 0x34
 800b38a:	e7c2      	b.n	800b312 <__sflush_r+0x1a>
 800b38c:	6a21      	ldr	r1, [r4, #32]
 800b38e:	2301      	movs	r3, #1
 800b390:	4628      	mov	r0, r5
 800b392:	47b0      	blx	r6
 800b394:	1c41      	adds	r1, r0, #1
 800b396:	d1c7      	bne.n	800b328 <__sflush_r+0x30>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d0c4      	beq.n	800b328 <__sflush_r+0x30>
 800b39e:	2b1d      	cmp	r3, #29
 800b3a0:	d001      	beq.n	800b3a6 <__sflush_r+0xae>
 800b3a2:	2b16      	cmp	r3, #22
 800b3a4:	d101      	bne.n	800b3aa <__sflush_r+0xb2>
 800b3a6:	602f      	str	r7, [r5, #0]
 800b3a8:	e7b2      	b.n	800b310 <__sflush_r+0x18>
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	e7ae      	b.n	800b312 <__sflush_r+0x1a>
 800b3b4:	690f      	ldr	r7, [r1, #16]
 800b3b6:	2f00      	cmp	r7, #0
 800b3b8:	d0aa      	beq.n	800b310 <__sflush_r+0x18>
 800b3ba:	0793      	lsls	r3, r2, #30
 800b3bc:	bf18      	it	ne
 800b3be:	2300      	movne	r3, #0
 800b3c0:	680e      	ldr	r6, [r1, #0]
 800b3c2:	bf08      	it	eq
 800b3c4:	694b      	ldreq	r3, [r1, #20]
 800b3c6:	1bf6      	subs	r6, r6, r7
 800b3c8:	600f      	str	r7, [r1, #0]
 800b3ca:	608b      	str	r3, [r1, #8]
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	dd9f      	ble.n	800b310 <__sflush_r+0x18>
 800b3d0:	4633      	mov	r3, r6
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	6a21      	ldr	r1, [r4, #32]
 800b3d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b3dc:	47e0      	blx	ip
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	dc06      	bgt.n	800b3f0 <__sflush_r+0xf8>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	e790      	b.n	800b312 <__sflush_r+0x1a>
 800b3f0:	4407      	add	r7, r0
 800b3f2:	1a36      	subs	r6, r6, r0
 800b3f4:	e7ea      	b.n	800b3cc <__sflush_r+0xd4>
 800b3f6:	bf00      	nop
 800b3f8:	20400001 	.word	0x20400001

0800b3fc <_fflush_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	4605      	mov	r5, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b913      	cbnz	r3, 800b40c <_fflush_r+0x10>
 800b406:	2500      	movs	r5, #0
 800b408:	4628      	mov	r0, r5
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	b118      	cbz	r0, 800b416 <_fflush_r+0x1a>
 800b40e:	6983      	ldr	r3, [r0, #24]
 800b410:	b90b      	cbnz	r3, 800b416 <_fflush_r+0x1a>
 800b412:	f000 f887 	bl	800b524 <__sinit>
 800b416:	4b14      	ldr	r3, [pc, #80]	; (800b468 <_fflush_r+0x6c>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	d11b      	bne.n	800b454 <_fflush_r+0x58>
 800b41c:	686c      	ldr	r4, [r5, #4]
 800b41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0ef      	beq.n	800b406 <_fflush_r+0xa>
 800b426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b428:	07d0      	lsls	r0, r2, #31
 800b42a:	d404      	bmi.n	800b436 <_fflush_r+0x3a>
 800b42c:	0599      	lsls	r1, r3, #22
 800b42e:	d402      	bmi.n	800b436 <_fflush_r+0x3a>
 800b430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b432:	f000 f915 	bl	800b660 <__retarget_lock_acquire_recursive>
 800b436:	4628      	mov	r0, r5
 800b438:	4621      	mov	r1, r4
 800b43a:	f7ff ff5d 	bl	800b2f8 <__sflush_r>
 800b43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b440:	4605      	mov	r5, r0
 800b442:	07da      	lsls	r2, r3, #31
 800b444:	d4e0      	bmi.n	800b408 <_fflush_r+0xc>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	059b      	lsls	r3, r3, #22
 800b44a:	d4dd      	bmi.n	800b408 <_fflush_r+0xc>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f000 f908 	bl	800b662 <__retarget_lock_release_recursive>
 800b452:	e7d9      	b.n	800b408 <_fflush_r+0xc>
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <_fflush_r+0x70>)
 800b456:	429c      	cmp	r4, r3
 800b458:	d101      	bne.n	800b45e <_fflush_r+0x62>
 800b45a:	68ac      	ldr	r4, [r5, #8]
 800b45c:	e7df      	b.n	800b41e <_fflush_r+0x22>
 800b45e:	4b04      	ldr	r3, [pc, #16]	; (800b470 <_fflush_r+0x74>)
 800b460:	429c      	cmp	r4, r3
 800b462:	bf08      	it	eq
 800b464:	68ec      	ldreq	r4, [r5, #12]
 800b466:	e7da      	b.n	800b41e <_fflush_r+0x22>
 800b468:	0800d990 	.word	0x0800d990
 800b46c:	0800d9b0 	.word	0x0800d9b0
 800b470:	0800d970 	.word	0x0800d970

0800b474 <std>:
 800b474:	2300      	movs	r3, #0
 800b476:	b510      	push	{r4, lr}
 800b478:	4604      	mov	r4, r0
 800b47a:	e9c0 3300 	strd	r3, r3, [r0]
 800b47e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b482:	6083      	str	r3, [r0, #8]
 800b484:	8181      	strh	r1, [r0, #12]
 800b486:	6643      	str	r3, [r0, #100]	; 0x64
 800b488:	81c2      	strh	r2, [r0, #14]
 800b48a:	6183      	str	r3, [r0, #24]
 800b48c:	4619      	mov	r1, r3
 800b48e:	2208      	movs	r2, #8
 800b490:	305c      	adds	r0, #92	; 0x5c
 800b492:	f7ff fb53 	bl	800ab3c <memset>
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <std+0x38>)
 800b498:	6224      	str	r4, [r4, #32]
 800b49a:	6263      	str	r3, [r4, #36]	; 0x24
 800b49c:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <std+0x3c>)
 800b49e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4a0:	4b04      	ldr	r3, [pc, #16]	; (800b4b4 <std+0x40>)
 800b4a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4a4:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <std+0x44>)
 800b4a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4a8:	bd10      	pop	{r4, pc}
 800b4aa:	bf00      	nop
 800b4ac:	0800bcf5 	.word	0x0800bcf5
 800b4b0:	0800bd17 	.word	0x0800bd17
 800b4b4:	0800bd4f 	.word	0x0800bd4f
 800b4b8:	0800bd73 	.word	0x0800bd73

0800b4bc <_cleanup_r>:
 800b4bc:	4901      	ldr	r1, [pc, #4]	; (800b4c4 <_cleanup_r+0x8>)
 800b4be:	f000 b8af 	b.w	800b620 <_fwalk_reent>
 800b4c2:	bf00      	nop
 800b4c4:	0800b3fd 	.word	0x0800b3fd

0800b4c8 <__sfmoreglue>:
 800b4c8:	2268      	movs	r2, #104	; 0x68
 800b4ca:	b570      	push	{r4, r5, r6, lr}
 800b4cc:	1e4d      	subs	r5, r1, #1
 800b4ce:	4355      	muls	r5, r2
 800b4d0:	460e      	mov	r6, r1
 800b4d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4d6:	f000 f9bb 	bl	800b850 <_malloc_r>
 800b4da:	4604      	mov	r4, r0
 800b4dc:	b140      	cbz	r0, 800b4f0 <__sfmoreglue+0x28>
 800b4de:	2100      	movs	r1, #0
 800b4e0:	e9c0 1600 	strd	r1, r6, [r0]
 800b4e4:	300c      	adds	r0, #12
 800b4e6:	60a0      	str	r0, [r4, #8]
 800b4e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4ec:	f7ff fb26 	bl	800ab3c <memset>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}

0800b4f4 <__sfp_lock_acquire>:
 800b4f4:	4801      	ldr	r0, [pc, #4]	; (800b4fc <__sfp_lock_acquire+0x8>)
 800b4f6:	f000 b8b3 	b.w	800b660 <__retarget_lock_acquire_recursive>
 800b4fa:	bf00      	nop
 800b4fc:	20007fdd 	.word	0x20007fdd

0800b500 <__sfp_lock_release>:
 800b500:	4801      	ldr	r0, [pc, #4]	; (800b508 <__sfp_lock_release+0x8>)
 800b502:	f000 b8ae 	b.w	800b662 <__retarget_lock_release_recursive>
 800b506:	bf00      	nop
 800b508:	20007fdd 	.word	0x20007fdd

0800b50c <__sinit_lock_acquire>:
 800b50c:	4801      	ldr	r0, [pc, #4]	; (800b514 <__sinit_lock_acquire+0x8>)
 800b50e:	f000 b8a7 	b.w	800b660 <__retarget_lock_acquire_recursive>
 800b512:	bf00      	nop
 800b514:	20007fde 	.word	0x20007fde

0800b518 <__sinit_lock_release>:
 800b518:	4801      	ldr	r0, [pc, #4]	; (800b520 <__sinit_lock_release+0x8>)
 800b51a:	f000 b8a2 	b.w	800b662 <__retarget_lock_release_recursive>
 800b51e:	bf00      	nop
 800b520:	20007fde 	.word	0x20007fde

0800b524 <__sinit>:
 800b524:	b510      	push	{r4, lr}
 800b526:	4604      	mov	r4, r0
 800b528:	f7ff fff0 	bl	800b50c <__sinit_lock_acquire>
 800b52c:	69a3      	ldr	r3, [r4, #24]
 800b52e:	b11b      	cbz	r3, 800b538 <__sinit+0x14>
 800b530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b534:	f7ff bff0 	b.w	800b518 <__sinit_lock_release>
 800b538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b53c:	6523      	str	r3, [r4, #80]	; 0x50
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <__sinit+0x68>)
 800b540:	4a13      	ldr	r2, [pc, #76]	; (800b590 <__sinit+0x6c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	62a2      	str	r2, [r4, #40]	; 0x28
 800b546:	42a3      	cmp	r3, r4
 800b548:	bf08      	it	eq
 800b54a:	2301      	moveq	r3, #1
 800b54c:	4620      	mov	r0, r4
 800b54e:	bf08      	it	eq
 800b550:	61a3      	streq	r3, [r4, #24]
 800b552:	f000 f81f 	bl	800b594 <__sfp>
 800b556:	6060      	str	r0, [r4, #4]
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 f81b 	bl	800b594 <__sfp>
 800b55e:	60a0      	str	r0, [r4, #8]
 800b560:	4620      	mov	r0, r4
 800b562:	f000 f817 	bl	800b594 <__sfp>
 800b566:	2200      	movs	r2, #0
 800b568:	2104      	movs	r1, #4
 800b56a:	60e0      	str	r0, [r4, #12]
 800b56c:	6860      	ldr	r0, [r4, #4]
 800b56e:	f7ff ff81 	bl	800b474 <std>
 800b572:	2201      	movs	r2, #1
 800b574:	2109      	movs	r1, #9
 800b576:	68a0      	ldr	r0, [r4, #8]
 800b578:	f7ff ff7c 	bl	800b474 <std>
 800b57c:	2202      	movs	r2, #2
 800b57e:	2112      	movs	r1, #18
 800b580:	68e0      	ldr	r0, [r4, #12]
 800b582:	f7ff ff77 	bl	800b474 <std>
 800b586:	2301      	movs	r3, #1
 800b588:	61a3      	str	r3, [r4, #24]
 800b58a:	e7d1      	b.n	800b530 <__sinit+0xc>
 800b58c:	0800d938 	.word	0x0800d938
 800b590:	0800b4bd 	.word	0x0800b4bd

0800b594 <__sfp>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	4607      	mov	r7, r0
 800b598:	f7ff ffac 	bl	800b4f4 <__sfp_lock_acquire>
 800b59c:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <__sfp+0x84>)
 800b59e:	681e      	ldr	r6, [r3, #0]
 800b5a0:	69b3      	ldr	r3, [r6, #24]
 800b5a2:	b913      	cbnz	r3, 800b5aa <__sfp+0x16>
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7ff ffbd 	bl	800b524 <__sinit>
 800b5aa:	3648      	adds	r6, #72	; 0x48
 800b5ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	d503      	bpl.n	800b5bc <__sfp+0x28>
 800b5b4:	6833      	ldr	r3, [r6, #0]
 800b5b6:	b30b      	cbz	r3, 800b5fc <__sfp+0x68>
 800b5b8:	6836      	ldr	r6, [r6, #0]
 800b5ba:	e7f7      	b.n	800b5ac <__sfp+0x18>
 800b5bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5c0:	b9d5      	cbnz	r5, 800b5f8 <__sfp+0x64>
 800b5c2:	4b16      	ldr	r3, [pc, #88]	; (800b61c <__sfp+0x88>)
 800b5c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5c8:	60e3      	str	r3, [r4, #12]
 800b5ca:	6665      	str	r5, [r4, #100]	; 0x64
 800b5cc:	f000 f847 	bl	800b65e <__retarget_lock_init_recursive>
 800b5d0:	f7ff ff96 	bl	800b500 <__sfp_lock_release>
 800b5d4:	2208      	movs	r2, #8
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5e0:	6025      	str	r5, [r4, #0]
 800b5e2:	61a5      	str	r5, [r4, #24]
 800b5e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5e8:	f7ff faa8 	bl	800ab3c <memset>
 800b5ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f8:	3468      	adds	r4, #104	; 0x68
 800b5fa:	e7d9      	b.n	800b5b0 <__sfp+0x1c>
 800b5fc:	2104      	movs	r1, #4
 800b5fe:	4638      	mov	r0, r7
 800b600:	f7ff ff62 	bl	800b4c8 <__sfmoreglue>
 800b604:	4604      	mov	r4, r0
 800b606:	6030      	str	r0, [r6, #0]
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1d5      	bne.n	800b5b8 <__sfp+0x24>
 800b60c:	f7ff ff78 	bl	800b500 <__sfp_lock_release>
 800b610:	230c      	movs	r3, #12
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	e7ee      	b.n	800b5f4 <__sfp+0x60>
 800b616:	bf00      	nop
 800b618:	0800d938 	.word	0x0800d938
 800b61c:	ffff0001 	.word	0xffff0001

0800b620 <_fwalk_reent>:
 800b620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b624:	4606      	mov	r6, r0
 800b626:	4688      	mov	r8, r1
 800b628:	2700      	movs	r7, #0
 800b62a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b62e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b632:	f1b9 0901 	subs.w	r9, r9, #1
 800b636:	d505      	bpl.n	800b644 <_fwalk_reent+0x24>
 800b638:	6824      	ldr	r4, [r4, #0]
 800b63a:	2c00      	cmp	r4, #0
 800b63c:	d1f7      	bne.n	800b62e <_fwalk_reent+0xe>
 800b63e:	4638      	mov	r0, r7
 800b640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b644:	89ab      	ldrh	r3, [r5, #12]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d907      	bls.n	800b65a <_fwalk_reent+0x3a>
 800b64a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b64e:	3301      	adds	r3, #1
 800b650:	d003      	beq.n	800b65a <_fwalk_reent+0x3a>
 800b652:	4629      	mov	r1, r5
 800b654:	4630      	mov	r0, r6
 800b656:	47c0      	blx	r8
 800b658:	4307      	orrs	r7, r0
 800b65a:	3568      	adds	r5, #104	; 0x68
 800b65c:	e7e9      	b.n	800b632 <_fwalk_reent+0x12>

0800b65e <__retarget_lock_init_recursive>:
 800b65e:	4770      	bx	lr

0800b660 <__retarget_lock_acquire_recursive>:
 800b660:	4770      	bx	lr

0800b662 <__retarget_lock_release_recursive>:
 800b662:	4770      	bx	lr

0800b664 <__swhatbuf_r>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	460e      	mov	r6, r1
 800b668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66c:	4614      	mov	r4, r2
 800b66e:	2900      	cmp	r1, #0
 800b670:	461d      	mov	r5, r3
 800b672:	b096      	sub	sp, #88	; 0x58
 800b674:	da08      	bge.n	800b688 <__swhatbuf_r+0x24>
 800b676:	2200      	movs	r2, #0
 800b678:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	061a      	lsls	r2, r3, #24
 800b680:	d410      	bmi.n	800b6a4 <__swhatbuf_r+0x40>
 800b682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b686:	e00e      	b.n	800b6a6 <__swhatbuf_r+0x42>
 800b688:	466a      	mov	r2, sp
 800b68a:	f000 fb99 	bl	800bdc0 <_fstat_r>
 800b68e:	2800      	cmp	r0, #0
 800b690:	dbf1      	blt.n	800b676 <__swhatbuf_r+0x12>
 800b692:	9a01      	ldr	r2, [sp, #4]
 800b694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b69c:	425a      	negs	r2, r3
 800b69e:	415a      	adcs	r2, r3
 800b6a0:	602a      	str	r2, [r5, #0]
 800b6a2:	e7ee      	b.n	800b682 <__swhatbuf_r+0x1e>
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	b016      	add	sp, #88	; 0x58
 800b6ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6b0 <__smakebuf_r>:
 800b6b0:	898b      	ldrh	r3, [r1, #12]
 800b6b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6b4:	079d      	lsls	r5, r3, #30
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	d507      	bpl.n	800b6cc <__smakebuf_r+0x1c>
 800b6bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	6163      	str	r3, [r4, #20]
 800b6c8:	b002      	add	sp, #8
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	466a      	mov	r2, sp
 800b6ce:	ab01      	add	r3, sp, #4
 800b6d0:	f7ff ffc8 	bl	800b664 <__swhatbuf_r>
 800b6d4:	9900      	ldr	r1, [sp, #0]
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f000 f8b9 	bl	800b850 <_malloc_r>
 800b6de:	b948      	cbnz	r0, 800b6f4 <__smakebuf_r+0x44>
 800b6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e4:	059a      	lsls	r2, r3, #22
 800b6e6:	d4ef      	bmi.n	800b6c8 <__smakebuf_r+0x18>
 800b6e8:	f023 0303 	bic.w	r3, r3, #3
 800b6ec:	f043 0302 	orr.w	r3, r3, #2
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	e7e3      	b.n	800b6bc <__smakebuf_r+0xc>
 800b6f4:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <__smakebuf_r+0x7c>)
 800b6f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	6020      	str	r0, [r4, #0]
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	9b00      	ldr	r3, [sp, #0]
 800b704:	6120      	str	r0, [r4, #16]
 800b706:	6163      	str	r3, [r4, #20]
 800b708:	9b01      	ldr	r3, [sp, #4]
 800b70a:	b15b      	cbz	r3, 800b724 <__smakebuf_r+0x74>
 800b70c:	4630      	mov	r0, r6
 800b70e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b712:	f000 fb67 	bl	800bde4 <_isatty_r>
 800b716:	b128      	cbz	r0, 800b724 <__smakebuf_r+0x74>
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	f043 0301 	orr.w	r3, r3, #1
 800b722:	81a3      	strh	r3, [r4, #12]
 800b724:	89a0      	ldrh	r0, [r4, #12]
 800b726:	4305      	orrs	r5, r0
 800b728:	81a5      	strh	r5, [r4, #12]
 800b72a:	e7cd      	b.n	800b6c8 <__smakebuf_r+0x18>
 800b72c:	0800b4bd 	.word	0x0800b4bd

0800b730 <memchr>:
 800b730:	4603      	mov	r3, r0
 800b732:	b510      	push	{r4, lr}
 800b734:	b2c9      	uxtb	r1, r1
 800b736:	4402      	add	r2, r0
 800b738:	4293      	cmp	r3, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	d101      	bne.n	800b742 <memchr+0x12>
 800b73e:	2000      	movs	r0, #0
 800b740:	e003      	b.n	800b74a <memchr+0x1a>
 800b742:	7804      	ldrb	r4, [r0, #0]
 800b744:	3301      	adds	r3, #1
 800b746:	428c      	cmp	r4, r1
 800b748:	d1f6      	bne.n	800b738 <memchr+0x8>
 800b74a:	bd10      	pop	{r4, pc}

0800b74c <memmove>:
 800b74c:	4288      	cmp	r0, r1
 800b74e:	b510      	push	{r4, lr}
 800b750:	eb01 0402 	add.w	r4, r1, r2
 800b754:	d902      	bls.n	800b75c <memmove+0x10>
 800b756:	4284      	cmp	r4, r0
 800b758:	4623      	mov	r3, r4
 800b75a:	d807      	bhi.n	800b76c <memmove+0x20>
 800b75c:	1e43      	subs	r3, r0, #1
 800b75e:	42a1      	cmp	r1, r4
 800b760:	d008      	beq.n	800b774 <memmove+0x28>
 800b762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b76a:	e7f8      	b.n	800b75e <memmove+0x12>
 800b76c:	4601      	mov	r1, r0
 800b76e:	4402      	add	r2, r0
 800b770:	428a      	cmp	r2, r1
 800b772:	d100      	bne.n	800b776 <memmove+0x2a>
 800b774:	bd10      	pop	{r4, pc}
 800b776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b77e:	e7f7      	b.n	800b770 <memmove+0x24>

0800b780 <_free_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4605      	mov	r5, r0
 800b784:	2900      	cmp	r1, #0
 800b786:	d040      	beq.n	800b80a <_free_r+0x8a>
 800b788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78c:	1f0c      	subs	r4, r1, #4
 800b78e:	2b00      	cmp	r3, #0
 800b790:	bfb8      	it	lt
 800b792:	18e4      	addlt	r4, r4, r3
 800b794:	f000 fb48 	bl	800be28 <__malloc_lock>
 800b798:	4a1c      	ldr	r2, [pc, #112]	; (800b80c <_free_r+0x8c>)
 800b79a:	6813      	ldr	r3, [r2, #0]
 800b79c:	b933      	cbnz	r3, 800b7ac <_free_r+0x2c>
 800b79e:	6063      	str	r3, [r4, #4]
 800b7a0:	6014      	str	r4, [r2, #0]
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7a8:	f000 bb44 	b.w	800be34 <__malloc_unlock>
 800b7ac:	42a3      	cmp	r3, r4
 800b7ae:	d908      	bls.n	800b7c2 <_free_r+0x42>
 800b7b0:	6820      	ldr	r0, [r4, #0]
 800b7b2:	1821      	adds	r1, r4, r0
 800b7b4:	428b      	cmp	r3, r1
 800b7b6:	bf01      	itttt	eq
 800b7b8:	6819      	ldreq	r1, [r3, #0]
 800b7ba:	685b      	ldreq	r3, [r3, #4]
 800b7bc:	1809      	addeq	r1, r1, r0
 800b7be:	6021      	streq	r1, [r4, #0]
 800b7c0:	e7ed      	b.n	800b79e <_free_r+0x1e>
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	b10b      	cbz	r3, 800b7cc <_free_r+0x4c>
 800b7c8:	42a3      	cmp	r3, r4
 800b7ca:	d9fa      	bls.n	800b7c2 <_free_r+0x42>
 800b7cc:	6811      	ldr	r1, [r2, #0]
 800b7ce:	1850      	adds	r0, r2, r1
 800b7d0:	42a0      	cmp	r0, r4
 800b7d2:	d10b      	bne.n	800b7ec <_free_r+0x6c>
 800b7d4:	6820      	ldr	r0, [r4, #0]
 800b7d6:	4401      	add	r1, r0
 800b7d8:	1850      	adds	r0, r2, r1
 800b7da:	4283      	cmp	r3, r0
 800b7dc:	6011      	str	r1, [r2, #0]
 800b7de:	d1e0      	bne.n	800b7a2 <_free_r+0x22>
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	4401      	add	r1, r0
 800b7e6:	6011      	str	r1, [r2, #0]
 800b7e8:	6053      	str	r3, [r2, #4]
 800b7ea:	e7da      	b.n	800b7a2 <_free_r+0x22>
 800b7ec:	d902      	bls.n	800b7f4 <_free_r+0x74>
 800b7ee:	230c      	movs	r3, #12
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	e7d6      	b.n	800b7a2 <_free_r+0x22>
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	1821      	adds	r1, r4, r0
 800b7f8:	428b      	cmp	r3, r1
 800b7fa:	bf01      	itttt	eq
 800b7fc:	6819      	ldreq	r1, [r3, #0]
 800b7fe:	685b      	ldreq	r3, [r3, #4]
 800b800:	1809      	addeq	r1, r1, r0
 800b802:	6021      	streq	r1, [r4, #0]
 800b804:	6063      	str	r3, [r4, #4]
 800b806:	6054      	str	r4, [r2, #4]
 800b808:	e7cb      	b.n	800b7a2 <_free_r+0x22>
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20007fe0 	.word	0x20007fe0

0800b810 <sbrk_aligned>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	4e0e      	ldr	r6, [pc, #56]	; (800b84c <sbrk_aligned+0x3c>)
 800b814:	460c      	mov	r4, r1
 800b816:	6831      	ldr	r1, [r6, #0]
 800b818:	4605      	mov	r5, r0
 800b81a:	b911      	cbnz	r1, 800b822 <sbrk_aligned+0x12>
 800b81c:	f000 fa16 	bl	800bc4c <_sbrk_r>
 800b820:	6030      	str	r0, [r6, #0]
 800b822:	4621      	mov	r1, r4
 800b824:	4628      	mov	r0, r5
 800b826:	f000 fa11 	bl	800bc4c <_sbrk_r>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d00a      	beq.n	800b844 <sbrk_aligned+0x34>
 800b82e:	1cc4      	adds	r4, r0, #3
 800b830:	f024 0403 	bic.w	r4, r4, #3
 800b834:	42a0      	cmp	r0, r4
 800b836:	d007      	beq.n	800b848 <sbrk_aligned+0x38>
 800b838:	1a21      	subs	r1, r4, r0
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 fa06 	bl	800bc4c <_sbrk_r>
 800b840:	3001      	adds	r0, #1
 800b842:	d101      	bne.n	800b848 <sbrk_aligned+0x38>
 800b844:	f04f 34ff 	mov.w	r4, #4294967295
 800b848:	4620      	mov	r0, r4
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	20007fe4 	.word	0x20007fe4

0800b850 <_malloc_r>:
 800b850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b854:	1ccd      	adds	r5, r1, #3
 800b856:	f025 0503 	bic.w	r5, r5, #3
 800b85a:	3508      	adds	r5, #8
 800b85c:	2d0c      	cmp	r5, #12
 800b85e:	bf38      	it	cc
 800b860:	250c      	movcc	r5, #12
 800b862:	2d00      	cmp	r5, #0
 800b864:	4607      	mov	r7, r0
 800b866:	db01      	blt.n	800b86c <_malloc_r+0x1c>
 800b868:	42a9      	cmp	r1, r5
 800b86a:	d905      	bls.n	800b878 <_malloc_r+0x28>
 800b86c:	230c      	movs	r3, #12
 800b86e:	2600      	movs	r6, #0
 800b870:	603b      	str	r3, [r7, #0]
 800b872:	4630      	mov	r0, r6
 800b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b878:	4e2e      	ldr	r6, [pc, #184]	; (800b934 <_malloc_r+0xe4>)
 800b87a:	f000 fad5 	bl	800be28 <__malloc_lock>
 800b87e:	6833      	ldr	r3, [r6, #0]
 800b880:	461c      	mov	r4, r3
 800b882:	bb34      	cbnz	r4, 800b8d2 <_malloc_r+0x82>
 800b884:	4629      	mov	r1, r5
 800b886:	4638      	mov	r0, r7
 800b888:	f7ff ffc2 	bl	800b810 <sbrk_aligned>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	4604      	mov	r4, r0
 800b890:	d14d      	bne.n	800b92e <_malloc_r+0xde>
 800b892:	6834      	ldr	r4, [r6, #0]
 800b894:	4626      	mov	r6, r4
 800b896:	2e00      	cmp	r6, #0
 800b898:	d140      	bne.n	800b91c <_malloc_r+0xcc>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	4631      	mov	r1, r6
 800b89e:	4638      	mov	r0, r7
 800b8a0:	eb04 0803 	add.w	r8, r4, r3
 800b8a4:	f000 f9d2 	bl	800bc4c <_sbrk_r>
 800b8a8:	4580      	cmp	r8, r0
 800b8aa:	d13a      	bne.n	800b922 <_malloc_r+0xd2>
 800b8ac:	6821      	ldr	r1, [r4, #0]
 800b8ae:	3503      	adds	r5, #3
 800b8b0:	1a6d      	subs	r5, r5, r1
 800b8b2:	f025 0503 	bic.w	r5, r5, #3
 800b8b6:	3508      	adds	r5, #8
 800b8b8:	2d0c      	cmp	r5, #12
 800b8ba:	bf38      	it	cc
 800b8bc:	250c      	movcc	r5, #12
 800b8be:	4638      	mov	r0, r7
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	f7ff ffa5 	bl	800b810 <sbrk_aligned>
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	d02b      	beq.n	800b922 <_malloc_r+0xd2>
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	442b      	add	r3, r5
 800b8ce:	6023      	str	r3, [r4, #0]
 800b8d0:	e00e      	b.n	800b8f0 <_malloc_r+0xa0>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	1b52      	subs	r2, r2, r5
 800b8d6:	d41e      	bmi.n	800b916 <_malloc_r+0xc6>
 800b8d8:	2a0b      	cmp	r2, #11
 800b8da:	d916      	bls.n	800b90a <_malloc_r+0xba>
 800b8dc:	1961      	adds	r1, r4, r5
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	6025      	str	r5, [r4, #0]
 800b8e2:	bf18      	it	ne
 800b8e4:	6059      	strne	r1, [r3, #4]
 800b8e6:	6863      	ldr	r3, [r4, #4]
 800b8e8:	bf08      	it	eq
 800b8ea:	6031      	streq	r1, [r6, #0]
 800b8ec:	5162      	str	r2, [r4, r5]
 800b8ee:	604b      	str	r3, [r1, #4]
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	f104 060b 	add.w	r6, r4, #11
 800b8f6:	f000 fa9d 	bl	800be34 <__malloc_unlock>
 800b8fa:	f026 0607 	bic.w	r6, r6, #7
 800b8fe:	1d23      	adds	r3, r4, #4
 800b900:	1af2      	subs	r2, r6, r3
 800b902:	d0b6      	beq.n	800b872 <_malloc_r+0x22>
 800b904:	1b9b      	subs	r3, r3, r6
 800b906:	50a3      	str	r3, [r4, r2]
 800b908:	e7b3      	b.n	800b872 <_malloc_r+0x22>
 800b90a:	6862      	ldr	r2, [r4, #4]
 800b90c:	42a3      	cmp	r3, r4
 800b90e:	bf0c      	ite	eq
 800b910:	6032      	streq	r2, [r6, #0]
 800b912:	605a      	strne	r2, [r3, #4]
 800b914:	e7ec      	b.n	800b8f0 <_malloc_r+0xa0>
 800b916:	4623      	mov	r3, r4
 800b918:	6864      	ldr	r4, [r4, #4]
 800b91a:	e7b2      	b.n	800b882 <_malloc_r+0x32>
 800b91c:	4634      	mov	r4, r6
 800b91e:	6876      	ldr	r6, [r6, #4]
 800b920:	e7b9      	b.n	800b896 <_malloc_r+0x46>
 800b922:	230c      	movs	r3, #12
 800b924:	4638      	mov	r0, r7
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	f000 fa84 	bl	800be34 <__malloc_unlock>
 800b92c:	e7a1      	b.n	800b872 <_malloc_r+0x22>
 800b92e:	6025      	str	r5, [r4, #0]
 800b930:	e7de      	b.n	800b8f0 <_malloc_r+0xa0>
 800b932:	bf00      	nop
 800b934:	20007fe0 	.word	0x20007fe0

0800b938 <_realloc_r>:
 800b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93c:	4680      	mov	r8, r0
 800b93e:	4614      	mov	r4, r2
 800b940:	460e      	mov	r6, r1
 800b942:	b921      	cbnz	r1, 800b94e <_realloc_r+0x16>
 800b944:	4611      	mov	r1, r2
 800b946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b94a:	f7ff bf81 	b.w	800b850 <_malloc_r>
 800b94e:	b92a      	cbnz	r2, 800b95c <_realloc_r+0x24>
 800b950:	f7ff ff16 	bl	800b780 <_free_r>
 800b954:	4625      	mov	r5, r4
 800b956:	4628      	mov	r0, r5
 800b958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95c:	f000 fa70 	bl	800be40 <_malloc_usable_size_r>
 800b960:	4284      	cmp	r4, r0
 800b962:	4607      	mov	r7, r0
 800b964:	d802      	bhi.n	800b96c <_realloc_r+0x34>
 800b966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b96a:	d812      	bhi.n	800b992 <_realloc_r+0x5a>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4640      	mov	r0, r8
 800b970:	f7ff ff6e 	bl	800b850 <_malloc_r>
 800b974:	4605      	mov	r5, r0
 800b976:	2800      	cmp	r0, #0
 800b978:	d0ed      	beq.n	800b956 <_realloc_r+0x1e>
 800b97a:	42bc      	cmp	r4, r7
 800b97c:	4622      	mov	r2, r4
 800b97e:	4631      	mov	r1, r6
 800b980:	bf28      	it	cs
 800b982:	463a      	movcs	r2, r7
 800b984:	f7ff f8cc 	bl	800ab20 <memcpy>
 800b988:	4631      	mov	r1, r6
 800b98a:	4640      	mov	r0, r8
 800b98c:	f7ff fef8 	bl	800b780 <_free_r>
 800b990:	e7e1      	b.n	800b956 <_realloc_r+0x1e>
 800b992:	4635      	mov	r5, r6
 800b994:	e7df      	b.n	800b956 <_realloc_r+0x1e>

0800b996 <__ssputs_r>:
 800b996:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b99a:	688e      	ldr	r6, [r1, #8]
 800b99c:	4682      	mov	sl, r0
 800b99e:	429e      	cmp	r6, r3
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	4690      	mov	r8, r2
 800b9a4:	461f      	mov	r7, r3
 800b9a6:	d838      	bhi.n	800ba1a <__ssputs_r+0x84>
 800b9a8:	898a      	ldrh	r2, [r1, #12]
 800b9aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9ae:	d032      	beq.n	800ba16 <__ssputs_r+0x80>
 800b9b0:	6825      	ldr	r5, [r4, #0]
 800b9b2:	6909      	ldr	r1, [r1, #16]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	eba5 0901 	sub.w	r9, r5, r1
 800b9ba:	6965      	ldr	r5, [r4, #20]
 800b9bc:	444b      	add	r3, r9
 800b9be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9c6:	106d      	asrs	r5, r5, #1
 800b9c8:	429d      	cmp	r5, r3
 800b9ca:	bf38      	it	cc
 800b9cc:	461d      	movcc	r5, r3
 800b9ce:	0553      	lsls	r3, r2, #21
 800b9d0:	d531      	bpl.n	800ba36 <__ssputs_r+0xa0>
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	f7ff ff3c 	bl	800b850 <_malloc_r>
 800b9d8:	4606      	mov	r6, r0
 800b9da:	b950      	cbnz	r0, 800b9f2 <__ssputs_r+0x5c>
 800b9dc:	230c      	movs	r3, #12
 800b9de:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e2:	f8ca 3000 	str.w	r3, [sl]
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f2:	464a      	mov	r2, r9
 800b9f4:	6921      	ldr	r1, [r4, #16]
 800b9f6:	f7ff f893 	bl	800ab20 <memcpy>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	6126      	str	r6, [r4, #16]
 800ba08:	444e      	add	r6, r9
 800ba0a:	6026      	str	r6, [r4, #0]
 800ba0c:	463e      	mov	r6, r7
 800ba0e:	6165      	str	r5, [r4, #20]
 800ba10:	eba5 0509 	sub.w	r5, r5, r9
 800ba14:	60a5      	str	r5, [r4, #8]
 800ba16:	42be      	cmp	r6, r7
 800ba18:	d900      	bls.n	800ba1c <__ssputs_r+0x86>
 800ba1a:	463e      	mov	r6, r7
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	4641      	mov	r1, r8
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	f7ff fe93 	bl	800b74c <memmove>
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	1b9b      	subs	r3, r3, r6
 800ba2c:	60a3      	str	r3, [r4, #8]
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	4433      	add	r3, r6
 800ba32:	6023      	str	r3, [r4, #0]
 800ba34:	e7db      	b.n	800b9ee <__ssputs_r+0x58>
 800ba36:	462a      	mov	r2, r5
 800ba38:	f7ff ff7e 	bl	800b938 <_realloc_r>
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d1e1      	bne.n	800ba06 <__ssputs_r+0x70>
 800ba42:	4650      	mov	r0, sl
 800ba44:	6921      	ldr	r1, [r4, #16]
 800ba46:	f7ff fe9b 	bl	800b780 <_free_r>
 800ba4a:	e7c7      	b.n	800b9dc <__ssputs_r+0x46>

0800ba4c <_svfiprintf_r>:
 800ba4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba50:	4698      	mov	r8, r3
 800ba52:	898b      	ldrh	r3, [r1, #12]
 800ba54:	4607      	mov	r7, r0
 800ba56:	061b      	lsls	r3, r3, #24
 800ba58:	460d      	mov	r5, r1
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	b09d      	sub	sp, #116	; 0x74
 800ba5e:	d50e      	bpl.n	800ba7e <_svfiprintf_r+0x32>
 800ba60:	690b      	ldr	r3, [r1, #16]
 800ba62:	b963      	cbnz	r3, 800ba7e <_svfiprintf_r+0x32>
 800ba64:	2140      	movs	r1, #64	; 0x40
 800ba66:	f7ff fef3 	bl	800b850 <_malloc_r>
 800ba6a:	6028      	str	r0, [r5, #0]
 800ba6c:	6128      	str	r0, [r5, #16]
 800ba6e:	b920      	cbnz	r0, 800ba7a <_svfiprintf_r+0x2e>
 800ba70:	230c      	movs	r3, #12
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	e0d1      	b.n	800bc1e <_svfiprintf_r+0x1d2>
 800ba7a:	2340      	movs	r3, #64	; 0x40
 800ba7c:	616b      	str	r3, [r5, #20]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9309      	str	r3, [sp, #36]	; 0x24
 800ba82:	2320      	movs	r3, #32
 800ba84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba88:	2330      	movs	r3, #48	; 0x30
 800ba8a:	f04f 0901 	mov.w	r9, #1
 800ba8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc38 <_svfiprintf_r+0x1ec>
 800ba96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba9a:	4623      	mov	r3, r4
 800ba9c:	469a      	mov	sl, r3
 800ba9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baa2:	b10a      	cbz	r2, 800baa8 <_svfiprintf_r+0x5c>
 800baa4:	2a25      	cmp	r2, #37	; 0x25
 800baa6:	d1f9      	bne.n	800ba9c <_svfiprintf_r+0x50>
 800baa8:	ebba 0b04 	subs.w	fp, sl, r4
 800baac:	d00b      	beq.n	800bac6 <_svfiprintf_r+0x7a>
 800baae:	465b      	mov	r3, fp
 800bab0:	4622      	mov	r2, r4
 800bab2:	4629      	mov	r1, r5
 800bab4:	4638      	mov	r0, r7
 800bab6:	f7ff ff6e 	bl	800b996 <__ssputs_r>
 800baba:	3001      	adds	r0, #1
 800babc:	f000 80aa 	beq.w	800bc14 <_svfiprintf_r+0x1c8>
 800bac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac2:	445a      	add	r2, fp
 800bac4:	9209      	str	r2, [sp, #36]	; 0x24
 800bac6:	f89a 3000 	ldrb.w	r3, [sl]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 80a2 	beq.w	800bc14 <_svfiprintf_r+0x1c8>
 800bad0:	2300      	movs	r3, #0
 800bad2:	f04f 32ff 	mov.w	r2, #4294967295
 800bad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bada:	f10a 0a01 	add.w	sl, sl, #1
 800bade:	9304      	str	r3, [sp, #16]
 800bae0:	9307      	str	r3, [sp, #28]
 800bae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bae6:	931a      	str	r3, [sp, #104]	; 0x68
 800bae8:	4654      	mov	r4, sl
 800baea:	2205      	movs	r2, #5
 800baec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf0:	4851      	ldr	r0, [pc, #324]	; (800bc38 <_svfiprintf_r+0x1ec>)
 800baf2:	f7ff fe1d 	bl	800b730 <memchr>
 800baf6:	9a04      	ldr	r2, [sp, #16]
 800baf8:	b9d8      	cbnz	r0, 800bb32 <_svfiprintf_r+0xe6>
 800bafa:	06d0      	lsls	r0, r2, #27
 800bafc:	bf44      	itt	mi
 800bafe:	2320      	movmi	r3, #32
 800bb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb04:	0711      	lsls	r1, r2, #28
 800bb06:	bf44      	itt	mi
 800bb08:	232b      	movmi	r3, #43	; 0x2b
 800bb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb12:	2b2a      	cmp	r3, #42	; 0x2a
 800bb14:	d015      	beq.n	800bb42 <_svfiprintf_r+0xf6>
 800bb16:	4654      	mov	r4, sl
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f04f 0c0a 	mov.w	ip, #10
 800bb1e:	9a07      	ldr	r2, [sp, #28]
 800bb20:	4621      	mov	r1, r4
 800bb22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb26:	3b30      	subs	r3, #48	; 0x30
 800bb28:	2b09      	cmp	r3, #9
 800bb2a:	d94e      	bls.n	800bbca <_svfiprintf_r+0x17e>
 800bb2c:	b1b0      	cbz	r0, 800bb5c <_svfiprintf_r+0x110>
 800bb2e:	9207      	str	r2, [sp, #28]
 800bb30:	e014      	b.n	800bb5c <_svfiprintf_r+0x110>
 800bb32:	eba0 0308 	sub.w	r3, r0, r8
 800bb36:	fa09 f303 	lsl.w	r3, r9, r3
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	46a2      	mov	sl, r4
 800bb3e:	9304      	str	r3, [sp, #16]
 800bb40:	e7d2      	b.n	800bae8 <_svfiprintf_r+0x9c>
 800bb42:	9b03      	ldr	r3, [sp, #12]
 800bb44:	1d19      	adds	r1, r3, #4
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	9103      	str	r1, [sp, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	bfbb      	ittet	lt
 800bb4e:	425b      	neglt	r3, r3
 800bb50:	f042 0202 	orrlt.w	r2, r2, #2
 800bb54:	9307      	strge	r3, [sp, #28]
 800bb56:	9307      	strlt	r3, [sp, #28]
 800bb58:	bfb8      	it	lt
 800bb5a:	9204      	strlt	r2, [sp, #16]
 800bb5c:	7823      	ldrb	r3, [r4, #0]
 800bb5e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb60:	d10c      	bne.n	800bb7c <_svfiprintf_r+0x130>
 800bb62:	7863      	ldrb	r3, [r4, #1]
 800bb64:	2b2a      	cmp	r3, #42	; 0x2a
 800bb66:	d135      	bne.n	800bbd4 <_svfiprintf_r+0x188>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	3402      	adds	r4, #2
 800bb6c:	1d1a      	adds	r2, r3, #4
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	9203      	str	r2, [sp, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	bfb8      	it	lt
 800bb76:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb7a:	9305      	str	r3, [sp, #20]
 800bb7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bc3c <_svfiprintf_r+0x1f0>
 800bb80:	2203      	movs	r2, #3
 800bb82:	4650      	mov	r0, sl
 800bb84:	7821      	ldrb	r1, [r4, #0]
 800bb86:	f7ff fdd3 	bl	800b730 <memchr>
 800bb8a:	b140      	cbz	r0, 800bb9e <_svfiprintf_r+0x152>
 800bb8c:	2340      	movs	r3, #64	; 0x40
 800bb8e:	eba0 000a 	sub.w	r0, r0, sl
 800bb92:	fa03 f000 	lsl.w	r0, r3, r0
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	3401      	adds	r4, #1
 800bb9a:	4303      	orrs	r3, r0
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba2:	2206      	movs	r2, #6
 800bba4:	4826      	ldr	r0, [pc, #152]	; (800bc40 <_svfiprintf_r+0x1f4>)
 800bba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbaa:	f7ff fdc1 	bl	800b730 <memchr>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d038      	beq.n	800bc24 <_svfiprintf_r+0x1d8>
 800bbb2:	4b24      	ldr	r3, [pc, #144]	; (800bc44 <_svfiprintf_r+0x1f8>)
 800bbb4:	bb1b      	cbnz	r3, 800bbfe <_svfiprintf_r+0x1b2>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	3307      	adds	r3, #7
 800bbba:	f023 0307 	bic.w	r3, r3, #7
 800bbbe:	3308      	adds	r3, #8
 800bbc0:	9303      	str	r3, [sp, #12]
 800bbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc4:	4433      	add	r3, r6
 800bbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc8:	e767      	b.n	800ba9a <_svfiprintf_r+0x4e>
 800bbca:	460c      	mov	r4, r1
 800bbcc:	2001      	movs	r0, #1
 800bbce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd2:	e7a5      	b.n	800bb20 <_svfiprintf_r+0xd4>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f04f 0c0a 	mov.w	ip, #10
 800bbda:	4619      	mov	r1, r3
 800bbdc:	3401      	adds	r4, #1
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbe6:	3a30      	subs	r2, #48	; 0x30
 800bbe8:	2a09      	cmp	r2, #9
 800bbea:	d903      	bls.n	800bbf4 <_svfiprintf_r+0x1a8>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0c5      	beq.n	800bb7c <_svfiprintf_r+0x130>
 800bbf0:	9105      	str	r1, [sp, #20]
 800bbf2:	e7c3      	b.n	800bb7c <_svfiprintf_r+0x130>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbfc:	e7f0      	b.n	800bbe0 <_svfiprintf_r+0x194>
 800bbfe:	ab03      	add	r3, sp, #12
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	462a      	mov	r2, r5
 800bc04:	4638      	mov	r0, r7
 800bc06:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <_svfiprintf_r+0x1fc>)
 800bc08:	a904      	add	r1, sp, #16
 800bc0a:	f3af 8000 	nop.w
 800bc0e:	1c42      	adds	r2, r0, #1
 800bc10:	4606      	mov	r6, r0
 800bc12:	d1d6      	bne.n	800bbc2 <_svfiprintf_r+0x176>
 800bc14:	89ab      	ldrh	r3, [r5, #12]
 800bc16:	065b      	lsls	r3, r3, #25
 800bc18:	f53f af2c 	bmi.w	800ba74 <_svfiprintf_r+0x28>
 800bc1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc1e:	b01d      	add	sp, #116	; 0x74
 800bc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc24:	ab03      	add	r3, sp, #12
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	462a      	mov	r2, r5
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <_svfiprintf_r+0x1fc>)
 800bc2e:	a904      	add	r1, sp, #16
 800bc30:	f7ff f954 	bl	800aedc <_printf_i>
 800bc34:	e7eb      	b.n	800bc0e <_svfiprintf_r+0x1c2>
 800bc36:	bf00      	nop
 800bc38:	0800d93c 	.word	0x0800d93c
 800bc3c:	0800d942 	.word	0x0800d942
 800bc40:	0800d946 	.word	0x0800d946
 800bc44:	00000000 	.word	0x00000000
 800bc48:	0800b997 	.word	0x0800b997

0800bc4c <_sbrk_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4d05      	ldr	r5, [pc, #20]	; (800bc68 <_sbrk_r+0x1c>)
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	f7fa fd50 	bl	80066fc <_sbrk>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d102      	bne.n	800bc66 <_sbrk_r+0x1a>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	b103      	cbz	r3, 800bc66 <_sbrk_r+0x1a>
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	20007fe8 	.word	0x20007fe8

0800bc6c <_raise_r>:
 800bc6c:	291f      	cmp	r1, #31
 800bc6e:	b538      	push	{r3, r4, r5, lr}
 800bc70:	4604      	mov	r4, r0
 800bc72:	460d      	mov	r5, r1
 800bc74:	d904      	bls.n	800bc80 <_raise_r+0x14>
 800bc76:	2316      	movs	r3, #22
 800bc78:	6003      	str	r3, [r0, #0]
 800bc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc82:	b112      	cbz	r2, 800bc8a <_raise_r+0x1e>
 800bc84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc88:	b94b      	cbnz	r3, 800bc9e <_raise_r+0x32>
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f830 	bl	800bcf0 <_getpid_r>
 800bc90:	462a      	mov	r2, r5
 800bc92:	4601      	mov	r1, r0
 800bc94:	4620      	mov	r0, r4
 800bc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc9a:	f000 b817 	b.w	800bccc <_kill_r>
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d00a      	beq.n	800bcb8 <_raise_r+0x4c>
 800bca2:	1c59      	adds	r1, r3, #1
 800bca4:	d103      	bne.n	800bcae <_raise_r+0x42>
 800bca6:	2316      	movs	r3, #22
 800bca8:	6003      	str	r3, [r0, #0]
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e7e7      	b.n	800bc7e <_raise_r+0x12>
 800bcae:	2400      	movs	r4, #0
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcb6:	4798      	blx	r3
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e7e0      	b.n	800bc7e <_raise_r+0x12>

0800bcbc <raise>:
 800bcbc:	4b02      	ldr	r3, [pc, #8]	; (800bcc8 <raise+0xc>)
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	6818      	ldr	r0, [r3, #0]
 800bcc2:	f7ff bfd3 	b.w	800bc6c <_raise_r>
 800bcc6:	bf00      	nop
 800bcc8:	20000024 	.word	0x20000024

0800bccc <_kill_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4d06      	ldr	r5, [pc, #24]	; (800bcec <_kill_r+0x20>)
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	f7fa fc8c 	bl	80065f6 <_kill>
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	d102      	bne.n	800bce8 <_kill_r+0x1c>
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	b103      	cbz	r3, 800bce8 <_kill_r+0x1c>
 800bce6:	6023      	str	r3, [r4, #0]
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	bf00      	nop
 800bcec:	20007fe8 	.word	0x20007fe8

0800bcf0 <_getpid_r>:
 800bcf0:	f7fa bc7a 	b.w	80065e8 <_getpid>

0800bcf4 <__sread>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfc:	f000 f8a8 	bl	800be50 <_read_r>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	bfab      	itete	ge
 800bd04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd06:	89a3      	ldrhlt	r3, [r4, #12]
 800bd08:	181b      	addge	r3, r3, r0
 800bd0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd0e:	bfac      	ite	ge
 800bd10:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd12:	81a3      	strhlt	r3, [r4, #12]
 800bd14:	bd10      	pop	{r4, pc}

0800bd16 <__swrite>:
 800bd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	898b      	ldrh	r3, [r1, #12]
 800bd1e:	4605      	mov	r5, r0
 800bd20:	05db      	lsls	r3, r3, #23
 800bd22:	460c      	mov	r4, r1
 800bd24:	4616      	mov	r6, r2
 800bd26:	d505      	bpl.n	800bd34 <__swrite+0x1e>
 800bd28:	2302      	movs	r3, #2
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd30:	f000 f868 	bl	800be04 <_lseek_r>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	4632      	mov	r2, r6
 800bd38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	4628      	mov	r0, r5
 800bd40:	463b      	mov	r3, r7
 800bd42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	f000 b817 	b.w	800bd7c <_write_r>

0800bd4e <__sseek>:
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd56:	f000 f855 	bl	800be04 <_lseek_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	bf15      	itete	ne
 800bd60:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd6a:	81a3      	strheq	r3, [r4, #12]
 800bd6c:	bf18      	it	ne
 800bd6e:	81a3      	strhne	r3, [r4, #12]
 800bd70:	bd10      	pop	{r4, pc}

0800bd72 <__sclose>:
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 b813 	b.w	800bda0 <_close_r>
	...

0800bd7c <_write_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	4611      	mov	r1, r2
 800bd84:	2200      	movs	r2, #0
 800bd86:	4d05      	ldr	r5, [pc, #20]	; (800bd9c <_write_r+0x20>)
 800bd88:	602a      	str	r2, [r5, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	f7fa fc6a 	bl	8006664 <_write>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_write_r+0x1e>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_write_r+0x1e>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	20007fe8 	.word	0x20007fe8

0800bda0 <_close_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	2300      	movs	r3, #0
 800bda4:	4d05      	ldr	r5, [pc, #20]	; (800bdbc <_close_r+0x1c>)
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	602b      	str	r3, [r5, #0]
 800bdac:	f7fa fc76 	bl	800669c <_close>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_close_r+0x1a>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_close_r+0x1a>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	20007fe8 	.word	0x20007fe8

0800bdc0 <_fstat_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4d06      	ldr	r5, [pc, #24]	; (800bde0 <_fstat_r+0x20>)
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	4611      	mov	r1, r2
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	f7fa fc70 	bl	80066b2 <_fstat>
 800bdd2:	1c43      	adds	r3, r0, #1
 800bdd4:	d102      	bne.n	800bddc <_fstat_r+0x1c>
 800bdd6:	682b      	ldr	r3, [r5, #0]
 800bdd8:	b103      	cbz	r3, 800bddc <_fstat_r+0x1c>
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	bd38      	pop	{r3, r4, r5, pc}
 800bdde:	bf00      	nop
 800bde0:	20007fe8 	.word	0x20007fe8

0800bde4 <_isatty_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	2300      	movs	r3, #0
 800bde8:	4d05      	ldr	r5, [pc, #20]	; (800be00 <_isatty_r+0x1c>)
 800bdea:	4604      	mov	r4, r0
 800bdec:	4608      	mov	r0, r1
 800bdee:	602b      	str	r3, [r5, #0]
 800bdf0:	f7fa fc6e 	bl	80066d0 <_isatty>
 800bdf4:	1c43      	adds	r3, r0, #1
 800bdf6:	d102      	bne.n	800bdfe <_isatty_r+0x1a>
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	b103      	cbz	r3, 800bdfe <_isatty_r+0x1a>
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	20007fe8 	.word	0x20007fe8

0800be04 <_lseek_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	4604      	mov	r4, r0
 800be08:	4608      	mov	r0, r1
 800be0a:	4611      	mov	r1, r2
 800be0c:	2200      	movs	r2, #0
 800be0e:	4d05      	ldr	r5, [pc, #20]	; (800be24 <_lseek_r+0x20>)
 800be10:	602a      	str	r2, [r5, #0]
 800be12:	461a      	mov	r2, r3
 800be14:	f7fa fc66 	bl	80066e4 <_lseek>
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	d102      	bne.n	800be22 <_lseek_r+0x1e>
 800be1c:	682b      	ldr	r3, [r5, #0]
 800be1e:	b103      	cbz	r3, 800be22 <_lseek_r+0x1e>
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	bd38      	pop	{r3, r4, r5, pc}
 800be24:	20007fe8 	.word	0x20007fe8

0800be28 <__malloc_lock>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__malloc_lock+0x8>)
 800be2a:	f7ff bc19 	b.w	800b660 <__retarget_lock_acquire_recursive>
 800be2e:	bf00      	nop
 800be30:	20007fdc 	.word	0x20007fdc

0800be34 <__malloc_unlock>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__malloc_unlock+0x8>)
 800be36:	f7ff bc14 	b.w	800b662 <__retarget_lock_release_recursive>
 800be3a:	bf00      	nop
 800be3c:	20007fdc 	.word	0x20007fdc

0800be40 <_malloc_usable_size_r>:
 800be40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be44:	1f18      	subs	r0, r3, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	bfbc      	itt	lt
 800be4a:	580b      	ldrlt	r3, [r1, r0]
 800be4c:	18c0      	addlt	r0, r0, r3
 800be4e:	4770      	bx	lr

0800be50 <_read_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4604      	mov	r4, r0
 800be54:	4608      	mov	r0, r1
 800be56:	4611      	mov	r1, r2
 800be58:	2200      	movs	r2, #0
 800be5a:	4d05      	ldr	r5, [pc, #20]	; (800be70 <_read_r+0x20>)
 800be5c:	602a      	str	r2, [r5, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	f7fa fbe3 	bl	800662a <_read>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_read_r+0x1e>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_read_r+0x1e>
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	20007fe8 	.word	0x20007fe8
 800be74:	00000000 	.word	0x00000000

0800be78 <atan>:
 800be78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	4bb6      	ldr	r3, [pc, #728]	; (800c158 <atan+0x2e0>)
 800be7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800be82:	429e      	cmp	r6, r3
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	468b      	mov	fp, r1
 800be8a:	dd17      	ble.n	800bebc <atan+0x44>
 800be8c:	4bb3      	ldr	r3, [pc, #716]	; (800c15c <atan+0x2e4>)
 800be8e:	429e      	cmp	r6, r3
 800be90:	dc01      	bgt.n	800be96 <atan+0x1e>
 800be92:	d109      	bne.n	800bea8 <atan+0x30>
 800be94:	b140      	cbz	r0, 800bea8 <atan+0x30>
 800be96:	4622      	mov	r2, r4
 800be98:	462b      	mov	r3, r5
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7f4 f9c9 	bl	8000234 <__adddf3>
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	e005      	b.n	800beb4 <atan+0x3c>
 800bea8:	f1bb 0f00 	cmp.w	fp, #0
 800beac:	4cac      	ldr	r4, [pc, #688]	; (800c160 <atan+0x2e8>)
 800beae:	f300 8121 	bgt.w	800c0f4 <atan+0x27c>
 800beb2:	4dac      	ldr	r5, [pc, #688]	; (800c164 <atan+0x2ec>)
 800beb4:	4620      	mov	r0, r4
 800beb6:	4629      	mov	r1, r5
 800beb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	4baa      	ldr	r3, [pc, #680]	; (800c168 <atan+0x2f0>)
 800bebe:	429e      	cmp	r6, r3
 800bec0:	dc11      	bgt.n	800bee6 <atan+0x6e>
 800bec2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bec6:	429e      	cmp	r6, r3
 800bec8:	dc0a      	bgt.n	800bee0 <atan+0x68>
 800beca:	a38b      	add	r3, pc, #556	; (adr r3, 800c0f8 <atan+0x280>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 f9b0 	bl	8000234 <__adddf3>
 800bed4:	2200      	movs	r2, #0
 800bed6:	4ba5      	ldr	r3, [pc, #660]	; (800c16c <atan+0x2f4>)
 800bed8:	f7f4 fdf2 	bl	8000ac0 <__aeabi_dcmpgt>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d1e9      	bne.n	800beb4 <atan+0x3c>
 800bee0:	f04f 3aff 	mov.w	sl, #4294967295
 800bee4:	e027      	b.n	800bf36 <atan+0xbe>
 800bee6:	f000 f997 	bl	800c218 <fabs>
 800beea:	4ba1      	ldr	r3, [pc, #644]	; (800c170 <atan+0x2f8>)
 800beec:	4604      	mov	r4, r0
 800beee:	429e      	cmp	r6, r3
 800bef0:	460d      	mov	r5, r1
 800bef2:	f300 80b8 	bgt.w	800c066 <atan+0x1ee>
 800bef6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800befa:	429e      	cmp	r6, r3
 800befc:	f300 809c 	bgt.w	800c038 <atan+0x1c0>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	f7f4 f996 	bl	8000234 <__adddf3>
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4b98      	ldr	r3, [pc, #608]	; (800c16c <atan+0x2f4>)
 800bf0c:	f7f4 f990 	bl	8000230 <__aeabi_dsub>
 800bf10:	2200      	movs	r2, #0
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	f7f4 f989 	bl	8000234 <__adddf3>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	4630      	mov	r0, r6
 800bf28:	4639      	mov	r1, r7
 800bf2a:	f7f4 fc63 	bl	80007f4 <__aeabi_ddiv>
 800bf2e:	f04f 0a00 	mov.w	sl, #0
 800bf32:	4604      	mov	r4, r0
 800bf34:	460d      	mov	r5, r1
 800bf36:	4622      	mov	r2, r4
 800bf38:	462b      	mov	r3, r5
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f7f4 fb2f 	bl	80005a0 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4680      	mov	r8, r0
 800bf48:	4689      	mov	r9, r1
 800bf4a:	f7f4 fb29 	bl	80005a0 <__aeabi_dmul>
 800bf4e:	a36c      	add	r3, pc, #432	; (adr r3, 800c100 <atan+0x288>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	f7f4 fb22 	bl	80005a0 <__aeabi_dmul>
 800bf5c:	a36a      	add	r3, pc, #424	; (adr r3, 800c108 <atan+0x290>)
 800bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf62:	f7f4 f967 	bl	8000234 <__adddf3>
 800bf66:	4632      	mov	r2, r6
 800bf68:	463b      	mov	r3, r7
 800bf6a:	f7f4 fb19 	bl	80005a0 <__aeabi_dmul>
 800bf6e:	a368      	add	r3, pc, #416	; (adr r3, 800c110 <atan+0x298>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f7f4 f95e 	bl	8000234 <__adddf3>
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	f7f4 fb10 	bl	80005a0 <__aeabi_dmul>
 800bf80:	a365      	add	r3, pc, #404	; (adr r3, 800c118 <atan+0x2a0>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 f955 	bl	8000234 <__adddf3>
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	463b      	mov	r3, r7
 800bf8e:	f7f4 fb07 	bl	80005a0 <__aeabi_dmul>
 800bf92:	a363      	add	r3, pc, #396	; (adr r3, 800c120 <atan+0x2a8>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f7f4 f94c 	bl	8000234 <__adddf3>
 800bf9c:	4632      	mov	r2, r6
 800bf9e:	463b      	mov	r3, r7
 800bfa0:	f7f4 fafe 	bl	80005a0 <__aeabi_dmul>
 800bfa4:	a360      	add	r3, pc, #384	; (adr r3, 800c128 <atan+0x2b0>)
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 f943 	bl	8000234 <__adddf3>
 800bfae:	4642      	mov	r2, r8
 800bfb0:	464b      	mov	r3, r9
 800bfb2:	f7f4 faf5 	bl	80005a0 <__aeabi_dmul>
 800bfb6:	a35e      	add	r3, pc, #376	; (adr r3, 800c130 <atan+0x2b8>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	4689      	mov	r9, r1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	f7f4 faec 	bl	80005a0 <__aeabi_dmul>
 800bfc8:	a35b      	add	r3, pc, #364	; (adr r3, 800c138 <atan+0x2c0>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 f92f 	bl	8000230 <__aeabi_dsub>
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	f7f4 fae3 	bl	80005a0 <__aeabi_dmul>
 800bfda:	a359      	add	r3, pc, #356	; (adr r3, 800c140 <atan+0x2c8>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 f926 	bl	8000230 <__aeabi_dsub>
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	f7f4 fada 	bl	80005a0 <__aeabi_dmul>
 800bfec:	a356      	add	r3, pc, #344	; (adr r3, 800c148 <atan+0x2d0>)
 800bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff2:	f7f4 f91d 	bl	8000230 <__aeabi_dsub>
 800bff6:	4632      	mov	r2, r6
 800bff8:	463b      	mov	r3, r7
 800bffa:	f7f4 fad1 	bl	80005a0 <__aeabi_dmul>
 800bffe:	a354      	add	r3, pc, #336	; (adr r3, 800c150 <atan+0x2d8>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	f7f4 f914 	bl	8000230 <__aeabi_dsub>
 800c008:	4632      	mov	r2, r6
 800c00a:	463b      	mov	r3, r7
 800c00c:	f7f4 fac8 	bl	80005a0 <__aeabi_dmul>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4640      	mov	r0, r8
 800c016:	4649      	mov	r1, r9
 800c018:	f7f4 f90c 	bl	8000234 <__adddf3>
 800c01c:	4622      	mov	r2, r4
 800c01e:	462b      	mov	r3, r5
 800c020:	f7f4 fabe 	bl	80005a0 <__aeabi_dmul>
 800c024:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	d144      	bne.n	800c0b8 <atan+0x240>
 800c02e:	4620      	mov	r0, r4
 800c030:	4629      	mov	r1, r5
 800c032:	f7f4 f8fd 	bl	8000230 <__aeabi_dsub>
 800c036:	e734      	b.n	800bea2 <atan+0x2a>
 800c038:	2200      	movs	r2, #0
 800c03a:	4b4c      	ldr	r3, [pc, #304]	; (800c16c <atan+0x2f4>)
 800c03c:	f7f4 f8f8 	bl	8000230 <__aeabi_dsub>
 800c040:	2200      	movs	r2, #0
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	4b48      	ldr	r3, [pc, #288]	; (800c16c <atan+0x2f4>)
 800c04c:	f7f4 f8f2 	bl	8000234 <__adddf3>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 fbcc 	bl	80007f4 <__aeabi_ddiv>
 800c05c:	f04f 0a01 	mov.w	sl, #1
 800c060:	4604      	mov	r4, r0
 800c062:	460d      	mov	r5, r1
 800c064:	e767      	b.n	800bf36 <atan+0xbe>
 800c066:	4b43      	ldr	r3, [pc, #268]	; (800c174 <atan+0x2fc>)
 800c068:	429e      	cmp	r6, r3
 800c06a:	da1a      	bge.n	800c0a2 <atan+0x22a>
 800c06c:	2200      	movs	r2, #0
 800c06e:	4b42      	ldr	r3, [pc, #264]	; (800c178 <atan+0x300>)
 800c070:	f7f4 f8de 	bl	8000230 <__aeabi_dsub>
 800c074:	2200      	movs	r2, #0
 800c076:	4606      	mov	r6, r0
 800c078:	460f      	mov	r7, r1
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	4b3e      	ldr	r3, [pc, #248]	; (800c178 <atan+0x300>)
 800c080:	f7f4 fa8e 	bl	80005a0 <__aeabi_dmul>
 800c084:	2200      	movs	r2, #0
 800c086:	4b39      	ldr	r3, [pc, #228]	; (800c16c <atan+0x2f4>)
 800c088:	f7f4 f8d4 	bl	8000234 <__adddf3>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4630      	mov	r0, r6
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 fbae 	bl	80007f4 <__aeabi_ddiv>
 800c098:	f04f 0a02 	mov.w	sl, #2
 800c09c:	4604      	mov	r4, r0
 800c09e:	460d      	mov	r5, r1
 800c0a0:	e749      	b.n	800bf36 <atan+0xbe>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	4934      	ldr	r1, [pc, #208]	; (800c17c <atan+0x304>)
 800c0aa:	f7f4 fba3 	bl	80007f4 <__aeabi_ddiv>
 800c0ae:	f04f 0a03 	mov.w	sl, #3
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	460d      	mov	r5, r1
 800c0b6:	e73e      	b.n	800bf36 <atan+0xbe>
 800c0b8:	4b31      	ldr	r3, [pc, #196]	; (800c180 <atan+0x308>)
 800c0ba:	4e32      	ldr	r6, [pc, #200]	; (800c184 <atan+0x30c>)
 800c0bc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c0c0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c0c4:	e9da 2300 	ldrd	r2, r3, [sl]
 800c0c8:	f7f4 f8b2 	bl	8000230 <__aeabi_dsub>
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	f7f4 f8ae 	bl	8000230 <__aeabi_dsub>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c0dc:	f7f4 f8a8 	bl	8000230 <__aeabi_dsub>
 800c0e0:	f1bb 0f00 	cmp.w	fp, #0
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	f6bf aee4 	bge.w	800beb4 <atan+0x3c>
 800c0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0f0:	461d      	mov	r5, r3
 800c0f2:	e6df      	b.n	800beb4 <atan+0x3c>
 800c0f4:	4d24      	ldr	r5, [pc, #144]	; (800c188 <atan+0x310>)
 800c0f6:	e6dd      	b.n	800beb4 <atan+0x3c>
 800c0f8:	8800759c 	.word	0x8800759c
 800c0fc:	7e37e43c 	.word	0x7e37e43c
 800c100:	e322da11 	.word	0xe322da11
 800c104:	3f90ad3a 	.word	0x3f90ad3a
 800c108:	24760deb 	.word	0x24760deb
 800c10c:	3fa97b4b 	.word	0x3fa97b4b
 800c110:	a0d03d51 	.word	0xa0d03d51
 800c114:	3fb10d66 	.word	0x3fb10d66
 800c118:	c54c206e 	.word	0xc54c206e
 800c11c:	3fb745cd 	.word	0x3fb745cd
 800c120:	920083ff 	.word	0x920083ff
 800c124:	3fc24924 	.word	0x3fc24924
 800c128:	5555550d 	.word	0x5555550d
 800c12c:	3fd55555 	.word	0x3fd55555
 800c130:	2c6a6c2f 	.word	0x2c6a6c2f
 800c134:	bfa2b444 	.word	0xbfa2b444
 800c138:	52defd9a 	.word	0x52defd9a
 800c13c:	3fadde2d 	.word	0x3fadde2d
 800c140:	af749a6d 	.word	0xaf749a6d
 800c144:	3fb3b0f2 	.word	0x3fb3b0f2
 800c148:	fe231671 	.word	0xfe231671
 800c14c:	3fbc71c6 	.word	0x3fbc71c6
 800c150:	9998ebc4 	.word	0x9998ebc4
 800c154:	3fc99999 	.word	0x3fc99999
 800c158:	440fffff 	.word	0x440fffff
 800c15c:	7ff00000 	.word	0x7ff00000
 800c160:	54442d18 	.word	0x54442d18
 800c164:	bff921fb 	.word	0xbff921fb
 800c168:	3fdbffff 	.word	0x3fdbffff
 800c16c:	3ff00000 	.word	0x3ff00000
 800c170:	3ff2ffff 	.word	0x3ff2ffff
 800c174:	40038000 	.word	0x40038000
 800c178:	3ff80000 	.word	0x3ff80000
 800c17c:	bff00000 	.word	0xbff00000
 800c180:	0800d9f0 	.word	0x0800d9f0
 800c184:	0800d9d0 	.word	0x0800d9d0
 800c188:	3ff921fb 	.word	0x3ff921fb

0800c18c <cos>:
 800c18c:	b530      	push	{r4, r5, lr}
 800c18e:	4a20      	ldr	r2, [pc, #128]	; (800c210 <cos+0x84>)
 800c190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c194:	4293      	cmp	r3, r2
 800c196:	b087      	sub	sp, #28
 800c198:	dc06      	bgt.n	800c1a8 <cos+0x1c>
 800c19a:	2200      	movs	r2, #0
 800c19c:	2300      	movs	r3, #0
 800c19e:	b007      	add	sp, #28
 800c1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1a4:	f000 baa0 	b.w	800c6e8 <__kernel_cos>
 800c1a8:	4a1a      	ldr	r2, [pc, #104]	; (800c214 <cos+0x88>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	dd05      	ble.n	800c1ba <cos+0x2e>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	f7f4 f83d 	bl	8000230 <__aeabi_dsub>
 800c1b6:	b007      	add	sp, #28
 800c1b8:	bd30      	pop	{r4, r5, pc}
 800c1ba:	aa02      	add	r2, sp, #8
 800c1bc:	f000 f89c 	bl	800c2f8 <__ieee754_rem_pio2>
 800c1c0:	f000 0003 	and.w	r0, r0, #3
 800c1c4:	2801      	cmp	r0, #1
 800c1c6:	d009      	beq.n	800c1dc <cos+0x50>
 800c1c8:	2802      	cmp	r0, #2
 800c1ca:	d011      	beq.n	800c1f0 <cos+0x64>
 800c1cc:	b9b8      	cbnz	r0, 800c1fe <cos+0x72>
 800c1ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1d6:	f000 fa87 	bl	800c6e8 <__kernel_cos>
 800c1da:	e7ec      	b.n	800c1b6 <cos+0x2a>
 800c1dc:	9000      	str	r0, [sp, #0]
 800c1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e6:	f000 fe7f 	bl	800cee8 <__kernel_sin>
 800c1ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c1ee:	e7e2      	b.n	800c1b6 <cos+0x2a>
 800c1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f8:	f000 fa76 	bl	800c6e8 <__kernel_cos>
 800c1fc:	e7f5      	b.n	800c1ea <cos+0x5e>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c20a:	f000 fe6d 	bl	800cee8 <__kernel_sin>
 800c20e:	e7d2      	b.n	800c1b6 <cos+0x2a>
 800c210:	3fe921fb 	.word	0x3fe921fb
 800c214:	7fefffff 	.word	0x7fefffff

0800c218 <fabs>:
 800c218:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c21c:	4770      	bx	lr
	...

0800c220 <sin>:
 800c220:	b530      	push	{r4, r5, lr}
 800c222:	4a20      	ldr	r2, [pc, #128]	; (800c2a4 <sin+0x84>)
 800c224:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c228:	4293      	cmp	r3, r2
 800c22a:	b087      	sub	sp, #28
 800c22c:	dc06      	bgt.n	800c23c <sin+0x1c>
 800c22e:	2300      	movs	r3, #0
 800c230:	2200      	movs	r2, #0
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	2300      	movs	r3, #0
 800c236:	f000 fe57 	bl	800cee8 <__kernel_sin>
 800c23a:	e006      	b.n	800c24a <sin+0x2a>
 800c23c:	4a1a      	ldr	r2, [pc, #104]	; (800c2a8 <sin+0x88>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	dd05      	ble.n	800c24e <sin+0x2e>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	f7f3 fff3 	bl	8000230 <__aeabi_dsub>
 800c24a:	b007      	add	sp, #28
 800c24c:	bd30      	pop	{r4, r5, pc}
 800c24e:	aa02      	add	r2, sp, #8
 800c250:	f000 f852 	bl	800c2f8 <__ieee754_rem_pio2>
 800c254:	f000 0003 	and.w	r0, r0, #3
 800c258:	2801      	cmp	r0, #1
 800c25a:	d009      	beq.n	800c270 <sin+0x50>
 800c25c:	2802      	cmp	r0, #2
 800c25e:	d00e      	beq.n	800c27e <sin+0x5e>
 800c260:	b9c0      	cbnz	r0, 800c294 <sin+0x74>
 800c262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c266:	2301      	movs	r3, #1
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c26e:	e7e2      	b.n	800c236 <sin+0x16>
 800c270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c278:	f000 fa36 	bl	800c6e8 <__kernel_cos>
 800c27c:	e7e5      	b.n	800c24a <sin+0x2a>
 800c27e:	2301      	movs	r3, #1
 800c280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c28a:	f000 fe2d 	bl	800cee8 <__kernel_sin>
 800c28e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c292:	e7da      	b.n	800c24a <sin+0x2a>
 800c294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c29c:	f000 fa24 	bl	800c6e8 <__kernel_cos>
 800c2a0:	e7f5      	b.n	800c28e <sin+0x6e>
 800c2a2:	bf00      	nop
 800c2a4:	3fe921fb 	.word	0x3fe921fb
 800c2a8:	7fefffff 	.word	0x7fefffff

0800c2ac <roundf>:
 800c2ac:	b508      	push	{r3, lr}
 800c2ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c2b2:	3b7f      	subs	r3, #127	; 0x7f
 800c2b4:	2b16      	cmp	r3, #22
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	dc14      	bgt.n	800c2e6 <roundf+0x3a>
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	da07      	bge.n	800c2d0 <roundf+0x24>
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800c2c6:	d101      	bne.n	800c2cc <roundf+0x20>
 800c2c8:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	bd08      	pop	{r3, pc}
 800c2d0:	4808      	ldr	r0, [pc, #32]	; (800c2f4 <roundf+0x48>)
 800c2d2:	4118      	asrs	r0, r3
 800c2d4:	4201      	tst	r1, r0
 800c2d6:	d0f9      	beq.n	800c2cc <roundf+0x20>
 800c2d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2dc:	4119      	asrs	r1, r3
 800c2de:	4411      	add	r1, r2
 800c2e0:	ea21 0100 	bic.w	r1, r1, r0
 800c2e4:	e7f2      	b.n	800c2cc <roundf+0x20>
 800c2e6:	2b80      	cmp	r3, #128	; 0x80
 800c2e8:	d1f0      	bne.n	800c2cc <roundf+0x20>
 800c2ea:	f7f4 fc71 	bl	8000bd0 <__addsf3>
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	e7ec      	b.n	800c2cc <roundf+0x20>
 800c2f2:	bf00      	nop
 800c2f4:	007fffff 	.word	0x007fffff

0800c2f8 <__ieee754_rem_pio2>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	4ac4      	ldr	r2, [pc, #784]	; (800c610 <__ieee754_rem_pio2+0x318>)
 800c300:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c304:	b08d      	sub	sp, #52	; 0x34
 800c306:	4592      	cmp	sl, r2
 800c308:	9104      	str	r1, [sp, #16]
 800c30a:	dc07      	bgt.n	800c31c <__ieee754_rem_pio2+0x24>
 800c30c:	2200      	movs	r2, #0
 800c30e:	2300      	movs	r3, #0
 800c310:	e9c4 0100 	strd	r0, r1, [r4]
 800c314:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c318:	2500      	movs	r5, #0
 800c31a:	e024      	b.n	800c366 <__ieee754_rem_pio2+0x6e>
 800c31c:	4abd      	ldr	r2, [pc, #756]	; (800c614 <__ieee754_rem_pio2+0x31c>)
 800c31e:	4592      	cmp	sl, r2
 800c320:	dc72      	bgt.n	800c408 <__ieee754_rem_pio2+0x110>
 800c322:	9b04      	ldr	r3, [sp, #16]
 800c324:	4dbc      	ldr	r5, [pc, #752]	; (800c618 <__ieee754_rem_pio2+0x320>)
 800c326:	2b00      	cmp	r3, #0
 800c328:	a3ab      	add	r3, pc, #684	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x2e0>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	dd36      	ble.n	800c39e <__ieee754_rem_pio2+0xa6>
 800c330:	f7f3 ff7e 	bl	8000230 <__aeabi_dsub>
 800c334:	45aa      	cmp	sl, r5
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	d018      	beq.n	800c36e <__ieee754_rem_pio2+0x76>
 800c33c:	a3a8      	add	r3, pc, #672	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x2e8>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f3 ff75 	bl	8000230 <__aeabi_dsub>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4630      	mov	r0, r6
 800c34c:	e9c4 2300 	strd	r2, r3, [r4]
 800c350:	4639      	mov	r1, r7
 800c352:	f7f3 ff6d 	bl	8000230 <__aeabi_dsub>
 800c356:	a3a2      	add	r3, pc, #648	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x2e8>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	f7f3 ff68 	bl	8000230 <__aeabi_dsub>
 800c360:	2501      	movs	r5, #1
 800c362:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c366:	4628      	mov	r0, r5
 800c368:	b00d      	add	sp, #52	; 0x34
 800c36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36e:	a39e      	add	r3, pc, #632	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x2f0>)
 800c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c374:	f7f3 ff5c 	bl	8000230 <__aeabi_dsub>
 800c378:	a39d      	add	r3, pc, #628	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2f8>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	4606      	mov	r6, r0
 800c380:	460f      	mov	r7, r1
 800c382:	f7f3 ff55 	bl	8000230 <__aeabi_dsub>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	4630      	mov	r0, r6
 800c38c:	e9c4 2300 	strd	r2, r3, [r4]
 800c390:	4639      	mov	r1, r7
 800c392:	f7f3 ff4d 	bl	8000230 <__aeabi_dsub>
 800c396:	a396      	add	r3, pc, #600	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2f8>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	e7de      	b.n	800c35c <__ieee754_rem_pio2+0x64>
 800c39e:	f7f3 ff49 	bl	8000234 <__adddf3>
 800c3a2:	45aa      	cmp	sl, r5
 800c3a4:	4606      	mov	r6, r0
 800c3a6:	460f      	mov	r7, r1
 800c3a8:	d016      	beq.n	800c3d8 <__ieee754_rem_pio2+0xe0>
 800c3aa:	a38d      	add	r3, pc, #564	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x2e8>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f3 ff40 	bl	8000234 <__adddf3>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	e9c4 2300 	strd	r2, r3, [r4]
 800c3be:	4639      	mov	r1, r7
 800c3c0:	f7f3 ff36 	bl	8000230 <__aeabi_dsub>
 800c3c4:	a386      	add	r3, pc, #536	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x2e8>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f3 ff33 	bl	8000234 <__adddf3>
 800c3ce:	f04f 35ff 	mov.w	r5, #4294967295
 800c3d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c3d6:	e7c6      	b.n	800c366 <__ieee754_rem_pio2+0x6e>
 800c3d8:	a383      	add	r3, pc, #524	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x2f0>)
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	f7f3 ff29 	bl	8000234 <__adddf3>
 800c3e2:	a383      	add	r3, pc, #524	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2f8>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	460f      	mov	r7, r1
 800c3ec:	f7f3 ff22 	bl	8000234 <__adddf3>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	e9c4 2300 	strd	r2, r3, [r4]
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f3 ff18 	bl	8000230 <__aeabi_dsub>
 800c400:	a37b      	add	r3, pc, #492	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2f8>)
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	e7e0      	b.n	800c3ca <__ieee754_rem_pio2+0xd2>
 800c408:	4a84      	ldr	r2, [pc, #528]	; (800c61c <__ieee754_rem_pio2+0x324>)
 800c40a:	4592      	cmp	sl, r2
 800c40c:	f300 80d5 	bgt.w	800c5ba <__ieee754_rem_pio2+0x2c2>
 800c410:	f7ff ff02 	bl	800c218 <fabs>
 800c414:	a378      	add	r3, pc, #480	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x300>)
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	4606      	mov	r6, r0
 800c41c:	460f      	mov	r7, r1
 800c41e:	f7f4 f8bf 	bl	80005a0 <__aeabi_dmul>
 800c422:	2200      	movs	r2, #0
 800c424:	4b7e      	ldr	r3, [pc, #504]	; (800c620 <__ieee754_rem_pio2+0x328>)
 800c426:	f7f3 ff05 	bl	8000234 <__adddf3>
 800c42a:	f7f4 fb53 	bl	8000ad4 <__aeabi_d2iz>
 800c42e:	4605      	mov	r5, r0
 800c430:	f7f4 f84c 	bl	80004cc <__aeabi_i2d>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c43c:	a366      	add	r3, pc, #408	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x2e0>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f7f4 f8ad 	bl	80005a0 <__aeabi_dmul>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	4630      	mov	r0, r6
 800c44c:	4639      	mov	r1, r7
 800c44e:	f7f3 feef 	bl	8000230 <__aeabi_dsub>
 800c452:	a363      	add	r3, pc, #396	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x2e8>)
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	4680      	mov	r8, r0
 800c45a:	4689      	mov	r9, r1
 800c45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c460:	f7f4 f89e 	bl	80005a0 <__aeabi_dmul>
 800c464:	2d1f      	cmp	r5, #31
 800c466:	4606      	mov	r6, r0
 800c468:	460f      	mov	r7, r1
 800c46a:	dc0e      	bgt.n	800c48a <__ieee754_rem_pio2+0x192>
 800c46c:	4b6d      	ldr	r3, [pc, #436]	; (800c624 <__ieee754_rem_pio2+0x32c>)
 800c46e:	1e6a      	subs	r2, r5, #1
 800c470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c474:	4553      	cmp	r3, sl
 800c476:	d008      	beq.n	800c48a <__ieee754_rem_pio2+0x192>
 800c478:	4632      	mov	r2, r6
 800c47a:	463b      	mov	r3, r7
 800c47c:	4640      	mov	r0, r8
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f3 fed6 	bl	8000230 <__aeabi_dsub>
 800c484:	e9c4 0100 	strd	r0, r1, [r4]
 800c488:	e013      	b.n	800c4b2 <__ieee754_rem_pio2+0x1ba>
 800c48a:	463b      	mov	r3, r7
 800c48c:	4632      	mov	r2, r6
 800c48e:	4640      	mov	r0, r8
 800c490:	4649      	mov	r1, r9
 800c492:	f7f3 fecd 	bl	8000230 <__aeabi_dsub>
 800c496:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4a0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c4a4:	f1ba 0f10 	cmp.w	sl, #16
 800c4a8:	dc1f      	bgt.n	800c4ea <__ieee754_rem_pio2+0x1f2>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	e9c4 2300 	strd	r2, r3, [r4]
 800c4b2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	4653      	mov	r3, sl
 800c4ba:	4649      	mov	r1, r9
 800c4bc:	f7f3 feb8 	bl	8000230 <__aeabi_dsub>
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	f7f3 feb4 	bl	8000230 <__aeabi_dsub>
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4ce:	9904      	ldr	r1, [sp, #16]
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	f6bf af47 	bge.w	800c366 <__ieee754_rem_pio2+0x6e>
 800c4d8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c4dc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c4e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4e4:	60e3      	str	r3, [r4, #12]
 800c4e6:	426d      	negs	r5, r5
 800c4e8:	e73d      	b.n	800c366 <__ieee754_rem_pio2+0x6e>
 800c4ea:	a33f      	add	r3, pc, #252	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x2f0>)
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4f4:	f7f4 f854 	bl	80005a0 <__aeabi_dmul>
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	460f      	mov	r7, r1
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	4640      	mov	r0, r8
 800c502:	4649      	mov	r1, r9
 800c504:	f7f3 fe94 	bl	8000230 <__aeabi_dsub>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	4682      	mov	sl, r0
 800c50e:	468b      	mov	fp, r1
 800c510:	4640      	mov	r0, r8
 800c512:	4649      	mov	r1, r9
 800c514:	f7f3 fe8c 	bl	8000230 <__aeabi_dsub>
 800c518:	4632      	mov	r2, r6
 800c51a:	463b      	mov	r3, r7
 800c51c:	f7f3 fe88 	bl	8000230 <__aeabi_dsub>
 800c520:	a333      	add	r3, pc, #204	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2f8>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	4606      	mov	r6, r0
 800c528:	460f      	mov	r7, r1
 800c52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c52e:	f7f4 f837 	bl	80005a0 <__aeabi_dmul>
 800c532:	4632      	mov	r2, r6
 800c534:	463b      	mov	r3, r7
 800c536:	f7f3 fe7b 	bl	8000230 <__aeabi_dsub>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4606      	mov	r6, r0
 800c540:	460f      	mov	r7, r1
 800c542:	4650      	mov	r0, sl
 800c544:	4659      	mov	r1, fp
 800c546:	f7f3 fe73 	bl	8000230 <__aeabi_dsub>
 800c54a:	9a05      	ldr	r2, [sp, #20]
 800c54c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	2b31      	cmp	r3, #49	; 0x31
 800c554:	dc06      	bgt.n	800c564 <__ieee754_rem_pio2+0x26c>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	46d0      	mov	r8, sl
 800c55c:	46d9      	mov	r9, fp
 800c55e:	e9c4 2300 	strd	r2, r3, [r4]
 800c562:	e7a6      	b.n	800c4b2 <__ieee754_rem_pio2+0x1ba>
 800c564:	a326      	add	r3, pc, #152	; (adr r3, 800c600 <__ieee754_rem_pio2+0x308>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c56e:	f7f4 f817 	bl	80005a0 <__aeabi_dmul>
 800c572:	4606      	mov	r6, r0
 800c574:	460f      	mov	r7, r1
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	4650      	mov	r0, sl
 800c57c:	4659      	mov	r1, fp
 800c57e:	f7f3 fe57 	bl	8000230 <__aeabi_dsub>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4680      	mov	r8, r0
 800c588:	4689      	mov	r9, r1
 800c58a:	4650      	mov	r0, sl
 800c58c:	4659      	mov	r1, fp
 800c58e:	f7f3 fe4f 	bl	8000230 <__aeabi_dsub>
 800c592:	4632      	mov	r2, r6
 800c594:	463b      	mov	r3, r7
 800c596:	f7f3 fe4b 	bl	8000230 <__aeabi_dsub>
 800c59a:	a31b      	add	r3, pc, #108	; (adr r3, 800c608 <__ieee754_rem_pio2+0x310>)
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5a8:	f7f3 fffa 	bl	80005a0 <__aeabi_dmul>
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	f7f3 fe3e 	bl	8000230 <__aeabi_dsub>
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	e75e      	b.n	800c478 <__ieee754_rem_pio2+0x180>
 800c5ba:	4a1b      	ldr	r2, [pc, #108]	; (800c628 <__ieee754_rem_pio2+0x330>)
 800c5bc:	4592      	cmp	sl, r2
 800c5be:	dd35      	ble.n	800c62c <__ieee754_rem_pio2+0x334>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	f7f3 fe34 	bl	8000230 <__aeabi_dsub>
 800c5c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5cc:	e9c4 0100 	strd	r0, r1, [r4]
 800c5d0:	e6a2      	b.n	800c318 <__ieee754_rem_pio2+0x20>
 800c5d2:	bf00      	nop
 800c5d4:	f3af 8000 	nop.w
 800c5d8:	54400000 	.word	0x54400000
 800c5dc:	3ff921fb 	.word	0x3ff921fb
 800c5e0:	1a626331 	.word	0x1a626331
 800c5e4:	3dd0b461 	.word	0x3dd0b461
 800c5e8:	1a600000 	.word	0x1a600000
 800c5ec:	3dd0b461 	.word	0x3dd0b461
 800c5f0:	2e037073 	.word	0x2e037073
 800c5f4:	3ba3198a 	.word	0x3ba3198a
 800c5f8:	6dc9c883 	.word	0x6dc9c883
 800c5fc:	3fe45f30 	.word	0x3fe45f30
 800c600:	2e000000 	.word	0x2e000000
 800c604:	3ba3198a 	.word	0x3ba3198a
 800c608:	252049c1 	.word	0x252049c1
 800c60c:	397b839a 	.word	0x397b839a
 800c610:	3fe921fb 	.word	0x3fe921fb
 800c614:	4002d97b 	.word	0x4002d97b
 800c618:	3ff921fb 	.word	0x3ff921fb
 800c61c:	413921fb 	.word	0x413921fb
 800c620:	3fe00000 	.word	0x3fe00000
 800c624:	0800da10 	.word	0x0800da10
 800c628:	7fefffff 	.word	0x7fefffff
 800c62c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c630:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c634:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c638:	460f      	mov	r7, r1
 800c63a:	4606      	mov	r6, r0
 800c63c:	f7f4 fa4a 	bl	8000ad4 <__aeabi_d2iz>
 800c640:	f7f3 ff44 	bl	80004cc <__aeabi_i2d>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	4630      	mov	r0, r6
 800c64a:	4639      	mov	r1, r7
 800c64c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c650:	f7f3 fdee 	bl	8000230 <__aeabi_dsub>
 800c654:	2200      	movs	r2, #0
 800c656:	4b22      	ldr	r3, [pc, #136]	; (800c6e0 <__ieee754_rem_pio2+0x3e8>)
 800c658:	f7f3 ffa2 	bl	80005a0 <__aeabi_dmul>
 800c65c:	460f      	mov	r7, r1
 800c65e:	4606      	mov	r6, r0
 800c660:	f7f4 fa38 	bl	8000ad4 <__aeabi_d2iz>
 800c664:	f7f3 ff32 	bl	80004cc <__aeabi_i2d>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4630      	mov	r0, r6
 800c66e:	4639      	mov	r1, r7
 800c670:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c674:	f7f3 fddc 	bl	8000230 <__aeabi_dsub>
 800c678:	2200      	movs	r2, #0
 800c67a:	4b19      	ldr	r3, [pc, #100]	; (800c6e0 <__ieee754_rem_pio2+0x3e8>)
 800c67c:	f7f3 ff90 	bl	80005a0 <__aeabi_dmul>
 800c680:	f04f 0803 	mov.w	r8, #3
 800c684:	2600      	movs	r6, #0
 800c686:	2700      	movs	r7, #0
 800c688:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c68c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c690:	4632      	mov	r2, r6
 800c692:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c696:	463b      	mov	r3, r7
 800c698:	46c2      	mov	sl, r8
 800c69a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c69e:	f7f4 f9e7 	bl	8000a70 <__aeabi_dcmpeq>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d1f4      	bne.n	800c690 <__ieee754_rem_pio2+0x398>
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <__ieee754_rem_pio2+0x3ec>)
 800c6a8:	462a      	mov	r2, r5
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	a806      	add	r0, sp, #24
 800c6b4:	4653      	mov	r3, sl
 800c6b6:	f000 f8d5 	bl	800c864 <__kernel_rem_pio2>
 800c6ba:	9b04      	ldr	r3, [sp, #16]
 800c6bc:	4605      	mov	r5, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f6bf ae51 	bge.w	800c366 <__ieee754_rem_pio2+0x6e>
 800c6c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c6c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6cc:	e9c4 2300 	strd	r2, r3, [r4]
 800c6d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c6dc:	e703      	b.n	800c4e6 <__ieee754_rem_pio2+0x1ee>
 800c6de:	bf00      	nop
 800c6e0:	41700000 	.word	0x41700000
 800c6e4:	0800da90 	.word	0x0800da90

0800c6e8 <__kernel_cos>:
 800c6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c6f0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	460f      	mov	r7, r1
 800c6f8:	e9cd 2300 	strd	r2, r3, [sp]
 800c6fc:	da04      	bge.n	800c708 <__kernel_cos+0x20>
 800c6fe:	f7f4 f9e9 	bl	8000ad4 <__aeabi_d2iz>
 800c702:	2800      	cmp	r0, #0
 800c704:	f000 8086 	beq.w	800c814 <__kernel_cos+0x12c>
 800c708:	4642      	mov	r2, r8
 800c70a:	463b      	mov	r3, r7
 800c70c:	4640      	mov	r0, r8
 800c70e:	4639      	mov	r1, r7
 800c710:	f7f3 ff46 	bl	80005a0 <__aeabi_dmul>
 800c714:	2200      	movs	r2, #0
 800c716:	4b4e      	ldr	r3, [pc, #312]	; (800c850 <__kernel_cos+0x168>)
 800c718:	4604      	mov	r4, r0
 800c71a:	460d      	mov	r5, r1
 800c71c:	f7f3 ff40 	bl	80005a0 <__aeabi_dmul>
 800c720:	a33f      	add	r3, pc, #252	; (adr r3, 800c820 <__kernel_cos+0x138>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	4682      	mov	sl, r0
 800c728:	468b      	mov	fp, r1
 800c72a:	4620      	mov	r0, r4
 800c72c:	4629      	mov	r1, r5
 800c72e:	f7f3 ff37 	bl	80005a0 <__aeabi_dmul>
 800c732:	a33d      	add	r3, pc, #244	; (adr r3, 800c828 <__kernel_cos+0x140>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 fd7c 	bl	8000234 <__adddf3>
 800c73c:	4622      	mov	r2, r4
 800c73e:	462b      	mov	r3, r5
 800c740:	f7f3 ff2e 	bl	80005a0 <__aeabi_dmul>
 800c744:	a33a      	add	r3, pc, #232	; (adr r3, 800c830 <__kernel_cos+0x148>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f3 fd71 	bl	8000230 <__aeabi_dsub>
 800c74e:	4622      	mov	r2, r4
 800c750:	462b      	mov	r3, r5
 800c752:	f7f3 ff25 	bl	80005a0 <__aeabi_dmul>
 800c756:	a338      	add	r3, pc, #224	; (adr r3, 800c838 <__kernel_cos+0x150>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 fd6a 	bl	8000234 <__adddf3>
 800c760:	4622      	mov	r2, r4
 800c762:	462b      	mov	r3, r5
 800c764:	f7f3 ff1c 	bl	80005a0 <__aeabi_dmul>
 800c768:	a335      	add	r3, pc, #212	; (adr r3, 800c840 <__kernel_cos+0x158>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 fd5f 	bl	8000230 <__aeabi_dsub>
 800c772:	4622      	mov	r2, r4
 800c774:	462b      	mov	r3, r5
 800c776:	f7f3 ff13 	bl	80005a0 <__aeabi_dmul>
 800c77a:	a333      	add	r3, pc, #204	; (adr r3, 800c848 <__kernel_cos+0x160>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 fd58 	bl	8000234 <__adddf3>
 800c784:	4622      	mov	r2, r4
 800c786:	462b      	mov	r3, r5
 800c788:	f7f3 ff0a 	bl	80005a0 <__aeabi_dmul>
 800c78c:	4622      	mov	r2, r4
 800c78e:	462b      	mov	r3, r5
 800c790:	f7f3 ff06 	bl	80005a0 <__aeabi_dmul>
 800c794:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c798:	4604      	mov	r4, r0
 800c79a:	460d      	mov	r5, r1
 800c79c:	4640      	mov	r0, r8
 800c79e:	4639      	mov	r1, r7
 800c7a0:	f7f3 fefe 	bl	80005a0 <__aeabi_dmul>
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7f3 fd40 	bl	8000230 <__aeabi_dsub>
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <__kernel_cos+0x16c>)
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	429e      	cmp	r6, r3
 800c7b6:	4689      	mov	r9, r1
 800c7b8:	dc0e      	bgt.n	800c7d8 <__kernel_cos+0xf0>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4650      	mov	r0, sl
 800c7c0:	4659      	mov	r1, fp
 800c7c2:	f7f3 fd35 	bl	8000230 <__aeabi_dsub>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4922      	ldr	r1, [pc, #136]	; (800c858 <__kernel_cos+0x170>)
 800c7ce:	f7f3 fd2f 	bl	8000230 <__aeabi_dsub>
 800c7d2:	b003      	add	sp, #12
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	2400      	movs	r4, #0
 800c7da:	4b20      	ldr	r3, [pc, #128]	; (800c85c <__kernel_cos+0x174>)
 800c7dc:	4622      	mov	r2, r4
 800c7de:	429e      	cmp	r6, r3
 800c7e0:	bfcc      	ite	gt
 800c7e2:	4d1f      	ldrgt	r5, [pc, #124]	; (800c860 <__kernel_cos+0x178>)
 800c7e4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	491a      	ldr	r1, [pc, #104]	; (800c858 <__kernel_cos+0x170>)
 800c7ee:	f7f3 fd1f 	bl	8000230 <__aeabi_dsub>
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	460f      	mov	r7, r1
 800c7f8:	462b      	mov	r3, r5
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	4659      	mov	r1, fp
 800c7fe:	f7f3 fd17 	bl	8000230 <__aeabi_dsub>
 800c802:	4642      	mov	r2, r8
 800c804:	464b      	mov	r3, r9
 800c806:	f7f3 fd13 	bl	8000230 <__aeabi_dsub>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4630      	mov	r0, r6
 800c810:	4639      	mov	r1, r7
 800c812:	e7dc      	b.n	800c7ce <__kernel_cos+0xe6>
 800c814:	2000      	movs	r0, #0
 800c816:	4910      	ldr	r1, [pc, #64]	; (800c858 <__kernel_cos+0x170>)
 800c818:	e7db      	b.n	800c7d2 <__kernel_cos+0xea>
 800c81a:	bf00      	nop
 800c81c:	f3af 8000 	nop.w
 800c820:	be8838d4 	.word	0xbe8838d4
 800c824:	bda8fae9 	.word	0xbda8fae9
 800c828:	bdb4b1c4 	.word	0xbdb4b1c4
 800c82c:	3e21ee9e 	.word	0x3e21ee9e
 800c830:	809c52ad 	.word	0x809c52ad
 800c834:	3e927e4f 	.word	0x3e927e4f
 800c838:	19cb1590 	.word	0x19cb1590
 800c83c:	3efa01a0 	.word	0x3efa01a0
 800c840:	16c15177 	.word	0x16c15177
 800c844:	3f56c16c 	.word	0x3f56c16c
 800c848:	5555554c 	.word	0x5555554c
 800c84c:	3fa55555 	.word	0x3fa55555
 800c850:	3fe00000 	.word	0x3fe00000
 800c854:	3fd33332 	.word	0x3fd33332
 800c858:	3ff00000 	.word	0x3ff00000
 800c85c:	3fe90000 	.word	0x3fe90000
 800c860:	3fd20000 	.word	0x3fd20000

0800c864 <__kernel_rem_pio2>:
 800c864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c868:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c86c:	9308      	str	r3, [sp, #32]
 800c86e:	9106      	str	r1, [sp, #24]
 800c870:	4bb6      	ldr	r3, [pc, #728]	; (800cb4c <__kernel_rem_pio2+0x2e8>)
 800c872:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c874:	f112 0f14 	cmn.w	r2, #20
 800c878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c87c:	bfa8      	it	ge
 800c87e:	1ed4      	subge	r4, r2, #3
 800c880:	9302      	str	r3, [sp, #8]
 800c882:	9b08      	ldr	r3, [sp, #32]
 800c884:	bfb8      	it	lt
 800c886:	2400      	movlt	r4, #0
 800c888:	f103 33ff 	add.w	r3, r3, #4294967295
 800c88c:	9307      	str	r3, [sp, #28]
 800c88e:	bfa4      	itt	ge
 800c890:	2318      	movge	r3, #24
 800c892:	fb94 f4f3 	sdivge	r4, r4, r3
 800c896:	f06f 0317 	mvn.w	r3, #23
 800c89a:	fb04 3303 	mla	r3, r4, r3, r3
 800c89e:	eb03 0b02 	add.w	fp, r3, r2
 800c8a2:	9a07      	ldr	r2, [sp, #28]
 800c8a4:	9b02      	ldr	r3, [sp, #8]
 800c8a6:	1aa7      	subs	r7, r4, r2
 800c8a8:	eb03 0802 	add.w	r8, r3, r2
 800c8ac:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c8ae:	2500      	movs	r5, #0
 800c8b0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9009      	str	r0, [sp, #36]	; 0x24
 800c8ba:	ae20      	add	r6, sp, #128	; 0x80
 800c8bc:	4545      	cmp	r5, r8
 800c8be:	dd14      	ble.n	800c8ea <__kernel_rem_pio2+0x86>
 800c8c0:	f04f 0800 	mov.w	r8, #0
 800c8c4:	9a08      	ldr	r2, [sp, #32]
 800c8c6:	ab20      	add	r3, sp, #128	; 0x80
 800c8c8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c8cc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	4598      	cmp	r8, r3
 800c8d4:	dc35      	bgt.n	800c942 <__kernel_rem_pio2+0xde>
 800c8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f1a3 0908 	sub.w	r9, r3, #8
 800c8de:	2300      	movs	r3, #0
 800c8e0:	462f      	mov	r7, r5
 800c8e2:	2600      	movs	r6, #0
 800c8e4:	e9cd 2300 	strd	r2, r3, [sp]
 800c8e8:	e01f      	b.n	800c92a <__kernel_rem_pio2+0xc6>
 800c8ea:	42ef      	cmn	r7, r5
 800c8ec:	d40b      	bmi.n	800c906 <__kernel_rem_pio2+0xa2>
 800c8ee:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c8f2:	e9cd 2300 	strd	r2, r3, [sp]
 800c8f6:	f7f3 fde9 	bl	80004cc <__aeabi_i2d>
 800c8fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8fe:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c902:	3501      	adds	r5, #1
 800c904:	e7da      	b.n	800c8bc <__kernel_rem_pio2+0x58>
 800c906:	4610      	mov	r0, r2
 800c908:	4619      	mov	r1, r3
 800c90a:	e7f8      	b.n	800c8fe <__kernel_rem_pio2+0x9a>
 800c90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c910:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c914:	f7f3 fe44 	bl	80005a0 <__aeabi_dmul>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c920:	f7f3 fc88 	bl	8000234 <__adddf3>
 800c924:	e9cd 0100 	strd	r0, r1, [sp]
 800c928:	3601      	adds	r6, #1
 800c92a:	9b07      	ldr	r3, [sp, #28]
 800c92c:	3f08      	subs	r7, #8
 800c92e:	429e      	cmp	r6, r3
 800c930:	ddec      	ble.n	800c90c <__kernel_rem_pio2+0xa8>
 800c932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c936:	f108 0801 	add.w	r8, r8, #1
 800c93a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c93e:	3508      	adds	r5, #8
 800c940:	e7c6      	b.n	800c8d0 <__kernel_rem_pio2+0x6c>
 800c942:	9b02      	ldr	r3, [sp, #8]
 800c944:	aa0c      	add	r2, sp, #48	; 0x30
 800c946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c94a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c94c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c94e:	9e02      	ldr	r6, [sp, #8]
 800c950:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c954:	930a      	str	r3, [sp, #40]	; 0x28
 800c956:	ab98      	add	r3, sp, #608	; 0x260
 800c958:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c95c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c960:	ab70      	add	r3, sp, #448	; 0x1c0
 800c962:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c966:	46d0      	mov	r8, sl
 800c968:	46b1      	mov	r9, r6
 800c96a:	af0c      	add	r7, sp, #48	; 0x30
 800c96c:	9700      	str	r7, [sp, #0]
 800c96e:	f1b9 0f00 	cmp.w	r9, #0
 800c972:	f1a8 0808 	sub.w	r8, r8, #8
 800c976:	dc71      	bgt.n	800ca5c <__kernel_rem_pio2+0x1f8>
 800c978:	465a      	mov	r2, fp
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	f000 fbeb 	bl	800d158 <scalbn>
 800c982:	2200      	movs	r2, #0
 800c984:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c988:	4604      	mov	r4, r0
 800c98a:	460d      	mov	r5, r1
 800c98c:	f7f3 fe08 	bl	80005a0 <__aeabi_dmul>
 800c990:	f000 fb62 	bl	800d058 <floor>
 800c994:	2200      	movs	r2, #0
 800c996:	4b6e      	ldr	r3, [pc, #440]	; (800cb50 <__kernel_rem_pio2+0x2ec>)
 800c998:	f7f3 fe02 	bl	80005a0 <__aeabi_dmul>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f7f3 fc44 	bl	8000230 <__aeabi_dsub>
 800c9a8:	460d      	mov	r5, r1
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	f7f4 f892 	bl	8000ad4 <__aeabi_d2iz>
 800c9b0:	9004      	str	r0, [sp, #16]
 800c9b2:	f7f3 fd8b 	bl	80004cc <__aeabi_i2d>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	4629      	mov	r1, r5
 800c9be:	f7f3 fc37 	bl	8000230 <__aeabi_dsub>
 800c9c2:	f1bb 0f00 	cmp.w	fp, #0
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	4689      	mov	r9, r1
 800c9ca:	dd70      	ble.n	800caae <__kernel_rem_pio2+0x24a>
 800c9cc:	1e72      	subs	r2, r6, #1
 800c9ce:	ab0c      	add	r3, sp, #48	; 0x30
 800c9d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c9d4:	9c04      	ldr	r4, [sp, #16]
 800c9d6:	f1cb 0118 	rsb	r1, fp, #24
 800c9da:	fa40 f301 	asr.w	r3, r0, r1
 800c9de:	441c      	add	r4, r3
 800c9e0:	408b      	lsls	r3, r1
 800c9e2:	1ac0      	subs	r0, r0, r3
 800c9e4:	ab0c      	add	r3, sp, #48	; 0x30
 800c9e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c9ea:	f1cb 0317 	rsb	r3, fp, #23
 800c9ee:	9404      	str	r4, [sp, #16]
 800c9f0:	fa40 f303 	asr.w	r3, r0, r3
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	9b00      	ldr	r3, [sp, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	dd66      	ble.n	800caca <__kernel_rem_pio2+0x266>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ca02:	4614      	mov	r4, r2
 800ca04:	9b04      	ldr	r3, [sp, #16]
 800ca06:	3301      	adds	r3, #1
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	4296      	cmp	r6, r2
 800ca0c:	f300 80ac 	bgt.w	800cb68 <__kernel_rem_pio2+0x304>
 800ca10:	f1bb 0f00 	cmp.w	fp, #0
 800ca14:	dd07      	ble.n	800ca26 <__kernel_rem_pio2+0x1c2>
 800ca16:	f1bb 0f01 	cmp.w	fp, #1
 800ca1a:	f000 80b4 	beq.w	800cb86 <__kernel_rem_pio2+0x322>
 800ca1e:	f1bb 0f02 	cmp.w	fp, #2
 800ca22:	f000 80ba 	beq.w	800cb9a <__kernel_rem_pio2+0x336>
 800ca26:	9b00      	ldr	r3, [sp, #0]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d14e      	bne.n	800caca <__kernel_rem_pio2+0x266>
 800ca2c:	4642      	mov	r2, r8
 800ca2e:	464b      	mov	r3, r9
 800ca30:	2000      	movs	r0, #0
 800ca32:	4948      	ldr	r1, [pc, #288]	; (800cb54 <__kernel_rem_pio2+0x2f0>)
 800ca34:	f7f3 fbfc 	bl	8000230 <__aeabi_dsub>
 800ca38:	4680      	mov	r8, r0
 800ca3a:	4689      	mov	r9, r1
 800ca3c:	2c00      	cmp	r4, #0
 800ca3e:	d044      	beq.n	800caca <__kernel_rem_pio2+0x266>
 800ca40:	465a      	mov	r2, fp
 800ca42:	2000      	movs	r0, #0
 800ca44:	4943      	ldr	r1, [pc, #268]	; (800cb54 <__kernel_rem_pio2+0x2f0>)
 800ca46:	f000 fb87 	bl	800d158 <scalbn>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4649      	mov	r1, r9
 800ca52:	f7f3 fbed 	bl	8000230 <__aeabi_dsub>
 800ca56:	4680      	mov	r8, r0
 800ca58:	4689      	mov	r9, r1
 800ca5a:	e036      	b.n	800caca <__kernel_rem_pio2+0x266>
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	4b3e      	ldr	r3, [pc, #248]	; (800cb58 <__kernel_rem_pio2+0x2f4>)
 800ca60:	4620      	mov	r0, r4
 800ca62:	4629      	mov	r1, r5
 800ca64:	f7f3 fd9c 	bl	80005a0 <__aeabi_dmul>
 800ca68:	f7f4 f834 	bl	8000ad4 <__aeabi_d2iz>
 800ca6c:	f7f3 fd2e 	bl	80004cc <__aeabi_i2d>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	4b38      	ldr	r3, [pc, #224]	; (800cb5c <__kernel_rem_pio2+0x2f8>)
 800ca7c:	f7f3 fd90 	bl	80005a0 <__aeabi_dmul>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4620      	mov	r0, r4
 800ca86:	4629      	mov	r1, r5
 800ca88:	f7f3 fbd2 	bl	8000230 <__aeabi_dsub>
 800ca8c:	f7f4 f822 	bl	8000ad4 <__aeabi_d2iz>
 800ca90:	9b00      	ldr	r3, [sp, #0]
 800ca92:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca96:	f843 0b04 	str.w	r0, [r3], #4
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caa0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800caa4:	f7f3 fbc6 	bl	8000234 <__adddf3>
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	e75f      	b.n	800c96e <__kernel_rem_pio2+0x10a>
 800caae:	d105      	bne.n	800cabc <__kernel_rem_pio2+0x258>
 800cab0:	1e73      	subs	r3, r6, #1
 800cab2:	aa0c      	add	r2, sp, #48	; 0x30
 800cab4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cab8:	15c3      	asrs	r3, r0, #23
 800caba:	e79b      	b.n	800c9f4 <__kernel_rem_pio2+0x190>
 800cabc:	2200      	movs	r2, #0
 800cabe:	4b28      	ldr	r3, [pc, #160]	; (800cb60 <__kernel_rem_pio2+0x2fc>)
 800cac0:	f7f3 fff4 	bl	8000aac <__aeabi_dcmpge>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d13e      	bne.n	800cb46 <__kernel_rem_pio2+0x2e2>
 800cac8:	9000      	str	r0, [sp, #0]
 800caca:	2200      	movs	r2, #0
 800cacc:	2300      	movs	r3, #0
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 ffcd 	bl	8000a70 <__aeabi_dcmpeq>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f000 80b1 	beq.w	800cc3e <__kernel_rem_pio2+0x3da>
 800cadc:	1e74      	subs	r4, r6, #1
 800cade:	4623      	mov	r3, r4
 800cae0:	2200      	movs	r2, #0
 800cae2:	9902      	ldr	r1, [sp, #8]
 800cae4:	428b      	cmp	r3, r1
 800cae6:	da5f      	bge.n	800cba8 <__kernel_rem_pio2+0x344>
 800cae8:	2a00      	cmp	r2, #0
 800caea:	d074      	beq.n	800cbd6 <__kernel_rem_pio2+0x372>
 800caec:	ab0c      	add	r3, sp, #48	; 0x30
 800caee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800caf2:	f1ab 0b18 	sub.w	fp, fp, #24
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 809f 	beq.w	800cc3a <__kernel_rem_pio2+0x3d6>
 800cafc:	465a      	mov	r2, fp
 800cafe:	2000      	movs	r0, #0
 800cb00:	4914      	ldr	r1, [pc, #80]	; (800cb54 <__kernel_rem_pio2+0x2f0>)
 800cb02:	f000 fb29 	bl	800d158 <scalbn>
 800cb06:	46a2      	mov	sl, r4
 800cb08:	4606      	mov	r6, r0
 800cb0a:	460f      	mov	r7, r1
 800cb0c:	f04f 0800 	mov.w	r8, #0
 800cb10:	ab70      	add	r3, sp, #448	; 0x1c0
 800cb12:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800cb58 <__kernel_rem_pio2+0x2f4>
 800cb16:	00e5      	lsls	r5, r4, #3
 800cb18:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800cb1c:	f1ba 0f00 	cmp.w	sl, #0
 800cb20:	f280 80c3 	bge.w	800ccaa <__kernel_rem_pio2+0x446>
 800cb24:	4626      	mov	r6, r4
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	f2c0 80f5 	blt.w	800cd16 <__kernel_rem_pio2+0x4b2>
 800cb2c:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <__kernel_rem_pio2+0x300>)
 800cb2e:	f04f 0a00 	mov.w	sl, #0
 800cb32:	9307      	str	r3, [sp, #28]
 800cb34:	ab70      	add	r3, sp, #448	; 0x1c0
 800cb36:	f04f 0b00 	mov.w	fp, #0
 800cb3a:	f04f 0800 	mov.w	r8, #0
 800cb3e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800cb42:	1ba7      	subs	r7, r4, r6
 800cb44:	e0db      	b.n	800ccfe <__kernel_rem_pio2+0x49a>
 800cb46:	2302      	movs	r3, #2
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	e757      	b.n	800c9fc <__kernel_rem_pio2+0x198>
 800cb4c:	0800dbd8 	.word	0x0800dbd8
 800cb50:	40200000 	.word	0x40200000
 800cb54:	3ff00000 	.word	0x3ff00000
 800cb58:	3e700000 	.word	0x3e700000
 800cb5c:	41700000 	.word	0x41700000
 800cb60:	3fe00000 	.word	0x3fe00000
 800cb64:	0800db98 	.word	0x0800db98
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	b944      	cbnz	r4, 800cb7e <__kernel_rem_pio2+0x31a>
 800cb6c:	b11b      	cbz	r3, 800cb76 <__kernel_rem_pio2+0x312>
 800cb6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cb72:	603b      	str	r3, [r7, #0]
 800cb74:	2301      	movs	r3, #1
 800cb76:	461c      	mov	r4, r3
 800cb78:	3201      	adds	r2, #1
 800cb7a:	3704      	adds	r7, #4
 800cb7c:	e745      	b.n	800ca0a <__kernel_rem_pio2+0x1a6>
 800cb7e:	1acb      	subs	r3, r1, r3
 800cb80:	603b      	str	r3, [r7, #0]
 800cb82:	4623      	mov	r3, r4
 800cb84:	e7f7      	b.n	800cb76 <__kernel_rem_pio2+0x312>
 800cb86:	1e72      	subs	r2, r6, #1
 800cb88:	ab0c      	add	r3, sp, #48	; 0x30
 800cb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb92:	a90c      	add	r1, sp, #48	; 0x30
 800cb94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cb98:	e745      	b.n	800ca26 <__kernel_rem_pio2+0x1c2>
 800cb9a:	1e72      	subs	r2, r6, #1
 800cb9c:	ab0c      	add	r3, sp, #48	; 0x30
 800cb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cba6:	e7f4      	b.n	800cb92 <__kernel_rem_pio2+0x32e>
 800cba8:	a90c      	add	r1, sp, #48	; 0x30
 800cbaa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	e796      	b.n	800cae2 <__kernel_rem_pio2+0x27e>
 800cbb4:	3401      	adds	r4, #1
 800cbb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	d0fa      	beq.n	800cbb4 <__kernel_rem_pio2+0x350>
 800cbbe:	9b08      	ldr	r3, [sp, #32]
 800cbc0:	f106 0801 	add.w	r8, r6, #1
 800cbc4:	18f5      	adds	r5, r6, r3
 800cbc6:	ab20      	add	r3, sp, #128	; 0x80
 800cbc8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cbcc:	4434      	add	r4, r6
 800cbce:	4544      	cmp	r4, r8
 800cbd0:	da04      	bge.n	800cbdc <__kernel_rem_pio2+0x378>
 800cbd2:	4626      	mov	r6, r4
 800cbd4:	e6bf      	b.n	800c956 <__kernel_rem_pio2+0xf2>
 800cbd6:	2401      	movs	r4, #1
 800cbd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbda:	e7ec      	b.n	800cbb6 <__kernel_rem_pio2+0x352>
 800cbdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbde:	f04f 0900 	mov.w	r9, #0
 800cbe2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cbe6:	f7f3 fc71 	bl	80004cc <__aeabi_i2d>
 800cbea:	2600      	movs	r6, #0
 800cbec:	2700      	movs	r7, #0
 800cbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf0:	e9c5 0100 	strd	r0, r1, [r5]
 800cbf4:	3b08      	subs	r3, #8
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	9504      	str	r5, [sp, #16]
 800cbfa:	9b07      	ldr	r3, [sp, #28]
 800cbfc:	4599      	cmp	r9, r3
 800cbfe:	dd05      	ble.n	800cc0c <__kernel_rem_pio2+0x3a8>
 800cc00:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800cc04:	f108 0801 	add.w	r8, r8, #1
 800cc08:	3508      	adds	r5, #8
 800cc0a:	e7e0      	b.n	800cbce <__kernel_rem_pio2+0x36a>
 800cc0c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800cc10:	9900      	ldr	r1, [sp, #0]
 800cc12:	f109 0901 	add.w	r9, r9, #1
 800cc16:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800cc1a:	9100      	str	r1, [sp, #0]
 800cc1c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800cc20:	f8cd c010 	str.w	ip, [sp, #16]
 800cc24:	f7f3 fcbc 	bl	80005a0 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 fb00 	bl	8000234 <__adddf3>
 800cc34:	4606      	mov	r6, r0
 800cc36:	460f      	mov	r7, r1
 800cc38:	e7df      	b.n	800cbfa <__kernel_rem_pio2+0x396>
 800cc3a:	3c01      	subs	r4, #1
 800cc3c:	e756      	b.n	800caec <__kernel_rem_pio2+0x288>
 800cc3e:	f1cb 0200 	rsb	r2, fp, #0
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	f000 fa87 	bl	800d158 <scalbn>
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	4ba4      	ldr	r3, [pc, #656]	; (800cee0 <__kernel_rem_pio2+0x67c>)
 800cc4e:	4604      	mov	r4, r0
 800cc50:	460d      	mov	r5, r1
 800cc52:	f7f3 ff2b 	bl	8000aac <__aeabi_dcmpge>
 800cc56:	b1f8      	cbz	r0, 800cc98 <__kernel_rem_pio2+0x434>
 800cc58:	2200      	movs	r2, #0
 800cc5a:	4ba2      	ldr	r3, [pc, #648]	; (800cee4 <__kernel_rem_pio2+0x680>)
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fc9e 	bl	80005a0 <__aeabi_dmul>
 800cc64:	f7f3 ff36 	bl	8000ad4 <__aeabi_d2iz>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	f7f3 fc2f 	bl	80004cc <__aeabi_i2d>
 800cc6e:	2200      	movs	r2, #0
 800cc70:	4b9b      	ldr	r3, [pc, #620]	; (800cee0 <__kernel_rem_pio2+0x67c>)
 800cc72:	f7f3 fc95 	bl	80005a0 <__aeabi_dmul>
 800cc76:	460b      	mov	r3, r1
 800cc78:	4602      	mov	r2, r0
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f7f3 fad7 	bl	8000230 <__aeabi_dsub>
 800cc82:	f7f3 ff27 	bl	8000ad4 <__aeabi_d2iz>
 800cc86:	1c74      	adds	r4, r6, #1
 800cc88:	ab0c      	add	r3, sp, #48	; 0x30
 800cc8a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cc8e:	f10b 0b18 	add.w	fp, fp, #24
 800cc92:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800cc96:	e731      	b.n	800cafc <__kernel_rem_pio2+0x298>
 800cc98:	4620      	mov	r0, r4
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	f7f3 ff1a 	bl	8000ad4 <__aeabi_d2iz>
 800cca0:	ab0c      	add	r3, sp, #48	; 0x30
 800cca2:	4634      	mov	r4, r6
 800cca4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cca8:	e728      	b.n	800cafc <__kernel_rem_pio2+0x298>
 800ccaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ccac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ccb0:	f7f3 fc0c 	bl	80004cc <__aeabi_i2d>
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	f7f3 fc72 	bl	80005a0 <__aeabi_dmul>
 800ccbc:	4642      	mov	r2, r8
 800ccbe:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ccc2:	464b      	mov	r3, r9
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 fc6a 	bl	80005a0 <__aeabi_dmul>
 800cccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	460f      	mov	r7, r1
 800ccd4:	e722      	b.n	800cb1c <__kernel_rem_pio2+0x2b8>
 800ccd6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ccda:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ccde:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800cce2:	f8cd c01c 	str.w	ip, [sp, #28]
 800cce6:	f7f3 fc5b 	bl	80005a0 <__aeabi_dmul>
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4650      	mov	r0, sl
 800ccf0:	4659      	mov	r1, fp
 800ccf2:	f7f3 fa9f 	bl	8000234 <__adddf3>
 800ccf6:	4682      	mov	sl, r0
 800ccf8:	468b      	mov	fp, r1
 800ccfa:	f108 0801 	add.w	r8, r8, #1
 800ccfe:	9b02      	ldr	r3, [sp, #8]
 800cd00:	4598      	cmp	r8, r3
 800cd02:	dc01      	bgt.n	800cd08 <__kernel_rem_pio2+0x4a4>
 800cd04:	45b8      	cmp	r8, r7
 800cd06:	dde6      	ble.n	800ccd6 <__kernel_rem_pio2+0x472>
 800cd08:	ab48      	add	r3, sp, #288	; 0x120
 800cd0a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cd0e:	e9c7 ab00 	strd	sl, fp, [r7]
 800cd12:	3e01      	subs	r6, #1
 800cd14:	e707      	b.n	800cb26 <__kernel_rem_pio2+0x2c2>
 800cd16:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	dc09      	bgt.n	800cd30 <__kernel_rem_pio2+0x4cc>
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dc32      	bgt.n	800cd86 <__kernel_rem_pio2+0x522>
 800cd20:	d05a      	beq.n	800cdd8 <__kernel_rem_pio2+0x574>
 800cd22:	9b04      	ldr	r3, [sp, #16]
 800cd24:	f003 0007 	and.w	r0, r3, #7
 800cd28:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd30:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d1f5      	bne.n	800cd22 <__kernel_rem_pio2+0x4be>
 800cd36:	ab48      	add	r3, sp, #288	; 0x120
 800cd38:	441d      	add	r5, r3
 800cd3a:	46aa      	mov	sl, r5
 800cd3c:	46a3      	mov	fp, r4
 800cd3e:	f1bb 0f00 	cmp.w	fp, #0
 800cd42:	dc76      	bgt.n	800ce32 <__kernel_rem_pio2+0x5ce>
 800cd44:	46aa      	mov	sl, r5
 800cd46:	46a3      	mov	fp, r4
 800cd48:	f1bb 0f01 	cmp.w	fp, #1
 800cd4c:	f300 8090 	bgt.w	800ce70 <__kernel_rem_pio2+0x60c>
 800cd50:	2700      	movs	r7, #0
 800cd52:	463e      	mov	r6, r7
 800cd54:	2c01      	cmp	r4, #1
 800cd56:	f300 80aa 	bgt.w	800ceae <__kernel_rem_pio2+0x64a>
 800cd5a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800cd5e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800cd62:	9b00      	ldr	r3, [sp, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f040 80ac 	bne.w	800cec2 <__kernel_rem_pio2+0x65e>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	462a      	mov	r2, r5
 800cd6e:	9806      	ldr	r0, [sp, #24]
 800cd70:	e9c0 2300 	strd	r2, r3, [r0]
 800cd74:	4622      	mov	r2, r4
 800cd76:	460b      	mov	r3, r1
 800cd78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cd7c:	463a      	mov	r2, r7
 800cd7e:	4633      	mov	r3, r6
 800cd80:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cd84:	e7cd      	b.n	800cd22 <__kernel_rem_pio2+0x4be>
 800cd86:	2000      	movs	r0, #0
 800cd88:	46a0      	mov	r8, r4
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	ab48      	add	r3, sp, #288	; 0x120
 800cd8e:	441d      	add	r5, r3
 800cd90:	f1b8 0f00 	cmp.w	r8, #0
 800cd94:	da3a      	bge.n	800ce0c <__kernel_rem_pio2+0x5a8>
 800cd96:	9b00      	ldr	r3, [sp, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d03e      	beq.n	800ce1a <__kernel_rem_pio2+0x5b6>
 800cd9c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800cda0:	4602      	mov	r2, r0
 800cda2:	462b      	mov	r3, r5
 800cda4:	9d06      	ldr	r5, [sp, #24]
 800cda6:	2601      	movs	r6, #1
 800cda8:	e9c5 2300 	strd	r2, r3, [r5]
 800cdac:	460b      	mov	r3, r1
 800cdae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cdb2:	f7f3 fa3d 	bl	8000230 <__aeabi_dsub>
 800cdb6:	4684      	mov	ip, r0
 800cdb8:	460f      	mov	r7, r1
 800cdba:	ad48      	add	r5, sp, #288	; 0x120
 800cdbc:	42b4      	cmp	r4, r6
 800cdbe:	f105 0508 	add.w	r5, r5, #8
 800cdc2:	da2c      	bge.n	800ce1e <__kernel_rem_pio2+0x5ba>
 800cdc4:	9b00      	ldr	r3, [sp, #0]
 800cdc6:	b10b      	cbz	r3, 800cdcc <__kernel_rem_pio2+0x568>
 800cdc8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cdcc:	4662      	mov	r2, ip
 800cdce:	463b      	mov	r3, r7
 800cdd0:	9906      	ldr	r1, [sp, #24]
 800cdd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cdd6:	e7a4      	b.n	800cd22 <__kernel_rem_pio2+0x4be>
 800cdd8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800cdda:	ab48      	add	r3, sp, #288	; 0x120
 800cddc:	4637      	mov	r7, r6
 800cdde:	441d      	add	r5, r3
 800cde0:	2c00      	cmp	r4, #0
 800cde2:	da09      	bge.n	800cdf8 <__kernel_rem_pio2+0x594>
 800cde4:	9b00      	ldr	r3, [sp, #0]
 800cde6:	b10b      	cbz	r3, 800cdec <__kernel_rem_pio2+0x588>
 800cde8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cdec:	4632      	mov	r2, r6
 800cdee:	463b      	mov	r3, r7
 800cdf0:	9906      	ldr	r1, [sp, #24]
 800cdf2:	e9c1 2300 	strd	r2, r3, [r1]
 800cdf6:	e794      	b.n	800cd22 <__kernel_rem_pio2+0x4be>
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7f3 fa18 	bl	8000234 <__adddf3>
 800ce04:	3c01      	subs	r4, #1
 800ce06:	4606      	mov	r6, r0
 800ce08:	460f      	mov	r7, r1
 800ce0a:	e7e9      	b.n	800cde0 <__kernel_rem_pio2+0x57c>
 800ce0c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ce10:	f7f3 fa10 	bl	8000234 <__adddf3>
 800ce14:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce18:	e7ba      	b.n	800cd90 <__kernel_rem_pio2+0x52c>
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	e7c0      	b.n	800cda0 <__kernel_rem_pio2+0x53c>
 800ce1e:	4660      	mov	r0, ip
 800ce20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce24:	4639      	mov	r1, r7
 800ce26:	f7f3 fa05 	bl	8000234 <__adddf3>
 800ce2a:	3601      	adds	r6, #1
 800ce2c:	4684      	mov	ip, r0
 800ce2e:	460f      	mov	r7, r1
 800ce30:	e7c4      	b.n	800cdbc <__kernel_rem_pio2+0x558>
 800ce32:	e9da 6700 	ldrd	r6, r7, [sl]
 800ce36:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ce3a:	4632      	mov	r2, r6
 800ce3c:	463b      	mov	r3, r7
 800ce3e:	4640      	mov	r0, r8
 800ce40:	4649      	mov	r1, r9
 800ce42:	f7f3 f9f7 	bl	8000234 <__adddf3>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4649      	mov	r1, r9
 800ce52:	f7f3 f9ed 	bl	8000230 <__aeabi_dsub>
 800ce56:	4632      	mov	r2, r6
 800ce58:	463b      	mov	r3, r7
 800ce5a:	f7f3 f9eb 	bl	8000234 <__adddf3>
 800ce5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce62:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ce66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce6a:	e9ca 2300 	strd	r2, r3, [sl]
 800ce6e:	e766      	b.n	800cd3e <__kernel_rem_pio2+0x4da>
 800ce70:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce74:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ce78:	4642      	mov	r2, r8
 800ce7a:	464b      	mov	r3, r9
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 f9d8 	bl	8000234 <__adddf3>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 f9ce 	bl	8000230 <__aeabi_dsub>
 800ce94:	4642      	mov	r2, r8
 800ce96:	464b      	mov	r3, r9
 800ce98:	f7f3 f9cc 	bl	8000234 <__adddf3>
 800ce9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cea0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cea4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cea8:	e9ca 2300 	strd	r2, r3, [sl]
 800ceac:	e74c      	b.n	800cd48 <__kernel_rem_pio2+0x4e4>
 800ceae:	4638      	mov	r0, r7
 800ceb0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	f7f3 f9bd 	bl	8000234 <__adddf3>
 800ceba:	3c01      	subs	r4, #1
 800cebc:	4607      	mov	r7, r0
 800cebe:	460e      	mov	r6, r1
 800cec0:	e748      	b.n	800cd54 <__kernel_rem_pio2+0x4f0>
 800cec2:	9b06      	ldr	r3, [sp, #24]
 800cec4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cec8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cecc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ced0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ced4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ced8:	601d      	str	r5, [r3, #0]
 800ceda:	615e      	str	r6, [r3, #20]
 800cedc:	e721      	b.n	800cd22 <__kernel_rem_pio2+0x4be>
 800cede:	bf00      	nop
 800cee0:	41700000 	.word	0x41700000
 800cee4:	3e700000 	.word	0x3e700000

0800cee8 <__kernel_sin>:
 800cee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceec:	b086      	sub	sp, #24
 800ceee:	e9cd 2300 	strd	r2, r3, [sp]
 800cef2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cef6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cefa:	4682      	mov	sl, r0
 800cefc:	460c      	mov	r4, r1
 800cefe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cf00:	da03      	bge.n	800cf0a <__kernel_sin+0x22>
 800cf02:	f7f3 fde7 	bl	8000ad4 <__aeabi_d2iz>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d050      	beq.n	800cfac <__kernel_sin+0xc4>
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	4623      	mov	r3, r4
 800cf0e:	4650      	mov	r0, sl
 800cf10:	4621      	mov	r1, r4
 800cf12:	f7f3 fb45 	bl	80005a0 <__aeabi_dmul>
 800cf16:	4606      	mov	r6, r0
 800cf18:	460f      	mov	r7, r1
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4650      	mov	r0, sl
 800cf20:	4621      	mov	r1, r4
 800cf22:	f7f3 fb3d 	bl	80005a0 <__aeabi_dmul>
 800cf26:	a33e      	add	r3, pc, #248	; (adr r3, 800d020 <__kernel_sin+0x138>)
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	4680      	mov	r8, r0
 800cf2e:	4689      	mov	r9, r1
 800cf30:	4630      	mov	r0, r6
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 fb34 	bl	80005a0 <__aeabi_dmul>
 800cf38:	a33b      	add	r3, pc, #236	; (adr r3, 800d028 <__kernel_sin+0x140>)
 800cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3e:	f7f3 f977 	bl	8000230 <__aeabi_dsub>
 800cf42:	4632      	mov	r2, r6
 800cf44:	463b      	mov	r3, r7
 800cf46:	f7f3 fb2b 	bl	80005a0 <__aeabi_dmul>
 800cf4a:	a339      	add	r3, pc, #228	; (adr r3, 800d030 <__kernel_sin+0x148>)
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	f7f3 f970 	bl	8000234 <__adddf3>
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	f7f3 fb22 	bl	80005a0 <__aeabi_dmul>
 800cf5c:	a336      	add	r3, pc, #216	; (adr r3, 800d038 <__kernel_sin+0x150>)
 800cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf62:	f7f3 f965 	bl	8000230 <__aeabi_dsub>
 800cf66:	4632      	mov	r2, r6
 800cf68:	463b      	mov	r3, r7
 800cf6a:	f7f3 fb19 	bl	80005a0 <__aeabi_dmul>
 800cf6e:	a334      	add	r3, pc, #208	; (adr r3, 800d040 <__kernel_sin+0x158>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 f95e 	bl	8000234 <__adddf3>
 800cf78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf7c:	b9dd      	cbnz	r5, 800cfb6 <__kernel_sin+0xce>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	4630      	mov	r0, r6
 800cf84:	4639      	mov	r1, r7
 800cf86:	f7f3 fb0b 	bl	80005a0 <__aeabi_dmul>
 800cf8a:	a32f      	add	r3, pc, #188	; (adr r3, 800d048 <__kernel_sin+0x160>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	f7f3 f94e 	bl	8000230 <__aeabi_dsub>
 800cf94:	4642      	mov	r2, r8
 800cf96:	464b      	mov	r3, r9
 800cf98:	f7f3 fb02 	bl	80005a0 <__aeabi_dmul>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	4650      	mov	r0, sl
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	f7f3 f946 	bl	8000234 <__adddf3>
 800cfa8:	4682      	mov	sl, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	4650      	mov	r0, sl
 800cfae:	4621      	mov	r1, r4
 800cfb0:	b006      	add	sp, #24
 800cfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfbc:	4b24      	ldr	r3, [pc, #144]	; (800d050 <__kernel_sin+0x168>)
 800cfbe:	f7f3 faef 	bl	80005a0 <__aeabi_dmul>
 800cfc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfca:	4640      	mov	r0, r8
 800cfcc:	4649      	mov	r1, r9
 800cfce:	f7f3 fae7 	bl	80005a0 <__aeabi_dmul>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfda:	f7f3 f929 	bl	8000230 <__aeabi_dsub>
 800cfde:	4632      	mov	r2, r6
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	f7f3 fadd 	bl	80005a0 <__aeabi_dmul>
 800cfe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfea:	f7f3 f921 	bl	8000230 <__aeabi_dsub>
 800cfee:	a316      	add	r3, pc, #88	; (adr r3, 800d048 <__kernel_sin+0x160>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	4606      	mov	r6, r0
 800cff6:	460f      	mov	r7, r1
 800cff8:	4640      	mov	r0, r8
 800cffa:	4649      	mov	r1, r9
 800cffc:	f7f3 fad0 	bl	80005a0 <__aeabi_dmul>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	4630      	mov	r0, r6
 800d006:	4639      	mov	r1, r7
 800d008:	f7f3 f914 	bl	8000234 <__adddf3>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4650      	mov	r0, sl
 800d012:	4621      	mov	r1, r4
 800d014:	f7f3 f90c 	bl	8000230 <__aeabi_dsub>
 800d018:	e7c6      	b.n	800cfa8 <__kernel_sin+0xc0>
 800d01a:	bf00      	nop
 800d01c:	f3af 8000 	nop.w
 800d020:	5acfd57c 	.word	0x5acfd57c
 800d024:	3de5d93a 	.word	0x3de5d93a
 800d028:	8a2b9ceb 	.word	0x8a2b9ceb
 800d02c:	3e5ae5e6 	.word	0x3e5ae5e6
 800d030:	57b1fe7d 	.word	0x57b1fe7d
 800d034:	3ec71de3 	.word	0x3ec71de3
 800d038:	19c161d5 	.word	0x19c161d5
 800d03c:	3f2a01a0 	.word	0x3f2a01a0
 800d040:	1110f8a6 	.word	0x1110f8a6
 800d044:	3f811111 	.word	0x3f811111
 800d048:	55555549 	.word	0x55555549
 800d04c:	3fc55555 	.word	0x3fc55555
 800d050:	3fe00000 	.word	0x3fe00000
 800d054:	00000000 	.word	0x00000000

0800d058 <floor>:
 800d058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d05c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d060:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d064:	2e13      	cmp	r6, #19
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4607      	mov	r7, r0
 800d06c:	460c      	mov	r4, r1
 800d06e:	4605      	mov	r5, r0
 800d070:	dc33      	bgt.n	800d0da <floor+0x82>
 800d072:	2e00      	cmp	r6, #0
 800d074:	da14      	bge.n	800d0a0 <floor+0x48>
 800d076:	a334      	add	r3, pc, #208	; (adr r3, 800d148 <floor+0xf0>)
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	f7f3 f8da 	bl	8000234 <__adddf3>
 800d080:	2200      	movs	r2, #0
 800d082:	2300      	movs	r3, #0
 800d084:	f7f3 fd1c 	bl	8000ac0 <__aeabi_dcmpgt>
 800d088:	b138      	cbz	r0, 800d09a <floor+0x42>
 800d08a:	2c00      	cmp	r4, #0
 800d08c:	da58      	bge.n	800d140 <floor+0xe8>
 800d08e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d092:	431d      	orrs	r5, r3
 800d094:	d001      	beq.n	800d09a <floor+0x42>
 800d096:	2500      	movs	r5, #0
 800d098:	4c2d      	ldr	r4, [pc, #180]	; (800d150 <floor+0xf8>)
 800d09a:	4623      	mov	r3, r4
 800d09c:	462f      	mov	r7, r5
 800d09e:	e025      	b.n	800d0ec <floor+0x94>
 800d0a0:	4a2c      	ldr	r2, [pc, #176]	; (800d154 <floor+0xfc>)
 800d0a2:	fa42 f806 	asr.w	r8, r2, r6
 800d0a6:	ea01 0208 	and.w	r2, r1, r8
 800d0aa:	4302      	orrs	r2, r0
 800d0ac:	d01e      	beq.n	800d0ec <floor+0x94>
 800d0ae:	a326      	add	r3, pc, #152	; (adr r3, 800d148 <floor+0xf0>)
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	f7f3 f8be 	bl	8000234 <__adddf3>
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f7f3 fd00 	bl	8000ac0 <__aeabi_dcmpgt>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d0ea      	beq.n	800d09a <floor+0x42>
 800d0c4:	2c00      	cmp	r4, #0
 800d0c6:	bfbe      	ittt	lt
 800d0c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d0cc:	fa43 f606 	asrlt.w	r6, r3, r6
 800d0d0:	19a4      	addlt	r4, r4, r6
 800d0d2:	2500      	movs	r5, #0
 800d0d4:	ea24 0408 	bic.w	r4, r4, r8
 800d0d8:	e7df      	b.n	800d09a <floor+0x42>
 800d0da:	2e33      	cmp	r6, #51	; 0x33
 800d0dc:	dd0a      	ble.n	800d0f4 <floor+0x9c>
 800d0de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d0e2:	d103      	bne.n	800d0ec <floor+0x94>
 800d0e4:	f7f3 f8a6 	bl	8000234 <__adddf3>
 800d0e8:	4607      	mov	r7, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d0fc:	fa22 f808 	lsr.w	r8, r2, r8
 800d100:	ea18 0f00 	tst.w	r8, r0
 800d104:	d0f2      	beq.n	800d0ec <floor+0x94>
 800d106:	a310      	add	r3, pc, #64	; (adr r3, 800d148 <floor+0xf0>)
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f7f3 f892 	bl	8000234 <__adddf3>
 800d110:	2200      	movs	r2, #0
 800d112:	2300      	movs	r3, #0
 800d114:	f7f3 fcd4 	bl	8000ac0 <__aeabi_dcmpgt>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d0be      	beq.n	800d09a <floor+0x42>
 800d11c:	2c00      	cmp	r4, #0
 800d11e:	da02      	bge.n	800d126 <floor+0xce>
 800d120:	2e14      	cmp	r6, #20
 800d122:	d103      	bne.n	800d12c <floor+0xd4>
 800d124:	3401      	adds	r4, #1
 800d126:	ea25 0508 	bic.w	r5, r5, r8
 800d12a:	e7b6      	b.n	800d09a <floor+0x42>
 800d12c:	2301      	movs	r3, #1
 800d12e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d132:	fa03 f606 	lsl.w	r6, r3, r6
 800d136:	4435      	add	r5, r6
 800d138:	42bd      	cmp	r5, r7
 800d13a:	bf38      	it	cc
 800d13c:	18e4      	addcc	r4, r4, r3
 800d13e:	e7f2      	b.n	800d126 <floor+0xce>
 800d140:	2500      	movs	r5, #0
 800d142:	462c      	mov	r4, r5
 800d144:	e7a9      	b.n	800d09a <floor+0x42>
 800d146:	bf00      	nop
 800d148:	8800759c 	.word	0x8800759c
 800d14c:	7e37e43c 	.word	0x7e37e43c
 800d150:	bff00000 	.word	0xbff00000
 800d154:	000fffff 	.word	0x000fffff

0800d158 <scalbn>:
 800d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d15e:	4604      	mov	r4, r0
 800d160:	460d      	mov	r5, r1
 800d162:	4617      	mov	r7, r2
 800d164:	460b      	mov	r3, r1
 800d166:	b996      	cbnz	r6, 800d18e <scalbn+0x36>
 800d168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d16c:	4303      	orrs	r3, r0
 800d16e:	d039      	beq.n	800d1e4 <scalbn+0x8c>
 800d170:	4b33      	ldr	r3, [pc, #204]	; (800d240 <scalbn+0xe8>)
 800d172:	2200      	movs	r2, #0
 800d174:	f7f3 fa14 	bl	80005a0 <__aeabi_dmul>
 800d178:	4b32      	ldr	r3, [pc, #200]	; (800d244 <scalbn+0xec>)
 800d17a:	4604      	mov	r4, r0
 800d17c:	429f      	cmp	r7, r3
 800d17e:	460d      	mov	r5, r1
 800d180:	da0f      	bge.n	800d1a2 <scalbn+0x4a>
 800d182:	a32b      	add	r3, pc, #172	; (adr r3, 800d230 <scalbn+0xd8>)
 800d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d188:	f7f3 fa0a 	bl	80005a0 <__aeabi_dmul>
 800d18c:	e006      	b.n	800d19c <scalbn+0x44>
 800d18e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d192:	4296      	cmp	r6, r2
 800d194:	d10a      	bne.n	800d1ac <scalbn+0x54>
 800d196:	4602      	mov	r2, r0
 800d198:	f7f3 f84c 	bl	8000234 <__adddf3>
 800d19c:	4604      	mov	r4, r0
 800d19e:	460d      	mov	r5, r1
 800d1a0:	e020      	b.n	800d1e4 <scalbn+0x8c>
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d1a8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d1ac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d1b0:	19b9      	adds	r1, r7, r6
 800d1b2:	4291      	cmp	r1, r2
 800d1b4:	dd0e      	ble.n	800d1d4 <scalbn+0x7c>
 800d1b6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d1ba:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d1be:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d1c2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d1c6:	4820      	ldr	r0, [pc, #128]	; (800d248 <scalbn+0xf0>)
 800d1c8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d1cc:	a31a      	add	r3, pc, #104	; (adr r3, 800d238 <scalbn+0xe0>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	e7d9      	b.n	800d188 <scalbn+0x30>
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	dd08      	ble.n	800d1ea <scalbn+0x92>
 800d1d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d1ee:	da12      	bge.n	800d216 <scalbn+0xbe>
 800d1f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d1f4:	429f      	cmp	r7, r3
 800d1f6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d1fa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d1fe:	dcdc      	bgt.n	800d1ba <scalbn+0x62>
 800d200:	a30b      	add	r3, pc, #44	; (adr r3, 800d230 <scalbn+0xd8>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d20a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d20e:	480f      	ldr	r0, [pc, #60]	; (800d24c <scalbn+0xf4>)
 800d210:	f041 011f 	orr.w	r1, r1, #31
 800d214:	e7b8      	b.n	800d188 <scalbn+0x30>
 800d216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d21a:	3136      	adds	r1, #54	; 0x36
 800d21c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d220:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d224:	4620      	mov	r0, r4
 800d226:	4629      	mov	r1, r5
 800d228:	2200      	movs	r2, #0
 800d22a:	4b09      	ldr	r3, [pc, #36]	; (800d250 <scalbn+0xf8>)
 800d22c:	e7ac      	b.n	800d188 <scalbn+0x30>
 800d22e:	bf00      	nop
 800d230:	c2f8f359 	.word	0xc2f8f359
 800d234:	01a56e1f 	.word	0x01a56e1f
 800d238:	8800759c 	.word	0x8800759c
 800d23c:	7e37e43c 	.word	0x7e37e43c
 800d240:	43500000 	.word	0x43500000
 800d244:	ffff3cb0 	.word	0xffff3cb0
 800d248:	8800759c 	.word	0x8800759c
 800d24c:	c2f8f359 	.word	0xc2f8f359
 800d250:	3c900000 	.word	0x3c900000

0800d254 <_init>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	bf00      	nop
 800d258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25a:	bc08      	pop	{r3}
 800d25c:	469e      	mov	lr, r3
 800d25e:	4770      	bx	lr

0800d260 <_fini>:
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d262:	bf00      	nop
 800d264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d266:	bc08      	pop	{r3}
 800d268:	469e      	mov	lr, r3
 800d26a:	4770      	bx	lr
