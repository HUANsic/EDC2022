
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800a4c0  0800a4c0  0001a4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a800  0800a800  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a800  0800a800  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a800  0800a800  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  20000074  0800a87c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  0800a87c  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f6c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1a  00000000  00000000  00032009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00034b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00035d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003572  00000000  00000000  00036e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015725  00000000  00000000  0003a3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dcd3  00000000  00000000  0004facf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac8  00000000  00000000  000ed7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a4a4 	.word	0x0800a4a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	0800a4a4 	.word	0x0800a4a4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_d2f>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b6c:	bf24      	itt	cs
 8000b6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b76:	d90d      	bls.n	8000b94 <__aeabi_d2f+0x30>
 8000b78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b98:	d121      	bne.n	8000bde <__aeabi_d2f+0x7a>
 8000b9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9e:	bfbc      	itt	lt
 8000ba0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	4770      	bxlt	lr
 8000ba6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bae:	f1c2 0218 	rsb	r2, r2, #24
 8000bb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	f040 0001 	orrne.w	r0, r0, #1
 8000bc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd0:	ea40 000c 	orr.w	r0, r0, ip
 8000bd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bdc:	e7cc      	b.n	8000b78 <__aeabi_d2f+0x14>
 8000bde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be2:	d107      	bne.n	8000bf4 <__aeabi_d2f+0x90>
 8000be4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be8:	bf1e      	ittt	ne
 8000bea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf2:	4770      	bxne	lr
 8000bf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_frsub>:
 8000c04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	e002      	b.n	8000c10 <__addsf3>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fsub>:
 8000c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c10 <__addsf3>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	bf1f      	itttt	ne
 8000c14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c18:	ea92 0f03 	teqne	r2, r3
 8000c1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c24:	d06a      	beq.n	8000cfc <__addsf3+0xec>
 8000c26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2e:	bfc1      	itttt	gt
 8000c30:	18d2      	addgt	r2, r2, r3
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	4048      	eorgt	r0, r1
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	bfb8      	it	lt
 8000c3a:	425b      	neglt	r3, r3
 8000c3c:	2b19      	cmp	r3, #25
 8000c3e:	bf88      	it	hi
 8000c40:	4770      	bxhi	lr
 8000c42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4240      	negne	r0, r0
 8000c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4249      	negne	r1, r1
 8000c62:	ea92 0f03 	teq	r2, r3
 8000c66:	d03f      	beq.n	8000ce8 <__addsf3+0xd8>
 8000c68:	f1a2 0201 	sub.w	r2, r2, #1
 8000c6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c70:	eb10 000c 	adds.w	r0, r0, ip
 8000c74:	f1c3 0320 	rsb	r3, r3, #32
 8000c78:	fa01 f103 	lsl.w	r1, r1, r3
 8000c7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	d502      	bpl.n	8000c88 <__addsf3+0x78>
 8000c82:	4249      	negs	r1, r1
 8000c84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c8c:	d313      	bcc.n	8000cb6 <__addsf3+0xa6>
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c92:	d306      	bcc.n	8000ca2 <__addsf3+0x92>
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9a:	f102 0201 	add.w	r2, r2, #1
 8000c9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ca0:	d251      	bcs.n	8000d46 <__addsf3+0x136>
 8000ca2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000caa:	bf08      	it	eq
 8000cac:	f020 0001 	biceq.w	r0, r0, #1
 8000cb0:	ea40 0003 	orr.w	r0, r0, r3
 8000cb4:	4770      	bx	lr
 8000cb6:	0049      	lsls	r1, r1, #1
 8000cb8:	eb40 0000 	adc.w	r0, r0, r0
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	bf28      	it	cs
 8000cc0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc4:	d2ed      	bcs.n	8000ca2 <__addsf3+0x92>
 8000cc6:	fab0 fc80 	clz	ip, r0
 8000cca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cce:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd6:	bfaa      	itet	ge
 8000cd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cdc:	4252      	neglt	r2, r2
 8000cde:	4318      	orrge	r0, r3
 8000ce0:	bfbc      	itt	lt
 8000ce2:	40d0      	lsrlt	r0, r2
 8000ce4:	4318      	orrlt	r0, r3
 8000ce6:	4770      	bx	lr
 8000ce8:	f092 0f00 	teq	r2, #0
 8000cec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf0:	bf06      	itte	eq
 8000cf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf6:	3201      	addeq	r2, #1
 8000cf8:	3b01      	subne	r3, #1
 8000cfa:	e7b5      	b.n	8000c68 <__addsf3+0x58>
 8000cfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d04:	bf18      	it	ne
 8000d06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0a:	d021      	beq.n	8000d50 <__addsf3+0x140>
 8000d0c:	ea92 0f03 	teq	r2, r3
 8000d10:	d004      	beq.n	8000d1c <__addsf3+0x10c>
 8000d12:	f092 0f00 	teq	r2, #0
 8000d16:	bf08      	it	eq
 8000d18:	4608      	moveq	r0, r1
 8000d1a:	4770      	bx	lr
 8000d1c:	ea90 0f01 	teq	r0, r1
 8000d20:	bf1c      	itt	ne
 8000d22:	2000      	movne	r0, #0
 8000d24:	4770      	bxne	lr
 8000d26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2a:	d104      	bne.n	8000d36 <__addsf3+0x126>
 8000d2c:	0040      	lsls	r0, r0, #1
 8000d2e:	bf28      	it	cs
 8000d30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3a:	bf3c      	itt	cc
 8000d3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d40:	4770      	bxcc	lr
 8000d42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4e:	4770      	bx	lr
 8000d50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d54:	bf16      	itet	ne
 8000d56:	4608      	movne	r0, r1
 8000d58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d5c:	4601      	movne	r1, r0
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	bf06      	itte	eq
 8000d62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d66:	ea90 0f01 	teqeq	r0, r1
 8000d6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_ui2f>:
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e004      	b.n	8000d80 <__aeabi_i2f+0x8>
 8000d76:	bf00      	nop

08000d78 <__aeabi_i2f>:
 8000d78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d7c:	bf48      	it	mi
 8000d7e:	4240      	negmi	r0, r0
 8000d80:	ea5f 0c00 	movs.w	ip, r0
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	e01c      	b.n	8000dce <__aeabi_l2f+0x2a>

08000d94 <__aeabi_ul2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e00a      	b.n	8000db8 <__aeabi_l2f+0x14>
 8000da2:	bf00      	nop

08000da4 <__aeabi_l2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_l2f+0x14>
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	ea5f 0c01 	movs.w	ip, r1
 8000dbc:	bf02      	ittt	eq
 8000dbe:	4684      	moveq	ip, r0
 8000dc0:	4601      	moveq	r1, r0
 8000dc2:	2000      	moveq	r0, #0
 8000dc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc8:	bf08      	it	eq
 8000dca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd2:	fabc f28c 	clz	r2, ip
 8000dd6:	3a08      	subs	r2, #8
 8000dd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ddc:	db10      	blt.n	8000e00 <__aeabi_l2f+0x5c>
 8000dde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de2:	4463      	add	r3, ip
 8000de4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de8:	f1c2 0220 	rsb	r2, r2, #32
 8000dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df0:	fa20 f202 	lsr.w	r2, r0, r2
 8000df4:	eb43 0002 	adc.w	r0, r3, r2
 8000df8:	bf08      	it	eq
 8000dfa:	f020 0001 	biceq.w	r0, r0, #1
 8000dfe:	4770      	bx	lr
 8000e00:	f102 0220 	add.w	r2, r2, #32
 8000e04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e08:	f1c2 0220 	rsb	r2, r2, #32
 8000e0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e10:	fa21 f202 	lsr.w	r2, r1, r2
 8000e14:	eb43 0002 	adc.w	r0, r3, r2
 8000e18:	bf08      	it	eq
 8000e1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fmul>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d06f      	beq.n	8000f18 <__aeabi_fmul+0xf8>
 8000e38:	441a      	add	r2, r3
 8000e3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3e:	0240      	lsls	r0, r0, #9
 8000e40:	bf18      	it	ne
 8000e42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e46:	d01e      	beq.n	8000e86 <__aeabi_fmul+0x66>
 8000e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e54:	fba0 3101 	umull	r3, r1, r0, r1
 8000e58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e60:	bf3e      	ittt	cc
 8000e62:	0049      	lslcc	r1, r1, #1
 8000e64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	ea40 0001 	orr.w	r0, r0, r1
 8000e6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e72:	2afd      	cmp	r2, #253	; 0xfd
 8000e74:	d81d      	bhi.n	8000eb2 <__aeabi_fmul+0x92>
 8000e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7e:	bf08      	it	eq
 8000e80:	f020 0001 	biceq.w	r0, r0, #1
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8e:	bf08      	it	eq
 8000e90:	0249      	lsleq	r1, r1, #9
 8000e92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e9a:	3a7f      	subs	r2, #127	; 0x7f
 8000e9c:	bfc2      	ittt	gt
 8000e9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea6:	4770      	bxgt	lr
 8000ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	dc5d      	bgt.n	8000f70 <__aeabi_fmul+0x150>
 8000eb4:	f112 0f19 	cmn.w	r2, #25
 8000eb8:	bfdc      	itt	le
 8000eba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ebe:	4770      	bxle	lr
 8000ec0:	f1c2 0200 	rsb	r2, r2, #0
 8000ec4:	0041      	lsls	r1, r0, #1
 8000ec6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eca:	f1c2 0220 	rsb	r2, r2, #32
 8000ece:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ed2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed6:	f140 0000 	adc.w	r0, r0, #0
 8000eda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ede:	bf08      	it	eq
 8000ee0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee4:	4770      	bx	lr
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fmul+0xce>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xe6>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e78f      	b.n	8000e38 <__aeabi_fmul+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	bf18      	it	ne
 8000f22:	ea93 0f0c 	teqne	r3, ip
 8000f26:	d00a      	beq.n	8000f3e <__aeabi_fmul+0x11e>
 8000f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f2c:	bf18      	it	ne
 8000f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	d1d8      	bne.n	8000ee6 <__aeabi_fmul+0xc6>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	4770      	bx	lr
 8000f3e:	f090 0f00 	teq	r0, #0
 8000f42:	bf17      	itett	ne
 8000f44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f48:	4608      	moveq	r0, r1
 8000f4a:	f091 0f00 	teqne	r1, #0
 8000f4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f52:	d014      	beq.n	8000f7e <__aeabi_fmul+0x15e>
 8000f54:	ea92 0f0c 	teq	r2, ip
 8000f58:	d101      	bne.n	8000f5e <__aeabi_fmul+0x13e>
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	d10f      	bne.n	8000f7e <__aeabi_fmul+0x15e>
 8000f5e:	ea93 0f0c 	teq	r3, ip
 8000f62:	d103      	bne.n	8000f6c <__aeabi_fmul+0x14c>
 8000f64:	024b      	lsls	r3, r1, #9
 8000f66:	bf18      	it	ne
 8000f68:	4608      	movne	r0, r1
 8000f6a:	d108      	bne.n	8000f7e <__aeabi_fmul+0x15e>
 8000f6c:	ea80 0001 	eor.w	r0, r0, r1
 8000f70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7c:	4770      	bx	lr
 8000f7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f86:	4770      	bx	lr

08000f88 <__aeabi_fdiv>:
 8000f88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f90:	bf1e      	ittt	ne
 8000f92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f96:	ea92 0f0c 	teqne	r2, ip
 8000f9a:	ea93 0f0c 	teqne	r3, ip
 8000f9e:	d069      	beq.n	8001074 <__aeabi_fdiv+0xec>
 8000fa0:	eba2 0203 	sub.w	r2, r2, r3
 8000fa4:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa8:	0249      	lsls	r1, r1, #9
 8000faa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fae:	d037      	beq.n	8001020 <__aeabi_fdiv+0x98>
 8000fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	bf38      	it	cc
 8000fc4:	005b      	lslcc	r3, r3, #1
 8000fc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	bf24      	itt	cs
 8000fd2:	1a5b      	subcs	r3, r3, r1
 8000fd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fe2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fea:	bf24      	itt	cs
 8000fec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ff0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff8:	bf24      	itt	cs
 8000ffa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	bf18      	it	ne
 8001006:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800100a:	d1e0      	bne.n	8000fce <__aeabi_fdiv+0x46>
 800100c:	2afd      	cmp	r2, #253	; 0xfd
 800100e:	f63f af50 	bhi.w	8000eb2 <__aeabi_fmul+0x92>
 8001012:	428b      	cmp	r3, r1
 8001014:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001018:	bf08      	it	eq
 800101a:	f020 0001 	biceq.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001024:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001028:	327f      	adds	r2, #127	; 0x7f
 800102a:	bfc2      	ittt	gt
 800102c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001030:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001034:	4770      	bxgt	lr
 8001036:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	3a01      	subs	r2, #1
 8001040:	e737      	b.n	8000eb2 <__aeabi_fmul+0x92>
 8001042:	f092 0f00 	teq	r2, #0
 8001046:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800104a:	bf02      	ittt	eq
 800104c:	0040      	lsleq	r0, r0, #1
 800104e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001052:	3a01      	subeq	r2, #1
 8001054:	d0f9      	beq.n	800104a <__aeabi_fdiv+0xc2>
 8001056:	ea40 000c 	orr.w	r0, r0, ip
 800105a:	f093 0f00 	teq	r3, #0
 800105e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0049      	lsleq	r1, r1, #1
 8001066:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800106a:	3b01      	subeq	r3, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xda>
 800106e:	ea41 010c 	orr.w	r1, r1, ip
 8001072:	e795      	b.n	8000fa0 <__aeabi_fdiv+0x18>
 8001074:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001078:	ea92 0f0c 	teq	r2, ip
 800107c:	d108      	bne.n	8001090 <__aeabi_fdiv+0x108>
 800107e:	0242      	lsls	r2, r0, #9
 8001080:	f47f af7d 	bne.w	8000f7e <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	f47f af70 	bne.w	8000f6c <__aeabi_fmul+0x14c>
 800108c:	4608      	mov	r0, r1
 800108e:	e776      	b.n	8000f7e <__aeabi_fmul+0x15e>
 8001090:	ea93 0f0c 	teq	r3, ip
 8001094:	d104      	bne.n	80010a0 <__aeabi_fdiv+0x118>
 8001096:	024b      	lsls	r3, r1, #9
 8001098:	f43f af4c 	beq.w	8000f34 <__aeabi_fmul+0x114>
 800109c:	4608      	mov	r0, r1
 800109e:	e76e      	b.n	8000f7e <__aeabi_fmul+0x15e>
 80010a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a4:	bf18      	it	ne
 80010a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010aa:	d1ca      	bne.n	8001042 <__aeabi_fdiv+0xba>
 80010ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010b0:	f47f af5c 	bne.w	8000f6c <__aeabi_fmul+0x14c>
 80010b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b8:	f47f af3c 	bne.w	8000f34 <__aeabi_fmul+0x114>
 80010bc:	e75f      	b.n	8000f7e <__aeabi_fmul+0x15e>
 80010be:	bf00      	nop

080010c0 <__gesf2>:
 80010c0:	f04f 3cff 	mov.w	ip, #4294967295
 80010c4:	e006      	b.n	80010d4 <__cmpsf2+0x4>
 80010c6:	bf00      	nop

080010c8 <__lesf2>:
 80010c8:	f04f 0c01 	mov.w	ip, #1
 80010cc:	e002      	b.n	80010d4 <__cmpsf2+0x4>
 80010ce:	bf00      	nop

080010d0 <__cmpsf2>:
 80010d0:	f04f 0c01 	mov.w	ip, #1
 80010d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e4:	bf18      	it	ne
 80010e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ea:	d011      	beq.n	8001110 <__cmpsf2+0x40>
 80010ec:	b001      	add	sp, #4
 80010ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010f2:	bf18      	it	ne
 80010f4:	ea90 0f01 	teqne	r0, r1
 80010f8:	bf58      	it	pl
 80010fa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fe:	bf88      	it	hi
 8001100:	17c8      	asrhi	r0, r1, #31
 8001102:	bf38      	it	cc
 8001104:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001108:	bf18      	it	ne
 800110a:	f040 0001 	orrne.w	r0, r0, #1
 800110e:	4770      	bx	lr
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__cmpsf2+0x4c>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d105      	bne.n	8001128 <__cmpsf2+0x58>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d1e4      	bne.n	80010ec <__cmpsf2+0x1c>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d0e1      	beq.n	80010ec <__cmpsf2+0x1c>
 8001128:	f85d 0b04 	ldr.w	r0, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <__aeabi_cfrcmple>:
 8001130:	4684      	mov	ip, r0
 8001132:	4608      	mov	r0, r1
 8001134:	4661      	mov	r1, ip
 8001136:	e7ff      	b.n	8001138 <__aeabi_cfcmpeq>

08001138 <__aeabi_cfcmpeq>:
 8001138:	b50f      	push	{r0, r1, r2, r3, lr}
 800113a:	f7ff ffc9 	bl	80010d0 <__cmpsf2>
 800113e:	2800      	cmp	r0, #0
 8001140:	bf48      	it	mi
 8001142:	f110 0f00 	cmnmi.w	r0, #0
 8001146:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001148 <__aeabi_fcmpeq>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff fff4 	bl	8001138 <__aeabi_cfcmpeq>
 8001150:	bf0c      	ite	eq
 8001152:	2001      	moveq	r0, #1
 8001154:	2000      	movne	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmplt>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffea 	bl	8001138 <__aeabi_cfcmpeq>
 8001164:	bf34      	ite	cc
 8001166:	2001      	movcc	r0, #1
 8001168:	2000      	movcs	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_fcmple>:
 8001170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001174:	f7ff ffe0 	bl	8001138 <__aeabi_cfcmpeq>
 8001178:	bf94      	ite	ls
 800117a:	2001      	movls	r0, #1
 800117c:	2000      	movhi	r0, #0
 800117e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001182:	bf00      	nop

08001184 <__aeabi_fcmpge>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff ffd2 	bl	8001130 <__aeabi_cfrcmple>
 800118c:	bf94      	ite	ls
 800118e:	2001      	movls	r0, #1
 8001190:	2000      	movhi	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmpgt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffc8 	bl	8001130 <__aeabi_cfrcmple>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_f2uiz>:
 80011ac:	0042      	lsls	r2, r0, #1
 80011ae:	d20e      	bcs.n	80011ce <__aeabi_f2uiz+0x22>
 80011b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b4:	d30b      	bcc.n	80011ce <__aeabi_f2uiz+0x22>
 80011b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011be:	d409      	bmi.n	80011d4 <__aeabi_f2uiz+0x28>
 80011c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c8:	fa23 f002 	lsr.w	r0, r3, r2
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr
 80011d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011d8:	d101      	bne.n	80011de <__aeabi_f2uiz+0x32>
 80011da:	0242      	lsls	r2, r0, #9
 80011dc:	d102      	bne.n	80011e4 <__aeabi_f2uiz+0x38>
 80011de:	f04f 30ff 	mov.w	r0, #4294967295
 80011e2:	4770      	bx	lr
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <huansic_jy62_init+0x12>
		return IMU_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e026      	b.n	800124c <huansic_jy62_init+0x60>

	if (!himu->huart)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e020      	b.n	800124c <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800120a:	2003      	movs	r0, #3
 800120c:	f003 f8b2 	bl	8004374 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	230a      	movs	r3, #10
 8001216:	2203      	movs	r2, #3
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <huansic_jy62_init+0x68>)
 800121a:	f006 fa27 	bl	800766c <HAL_UART_Transmit>

// instead, just use DMA
	himu->pending_alignment = 0;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3334      	adds	r3, #52	; 0x34
 800122e:	2221      	movs	r2, #33	; 0x21
 8001230:	4619      	mov	r1, r3
 8001232:	f006 fadd 	bl	80077f0 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0204 	bic.w	r2, r2, #4
 8001248:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000

08001258 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e112      	b.n	8001490 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	2300      	movs	r3, #0
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	e0ed      	b.n	8001450 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800127e:	2b55      	cmp	r3, #85	; 0x55
 8001280:	d01c      	beq.n	80012bc <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3334      	adds	r3, #52	; 0x34
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	f006 fa7b 	bl	8007790 <HAL_UART_Receive_IT>
			if (i) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00b      	beq.n	80012b8 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fa69 	bl	8001780 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80012ae:	f003 f857 	bl	8004360 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 80012b8:	2305      	movs	r3, #5
 80012ba:	e0e9      	b.n	8001490 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	3301      	adds	r3, #1
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	4413      	add	r3, r2
 80012d8:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	3302      	adds	r3, #2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	4413      	add	r3, r2
 80012ea:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	3303      	adds	r3, #3
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	4413      	add	r3, r2
 80012fc:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	3304      	adds	r3, #4
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800130a:	7b7b      	ldrb	r3, [r7, #13]
 800130c:	4413      	add	r3, r2
 800130e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	3305      	adds	r3, #5
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	4413      	add	r3, r2
 8001320:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	3306      	adds	r3, #6
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800132e:	7b7b      	ldrb	r3, [r7, #13]
 8001330:	4413      	add	r3, r2
 8001332:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	3307      	adds	r3, #7
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001340:	7b7b      	ldrb	r3, [r7, #13]
 8001342:	4413      	add	r3, r2
 8001344:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	3308      	adds	r3, #8
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001352:	7b7b      	ldrb	r3, [r7, #13]
 8001354:	4413      	add	r3, r2
 8001356:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	3309      	adds	r3, #9
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	4413      	add	r3, r2
 8001368:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	330a      	adds	r3, #10
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001376:	7b7a      	ldrb	r2, [r7, #13]
 8001378:	429a      	cmp	r2, r3
 800137a:	d01c      	beq.n	80013b6 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3334      	adds	r3, #52	; 0x34
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	f006 f9fe 	bl	8007790 <HAL_UART_Receive_IT>
				if (i) {
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	3b01      	subs	r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f9ec 	bl	8001780 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80013a8:	f002 ffda 	bl	8004360 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 80013b2:	2304      	movs	r3, #4
 80013b4:	e06c      	b.n	8001490 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	3301      	adds	r3, #1
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013c2:	2b51      	cmp	r3, #81	; 0x51
 80013c4:	d105      	bne.n	80013d2 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4619      	mov	r1, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f8c4 	bl	8001558 <__huansic_jy62_decode_accel>
 80013d0:	e038      	b.n	8001444 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	3301      	adds	r3, #1
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013de:	2b52      	cmp	r3, #82	; 0x52
 80013e0:	d105      	bne.n	80013ee <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f920 	bl	800162c <__huansic_jy62_decode_omega>
 80013ec:	e02a      	b.n	8001444 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	3301      	adds	r3, #1
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013fa:	2b53      	cmp	r3, #83	; 0x53
 80013fc:	d105      	bne.n	800140a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f966 	bl	80016d4 <__huansic_jy62_decode_theta>
 8001408:	e01c      	b.n	8001444 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3334      	adds	r3, #52	; 0x34
 800141a:	2201      	movs	r2, #1
 800141c:	4619      	mov	r1, r3
 800141e:	f006 f9b7 	bl	8007790 <HAL_UART_Receive_IT>
				if (i) {
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3b01      	subs	r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4619      	mov	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f9a5 	bl	8001780 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001436:	f002 ff93 	bl	8004360 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 8001440:	2306      	movs	r3, #6
 8001442:	e025      	b.n	8001490 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	3301      	adds	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	7bbb      	ldrb	r3, [r7, #14]
 800144c:	330b      	adds	r3, #11
 800144e:	73bb      	strb	r3, [r7, #14]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b02      	cmp	r3, #2
 8001454:	f67f af0e 	bls.w	8001274 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 8001458:	f002 ff82 	bl	8004360 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 8001462:	2102      	movs	r1, #2
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f98b 	bl	8001780 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3334      	adds	r3, #52	; 0x34
 8001472:	2221      	movs	r2, #33	; 0x21
 8001474:	4619      	mov	r1, r3
 8001476:	f006 f9bb 	bl	80077f0 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0204 	bic.w	r2, r2, #4
 800148c:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if (!himu)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e029      	b.n	80014fe <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014b0:	2b55      	cmp	r3, #85	; 0x55
 80014b2:	d00d      	beq.n	80014d0 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3334      	adds	r3, #52	; 0x34
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	f006 f962 	bl	8007790 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 80014cc:	2305      	movs	r3, #5
 80014ce:	e016      	b.n	80014fe <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3335      	adds	r3, #53	; 0x35
 80014e0:	2220      	movs	r2, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	f006 f984 	bl	80077f0 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0204 	bic.w	r2, r2, #4
 80014fa:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 80014fc:	2300      	movs	r3, #0
	}
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3334      	adds	r3, #52	; 0x34
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	f006 f935 	bl	8007790 <HAL_UART_Receive_IT>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3334      	adds	r3, #52	; 0x34
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f006 f921 	bl	8007790 <HAL_UART_Receive_IT>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e050      	b.n	800160c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[2 + 2 * i + location * 11];
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3301      	adds	r3, #1
 800156e:	0059      	lsls	r1, r3, #1
 8001570:	78fa      	ldrb	r2, [r7, #3]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	440b      	add	r3, r1
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001586:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001588:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1cd9      	adds	r1, r3, #3
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	89bb      	ldrh	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 80015b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fbdd 	bl	8000d78 <__aeabi_i2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fc2b 	bl	8000e20 <__aeabi_fmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff8f 	bl	80004f0 <__aeabi_f2d>
 80015d2:	a313      	add	r3, pc, #76	; (adr r3, 8001620 <__huansic_jy62_decode_accel+0xc8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7fe ffe2 	bl	80005a0 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <__huansic_jy62_decode_accel+0xd0>)
 80015ea:	f7ff f903 	bl	80007f4 <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	7bfc      	ldrb	r4, [r7, #15]
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fab4 	bl	8000b64 <__aeabi_d2f>
 80015fc:	4601      	mov	r1, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1ca2      	adds	r2, r4, #2
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d9ab      	bls.n	800156a <__huansic_jy62_decode_accel+0x12>
	}
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	9999999a 	.word	0x9999999a
 8001624:	40239999 	.word	0x40239999
 8001628:	40e00000 	.word	0x40e00000

0800162c <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e03f      	b.n	80016be <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[4 + 2 * i + location * 11];
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3302      	adds	r3, #2
 8001642:	0059      	lsls	r1, r3, #1
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	440b      	add	r3, r1
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800165a:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 800165c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[5 + 2 * i + location * 11];
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	1d59      	adds	r1, r3, #5
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	440b      	add	r3, r1
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001680:	b21a      	sxth	r2, r3
 8001682:	89bb      	ldrh	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8001688:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb73 	bl	8000d78 <__aeabi_i2f>
 8001692:	4603      	mov	r3, r0
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <__huansic_jy62_decode_omega+0xa4>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fbc2 	bl	8000e20 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	7bfc      	ldrb	r4, [r7, #15]
 80016a0:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fc6f 	bl	8000f88 <__aeabi_fdiv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4619      	mov	r1, r3
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	1d23      	adds	r3, r4, #4
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	3301      	adds	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d9bc      	bls.n	800163e <__huansic_jy62_decode_omega+0x12>
	}
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	bf00      	nop
 80016d0:	44fa0000 	.word	0x44fa0000

080016d4 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e03f      	b.n	8001766 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[6 + 2 * i + location * 11];
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	3303      	adds	r3, #3
 80016ea:	0059      	lsls	r1, r3, #1
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001702:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001704:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[7 + 2 * i + location * 11];
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	1dd9      	adds	r1, r3, #7
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	440b      	add	r3, r1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001728:	b21a      	sxth	r2, r3
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 8001730:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb1f 	bl	8000d78 <__aeabi_i2f>
 800173a:	4603      	mov	r3, r0
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <__huansic_jy62_decode_theta+0xa4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb6e 	bl	8000e20 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	7bfc      	ldrb	r4, [r7, #15]
 8001748:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fc1b 	bl	8000f88 <__aeabi_fdiv>
 8001752:	4603      	mov	r3, r0
 8001754:	4619      	mov	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f104 0208 	add.w	r2, r4, #8
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d9bc      	bls.n	80016e6 <__huansic_jy62_decode_theta+0x12>
	}
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	43340000 	.word	0x43340000
 800177c:	00000000 	.word	0x00000000

08001780 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3308      	adds	r3, #8
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a2:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 80017a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3309      	adds	r3, #9
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fad2 	bl	8000d78 <__aeabi_i2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4910      	ldr	r1, [pc, #64]	; (8001818 <__huansic_jy62_decode_temp+0x98>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fbd5 	bl	8000f88 <__aeabi_fdiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe85 	bl	80004f0 <__aeabi_f2d>
 80017e6:	a30a      	add	r3, pc, #40	; (adr r3, 8001810 <__huansic_jy62_decode_temp+0x90>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe fd22 	bl	8000234 <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9b4 	bl	8000b64 <__aeabi_d2f>
 80017fc:	4602      	mov	r2, r0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	0a3d70a4 	.word	0x0a3d70a4
 8001814:	404243d7 	.word	0x404243d7
 8001818:	43aa0000 	.word	0x43aa0000

0800181c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d101      	bne.n	8001848 <huansic_order_new+0x18>
		return 0;
 8001844:	2300      	movs	r3, #0
 8001846:	e046      	b.n	80018d6 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e017      	b.n	800187e <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	4923      	ldr	r1, [pc, #140]	; (80018e0 <huansic_order_new+0xb0>)
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3310      	adds	r3, #16
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <huansic_order_new+0xb0>)
 8001874:	4413      	add	r3, r2
 8001876:	e02e      	b.n	80018d6 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	3301      	adds	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b3b      	cmp	r3, #59	; 0x3b
 8001882:	d9e4      	bls.n	800184e <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e021      	b.n	80018ce <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	4914      	ldr	r1, [pc, #80]	; (80018e0 <huansic_order_new+0xb0>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3310      	adds	r3, #16
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d112      	bne.n	80018c8 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <huansic_order_new+0xb0>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4403      	add	r3, r0
 80018b4:	3310      	adds	r3, #16
 80018b6:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <huansic_order_new+0xb0>)
 80018c4:	4413      	add	r3, r2
 80018c6:	e006      	b.n	80018d6 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	3301      	adds	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b3b      	cmp	r3, #59	; 0x3b
 80018d2:	d9da      	bls.n	800188a <huansic_order_new+0x5a>
		}
	}

	return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000090 	.word	0x20000090

080018e4 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d103      	bne.n	80018fe <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff90 	bl	800181c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 80018fc:	e003      	b.n	8001906 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	611a      	str	r2, [r3, #16]
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <huansic_motor_init+0x1c>
 8001920:	4b55      	ldr	r3, [pc, #340]	; (8001a78 <huansic_motor_init+0x168>)
 8001922:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <huansic_motor_init+0x16c>)
 8001924:	210c      	movs	r1, #12
 8001926:	4856      	ldr	r0, [pc, #344]	; (8001a80 <huansic_motor_init+0x170>)
 8001928:	f006 fce4 	bl	80082f4 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <huansic_motor_init+0x30>
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <huansic_motor_init+0x174>)
 8001936:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <huansic_motor_init+0x16c>)
 8001938:	210d      	movs	r1, #13
 800193a:	4851      	ldr	r0, [pc, #324]	; (8001a80 <huansic_motor_init+0x170>)
 800193c:	f006 fcda 	bl	80082f4 <__assert_func>
	assert(hmotor->dt);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fbfd 	bl	8001148 <__aeabi_fcmpeq>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <huansic_motor_init+0x50>
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <huansic_motor_init+0x178>)
 8001956:	4a49      	ldr	r2, [pc, #292]	; (8001a7c <huansic_motor_init+0x16c>)
 8001958:	210e      	movs	r1, #14
 800195a:	4849      	ldr	r0, [pc, #292]	; (8001a80 <huansic_motor_init+0x170>)
 800195c:	f006 fcca 	bl	80082f4 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
 80019aa:	e01c      	b.n	80019e6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d105      	bne.n	80019c0 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
 80019be:	e012      	b.n	80019e6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d105      	bne.n	80019d4 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d2:	e008      	b.n	80019e6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d104      	bne.n	80019e6 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d026      	beq.n	8001a3c <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001a00:	e01c      	b.n	8001a3c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d105      	bne.n	8001a16 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
 8001a14:	e012      	b.n	8001a3c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d105      	bne.n	8001a2a <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a28:	e008      	b.n	8001a3c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d104      	bne.n	8001a3c <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	213c      	movs	r1, #60	; 0x3c
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fed0 	bl	80067e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f004 fd6c 	bl	8006530 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f004 fd60 	bl	8006530 <HAL_TIM_PWM_Start>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	0800a4c0 	.word	0x0800a4c0
 8001a7c:	0800a528 	.word	0x0800a528
 8001a80:	0800a4d0 	.word	0x0800a4d0
 8001a84:	0800a4f0 	.word	0x0800a4f0
 8001a88:	0800a504 	.word	0x0800a504

08001a8c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8001aa8:	8afb      	ldrh	r3, [r7, #22]
 8001aaa:	425b      	negs	r3, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8001ab0:	8afa      	ldrh	r2, [r7, #22]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 8001abc:	8afa      	ldrh	r2, [r7, #22]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001ac2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f956 	bl	8000d78 <__aeabi_i2f>
 8001acc:	4602      	mov	r2, r0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f7ff fa57 	bl	8000f88 <__aeabi_fdiv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff f88b 	bl	8000c0c <__aeabi_fsub>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4619      	mov	r1, r3
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff f886 	bl	8000c0c <__aeabi_fsub>
 8001b00:	4603      	mov	r3, r0
 8001b02:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f7ff f87c 	bl	8000c0c <__aeabi_fsub>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7ff f872 	bl	8000c10 <__addsf3>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f7ff f96e 	bl	8000e20 <__aeabi_fmul>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461c      	mov	r4, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7ff f964 	bl	8000e20 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff f857 	bl	8000c10 <__addsf3>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f957 	bl	8000e20 <__aeabi_fmul>
 8001b72:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001b74:	4619      	mov	r1, r3
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff f84a 	bl	8000c10 <__addsf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8001b80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff fb07 	bl	8001198 <__aeabi_fcmpgt>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <huansic_motor_pid+0x10a>
 8001b90:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b94:	e009      	b.n	8001baa <huansic_motor_pid+0x11e>
 8001b96:	4954      	ldr	r1, [pc, #336]	; (8001ce8 <huansic_motor_pid+0x25c>)
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fadf 	bl	800115c <__aeabi_fcmplt>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <huansic_motor_pid+0x11c>
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <huansic_motor_pid+0x25c>)
 8001ba6:	e000      	b.n	8001baa <huansic_motor_pid+0x11e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff faf1 	bl	8001198 <__aeabi_fcmpgt>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d019      	beq.n	8001bf0 <huansic_motor_pid+0x164>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f8d0 	bl	8000d70 <__aeabi_ui2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff f923 	bl	8000e20 <__aeabi_fmul>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f007 fc8b 	bl	80094f8 <roundf>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fae1 	bl	80011ac <__aeabi_f2uiz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	e000      	b.n	8001bf2 <huansic_motor_pid+0x166>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff faaf 	bl	800115c <__aeabi_fcmplt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d019      	beq.n	8001c38 <huansic_motor_pid+0x1ac>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f8ac 	bl	8000d70 <__aeabi_ui2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff f8ff 	bl	8000e20 <__aeabi_fmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f007 fc67 	bl	80094f8 <roundf>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fabd 	bl	80011ac <__aeabi_f2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	e000      	b.n	8001c3a <huansic_motor_pid+0x1ae>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <huansic_motor_pid+0x1c4>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	897a      	ldrh	r2, [r7, #10]
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4e:	e01c      	b.n	8001c8a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d105      	bne.n	8001c64 <huansic_motor_pid+0x1d8>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	897a      	ldrh	r2, [r7, #10]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
 8001c62:	e012      	b.n	8001c8a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d105      	bne.n	8001c78 <huansic_motor_pid+0x1ec>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	897a      	ldrh	r2, [r7, #10]
 8001c74:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c76:	e008      	b.n	8001c8a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d104      	bne.n	8001c8a <huansic_motor_pid+0x1fe>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	897a      	ldrh	r2, [r7, #10]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d026      	beq.n	8001ce0 <huansic_motor_pid+0x254>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <huansic_motor_pid+0x21a>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	893a      	ldrh	r2, [r7, #8]
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001ca4:	e01c      	b.n	8001ce0 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d105      	bne.n	8001cba <huansic_motor_pid+0x22e>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cb8:	e012      	b.n	8001ce0 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d105      	bne.n	8001cce <huansic_motor_pid+0x242>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ccc:	e008      	b.n	8001ce0 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d104      	bne.n	8001ce0 <huansic_motor_pid+0x254>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	893a      	ldrh	r2, [r7, #8]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	bf800000 	.word	0xbf800000

08001cec <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]

}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f103 010a 	add.w	r1, r3, #10
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7a5b      	ldrb	r3, [r3, #9]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f005 fd66 	bl	80077f0 <HAL_UART_Receive_DMA>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7a99      	ldrb	r1, [r3, #10]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7adb      	ldrb	r3, [r3, #11]
 8001d40:	404b      	eors	r3, r1
 8001d42:	b2d9      	uxtb	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7b1b      	ldrb	r3, [r3, #12]
 8001d48:	404b      	eors	r3, r1
 8001d4a:	b2d9      	uxtb	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7b5b      	ldrb	r3, [r3, #13]
 8001d50:	404b      	eors	r3, r1
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7b9b      	ldrb	r3, [r3, #14]
 8001d58:	404b      	eors	r3, r1
 8001d5a:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e01d      	b.n	8001da0 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7a9b      	ldrb	r3, [r3, #10]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d005      	beq.n	8001d78 <huansic_xb_decodeHeader+0x4c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7a9b      	ldrb	r3, [r3, #10]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d001      	beq.n	8001d78 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e013      	b.n	8001da0 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7a9a      	ldrb	r2, [r3, #10]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7b9a      	ldrb	r2, [r3, #14]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f103 010a 	add.w	r1, r3, #10
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7a5b      	ldrb	r3, [r3, #9]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f005 fd29 	bl	80077f0 <HAL_UART_Receive_DMA>
	return 1;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	76fb      	strb	r3, [r7, #27]
 8001db4:	2300      	movs	r3, #0
 8001db6:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7a1b      	ldrb	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	f040 816d 	bne.w	800209c <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001dc2:	7f7b      	ldrb	r3, [r7, #29]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	777a      	strb	r2, [r7, #29]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	7a9a      	ldrb	r2, [r3, #10]
 8001dd0:	4b8c      	ldr	r3, [pc, #560]	; (8002004 <huansic_xb_decodeBody+0x25c>)
 8001dd2:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001dd4:	7f7b      	ldrb	r3, [r7, #29]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	77fb      	strb	r3, [r7, #31]
 8001dde:	e075      	b.n	8001ecc <huansic_xb_decodeBody+0x124>
			index += 2;
 8001de0:	7f7b      	ldrb	r3, [r7, #29]
 8001de2:	3302      	adds	r3, #2
 8001de4:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001de6:	7f7b      	ldrb	r3, [r7, #29]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	777a      	strb	r2, [r7, #29]
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	7a9b      	ldrb	r3, [r3, #10]
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	b211      	sxth	r1, r2
 8001dfa:	4a83      	ldr	r2, [pc, #524]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001dfc:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001e00:	7f7b      	ldrb	r3, [r7, #29]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	777a      	strb	r2, [r7, #29]
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	7a9a      	ldrb	r2, [r3, #10]
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	b211      	sxth	r1, r2
 8001e12:	4a7d      	ldr	r2, [pc, #500]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001e14:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001e18:	7f7b      	ldrb	r3, [r7, #29]
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001e1e:	7f7b      	ldrb	r3, [r7, #29]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	777a      	strb	r2, [r7, #29]
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	7a9b      	ldrb	r3, [r3, #10]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	b211      	sxth	r1, r2
 8001e32:	4a75      	ldr	r2, [pc, #468]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	460a      	mov	r2, r1
 8001e3a:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001e3c:	7f7b      	ldrb	r3, [r7, #29]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	7a9a      	ldrb	r2, [r3, #10]
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	b211      	sxth	r1, r2
 8001e48:	4a6f      	ldr	r2, [pc, #444]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	460a      	mov	r2, r1
 8001e50:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001e52:	7f7b      	ldrb	r3, [r7, #29]
 8001e54:	3302      	adds	r3, #2
 8001e56:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001e58:	7f7b      	ldrb	r3, [r7, #29]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	777a      	strb	r2, [r7, #29]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	7a9b      	ldrb	r3, [r3, #10]
 8001e66:	021a      	lsls	r2, r3, #8
 8001e68:	7ffb      	ldrb	r3, [r7, #31]
 8001e6a:	b211      	sxth	r1, r2
 8001e6c:	4a66      	ldr	r2, [pc, #408]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	460a      	mov	r2, r1
 8001e74:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001e76:	7f7b      	ldrb	r3, [r7, #29]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	7a9a      	ldrb	r2, [r3, #10]
 8001e7e:	7ffb      	ldrb	r3, [r7, #31]
 8001e80:	b211      	sxth	r1, r2
 8001e82:	4a61      	ldr	r2, [pc, #388]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	460a      	mov	r2, r1
 8001e8a:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001e8c:	7f7b      	ldrb	r3, [r7, #29]
 8001e8e:	3302      	adds	r3, #2
 8001e90:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001e92:	7f7b      	ldrb	r3, [r7, #29]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	777a      	strb	r2, [r7, #29]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	7a9b      	ldrb	r3, [r3, #10]
 8001ea0:	021a      	lsls	r2, r3, #8
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	b211      	sxth	r1, r2
 8001ea6:	4a58      	ldr	r2, [pc, #352]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	460a      	mov	r2, r1
 8001eae:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001eb0:	7f7b      	ldrb	r3, [r7, #29]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7a9a      	ldrb	r2, [r3, #10]
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	b211      	sxth	r1, r2
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <huansic_xb_decodeBody+0x260>)
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	460a      	mov	r2, r1
 8001ec4:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001ec6:	7ffb      	ldrb	r3, [r7, #31]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	77fb      	strb	r3, [r7, #31]
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d986      	bls.n	8001de0 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001ed2:	7f7b      	ldrb	r3, [r7, #29]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001ed8:	7f7b      	ldrb	r3, [r7, #29]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	777a      	strb	r2, [r7, #29]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	7a9b      	ldrb	r3, [r3, #10]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b48      	ldr	r3, [pc, #288]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001eea:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	4a46      	ldr	r2, [pc, #280]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001ef4:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001ef6:	7f7b      	ldrb	r3, [r7, #29]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	777a      	strb	r2, [r7, #29]
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	7a9b      	ldrb	r3, [r3, #10]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4a3f      	ldr	r2, [pc, #252]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f0e:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001f10:	4b3e      	ldr	r3, [pc, #248]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f18:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001f1a:	7f7b      	ldrb	r3, [r7, #29]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	777a      	strb	r2, [r7, #29]
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	7a9b      	ldrb	r3, [r3, #10]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	4a36      	ldr	r2, [pc, #216]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f32:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f3c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	777a      	strb	r2, [r7, #29]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	7a9b      	ldrb	r3, [r3, #10]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	4a2d      	ldr	r2, [pc, #180]	; (800200c <huansic_xb_decodeBody+0x264>)
 8001f56:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8001f58:	7f7b      	ldrb	r3, [r7, #29]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	7a9b      	ldrb	r3, [r3, #10]
 8001f60:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	77fb      	strb	r3, [r7, #31]
 8001f66:	e03e      	b.n	8001fe6 <huansic_xb_decodeBody+0x23e>
			index += 2;
 8001f68:	7f7b      	ldrb	r3, [r7, #29]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001f6e:	7f7b      	ldrb	r3, [r7, #29]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	777a      	strb	r2, [r7, #29]
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	7a9b      	ldrb	r3, [r3, #10]
 8001f7c:	021a      	lsls	r2, r3, #8
 8001f7e:	7ffb      	ldrb	r3, [r7, #31]
 8001f80:	b211      	sxth	r1, r2
 8001f82:	4a23      	ldr	r2, [pc, #140]	; (8002010 <huansic_xb_decodeBody+0x268>)
 8001f84:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8001f88:	7f7b      	ldrb	r3, [r7, #29]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	777a      	strb	r2, [r7, #29]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	7a9a      	ldrb	r2, [r3, #10]
 8001f96:	7ffb      	ldrb	r3, [r7, #31]
 8001f98:	b211      	sxth	r1, r2
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <huansic_xb_decodeBody+0x268>)
 8001f9c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001fa0:	7f7b      	ldrb	r3, [r7, #29]
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001fa6:	7f7b      	ldrb	r3, [r7, #29]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	777a      	strb	r2, [r7, #29]
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	7a9b      	ldrb	r3, [r3, #10]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
 8001fb8:	b211      	sxth	r1, r2
 8001fba:	4a15      	ldr	r2, [pc, #84]	; (8002010 <huansic_xb_decodeBody+0x268>)
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8001fc4:	7f7b      	ldrb	r3, [r7, #29]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	777a      	strb	r2, [r7, #29]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	7a9a      	ldrb	r2, [r3, #10]
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	b211      	sxth	r1, r2
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <huansic_xb_decodeBody+0x268>)
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	460a      	mov	r2, r1
 8001fde:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001fe0:	7ffb      	ldrb	r3, [r7, #31]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	77fb      	strb	r3, [r7, #31]
 8001fe6:	7ffa      	ldrb	r2, [r7, #31]
 8001fe8:	7efb      	ldrb	r3, [r7, #27]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3bc      	bcc.n	8001f68 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8001fee:	7f7b      	ldrb	r3, [r7, #29]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8001ff4:	7f7b      	ldrb	r3, [r7, #29]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	7a9b      	ldrb	r3, [r3, #10]
 8001ffc:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	77fb      	strb	r3, [r7, #31]
 8002002:	e046      	b.n	8002092 <huansic_xb_decodeBody+0x2ea>
 8002004:	20000b60 	.word	0x20000b60
 8002008:	20000b6c 	.word	0x20000b6c
 800200c:	20000b64 	.word	0x20000b64
 8002010:	20000b94 	.word	0x20000b94
			index += 2;
 8002014:	7f7b      	ldrb	r3, [r7, #29]
 8002016:	3302      	adds	r3, #2
 8002018:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 800201a:	7f7b      	ldrb	r3, [r7, #29]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	777a      	strb	r2, [r7, #29]
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	7a9b      	ldrb	r3, [r3, #10]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	b211      	sxth	r1, r2
 800202e:	4a9f      	ldr	r2, [pc, #636]	; (80022ac <huansic_xb_decodeBody+0x504>)
 8002030:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002034:	7f7b      	ldrb	r3, [r7, #29]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	777a      	strb	r2, [r7, #29]
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	7a9a      	ldrb	r2, [r3, #10]
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	b211      	sxth	r1, r2
 8002046:	4a99      	ldr	r2, [pc, #612]	; (80022ac <huansic_xb_decodeBody+0x504>)
 8002048:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 800204c:	7f7b      	ldrb	r3, [r7, #29]
 800204e:	3302      	adds	r3, #2
 8002050:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002052:	7f7b      	ldrb	r3, [r7, #29]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	777a      	strb	r2, [r7, #29]
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	7a9b      	ldrb	r3, [r3, #10]
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	b211      	sxth	r1, r2
 8002066:	4a91      	ldr	r2, [pc, #580]	; (80022ac <huansic_xb_decodeBody+0x504>)
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	460a      	mov	r2, r1
 800206e:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002070:	7f7b      	ldrb	r3, [r7, #29]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	777a      	strb	r2, [r7, #29]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	7a9a      	ldrb	r2, [r3, #10]
 800207e:	7ffb      	ldrb	r3, [r7, #31]
 8002080:	b211      	sxth	r1, r2
 8002082:	4a8a      	ldr	r2, [pc, #552]	; (80022ac <huansic_xb_decodeBody+0x504>)
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	460a      	mov	r2, r1
 800208a:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 800208c:	7ffb      	ldrb	r3, [r7, #31]
 800208e:	3301      	adds	r3, #1
 8002090:	77fb      	strb	r3, [r7, #31]
 8002092:	7ffa      	ldrb	r2, [r7, #31]
 8002094:	7efb      	ldrb	r3, [r7, #27]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3bc      	bcc.n	8002014 <huansic_xb_decodeBody+0x26c>
 800209a:	e31a      	b.n	80026d2 <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7a1b      	ldrb	r3, [r3, #8]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	f040 8316 	bne.w	80026d2 <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 80020a6:	7f7b      	ldrb	r3, [r7, #29]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	777a      	strb	r2, [r7, #29]
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	7a9a      	ldrb	r2, [r3, #10]
 80020b4:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <huansic_xb_decodeBody+0x508>)
 80020b6:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 80020b8:	7f7b      	ldrb	r3, [r7, #29]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	777a      	strb	r2, [r7, #29]
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	7a9b      	ldrb	r3, [r3, #10]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b7a      	ldr	r3, [pc, #488]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020ca:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 80020cc:	4b79      	ldr	r3, [pc, #484]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4a78      	ldr	r2, [pc, #480]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020d4:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80020d6:	7f7b      	ldrb	r3, [r7, #29]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	777a      	strb	r2, [r7, #29]
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	7a9b      	ldrb	r3, [r3, #10]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	4a71      	ldr	r2, [pc, #452]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020ee:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80020f0:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	4a6f      	ldr	r2, [pc, #444]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 80020f8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80020fa:	7f7b      	ldrb	r3, [r7, #29]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	777a      	strb	r2, [r7, #29]
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	7a9b      	ldrb	r3, [r3, #10]
 8002108:	461a      	mov	r2, r3
 800210a:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	4a68      	ldr	r2, [pc, #416]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 8002112:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002114:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4a66      	ldr	r2, [pc, #408]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 800211c:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 800211e:	7f7b      	ldrb	r3, [r7, #29]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	777a      	strb	r2, [r7, #29]
 8002124:	461a      	mov	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	7a9b      	ldrb	r3, [r3, #10]
 800212c:	461a      	mov	r2, r3
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	4a5f      	ldr	r2, [pc, #380]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 8002136:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8002138:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <huansic_xb_decodeBody+0x510>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <huansic_xb_decodeBody+0x50c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	4a5e      	ldr	r2, [pc, #376]	; (80022bc <huansic_xb_decodeBody+0x514>)
 8002144:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8002146:	7f7b      	ldrb	r3, [r7, #29]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	777a      	strb	r2, [r7, #29]
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	7a9b      	ldrb	r3, [r3, #10]
 8002154:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800215c:	7f7b      	ldrb	r3, [r7, #29]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	777a      	strb	r2, [r7, #29]
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	7a9b      	ldrb	r3, [r3, #10]
 800216a:	461a      	mov	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002178:	7f7b      	ldrb	r3, [r7, #29]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	777a      	strb	r2, [r7, #29]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	7a9b      	ldrb	r3, [r3, #10]
 8002186:	461a      	mov	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002194:	7f7b      	ldrb	r3, [r7, #29]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	777a      	strb	r2, [r7, #29]
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	7a9b      	ldrb	r3, [r3, #10]
 80021a2:	461a      	mov	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <huansic_xb_decodeBody+0x518>)
 80021b2:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 80021b4:	7f7b      	ldrb	r3, [r7, #29]
 80021b6:	3302      	adds	r3, #2
 80021b8:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 80021ba:	7f7b      	ldrb	r3, [r7, #29]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	777a      	strb	r2, [r7, #29]
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	7a9b      	ldrb	r3, [r3, #10]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <huansic_xb_decodeBody+0x51c>)
 80021ce:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 80021d0:	7f7b      	ldrb	r3, [r7, #29]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	777a      	strb	r2, [r7, #29]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	7a9b      	ldrb	r3, [r3, #10]
 80021de:	b21a      	sxth	r2, r3
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <huansic_xb_decodeBody+0x51c>)
 80021e2:	801a      	strh	r2, [r3, #0]
		index += 2;
 80021e4:	7f7b      	ldrb	r3, [r7, #29]
 80021e6:	3302      	adds	r3, #2
 80021e8:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80021ea:	7f7b      	ldrb	r3, [r7, #29]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	777a      	strb	r2, [r7, #29]
 80021f0:	461a      	mov	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	7a9b      	ldrb	r3, [r3, #10]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <huansic_xb_decodeBody+0x51c>)
 80021fe:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8002200:	7f7b      	ldrb	r3, [r7, #29]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	777a      	strb	r2, [r7, #29]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	7a9b      	ldrb	r3, [r3, #10]
 800220e:	b21a      	sxth	r2, r3
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <huansic_xb_decodeBody+0x51c>)
 8002212:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8002214:	7f7b      	ldrb	r3, [r7, #29]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	777a      	strb	r2, [r7, #29]
 800221a:	461a      	mov	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	7a9b      	ldrb	r3, [r3, #10]
 8002222:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800222a:	7f7b      	ldrb	r3, [r7, #29]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	777a      	strb	r2, [r7, #29]
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	7a9b      	ldrb	r3, [r3, #10]
 8002238:	461a      	mov	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002246:	7f7b      	ldrb	r3, [r7, #29]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	777a      	strb	r2, [r7, #29]
 800224c:	461a      	mov	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	7a9b      	ldrb	r3, [r3, #10]
 8002254:	461a      	mov	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002262:	7f7b      	ldrb	r3, [r7, #29]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	777a      	strb	r2, [r7, #29]
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	7a9b      	ldrb	r3, [r3, #10]
 8002270:	461a      	mov	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <huansic_xb_decodeBody+0x520>)
 8002280:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <huansic_xb_decodeBody+0x524>)
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228c:	6018      	str	r0, [r3, #0]
 800228e:	3304      	adds	r3, #4
 8002290:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 8002296:	7f7b      	ldrb	r3, [r7, #29]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	777a      	strb	r2, [r7, #29]
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	7a9b      	ldrb	r3, [r3, #10]
 80022a4:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]
 80022aa:	e0fd      	b.n	80024a8 <huansic_xb_decodeBody+0x700>
 80022ac:	20000ba0 	.word	0x20000ba0
 80022b0:	20000b61 	.word	0x20000b61
 80022b4:	20000b68 	.word	0x20000b68
 80022b8:	20000b64 	.word	0x20000b64
 80022bc:	20000bd0 	.word	0x20000bd0
 80022c0:	20000bc8 	.word	0x20000bc8
 80022c4:	20000bc0 	.word	0x20000bc0
 80022c8:	20000bcc 	.word	0x20000bcc
 80022cc:	0800a510 	.word	0x0800a510
			temp = hxb->buffer[index + 24];
 80022d0:	7f7b      	ldrb	r3, [r7, #29]
 80022d2:	3318      	adds	r3, #24
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	7a9b      	ldrb	r3, [r3, #10]
 80022da:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80022e2:	7f7b      	ldrb	r3, [r7, #29]
 80022e4:	3319      	adds	r3, #25
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	7a9b      	ldrb	r3, [r3, #10]
 80022ec:	461a      	mov	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80022fa:	7f7b      	ldrb	r3, [r7, #29]
 80022fc:	331a      	adds	r3, #26
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	7a9b      	ldrb	r3, [r3, #10]
 8002304:	461a      	mov	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 8002312:	7f7b      	ldrb	r3, [r7, #29]
 8002314:	331b      	adds	r3, #27
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	7a9b      	ldrb	r3, [r3, #10]
 800231c:	461a      	mov	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	b25b      	sxtb	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fa81 	bl	8001830 <huansic_order_new>
 800232e:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 8002336:	7f7b      	ldrb	r3, [r7, #29]
 8002338:	331c      	adds	r3, #28
 800233a:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fcd3 	bl	8001cec <custom_order_new_failed>
				continue;
 8002346:	e0ac      	b.n	80024a2 <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002348:	7f7b      	ldrb	r3, [r7, #29]
 800234a:	3302      	adds	r3, #2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	7a9b      	ldrb	r3, [r3, #10]
 8002352:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002354:	b21a      	sxth	r2, r3
 8002356:	7f7b      	ldrb	r3, [r7, #29]
 8002358:	3303      	adds	r3, #3
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	440b      	add	r3, r1
 800235e:	7a9b      	ldrb	r3, [r3, #10]
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800236a:	7f7b      	ldrb	r3, [r7, #29]
 800236c:	3306      	adds	r3, #6
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	7a9b      	ldrb	r3, [r3, #10]
 8002374:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002376:	b21a      	sxth	r2, r3
 8002378:	7f7b      	ldrb	r3, [r7, #29]
 800237a:	3307      	adds	r3, #7
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	440b      	add	r3, r1
 8002380:	7a9b      	ldrb	r3, [r3, #10]
 8002382:	b21b      	sxth	r3, r3
 8002384:	4313      	orrs	r3, r2
 8002386:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	330a      	adds	r3, #10
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	7a9b      	ldrb	r3, [r3, #10]
 8002396:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8002398:	b21a      	sxth	r2, r3
 800239a:	7f7b      	ldrb	r3, [r7, #29]
 800239c:	330b      	adds	r3, #11
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	440b      	add	r3, r1
 80023a2:	7a9b      	ldrb	r3, [r3, #10]
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80023ae:	7f7b      	ldrb	r3, [r7, #29]
 80023b0:	330e      	adds	r3, #14
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	7a9b      	ldrb	r3, [r3, #10]
 80023b8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	7f7b      	ldrb	r3, [r7, #29]
 80023be:	330f      	adds	r3, #15
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	440b      	add	r3, r1
 80023c4:	7a9b      	ldrb	r3, [r3, #10]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80023d0:	7f7b      	ldrb	r3, [r7, #29]
 80023d2:	3310      	adds	r3, #16
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	7a9b      	ldrb	r3, [r3, #10]
 80023da:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80023e2:	7f7b      	ldrb	r3, [r7, #29]
 80023e4:	3311      	adds	r3, #17
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	7a9b      	ldrb	r3, [r3, #10]
 80023ec:	461a      	mov	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80023fa:	7f7b      	ldrb	r3, [r7, #29]
 80023fc:	3312      	adds	r3, #18
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	7a9b      	ldrb	r3, [r3, #10]
 8002404:	461a      	mov	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002412:	7f7b      	ldrb	r3, [r7, #29]
 8002414:	3313      	adds	r3, #19
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	7a9b      	ldrb	r3, [r3, #10]
 800241c:	461a      	mov	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800242a:	7f7b      	ldrb	r3, [r7, #29]
 800242c:	3314      	adds	r3, #20
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	7a9b      	ldrb	r3, [r3, #10]
 8002434:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800243c:	7f7b      	ldrb	r3, [r7, #29]
 800243e:	3315      	adds	r3, #21
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	7a9b      	ldrb	r3, [r3, #10]
 8002446:	461a      	mov	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002454:	7f7b      	ldrb	r3, [r7, #29]
 8002456:	3316      	adds	r3, #22
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	7a9b      	ldrb	r3, [r3, #10]
 800245e:	461a      	mov	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 800246c:	7f7b      	ldrb	r3, [r7, #29]
 800246e:	3317      	adds	r3, #23
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	7a9b      	ldrb	r3, [r3, #10]
 8002476:	461a      	mov	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 8002488:	7f7b      	ldrb	r3, [r7, #29]
 800248a:	331c      	adds	r3, #28
 800248c:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	7f3b      	ldrb	r3, [r7, #28]
 8002494:	1c59      	adds	r1, r3, #1
 8002496:	7739      	strb	r1, [r7, #28]
 8002498:	b252      	sxtb	r2, r2
 800249a:	3320      	adds	r3, #32
 800249c:	443b      	add	r3, r7
 800249e:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	3301      	adds	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
 80024a8:	7ffa      	ldrb	r2, [r7, #31]
 80024aa:	7efb      	ldrb	r3, [r7, #27]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f4ff af0f 	bcc.w	80022d0 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	77fb      	strb	r3, [r7, #31]
 80024b6:	e02d      	b.n	8002514 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	4a90      	ldr	r2, [pc, #576]	; (80026fc <huansic_xb_decodeBody+0x954>)
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d022      	beq.n	800250e <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	77bb      	strb	r3, [r7, #30]
 80024cc:	e011      	b.n	80024f2 <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80024ce:	7ffb      	ldrb	r3, [r7, #31]
 80024d0:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <huansic_xb_decodeBody+0x954>)
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	7fba      	ldrb	r2, [r7, #30]
 80024da:	3220      	adds	r2, #32
 80024dc:	443a      	add	r2, r7
 80024de:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d102      	bne.n	80024ec <huansic_xb_decodeBody+0x744>
						j = 255;
 80024e6:	23ff      	movs	r3, #255	; 0xff
 80024e8:	77bb      	strb	r3, [r7, #30]
						break;
 80024ea:	e006      	b.n	80024fa <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 80024ec:	7fbb      	ldrb	r3, [r7, #30]
 80024ee:	3301      	adds	r3, #1
 80024f0:	77bb      	strb	r3, [r7, #30]
 80024f2:	7ffa      	ldrb	r2, [r7, #31]
 80024f4:	7f3b      	ldrb	r3, [r7, #28]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3e9      	bcc.n	80024ce <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 80024fa:	7fbb      	ldrb	r3, [r7, #30]
 80024fc:	2bff      	cmp	r3, #255	; 0xff
 80024fe:	d006      	beq.n	800250e <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8002500:	7ffb      	ldrb	r3, [r7, #31]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <huansic_xb_decodeBody+0x954>)
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f9eb 	bl	80018e4 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 800250e:	7ffb      	ldrb	r3, [r7, #31]
 8002510:	3301      	adds	r3, #1
 8002512:	77fb      	strb	r3, [r7, #31]
 8002514:	7ffb      	ldrb	r3, [r7, #31]
 8002516:	2b04      	cmp	r3, #4
 8002518:	d9ce      	bls.n	80024b8 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 800251a:	7f7b      	ldrb	r3, [r7, #29]
 800251c:	3318      	adds	r3, #24
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	7a9b      	ldrb	r3, [r3, #10]
 8002524:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 800252c:	7f7b      	ldrb	r3, [r7, #29]
 800252e:	3319      	adds	r3, #25
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	7a9b      	ldrb	r3, [r3, #10]
 8002536:	461a      	mov	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002544:	7f7b      	ldrb	r3, [r7, #29]
 8002546:	331a      	adds	r3, #26
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	7a9b      	ldrb	r3, [r3, #10]
 800254e:	461a      	mov	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 800255c:	7f7b      	ldrb	r3, [r7, #29]
 800255e:	331b      	adds	r3, #27
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	7a9b      	ldrb	r3, [r3, #10]
 8002566:	461a      	mov	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	b25b      	sxtb	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f95c 	bl	8001830 <huansic_order_new>
 8002578:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d108      	bne.n	8002592 <huansic_xb_decodeBody+0x7ea>
			index += 28;
 8002580:	7f7b      	ldrb	r3, [r7, #29]
 8002582:	331c      	adds	r3, #28
 8002584:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fbae 	bl	8001cec <custom_order_new_failed>
 8002590:	e09f      	b.n	80026d2 <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002592:	7f7b      	ldrb	r3, [r7, #29]
 8002594:	3302      	adds	r3, #2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	7a9b      	ldrb	r3, [r3, #10]
 800259c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800259e:	b21a      	sxth	r2, r3
 80025a0:	7f7b      	ldrb	r3, [r7, #29]
 80025a2:	3303      	adds	r3, #3
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	440b      	add	r3, r1
 80025a8:	7a9b      	ldrb	r3, [r3, #10]
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80025b4:	7f7b      	ldrb	r3, [r7, #29]
 80025b6:	3306      	adds	r3, #6
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	7a9b      	ldrb	r3, [r3, #10]
 80025be:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	7f7b      	ldrb	r3, [r7, #29]
 80025c4:	3307      	adds	r3, #7
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	440b      	add	r3, r1
 80025ca:	7a9b      	ldrb	r3, [r3, #10]
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80025d6:	7f7b      	ldrb	r3, [r7, #29]
 80025d8:	330a      	adds	r3, #10
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	7a9b      	ldrb	r3, [r3, #10]
 80025e0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	7f7b      	ldrb	r3, [r7, #29]
 80025e6:	330b      	adds	r3, #11
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	440b      	add	r3, r1
 80025ec:	7a9b      	ldrb	r3, [r3, #10]
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80025f8:	7f7b      	ldrb	r3, [r7, #29]
 80025fa:	330e      	adds	r3, #14
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	7a9b      	ldrb	r3, [r3, #10]
 8002602:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002604:	b21a      	sxth	r2, r3
 8002606:	7f7b      	ldrb	r3, [r7, #29]
 8002608:	330f      	adds	r3, #15
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	440b      	add	r3, r1
 800260e:	7a9b      	ldrb	r3, [r3, #10]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 800261a:	7f7b      	ldrb	r3, [r7, #29]
 800261c:	3310      	adds	r3, #16
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	7a9b      	ldrb	r3, [r3, #10]
 8002624:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800262c:	7f7b      	ldrb	r3, [r7, #29]
 800262e:	3311      	adds	r3, #17
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	7a9b      	ldrb	r3, [r3, #10]
 8002636:	461a      	mov	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002644:	7f7b      	ldrb	r3, [r7, #29]
 8002646:	3312      	adds	r3, #18
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	7a9b      	ldrb	r3, [r3, #10]
 800264e:	461a      	mov	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800265c:	7f7b      	ldrb	r3, [r7, #29]
 800265e:	3313      	adds	r3, #19
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	7a9b      	ldrb	r3, [r3, #10]
 8002666:	461a      	mov	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002674:	7f7b      	ldrb	r3, [r7, #29]
 8002676:	3314      	adds	r3, #20
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	7a9b      	ldrb	r3, [r3, #10]
 800267e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002686:	7f7b      	ldrb	r3, [r7, #29]
 8002688:	3315      	adds	r3, #21
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	7a9b      	ldrb	r3, [r3, #10]
 8002690:	461a      	mov	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800269e:	7f7b      	ldrb	r3, [r7, #29]
 80026a0:	3316      	adds	r3, #22
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	7a9b      	ldrb	r3, [r3, #10]
 80026a8:	461a      	mov	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80026b6:	7f7b      	ldrb	r3, [r7, #29]
 80026b8:	3317      	adds	r3, #23
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	7a9b      	ldrb	r3, [r3, #10]
 80026c0:	461a      	mov	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2206      	movs	r2, #6
 80026d6:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f103 010a 	add.w	r1, r3, #10
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7a5b      	ldrb	r3, [r3, #9]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	f005 f87e 	bl	80077f0 <HAL_UART_Receive_DMA>
}
 80026f4:	bf00      	nop
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000bac 	.word	0x20000bac

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002706:	f001 fdd3 	bl	80042b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270a:	f000 f8bd 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800270e:	f000 fcb7 	bl	8003080 <MX_GPIO_Init>
  MX_DMA_Init();
 8002712:	f000 fc8f 	bl	8003034 <MX_DMA_Init>
  MX_I2C1_Init();
 8002716:	f000 f8fd 	bl	8002914 <MX_I2C1_Init>
  MX_TIM1_Init();
 800271a:	f000 f929 	bl	8002970 <MX_TIM1_Init>
  MX_TIM2_Init();
 800271e:	f000 f9eb 	bl	8002af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002722:	f000 fa3d 	bl	8002ba0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002726:	f000 fa8f 	bl	8002c48 <MX_TIM4_Init>
  MX_TIM5_Init();
 800272a:	f000 fae1 	bl	8002cf0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800272e:	f000 fb69 	bl	8002e04 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002732:	f000 fc2b 	bl	8002f8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002736:	f000 fc53 	bl	8002fe0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800273a:	f000 fb2d 	bl	8002d98 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	cmotor_lf.encoderInverted = 1;
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <main+0x164>)
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 8002746:	4b48      	ldr	r3, [pc, #288]	; (8002868 <main+0x168>)
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 800274e:	f000 fced 	bl	800312c <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8002752:	f000 fd1f 	bl	8003194 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8002756:	f000 fd51 	bl	80031fc <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 800275a:	f000 fd83 	bl	8003264 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 800275e:	f000 fdb5 	bl	80032cc <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8002762:	f000 fdc1 	bl	80032e8 <HUAN_ZIGBEE_Init>
	ssd1306_Init();
 8002766:	f000 fe43 	bl	80033f0 <ssd1306_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 800276a:	2014      	movs	r0, #20
 800276c:	f001 fe02 	bl	8004374 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8002770:	483e      	ldr	r0, [pc, #248]	; (800286c <main+0x16c>)
 8002772:	f003 fe25 	bl	80063c0 <HAL_TIM_Base_Start_IT>

	ssd1306_SetDisplayOn(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f001 f914 	bl	80039a4 <ssd1306_SetDisplayOn>

	initangleZ = himu.theta[2];
 800277c:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <main+0x170>)
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <main+0x174>)
 8002782:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	myCoord.x = 0;
 8002784:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <main+0x178>)
 8002786:	2200      	movs	r2, #0
 8002788:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <main+0x178>)
 800278c:	2200      	movs	r2, #0
 800278e:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 10;
 8002790:	230a      	movs	r3, #10
 8002792:	80bb      	strh	r3, [r7, #4]
	goal.y = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	80fb      	strh	r3, [r7, #6]
	uint8_t isArrived = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
	uint16_t initAngle = round(initangleZ);
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <main+0x174>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fea5 	bl	80004f0 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f006 fe15 	bl	80093dc <round>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe f9b3 	bl	8000b24 <__aeabi_d2uiz>
 80027be:	4603      	mov	r3, r0
 80027c0:	81bb      	strh	r3, [r7, #12]
//		HAL_Delay(1000);
//		chao_move_angle(90, 1000);

//    	isArrived = GotoDestination(goal); //暂时不用管，还没有调通
//    	if (isArrived == 1) break;
    	uint16_t angle = round(himu.theta[2]);
 80027c2:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <main+0x170>)
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe92 	bl	80004f0 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f006 fe02 	bl	80093dc <round>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f9a0 	bl	8000b24 <__aeabi_d2uiz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	817b      	strh	r3, [r7, #10]
		while(!gameStatus){		// if the game is not running
 80027e8:	bf00      	nop
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <main+0x17c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11b      	bne.n	800282a <main+0x12a>
	    	LED1_ON;
 80027f2:	2201      	movs	r2, #1
 80027f4:	2101      	movs	r1, #1
 80027f6:	4822      	ldr	r0, [pc, #136]	; (8002880 <main+0x180>)
 80027f8:	f002 fd04 	bl	8005204 <HAL_GPIO_WritePin>
			ssd1306_DrawArc(20, 20, 30, initAngle, angle, White);
 80027fc:	89ba      	ldrh	r2, [r7, #12]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	221e      	movs	r2, #30
 800280a:	2114      	movs	r1, #20
 800280c:	2014      	movs	r0, #20
 800280e:	f000 ffb1 	bl	8003774 <ssd1306_DrawArc>
			ssd1306_UpdateScreen();
 8002812:	f000 fe79 	bl	8003508 <ssd1306_UpdateScreen>
			HAL_Delay(1000);
 8002816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281a:	f001 fdab 	bl	8004374 <HAL_Delay>
			break;
 800281e:	bf00      	nop
		}

		while (gameStage == 0) {		// pre-match
 8002820:	e003      	b.n	800282a <main+0x12a>
			if (!gameStatus)	// if the game stopped
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <main+0x17c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <main+0x134>
		while (gameStage == 0) {		// pre-match
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <main+0x184>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f7      	beq.n	8002822 <main+0x122>
 8002832:	e005      	b.n	8002840 <main+0x140>
				break;
 8002834:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 8002836:	e003      	b.n	8002840 <main+0x140>
			if (!gameStatus)	// if the game stopped
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <main+0x17c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <main+0x14a>
		while (gameStage == 1){			// first-half
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <main+0x184>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d0f7      	beq.n	8002838 <main+0x138>
 8002848:	e005      	b.n	8002856 <main+0x156>
				break;
 800284a:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 800284c:	e003      	b.n	8002856 <main+0x156>
			if (!gameStatus)	// if the game stopped
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <main+0x17c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <main+0x160>
		while (gameStage == 2){			// second-half
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <main+0x184>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d0f7      	beq.n	800284e <main+0x14e>
 800285e:	e7b0      	b.n	80027c2 <main+0xc2>
				break;
 8002860:	bf00      	nop
    while (1) {
 8002862:	e7ae      	b.n	80027c2 <main+0xc2>
 8002864:	2000098c 	.word	0x2000098c
 8002868:	20000a04 	.word	0x20000a04
 800286c:	200007ec 	.word	0x200007ec
 8002870:	20000a7c 	.word	0x20000a7c
 8002874:	20000bc4 	.word	0x20000bc4
 8002878:	20000bc0 	.word	0x20000bc0
 800287c:	20000b61 	.word	0x20000b61
 8002880:	40010c00 	.word	0x40010c00
 8002884:	20000b60 	.word	0x20000b60

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0318 	add.w	r3, r7, #24
 8002892:	2228      	movs	r2, #40	; 0x28
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fd86 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80028b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028be:	2302      	movs	r3, #2
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ce:	f107 0318 	add.w	r3, r7, #24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 f908 	bl	8005ae8 <HAL_RCC_OscConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80028de:	f000 fd49 	bl	8003374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e2:	230f      	movs	r3, #15
 80028e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e6:	2302      	movs	r3, #2
 80028e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 fb75 	bl	8005fec <HAL_RCC_ClockConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002908:	f000 fd34 	bl	8003374 <Error_Handler>
  }
}
 800290c:	bf00      	nop
 800290e:	3740      	adds	r7, #64	; 0x40
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <MX_I2C1_Init+0x50>)
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <MX_I2C1_Init+0x54>)
 800291c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <MX_I2C1_Init+0x50>)
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <MX_I2C1_Init+0x58>)
 8002922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <MX_I2C1_Init+0x50>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <MX_I2C1_Init+0x50>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <MX_I2C1_Init+0x50>)
 8002932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <MX_I2C1_Init+0x50>)
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <MX_I2C1_Init+0x50>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <MX_I2C1_Init+0x50>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <MX_I2C1_Init+0x50>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <MX_I2C1_Init+0x50>)
 8002952:	f002 fc6f 	bl	8005234 <HAL_I2C_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800295c:	f000 fd0a 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000630 	.word	0x20000630
 8002968:	40005400 	.word	0x40005400
 800296c:	000186a0 	.word	0x000186a0

08002970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b096      	sub	sp, #88	; 0x58
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	611a      	str	r2, [r3, #16]
 800299e:	615a      	str	r2, [r3, #20]
 80029a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2220      	movs	r2, #32
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f005 fcfd 	bl	80083a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029b0:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <MX_TIM1_Init+0x184>)
 80029b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029b4:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029da:	4845      	ldr	r0, [pc, #276]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029dc:	f003 fca0 	bl	8006320 <HAL_TIM_Base_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029e6:	f000 fcc5 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029f4:	4619      	mov	r1, r3
 80029f6:	483e      	ldr	r0, [pc, #248]	; (8002af0 <MX_TIM1_Init+0x180>)
 80029f8:	f004 f94a 	bl	8006c90 <HAL_TIM_ConfigClockSource>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a02:	f000 fcb7 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a06:	483a      	ldr	r0, [pc, #232]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002a08:	f003 fd3a 	bl	8006480 <HAL_TIM_PWM_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a12:	f000 fcaf 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a22:	4619      	mov	r1, r3
 8002a24:	4832      	ldr	r0, [pc, #200]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002a26:	f004 fd05 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a30:	f000 fca0 	bl	8003374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a34:	2360      	movs	r3, #96	; 0x60
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a40:	2300      	movs	r3, #0
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a54:	2200      	movs	r2, #0
 8002a56:	4619      	mov	r1, r3
 8002a58:	4825      	ldr	r0, [pc, #148]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002a5a:	f004 f85b 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002a64:	f000 fc86 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	481f      	ldr	r0, [pc, #124]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002a72:	f004 f84f 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002a7c:	f000 fc7a 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a84:	2208      	movs	r2, #8
 8002a86:	4619      	mov	r1, r3
 8002a88:	4819      	ldr	r0, [pc, #100]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002a8a:	f004 f843 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002a94:	f000 fc6e 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9c:	220c      	movs	r2, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002aa2:	f004 f837 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002aac:	f000 fc62 	bl	8003374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002ad4:	f004 fd1a 	bl	800750c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002ade:	f000 fc49 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ae2:	4803      	ldr	r0, [pc, #12]	; (8002af0 <MX_TIM1_Init+0x180>)
 8002ae4:	f001 f93c 	bl	8003d60 <HAL_TIM_MspPostInit>

}
 8002ae8:	bf00      	nop
 8002aea:	3758      	adds	r7, #88	; 0x58
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000684 	.word	0x20000684
 8002af4:	40012c00 	.word	0x40012c00

08002af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f005 fc4e 	bl	80083a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	4619      	mov	r1, r3
 8002b66:	480d      	ldr	r0, [pc, #52]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b68:	f003 fd9c 	bl	80066a4 <HAL_TIM_Encoder_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b72:	f000 fbff 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4806      	ldr	r0, [pc, #24]	; (8002b9c <MX_TIM2_Init+0xa4>)
 8002b84:	f004 fc56 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b8e:	f000 fbf1 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	3730      	adds	r7, #48	; 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200006cc 	.word	0x200006cc

08002ba0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	; 0x30
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f005 fbfa 	bl	80083a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bbe:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <MX_TIM3_Init+0xa4>)
 8002bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bea:	2301      	movs	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002c0e:	f003 fd49 	bl	80066a4 <HAL_TIM_Encoder_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c18:	f000 fbac 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_TIM3_Init+0xa0>)
 8002c2a:	f004 fc03 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c34:	f000 fb9e 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000714 	.word	0x20000714
 8002c44:	40000400 	.word	0x40000400

08002c48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	2224      	movs	r2, #36	; 0x24
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fba6 	bl	80083a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <MX_TIM4_Init+0xa4>)
 8002c68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c92:	2301      	movs	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002cb6:	f003 fcf5 	bl	80066a4 <HAL_TIM_Encoder_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002cc0:	f000 fb58 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_TIM4_Init+0xa0>)
 8002cd2:	f004 fbaf 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002cdc:	f000 fb4a 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	3730      	adds	r7, #48	; 0x30
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000075c 	.word	0x2000075c
 8002cec:	40000800 	.word	0x40000800

08002cf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 fb52 	bl	80083a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d0c:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <MX_TIM5_Init+0xa4>)
 8002d10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480c      	ldr	r0, [pc, #48]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d5e:	f003 fca1 	bl	80066a4 <HAL_TIM_Encoder_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d68:	f000 fb04 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_TIM5_Init+0xa0>)
 8002d7a:	f004 fb5b 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002d84:	f000 faf6 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d88:	bf00      	nop
 8002d8a:	3730      	adds	r7, #48	; 0x30
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200007a4 	.word	0x200007a4
 8002d94:	40000c00 	.word	0x40000c00

08002d98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9e:	463b      	mov	r3, r7
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <MX_TIM6_Init+0x68>)
 8002daa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002dae:	2247      	movs	r2, #71	; 0x47
 8002db0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002dba:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002dbe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002dc6:	480d      	ldr	r0, [pc, #52]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002dc8:	f003 faaa 	bl	8006320 <HAL_TIM_Base_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002dd2:	f000 facf 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002dde:	463b      	mov	r3, r7
 8002de0:	4619      	mov	r1, r3
 8002de2:	4806      	ldr	r0, [pc, #24]	; (8002dfc <MX_TIM6_Init+0x64>)
 8002de4:	f004 fb26 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002dee:	f000 fac1 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200007ec 	.word	0x200007ec
 8002e00:	40001000 	.word	0x40001000

08002e04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b096      	sub	sp, #88	; 0x58
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	60da      	str	r2, [r3, #12]
 8002e30:	611a      	str	r2, [r3, #16]
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2220      	movs	r2, #32
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f005 fab3 	bl	80083a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e42:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e44:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <MX_TIM8_Init+0x184>)
 8002e46:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e48:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5c:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e62:	4b48      	ldr	r3, [pc, #288]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e6e:	4845      	ldr	r0, [pc, #276]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e70:	f003 fa56 	bl	8006320 <HAL_TIM_Base_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002e7a:	f000 fa7b 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e88:	4619      	mov	r1, r3
 8002e8a:	483e      	ldr	r0, [pc, #248]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e8c:	f003 ff00 	bl	8006c90 <HAL_TIM_ConfigClockSource>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002e96:	f000 fa6d 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e9a:	483a      	ldr	r0, [pc, #232]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002e9c:	f003 faf0 	bl	8006480 <HAL_TIM_PWM_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002ea6:	f000 fa65 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002eb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4832      	ldr	r0, [pc, #200]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002eba:	f004 fabb 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002ec4:	f000 fa56 	bl	8003374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec8:	2360      	movs	r3, #96	; 0x60
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4619      	mov	r1, r3
 8002eec:	4825      	ldr	r0, [pc, #148]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002eee:	f003 fe11 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002ef8:	f000 fa3c 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	2204      	movs	r2, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	481f      	ldr	r0, [pc, #124]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002f06:	f003 fe05 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002f10:	f000 fa30 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f18:	2208      	movs	r2, #8
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4819      	ldr	r0, [pc, #100]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002f1e:	f003 fdf9 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002f28:	f000 fa24 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f30:	220c      	movs	r2, #12
 8002f32:	4619      	mov	r1, r3
 8002f34:	4813      	ldr	r0, [pc, #76]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002f36:	f003 fded 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002f40:	f000 fa18 	bl	8003374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4807      	ldr	r0, [pc, #28]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002f68:	f004 fad0 	bl	800750c <HAL_TIMEx_ConfigBreakDeadTime>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002f72:	f000 f9ff 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f76:	4803      	ldr	r0, [pc, #12]	; (8002f84 <MX_TIM8_Init+0x180>)
 8002f78:	f000 fef2 	bl	8003d60 <HAL_TIM_MspPostInit>

}
 8002f7c:	bf00      	nop
 8002f7e:	3758      	adds	r7, #88	; 0x58
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000834 	.word	0x20000834
 8002f88:	40013400 	.word	0x40013400

08002f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <MX_USART2_UART_Init+0x50>)
 8002f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <MX_USART2_UART_Init+0x4c>)
 8002fc4:	f004 fb05 	bl	80075d2 <HAL_UART_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fce:	f000 f9d1 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000087c 	.word	0x2000087c
 8002fdc:	40004400 	.word	0x40004400

08002fe0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	; (8003030 <MX_USART3_UART_Init+0x50>)
 8002fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8002fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8003006:	220c      	movs	r2, #12
 8003008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <MX_USART3_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_USART3_UART_Init+0x4c>)
 8003018:	f004 fadb 	bl	80075d2 <HAL_UART_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003022:	f000 f9a7 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200008c0 	.word	0x200008c0
 8003030:	40004800 	.word	0x40004800

08003034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <MX_DMA_Init+0x48>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	4a0f      	ldr	r2, [pc, #60]	; (800307c <MX_DMA_Init+0x48>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6153      	str	r3, [r2, #20]
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <MX_DMA_Init+0x48>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2102      	movs	r1, #2
 8003056:	200d      	movs	r0, #13
 8003058:	f001 fa87 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800305c:	200d      	movs	r0, #13
 800305e:	f001 faa0 	bl	80045a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2102      	movs	r1, #2
 8003066:	2010      	movs	r0, #16
 8003068:	f001 fa7f 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800306c:	2010      	movs	r0, #16
 800306e:	f001 fa98 	bl	80045a2 <HAL_NVIC_EnableIRQ>

}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000

08003080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003094:	4b23      	ldr	r3, [pc, #140]	; (8003124 <MX_GPIO_Init+0xa4>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a22      	ldr	r2, [pc, #136]	; (8003124 <MX_GPIO_Init+0xa4>)
 800309a:	f043 0320 	orr.w	r3, r3, #32
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b20      	ldr	r3, [pc, #128]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4a10      	ldr	r2, [pc, #64]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030e2:	f043 0310 	orr.w	r3, r3, #16
 80030e6:	6193      	str	r3, [r2, #24]
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <MX_GPIO_Init+0xa4>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2107      	movs	r1, #7
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <MX_GPIO_Init+0xa8>)
 80030fa:	f002 f883 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80030fe:	2307      	movs	r3, #7
 8003100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2302      	movs	r3, #2
 800310c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	4619      	mov	r1, r3
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <MX_GPIO_Init+0xa8>)
 8003116:	f001 fee1 	bl	8004edc <HAL_GPIO_Init>

}
 800311a:	bf00      	nop
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	40010c00 	.word	0x40010c00

0800312c <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <HUAN_MOTOR1_Init+0x50>)
 8003134:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HUAN_MOTOR1_Init+0x54>)
 800313a:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HUAN_MOTOR1_Init+0x58>)
 8003140:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003144:	220c      	movs	r2, #12
 8003146:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 800314a:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <HUAN_MOTOR1_Init+0x58>)
 800314c:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003150:	2208      	movs	r2, #8
 8003152:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HUAN_MOTOR1_Init+0x5c>)
 8003160:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003164:	4a09      	ldr	r2, [pc, #36]	; (800318c <HUAN_MOTOR1_Init+0x60>)
 8003166:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HUAN_MOTOR1_Init+0x64>)
 800316c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 800316e:	4802      	ldr	r0, [pc, #8]	; (8003178 <HUAN_MOTOR1_Init+0x4c>)
 8003170:	f7fe fbce 	bl	8001910 <huansic_motor_init>
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000098c 	.word	0x2000098c
 800317c:	200006cc 	.word	0x200006cc
 8003180:	3d4ccccd 	.word	0x3d4ccccd
 8003184:	20000684 	.word	0x20000684
 8003188:	399d4952 	.word	0x399d4952
 800318c:	37a7c5ac 	.word	0x37a7c5ac
 8003190:	387ba882 	.word	0x387ba882

08003194 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HUAN_MOTOR2_Init+0x50>)
 800319c:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HUAN_MOTOR2_Init+0x54>)
 80031a2:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HUAN_MOTOR2_Init+0x58>)
 80031a8:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031b2:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HUAN_MOTOR2_Init+0x58>)
 80031b4:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031b8:	2204      	movs	r2, #4
 80031ba:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HUAN_MOTOR2_Init+0x5c>)
 80031c8:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031cc:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <HUAN_MOTOR2_Init+0x60>)
 80031ce:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HUAN_MOTOR2_Init+0x64>)
 80031d4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <HUAN_MOTOR2_Init+0x4c>)
 80031d8:	f7fe fb9a 	bl	8001910 <huansic_motor_init>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200009c8 	.word	0x200009c8
 80031e4:	2000075c 	.word	0x2000075c
 80031e8:	3d4ccccd 	.word	0x3d4ccccd
 80031ec:	20000684 	.word	0x20000684
 80031f0:	399d4952 	.word	0x399d4952
 80031f4:	37a7c5ac 	.word	0x37a7c5ac
 80031f8:	387ba882 	.word	0x387ba882

080031fc <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <HUAN_MOTOR3_Init+0x50>)
 8003204:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HUAN_MOTOR3_Init+0x54>)
 800320a:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <HUAN_MOTOR3_Init+0x58>)
 8003210:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003214:	220c      	movs	r2, #12
 8003216:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <HUAN_MOTOR3_Init+0x58>)
 800321c:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003220:	2208      	movs	r2, #8
 8003222:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HUAN_MOTOR3_Init+0x5c>)
 8003230:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003234:	4a09      	ldr	r2, [pc, #36]	; (800325c <HUAN_MOTOR3_Init+0x60>)
 8003236:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <HUAN_MOTOR3_Init+0x64>)
 800323c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 800323e:	4802      	ldr	r0, [pc, #8]	; (8003248 <HUAN_MOTOR3_Init+0x4c>)
 8003240:	f7fe fb66 	bl	8001910 <huansic_motor_init>
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000a04 	.word	0x20000a04
 800324c:	20000714 	.word	0x20000714
 8003250:	3d4ccccd 	.word	0x3d4ccccd
 8003254:	20000834 	.word	0x20000834
 8003258:	399d4952 	.word	0x399d4952
 800325c:	37a7c5ac 	.word	0x37a7c5ac
 8003260:	387ba882 	.word	0x387ba882

08003264 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HUAN_MOTOR4_Init+0x50>)
 800326c:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 8003270:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HUAN_MOTOR4_Init+0x54>)
 8003272:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 8003276:	4a11      	ldr	r2, [pc, #68]	; (80032bc <HUAN_MOTOR4_Init+0x58>)
 8003278:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 800327c:	2200      	movs	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HUAN_MOTOR4_Init+0x58>)
 8003284:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 8003288:	2204      	movs	r2, #4
 800328a:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HUAN_MOTOR4_Init+0x5c>)
 8003298:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 800329c:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HUAN_MOTOR4_Init+0x60>)
 800329e:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HUAN_MOTOR4_Init+0x64>)
 80032a4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 80032a6:	4802      	ldr	r0, [pc, #8]	; (80032b0 <HUAN_MOTOR4_Init+0x4c>)
 80032a8:	f7fe fb32 	bl	8001910 <huansic_motor_init>
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000a40 	.word	0x20000a40
 80032b4:	200007a4 	.word	0x200007a4
 80032b8:	3d4ccccd 	.word	0x3d4ccccd
 80032bc:	20000834 	.word	0x20000834
 80032c0:	399d4952 	.word	0x399d4952
 80032c4:	37a7c5ac 	.word	0x37a7c5ac
 80032c8:	387ba882 	.word	0x387ba882

080032cc <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HUAN_IMU_Init+0x14>)
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HUAN_IMU_Init+0x18>)
 80032d4:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 80032d6:	4802      	ldr	r0, [pc, #8]	; (80032e0 <HUAN_IMU_Init+0x14>)
 80032d8:	f7fd ff88 	bl	80011ec <huansic_jy62_init>
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000a7c 	.word	0x20000a7c
 80032e4:	200008c0 	.word	0x200008c0

080032e8 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HUAN_ZIGBEE_Init+0x14>)
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HUAN_ZIGBEE_Init+0x18>)
 80032f0:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 80032f2:	4802      	ldr	r0, [pc, #8]	; (80032fc <HUAN_ZIGBEE_Init+0x14>)
 80032f4:	f7fe fd04 	bl	8001d00 <huansic_xb_init>
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000ad4 	.word	0x20000ad4
 8003300:	2000087c 	.word	0x2000087c

08003304 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_UART_RxCpltCallback+0x34>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	d10b      	bne.n	800332e <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_UART_RxCpltCallback+0x34>)
 8003318:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <HAL_UART_RxCpltCallback+0x34>)
 8003322:	f7fe f8b9 	bl	8001498 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 8003326:	e002      	b.n	800332e <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 8003328:	4803      	ldr	r0, [pc, #12]	; (8003338 <HAL_UART_RxCpltCallback+0x34>)
 800332a:	f7fd ff95 	bl	8001258 <huansic_jy62_dma_isr>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000a7c 	.word	0x20000a7c

0800333c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_UART_ErrorCallback+0x34>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	d10b      	bne.n	8003366 <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_UART_ErrorCallback+0x34>)
 8003350:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <HAL_UART_ErrorCallback+0x34>)
 800335a:	f7fe f8e8 	bl	800152e <huansic_jy62_error>
		else
			huansic_jy62_dma_error(&himu);
	} /*else if(){

	}*/
}
 800335e:	e002      	b.n	8003366 <HAL_UART_ErrorCallback+0x2a>
			huansic_jy62_dma_error(&himu);
 8003360:	4803      	ldr	r0, [pc, #12]	; (8003370 <HAL_UART_ErrorCallback+0x34>)
 8003362:	f7fe f8d0 	bl	8001506 <huansic_jy62_dma_error>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000a7c 	.word	0x20000a7c

08003374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003378:	b672      	cpsid	i
}
 800337a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800337c:	e7fe      	b.n	800337c <Error_Handler+0x8>

0800337e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
	...

0800338c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af04      	add	r7, sp, #16
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	2301      	movs	r3, #1
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2301      	movs	r3, #1
 80033a6:	2200      	movs	r2, #0
 80033a8:	2178      	movs	r1, #120	; 0x78
 80033aa:	4803      	ldr	r0, [pc, #12]	; (80033b8 <ssd1306_WriteCommand+0x2c>)
 80033ac:	f002 f886 	bl	80054bc <HAL_I2C_Mem_Write>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000630 	.word	0x20000630

080033bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af04      	add	r7, sp, #16
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	9202      	str	r2, [sp, #8]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2301      	movs	r3, #1
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2178      	movs	r1, #120	; 0x78
 80033dc:	4803      	ldr	r0, [pc, #12]	; (80033ec <ssd1306_WriteData+0x30>)
 80033de:	f002 f86d 	bl	80054bc <HAL_I2C_Mem_Write>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000630 	.word	0x20000630

080033f0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80033f4:	f7ff ffc3 	bl	800337e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80033f8:	2064      	movs	r0, #100	; 0x64
 80033fa:	f000 ffbb 	bl	8004374 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80033fe:	2000      	movs	r0, #0
 8003400:	f000 fad0 	bl	80039a4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003404:	2020      	movs	r0, #32
 8003406:	f7ff ffc1 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800340a:	2000      	movs	r0, #0
 800340c:	f7ff ffbe 	bl	800338c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003410:	20b0      	movs	r0, #176	; 0xb0
 8003412:	f7ff ffbb 	bl	800338c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003416:	20c8      	movs	r0, #200	; 0xc8
 8003418:	f7ff ffb8 	bl	800338c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff ffb5 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003422:	2010      	movs	r0, #16
 8003424:	f7ff ffb2 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003428:	2040      	movs	r0, #64	; 0x40
 800342a:	f7ff ffaf 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800342e:	20ff      	movs	r0, #255	; 0xff
 8003430:	f000 faa4 	bl	800397c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003434:	20a1      	movs	r0, #161	; 0xa1
 8003436:	f7ff ffa9 	bl	800338c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800343a:	20a6      	movs	r0, #166	; 0xa6
 800343c:	f7ff ffa6 	bl	800338c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003440:	20a8      	movs	r0, #168	; 0xa8
 8003442:	f7ff ffa3 	bl	800338c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8003446:	201f      	movs	r0, #31
 8003448:	f7ff ffa0 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800344c:	20a4      	movs	r0, #164	; 0xa4
 800344e:	f7ff ff9d 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003452:	20d3      	movs	r0, #211	; 0xd3
 8003454:	f7ff ff9a 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003458:	2000      	movs	r0, #0
 800345a:	f7ff ff97 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800345e:	20d5      	movs	r0, #213	; 0xd5
 8003460:	f7ff ff94 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003464:	20f0      	movs	r0, #240	; 0xf0
 8003466:	f7ff ff91 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800346a:	20d9      	movs	r0, #217	; 0xd9
 800346c:	f7ff ff8e 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003470:	2022      	movs	r0, #34	; 0x22
 8003472:	f7ff ff8b 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003476:	20da      	movs	r0, #218	; 0xda
 8003478:	f7ff ff88 	bl	800338c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800347c:	2002      	movs	r0, #2
 800347e:	f7ff ff85 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003482:	20db      	movs	r0, #219	; 0xdb
 8003484:	f7ff ff82 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003488:	2020      	movs	r0, #32
 800348a:	f7ff ff7f 	bl	800338c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800348e:	208d      	movs	r0, #141	; 0x8d
 8003490:	f7ff ff7c 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003494:	2014      	movs	r0, #20
 8003496:	f7ff ff79 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800349a:	2001      	movs	r0, #1
 800349c:	f000 fa82 	bl	80039a4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f000 f80f 	bl	80034c4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80034a6:	f000 f82f 	bl	8003508 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <ssd1306_Init+0xd0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <ssd1306_Init+0xd0>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80034b6:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <ssd1306_Init+0xd0>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	711a      	strb	r2, [r3, #4]
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000dd4 	.word	0x20000dd4

080034c4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e00d      	b.n	80034f0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <ssd1306_Fill+0x1a>
 80034da:	2100      	movs	r1, #0
 80034dc:	e000      	b.n	80034e0 <ssd1306_Fill+0x1c>
 80034de:	21ff      	movs	r1, #255	; 0xff
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <ssd1306_Fill+0x40>)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	460a      	mov	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f6:	d3ed      	bcc.n	80034d4 <ssd1306_Fill+0x10>
    }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	20000bd4 	.word	0x20000bd4

08003508 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800350e:	2300      	movs	r3, #0
 8003510:	71fb      	strb	r3, [r7, #7]
 8003512:	e016      	b.n	8003542 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	3b50      	subs	r3, #80	; 0x50
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ff36 	bl	800338c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003520:	2000      	movs	r0, #0
 8003522:	f7ff ff33 	bl	800338c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003526:	2010      	movs	r0, #16
 8003528:	f7ff ff30 	bl	800338c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	01db      	lsls	r3, r3, #7
 8003530:	4a08      	ldr	r2, [pc, #32]	; (8003554 <ssd1306_UpdateScreen+0x4c>)
 8003532:	4413      	add	r3, r2
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff40 	bl	80033bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	3301      	adds	r3, #1
 8003540:	71fb      	strb	r3, [r7, #7]
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d9e5      	bls.n	8003514 <ssd1306_UpdateScreen+0xc>
    }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000bd4 	.word	0x20000bd4

08003558 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
 8003562:	460b      	mov	r3, r1
 8003564:	71bb      	strb	r3, [r7, #6]
 8003566:	4613      	mov	r3, r2
 8003568:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db3d      	blt.n	80035ee <ssd1306_DrawPixel+0x96>
 8003572:	79bb      	ldrb	r3, [r7, #6]
 8003574:	2b1f      	cmp	r3, #31
 8003576:	d83a      	bhi.n	80035ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8003578:	797b      	ldrb	r3, [r7, #5]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d11a      	bne.n	80035b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800357e:	79fa      	ldrb	r2, [r7, #7]
 8003580:	79bb      	ldrb	r3, [r7, #6]
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	b2d8      	uxtb	r0, r3
 8003586:	4603      	mov	r3, r0
 8003588:	01db      	lsls	r3, r3, #7
 800358a:	4413      	add	r3, r2
 800358c:	4a1a      	ldr	r2, [pc, #104]	; (80035f8 <ssd1306_DrawPixel+0xa0>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	b25a      	sxtb	r2, r3
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b259      	sxtb	r1, r3
 80035a4:	79fa      	ldrb	r2, [r7, #7]
 80035a6:	4603      	mov	r3, r0
 80035a8:	01db      	lsls	r3, r3, #7
 80035aa:	4413      	add	r3, r2
 80035ac:	b2c9      	uxtb	r1, r1
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <ssd1306_DrawPixel+0xa0>)
 80035b0:	54d1      	strb	r1, [r2, r3]
 80035b2:	e01d      	b.n	80035f0 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035b4:	79fa      	ldrb	r2, [r7, #7]
 80035b6:	79bb      	ldrb	r3, [r7, #6]
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	b2d8      	uxtb	r0, r3
 80035bc:	4603      	mov	r3, r0
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	4413      	add	r3, r2
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <ssd1306_DrawPixel+0xa0>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	b25a      	sxtb	r2, r3
 80035c8:	79bb      	ldrb	r3, [r7, #6]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	4013      	ands	r3, r2
 80035dc:	b259      	sxtb	r1, r3
 80035de:	79fa      	ldrb	r2, [r7, #7]
 80035e0:	4603      	mov	r3, r0
 80035e2:	01db      	lsls	r3, r3, #7
 80035e4:	4413      	add	r3, r2
 80035e6:	b2c9      	uxtb	r1, r1
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <ssd1306_DrawPixel+0xa0>)
 80035ea:	54d1      	strb	r1, [r2, r3]
 80035ec:	e000      	b.n	80035f0 <ssd1306_DrawPixel+0x98>
        return;
 80035ee:	bf00      	nop
    }
}
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	20000bd4 	.word	0x20000bd4

080035fc <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	4604      	mov	r4, r0
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4623      	mov	r3, r4
 800360c:	71fb      	strb	r3, [r7, #7]
 800360e:	4603      	mov	r3, r0
 8003610:	71bb      	strb	r3, [r7, #6]
 8003612:	460b      	mov	r3, r1
 8003614:	717b      	strb	r3, [r7, #5]
 8003616:	4613      	mov	r3, r2
 8003618:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800361a:	797a      	ldrb	r2, [r7, #5]
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfb8      	it	lt
 8003624:	425b      	neglt	r3, r3
 8003626:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8003628:	793a      	ldrb	r2, [r7, #4]
 800362a:	79bb      	ldrb	r3, [r7, #6]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bfb8      	it	lt
 8003632:	425b      	neglt	r3, r3
 8003634:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8003636:	79fa      	ldrb	r2, [r7, #7]
 8003638:	797b      	ldrb	r3, [r7, #5]
 800363a:	429a      	cmp	r2, r3
 800363c:	d201      	bcs.n	8003642 <ssd1306_Line+0x46>
 800363e:	2301      	movs	r3, #1
 8003640:	e001      	b.n	8003646 <ssd1306_Line+0x4a>
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8003648:	79ba      	ldrb	r2, [r7, #6]
 800364a:	793b      	ldrb	r3, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d201      	bcs.n	8003654 <ssd1306_Line+0x58>
 8003650:	2301      	movs	r3, #1
 8003652:	e001      	b.n	8003658 <ssd1306_Line+0x5c>
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 8003662:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003666:	7939      	ldrb	r1, [r7, #4]
 8003668:	797b      	ldrb	r3, [r7, #5]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff74 	bl	8003558 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8003670:	e024      	b.n	80036bc <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8003672:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003676:	79b9      	ldrb	r1, [r7, #6]
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff6c 	bl	8003558 <ssd1306_DrawPixel>
    error2 = error * 2;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	425b      	negs	r3, r3
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	dd08      	ble.n	80036a2 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	4413      	add	r3, r2
 80036a0:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	da08      	bge.n	80036bc <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4413      	add	r3, r2
 80036b0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	79bb      	ldrb	r3, [r7, #6]
 80036b8:	4413      	add	r3, r2
 80036ba:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80036bc:	79fa      	ldrb	r2, [r7, #7]
 80036be:	797b      	ldrb	r3, [r7, #5]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1d6      	bne.n	8003672 <ssd1306_Line+0x76>
 80036c4:	79ba      	ldrb	r2, [r7, #6]
 80036c6:	793b      	ldrb	r3, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1d2      	bne.n	8003672 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80036cc:	bf00      	nop
}
 80036ce:	3724      	adds	r7, #36	; 0x24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	0000      	movs	r0, r0
	...

080036d8 <ssd1306_DegToRad>:
    /*nothing to do*/
  }
  return;
}
/*Convert Degrees to Radians*/
static float ssd1306_DegToRad(float par_deg) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fc ff05 	bl	80004f0 <__aeabi_f2d>
 80036e6:	a30c      	add	r3, pc, #48	; (adr r3, 8003718 <ssd1306_DegToRad+0x40>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff58 	bl	80005a0 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <ssd1306_DegToRad+0x48>)
 80036fe:	f7fd f879 	bl	80007f4 <__aeabi_ddiv>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd fa2b 	bl	8000b64 <__aeabi_d2f>
 800370e:	4603      	mov	r3, r0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	51eb851f 	.word	0x51eb851f
 800371c:	40091eb8 	.word	0x40091eb8
 8003720:	40668000 	.word	0x40668000

08003724 <ssd1306_NormalizeTo0_360>:
/*Normalize degree to [0;360]*/
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003734:	d802      	bhi.n	800373c <ssd1306_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	81fb      	strh	r3, [r7, #14]
 800373a:	e013      	b.n	8003764 <ssd1306_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	490b      	ldr	r1, [pc, #44]	; (8003770 <ssd1306_NormalizeTo0_360+0x4c>)
 8003742:	fba1 1202 	umull	r1, r2, r1, r2
 8003746:	0892      	lsrs	r2, r2, #2
 8003748:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800374c:	fb01 f202 	mul.w	r2, r1, r2
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <ssd1306_NormalizeTo0_360+0x3a>
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	e001      	b.n	8003762 <ssd1306_NormalizeTo0_360+0x3e>
 800375e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003762:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 8003764:	89fb      	ldrh	r3, [r7, #14]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	16c16c17 	.word	0x16c16c17

08003774 <ssd1306_DrawArc>:
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af02      	add	r7, sp, #8
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4623      	mov	r3, r4
 8003784:	71fb      	strb	r3, [r7, #7]
 8003786:	4603      	mov	r3, r0
 8003788:	71bb      	strb	r3, [r7, #6]
 800378a:	460b      	mov	r3, r1
 800378c:	717b      	strb	r3, [r7, #5]
 800378e:	4613      	mov	r3, r2
 8003790:	807b      	strh	r3, [r7, #2]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
    float rad;

    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800379a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ffc1 	bl	8003724 <ssd1306_NormalizeTo0_360>
 80037a2:	4603      	mov	r3, r0
 80037a4:	617b      	str	r3, [r7, #20]

    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ffbb 	bl	8003724 <ssd1306_NormalizeTo0_360>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4a70      	ldr	r2, [pc, #448]	; (8003974 <ssd1306_DrawArc+0x200>)
 80037b2:	fb82 1203 	smull	r1, r2, r2, r3
 80037b6:	1092      	asrs	r2, r2, #2
 80037b8:	17db      	asrs	r3, r3, #31
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	4a6b      	ldr	r2, [pc, #428]	; (8003978 <ssd1306_DrawArc+0x204>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80037d4:	6978      	ldr	r0, [r7, #20]
 80037d6:	f7fd facb 	bl	8000d70 <__aeabi_ui2f>
 80037da:	4604      	mov	r4, r0
 80037dc:	6938      	ldr	r0, [r7, #16]
 80037de:	f7fd fac7 	bl	8000d70 <__aeabi_ui2f>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4619      	mov	r1, r3
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7fd fbce 	bl	8000f88 <__aeabi_fdiv>
 80037ec:	4603      	mov	r3, r0
 80037ee:	60fb      	str	r3, [r7, #12]
    while(count < approx_segments)
 80037f0:	e0b7      	b.n	8003962 <ssd1306_DrawArc+0x1ee>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80037f2:	69f8      	ldr	r0, [r7, #28]
 80037f4:	f7fd fabc 	bl	8000d70 <__aeabi_ui2f>
 80037f8:	4603      	mov	r3, r0
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fb0f 	bl	8000e20 <__aeabi_fmul>
 8003802:	4603      	mov	r3, r0
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff67 	bl	80036d8 <ssd1306_DegToRad>
 800380a:	61b8      	str	r0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 800380c:	69b8      	ldr	r0, [r7, #24]
 800380e:	f7fc fe6f 	bl	80004f0 <__aeabi_f2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f005 fe27 	bl	800946c <sin>
 800381e:	4604      	mov	r4, r0
 8003820:	460d      	mov	r5, r1
 8003822:	797b      	ldrb	r3, [r7, #5]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fc fe51 	bl	80004cc <__aeabi_i2d>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f7fc feb5 	bl	80005a0 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f949 	bl	8000ad4 <__aeabi_d2iz>
 8003842:	4603      	mov	r3, r0
 8003844:	b25b      	sxtb	r3, r3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	4413      	add	r3, r2
 800384c:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);
 800384e:	69b8      	ldr	r0, [r7, #24]
 8003850:	f7fc fe4e 	bl	80004f0 <__aeabi_f2d>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	f005 fd74 	bl	8009348 <cos>
 8003860:	4604      	mov	r4, r0
 8003862:	460d      	mov	r5, r1
 8003864:	797b      	ldrb	r3, [r7, #5]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fe30 	bl	80004cc <__aeabi_i2d>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4620      	mov	r0, r4
 8003872:	4629      	mov	r1, r5
 8003874:	f7fc fe94 	bl	80005a0 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f7fd f928 	bl	8000ad4 <__aeabi_d2iz>
 8003884:	4603      	mov	r3, r0
 8003886:	b25b      	sxtb	r3, r3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	79bb      	ldrb	r3, [r7, #6]
 800388c:	4413      	add	r3, r2
 800388e:	72bb      	strb	r3, [r7, #10]
        count++;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	3301      	adds	r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments)
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	429a      	cmp	r2, r3
 800389c:	d00d      	beq.n	80038ba <ssd1306_DrawArc+0x146>
        {
            rad = ssd1306_DegToRad(count*approx_degree);
 800389e:	69f8      	ldr	r0, [r7, #28]
 80038a0:	f7fd fa66 	bl	8000d70 <__aeabi_ui2f>
 80038a4:	4603      	mov	r3, r0
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fab9 	bl	8000e20 <__aeabi_fmul>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff11 	bl	80036d8 <ssd1306_DegToRad>
 80038b6:	61b8      	str	r0, [r7, #24]
 80038b8:	e007      	b.n	80038ca <ssd1306_DrawArc+0x156>
        }
        else
        {
            rad = ssd1306_DegToRad(loc_sweep);
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7fd fa58 	bl	8000d70 <__aeabi_ui2f>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff08 	bl	80036d8 <ssd1306_DegToRad>
 80038c8:	61b8      	str	r0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80038ca:	69b8      	ldr	r0, [r7, #24]
 80038cc:	f7fc fe10 	bl	80004f0 <__aeabi_f2d>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	f005 fdc8 	bl	800946c <sin>
 80038dc:	4604      	mov	r4, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	797b      	ldrb	r3, [r7, #5]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fdf2 	bl	80004cc <__aeabi_i2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4620      	mov	r0, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	f7fc fe56 	bl	80005a0 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fd f8ea 	bl	8000ad4 <__aeabi_d2iz>
 8003900:	4603      	mov	r3, r0
 8003902:	b25b      	sxtb	r3, r3
 8003904:	b2da      	uxtb	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4413      	add	r3, r2
 800390a:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);
 800390c:	69b8      	ldr	r0, [r7, #24]
 800390e:	f7fc fdef 	bl	80004f0 <__aeabi_f2d>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f005 fd15 	bl	8009348 <cos>
 800391e:	4604      	mov	r4, r0
 8003920:	460d      	mov	r5, r1
 8003922:	797b      	ldrb	r3, [r7, #5]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fdd1 	bl	80004cc <__aeabi_i2d>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7fc fe35 	bl	80005a0 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f7fd f8c9 	bl	8000ad4 <__aeabi_d2iz>
 8003942:	4603      	mov	r3, r0
 8003944:	b25b      	sxtb	r3, r3
 8003946:	b2da      	uxtb	r2, r3
 8003948:	79bb      	ldrb	r3, [r7, #6]
 800394a:	4413      	add	r3, r2
 800394c:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 800394e:	7a3c      	ldrb	r4, [r7, #8]
 8003950:	7a7a      	ldrb	r2, [r7, #9]
 8003952:	7ab9      	ldrb	r1, [r7, #10]
 8003954:	7af8      	ldrb	r0, [r7, #11]
 8003956:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4623      	mov	r3, r4
 800395e:	f7ff fe4d 	bl	80035fc <ssd1306_Line>
    while(count < approx_segments)
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	429a      	cmp	r2, r3
 8003968:	f4ff af43 	bcc.w	80037f2 <ssd1306_DrawArc+0x7e>
    }

    return;
 800396c:	bf00      	nop
}
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bdb0      	pop	{r4, r5, r7, pc}
 8003974:	66666667 	.word	0x66666667
 8003978:	16c16c17 	.word	0x16c16c17

0800397c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003986:	2381      	movs	r3, #129	; 0x81
 8003988:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fcfd 	bl	800338c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fcf9 	bl	800338c <ssd1306_WriteCommand>
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80039b4:	23af      	movs	r3, #175	; 0xaf
 80039b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <ssd1306_SetDisplayOn+0x38>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	715a      	strb	r2, [r3, #5]
 80039be:	e004      	b.n	80039ca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80039c0:	23ae      	movs	r3, #174	; 0xae
 80039c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <ssd1306_SetDisplayOn+0x38>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fcdd 	bl	800338c <ssd1306_WriteCommand>
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000dd4 	.word	0x20000dd4

080039e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_MspInit+0x5c>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_MspInit+0x5c>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6193      	str	r3, [r2, #24]
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_MspInit+0x5c>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_MspInit+0x5c>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_MspInit+0x5c>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_MspInit+0x5c>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_MspInit+0x60>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_MspInit+0x60>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000

08003a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	f107 0314 	add.w	r3, r7, #20
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_I2C_MspInit+0x90>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d132      	bne.n	8003aca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <HAL_I2C_MspInit+0x94>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_I2C_MspInit+0x94>)
 8003a6a:	f043 0308 	orr.w	r3, r3, #8
 8003a6e:	6193      	str	r3, [r2, #24]
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_I2C_MspInit+0x94>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a82:	2312      	movs	r3, #18
 8003a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4812      	ldr	r0, [pc, #72]	; (8003adc <HAL_I2C_MspInit+0x98>)
 8003a92:	f001 fa23 	bl	8004edc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_I2C_MspInit+0x9c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	f043 0302 	orr.w	r3, r3, #2
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	4a0c      	ldr	r2, [pc, #48]	; (8003ae0 <HAL_I2C_MspInit+0x9c>)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_I2C_MspInit+0x94>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <HAL_I2C_MspInit+0x94>)
 8003ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003abc:	61d3      	str	r3, [r2, #28]
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_I2C_MspInit+0x94>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003aca:	bf00      	nop
 8003acc:	3728      	adds	r7, #40	; 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40005400 	.word	0x40005400
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40010c00 	.word	0x40010c00
 8003ae0:	40010000 	.word	0x40010000

08003ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_TIM_Base_MspInit+0x8c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003af6:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b00:	6193      	str	r3, [r2, #24]
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b0e:	e02a      	b.n	8003b66 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIM_Base_MspInit+0x94>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d114      	bne.n	8003b44 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	61d3      	str	r3, [r2, #28]
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2101      	movs	r1, #1
 8003b36:	2036      	movs	r0, #54	; 0x36
 8003b38:	f000 fd17 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003b3c:	2036      	movs	r0, #54	; 0x36
 8003b3e:	f000 fd30 	bl	80045a2 <HAL_NVIC_EnableIRQ>
}
 8003b42:	e010      	b.n	8003b66 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <HAL_TIM_Base_MspInit+0x98>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10b      	bne.n	8003b66 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b58:	6193      	str	r3, [r2, #24]
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_TIM_Base_MspInit+0x90>)
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40001000 	.word	0x40001000
 8003b7c:	40013400 	.word	0x40013400

08003b80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b090      	sub	sp, #64	; 0x40
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d14f      	bne.n	8003c40 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	61d3      	str	r3, [r2, #28]
 8003bac:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb8:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	4a61      	ldr	r2, [pc, #388]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	6193      	str	r3, [r2, #24]
 8003bc4:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4a5b      	ldr	r2, [pc, #364]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bd6:	f043 0308 	orr.w	r3, r3, #8
 8003bda:	6193      	str	r3, [r2, #24]
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	623b      	str	r3, [r7, #32]
 8003be6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4852      	ldr	r0, [pc, #328]	; (8003d48 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003bfe:	f001 f96d 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c02:	2308      	movs	r3, #8
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c06:	2300      	movs	r3, #0
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c12:	4619      	mov	r1, r3
 8003c14:	484d      	ldr	r0, [pc, #308]	; (8003d4c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003c16:	f001 f961 	bl	8004edc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c38:	4a45      	ldr	r2, [pc, #276]	; (8003d50 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003c3e:	e07c      	b.n	8003d3a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a43      	ldr	r2, [pc, #268]	; (8003d54 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d124      	bne.n	8003c94 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c4a:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	61d3      	str	r3, [r2, #28]
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c62:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	4a37      	ldr	r2, [pc, #220]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6193      	str	r3, [r2, #24]
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c7a:	23c0      	movs	r3, #192	; 0xc0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	482e      	ldr	r0, [pc, #184]	; (8003d48 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c8e:	f001 f925 	bl	8004edc <HAL_GPIO_Init>
}
 8003c92:	e052      	b.n	8003d3a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2f      	ldr	r2, [pc, #188]	; (8003d58 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d124      	bne.n	8003ce8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4a28      	ldr	r2, [pc, #160]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	61d3      	str	r3, [r2, #28]
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003cbc:	f043 0308 	orr.w	r3, r3, #8
 8003cc0:	6193      	str	r3, [r2, #24]
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cce:	23c0      	movs	r3, #192	; 0xc0
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cde:	4619      	mov	r1, r3
 8003ce0:	481a      	ldr	r0, [pc, #104]	; (8003d4c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ce2:	f001 f8fb 	bl	8004edc <HAL_GPIO_Init>
}
 8003ce6:	e028      	b.n	8003d3a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d123      	bne.n	8003d3a <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003cf8:	f043 0308 	orr.w	r3, r3, #8
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6193      	str	r3, [r2, #24]
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d22:	2303      	movs	r3, #3
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d26:	2300      	movs	r3, #0
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d32:	4619      	mov	r1, r3
 8003d34:	4804      	ldr	r0, [pc, #16]	; (8003d48 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d36:	f001 f8d1 	bl	8004edc <HAL_GPIO_Init>
}
 8003d3a:	bf00      	nop
 8003d3c:	3740      	adds	r7, #64	; 0x40
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40010800 	.word	0x40010800
 8003d4c:	40010c00 	.word	0x40010c00
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00

08003d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_TIM_MspPostInit+0x98>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d119      	bne.n	8003db4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_TIM_MspPostInit+0x9c>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_TIM_MspPostInit+0x9c>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6193      	str	r3, [r2, #24]
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_TIM_MspPostInit+0x9c>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003d98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da2:	2302      	movs	r3, #2
 8003da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da6:	f107 0310 	add.w	r3, r7, #16
 8003daa:	4619      	mov	r1, r3
 8003dac:	4814      	ldr	r0, [pc, #80]	; (8003e00 <HAL_TIM_MspPostInit+0xa0>)
 8003dae:	f001 f895 	bl	8004edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003db2:	e01d      	b.n	8003df0 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <HAL_TIM_MspPostInit+0xa4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d118      	bne.n	8003df0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_TIM_MspPostInit+0x9c>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_TIM_MspPostInit+0x9c>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	6193      	str	r3, [r2, #24]
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_TIM_MspPostInit+0x9c>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003dd6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2302      	movs	r3, #2
 8003de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de4:	f107 0310 	add.w	r3, r7, #16
 8003de8:	4619      	mov	r1, r3
 8003dea:	4807      	ldr	r0, [pc, #28]	; (8003e08 <HAL_TIM_MspPostInit+0xa8>)
 8003dec:	f001 f876 	bl	8004edc <HAL_GPIO_Init>
}
 8003df0:	bf00      	nop
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40010800 	.word	0x40010800
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40011000 	.word	0x40011000

08003e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	; 0x30
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f107 031c 	add.w	r3, r7, #28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6a      	ldr	r2, [pc, #424]	; (8003fd0 <HAL_UART_MspInit+0x1c4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d156      	bne.n	8003eda <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e2c:	4b69      	ldr	r3, [pc, #420]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	4a68      	ldr	r2, [pc, #416]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e36:	61d3      	str	r3, [r2, #28]
 8003e38:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e44:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	4a62      	ldr	r2, [pc, #392]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6193      	str	r3, [r2, #24]
 8003e50:	4b60      	ldr	r3, [pc, #384]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e64:	2303      	movs	r3, #3
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8003e68:	f107 031c 	add.w	r3, r7, #28
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	485a      	ldr	r0, [pc, #360]	; (8003fd8 <HAL_UART_MspInit+0x1cc>)
 8003e70:	f001 f834 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8003e74:	2308      	movs	r3, #8
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	4619      	mov	r1, r3
 8003e86:	4854      	ldr	r0, [pc, #336]	; (8003fd8 <HAL_UART_MspInit+0x1cc>)
 8003e88:	f001 f828 	bl	8004edc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003e8e:	4a54      	ldr	r2, [pc, #336]	; (8003fe0 <HAL_UART_MspInit+0x1d4>)
 8003e90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e92:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e9e:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ea4:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ebc:	4847      	ldr	r0, [pc, #284]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003ebe:	f000 fb8b 	bl	80045d8 <HAL_DMA_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003ec8:	f7ff fa54 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a43      	ldr	r2, [pc, #268]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ed2:	4a42      	ldr	r2, [pc, #264]	; (8003fdc <HAL_UART_MspInit+0x1d0>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ed8:	e076      	b.n	8003fc8 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a41      	ldr	r2, [pc, #260]	; (8003fe4 <HAL_UART_MspInit+0x1d8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d171      	bne.n	8003fc8 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eee:	61d3      	str	r3, [r2, #28]
 8003ef0:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efc:	4b35      	ldr	r3, [pc, #212]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003f02:	f043 0310 	orr.w	r3, r3, #16
 8003f06:	6193      	str	r3, [r2, #24]
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_UART_MspInit+0x1c8>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8003f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8003f22:	f107 031c 	add.w	r3, r7, #28
 8003f26:	4619      	mov	r1, r3
 8003f28:	482f      	ldr	r0, [pc, #188]	; (8003fe8 <HAL_UART_MspInit+0x1dc>)
 8003f2a:	f000 ffd7 	bl	8004edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8003f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f34:	2300      	movs	r3, #0
 8003f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	4619      	mov	r1, r3
 8003f42:	4829      	ldr	r0, [pc, #164]	; (8003fe8 <HAL_UART_MspInit+0x1dc>)
 8003f44:	f000 ffca 	bl	8004edc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_UART_MspInit+0x1e0>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	f043 0310 	orr.w	r3, r3, #16
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f66:	4a21      	ldr	r2, [pc, #132]	; (8003fec <HAL_UART_MspInit+0x1e0>)
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003f6c:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f6e:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <HAL_UART_MspInit+0x1e8>)
 8003f70:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f72:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f9c:	4814      	ldr	r0, [pc, #80]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003f9e:	f000 fb1b 	bl	80045d8 <HAL_DMA_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003fa8:	f7ff f9e4 	bl	8003374 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8003fb2:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <HAL_UART_MspInit+0x1e4>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2102      	movs	r1, #2
 8003fbc:	2027      	movs	r0, #39	; 0x27
 8003fbe:	f000 fad4 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fc2:	2027      	movs	r0, #39	; 0x27
 8003fc4:	f000 faed 	bl	80045a2 <HAL_NVIC_EnableIRQ>
}
 8003fc8:	bf00      	nop
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40004400 	.word	0x40004400
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010800 	.word	0x40010800
 8003fdc:	20000904 	.word	0x20000904
 8003fe0:	4002006c 	.word	0x4002006c
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40011000 	.word	0x40011000
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	20000948 	.word	0x20000948
 8003ff4:	40020030 	.word	0x40020030

08003ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003ffc:	e7fe      	b.n	8003ffc <NMI_Handler+0x4>

08003ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004002:	e7fe      	b.n	8004002 <HardFault_Handler+0x4>

08004004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004008:	e7fe      	b.n	8004008 <MemManage_Handler+0x4>

0800400a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400e:	e7fe      	b.n	800400e <BusFault_Handler+0x4>

08004010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004014:	e7fe      	b.n	8004014 <UsageFault_Handler+0x4>

08004016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800403e:	f000 f97d 	bl	800433c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <DMA1_Channel3_IRQHandler+0x10>)
 800404e:	f000 fcdb 	bl	8004a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000948 	.word	0x20000948

0800405c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <DMA1_Channel6_IRQHandler+0x24>)
 8004062:	7a1b      	ldrb	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8004068:	4805      	ldr	r0, [pc, #20]	; (8004080 <DMA1_Channel6_IRQHandler+0x24>)
 800406a:	f7fd fe5f 	bl	8001d2c <huansic_xb_decodeHeader>
 800406e:	e002      	b.n	8004076 <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8004070:	4803      	ldr	r0, [pc, #12]	; (8004080 <DMA1_Channel6_IRQHandler+0x24>)
 8004072:	f7fd fe99 	bl	8001da8 <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004076:	4803      	ldr	r0, [pc, #12]	; (8004084 <DMA1_Channel6_IRQHandler+0x28>)
 8004078:	f000 fcc6 	bl	8004a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000ad4 	.word	0x20000ad4
 8004084:	20000904 	.word	0x20000904

08004088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <USART3_IRQHandler+0x10>)
 800408e:	f003 fbdf 	bl	8007850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200008c0 	.word	0x200008c0

0800409c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 80040a0:	4808      	ldr	r0, [pc, #32]	; (80040c4 <TIM6_IRQHandler+0x28>)
 80040a2:	f7fd fcf3 	bl	8001a8c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 80040a6:	4808      	ldr	r0, [pc, #32]	; (80040c8 <TIM6_IRQHandler+0x2c>)
 80040a8:	f7fd fcf0 	bl	8001a8c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 80040ac:	4807      	ldr	r0, [pc, #28]	; (80040cc <TIM6_IRQHandler+0x30>)
 80040ae:	f7fd fced 	bl	8001a8c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 80040b2:	4807      	ldr	r0, [pc, #28]	; (80040d0 <TIM6_IRQHandler+0x34>)
 80040b4:	f7fd fcea 	bl	8001a8c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040b8:	4806      	ldr	r0, [pc, #24]	; (80040d4 <TIM6_IRQHandler+0x38>)
 80040ba:	f002 fc23 	bl	8006904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	2000098c 	.word	0x2000098c
 80040c8:	200009c8 	.word	0x200009c8
 80040cc:	20000a04 	.word	0x20000a04
 80040d0:	20000a40 	.word	0x20000a40
 80040d4:	200007ec 	.word	0x200007ec

080040d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	return 1;
 80040dc:	2301      	movs	r3, #1
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <_kill>:

int _kill(int pid, int sig)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040f0:	f004 f91e 	bl	8008330 <__errno>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2216      	movs	r2, #22
 80040f8:	601a      	str	r2, [r3, #0]
	return -1;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_exit>:

void _exit (int status)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800410e:	f04f 31ff 	mov.w	r1, #4294967295
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ffe7 	bl	80040e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004118:	e7fe      	b.n	8004118 <_exit+0x12>

0800411a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e00a      	b.n	8004142 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800412c:	f3af 8000 	nop.w
 8004130:	4601      	mov	r1, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	60ba      	str	r2, [r7, #8]
 8004138:	b2ca      	uxtb	r2, r1
 800413a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3301      	adds	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	dbf0      	blt.n	800412c <_read+0x12>
	}

return len;
 800414a:	687b      	ldr	r3, [r7, #4]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e009      	b.n	800417a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	60ba      	str	r2, [r7, #8]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3301      	adds	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	429a      	cmp	r2, r3
 8004180:	dbf1      	blt.n	8004166 <_write+0x12>
	}
	return len;
 8004182:	687b      	ldr	r3, [r7, #4]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_close>:

int _close(int file)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	return -1;
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041b2:	605a      	str	r2, [r3, #4]
	return 0;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <_isatty>:

int _isatty(int file)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	return 1;
 80041c8:	2301      	movs	r3, #1
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	return 0;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <_sbrk+0x5c>)
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <_sbrk+0x60>)
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <_sbrk+0x64>)
 800420a:	4a12      	ldr	r2, [pc, #72]	; (8004254 <_sbrk+0x68>)
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <_sbrk+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d207      	bcs.n	800422c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800421c:	f004 f888 	bl	8008330 <__errno>
 8004220:	4603      	mov	r3, r0
 8004222:	220c      	movs	r2, #12
 8004224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	e009      	b.n	8004240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <_sbrk+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <_sbrk+0x64>)
 800423c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2000c000 	.word	0x2000c000
 800424c:	00000400 	.word	0x00000400
 8004250:	20000ddc 	.word	0x20000ddc
 8004254:	20000df8 	.word	0x20000df8

08004258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004264:	480c      	ldr	r0, [pc, #48]	; (8004298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004266:	490d      	ldr	r1, [pc, #52]	; (800429c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800426c:	e002      	b.n	8004274 <LoopCopyDataInit>

0800426e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004272:	3304      	adds	r3, #4

08004274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004278:	d3f9      	bcc.n	800426e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800427c:	4c0a      	ldr	r4, [pc, #40]	; (80042a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800427e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004280:	e001      	b.n	8004286 <LoopFillZerobss>

08004282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004284:	3204      	adds	r2, #4

08004286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004288:	d3fb      	bcc.n	8004282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800428a:	f7ff ffe5 	bl	8004258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800428e:	f004 f867 	bl	8008360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004292:	f7fe fa35 	bl	8002700 <main>
  bx lr
 8004296:	4770      	bx	lr
  ldr r0, =_sdata
 8004298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800429c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80042a0:	0800a808 	.word	0x0800a808
  ldr r2, =_sbss
 80042a4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80042a8:	20000df4 	.word	0x20000df4

080042ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042ac:	e7fe      	b.n	80042ac <ADC1_2_IRQHandler>
	...

080042b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_Init+0x28>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_Init+0x28>)
 80042ba:	f043 0310 	orr.w	r3, r3, #16
 80042be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c0:	2003      	movs	r0, #3
 80042c2:	f000 f947 	bl	8004554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042c6:	200f      	movs	r0, #15
 80042c8:	f000 f808 	bl	80042dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042cc:	f7ff fb88 	bl	80039e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000

080042dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042e4:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_InitTick+0x54>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_InitTick+0x58>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f95f 	bl	80045be <HAL_SYSTICK_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e00e      	b.n	8004328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b0f      	cmp	r3, #15
 800430e:	d80a      	bhi.n	8004326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004310:	2200      	movs	r2, #0
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	f000 f927 	bl	800456a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800431c:	4a06      	ldr	r2, [pc, #24]	; (8004338 <HAL_InitTick+0x5c>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000004 	.word	0x20000004
 8004334:	2000000c 	.word	0x2000000c
 8004338:	20000008 	.word	0x20000008

0800433c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_IncTick+0x1c>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_IncTick+0x20>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4413      	add	r3, r2
 800434c:	4a03      	ldr	r2, [pc, #12]	; (800435c <HAL_IncTick+0x20>)
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	2000000c 	.word	0x2000000c
 800435c:	20000de0 	.word	0x20000de0

08004360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return uwTick;
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <HAL_GetTick+0x10>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	20000de0 	.word	0x20000de0

08004374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7ff fff0 	bl	8004360 <HAL_GetTick>
 8004380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d005      	beq.n	800439a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_Delay+0x44>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800439a:	bf00      	nop
 800439c:	f7ff ffe0 	bl	8004360 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d8f7      	bhi.n	800439c <HAL_Delay+0x28>
  {
  }
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c

080043bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <__NVIC_SetPriorityGrouping+0x44>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043d8:	4013      	ands	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <__NVIC_SetPriorityGrouping+0x44>)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	60d3      	str	r3, [r2, #12]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <__NVIC_GetPriorityGrouping+0x18>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	f003 0307 	and.w	r3, r3, #7
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	2b00      	cmp	r3, #0
 8004430:	db0b      	blt.n	800444a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	f003 021f 	and.w	r2, r3, #31
 8004438:	4906      	ldr	r1, [pc, #24]	; (8004454 <__NVIC_EnableIRQ+0x34>)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2001      	movs	r0, #1
 8004442:	fa00 f202 	lsl.w	r2, r0, r2
 8004446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	e000e100 	.word	0xe000e100

08004458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	db0a      	blt.n	8004482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	490c      	ldr	r1, [pc, #48]	; (80044a4 <__NVIC_SetPriority+0x4c>)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	0112      	lsls	r2, r2, #4
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	440b      	add	r3, r1
 800447c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004480:	e00a      	b.n	8004498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	4908      	ldr	r1, [pc, #32]	; (80044a8 <__NVIC_SetPriority+0x50>)
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3b04      	subs	r3, #4
 8004490:	0112      	lsls	r2, r2, #4
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	440b      	add	r3, r1
 8004496:	761a      	strb	r2, [r3, #24]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000e100 	.word	0xe000e100
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f1c3 0307 	rsb	r3, r3, #7
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	bf28      	it	cs
 80044ca:	2304      	movcs	r3, #4
 80044cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d902      	bls.n	80044dc <NVIC_EncodePriority+0x30>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3b03      	subs	r3, #3
 80044da:	e000      	b.n	80044de <NVIC_EncodePriority+0x32>
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	401a      	ands	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	43d9      	mvns	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	4313      	orrs	r3, r2
         );
}
 8004506:	4618      	mov	r0, r3
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004520:	d301      	bcc.n	8004526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004522:	2301      	movs	r3, #1
 8004524:	e00f      	b.n	8004546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <SysTick_Config+0x40>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800452e:	210f      	movs	r1, #15
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	f7ff ff90 	bl	8004458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <SysTick_Config+0x40>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SysTick_Config+0x40>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010

08004554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff2d 	bl	80043bc <__NVIC_SetPriorityGrouping>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	4603      	mov	r3, r0
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800457c:	f7ff ff42 	bl	8004404 <__NVIC_GetPriorityGrouping>
 8004580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff90 	bl	80044ac <NVIC_EncodePriority>
 800458c:	4602      	mov	r2, r0
 800458e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff5f 	bl	8004458 <__NVIC_SetPriority>
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff35 	bl	8004420 <__NVIC_EnableIRQ>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ffa2 	bl	8004510 <SysTick_Config>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e059      	b.n	80046a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_DMA_Init+0xd4>)
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d80f      	bhi.n	800461a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_DMA_Init+0xd8>)
 8004602:	4413      	add	r3, r2
 8004604:	4a2b      	ldr	r2, [pc, #172]	; (80046b4 <HAL_DMA_Init+0xdc>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <HAL_DMA_Init+0xe0>)
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
 8004618:	e00e      	b.n	8004638 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_DMA_Init+0xe4>)
 8004622:	4413      	add	r3, r2
 8004624:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <HAL_DMA_Init+0xdc>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	009a      	lsls	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <HAL_DMA_Init+0xe8>)
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800464e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800465c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	40020407 	.word	0x40020407
 80046b0:	bffdfff8 	.word	0xbffdfff8
 80046b4:	cccccccd 	.word	0xcccccccd
 80046b8:	40020000 	.word	0x40020000
 80046bc:	bffdfbf8 	.word	0xbffdfbf8
 80046c0:	40020400 	.word	0x40020400

080046c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_DMA_Start_IT+0x20>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e04a      	b.n	800477a <HAL_DMA_Start_IT+0xb6>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d13a      	bne.n	800476c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fbb0 	bl	8004e80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 020e 	orr.w	r2, r2, #14
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e00f      	b.n	800475a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0204 	bic.w	r2, r2, #4
 8004748:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 020a 	orr.w	r2, r2, #10
 8004758:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e005      	b.n	8004778 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004774:	2302      	movs	r3, #2
 8004776:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004778:	7dfb      	ldrb	r3, [r7, #23]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004794:	2b02      	cmp	r3, #2
 8004796:	d008      	beq.n	80047aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2204      	movs	r2, #4
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e020      	b.n	80047ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 020e 	bic.w	r2, r2, #14
 80047b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	2101      	movs	r1, #1
 80047d4:	fa01 f202 	lsl.w	r2, r1, r2
 80047d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
	...

080047f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800480a:	2b02      	cmp	r3, #2
 800480c:	d005      	beq.n	800481a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2204      	movs	r2, #4
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e0d6      	b.n	80049c8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 020e 	bic.w	r2, r2, #14
 8004828:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	4b64      	ldr	r3, [pc, #400]	; (80049d4 <HAL_DMA_Abort_IT+0x1dc>)
 8004842:	429a      	cmp	r2, r3
 8004844:	d958      	bls.n	80048f8 <HAL_DMA_Abort_IT+0x100>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a63      	ldr	r2, [pc, #396]	; (80049d8 <HAL_DMA_Abort_IT+0x1e0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d04f      	beq.n	80048f0 <HAL_DMA_Abort_IT+0xf8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a61      	ldr	r2, [pc, #388]	; (80049dc <HAL_DMA_Abort_IT+0x1e4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d048      	beq.n	80048ec <HAL_DMA_Abort_IT+0xf4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a60      	ldr	r2, [pc, #384]	; (80049e0 <HAL_DMA_Abort_IT+0x1e8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d040      	beq.n	80048e6 <HAL_DMA_Abort_IT+0xee>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <HAL_DMA_Abort_IT+0x1ec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d038      	beq.n	80048e0 <HAL_DMA_Abort_IT+0xe8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5d      	ldr	r2, [pc, #372]	; (80049e8 <HAL_DMA_Abort_IT+0x1f0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d030      	beq.n	80048da <HAL_DMA_Abort_IT+0xe2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5b      	ldr	r2, [pc, #364]	; (80049ec <HAL_DMA_Abort_IT+0x1f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d028      	beq.n	80048d4 <HAL_DMA_Abort_IT+0xdc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a53      	ldr	r2, [pc, #332]	; (80049d4 <HAL_DMA_Abort_IT+0x1dc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d020      	beq.n	80048ce <HAL_DMA_Abort_IT+0xd6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a57      	ldr	r2, [pc, #348]	; (80049f0 <HAL_DMA_Abort_IT+0x1f8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d019      	beq.n	80048ca <HAL_DMA_Abort_IT+0xd2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	; (80049f4 <HAL_DMA_Abort_IT+0x1fc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d012      	beq.n	80048c6 <HAL_DMA_Abort_IT+0xce>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a54      	ldr	r2, [pc, #336]	; (80049f8 <HAL_DMA_Abort_IT+0x200>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00a      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a53      	ldr	r2, [pc, #332]	; (80049fc <HAL_DMA_Abort_IT+0x204>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d102      	bne.n	80048ba <HAL_DMA_Abort_IT+0xc2>
 80048b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b8:	e01b      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048be:	e018      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c4:	e015      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048c6:	2310      	movs	r3, #16
 80048c8:	e013      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e011      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d2:	e00e      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048d8:	e00b      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048de:	e008      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e4:	e005      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ea:	e002      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048ec:	2310      	movs	r3, #16
 80048ee:	e000      	b.n	80048f2 <HAL_DMA_Abort_IT+0xfa>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4a43      	ldr	r2, [pc, #268]	; (8004a00 <HAL_DMA_Abort_IT+0x208>)
 80048f4:	6053      	str	r3, [r2, #4]
 80048f6:	e057      	b.n	80049a8 <HAL_DMA_Abort_IT+0x1b0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a36      	ldr	r2, [pc, #216]	; (80049d8 <HAL_DMA_Abort_IT+0x1e0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04f      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x1aa>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a35      	ldr	r2, [pc, #212]	; (80049dc <HAL_DMA_Abort_IT+0x1e4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d048      	beq.n	800499e <HAL_DMA_Abort_IT+0x1a6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a33      	ldr	r2, [pc, #204]	; (80049e0 <HAL_DMA_Abort_IT+0x1e8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d040      	beq.n	8004998 <HAL_DMA_Abort_IT+0x1a0>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a32      	ldr	r2, [pc, #200]	; (80049e4 <HAL_DMA_Abort_IT+0x1ec>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d038      	beq.n	8004992 <HAL_DMA_Abort_IT+0x19a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <HAL_DMA_Abort_IT+0x1f0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d030      	beq.n	800498c <HAL_DMA_Abort_IT+0x194>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <HAL_DMA_Abort_IT+0x1f4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d028      	beq.n	8004986 <HAL_DMA_Abort_IT+0x18e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_DMA_Abort_IT+0x1dc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d020      	beq.n	8004980 <HAL_DMA_Abort_IT+0x188>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <HAL_DMA_Abort_IT+0x1f8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d019      	beq.n	800497c <HAL_DMA_Abort_IT+0x184>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <HAL_DMA_Abort_IT+0x1fc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d012      	beq.n	8004978 <HAL_DMA_Abort_IT+0x180>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <HAL_DMA_Abort_IT+0x200>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00a      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <HAL_DMA_Abort_IT+0x204>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d102      	bne.n	800496c <HAL_DMA_Abort_IT+0x174>
 8004966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496a:	e01b      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 800496c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004970:	e018      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 8004972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004976:	e015      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 8004978:	2310      	movs	r3, #16
 800497a:	e013      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 800497c:	2301      	movs	r3, #1
 800497e:	e011      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 8004980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004984:	e00e      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 8004986:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800498a:	e00b      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 800498c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004990:	e008      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 8004992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004996:	e005      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 8004998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800499c:	e002      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 800499e:	2310      	movs	r3, #16
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_Abort_IT+0x1ac>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <HAL_DMA_Abort_IT+0x20c>)
 80049a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
    } 
  }
  return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40020080 	.word	0x40020080
 80049d8:	40020008 	.word	0x40020008
 80049dc:	4002001c 	.word	0x4002001c
 80049e0:	40020030 	.word	0x40020030
 80049e4:	40020044 	.word	0x40020044
 80049e8:	40020058 	.word	0x40020058
 80049ec:	4002006c 	.word	0x4002006c
 80049f0:	40020408 	.word	0x40020408
 80049f4:	4002041c 	.word	0x4002041c
 80049f8:	40020430 	.word	0x40020430
 80049fc:	40020444 	.word	0x40020444
 8004a00:	40020400 	.word	0x40020400
 8004a04:	40020000 	.word	0x40020000

08004a08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2204      	movs	r2, #4
 8004a26:	409a      	lsls	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80f1 	beq.w	8004c14 <HAL_DMA_IRQHandler+0x20c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80eb 	beq.w	8004c14 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b5f      	ldr	r3, [pc, #380]	; (8004be0 <HAL_DMA_IRQHandler+0x1d8>)
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d958      	bls.n	8004b1a <HAL_DMA_IRQHandler+0x112>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	; (8004be4 <HAL_DMA_IRQHandler+0x1dc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04f      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x10a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <HAL_DMA_IRQHandler+0x1e0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d048      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x106>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5a      	ldr	r2, [pc, #360]	; (8004bec <HAL_DMA_IRQHandler+0x1e4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x100>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a59      	ldr	r2, [pc, #356]	; (8004bf0 <HAL_DMA_IRQHandler+0x1e8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d038      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xfa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_DMA_IRQHandler+0x1ec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d030      	beq.n	8004afc <HAL_DMA_IRQHandler+0xf4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a56      	ldr	r2, [pc, #344]	; (8004bf8 <HAL_DMA_IRQHandler+0x1f0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d028      	beq.n	8004af6 <HAL_DMA_IRQHandler+0xee>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a4d      	ldr	r2, [pc, #308]	; (8004be0 <HAL_DMA_IRQHandler+0x1d8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d020      	beq.n	8004af0 <HAL_DMA_IRQHandler+0xe8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a52      	ldr	r2, [pc, #328]	; (8004bfc <HAL_DMA_IRQHandler+0x1f4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d019      	beq.n	8004aec <HAL_DMA_IRQHandler+0xe4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a50      	ldr	r2, [pc, #320]	; (8004c00 <HAL_DMA_IRQHandler+0x1f8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d012      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0xe0>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4f      	ldr	r2, [pc, #316]	; (8004c04 <HAL_DMA_IRQHandler+0x1fc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00a      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xda>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a4d      	ldr	r2, [pc, #308]	; (8004c08 <HAL_DMA_IRQHandler+0x200>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d102      	bne.n	8004adc <HAL_DMA_IRQHandler+0xd4>
 8004ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ada:	e01b      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ae0:	e018      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae6:	e015      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004ae8:	2340      	movs	r3, #64	; 0x40
 8004aea:	e013      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e011      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004af0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004af4:	e00e      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004afa:	e00b      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b00:	e008      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b06:	e005      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0c:	e002      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004b0e:	2340      	movs	r3, #64	; 0x40
 8004b10:	e000      	b.n	8004b14 <HAL_DMA_IRQHandler+0x10c>
 8004b12:	2304      	movs	r3, #4
 8004b14:	4a3d      	ldr	r2, [pc, #244]	; (8004c0c <HAL_DMA_IRQHandler+0x204>)
 8004b16:	6053      	str	r3, [r2, #4]
 8004b18:	e057      	b.n	8004bca <HAL_DMA_IRQHandler+0x1c2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a31      	ldr	r2, [pc, #196]	; (8004be4 <HAL_DMA_IRQHandler+0x1dc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d04f      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x1bc>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <HAL_DMA_IRQHandler+0x1e0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d048      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x1b8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_DMA_IRQHandler+0x1e4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d040      	beq.n	8004bba <HAL_DMA_IRQHandler+0x1b2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <HAL_DMA_IRQHandler+0x1e8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d038      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x1ac>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_DMA_IRQHandler+0x1ec>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d030      	beq.n	8004bae <HAL_DMA_IRQHandler+0x1a6>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <HAL_DMA_IRQHandler+0x1f0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d028      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x1a0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <HAL_DMA_IRQHandler+0x1d8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d020      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x19a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_DMA_IRQHandler+0x1f4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d019      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x196>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <HAL_DMA_IRQHandler+0x1f8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d012      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x192>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <HAL_DMA_IRQHandler+0x1fc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00a      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x18c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <HAL_DMA_IRQHandler+0x200>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d102      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x186>
 8004b88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b8c:	e01b      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004b8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b92:	e018      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b98:	e015      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	e013      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	e011      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004ba2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ba6:	e00e      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bac:	e00b      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004bae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bb2:	e008      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bb8:	e005      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bbe:	e002      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	e000      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1be>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <HAL_DMA_IRQHandler+0x208>)
 8004bc8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8136 	beq.w	8004e40 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004bdc:	e130      	b.n	8004e40 <HAL_DMA_IRQHandler+0x438>
 8004bde:	bf00      	nop
 8004be0:	40020080 	.word	0x40020080
 8004be4:	40020008 	.word	0x40020008
 8004be8:	4002001c 	.word	0x4002001c
 8004bec:	40020030 	.word	0x40020030
 8004bf0:	40020044 	.word	0x40020044
 8004bf4:	40020058 	.word	0x40020058
 8004bf8:	4002006c 	.word	0x4002006c
 8004bfc:	40020408 	.word	0x40020408
 8004c00:	4002041c 	.word	0x4002041c
 8004c04:	40020430 	.word	0x40020430
 8004c08:	40020444 	.word	0x40020444
 8004c0c:	40020400 	.word	0x40020400
 8004c10:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2202      	movs	r2, #2
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80dd 	beq.w	8004de0 <HAL_DMA_IRQHandler+0x3d8>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80d7 	beq.w	8004de0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 020a 	bic.w	r2, r2, #10
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b7b      	ldr	r3, [pc, #492]	; (8004e4c <HAL_DMA_IRQHandler+0x444>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d958      	bls.n	8004d16 <HAL_DMA_IRQHandler+0x30e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a79      	ldr	r2, [pc, #484]	; (8004e50 <HAL_DMA_IRQHandler+0x448>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d04f      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x306>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a78      	ldr	r2, [pc, #480]	; (8004e54 <HAL_DMA_IRQHandler+0x44c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d048      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x302>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a76      	ldr	r2, [pc, #472]	; (8004e58 <HAL_DMA_IRQHandler+0x450>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d040      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x2fc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a75      	ldr	r2, [pc, #468]	; (8004e5c <HAL_DMA_IRQHandler+0x454>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d038      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x2f6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a73      	ldr	r2, [pc, #460]	; (8004e60 <HAL_DMA_IRQHandler+0x458>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d030      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x2f0>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a72      	ldr	r2, [pc, #456]	; (8004e64 <HAL_DMA_IRQHandler+0x45c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d028      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x2ea>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a69      	ldr	r2, [pc, #420]	; (8004e4c <HAL_DMA_IRQHandler+0x444>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d020      	beq.n	8004cec <HAL_DMA_IRQHandler+0x2e4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6e      	ldr	r2, [pc, #440]	; (8004e68 <HAL_DMA_IRQHandler+0x460>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d019      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x2e0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a6c      	ldr	r2, [pc, #432]	; (8004e6c <HAL_DMA_IRQHandler+0x464>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d012      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2dc>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6b      	ldr	r2, [pc, #428]	; (8004e70 <HAL_DMA_IRQHandler+0x468>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00a      	beq.n	8004cde <HAL_DMA_IRQHandler+0x2d6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <HAL_DMA_IRQHandler+0x46c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d102      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x2d0>
 8004cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cd6:	e01b      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cdc:	e018      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce2:	e015      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	e013      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e011      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cf0:	e00e      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004cf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cf6:	e00b      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cfc:	e008      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d02:	e005      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d08:	e002      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004d0a:	2320      	movs	r3, #32
 8004d0c:	e000      	b.n	8004d10 <HAL_DMA_IRQHandler+0x308>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	4a59      	ldr	r2, [pc, #356]	; (8004e78 <HAL_DMA_IRQHandler+0x470>)
 8004d12:	6053      	str	r3, [r2, #4]
 8004d14:	e057      	b.n	8004dc6 <HAL_DMA_IRQHandler+0x3be>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a4d      	ldr	r2, [pc, #308]	; (8004e50 <HAL_DMA_IRQHandler+0x448>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d04f      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x3b8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a4b      	ldr	r2, [pc, #300]	; (8004e54 <HAL_DMA_IRQHandler+0x44c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d048      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x3b4>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4a      	ldr	r2, [pc, #296]	; (8004e58 <HAL_DMA_IRQHandler+0x450>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d040      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x3ae>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a48      	ldr	r2, [pc, #288]	; (8004e5c <HAL_DMA_IRQHandler+0x454>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d038      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x3a8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a47      	ldr	r2, [pc, #284]	; (8004e60 <HAL_DMA_IRQHandler+0x458>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d030      	beq.n	8004daa <HAL_DMA_IRQHandler+0x3a2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a45      	ldr	r2, [pc, #276]	; (8004e64 <HAL_DMA_IRQHandler+0x45c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d028      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x39c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <HAL_DMA_IRQHandler+0x444>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d020      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x396>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a41      	ldr	r2, [pc, #260]	; (8004e68 <HAL_DMA_IRQHandler+0x460>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d019      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x392>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <HAL_DMA_IRQHandler+0x464>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d012      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x38e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a3e      	ldr	r2, [pc, #248]	; (8004e70 <HAL_DMA_IRQHandler+0x468>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00a      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x388>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a3d      	ldr	r2, [pc, #244]	; (8004e74 <HAL_DMA_IRQHandler+0x46c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d102      	bne.n	8004d8a <HAL_DMA_IRQHandler+0x382>
 8004d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d88:	e01b      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d8e:	e018      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d94:	e015      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004d96:	2320      	movs	r3, #32
 8004d98:	e013      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e011      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da2:	e00e      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004da8:	e00b      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dae:	e008      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004db4:	e005      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dba:	e002      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	e000      	b.n	8004dc2 <HAL_DMA_IRQHandler+0x3ba>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	4a2e      	ldr	r2, [pc, #184]	; (8004e7c <HAL_DMA_IRQHandler+0x474>)
 8004dc4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d034      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004dde:	e02f      	b.n	8004e40 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	2208      	movs	r2, #8
 8004de6:	409a      	lsls	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d028      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x43a>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d023      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 020e 	bic.w	r2, r2, #14
 8004e08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f202 	lsl.w	r2, r1, r2
 8004e18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
    }
  }
  return;
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
}
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40020080 	.word	0x40020080
 8004e50:	40020008 	.word	0x40020008
 8004e54:	4002001c 	.word	0x4002001c
 8004e58:	40020030 	.word	0x40020030
 8004e5c:	40020044 	.word	0x40020044
 8004e60:	40020058 	.word	0x40020058
 8004e64:	4002006c 	.word	0x4002006c
 8004e68:	40020408 	.word	0x40020408
 8004e6c:	4002041c 	.word	0x4002041c
 8004e70:	40020430 	.word	0x40020430
 8004e74:	40020444 	.word	0x40020444
 8004e78:	40020400 	.word	0x40020400
 8004e7c:	40020000 	.word	0x40020000

08004e80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	2101      	movs	r1, #1
 8004e98:	fa01 f202 	lsl.w	r2, r1, r2
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d108      	bne.n	8004ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ebe:	e007      	b.n	8004ed0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b08b      	sub	sp, #44	; 0x2c
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eee:	e179      	b.n	80051e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	f040 8168 	bne.w	80051de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a96      	ldr	r2, [pc, #600]	; (800516c <HAL_GPIO_Init+0x290>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d05e      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f18:	4a94      	ldr	r2, [pc, #592]	; (800516c <HAL_GPIO_Init+0x290>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d875      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f1e:	4a94      	ldr	r2, [pc, #592]	; (8005170 <HAL_GPIO_Init+0x294>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d058      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f24:	4a92      	ldr	r2, [pc, #584]	; (8005170 <HAL_GPIO_Init+0x294>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d86f      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f2a:	4a92      	ldr	r2, [pc, #584]	; (8005174 <HAL_GPIO_Init+0x298>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d052      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f30:	4a90      	ldr	r2, [pc, #576]	; (8005174 <HAL_GPIO_Init+0x298>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d869      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f36:	4a90      	ldr	r2, [pc, #576]	; (8005178 <HAL_GPIO_Init+0x29c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d04c      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f3c:	4a8e      	ldr	r2, [pc, #568]	; (8005178 <HAL_GPIO_Init+0x29c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d863      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f42:	4a8e      	ldr	r2, [pc, #568]	; (800517c <HAL_GPIO_Init+0x2a0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d046      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f48:	4a8c      	ldr	r2, [pc, #560]	; (800517c <HAL_GPIO_Init+0x2a0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d85d      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	d82a      	bhi.n	8004fa8 <HAL_GPIO_Init+0xcc>
 8004f52:	2b12      	cmp	r3, #18
 8004f54:	d859      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <HAL_GPIO_Init+0x80>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004fd7 	.word	0x08004fd7
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fc3 	.word	0x08004fc3
 8004f68:	08005005 	.word	0x08005005
 8004f6c:	0800500b 	.word	0x0800500b
 8004f70:	0800500b 	.word	0x0800500b
 8004f74:	0800500b 	.word	0x0800500b
 8004f78:	0800500b 	.word	0x0800500b
 8004f7c:	0800500b 	.word	0x0800500b
 8004f80:	0800500b 	.word	0x0800500b
 8004f84:	0800500b 	.word	0x0800500b
 8004f88:	0800500b 	.word	0x0800500b
 8004f8c:	0800500b 	.word	0x0800500b
 8004f90:	0800500b 	.word	0x0800500b
 8004f94:	0800500b 	.word	0x0800500b
 8004f98:	0800500b 	.word	0x0800500b
 8004f9c:	0800500b 	.word	0x0800500b
 8004fa0:	08004fb9 	.word	0x08004fb9
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	4a75      	ldr	r2, [pc, #468]	; (8005180 <HAL_GPIO_Init+0x2a4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fae:	e02c      	b.n	800500a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	623b      	str	r3, [r7, #32]
          break;
 8004fb6:	e029      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	623b      	str	r3, [r7, #32]
          break;
 8004fc0:	e024      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	623b      	str	r3, [r7, #32]
          break;
 8004fca:	e01f      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	623b      	str	r3, [r7, #32]
          break;
 8004fd4:	e01a      	b.n	800500c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fde:	2304      	movs	r3, #4
 8004fe0:	623b      	str	r3, [r7, #32]
          break;
 8004fe2:	e013      	b.n	800500c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fec:	2308      	movs	r3, #8
 8004fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	611a      	str	r2, [r3, #16]
          break;
 8004ff6:	e009      	b.n	800500c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	615a      	str	r2, [r3, #20]
          break;
 8005002:	e003      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005004:	2300      	movs	r3, #0
 8005006:	623b      	str	r3, [r7, #32]
          break;
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x130>
          break;
 800500a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2bff      	cmp	r3, #255	; 0xff
 8005010:	d801      	bhi.n	8005016 <HAL_GPIO_Init+0x13a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	e001      	b.n	800501a <HAL_GPIO_Init+0x13e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2bff      	cmp	r3, #255	; 0xff
 8005020:	d802      	bhi.n	8005028 <HAL_GPIO_Init+0x14c>
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	e002      	b.n	800502e <HAL_GPIO_Init+0x152>
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	3b08      	subs	r3, #8
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	210f      	movs	r1, #15
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	431a      	orrs	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80c1 	beq.w	80051de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800505c:	4b49      	ldr	r3, [pc, #292]	; (8005184 <HAL_GPIO_Init+0x2a8>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4a48      	ldr	r2, [pc, #288]	; (8005184 <HAL_GPIO_Init+0x2a8>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6193      	str	r3, [r2, #24]
 8005068:	4b46      	ldr	r3, [pc, #280]	; (8005184 <HAL_GPIO_Init+0x2a8>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005074:	4a44      	ldr	r2, [pc, #272]	; (8005188 <HAL_GPIO_Init+0x2ac>)
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	3302      	adds	r3, #2
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <HAL_GPIO_Init+0x2b0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d01f      	beq.n	80050e0 <HAL_GPIO_Init+0x204>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <HAL_GPIO_Init+0x2b4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d019      	beq.n	80050dc <HAL_GPIO_Init+0x200>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <HAL_GPIO_Init+0x2b8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <HAL_GPIO_Init+0x1fc>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a39      	ldr	r2, [pc, #228]	; (8005198 <HAL_GPIO_Init+0x2bc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00d      	beq.n	80050d4 <HAL_GPIO_Init+0x1f8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a38      	ldr	r2, [pc, #224]	; (800519c <HAL_GPIO_Init+0x2c0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <HAL_GPIO_Init+0x1f4>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a37      	ldr	r2, [pc, #220]	; (80051a0 <HAL_GPIO_Init+0x2c4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <HAL_GPIO_Init+0x1f0>
 80050c8:	2305      	movs	r3, #5
 80050ca:	e00a      	b.n	80050e2 <HAL_GPIO_Init+0x206>
 80050cc:	2306      	movs	r3, #6
 80050ce:	e008      	b.n	80050e2 <HAL_GPIO_Init+0x206>
 80050d0:	2304      	movs	r3, #4
 80050d2:	e006      	b.n	80050e2 <HAL_GPIO_Init+0x206>
 80050d4:	2303      	movs	r3, #3
 80050d6:	e004      	b.n	80050e2 <HAL_GPIO_Init+0x206>
 80050d8:	2302      	movs	r3, #2
 80050da:	e002      	b.n	80050e2 <HAL_GPIO_Init+0x206>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <HAL_GPIO_Init+0x206>
 80050e0:	2300      	movs	r3, #0
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	f002 0203 	and.w	r2, r2, #3
 80050e8:	0092      	lsls	r2, r2, #2
 80050ea:	4093      	lsls	r3, r2
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050f2:	4925      	ldr	r1, [pc, #148]	; (8005188 <HAL_GPIO_Init+0x2ac>)
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	3302      	adds	r3, #2
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4924      	ldr	r1, [pc, #144]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	e006      	b.n	8005128 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	43db      	mvns	r3, r3
 8005122:	4920      	ldr	r1, [pc, #128]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 8005124:	4013      	ands	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	491a      	ldr	r1, [pc, #104]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4313      	orrs	r3, r2
 800513e:	604b      	str	r3, [r1, #4]
 8005140:	e006      	b.n	8005150 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	43db      	mvns	r3, r3
 800514a:	4916      	ldr	r1, [pc, #88]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 800514c:	4013      	ands	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d025      	beq.n	80051a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	4910      	ldr	r1, [pc, #64]	; (80051a4 <HAL_GPIO_Init+0x2c8>)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
 8005168:	e025      	b.n	80051b6 <HAL_GPIO_Init+0x2da>
 800516a:	bf00      	nop
 800516c:	10320000 	.word	0x10320000
 8005170:	10310000 	.word	0x10310000
 8005174:	10220000 	.word	0x10220000
 8005178:	10210000 	.word	0x10210000
 800517c:	10120000 	.word	0x10120000
 8005180:	10110000 	.word	0x10110000
 8005184:	40021000 	.word	0x40021000
 8005188:	40010000 	.word	0x40010000
 800518c:	40010800 	.word	0x40010800
 8005190:	40010c00 	.word	0x40010c00
 8005194:	40011000 	.word	0x40011000
 8005198:	40011400 	.word	0x40011400
 800519c:	40011800 	.word	0x40011800
 80051a0:	40011c00 	.word	0x40011c00
 80051a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <HAL_GPIO_Init+0x324>)
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	4913      	ldr	r1, [pc, #76]	; (8005200 <HAL_GPIO_Init+0x324>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d006      	beq.n	80051d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_GPIO_Init+0x324>)
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	490e      	ldr	r1, [pc, #56]	; (8005200 <HAL_GPIO_Init+0x324>)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60cb      	str	r3, [r1, #12]
 80051ce:	e006      	b.n	80051de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_GPIO_Init+0x324>)
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	43db      	mvns	r3, r3
 80051d8:	4909      	ldr	r1, [pc, #36]	; (8005200 <HAL_GPIO_Init+0x324>)
 80051da:	4013      	ands	r3, r2
 80051dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	3301      	adds	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f47f ae7e 	bne.w	8004ef0 <HAL_GPIO_Init+0x14>
  }
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	372c      	adds	r7, #44	; 0x2c
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	40010400 	.word	0x40010400

08005204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005214:	787b      	ldrb	r3, [r7, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005220:	e003      	b.n	800522a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005222:	887b      	ldrh	r3, [r7, #2]
 8005224:	041a      	lsls	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e12b      	b.n	800549e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fe fbf2 	bl	8003a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005298:	f000 fffc 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 800529c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a81      	ldr	r2, [pc, #516]	; (80054a8 <HAL_I2C_Init+0x274>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d807      	bhi.n	80052b8 <HAL_I2C_Init+0x84>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a80      	ldr	r2, [pc, #512]	; (80054ac <HAL_I2C_Init+0x278>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bf94      	ite	ls
 80052b0:	2301      	movls	r3, #1
 80052b2:	2300      	movhi	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e006      	b.n	80052c6 <HAL_I2C_Init+0x92>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a7d      	ldr	r2, [pc, #500]	; (80054b0 <HAL_I2C_Init+0x27c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf94      	ite	ls
 80052c0:	2301      	movls	r3, #1
 80052c2:	2300      	movhi	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0e7      	b.n	800549e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a78      	ldr	r2, [pc, #480]	; (80054b4 <HAL_I2C_Init+0x280>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	0c9b      	lsrs	r3, r3, #18
 80052d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a6a      	ldr	r2, [pc, #424]	; (80054a8 <HAL_I2C_Init+0x274>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d802      	bhi.n	8005308 <HAL_I2C_Init+0xd4>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3301      	adds	r3, #1
 8005306:	e009      	b.n	800531c <HAL_I2C_Init+0xe8>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	4a69      	ldr	r2, [pc, #420]	; (80054b8 <HAL_I2C_Init+0x284>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	099b      	lsrs	r3, r3, #6
 800531a:	3301      	adds	r3, #1
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800532e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	495c      	ldr	r1, [pc, #368]	; (80054a8 <HAL_I2C_Init+0x274>)
 8005338:	428b      	cmp	r3, r1
 800533a:	d819      	bhi.n	8005370 <HAL_I2C_Init+0x13c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1e59      	subs	r1, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	fbb1 f3f3 	udiv	r3, r1, r3
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005350:	400b      	ands	r3, r1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_I2C_Init+0x138>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1e59      	subs	r1, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fbb1 f3f3 	udiv	r3, r1, r3
 8005364:	3301      	adds	r3, #1
 8005366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536a:	e051      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 800536c:	2304      	movs	r3, #4
 800536e:	e04f      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d111      	bne.n	800539c <HAL_I2C_Init+0x168>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e58      	subs	r0, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	440b      	add	r3, r1
 8005386:	fbb0 f3f3 	udiv	r3, r0, r3
 800538a:	3301      	adds	r3, #1
 800538c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e012      	b.n	80053c2 <HAL_I2C_Init+0x18e>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1e58      	subs	r0, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	0099      	lsls	r1, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b2:	3301      	adds	r3, #1
 80053b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_I2C_Init+0x196>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e022      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10e      	bne.n	80053f0 <HAL_I2C_Init+0x1bc>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1e58      	subs	r0, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	440b      	add	r3, r1
 80053e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e4:	3301      	adds	r3, #1
 80053e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	e00f      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1e58      	subs	r0, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	0099      	lsls	r1, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	fbb0 f3f3 	udiv	r3, r0, r3
 8005406:	3301      	adds	r3, #1
 8005408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	6809      	ldr	r1, [r1, #0]
 8005414:	4313      	orrs	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800543e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6911      	ldr	r1, [r2, #16]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d2      	ldr	r2, [r2, #12]
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	430b      	orrs	r3, r1
 8005452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	000186a0 	.word	0x000186a0
 80054ac:	001e847f 	.word	0x001e847f
 80054b0:	003d08ff 	.word	0x003d08ff
 80054b4:	431bde83 	.word	0x431bde83
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	461a      	mov	r2, r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	817b      	strh	r3, [r7, #10]
 80054ce:	460b      	mov	r3, r1
 80054d0:	813b      	strh	r3, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d6:	f7fe ff43 	bl	8004360 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	f040 80d9 	bne.w	800569c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	2319      	movs	r3, #25
 80054f0:	2201      	movs	r2, #1
 80054f2:	496d      	ldr	r1, [pc, #436]	; (80056a8 <HAL_I2C_Mem_Write+0x1ec>)
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f971 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
 8005502:	e0cc      	b.n	800569e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_I2C_Mem_Write+0x56>
 800550e:	2302      	movs	r3, #2
 8005510:	e0c5      	b.n	800569e <HAL_I2C_Mem_Write+0x1e2>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b01      	cmp	r3, #1
 8005526:	d007      	beq.n	8005538 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005546:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2221      	movs	r2, #33	; 0x21
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2240      	movs	r2, #64	; 0x40
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a4d      	ldr	r2, [pc, #308]	; (80056ac <HAL_I2C_Mem_Write+0x1f0>)
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800557a:	88f8      	ldrh	r0, [r7, #6]
 800557c:	893a      	ldrh	r2, [r7, #8]
 800557e:	8979      	ldrh	r1, [r7, #10]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4603      	mov	r3, r0
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f890 	bl	80056b0 <I2C_RequestMemoryWrite>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d052      	beq.n	800563c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e081      	b.n	800569e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f9f2 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d107      	bne.n	80055c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e06b      	b.n	800569e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d11b      	bne.n	800563c <HAL_I2C_Mem_Write+0x180>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	2b00      	cmp	r3, #0
 800560a:	d017      	beq.n	800563c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1aa      	bne.n	800559a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f9de 	bl	8005a0a <I2C_WaitOnBTFFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	2b04      	cmp	r3, #4
 800565a:	d107      	bne.n	800566c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e016      	b.n	800569e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e000      	b.n	800569e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	00100002 	.word	0x00100002
 80056ac:	ffff0000 	.word	0xffff0000

080056b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	460b      	mov	r3, r1
 80056c4:	813b      	strh	r3, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f878 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005700:	d103      	bne.n	800570a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e05f      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800571c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	6a3a      	ldr	r2, [r7, #32]
 8005722:	492d      	ldr	r1, [pc, #180]	; (80057d8 <I2C_RequestMemoryWrite+0x128>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f8b0 	bl	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e04c      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f91a 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b04      	cmp	r3, #4
 8005760:	d107      	bne.n	8005772 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e02b      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	e021      	b.n	80057cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	b29b      	uxth	r3, r3
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	6a39      	ldr	r1, [r7, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8f4 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e005      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c2:	893b      	ldrh	r3, [r7, #8]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	00010002 	.word	0x00010002

080057dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ec:	e025      	b.n	800583a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d021      	beq.n	800583a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fe fdb3 	bl	8004360 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e023      	b.n	8005882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d10d      	bne.n	8005860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	43da      	mvns	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4013      	ands	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	bf0c      	ite	eq
 8005856:	2301      	moveq	r3, #1
 8005858:	2300      	movne	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	e00c      	b.n	800587a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	43da      	mvns	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	429a      	cmp	r2, r3
 800587e:	d0b6      	beq.n	80057ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005898:	e051      	b.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	d123      	bne.n	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0204 	orr.w	r2, r3, #4
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e046      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d021      	beq.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fe fd31 	bl	8004360 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e020      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10c      	bne.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf14      	ite	ne
 800595a:	2301      	movne	r3, #1
 800595c:	2300      	moveq	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e00b      	b.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	43da      	mvns	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d18d      	bne.n	800589a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005994:	e02d      	b.n	80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f878 	bl	8005a8c <I2C_IsAcknowledgeFailed>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e02d      	b.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d021      	beq.n	80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fe fcd7 	bl	8004360 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d116      	bne.n	80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0220 	orr.w	r2, r3, #32
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e007      	b.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d1ca      	bne.n	8005996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a16:	e02d      	b.n	8005a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f837 	bl	8005a8c <I2C_IsAcknowledgeFailed>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e02d      	b.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d021      	beq.n	8005a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a30:	f7fe fc96 	bl	8004360 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d302      	bcc.n	8005a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d116      	bne.n	8005a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e007      	b.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d1ca      	bne.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa2:	d11b      	bne.n	8005adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f043 0204 	orr.w	r2, r3, #4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e272      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8087 	beq.w	8005c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b08:	4b92      	ldr	r3, [pc, #584]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 030c 	and.w	r3, r3, #12
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d00c      	beq.n	8005b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b14:	4b8f      	ldr	r3, [pc, #572]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d112      	bne.n	8005b46 <HAL_RCC_OscConfig+0x5e>
 8005b20:	4b8c      	ldr	r3, [pc, #560]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2e:	4b89      	ldr	r3, [pc, #548]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d06c      	beq.n	8005c14 <HAL_RCC_OscConfig+0x12c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d168      	bne.n	8005c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e24c      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCC_OscConfig+0x76>
 8005b50:	4b80      	ldr	r3, [pc, #512]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7f      	ldr	r2, [pc, #508]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e02e      	b.n	8005bbc <HAL_RCC_OscConfig+0xd4>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x98>
 8005b66:	4b7b      	ldr	r3, [pc, #492]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a7a      	ldr	r2, [pc, #488]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	4b78      	ldr	r3, [pc, #480]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a77      	ldr	r2, [pc, #476]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e01d      	b.n	8005bbc <HAL_RCC_OscConfig+0xd4>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0xbc>
 8005b8a:	4b72      	ldr	r3, [pc, #456]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a71      	ldr	r2, [pc, #452]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b6f      	ldr	r3, [pc, #444]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6e      	ldr	r2, [pc, #440]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCC_OscConfig+0xd4>
 8005ba4:	4b6b      	ldr	r3, [pc, #428]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a6a      	ldr	r2, [pc, #424]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b68      	ldr	r3, [pc, #416]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a67      	ldr	r2, [pc, #412]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fe fbcc 	bl	8004360 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fe fbc8 	bl	8004360 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e200      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b5d      	ldr	r3, [pc, #372]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0xe4>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fe fbb8 	bl	8004360 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fe fbb4 	bl	8004360 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e1ec      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x10c>
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d063      	beq.n	8005cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c22:	4b4c      	ldr	r3, [pc, #304]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c2e:	4b49      	ldr	r3, [pc, #292]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d11c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x18c>
 8005c3a:	4b46      	ldr	r3, [pc, #280]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c46:	4b43      	ldr	r3, [pc, #268]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCC_OscConfig+0x176>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d001      	beq.n	8005c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e1c0      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4939      	ldr	r1, [pc, #228]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c72:	e03a      	b.n	8005cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7c:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <HAL_RCC_OscConfig+0x270>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c82:	f7fe fb6d 	bl	8004360 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fe fb69 	bl	8004360 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e1a1      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9c:	4b2d      	ldr	r3, [pc, #180]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4927      	ldr	r1, [pc, #156]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]
 8005cbc:	e015      	b.n	8005cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cbe:	4b26      	ldr	r3, [pc, #152]	; (8005d58 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc4:	f7fe fb4c 	bl	8004360 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ccc:	f7fe fb48 	bl	8004360 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e180      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cde:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d03a      	beq.n	8005d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <HAL_RCC_OscConfig+0x274>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d04:	f7fe fb2c 	bl	8004360 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d0c:	f7fe fb28 	bl	8004360 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e160      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f000 fada 	bl	80062e4 <RCC_Delay>
 8005d30:	e01c      	b.n	8005d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <HAL_RCC_OscConfig+0x274>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d38:	f7fe fb12 	bl	8004360 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d3e:	e00f      	b.n	8005d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d40:	f7fe fb0e 	bl	8004360 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d908      	bls.n	8005d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e146      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000
 8005d58:	42420000 	.word	0x42420000
 8005d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d60:	4b92      	ldr	r3, [pc, #584]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e9      	bne.n	8005d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80a6 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7e:	4b8b      	ldr	r3, [pc, #556]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4a87      	ldr	r2, [pc, #540]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	61d3      	str	r3, [r2, #28]
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da6:	4b82      	ldr	r3, [pc, #520]	; (8005fb0 <HAL_RCC_OscConfig+0x4c8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db2:	4b7f      	ldr	r3, [pc, #508]	; (8005fb0 <HAL_RCC_OscConfig+0x4c8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7e      	ldr	r2, [pc, #504]	; (8005fb0 <HAL_RCC_OscConfig+0x4c8>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7fe facf 	bl	8004360 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7fe facb 	bl	8004360 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b64      	cmp	r3, #100	; 0x64
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e103      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd8:	4b75      	ldr	r3, [pc, #468]	; (8005fb0 <HAL_RCC_OscConfig+0x4c8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x312>
 8005dec:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	4a6e      	ldr	r2, [pc, #440]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6213      	str	r3, [r2, #32]
 8005df8:	e02d      	b.n	8005e56 <HAL_RCC_OscConfig+0x36e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x334>
 8005e02:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	4a69      	ldr	r2, [pc, #420]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6213      	str	r3, [r2, #32]
 8005e0e:	4b67      	ldr	r3, [pc, #412]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	4a66      	ldr	r2, [pc, #408]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	6213      	str	r3, [r2, #32]
 8005e1a:	e01c      	b.n	8005e56 <HAL_RCC_OscConfig+0x36e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d10c      	bne.n	8005e3e <HAL_RCC_OscConfig+0x356>
 8005e24:	4b61      	ldr	r3, [pc, #388]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	4a60      	ldr	r2, [pc, #384]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e2a:	f043 0304 	orr.w	r3, r3, #4
 8005e2e:	6213      	str	r3, [r2, #32]
 8005e30:	4b5e      	ldr	r3, [pc, #376]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	4a5d      	ldr	r2, [pc, #372]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6213      	str	r3, [r2, #32]
 8005e3c:	e00b      	b.n	8005e56 <HAL_RCC_OscConfig+0x36e>
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	4a5a      	ldr	r2, [pc, #360]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6213      	str	r3, [r2, #32]
 8005e4a:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	4a57      	ldr	r2, [pc, #348]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d015      	beq.n	8005e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5e:	f7fe fa7f 	bl	8004360 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e64:	e00a      	b.n	8005e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fe fa7b 	bl	8004360 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e0b1      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	4b4b      	ldr	r3, [pc, #300]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ee      	beq.n	8005e66 <HAL_RCC_OscConfig+0x37e>
 8005e88:	e014      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fe fa69 	bl	8004360 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e90:	e00a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fe fa65 	bl	8004360 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e09b      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	4b40      	ldr	r3, [pc, #256]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1ee      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eba:	4b3c      	ldr	r3, [pc, #240]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4a3b      	ldr	r2, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8087 	beq.w	8005fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ed0:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d061      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d146      	bne.n	8005f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b33      	ldr	r3, [pc, #204]	; (8005fb4 <HAL_RCC_OscConfig+0x4cc>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eea:	f7fe fa39 	bl	8004360 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef2:	f7fe fa35 	bl	8004360 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e06d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f04:	4b29      	ldr	r3, [pc, #164]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f18:	d108      	bne.n	8005f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f1a:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	4921      	ldr	r1, [pc, #132]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2c:	4b1f      	ldr	r3, [pc, #124]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a19      	ldr	r1, [r3, #32]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	491b      	ldr	r1, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_RCC_OscConfig+0x4cc>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4a:	f7fe fa09 	bl	8004360 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f52:	f7fe fa05 	bl	8004360 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e03d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x46a>
 8005f70:	e035      	b.n	8005fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCC_OscConfig+0x4cc>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f78:	f7fe f9f2 	bl	8004360 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f80:	f7fe f9ee 	bl	8004360 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e026      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCC_OscConfig+0x4c4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x498>
 8005f9e:	e01e      	b.n	8005fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e019      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_RCC_OscConfig+0x500>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d001      	beq.n	8005fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40021000 	.word	0x40021000

08005fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0d0      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006000:	4b6a      	ldr	r3, [pc, #424]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d910      	bls.n	8006030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600e:	4b67      	ldr	r3, [pc, #412]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f023 0207 	bic.w	r2, r3, #7
 8006016:	4965      	ldr	r1, [pc, #404]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	4313      	orrs	r3, r2
 800601c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601e:	4b63      	ldr	r3, [pc, #396]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d001      	beq.n	8006030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0b8      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d020      	beq.n	800607e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006048:	4b59      	ldr	r3, [pc, #356]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a58      	ldr	r2, [pc, #352]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006060:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a52      	ldr	r2, [pc, #328]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800606a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800606c:	4b50      	ldr	r3, [pc, #320]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	494d      	ldr	r1, [pc, #308]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d040      	beq.n	800610c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d107      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d115      	bne.n	80060ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e07f      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d107      	bne.n	80060ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e073      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ba:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e06b      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ca:	4b39      	ldr	r3, [pc, #228]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f023 0203 	bic.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4936      	ldr	r1, [pc, #216]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060dc:	f7fe f940 	bl	8004360 <HAL_GetTick>
 80060e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e2:	e00a      	b.n	80060fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e4:	f7fe f93c 	bl	8004360 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e053      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fa:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 020c 	and.w	r2, r3, #12
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	429a      	cmp	r2, r3
 800610a:	d1eb      	bne.n	80060e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800610c:	4b27      	ldr	r3, [pc, #156]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d210      	bcs.n	800613c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 0207 	bic.w	r2, r3, #7
 8006122:	4922      	ldr	r1, [pc, #136]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	4313      	orrs	r3, r2
 8006128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	4b20      	ldr	r3, [pc, #128]	; (80061ac <HAL_RCC_ClockConfig+0x1c0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e032      	b.n	80061a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006148:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4916      	ldr	r1, [pc, #88]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006156:	4313      	orrs	r3, r2
 8006158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	490e      	ldr	r1, [pc, #56]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800617a:	f000 f821 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 800617e:	4602      	mov	r2, r0
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	490a      	ldr	r1, [pc, #40]	; (80061b4 <HAL_RCC_ClockConfig+0x1c8>)
 800618c:	5ccb      	ldrb	r3, [r1, r3]
 800618e:	fa22 f303 	lsr.w	r3, r2, r3
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <HAL_RCC_ClockConfig+0x1d0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe f89e 	bl	80042dc <HAL_InitTick>

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40022000 	.word	0x40022000
 80061b0:	40021000 	.word	0x40021000
 80061b4:	0800a53c 	.word	0x0800a53c
 80061b8:	20000004 	.word	0x20000004
 80061bc:	20000008 	.word	0x20000008

080061c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c0:	b490      	push	{r4, r7}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <HAL_RCC_GetSysClockFreq+0xac>)
 80061c8:	1d3c      	adds	r4, r7, #4
 80061ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061d0:	f240 2301 	movw	r3, #513	; 0x201
 80061d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061ea:	4b21      	ldr	r3, [pc, #132]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d002      	beq.n	8006200 <HAL_RCC_GetSysClockFreq+0x40>
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d003      	beq.n	8006206 <HAL_RCC_GetSysClockFreq+0x46>
 80061fe:	e02b      	b.n	8006258 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006202:	623b      	str	r3, [r7, #32]
      break;
 8006204:	e02b      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	0c9b      	lsrs	r3, r3, #18
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	3328      	adds	r3, #40	; 0x28
 8006210:	443b      	add	r3, r7
 8006212:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006216:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d012      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	0c5b      	lsrs	r3, r3, #17
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	3328      	adds	r3, #40	; 0x28
 800622e:	443b      	add	r3, r7
 8006230:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006234:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800623a:	fb03 f202 	mul.w	r2, r3, r2
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	e004      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800624c:	fb02 f303 	mul.w	r3, r2, r3
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	623b      	str	r3, [r7, #32]
      break;
 8006256:	e002      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006258:	4b08      	ldr	r3, [pc, #32]	; (800627c <HAL_RCC_GetSysClockFreq+0xbc>)
 800625a:	623b      	str	r3, [r7, #32]
      break;
 800625c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800625e:	6a3b      	ldr	r3, [r7, #32]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3728      	adds	r7, #40	; 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bc90      	pop	{r4, r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	0800a518 	.word	0x0800a518
 8006270:	40021000 	.word	0x40021000
 8006274:	00f42400 	.word	0x00f42400
 8006278:	003d0900 	.word	0x003d0900
 800627c:	007a1200 	.word	0x007a1200

08006280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006284:	4b02      	ldr	r3, [pc, #8]	; (8006290 <HAL_RCC_GetHCLKFreq+0x10>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	20000004 	.word	0x20000004

08006294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006298:	f7ff fff2 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4903      	ldr	r1, [pc, #12]	; (80062b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40021000 	.word	0x40021000
 80062b8:	0800a54c 	.word	0x0800a54c

080062bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062c0:	f7ff ffde 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062c4:	4602      	mov	r2, r0
 80062c6:	4b05      	ldr	r3, [pc, #20]	; (80062dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	0adb      	lsrs	r3, r3, #11
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	4903      	ldr	r1, [pc, #12]	; (80062e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d2:	5ccb      	ldrb	r3, [r1, r3]
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40021000 	.word	0x40021000
 80062e0:	0800a54c 	.word	0x0800a54c

080062e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <RCC_Delay+0x34>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <RCC_Delay+0x38>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	0a5b      	lsrs	r3, r3, #9
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006300:	bf00      	nop
  }
  while (Delay --);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1e5a      	subs	r2, r3, #1
 8006306:	60fa      	str	r2, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f9      	bne.n	8006300 <RCC_Delay+0x1c>
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	20000004 	.word	0x20000004
 800631c:	10624dd3 	.word	0x10624dd3

08006320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e041      	b.n	80063b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fd fbcc 	bl	8003ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f000 fd88 	bl	8006e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d001      	beq.n	80063d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e044      	b.n	8006462 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1d      	ldr	r2, [pc, #116]	; (800646c <HAL_TIM_Base_Start_IT+0xac>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x6c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1c      	ldr	r2, [pc, #112]	; (8006470 <HAL_TIM_Base_Start_IT+0xb0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x6c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d00e      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x6c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <HAL_TIM_Base_Start_IT+0xb4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x6c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_TIM_Base_Start_IT+0xb8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x6c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a15      	ldr	r2, [pc, #84]	; (800647c <HAL_TIM_Base_Start_IT+0xbc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d111      	bne.n	8006450 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d010      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644e:	e007      	b.n	8006460 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00

08006480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e041      	b.n	8006516 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f839 	bl	800651e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f000 fcd8 	bl	8006e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d109      	bne.n	8006554 <HAL_TIM_PWM_Start+0x24>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e022      	b.n	800659a <HAL_TIM_PWM_Start+0x6a>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b04      	cmp	r3, #4
 8006558:	d109      	bne.n	800656e <HAL_TIM_PWM_Start+0x3e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e015      	b.n	800659a <HAL_TIM_PWM_Start+0x6a>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d109      	bne.n	8006588 <HAL_TIM_PWM_Start+0x58>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e008      	b.n	800659a <HAL_TIM_PWM_Start+0x6a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e072      	b.n	8006688 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Start+0x82>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b0:	e013      	b.n	80065da <HAL_TIM_PWM_Start+0xaa>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_PWM_Start+0x92>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c0:	e00b      	b.n	80065da <HAL_TIM_PWM_Start+0xaa>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_PWM_Start+0xa2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d0:	e003      	b.n	80065da <HAL_TIM_PWM_Start+0xaa>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2201      	movs	r2, #1
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 ff02 	bl	80073ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a28      	ldr	r2, [pc, #160]	; (8006690 <HAL_TIM_PWM_Start+0x160>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_TIM_PWM_Start+0xcc>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a27      	ldr	r2, [pc, #156]	; (8006694 <HAL_TIM_PWM_Start+0x164>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_PWM_Start+0xd0>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <HAL_TIM_PWM_Start+0xd2>
 8006600:	2300      	movs	r3, #0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <HAL_TIM_PWM_Start+0x160>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_TIM_PWM_Start+0x122>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <HAL_TIM_PWM_Start+0x164>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_TIM_PWM_Start+0x122>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d00e      	beq.n	8006652 <HAL_TIM_PWM_Start+0x122>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a17      	ldr	r2, [pc, #92]	; (8006698 <HAL_TIM_PWM_Start+0x168>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_TIM_PWM_Start+0x122>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a16      	ldr	r2, [pc, #88]	; (800669c <HAL_TIM_PWM_Start+0x16c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_TIM_PWM_Start+0x122>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <HAL_TIM_PWM_Start+0x170>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d111      	bne.n	8006676 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b06      	cmp	r3, #6
 8006662:	d010      	beq.n	8006686 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	e007      	b.n	8006686 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40013400 	.word	0x40013400
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00

080066a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e093      	b.n	80067e0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fd fa57 	bl	8003b80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e8:	f023 0307 	bic.w	r3, r3, #7
 80066ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f000 fbbb 	bl	8006e74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	4313      	orrs	r3, r2
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006744:	f023 030c 	bic.w	r3, r3, #12
 8006748:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	4313      	orrs	r3, r2
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	011a      	lsls	r2, r3, #4
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	031b      	lsls	r3, r3, #12
 8006774:	4313      	orrs	r3, r2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4313      	orrs	r3, r2
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006800:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006808:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006810:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d110      	bne.n	800683a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d102      	bne.n	8006824 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800681e:	7b7b      	ldrb	r3, [r7, #13]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d001      	beq.n	8006828 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e069      	b.n	80068fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006838:	e031      	b.n	800689e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d110      	bne.n	8006862 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d102      	bne.n	800684c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006846:	7b3b      	ldrb	r3, [r7, #12]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d001      	beq.n	8006850 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e055      	b.n	80068fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006860:	e01d      	b.n	800689e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d108      	bne.n	800687a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d105      	bne.n	800687a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	7b7b      	ldrb	r3, [r7, #13]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d102      	bne.n	800687a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006874:	7b3b      	ldrb	r3, [r7, #12]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e03e      	b.n	80068fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_TIM_Encoder_Start+0xc4>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d008      	beq.n	80068bc <HAL_TIM_Encoder_Start+0xd4>
 80068aa:	e00f      	b.n	80068cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fd99 	bl	80073ec <TIM_CCxChannelCmd>
      break;
 80068ba:	e016      	b.n	80068ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2201      	movs	r2, #1
 80068c2:	2104      	movs	r1, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fd91 	bl	80073ec <TIM_CCxChannelCmd>
      break;
 80068ca:	e00e      	b.n	80068ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2201      	movs	r2, #1
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fd89 	bl	80073ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	2104      	movs	r1, #4
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fd82 	bl	80073ec <TIM_CCxChannelCmd>
      break;
 80068e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d122      	bne.n	8006960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d11b      	bne.n	8006960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0202 	mvn.w	r2, #2
 8006930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa78 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 800694c:	e005      	b.n	800695a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa6b 	bl	8006e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa7a 	bl	8006e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d122      	bne.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0204 	mvn.w	r2, #4
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa4e 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa41 	bl	8006e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa50 	bl	8006e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d122      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d11b      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0208 	mvn.w	r2, #8
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2204      	movs	r2, #4
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa24 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa17 	bl	8006e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa26 	bl	8006e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d122      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d11b      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0210 	mvn.w	r2, #16
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2208      	movs	r2, #8
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9fa 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9ed 	bl	8006e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f9fc 	bl	8006e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d107      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0201 	mvn.w	r2, #1
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9c8 	bl	8006e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d10e      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa0:	2b80      	cmp	r3, #128	; 0x80
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fd86 	bl	80075c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9c0 	bl	8006e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d10e      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d107      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0220 	mvn.w	r2, #32
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fd51 	bl	80075ae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e0ac      	b.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	f200 809f 	bhi.w	8006c7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006c7d 	.word	0x08006c7d
 8006b4c:	08006c7d 	.word	0x08006c7d
 8006b50:	08006c7d 	.word	0x08006c7d
 8006b54:	08006bb9 	.word	0x08006bb9
 8006b58:	08006c7d 	.word	0x08006c7d
 8006b5c:	08006c7d 	.word	0x08006c7d
 8006b60:	08006c7d 	.word	0x08006c7d
 8006b64:	08006bfb 	.word	0x08006bfb
 8006b68:	08006c7d 	.word	0x08006c7d
 8006b6c:	08006c7d 	.word	0x08006c7d
 8006b70:	08006c7d 	.word	0x08006c7d
 8006b74:	08006c3b 	.word	0x08006c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f9f2 	bl	8006f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6999      	ldr	r1, [r3, #24]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	619a      	str	r2, [r3, #24]
      break;
 8006bb6:	e062      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fa42 	bl	8007048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6999      	ldr	r1, [r3, #24]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	619a      	str	r2, [r3, #24]
      break;
 8006bf8:	e041      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fa95 	bl	8007130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0208 	orr.w	r2, r2, #8
 8006c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0204 	bic.w	r2, r2, #4
 8006c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69d9      	ldr	r1, [r3, #28]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	61da      	str	r2, [r3, #28]
      break;
 8006c38:	e021      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fae9 	bl	8007218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69d9      	ldr	r1, [r3, #28]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	021a      	lsls	r2, r3, #8
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	61da      	str	r2, [r3, #28]
      break;
 8006c7a:	e000      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_ConfigClockSource+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e0b3      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x180>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce0:	d03e      	beq.n	8006d60 <HAL_TIM_ConfigClockSource+0xd0>
 8006ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce6:	f200 8087 	bhi.w	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	f000 8085 	beq.w	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d87f      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006cf8:	2b70      	cmp	r3, #112	; 0x70
 8006cfa:	d01a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0xa2>
 8006cfc:	2b70      	cmp	r3, #112	; 0x70
 8006cfe:	d87b      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d00:	2b60      	cmp	r3, #96	; 0x60
 8006d02:	d050      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x116>
 8006d04:	2b60      	cmp	r3, #96	; 0x60
 8006d06:	d877      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d03c      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0xf6>
 8006d0c:	2b50      	cmp	r3, #80	; 0x50
 8006d0e:	d873      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d058      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x136>
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d86f      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d064      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d86b      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d060      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d867      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05c      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d05a      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d30:	e062      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6899      	ldr	r1, [r3, #8]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f000 fb34 	bl	80073ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	609a      	str	r2, [r3, #8]
      break;
 8006d5e:	e04e      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6899      	ldr	r1, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f000 fb1d 	bl	80073ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d82:	609a      	str	r2, [r3, #8]
      break;
 8006d84:	e03b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6859      	ldr	r1, [r3, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f000 fa94 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2150      	movs	r1, #80	; 0x50
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 faeb 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 8006da4:	e02b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f000 fab2 	bl	800731c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2160      	movs	r1, #96	; 0x60
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fadb 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 8006dc4:	e01b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6859      	ldr	r1, [r3, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f000 fa74 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 facb 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 8006de4:	e00b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f000 fac2 	bl	800737a <TIM_ITRx_SetConfig>
        break;
 8006df6:	e002      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e000      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr
	...

08006e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a33      	ldr	r2, [pc, #204]	; (8006f54 <TIM_Base_SetConfig+0xe0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d013      	beq.n	8006eb4 <TIM_Base_SetConfig+0x40>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a32      	ldr	r2, [pc, #200]	; (8006f58 <TIM_Base_SetConfig+0xe4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00f      	beq.n	8006eb4 <TIM_Base_SetConfig+0x40>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d00b      	beq.n	8006eb4 <TIM_Base_SetConfig+0x40>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <TIM_Base_SetConfig+0xe8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <TIM_Base_SetConfig+0x40>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a2e      	ldr	r2, [pc, #184]	; (8006f60 <TIM_Base_SetConfig+0xec>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a2d      	ldr	r2, [pc, #180]	; (8006f64 <TIM_Base_SetConfig+0xf0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d108      	bne.n	8006ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <TIM_Base_SetConfig+0xe0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <TIM_Base_SetConfig+0x82>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <TIM_Base_SetConfig+0xe4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00f      	beq.n	8006ef6 <TIM_Base_SetConfig+0x82>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006edc:	d00b      	beq.n	8006ef6 <TIM_Base_SetConfig+0x82>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <TIM_Base_SetConfig+0xe8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_Base_SetConfig+0x82>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <TIM_Base_SetConfig+0xec>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_Base_SetConfig+0x82>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <TIM_Base_SetConfig+0xf0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a09      	ldr	r2, [pc, #36]	; (8006f54 <TIM_Base_SetConfig+0xe0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xc8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a08      	ldr	r2, [pc, #32]	; (8006f58 <TIM_Base_SetConfig+0xe4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00

08006f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 0302 	bic.w	r3, r3, #2
 8006fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a20      	ldr	r2, [pc, #128]	; (8007040 <TIM_OC1_SetConfig+0xd8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC1_SetConfig+0x64>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <TIM_OC1_SetConfig+0xdc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d10c      	bne.n	8006fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0308 	bic.w	r3, r3, #8
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f023 0304 	bic.w	r3, r3, #4
 8006fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a15      	ldr	r2, [pc, #84]	; (8007040 <TIM_OC1_SetConfig+0xd8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d003      	beq.n	8006ff6 <TIM_OC1_SetConfig+0x8e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a14      	ldr	r2, [pc, #80]	; (8007044 <TIM_OC1_SetConfig+0xdc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d111      	bne.n	800701a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	621a      	str	r2, [r3, #32]
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40013400 	.word	0x40013400

08007048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	f023 0210 	bic.w	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 0320 	bic.w	r3, r3, #32
 8007092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a21      	ldr	r2, [pc, #132]	; (8007128 <TIM_OC2_SetConfig+0xe0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d003      	beq.n	80070b0 <TIM_OC2_SetConfig+0x68>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a20      	ldr	r2, [pc, #128]	; (800712c <TIM_OC2_SetConfig+0xe4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d10d      	bne.n	80070cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a16      	ldr	r2, [pc, #88]	; (8007128 <TIM_OC2_SetConfig+0xe0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_OC2_SetConfig+0x94>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <TIM_OC2_SetConfig+0xe4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d113      	bne.n	8007104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr
 8007128:	40012c00 	.word	0x40012c00
 800712c:	40013400 	.word	0x40013400

08007130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a21      	ldr	r2, [pc, #132]	; (8007210 <TIM_OC3_SetConfig+0xe0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_OC3_SetConfig+0x66>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a20      	ldr	r2, [pc, #128]	; (8007214 <TIM_OC3_SetConfig+0xe4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10d      	bne.n	80071b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800719c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a16      	ldr	r2, [pc, #88]	; (8007210 <TIM_OC3_SetConfig+0xe0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_OC3_SetConfig+0x92>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a15      	ldr	r2, [pc, #84]	; (8007214 <TIM_OC3_SetConfig+0xe4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d113      	bne.n	80071ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40013400 	.word	0x40013400

08007218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	031b      	lsls	r3, r3, #12
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <TIM_OC4_SetConfig+0xa0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_OC4_SetConfig+0x68>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a10      	ldr	r2, [pc, #64]	; (80072bc <TIM_OC4_SetConfig+0xa4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d109      	bne.n	8007294 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	019b      	lsls	r3, r3, #6
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40013400 	.word	0x40013400

080072c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 030a 	bic.w	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	f023 0210 	bic.w	r2, r3, #16
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	031b      	lsls	r3, r3, #12
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	621a      	str	r2, [r3, #32]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	f043 0307 	orr.w	r3, r3, #7
 800739c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b087      	sub	sp, #28
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	021a      	lsls	r2, r3, #8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	431a      	orrs	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	609a      	str	r2, [r3, #8]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	2201      	movs	r2, #1
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1a      	ldr	r2, [r3, #32]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	43db      	mvns	r3, r3
 800740e:	401a      	ands	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1a      	ldr	r2, [r3, #32]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	fa01 f303 	lsl.w	r3, r1, r3
 8007424:	431a      	orrs	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007448:	2302      	movs	r3, #2
 800744a:	e050      	b.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1b      	ldr	r2, [pc, #108]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a19      	ldr	r2, [pc, #100]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a2:	d00e      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a15      	ldr	r2, [pc, #84]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a14      	ldr	r2, [pc, #80]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a12      	ldr	r2, [pc, #72]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d10c      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40000c00 	.word	0x40000c00

0800750c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007524:	2302      	movs	r3, #2
 8007526:	e03d      	b.n	80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e03f      	b.n	8007664 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fc fc07 	bl	8003e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007614:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fdde 	bl	80081d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800762a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800763a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800764a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b20      	cmp	r3, #32
 800768a:	d17c      	bne.n	8007786 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_UART_Transmit+0x2c>
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e075      	b.n	8007788 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Transmit+0x3e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e06e      	b.n	8007788 <HAL_UART_Transmit+0x11c>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2221      	movs	r2, #33	; 0x21
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076c0:	f7fc fe4e 	bl	8004360 <HAL_GetTick>
 80076c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076da:	d108      	bne.n	80076ee <HAL_UART_Transmit+0x82>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e003      	b.n	80076f6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076fe:	e02a      	b.n	8007756 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2200      	movs	r2, #0
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 fb17 	bl	8007d3e <UART_WaitOnFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e036      	b.n	8007788 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800772e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	3302      	adds	r3, #2
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	e007      	b.n	8007748 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	781a      	ldrb	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	3301      	adds	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1cf      	bne.n	8007700 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2200      	movs	r2, #0
 8007768:	2140      	movs	r1, #64	; 0x40
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fae7 	bl	8007d3e <UART_WaitOnFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e006      	b.n	8007788 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d11d      	bne.n	80077e6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_UART_Receive_IT+0x26>
 80077b0:	88fb      	ldrh	r3, [r7, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e016      	b.n	80077e8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_UART_Receive_IT+0x38>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e00f      	b.n	80077e8 <HAL_UART_Receive_IT+0x58>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	461a      	mov	r2, r3
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 faf8 	bl	8007dd2 <UART_Start_Receive_IT>
 80077e2:	4603      	mov	r3, r0
 80077e4:	e000      	b.n	80077e8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b20      	cmp	r3, #32
 8007808:	d11d      	bne.n	8007846 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_UART_Receive_DMA+0x26>
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e016      	b.n	8007848 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_UART_Receive_DMA+0x38>
 8007824:	2302      	movs	r3, #2
 8007826:	e00f      	b.n	8007848 <HAL_UART_Receive_DMA+0x58>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	461a      	mov	r2, r3
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fb01 	bl	8007e44 <UART_Start_Receive_DMA>
 8007842:	4603      	mov	r3, r0
 8007844:	e000      	b.n	8007848 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007846:	2302      	movs	r3, #2
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_UART_IRQHandler+0x52>
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fbf2 	bl	8008084 <UART_Receive_IT>
      return;
 80078a0:	e17b      	b.n	8007b9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80b1 	beq.w	8007a0c <HAL_UART_IRQHandler+0x1bc>
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <HAL_UART_IRQHandler+0x70>
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80a6 	beq.w	8007a0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <HAL_UART_IRQHandler+0x90>
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	f043 0201 	orr.w	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <HAL_UART_IRQHandler+0xb0>
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	f043 0202 	orr.w	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_UART_IRQHandler+0xd0>
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	f043 0204 	orr.w	r2, r3, #4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00f      	beq.n	800794a <HAL_UART_IRQHandler+0xfa>
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <HAL_UART_IRQHandler+0xee>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f043 0208 	orr.w	r2, r3, #8
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 811e 	beq.w	8007b90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <HAL_UART_IRQHandler+0x11e>
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fb8b 	bl	8008084 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf14      	ite	ne
 800797c:	2301      	movne	r3, #1
 800797e:	2300      	moveq	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <HAL_UART_IRQHandler+0x146>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d031      	beq.n	80079fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 facd 	bl	8007f36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d023      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695a      	ldr	r2, [r3, #20]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d013      	beq.n	80079ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	4a76      	ldr	r2, [pc, #472]	; (8007ba0 <HAL_UART_IRQHandler+0x350>)
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fc ff12 	bl	80047f8 <HAL_DMA_Abort_IT>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d016      	beq.n	8007a08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e00e      	b.n	8007a08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fb fca6 	bl	800333c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e00a      	b.n	8007a08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7fb fca2 	bl	800333c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	e006      	b.n	8007a08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fb fc9e 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a06:	e0c3      	b.n	8007b90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a08:	bf00      	nop
    return;
 8007a0a:	e0c1      	b.n	8007b90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	f040 80a1 	bne.w	8007b58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 809b 	beq.w	8007b58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	f003 0310 	and.w	r3, r3, #16
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8095 	beq.w	8007b58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04e      	beq.n	8007af0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007a5c:	8a3b      	ldrh	r3, [r7, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 8098 	beq.w	8007b94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a68:	8a3a      	ldrh	r2, [r7, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	f080 8092 	bcs.w	8007b94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8a3a      	ldrh	r2, [r7, #16]
 8007a74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d02b      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695a      	ldr	r2, [r3, #20]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0210 	bic.w	r2, r2, #16
 8007acc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fc fe55 	bl	8004782 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f86d 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007aee:	e051      	b.n	8007b94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d047      	beq.n	8007b98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007b08:	8a7b      	ldrh	r3, [r7, #18]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d044      	beq.n	8007b98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0210 	bic.w	r2, r2, #16
 8007b4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b4c:	8a7b      	ldrh	r3, [r7, #18]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f839 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b56:	e01f      	b.n	8007b98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <HAL_UART_IRQHandler+0x324>
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa22 	bl	8007fb6 <UART_Transmit_IT>
    return;
 8007b72:	e012      	b.n	8007b9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <HAL_UART_IRQHandler+0x34a>
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fa63 	bl	8008054 <UART_EndTransmit_IT>
    return;
 8007b8e:	e004      	b.n	8007b9a <HAL_UART_IRQHandler+0x34a>
    return;
 8007b90:	bf00      	nop
 8007b92:	e002      	b.n	8007b9a <HAL_UART_IRQHandler+0x34a>
      return;
 8007b94:	bf00      	nop
 8007b96:	e000      	b.n	8007b9a <HAL_UART_IRQHandler+0x34a>
      return;
 8007b98:	bf00      	nop
  }
}
 8007b9a:	3728      	adds	r7, #40	; 0x28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	08007f8f 	.word	0x08007f8f

08007ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr

08007bde <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d12a      	bne.n	8007c50 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695a      	ldr	r2, [r3, #20]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c2e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d107      	bne.n	8007c50 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0210 	bic.w	r2, r2, #16
 8007c4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d106      	bne.n	8007c66 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ffb2 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c64:	e002      	b.n	8007c6c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7fb fb4c 	bl	8003304 <HAL_UART_RxCpltCallback>
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d108      	bne.n	8007c9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff97 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c9a:	e002      	b.n	8007ca2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff ff8a 	bl	8007bb6 <HAL_UART_RxHalfCpltCallback>
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bf14      	ite	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	2300      	moveq	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b21      	cmp	r3, #33	; 0x21
 8007cdc:	d108      	bne.n	8007cf0 <UART_DMAError+0x46>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f000 f90e 	bl	8007f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bf14      	ite	ne
 8007cfe:	2301      	movne	r3, #1
 8007d00:	2300      	moveq	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b22      	cmp	r3, #34	; 0x22
 8007d10:	d108      	bne.n	8007d24 <UART_DMAError+0x7a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d1e:	68b8      	ldr	r0, [r7, #8]
 8007d20:	f000 f909 	bl	8007f36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	f043 0210 	orr.w	r2, r3, #16
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f7fb fb03 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	603b      	str	r3, [r7, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d4e:	e02c      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d028      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8007d5e:	f7fc faff 	bl	8004360 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d21d      	bcs.n	8007daa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695a      	ldr	r2, [r3, #20]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0201 	bic.w	r2, r2, #1
 8007d8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e00f      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4013      	ands	r3, r2
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d0c3      	beq.n	8007d50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2222      	movs	r2, #34	; 0x22
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0220 	orr.w	r2, r2, #32
 8007e36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2222      	movs	r2, #34	; 0x22
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <UART_Start_Receive_DMA+0xbc>)
 8007e72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	4a22      	ldr	r2, [pc, #136]	; (8007f04 <UART_Start_Receive_DMA+0xc0>)
 8007e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	4a21      	ldr	r2, [pc, #132]	; (8007f08 <UART_Start_Receive_DMA+0xc4>)
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	2200      	movs	r2, #0
 8007e8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	f7fc fc0e 	bl	80046c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695a      	ldr	r2, [r3, #20]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08007bdf 	.word	0x08007bdf
 8007f04:	08007c75 	.word	0x08007c75
 8007f08:	08007cab 	.word	0x08007cab

08007f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f22:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f4c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d107      	bne.n	8007f76 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0210 	bic.w	r2, r2, #16
 8007f74:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7fb f9c7 	bl	800333c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b21      	cmp	r3, #33	; 0x21
 8007fc8:	d13e      	bne.n	8008048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd2:	d114      	bne.n	8007ffe <UART_Transmit_IT+0x48>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d110      	bne.n	8007ffe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]
 8007ffc:	e008      	b.n	8008010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	1c59      	adds	r1, r3, #1
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6211      	str	r1, [r2, #32]
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29b      	uxth	r3, r3
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4619      	mov	r1, r3
 800801e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10f      	bne.n	8008044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fd95 	bl	8007ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b22      	cmp	r3, #34	; 0x22
 8008096:	f040 8099 	bne.w	80081cc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d117      	bne.n	80080d4 <UART_Receive_IT+0x50>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d113      	bne.n	80080d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	1c9a      	adds	r2, r3, #2
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	629a      	str	r2, [r3, #40]	; 0x28
 80080d2:	e026      	b.n	8008122 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e6:	d007      	beq.n	80080f8 <UART_Receive_IT+0x74>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <UART_Receive_IT+0x82>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e008      	b.n	8008118 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008112:	b2da      	uxtb	r2, r3
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29b      	uxth	r3, r3
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4619      	mov	r1, r3
 8008130:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008132:	2b00      	cmp	r3, #0
 8008134:	d148      	bne.n	80081c8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0220 	bic.w	r2, r2, #32
 8008144:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008154:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695a      	ldr	r2, [r3, #20]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008172:	2b01      	cmp	r3, #1
 8008174:	d123      	bne.n	80081be <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0210 	bic.w	r2, r2, #16
 800818a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b10      	cmp	r3, #16
 8008198:	d10a      	bne.n	80081b0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fd06 	bl	8007bc8 <HAL_UARTEx_RxEventCallback>
 80081bc:	e002      	b.n	80081c4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fb f8a0 	bl	8003304 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e002      	b.n	80081ce <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e000      	b.n	80081ce <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80081cc:	2302      	movs	r3, #2
  }
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008212:	f023 030c 	bic.w	r3, r3, #12
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6812      	ldr	r2, [r2, #0]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	430b      	orrs	r3, r1
 800821e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a2c      	ldr	r2, [pc, #176]	; (80082ec <UART_SetConfig+0x114>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d103      	bne.n	8008248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008240:	f7fe f83c 	bl	80062bc <HAL_RCC_GetPCLK2Freq>
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	e002      	b.n	800824e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008248:	f7fe f824 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 800824c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009a      	lsls	r2, r3, #2
 8008258:	441a      	add	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	4a22      	ldr	r2, [pc, #136]	; (80082f0 <UART_SetConfig+0x118>)
 8008266:	fba2 2303 	umull	r2, r3, r2, r3
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	0119      	lsls	r1, r3, #4
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009a      	lsls	r2, r3, #2
 8008278:	441a      	add	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	fbb2 f2f3 	udiv	r2, r2, r3
 8008284:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <UART_SetConfig+0x118>)
 8008286:	fba3 0302 	umull	r0, r3, r3, r2
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	2064      	movs	r0, #100	; 0x64
 800828e:	fb00 f303 	mul.w	r3, r0, r3
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	3332      	adds	r3, #50	; 0x32
 8008298:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <UART_SetConfig+0x118>)
 800829a:	fba2 2303 	umull	r2, r3, r2, r3
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082a4:	4419      	add	r1, r3
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009a      	lsls	r2, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80082bc:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <UART_SetConfig+0x118>)
 80082be:	fba3 0302 	umull	r0, r3, r3, r2
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	2064      	movs	r0, #100	; 0x64
 80082c6:	fb00 f303 	mul.w	r3, r0, r3
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	3332      	adds	r3, #50	; 0x32
 80082d0:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <UART_SetConfig+0x118>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	440a      	add	r2, r1
 80082e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40013800 	.word	0x40013800
 80082f0:	51eb851f 	.word	0x51eb851f

080082f4 <__assert_func>:
 80082f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f6:	4614      	mov	r4, r2
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <__assert_func+0x2c>)
 80082fc:	4605      	mov	r5, r0
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68d8      	ldr	r0, [r3, #12]
 8008302:	b14c      	cbz	r4, 8008318 <__assert_func+0x24>
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <__assert_func+0x30>)
 8008306:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800830a:	9100      	str	r1, [sp, #0]
 800830c:	462b      	mov	r3, r5
 800830e:	4906      	ldr	r1, [pc, #24]	; (8008328 <__assert_func+0x34>)
 8008310:	f000 f814 	bl	800833c <fiprintf>
 8008314:	f000 fbfe 	bl	8008b14 <abort>
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <__assert_func+0x38>)
 800831a:	461c      	mov	r4, r3
 800831c:	e7f3      	b.n	8008306 <__assert_func+0x12>
 800831e:	bf00      	nop
 8008320:	20000010 	.word	0x20000010
 8008324:	0800a554 	.word	0x0800a554
 8008328:	0800a561 	.word	0x0800a561
 800832c:	0800a58f 	.word	0x0800a58f

08008330 <__errno>:
 8008330:	4b01      	ldr	r3, [pc, #4]	; (8008338 <__errno+0x8>)
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000010 	.word	0x20000010

0800833c <fiprintf>:
 800833c:	b40e      	push	{r1, r2, r3}
 800833e:	b503      	push	{r0, r1, lr}
 8008340:	4601      	mov	r1, r0
 8008342:	ab03      	add	r3, sp, #12
 8008344:	4805      	ldr	r0, [pc, #20]	; (800835c <fiprintf+0x20>)
 8008346:	f853 2b04 	ldr.w	r2, [r3], #4
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	f000 f85b 	bl	8008408 <_vfiprintf_r>
 8008352:	b002      	add	sp, #8
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	20000010 	.word	0x20000010

08008360 <__libc_init_array>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	2600      	movs	r6, #0
 8008364:	4d0c      	ldr	r5, [pc, #48]	; (8008398 <__libc_init_array+0x38>)
 8008366:	4c0d      	ldr	r4, [pc, #52]	; (800839c <__libc_init_array+0x3c>)
 8008368:	1b64      	subs	r4, r4, r5
 800836a:	10a4      	asrs	r4, r4, #2
 800836c:	42a6      	cmp	r6, r4
 800836e:	d109      	bne.n	8008384 <__libc_init_array+0x24>
 8008370:	f002 f898 	bl	800a4a4 <_init>
 8008374:	2600      	movs	r6, #0
 8008376:	4d0a      	ldr	r5, [pc, #40]	; (80083a0 <__libc_init_array+0x40>)
 8008378:	4c0a      	ldr	r4, [pc, #40]	; (80083a4 <__libc_init_array+0x44>)
 800837a:	1b64      	subs	r4, r4, r5
 800837c:	10a4      	asrs	r4, r4, #2
 800837e:	42a6      	cmp	r6, r4
 8008380:	d105      	bne.n	800838e <__libc_init_array+0x2e>
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	f855 3b04 	ldr.w	r3, [r5], #4
 8008388:	4798      	blx	r3
 800838a:	3601      	adds	r6, #1
 800838c:	e7ee      	b.n	800836c <__libc_init_array+0xc>
 800838e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008392:	4798      	blx	r3
 8008394:	3601      	adds	r6, #1
 8008396:	e7f2      	b.n	800837e <__libc_init_array+0x1e>
 8008398:	0800a800 	.word	0x0800a800
 800839c:	0800a800 	.word	0x0800a800
 80083a0:	0800a800 	.word	0x0800a800
 80083a4:	0800a804 	.word	0x0800a804

080083a8 <memset>:
 80083a8:	4603      	mov	r3, r0
 80083aa:	4402      	add	r2, r0
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	f803 1b01 	strb.w	r1, [r3], #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <__sfputc_r>:
 80083b8:	6893      	ldr	r3, [r2, #8]
 80083ba:	b410      	push	{r4}
 80083bc:	3b01      	subs	r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	6093      	str	r3, [r2, #8]
 80083c2:	da07      	bge.n	80083d4 <__sfputc_r+0x1c>
 80083c4:	6994      	ldr	r4, [r2, #24]
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	db01      	blt.n	80083ce <__sfputc_r+0x16>
 80083ca:	290a      	cmp	r1, #10
 80083cc:	d102      	bne.n	80083d4 <__sfputc_r+0x1c>
 80083ce:	bc10      	pop	{r4}
 80083d0:	f000 bae0 	b.w	8008994 <__swbuf_r>
 80083d4:	6813      	ldr	r3, [r2, #0]
 80083d6:	1c58      	adds	r0, r3, #1
 80083d8:	6010      	str	r0, [r2, #0]
 80083da:	7019      	strb	r1, [r3, #0]
 80083dc:	4608      	mov	r0, r1
 80083de:	bc10      	pop	{r4}
 80083e0:	4770      	bx	lr

080083e2 <__sfputs_r>:
 80083e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	18d5      	adds	r5, r2, r3
 80083ec:	42ac      	cmp	r4, r5
 80083ee:	d101      	bne.n	80083f4 <__sfputs_r+0x12>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e007      	b.n	8008404 <__sfputs_r+0x22>
 80083f4:	463a      	mov	r2, r7
 80083f6:	4630      	mov	r0, r6
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	f7ff ffdc 	bl	80083b8 <__sfputc_r>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d1f3      	bne.n	80083ec <__sfputs_r+0xa>
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008408 <_vfiprintf_r>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	460d      	mov	r5, r1
 800840e:	4614      	mov	r4, r2
 8008410:	4698      	mov	r8, r3
 8008412:	4606      	mov	r6, r0
 8008414:	b09d      	sub	sp, #116	; 0x74
 8008416:	b118      	cbz	r0, 8008420 <_vfiprintf_r+0x18>
 8008418:	6983      	ldr	r3, [r0, #24]
 800841a:	b90b      	cbnz	r3, 8008420 <_vfiprintf_r+0x18>
 800841c:	f000 fc98 	bl	8008d50 <__sinit>
 8008420:	4b89      	ldr	r3, [pc, #548]	; (8008648 <_vfiprintf_r+0x240>)
 8008422:	429d      	cmp	r5, r3
 8008424:	d11b      	bne.n	800845e <_vfiprintf_r+0x56>
 8008426:	6875      	ldr	r5, [r6, #4]
 8008428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800842a:	07d9      	lsls	r1, r3, #31
 800842c:	d405      	bmi.n	800843a <_vfiprintf_r+0x32>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	059a      	lsls	r2, r3, #22
 8008432:	d402      	bmi.n	800843a <_vfiprintf_r+0x32>
 8008434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008436:	f000 fd29 	bl	8008e8c <__retarget_lock_acquire_recursive>
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	071b      	lsls	r3, r3, #28
 800843e:	d501      	bpl.n	8008444 <_vfiprintf_r+0x3c>
 8008440:	692b      	ldr	r3, [r5, #16]
 8008442:	b9eb      	cbnz	r3, 8008480 <_vfiprintf_r+0x78>
 8008444:	4629      	mov	r1, r5
 8008446:	4630      	mov	r0, r6
 8008448:	f000 faf6 	bl	8008a38 <__swsetup_r>
 800844c:	b1c0      	cbz	r0, 8008480 <_vfiprintf_r+0x78>
 800844e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008450:	07dc      	lsls	r4, r3, #31
 8008452:	d50e      	bpl.n	8008472 <_vfiprintf_r+0x6a>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b01d      	add	sp, #116	; 0x74
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	4b7b      	ldr	r3, [pc, #492]	; (800864c <_vfiprintf_r+0x244>)
 8008460:	429d      	cmp	r5, r3
 8008462:	d101      	bne.n	8008468 <_vfiprintf_r+0x60>
 8008464:	68b5      	ldr	r5, [r6, #8]
 8008466:	e7df      	b.n	8008428 <_vfiprintf_r+0x20>
 8008468:	4b79      	ldr	r3, [pc, #484]	; (8008650 <_vfiprintf_r+0x248>)
 800846a:	429d      	cmp	r5, r3
 800846c:	bf08      	it	eq
 800846e:	68f5      	ldreq	r5, [r6, #12]
 8008470:	e7da      	b.n	8008428 <_vfiprintf_r+0x20>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	0598      	lsls	r0, r3, #22
 8008476:	d4ed      	bmi.n	8008454 <_vfiprintf_r+0x4c>
 8008478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800847a:	f000 fd08 	bl	8008e8e <__retarget_lock_release_recursive>
 800847e:	e7e9      	b.n	8008454 <_vfiprintf_r+0x4c>
 8008480:	2300      	movs	r3, #0
 8008482:	9309      	str	r3, [sp, #36]	; 0x24
 8008484:	2320      	movs	r3, #32
 8008486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800848a:	2330      	movs	r3, #48	; 0x30
 800848c:	f04f 0901 	mov.w	r9, #1
 8008490:	f8cd 800c 	str.w	r8, [sp, #12]
 8008494:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008654 <_vfiprintf_r+0x24c>
 8008498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800849c:	4623      	mov	r3, r4
 800849e:	469a      	mov	sl, r3
 80084a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a4:	b10a      	cbz	r2, 80084aa <_vfiprintf_r+0xa2>
 80084a6:	2a25      	cmp	r2, #37	; 0x25
 80084a8:	d1f9      	bne.n	800849e <_vfiprintf_r+0x96>
 80084aa:	ebba 0b04 	subs.w	fp, sl, r4
 80084ae:	d00b      	beq.n	80084c8 <_vfiprintf_r+0xc0>
 80084b0:	465b      	mov	r3, fp
 80084b2:	4622      	mov	r2, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7ff ff93 	bl	80083e2 <__sfputs_r>
 80084bc:	3001      	adds	r0, #1
 80084be:	f000 80aa 	beq.w	8008616 <_vfiprintf_r+0x20e>
 80084c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c4:	445a      	add	r2, fp
 80084c6:	9209      	str	r2, [sp, #36]	; 0x24
 80084c8:	f89a 3000 	ldrb.w	r3, [sl]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80a2 	beq.w	8008616 <_vfiprintf_r+0x20e>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084dc:	f10a 0a01 	add.w	sl, sl, #1
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	9307      	str	r3, [sp, #28]
 80084e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084e8:	931a      	str	r3, [sp, #104]	; 0x68
 80084ea:	4654      	mov	r4, sl
 80084ec:	2205      	movs	r2, #5
 80084ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f2:	4858      	ldr	r0, [pc, #352]	; (8008654 <_vfiprintf_r+0x24c>)
 80084f4:	f000 fd32 	bl	8008f5c <memchr>
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	b9d8      	cbnz	r0, 8008534 <_vfiprintf_r+0x12c>
 80084fc:	06d1      	lsls	r1, r2, #27
 80084fe:	bf44      	itt	mi
 8008500:	2320      	movmi	r3, #32
 8008502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008506:	0713      	lsls	r3, r2, #28
 8008508:	bf44      	itt	mi
 800850a:	232b      	movmi	r3, #43	; 0x2b
 800850c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008510:	f89a 3000 	ldrb.w	r3, [sl]
 8008514:	2b2a      	cmp	r3, #42	; 0x2a
 8008516:	d015      	beq.n	8008544 <_vfiprintf_r+0x13c>
 8008518:	4654      	mov	r4, sl
 800851a:	2000      	movs	r0, #0
 800851c:	f04f 0c0a 	mov.w	ip, #10
 8008520:	9a07      	ldr	r2, [sp, #28]
 8008522:	4621      	mov	r1, r4
 8008524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008528:	3b30      	subs	r3, #48	; 0x30
 800852a:	2b09      	cmp	r3, #9
 800852c:	d94e      	bls.n	80085cc <_vfiprintf_r+0x1c4>
 800852e:	b1b0      	cbz	r0, 800855e <_vfiprintf_r+0x156>
 8008530:	9207      	str	r2, [sp, #28]
 8008532:	e014      	b.n	800855e <_vfiprintf_r+0x156>
 8008534:	eba0 0308 	sub.w	r3, r0, r8
 8008538:	fa09 f303 	lsl.w	r3, r9, r3
 800853c:	4313      	orrs	r3, r2
 800853e:	46a2      	mov	sl, r4
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	e7d2      	b.n	80084ea <_vfiprintf_r+0xe2>
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	1d19      	adds	r1, r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	9103      	str	r1, [sp, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfbb      	ittet	lt
 8008550:	425b      	neglt	r3, r3
 8008552:	f042 0202 	orrlt.w	r2, r2, #2
 8008556:	9307      	strge	r3, [sp, #28]
 8008558:	9307      	strlt	r3, [sp, #28]
 800855a:	bfb8      	it	lt
 800855c:	9204      	strlt	r2, [sp, #16]
 800855e:	7823      	ldrb	r3, [r4, #0]
 8008560:	2b2e      	cmp	r3, #46	; 0x2e
 8008562:	d10c      	bne.n	800857e <_vfiprintf_r+0x176>
 8008564:	7863      	ldrb	r3, [r4, #1]
 8008566:	2b2a      	cmp	r3, #42	; 0x2a
 8008568:	d135      	bne.n	80085d6 <_vfiprintf_r+0x1ce>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	3402      	adds	r4, #2
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	9203      	str	r2, [sp, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	bfb8      	it	lt
 8008578:	f04f 33ff 	movlt.w	r3, #4294967295
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008658 <_vfiprintf_r+0x250>
 8008582:	2203      	movs	r2, #3
 8008584:	4650      	mov	r0, sl
 8008586:	7821      	ldrb	r1, [r4, #0]
 8008588:	f000 fce8 	bl	8008f5c <memchr>
 800858c:	b140      	cbz	r0, 80085a0 <_vfiprintf_r+0x198>
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	eba0 000a 	sub.w	r0, r0, sl
 8008594:	fa03 f000 	lsl.w	r0, r3, r0
 8008598:	9b04      	ldr	r3, [sp, #16]
 800859a:	3401      	adds	r4, #1
 800859c:	4303      	orrs	r3, r0
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	2206      	movs	r2, #6
 80085a6:	482d      	ldr	r0, [pc, #180]	; (800865c <_vfiprintf_r+0x254>)
 80085a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ac:	f000 fcd6 	bl	8008f5c <memchr>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d03f      	beq.n	8008634 <_vfiprintf_r+0x22c>
 80085b4:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <_vfiprintf_r+0x258>)
 80085b6:	bb1b      	cbnz	r3, 8008600 <_vfiprintf_r+0x1f8>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	3307      	adds	r3, #7
 80085bc:	f023 0307 	bic.w	r3, r3, #7
 80085c0:	3308      	adds	r3, #8
 80085c2:	9303      	str	r3, [sp, #12]
 80085c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c6:	443b      	add	r3, r7
 80085c8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ca:	e767      	b.n	800849c <_vfiprintf_r+0x94>
 80085cc:	460c      	mov	r4, r1
 80085ce:	2001      	movs	r0, #1
 80085d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085d4:	e7a5      	b.n	8008522 <_vfiprintf_r+0x11a>
 80085d6:	2300      	movs	r3, #0
 80085d8:	f04f 0c0a 	mov.w	ip, #10
 80085dc:	4619      	mov	r1, r3
 80085de:	3401      	adds	r4, #1
 80085e0:	9305      	str	r3, [sp, #20]
 80085e2:	4620      	mov	r0, r4
 80085e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e8:	3a30      	subs	r2, #48	; 0x30
 80085ea:	2a09      	cmp	r2, #9
 80085ec:	d903      	bls.n	80085f6 <_vfiprintf_r+0x1ee>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0c5      	beq.n	800857e <_vfiprintf_r+0x176>
 80085f2:	9105      	str	r1, [sp, #20]
 80085f4:	e7c3      	b.n	800857e <_vfiprintf_r+0x176>
 80085f6:	4604      	mov	r4, r0
 80085f8:	2301      	movs	r3, #1
 80085fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80085fe:	e7f0      	b.n	80085e2 <_vfiprintf_r+0x1da>
 8008600:	ab03      	add	r3, sp, #12
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	462a      	mov	r2, r5
 8008606:	4630      	mov	r0, r6
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <_vfiprintf_r+0x25c>)
 800860a:	a904      	add	r1, sp, #16
 800860c:	f3af 8000 	nop.w
 8008610:	4607      	mov	r7, r0
 8008612:	1c78      	adds	r0, r7, #1
 8008614:	d1d6      	bne.n	80085c4 <_vfiprintf_r+0x1bc>
 8008616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008618:	07d9      	lsls	r1, r3, #31
 800861a:	d405      	bmi.n	8008628 <_vfiprintf_r+0x220>
 800861c:	89ab      	ldrh	r3, [r5, #12]
 800861e:	059a      	lsls	r2, r3, #22
 8008620:	d402      	bmi.n	8008628 <_vfiprintf_r+0x220>
 8008622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008624:	f000 fc33 	bl	8008e8e <__retarget_lock_release_recursive>
 8008628:	89ab      	ldrh	r3, [r5, #12]
 800862a:	065b      	lsls	r3, r3, #25
 800862c:	f53f af12 	bmi.w	8008454 <_vfiprintf_r+0x4c>
 8008630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008632:	e711      	b.n	8008458 <_vfiprintf_r+0x50>
 8008634:	ab03      	add	r3, sp, #12
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	462a      	mov	r2, r5
 800863a:	4630      	mov	r0, r6
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <_vfiprintf_r+0x25c>)
 800863e:	a904      	add	r1, sp, #16
 8008640:	f000 f882 	bl	8008748 <_printf_i>
 8008644:	e7e4      	b.n	8008610 <_vfiprintf_r+0x208>
 8008646:	bf00      	nop
 8008648:	0800a5e8 	.word	0x0800a5e8
 800864c:	0800a608 	.word	0x0800a608
 8008650:	0800a5c8 	.word	0x0800a5c8
 8008654:	0800a594 	.word	0x0800a594
 8008658:	0800a59a 	.word	0x0800a59a
 800865c:	0800a59e 	.word	0x0800a59e
 8008660:	00000000 	.word	0x00000000
 8008664:	080083e3 	.word	0x080083e3

08008668 <_printf_common>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4616      	mov	r6, r2
 800866e:	4699      	mov	r9, r3
 8008670:	688a      	ldr	r2, [r1, #8]
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	4607      	mov	r7, r0
 8008676:	4293      	cmp	r3, r2
 8008678:	bfb8      	it	lt
 800867a:	4613      	movlt	r3, r2
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008682:	460c      	mov	r4, r1
 8008684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008688:	b10a      	cbz	r2, 800868e <_printf_common+0x26>
 800868a:	3301      	adds	r3, #1
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	0699      	lsls	r1, r3, #26
 8008692:	bf42      	ittt	mi
 8008694:	6833      	ldrmi	r3, [r6, #0]
 8008696:	3302      	addmi	r3, #2
 8008698:	6033      	strmi	r3, [r6, #0]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	f015 0506 	ands.w	r5, r5, #6
 80086a0:	d106      	bne.n	80086b0 <_printf_common+0x48>
 80086a2:	f104 0a19 	add.w	sl, r4, #25
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	6832      	ldr	r2, [r6, #0]
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dc28      	bgt.n	8008702 <_printf_common+0x9a>
 80086b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b4:	1e13      	subs	r3, r2, #0
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	0692      	lsls	r2, r2, #26
 80086be:	d42d      	bmi.n	800871c <_printf_common+0xb4>
 80086c0:	4649      	mov	r1, r9
 80086c2:	4638      	mov	r0, r7
 80086c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d020      	beq.n	8008710 <_printf_common+0xa8>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	68e5      	ldr	r5, [r4, #12]
 80086d2:	f003 0306 	and.w	r3, r3, #6
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	bf18      	it	ne
 80086da:	2500      	movne	r5, #0
 80086dc:	6832      	ldr	r2, [r6, #0]
 80086de:	f04f 0600 	mov.w	r6, #0
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	bf08      	it	eq
 80086e6:	1aad      	subeq	r5, r5, r2
 80086e8:	6922      	ldr	r2, [r4, #16]
 80086ea:	bf08      	it	eq
 80086ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bfc4      	itt	gt
 80086f4:	1a9b      	subgt	r3, r3, r2
 80086f6:	18ed      	addgt	r5, r5, r3
 80086f8:	341a      	adds	r4, #26
 80086fa:	42b5      	cmp	r5, r6
 80086fc:	d11a      	bne.n	8008734 <_printf_common+0xcc>
 80086fe:	2000      	movs	r0, #0
 8008700:	e008      	b.n	8008714 <_printf_common+0xac>
 8008702:	2301      	movs	r3, #1
 8008704:	4652      	mov	r2, sl
 8008706:	4649      	mov	r1, r9
 8008708:	4638      	mov	r0, r7
 800870a:	47c0      	blx	r8
 800870c:	3001      	adds	r0, #1
 800870e:	d103      	bne.n	8008718 <_printf_common+0xb0>
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008718:	3501      	adds	r5, #1
 800871a:	e7c4      	b.n	80086a6 <_printf_common+0x3e>
 800871c:	2030      	movs	r0, #48	; 0x30
 800871e:	18e1      	adds	r1, r4, r3
 8008720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800872a:	4422      	add	r2, r4
 800872c:	3302      	adds	r3, #2
 800872e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008732:	e7c5      	b.n	80086c0 <_printf_common+0x58>
 8008734:	2301      	movs	r3, #1
 8008736:	4622      	mov	r2, r4
 8008738:	4649      	mov	r1, r9
 800873a:	4638      	mov	r0, r7
 800873c:	47c0      	blx	r8
 800873e:	3001      	adds	r0, #1
 8008740:	d0e6      	beq.n	8008710 <_printf_common+0xa8>
 8008742:	3601      	adds	r6, #1
 8008744:	e7d9      	b.n	80086fa <_printf_common+0x92>
	...

08008748 <_printf_i>:
 8008748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	7e0f      	ldrb	r7, [r1, #24]
 800874e:	4691      	mov	r9, r2
 8008750:	2f78      	cmp	r7, #120	; 0x78
 8008752:	4680      	mov	r8, r0
 8008754:	460c      	mov	r4, r1
 8008756:	469a      	mov	sl, r3
 8008758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800875a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800875e:	d807      	bhi.n	8008770 <_printf_i+0x28>
 8008760:	2f62      	cmp	r7, #98	; 0x62
 8008762:	d80a      	bhi.n	800877a <_printf_i+0x32>
 8008764:	2f00      	cmp	r7, #0
 8008766:	f000 80d9 	beq.w	800891c <_printf_i+0x1d4>
 800876a:	2f58      	cmp	r7, #88	; 0x58
 800876c:	f000 80a4 	beq.w	80088b8 <_printf_i+0x170>
 8008770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008778:	e03a      	b.n	80087f0 <_printf_i+0xa8>
 800877a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800877e:	2b15      	cmp	r3, #21
 8008780:	d8f6      	bhi.n	8008770 <_printf_i+0x28>
 8008782:	a101      	add	r1, pc, #4	; (adr r1, 8008788 <_printf_i+0x40>)
 8008784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087f5 	.word	0x080087f5
 8008790:	08008771 	.word	0x08008771
 8008794:	08008771 	.word	0x08008771
 8008798:	08008771 	.word	0x08008771
 800879c:	08008771 	.word	0x08008771
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	08008771 	.word	0x08008771
 80087a8:	08008771 	.word	0x08008771
 80087ac:	08008771 	.word	0x08008771
 80087b0:	08008771 	.word	0x08008771
 80087b4:	08008903 	.word	0x08008903
 80087b8:	08008825 	.word	0x08008825
 80087bc:	080088e5 	.word	0x080088e5
 80087c0:	08008771 	.word	0x08008771
 80087c4:	08008771 	.word	0x08008771
 80087c8:	08008925 	.word	0x08008925
 80087cc:	08008771 	.word	0x08008771
 80087d0:	08008825 	.word	0x08008825
 80087d4:	08008771 	.word	0x08008771
 80087d8:	08008771 	.word	0x08008771
 80087dc:	080088ed 	.word	0x080088ed
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	1d1a      	adds	r2, r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	602a      	str	r2, [r5, #0]
 80087e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f0:	2301      	movs	r3, #1
 80087f2:	e0a4      	b.n	800893e <_printf_i+0x1f6>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	6829      	ldr	r1, [r5, #0]
 80087f8:	0606      	lsls	r6, r0, #24
 80087fa:	f101 0304 	add.w	r3, r1, #4
 80087fe:	d50a      	bpl.n	8008816 <_printf_i+0xce>
 8008800:	680e      	ldr	r6, [r1, #0]
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	2e00      	cmp	r6, #0
 8008806:	da03      	bge.n	8008810 <_printf_i+0xc8>
 8008808:	232d      	movs	r3, #45	; 0x2d
 800880a:	4276      	negs	r6, r6
 800880c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008810:	230a      	movs	r3, #10
 8008812:	485e      	ldr	r0, [pc, #376]	; (800898c <_printf_i+0x244>)
 8008814:	e019      	b.n	800884a <_printf_i+0x102>
 8008816:	680e      	ldr	r6, [r1, #0]
 8008818:	f010 0f40 	tst.w	r0, #64	; 0x40
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	bf18      	it	ne
 8008820:	b236      	sxthne	r6, r6
 8008822:	e7ef      	b.n	8008804 <_printf_i+0xbc>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	6820      	ldr	r0, [r4, #0]
 8008828:	1d19      	adds	r1, r3, #4
 800882a:	6029      	str	r1, [r5, #0]
 800882c:	0601      	lsls	r1, r0, #24
 800882e:	d501      	bpl.n	8008834 <_printf_i+0xec>
 8008830:	681e      	ldr	r6, [r3, #0]
 8008832:	e002      	b.n	800883a <_printf_i+0xf2>
 8008834:	0646      	lsls	r6, r0, #25
 8008836:	d5fb      	bpl.n	8008830 <_printf_i+0xe8>
 8008838:	881e      	ldrh	r6, [r3, #0]
 800883a:	2f6f      	cmp	r7, #111	; 0x6f
 800883c:	bf0c      	ite	eq
 800883e:	2308      	moveq	r3, #8
 8008840:	230a      	movne	r3, #10
 8008842:	4852      	ldr	r0, [pc, #328]	; (800898c <_printf_i+0x244>)
 8008844:	2100      	movs	r1, #0
 8008846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800884a:	6865      	ldr	r5, [r4, #4]
 800884c:	2d00      	cmp	r5, #0
 800884e:	bfa8      	it	ge
 8008850:	6821      	ldrge	r1, [r4, #0]
 8008852:	60a5      	str	r5, [r4, #8]
 8008854:	bfa4      	itt	ge
 8008856:	f021 0104 	bicge.w	r1, r1, #4
 800885a:	6021      	strge	r1, [r4, #0]
 800885c:	b90e      	cbnz	r6, 8008862 <_printf_i+0x11a>
 800885e:	2d00      	cmp	r5, #0
 8008860:	d04d      	beq.n	80088fe <_printf_i+0x1b6>
 8008862:	4615      	mov	r5, r2
 8008864:	fbb6 f1f3 	udiv	r1, r6, r3
 8008868:	fb03 6711 	mls	r7, r3, r1, r6
 800886c:	5dc7      	ldrb	r7, [r0, r7]
 800886e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008872:	4637      	mov	r7, r6
 8008874:	42bb      	cmp	r3, r7
 8008876:	460e      	mov	r6, r1
 8008878:	d9f4      	bls.n	8008864 <_printf_i+0x11c>
 800887a:	2b08      	cmp	r3, #8
 800887c:	d10b      	bne.n	8008896 <_printf_i+0x14e>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	07de      	lsls	r6, r3, #31
 8008882:	d508      	bpl.n	8008896 <_printf_i+0x14e>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	6861      	ldr	r1, [r4, #4]
 8008888:	4299      	cmp	r1, r3
 800888a:	bfde      	ittt	le
 800888c:	2330      	movle	r3, #48	; 0x30
 800888e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008896:	1b52      	subs	r2, r2, r5
 8008898:	6122      	str	r2, [r4, #16]
 800889a:	464b      	mov	r3, r9
 800889c:	4621      	mov	r1, r4
 800889e:	4640      	mov	r0, r8
 80088a0:	f8cd a000 	str.w	sl, [sp]
 80088a4:	aa03      	add	r2, sp, #12
 80088a6:	f7ff fedf 	bl	8008668 <_printf_common>
 80088aa:	3001      	adds	r0, #1
 80088ac:	d14c      	bne.n	8008948 <_printf_i+0x200>
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295
 80088b2:	b004      	add	sp, #16
 80088b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b8:	4834      	ldr	r0, [pc, #208]	; (800898c <_printf_i+0x244>)
 80088ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088be:	6829      	ldr	r1, [r5, #0]
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80088c6:	6029      	str	r1, [r5, #0]
 80088c8:	061d      	lsls	r5, r3, #24
 80088ca:	d514      	bpl.n	80088f6 <_printf_i+0x1ae>
 80088cc:	07df      	lsls	r7, r3, #31
 80088ce:	bf44      	itt	mi
 80088d0:	f043 0320 	orrmi.w	r3, r3, #32
 80088d4:	6023      	strmi	r3, [r4, #0]
 80088d6:	b91e      	cbnz	r6, 80088e0 <_printf_i+0x198>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	f023 0320 	bic.w	r3, r3, #32
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	2310      	movs	r3, #16
 80088e2:	e7af      	b.n	8008844 <_printf_i+0xfc>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	f043 0320 	orr.w	r3, r3, #32
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	2378      	movs	r3, #120	; 0x78
 80088ee:	4828      	ldr	r0, [pc, #160]	; (8008990 <_printf_i+0x248>)
 80088f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088f4:	e7e3      	b.n	80088be <_printf_i+0x176>
 80088f6:	0659      	lsls	r1, r3, #25
 80088f8:	bf48      	it	mi
 80088fa:	b2b6      	uxthmi	r6, r6
 80088fc:	e7e6      	b.n	80088cc <_printf_i+0x184>
 80088fe:	4615      	mov	r5, r2
 8008900:	e7bb      	b.n	800887a <_printf_i+0x132>
 8008902:	682b      	ldr	r3, [r5, #0]
 8008904:	6826      	ldr	r6, [r4, #0]
 8008906:	1d18      	adds	r0, r3, #4
 8008908:	6961      	ldr	r1, [r4, #20]
 800890a:	6028      	str	r0, [r5, #0]
 800890c:	0635      	lsls	r5, r6, #24
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	d501      	bpl.n	8008916 <_printf_i+0x1ce>
 8008912:	6019      	str	r1, [r3, #0]
 8008914:	e002      	b.n	800891c <_printf_i+0x1d4>
 8008916:	0670      	lsls	r0, r6, #25
 8008918:	d5fb      	bpl.n	8008912 <_printf_i+0x1ca>
 800891a:	8019      	strh	r1, [r3, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	4615      	mov	r5, r2
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	e7ba      	b.n	800889a <_printf_i+0x152>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	2100      	movs	r1, #0
 8008928:	1d1a      	adds	r2, r3, #4
 800892a:	602a      	str	r2, [r5, #0]
 800892c:	681d      	ldr	r5, [r3, #0]
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	4628      	mov	r0, r5
 8008932:	f000 fb13 	bl	8008f5c <memchr>
 8008936:	b108      	cbz	r0, 800893c <_printf_i+0x1f4>
 8008938:	1b40      	subs	r0, r0, r5
 800893a:	6060      	str	r0, [r4, #4]
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	6123      	str	r3, [r4, #16]
 8008940:	2300      	movs	r3, #0
 8008942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008946:	e7a8      	b.n	800889a <_printf_i+0x152>
 8008948:	462a      	mov	r2, r5
 800894a:	4649      	mov	r1, r9
 800894c:	4640      	mov	r0, r8
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	47d0      	blx	sl
 8008952:	3001      	adds	r0, #1
 8008954:	d0ab      	beq.n	80088ae <_printf_i+0x166>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	079b      	lsls	r3, r3, #30
 800895a:	d413      	bmi.n	8008984 <_printf_i+0x23c>
 800895c:	68e0      	ldr	r0, [r4, #12]
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	4298      	cmp	r0, r3
 8008962:	bfb8      	it	lt
 8008964:	4618      	movlt	r0, r3
 8008966:	e7a4      	b.n	80088b2 <_printf_i+0x16a>
 8008968:	2301      	movs	r3, #1
 800896a:	4632      	mov	r2, r6
 800896c:	4649      	mov	r1, r9
 800896e:	4640      	mov	r0, r8
 8008970:	47d0      	blx	sl
 8008972:	3001      	adds	r0, #1
 8008974:	d09b      	beq.n	80088ae <_printf_i+0x166>
 8008976:	3501      	adds	r5, #1
 8008978:	68e3      	ldr	r3, [r4, #12]
 800897a:	9903      	ldr	r1, [sp, #12]
 800897c:	1a5b      	subs	r3, r3, r1
 800897e:	42ab      	cmp	r3, r5
 8008980:	dcf2      	bgt.n	8008968 <_printf_i+0x220>
 8008982:	e7eb      	b.n	800895c <_printf_i+0x214>
 8008984:	2500      	movs	r5, #0
 8008986:	f104 0619 	add.w	r6, r4, #25
 800898a:	e7f5      	b.n	8008978 <_printf_i+0x230>
 800898c:	0800a5a5 	.word	0x0800a5a5
 8008990:	0800a5b6 	.word	0x0800a5b6

08008994 <__swbuf_r>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	460e      	mov	r6, r1
 8008998:	4614      	mov	r4, r2
 800899a:	4605      	mov	r5, r0
 800899c:	b118      	cbz	r0, 80089a6 <__swbuf_r+0x12>
 800899e:	6983      	ldr	r3, [r0, #24]
 80089a0:	b90b      	cbnz	r3, 80089a6 <__swbuf_r+0x12>
 80089a2:	f000 f9d5 	bl	8008d50 <__sinit>
 80089a6:	4b21      	ldr	r3, [pc, #132]	; (8008a2c <__swbuf_r+0x98>)
 80089a8:	429c      	cmp	r4, r3
 80089aa:	d12b      	bne.n	8008a04 <__swbuf_r+0x70>
 80089ac:	686c      	ldr	r4, [r5, #4]
 80089ae:	69a3      	ldr	r3, [r4, #24]
 80089b0:	60a3      	str	r3, [r4, #8]
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	071a      	lsls	r2, r3, #28
 80089b6:	d52f      	bpl.n	8008a18 <__swbuf_r+0x84>
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	b36b      	cbz	r3, 8008a18 <__swbuf_r+0x84>
 80089bc:	6923      	ldr	r3, [r4, #16]
 80089be:	6820      	ldr	r0, [r4, #0]
 80089c0:	b2f6      	uxtb	r6, r6
 80089c2:	1ac0      	subs	r0, r0, r3
 80089c4:	6963      	ldr	r3, [r4, #20]
 80089c6:	4637      	mov	r7, r6
 80089c8:	4283      	cmp	r3, r0
 80089ca:	dc04      	bgt.n	80089d6 <__swbuf_r+0x42>
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 f92a 	bl	8008c28 <_fflush_r>
 80089d4:	bb30      	cbnz	r0, 8008a24 <__swbuf_r+0x90>
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	3001      	adds	r0, #1
 80089da:	3b01      	subs	r3, #1
 80089dc:	60a3      	str	r3, [r4, #8]
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	6022      	str	r2, [r4, #0]
 80089e4:	701e      	strb	r6, [r3, #0]
 80089e6:	6963      	ldr	r3, [r4, #20]
 80089e8:	4283      	cmp	r3, r0
 80089ea:	d004      	beq.n	80089f6 <__swbuf_r+0x62>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	07db      	lsls	r3, r3, #31
 80089f0:	d506      	bpl.n	8008a00 <__swbuf_r+0x6c>
 80089f2:	2e0a      	cmp	r6, #10
 80089f4:	d104      	bne.n	8008a00 <__swbuf_r+0x6c>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 f915 	bl	8008c28 <_fflush_r>
 80089fe:	b988      	cbnz	r0, 8008a24 <__swbuf_r+0x90>
 8008a00:	4638      	mov	r0, r7
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a04:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <__swbuf_r+0x9c>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	d101      	bne.n	8008a0e <__swbuf_r+0x7a>
 8008a0a:	68ac      	ldr	r4, [r5, #8]
 8008a0c:	e7cf      	b.n	80089ae <__swbuf_r+0x1a>
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <__swbuf_r+0xa0>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	bf08      	it	eq
 8008a14:	68ec      	ldreq	r4, [r5, #12]
 8008a16:	e7ca      	b.n	80089ae <__swbuf_r+0x1a>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 f80c 	bl	8008a38 <__swsetup_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d0cb      	beq.n	80089bc <__swbuf_r+0x28>
 8008a24:	f04f 37ff 	mov.w	r7, #4294967295
 8008a28:	e7ea      	b.n	8008a00 <__swbuf_r+0x6c>
 8008a2a:	bf00      	nop
 8008a2c:	0800a5e8 	.word	0x0800a5e8
 8008a30:	0800a608 	.word	0x0800a608
 8008a34:	0800a5c8 	.word	0x0800a5c8

08008a38 <__swsetup_r>:
 8008a38:	4b32      	ldr	r3, [pc, #200]	; (8008b04 <__swsetup_r+0xcc>)
 8008a3a:	b570      	push	{r4, r5, r6, lr}
 8008a3c:	681d      	ldr	r5, [r3, #0]
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460c      	mov	r4, r1
 8008a42:	b125      	cbz	r5, 8008a4e <__swsetup_r+0x16>
 8008a44:	69ab      	ldr	r3, [r5, #24]
 8008a46:	b913      	cbnz	r3, 8008a4e <__swsetup_r+0x16>
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f981 	bl	8008d50 <__sinit>
 8008a4e:	4b2e      	ldr	r3, [pc, #184]	; (8008b08 <__swsetup_r+0xd0>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	d10f      	bne.n	8008a74 <__swsetup_r+0x3c>
 8008a54:	686c      	ldr	r4, [r5, #4]
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a5c:	0719      	lsls	r1, r3, #28
 8008a5e:	d42c      	bmi.n	8008aba <__swsetup_r+0x82>
 8008a60:	06dd      	lsls	r5, r3, #27
 8008a62:	d411      	bmi.n	8008a88 <__swsetup_r+0x50>
 8008a64:	2309      	movs	r3, #9
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	e03e      	b.n	8008af2 <__swsetup_r+0xba>
 8008a74:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <__swsetup_r+0xd4>)
 8008a76:	429c      	cmp	r4, r3
 8008a78:	d101      	bne.n	8008a7e <__swsetup_r+0x46>
 8008a7a:	68ac      	ldr	r4, [r5, #8]
 8008a7c:	e7eb      	b.n	8008a56 <__swsetup_r+0x1e>
 8008a7e:	4b24      	ldr	r3, [pc, #144]	; (8008b10 <__swsetup_r+0xd8>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	bf08      	it	eq
 8008a84:	68ec      	ldreq	r4, [r5, #12]
 8008a86:	e7e6      	b.n	8008a56 <__swsetup_r+0x1e>
 8008a88:	0758      	lsls	r0, r3, #29
 8008a8a:	d512      	bpl.n	8008ab2 <__swsetup_r+0x7a>
 8008a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8e:	b141      	cbz	r1, 8008aa2 <__swsetup_r+0x6a>
 8008a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a94:	4299      	cmp	r1, r3
 8008a96:	d002      	beq.n	8008a9e <__swsetup_r+0x66>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 fa6d 	bl	8008f78 <_free_r>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f043 0308 	orr.w	r3, r3, #8
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	b94b      	cbnz	r3, 8008ad2 <__swsetup_r+0x9a>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac8:	d003      	beq.n	8008ad2 <__swsetup_r+0x9a>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 fa05 	bl	8008edc <__smakebuf_r>
 8008ad2:	89a0      	ldrh	r0, [r4, #12]
 8008ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ad8:	f010 0301 	ands.w	r3, r0, #1
 8008adc:	d00a      	beq.n	8008af4 <__swsetup_r+0xbc>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60a3      	str	r3, [r4, #8]
 8008ae2:	6963      	ldr	r3, [r4, #20]
 8008ae4:	425b      	negs	r3, r3
 8008ae6:	61a3      	str	r3, [r4, #24]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	b943      	cbnz	r3, 8008afe <__swsetup_r+0xc6>
 8008aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008af0:	d1ba      	bne.n	8008a68 <__swsetup_r+0x30>
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	0781      	lsls	r1, r0, #30
 8008af6:	bf58      	it	pl
 8008af8:	6963      	ldrpl	r3, [r4, #20]
 8008afa:	60a3      	str	r3, [r4, #8]
 8008afc:	e7f4      	b.n	8008ae8 <__swsetup_r+0xb0>
 8008afe:	2000      	movs	r0, #0
 8008b00:	e7f7      	b.n	8008af2 <__swsetup_r+0xba>
 8008b02:	bf00      	nop
 8008b04:	20000010 	.word	0x20000010
 8008b08:	0800a5e8 	.word	0x0800a5e8
 8008b0c:	0800a608 	.word	0x0800a608
 8008b10:	0800a5c8 	.word	0x0800a5c8

08008b14 <abort>:
 8008b14:	2006      	movs	r0, #6
 8008b16:	b508      	push	{r3, lr}
 8008b18:	f000 fb42 	bl	80091a0 <raise>
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f7fb faf2 	bl	8004106 <_exit>
	...

08008b24 <__sflush_r>:
 8008b24:	898a      	ldrh	r2, [r1, #12]
 8008b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b28:	4605      	mov	r5, r0
 8008b2a:	0710      	lsls	r0, r2, #28
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	d457      	bmi.n	8008be0 <__sflush_r+0xbc>
 8008b30:	684b      	ldr	r3, [r1, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dc04      	bgt.n	8008b40 <__sflush_r+0x1c>
 8008b36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dc01      	bgt.n	8008b40 <__sflush_r+0x1c>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d0fa      	beq.n	8008b3c <__sflush_r+0x18>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b4c:	682f      	ldr	r7, [r5, #0]
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	d032      	beq.n	8008bb8 <__sflush_r+0x94>
 8008b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	075a      	lsls	r2, r3, #29
 8008b58:	d505      	bpl.n	8008b66 <__sflush_r+0x42>
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	1ac0      	subs	r0, r0, r3
 8008b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b60:	b10b      	cbz	r3, 8008b66 <__sflush_r+0x42>
 8008b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b64:	1ac0      	subs	r0, r0, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	6a21      	ldr	r1, [r4, #32]
 8008b70:	47b0      	blx	r6
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	d106      	bne.n	8008b86 <__sflush_r+0x62>
 8008b78:	6829      	ldr	r1, [r5, #0]
 8008b7a:	291d      	cmp	r1, #29
 8008b7c:	d82c      	bhi.n	8008bd8 <__sflush_r+0xb4>
 8008b7e:	4a29      	ldr	r2, [pc, #164]	; (8008c24 <__sflush_r+0x100>)
 8008b80:	40ca      	lsrs	r2, r1
 8008b82:	07d6      	lsls	r6, r2, #31
 8008b84:	d528      	bpl.n	8008bd8 <__sflush_r+0xb4>
 8008b86:	2200      	movs	r2, #0
 8008b88:	6062      	str	r2, [r4, #4]
 8008b8a:	6922      	ldr	r2, [r4, #16]
 8008b8c:	04d9      	lsls	r1, r3, #19
 8008b8e:	6022      	str	r2, [r4, #0]
 8008b90:	d504      	bpl.n	8008b9c <__sflush_r+0x78>
 8008b92:	1c42      	adds	r2, r0, #1
 8008b94:	d101      	bne.n	8008b9a <__sflush_r+0x76>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b903      	cbnz	r3, 8008b9c <__sflush_r+0x78>
 8008b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9e:	602f      	str	r7, [r5, #0]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	d0cb      	beq.n	8008b3c <__sflush_r+0x18>
 8008ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	d002      	beq.n	8008bb2 <__sflush_r+0x8e>
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 f9e3 	bl	8008f78 <_free_r>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bb6:	e7c2      	b.n	8008b3e <__sflush_r+0x1a>
 8008bb8:	6a21      	ldr	r1, [r4, #32]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b0      	blx	r6
 8008bc0:	1c41      	adds	r1, r0, #1
 8008bc2:	d1c7      	bne.n	8008b54 <__sflush_r+0x30>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0c4      	beq.n	8008b54 <__sflush_r+0x30>
 8008bca:	2b1d      	cmp	r3, #29
 8008bcc:	d001      	beq.n	8008bd2 <__sflush_r+0xae>
 8008bce:	2b16      	cmp	r3, #22
 8008bd0:	d101      	bne.n	8008bd6 <__sflush_r+0xb2>
 8008bd2:	602f      	str	r7, [r5, #0]
 8008bd4:	e7b2      	b.n	8008b3c <__sflush_r+0x18>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	e7ae      	b.n	8008b3e <__sflush_r+0x1a>
 8008be0:	690f      	ldr	r7, [r1, #16]
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	d0aa      	beq.n	8008b3c <__sflush_r+0x18>
 8008be6:	0793      	lsls	r3, r2, #30
 8008be8:	bf18      	it	ne
 8008bea:	2300      	movne	r3, #0
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	1bf6      	subs	r6, r6, r7
 8008bf4:	600f      	str	r7, [r1, #0]
 8008bf6:	608b      	str	r3, [r1, #8]
 8008bf8:	2e00      	cmp	r6, #0
 8008bfa:	dd9f      	ble.n	8008b3c <__sflush_r+0x18>
 8008bfc:	4633      	mov	r3, r6
 8008bfe:	463a      	mov	r2, r7
 8008c00:	4628      	mov	r0, r5
 8008c02:	6a21      	ldr	r1, [r4, #32]
 8008c04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c08:	47e0      	blx	ip
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	dc06      	bgt.n	8008c1c <__sflush_r+0xf8>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	e790      	b.n	8008b3e <__sflush_r+0x1a>
 8008c1c:	4407      	add	r7, r0
 8008c1e:	1a36      	subs	r6, r6, r0
 8008c20:	e7ea      	b.n	8008bf8 <__sflush_r+0xd4>
 8008c22:	bf00      	nop
 8008c24:	20400001 	.word	0x20400001

08008c28 <_fflush_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b913      	cbnz	r3, 8008c38 <_fflush_r+0x10>
 8008c32:	2500      	movs	r5, #0
 8008c34:	4628      	mov	r0, r5
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	b118      	cbz	r0, 8008c42 <_fflush_r+0x1a>
 8008c3a:	6983      	ldr	r3, [r0, #24]
 8008c3c:	b90b      	cbnz	r3, 8008c42 <_fflush_r+0x1a>
 8008c3e:	f000 f887 	bl	8008d50 <__sinit>
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <_fflush_r+0x6c>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d11b      	bne.n	8008c80 <_fflush_r+0x58>
 8008c48:	686c      	ldr	r4, [r5, #4]
 8008c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ef      	beq.n	8008c32 <_fflush_r+0xa>
 8008c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c54:	07d0      	lsls	r0, r2, #31
 8008c56:	d404      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c58:	0599      	lsls	r1, r3, #22
 8008c5a:	d402      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5e:	f000 f915 	bl	8008e8c <__retarget_lock_acquire_recursive>
 8008c62:	4628      	mov	r0, r5
 8008c64:	4621      	mov	r1, r4
 8008c66:	f7ff ff5d 	bl	8008b24 <__sflush_r>
 8008c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	07da      	lsls	r2, r3, #31
 8008c70:	d4e0      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	059b      	lsls	r3, r3, #22
 8008c76:	d4dd      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7a:	f000 f908 	bl	8008e8e <__retarget_lock_release_recursive>
 8008c7e:	e7d9      	b.n	8008c34 <_fflush_r+0xc>
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_fflush_r+0x70>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <_fflush_r+0x62>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7df      	b.n	8008c4a <_fflush_r+0x22>
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <_fflush_r+0x74>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7da      	b.n	8008c4a <_fflush_r+0x22>
 8008c94:	0800a5e8 	.word	0x0800a5e8
 8008c98:	0800a608 	.word	0x0800a608
 8008c9c:	0800a5c8 	.word	0x0800a5c8

08008ca0 <std>:
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8008caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cae:	6083      	str	r3, [r0, #8]
 8008cb0:	8181      	strh	r1, [r0, #12]
 8008cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cb4:	81c2      	strh	r2, [r0, #14]
 8008cb6:	6183      	str	r3, [r0, #24]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	2208      	movs	r2, #8
 8008cbc:	305c      	adds	r0, #92	; 0x5c
 8008cbe:	f7ff fb73 	bl	80083a8 <memset>
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <std+0x38>)
 8008cc4:	6224      	str	r4, [r4, #32]
 8008cc6:	6263      	str	r3, [r4, #36]	; 0x24
 8008cc8:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <std+0x3c>)
 8008cca:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <std+0x40>)
 8008cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cd0:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <std+0x44>)
 8008cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	080091d9 	.word	0x080091d9
 8008cdc:	080091fb 	.word	0x080091fb
 8008ce0:	08009233 	.word	0x08009233
 8008ce4:	08009257 	.word	0x08009257

08008ce8 <_cleanup_r>:
 8008ce8:	4901      	ldr	r1, [pc, #4]	; (8008cf0 <_cleanup_r+0x8>)
 8008cea:	f000 b8af 	b.w	8008e4c <_fwalk_reent>
 8008cee:	bf00      	nop
 8008cf0:	08008c29 	.word	0x08008c29

08008cf4 <__sfmoreglue>:
 8008cf4:	2268      	movs	r2, #104	; 0x68
 8008cf6:	b570      	push	{r4, r5, r6, lr}
 8008cf8:	1e4d      	subs	r5, r1, #1
 8008cfa:	4355      	muls	r5, r2
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d02:	f000 f9a1 	bl	8009048 <_malloc_r>
 8008d06:	4604      	mov	r4, r0
 8008d08:	b140      	cbz	r0, 8008d1c <__sfmoreglue+0x28>
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d10:	300c      	adds	r0, #12
 8008d12:	60a0      	str	r0, [r4, #8]
 8008d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d18:	f7ff fb46 	bl	80083a8 <memset>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}

08008d20 <__sfp_lock_acquire>:
 8008d20:	4801      	ldr	r0, [pc, #4]	; (8008d28 <__sfp_lock_acquire+0x8>)
 8008d22:	f000 b8b3 	b.w	8008e8c <__retarget_lock_acquire_recursive>
 8008d26:	bf00      	nop
 8008d28:	20000de5 	.word	0x20000de5

08008d2c <__sfp_lock_release>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__sfp_lock_release+0x8>)
 8008d2e:	f000 b8ae 	b.w	8008e8e <__retarget_lock_release_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000de5 	.word	0x20000de5

08008d38 <__sinit_lock_acquire>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__sinit_lock_acquire+0x8>)
 8008d3a:	f000 b8a7 	b.w	8008e8c <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	20000de6 	.word	0x20000de6

08008d44 <__sinit_lock_release>:
 8008d44:	4801      	ldr	r0, [pc, #4]	; (8008d4c <__sinit_lock_release+0x8>)
 8008d46:	f000 b8a2 	b.w	8008e8e <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	20000de6 	.word	0x20000de6

08008d50 <__sinit>:
 8008d50:	b510      	push	{r4, lr}
 8008d52:	4604      	mov	r4, r0
 8008d54:	f7ff fff0 	bl	8008d38 <__sinit_lock_acquire>
 8008d58:	69a3      	ldr	r3, [r4, #24]
 8008d5a:	b11b      	cbz	r3, 8008d64 <__sinit+0x14>
 8008d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d60:	f7ff bff0 	b.w	8008d44 <__sinit_lock_release>
 8008d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d68:	6523      	str	r3, [r4, #80]	; 0x50
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <__sinit+0x68>)
 8008d6c:	4a13      	ldr	r2, [pc, #76]	; (8008dbc <__sinit+0x6c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	bf08      	it	eq
 8008d76:	2301      	moveq	r3, #1
 8008d78:	4620      	mov	r0, r4
 8008d7a:	bf08      	it	eq
 8008d7c:	61a3      	streq	r3, [r4, #24]
 8008d7e:	f000 f81f 	bl	8008dc0 <__sfp>
 8008d82:	6060      	str	r0, [r4, #4]
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 f81b 	bl	8008dc0 <__sfp>
 8008d8a:	60a0      	str	r0, [r4, #8]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 f817 	bl	8008dc0 <__sfp>
 8008d92:	2200      	movs	r2, #0
 8008d94:	2104      	movs	r1, #4
 8008d96:	60e0      	str	r0, [r4, #12]
 8008d98:	6860      	ldr	r0, [r4, #4]
 8008d9a:	f7ff ff81 	bl	8008ca0 <std>
 8008d9e:	2201      	movs	r2, #1
 8008da0:	2109      	movs	r1, #9
 8008da2:	68a0      	ldr	r0, [r4, #8]
 8008da4:	f7ff ff7c 	bl	8008ca0 <std>
 8008da8:	2202      	movs	r2, #2
 8008daa:	2112      	movs	r1, #18
 8008dac:	68e0      	ldr	r0, [r4, #12]
 8008dae:	f7ff ff77 	bl	8008ca0 <std>
 8008db2:	2301      	movs	r3, #1
 8008db4:	61a3      	str	r3, [r4, #24]
 8008db6:	e7d1      	b.n	8008d5c <__sinit+0xc>
 8008db8:	0800a590 	.word	0x0800a590
 8008dbc:	08008ce9 	.word	0x08008ce9

08008dc0 <__sfp>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	f7ff ffac 	bl	8008d20 <__sfp_lock_acquire>
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <__sfp+0x84>)
 8008dca:	681e      	ldr	r6, [r3, #0]
 8008dcc:	69b3      	ldr	r3, [r6, #24]
 8008dce:	b913      	cbnz	r3, 8008dd6 <__sfp+0x16>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff ffbd 	bl	8008d50 <__sinit>
 8008dd6:	3648      	adds	r6, #72	; 0x48
 8008dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	d503      	bpl.n	8008de8 <__sfp+0x28>
 8008de0:	6833      	ldr	r3, [r6, #0]
 8008de2:	b30b      	cbz	r3, 8008e28 <__sfp+0x68>
 8008de4:	6836      	ldr	r6, [r6, #0]
 8008de6:	e7f7      	b.n	8008dd8 <__sfp+0x18>
 8008de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dec:	b9d5      	cbnz	r5, 8008e24 <__sfp+0x64>
 8008dee:	4b16      	ldr	r3, [pc, #88]	; (8008e48 <__sfp+0x88>)
 8008df0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008df4:	60e3      	str	r3, [r4, #12]
 8008df6:	6665      	str	r5, [r4, #100]	; 0x64
 8008df8:	f000 f847 	bl	8008e8a <__retarget_lock_init_recursive>
 8008dfc:	f7ff ff96 	bl	8008d2c <__sfp_lock_release>
 8008e00:	2208      	movs	r2, #8
 8008e02:	4629      	mov	r1, r5
 8008e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e0c:	6025      	str	r5, [r4, #0]
 8008e0e:	61a5      	str	r5, [r4, #24]
 8008e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e14:	f7ff fac8 	bl	80083a8 <memset>
 8008e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e20:	4620      	mov	r0, r4
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	3468      	adds	r4, #104	; 0x68
 8008e26:	e7d9      	b.n	8008ddc <__sfp+0x1c>
 8008e28:	2104      	movs	r1, #4
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f7ff ff62 	bl	8008cf4 <__sfmoreglue>
 8008e30:	4604      	mov	r4, r0
 8008e32:	6030      	str	r0, [r6, #0]
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1d5      	bne.n	8008de4 <__sfp+0x24>
 8008e38:	f7ff ff78 	bl	8008d2c <__sfp_lock_release>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	e7ee      	b.n	8008e20 <__sfp+0x60>
 8008e42:	bf00      	nop
 8008e44:	0800a590 	.word	0x0800a590
 8008e48:	ffff0001 	.word	0xffff0001

08008e4c <_fwalk_reent>:
 8008e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	4606      	mov	r6, r0
 8008e52:	4688      	mov	r8, r1
 8008e54:	2700      	movs	r7, #0
 8008e56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e62:	d505      	bpl.n	8008e70 <_fwalk_reent+0x24>
 8008e64:	6824      	ldr	r4, [r4, #0]
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d1f7      	bne.n	8008e5a <_fwalk_reent+0xe>
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e70:	89ab      	ldrh	r3, [r5, #12]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d907      	bls.n	8008e86 <_fwalk_reent+0x3a>
 8008e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	d003      	beq.n	8008e86 <_fwalk_reent+0x3a>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4630      	mov	r0, r6
 8008e82:	47c0      	blx	r8
 8008e84:	4307      	orrs	r7, r0
 8008e86:	3568      	adds	r5, #104	; 0x68
 8008e88:	e7e9      	b.n	8008e5e <_fwalk_reent+0x12>

08008e8a <__retarget_lock_init_recursive>:
 8008e8a:	4770      	bx	lr

08008e8c <__retarget_lock_acquire_recursive>:
 8008e8c:	4770      	bx	lr

08008e8e <__retarget_lock_release_recursive>:
 8008e8e:	4770      	bx	lr

08008e90 <__swhatbuf_r>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	460e      	mov	r6, r1
 8008e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e98:	4614      	mov	r4, r2
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	461d      	mov	r5, r3
 8008e9e:	b096      	sub	sp, #88	; 0x58
 8008ea0:	da08      	bge.n	8008eb4 <__swhatbuf_r+0x24>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ea8:	602a      	str	r2, [r5, #0]
 8008eaa:	061a      	lsls	r2, r3, #24
 8008eac:	d410      	bmi.n	8008ed0 <__swhatbuf_r+0x40>
 8008eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb2:	e00e      	b.n	8008ed2 <__swhatbuf_r+0x42>
 8008eb4:	466a      	mov	r2, sp
 8008eb6:	f000 f9f5 	bl	80092a4 <_fstat_r>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	dbf1      	blt.n	8008ea2 <__swhatbuf_r+0x12>
 8008ebe:	9a01      	ldr	r2, [sp, #4]
 8008ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ec8:	425a      	negs	r2, r3
 8008eca:	415a      	adcs	r2, r3
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	e7ee      	b.n	8008eae <__swhatbuf_r+0x1e>
 8008ed0:	2340      	movs	r3, #64	; 0x40
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	b016      	add	sp, #88	; 0x58
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008edc <__smakebuf_r>:
 8008edc:	898b      	ldrh	r3, [r1, #12]
 8008ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ee0:	079d      	lsls	r5, r3, #30
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	d507      	bpl.n	8008ef8 <__smakebuf_r+0x1c>
 8008ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	6163      	str	r3, [r4, #20]
 8008ef4:	b002      	add	sp, #8
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	466a      	mov	r2, sp
 8008efa:	ab01      	add	r3, sp, #4
 8008efc:	f7ff ffc8 	bl	8008e90 <__swhatbuf_r>
 8008f00:	9900      	ldr	r1, [sp, #0]
 8008f02:	4605      	mov	r5, r0
 8008f04:	4630      	mov	r0, r6
 8008f06:	f000 f89f 	bl	8009048 <_malloc_r>
 8008f0a:	b948      	cbnz	r0, 8008f20 <__smakebuf_r+0x44>
 8008f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f10:	059a      	lsls	r2, r3, #22
 8008f12:	d4ef      	bmi.n	8008ef4 <__smakebuf_r+0x18>
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	f043 0302 	orr.w	r3, r3, #2
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	e7e3      	b.n	8008ee8 <__smakebuf_r+0xc>
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <__smakebuf_r+0x7c>)
 8008f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	6020      	str	r0, [r4, #0]
 8008f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	6120      	str	r0, [r4, #16]
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	b15b      	cbz	r3, 8008f50 <__smakebuf_r+0x74>
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f3e:	f000 f9c3 	bl	80092c8 <_isatty_r>
 8008f42:	b128      	cbz	r0, 8008f50 <__smakebuf_r+0x74>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	89a0      	ldrh	r0, [r4, #12]
 8008f52:	4305      	orrs	r5, r0
 8008f54:	81a5      	strh	r5, [r4, #12]
 8008f56:	e7cd      	b.n	8008ef4 <__smakebuf_r+0x18>
 8008f58:	08008ce9 	.word	0x08008ce9

08008f5c <memchr>:
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	b2c9      	uxtb	r1, r1
 8008f62:	4402      	add	r2, r0
 8008f64:	4293      	cmp	r3, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	d101      	bne.n	8008f6e <memchr+0x12>
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	e003      	b.n	8008f76 <memchr+0x1a>
 8008f6e:	7804      	ldrb	r4, [r0, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	428c      	cmp	r4, r1
 8008f74:	d1f6      	bne.n	8008f64 <memchr+0x8>
 8008f76:	bd10      	pop	{r4, pc}

08008f78 <_free_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	2900      	cmp	r1, #0
 8008f7e:	d040      	beq.n	8009002 <_free_r+0x8a>
 8008f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f84:	1f0c      	subs	r4, r1, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfb8      	it	lt
 8008f8a:	18e4      	addlt	r4, r4, r3
 8008f8c:	f000 f9be 	bl	800930c <__malloc_lock>
 8008f90:	4a1c      	ldr	r2, [pc, #112]	; (8009004 <_free_r+0x8c>)
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	b933      	cbnz	r3, 8008fa4 <_free_r+0x2c>
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fa0:	f000 b9ba 	b.w	8009318 <__malloc_unlock>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d908      	bls.n	8008fba <_free_r+0x42>
 8008fa8:	6820      	ldr	r0, [r4, #0]
 8008faa:	1821      	adds	r1, r4, r0
 8008fac:	428b      	cmp	r3, r1
 8008fae:	bf01      	itttt	eq
 8008fb0:	6819      	ldreq	r1, [r3, #0]
 8008fb2:	685b      	ldreq	r3, [r3, #4]
 8008fb4:	1809      	addeq	r1, r1, r0
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	e7ed      	b.n	8008f96 <_free_r+0x1e>
 8008fba:	461a      	mov	r2, r3
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_free_r+0x4c>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d9fa      	bls.n	8008fba <_free_r+0x42>
 8008fc4:	6811      	ldr	r1, [r2, #0]
 8008fc6:	1850      	adds	r0, r2, r1
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d10b      	bne.n	8008fe4 <_free_r+0x6c>
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	4401      	add	r1, r0
 8008fd0:	1850      	adds	r0, r2, r1
 8008fd2:	4283      	cmp	r3, r0
 8008fd4:	6011      	str	r1, [r2, #0]
 8008fd6:	d1e0      	bne.n	8008f9a <_free_r+0x22>
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	4401      	add	r1, r0
 8008fde:	6011      	str	r1, [r2, #0]
 8008fe0:	6053      	str	r3, [r2, #4]
 8008fe2:	e7da      	b.n	8008f9a <_free_r+0x22>
 8008fe4:	d902      	bls.n	8008fec <_free_r+0x74>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	e7d6      	b.n	8008f9a <_free_r+0x22>
 8008fec:	6820      	ldr	r0, [r4, #0]
 8008fee:	1821      	adds	r1, r4, r0
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf01      	itttt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	1809      	addeq	r1, r1, r0
 8008ffa:	6021      	streq	r1, [r4, #0]
 8008ffc:	6063      	str	r3, [r4, #4]
 8008ffe:	6054      	str	r4, [r2, #4]
 8009000:	e7cb      	b.n	8008f9a <_free_r+0x22>
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000de8 	.word	0x20000de8

08009008 <sbrk_aligned>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4e0e      	ldr	r6, [pc, #56]	; (8009044 <sbrk_aligned+0x3c>)
 800900c:	460c      	mov	r4, r1
 800900e:	6831      	ldr	r1, [r6, #0]
 8009010:	4605      	mov	r5, r0
 8009012:	b911      	cbnz	r1, 800901a <sbrk_aligned+0x12>
 8009014:	f000 f88c 	bl	8009130 <_sbrk_r>
 8009018:	6030      	str	r0, [r6, #0]
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f000 f887 	bl	8009130 <_sbrk_r>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d00a      	beq.n	800903c <sbrk_aligned+0x34>
 8009026:	1cc4      	adds	r4, r0, #3
 8009028:	f024 0403 	bic.w	r4, r4, #3
 800902c:	42a0      	cmp	r0, r4
 800902e:	d007      	beq.n	8009040 <sbrk_aligned+0x38>
 8009030:	1a21      	subs	r1, r4, r0
 8009032:	4628      	mov	r0, r5
 8009034:	f000 f87c 	bl	8009130 <_sbrk_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d101      	bne.n	8009040 <sbrk_aligned+0x38>
 800903c:	f04f 34ff 	mov.w	r4, #4294967295
 8009040:	4620      	mov	r0, r4
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	20000dec 	.word	0x20000dec

08009048 <_malloc_r>:
 8009048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904c:	1ccd      	adds	r5, r1, #3
 800904e:	f025 0503 	bic.w	r5, r5, #3
 8009052:	3508      	adds	r5, #8
 8009054:	2d0c      	cmp	r5, #12
 8009056:	bf38      	it	cc
 8009058:	250c      	movcc	r5, #12
 800905a:	2d00      	cmp	r5, #0
 800905c:	4607      	mov	r7, r0
 800905e:	db01      	blt.n	8009064 <_malloc_r+0x1c>
 8009060:	42a9      	cmp	r1, r5
 8009062:	d905      	bls.n	8009070 <_malloc_r+0x28>
 8009064:	230c      	movs	r3, #12
 8009066:	2600      	movs	r6, #0
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4630      	mov	r0, r6
 800906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009070:	4e2e      	ldr	r6, [pc, #184]	; (800912c <_malloc_r+0xe4>)
 8009072:	f000 f94b 	bl	800930c <__malloc_lock>
 8009076:	6833      	ldr	r3, [r6, #0]
 8009078:	461c      	mov	r4, r3
 800907a:	bb34      	cbnz	r4, 80090ca <_malloc_r+0x82>
 800907c:	4629      	mov	r1, r5
 800907e:	4638      	mov	r0, r7
 8009080:	f7ff ffc2 	bl	8009008 <sbrk_aligned>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	4604      	mov	r4, r0
 8009088:	d14d      	bne.n	8009126 <_malloc_r+0xde>
 800908a:	6834      	ldr	r4, [r6, #0]
 800908c:	4626      	mov	r6, r4
 800908e:	2e00      	cmp	r6, #0
 8009090:	d140      	bne.n	8009114 <_malloc_r+0xcc>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	4631      	mov	r1, r6
 8009096:	4638      	mov	r0, r7
 8009098:	eb04 0803 	add.w	r8, r4, r3
 800909c:	f000 f848 	bl	8009130 <_sbrk_r>
 80090a0:	4580      	cmp	r8, r0
 80090a2:	d13a      	bne.n	800911a <_malloc_r+0xd2>
 80090a4:	6821      	ldr	r1, [r4, #0]
 80090a6:	3503      	adds	r5, #3
 80090a8:	1a6d      	subs	r5, r5, r1
 80090aa:	f025 0503 	bic.w	r5, r5, #3
 80090ae:	3508      	adds	r5, #8
 80090b0:	2d0c      	cmp	r5, #12
 80090b2:	bf38      	it	cc
 80090b4:	250c      	movcc	r5, #12
 80090b6:	4638      	mov	r0, r7
 80090b8:	4629      	mov	r1, r5
 80090ba:	f7ff ffa5 	bl	8009008 <sbrk_aligned>
 80090be:	3001      	adds	r0, #1
 80090c0:	d02b      	beq.n	800911a <_malloc_r+0xd2>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	442b      	add	r3, r5
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	e00e      	b.n	80090e8 <_malloc_r+0xa0>
 80090ca:	6822      	ldr	r2, [r4, #0]
 80090cc:	1b52      	subs	r2, r2, r5
 80090ce:	d41e      	bmi.n	800910e <_malloc_r+0xc6>
 80090d0:	2a0b      	cmp	r2, #11
 80090d2:	d916      	bls.n	8009102 <_malloc_r+0xba>
 80090d4:	1961      	adds	r1, r4, r5
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	6025      	str	r5, [r4, #0]
 80090da:	bf18      	it	ne
 80090dc:	6059      	strne	r1, [r3, #4]
 80090de:	6863      	ldr	r3, [r4, #4]
 80090e0:	bf08      	it	eq
 80090e2:	6031      	streq	r1, [r6, #0]
 80090e4:	5162      	str	r2, [r4, r5]
 80090e6:	604b      	str	r3, [r1, #4]
 80090e8:	4638      	mov	r0, r7
 80090ea:	f104 060b 	add.w	r6, r4, #11
 80090ee:	f000 f913 	bl	8009318 <__malloc_unlock>
 80090f2:	f026 0607 	bic.w	r6, r6, #7
 80090f6:	1d23      	adds	r3, r4, #4
 80090f8:	1af2      	subs	r2, r6, r3
 80090fa:	d0b6      	beq.n	800906a <_malloc_r+0x22>
 80090fc:	1b9b      	subs	r3, r3, r6
 80090fe:	50a3      	str	r3, [r4, r2]
 8009100:	e7b3      	b.n	800906a <_malloc_r+0x22>
 8009102:	6862      	ldr	r2, [r4, #4]
 8009104:	42a3      	cmp	r3, r4
 8009106:	bf0c      	ite	eq
 8009108:	6032      	streq	r2, [r6, #0]
 800910a:	605a      	strne	r2, [r3, #4]
 800910c:	e7ec      	b.n	80090e8 <_malloc_r+0xa0>
 800910e:	4623      	mov	r3, r4
 8009110:	6864      	ldr	r4, [r4, #4]
 8009112:	e7b2      	b.n	800907a <_malloc_r+0x32>
 8009114:	4634      	mov	r4, r6
 8009116:	6876      	ldr	r6, [r6, #4]
 8009118:	e7b9      	b.n	800908e <_malloc_r+0x46>
 800911a:	230c      	movs	r3, #12
 800911c:	4638      	mov	r0, r7
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	f000 f8fa 	bl	8009318 <__malloc_unlock>
 8009124:	e7a1      	b.n	800906a <_malloc_r+0x22>
 8009126:	6025      	str	r5, [r4, #0]
 8009128:	e7de      	b.n	80090e8 <_malloc_r+0xa0>
 800912a:	bf00      	nop
 800912c:	20000de8 	.word	0x20000de8

08009130 <_sbrk_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	2300      	movs	r3, #0
 8009134:	4d05      	ldr	r5, [pc, #20]	; (800914c <_sbrk_r+0x1c>)
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	f7fb f856 	bl	80041ec <_sbrk>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_sbrk_r+0x1a>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_sbrk_r+0x1a>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20000df0 	.word	0x20000df0

08009150 <_raise_r>:
 8009150:	291f      	cmp	r1, #31
 8009152:	b538      	push	{r3, r4, r5, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	460d      	mov	r5, r1
 8009158:	d904      	bls.n	8009164 <_raise_r+0x14>
 800915a:	2316      	movs	r3, #22
 800915c:	6003      	str	r3, [r0, #0]
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009166:	b112      	cbz	r2, 800916e <_raise_r+0x1e>
 8009168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800916c:	b94b      	cbnz	r3, 8009182 <_raise_r+0x32>
 800916e:	4620      	mov	r0, r4
 8009170:	f000 f830 	bl	80091d4 <_getpid_r>
 8009174:	462a      	mov	r2, r5
 8009176:	4601      	mov	r1, r0
 8009178:	4620      	mov	r0, r4
 800917a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917e:	f000 b817 	b.w	80091b0 <_kill_r>
 8009182:	2b01      	cmp	r3, #1
 8009184:	d00a      	beq.n	800919c <_raise_r+0x4c>
 8009186:	1c59      	adds	r1, r3, #1
 8009188:	d103      	bne.n	8009192 <_raise_r+0x42>
 800918a:	2316      	movs	r3, #22
 800918c:	6003      	str	r3, [r0, #0]
 800918e:	2001      	movs	r0, #1
 8009190:	e7e7      	b.n	8009162 <_raise_r+0x12>
 8009192:	2400      	movs	r4, #0
 8009194:	4628      	mov	r0, r5
 8009196:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800919a:	4798      	blx	r3
 800919c:	2000      	movs	r0, #0
 800919e:	e7e0      	b.n	8009162 <_raise_r+0x12>

080091a0 <raise>:
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <raise+0xc>)
 80091a2:	4601      	mov	r1, r0
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	f7ff bfd3 	b.w	8009150 <_raise_r>
 80091aa:	bf00      	nop
 80091ac:	20000010 	.word	0x20000010

080091b0 <_kill_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	2300      	movs	r3, #0
 80091b4:	4d06      	ldr	r5, [pc, #24]	; (80091d0 <_kill_r+0x20>)
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	4611      	mov	r1, r2
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	f7fa ff92 	bl	80040e6 <_kill>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d102      	bne.n	80091cc <_kill_r+0x1c>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	b103      	cbz	r3, 80091cc <_kill_r+0x1c>
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000df0 	.word	0x20000df0

080091d4 <_getpid_r>:
 80091d4:	f7fa bf80 	b.w	80040d8 <_getpid>

080091d8 <__sread>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	460c      	mov	r4, r1
 80091dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e0:	f000 f8a0 	bl	8009324 <_read_r>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	bfab      	itete	ge
 80091e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ea:	89a3      	ldrhlt	r3, [r4, #12]
 80091ec:	181b      	addge	r3, r3, r0
 80091ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f2:	bfac      	ite	ge
 80091f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091f6:	81a3      	strhlt	r3, [r4, #12]
 80091f8:	bd10      	pop	{r4, pc}

080091fa <__swrite>:
 80091fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fe:	461f      	mov	r7, r3
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	4605      	mov	r5, r0
 8009204:	05db      	lsls	r3, r3, #23
 8009206:	460c      	mov	r4, r1
 8009208:	4616      	mov	r6, r2
 800920a:	d505      	bpl.n	8009218 <__swrite+0x1e>
 800920c:	2302      	movs	r3, #2
 800920e:	2200      	movs	r2, #0
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	f000 f868 	bl	80092e8 <_lseek_r>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	4632      	mov	r2, r6
 800921c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	4628      	mov	r0, r5
 8009224:	463b      	mov	r3, r7
 8009226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800922a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	f000 b817 	b.w	8009260 <_write_r>

08009232 <__sseek>:
 8009232:	b510      	push	{r4, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923a:	f000 f855 	bl	80092e8 <_lseek_r>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	bf15      	itete	ne
 8009244:	6560      	strne	r0, [r4, #84]	; 0x54
 8009246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800924e:	81a3      	strheq	r3, [r4, #12]
 8009250:	bf18      	it	ne
 8009252:	81a3      	strhne	r3, [r4, #12]
 8009254:	bd10      	pop	{r4, pc}

08009256 <__sclose>:
 8009256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925a:	f000 b813 	b.w	8009284 <_close_r>
	...

08009260 <_write_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	2200      	movs	r2, #0
 800926a:	4d05      	ldr	r5, [pc, #20]	; (8009280 <_write_r+0x20>)
 800926c:	602a      	str	r2, [r5, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f7fa ff70 	bl	8004154 <_write>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_write_r+0x1e>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_write_r+0x1e>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20000df0 	.word	0x20000df0

08009284 <_close_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	2300      	movs	r3, #0
 8009288:	4d05      	ldr	r5, [pc, #20]	; (80092a0 <_close_r+0x1c>)
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	f7fa ff7c 	bl	800418c <_close>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_close_r+0x1a>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_close_r+0x1a>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	20000df0 	.word	0x20000df0

080092a4 <_fstat_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	2300      	movs	r3, #0
 80092a8:	4d06      	ldr	r5, [pc, #24]	; (80092c4 <_fstat_r+0x20>)
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f7fa ff76 	bl	80041a2 <_fstat>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d102      	bne.n	80092c0 <_fstat_r+0x1c>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	b103      	cbz	r3, 80092c0 <_fstat_r+0x1c>
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	bd38      	pop	{r3, r4, r5, pc}
 80092c2:	bf00      	nop
 80092c4:	20000df0 	.word	0x20000df0

080092c8 <_isatty_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	2300      	movs	r3, #0
 80092cc:	4d05      	ldr	r5, [pc, #20]	; (80092e4 <_isatty_r+0x1c>)
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7fa ff74 	bl	80041c0 <_isatty>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_isatty_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_isatty_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20000df0 	.word	0x20000df0

080092e8 <_lseek_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	2200      	movs	r2, #0
 80092f2:	4d05      	ldr	r5, [pc, #20]	; (8009308 <_lseek_r+0x20>)
 80092f4:	602a      	str	r2, [r5, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	f7fa ff6c 	bl	80041d4 <_lseek>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_lseek_r+0x1e>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_lseek_r+0x1e>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	20000df0 	.word	0x20000df0

0800930c <__malloc_lock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_lock+0x8>)
 800930e:	f7ff bdbd 	b.w	8008e8c <__retarget_lock_acquire_recursive>
 8009312:	bf00      	nop
 8009314:	20000de4 	.word	0x20000de4

08009318 <__malloc_unlock>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__malloc_unlock+0x8>)
 800931a:	f7ff bdb8 	b.w	8008e8e <__retarget_lock_release_recursive>
 800931e:	bf00      	nop
 8009320:	20000de4 	.word	0x20000de4

08009324 <_read_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	2200      	movs	r2, #0
 800932e:	4d05      	ldr	r5, [pc, #20]	; (8009344 <_read_r+0x20>)
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f7fa fef1 	bl	800411a <_read>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_read_r+0x1e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_read_r+0x1e>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	20000df0 	.word	0x20000df0

08009348 <cos>:
 8009348:	b530      	push	{r4, r5, lr}
 800934a:	4a20      	ldr	r2, [pc, #128]	; (80093cc <cos+0x84>)
 800934c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009350:	4293      	cmp	r3, r2
 8009352:	b087      	sub	sp, #28
 8009354:	dc06      	bgt.n	8009364 <cos+0x1c>
 8009356:	2200      	movs	r2, #0
 8009358:	2300      	movs	r3, #0
 800935a:	b007      	add	sp, #28
 800935c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009360:	f000 baea 	b.w	8009938 <__kernel_cos>
 8009364:	4a1a      	ldr	r2, [pc, #104]	; (80093d0 <cos+0x88>)
 8009366:	4293      	cmp	r3, r2
 8009368:	dd05      	ble.n	8009376 <cos+0x2e>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	f7f6 ff5f 	bl	8000230 <__aeabi_dsub>
 8009372:	b007      	add	sp, #28
 8009374:	bd30      	pop	{r4, r5, pc}
 8009376:	aa02      	add	r2, sp, #8
 8009378:	f000 f8e6 	bl	8009548 <__ieee754_rem_pio2>
 800937c:	f000 0003 	and.w	r0, r0, #3
 8009380:	2801      	cmp	r0, #1
 8009382:	d009      	beq.n	8009398 <cos+0x50>
 8009384:	2802      	cmp	r0, #2
 8009386:	d011      	beq.n	80093ac <cos+0x64>
 8009388:	b9b8      	cbnz	r0, 80093ba <cos+0x72>
 800938a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800938e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009392:	f000 fad1 	bl	8009938 <__kernel_cos>
 8009396:	e7ec      	b.n	8009372 <cos+0x2a>
 8009398:	9000      	str	r0, [sp, #0]
 800939a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800939e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a2:	f000 fec9 	bl	800a138 <__kernel_sin>
 80093a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80093aa:	e7e2      	b.n	8009372 <cos+0x2a>
 80093ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b4:	f000 fac0 	bl	8009938 <__kernel_cos>
 80093b8:	e7f5      	b.n	80093a6 <cos+0x5e>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093c6:	f000 feb7 	bl	800a138 <__kernel_sin>
 80093ca:	e7d2      	b.n	8009372 <cos+0x2a>
 80093cc:	3fe921fb 	.word	0x3fe921fb
 80093d0:	7fefffff 	.word	0x7fefffff

080093d4 <fabs>:
 80093d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80093d8:	4770      	bx	lr
	...

080093dc <round>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80093e2:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80093e6:	2c13      	cmp	r4, #19
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4606      	mov	r6, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	dc19      	bgt.n	8009426 <round+0x4a>
 80093f2:	2c00      	cmp	r4, #0
 80093f4:	da09      	bge.n	800940a <round+0x2e>
 80093f6:	3401      	adds	r4, #1
 80093f8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80093fc:	d103      	bne.n	8009406 <round+0x2a>
 80093fe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009406:	2200      	movs	r2, #0
 8009408:	e02a      	b.n	8009460 <round+0x84>
 800940a:	4917      	ldr	r1, [pc, #92]	; (8009468 <round+0x8c>)
 800940c:	4121      	asrs	r1, r4
 800940e:	ea03 0001 	and.w	r0, r3, r1
 8009412:	4302      	orrs	r2, r0
 8009414:	d010      	beq.n	8009438 <round+0x5c>
 8009416:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800941a:	fa42 f404 	asr.w	r4, r2, r4
 800941e:	4423      	add	r3, r4
 8009420:	ea23 0301 	bic.w	r3, r3, r1
 8009424:	e7ef      	b.n	8009406 <round+0x2a>
 8009426:	2c33      	cmp	r4, #51	; 0x33
 8009428:	dd09      	ble.n	800943e <round+0x62>
 800942a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800942e:	d103      	bne.n	8009438 <round+0x5c>
 8009430:	f7f6 ff00 	bl	8000234 <__adddf3>
 8009434:	4606      	mov	r6, r0
 8009436:	460d      	mov	r5, r1
 8009438:	4630      	mov	r0, r6
 800943a:	4629      	mov	r1, r5
 800943c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943e:	f04f 31ff 	mov.w	r1, #4294967295
 8009442:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009446:	40f9      	lsrs	r1, r7
 8009448:	4208      	tst	r0, r1
 800944a:	d0f5      	beq.n	8009438 <round+0x5c>
 800944c:	2001      	movs	r0, #1
 800944e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009452:	fa00 f404 	lsl.w	r4, r0, r4
 8009456:	1912      	adds	r2, r2, r4
 8009458:	bf28      	it	cs
 800945a:	181b      	addcs	r3, r3, r0
 800945c:	ea22 0201 	bic.w	r2, r2, r1
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	e7e6      	b.n	8009434 <round+0x58>
 8009466:	bf00      	nop
 8009468:	000fffff 	.word	0x000fffff

0800946c <sin>:
 800946c:	b530      	push	{r4, r5, lr}
 800946e:	4a20      	ldr	r2, [pc, #128]	; (80094f0 <sin+0x84>)
 8009470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009474:	4293      	cmp	r3, r2
 8009476:	b087      	sub	sp, #28
 8009478:	dc06      	bgt.n	8009488 <sin+0x1c>
 800947a:	2300      	movs	r3, #0
 800947c:	2200      	movs	r2, #0
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	2300      	movs	r3, #0
 8009482:	f000 fe59 	bl	800a138 <__kernel_sin>
 8009486:	e006      	b.n	8009496 <sin+0x2a>
 8009488:	4a1a      	ldr	r2, [pc, #104]	; (80094f4 <sin+0x88>)
 800948a:	4293      	cmp	r3, r2
 800948c:	dd05      	ble.n	800949a <sin+0x2e>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	f7f6 fecd 	bl	8000230 <__aeabi_dsub>
 8009496:	b007      	add	sp, #28
 8009498:	bd30      	pop	{r4, r5, pc}
 800949a:	aa02      	add	r2, sp, #8
 800949c:	f000 f854 	bl	8009548 <__ieee754_rem_pio2>
 80094a0:	f000 0003 	and.w	r0, r0, #3
 80094a4:	2801      	cmp	r0, #1
 80094a6:	d009      	beq.n	80094bc <sin+0x50>
 80094a8:	2802      	cmp	r0, #2
 80094aa:	d00e      	beq.n	80094ca <sin+0x5e>
 80094ac:	b9c0      	cbnz	r0, 80094e0 <sin+0x74>
 80094ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b2:	2301      	movs	r3, #1
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ba:	e7e2      	b.n	8009482 <sin+0x16>
 80094bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c4:	f000 fa38 	bl	8009938 <__kernel_cos>
 80094c8:	e7e5      	b.n	8009496 <sin+0x2a>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094d6:	f000 fe2f 	bl	800a138 <__kernel_sin>
 80094da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80094de:	e7da      	b.n	8009496 <sin+0x2a>
 80094e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e8:	f000 fa26 	bl	8009938 <__kernel_cos>
 80094ec:	e7f5      	b.n	80094da <sin+0x6e>
 80094ee:	bf00      	nop
 80094f0:	3fe921fb 	.word	0x3fe921fb
 80094f4:	7fefffff 	.word	0x7fefffff

080094f8 <roundf>:
 80094f8:	b508      	push	{r3, lr}
 80094fa:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80094fe:	3b7f      	subs	r3, #127	; 0x7f
 8009500:	2b16      	cmp	r3, #22
 8009502:	4601      	mov	r1, r0
 8009504:	4602      	mov	r2, r0
 8009506:	dc14      	bgt.n	8009532 <roundf+0x3a>
 8009508:	2b00      	cmp	r3, #0
 800950a:	da07      	bge.n	800951c <roundf+0x24>
 800950c:	3301      	adds	r3, #1
 800950e:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8009512:	d101      	bne.n	8009518 <roundf+0x20>
 8009514:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8009518:	4608      	mov	r0, r1
 800951a:	bd08      	pop	{r3, pc}
 800951c:	4808      	ldr	r0, [pc, #32]	; (8009540 <roundf+0x48>)
 800951e:	4118      	asrs	r0, r3
 8009520:	4201      	tst	r1, r0
 8009522:	d0f9      	beq.n	8009518 <roundf+0x20>
 8009524:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009528:	4119      	asrs	r1, r3
 800952a:	4411      	add	r1, r2
 800952c:	ea21 0100 	bic.w	r1, r1, r0
 8009530:	e7f2      	b.n	8009518 <roundf+0x20>
 8009532:	2b80      	cmp	r3, #128	; 0x80
 8009534:	d1f0      	bne.n	8009518 <roundf+0x20>
 8009536:	f7f7 fb6b 	bl	8000c10 <__addsf3>
 800953a:	4601      	mov	r1, r0
 800953c:	e7ec      	b.n	8009518 <roundf+0x20>
 800953e:	bf00      	nop
 8009540:	007fffff 	.word	0x007fffff
 8009544:	00000000 	.word	0x00000000

08009548 <__ieee754_rem_pio2>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	4614      	mov	r4, r2
 800954e:	4ac4      	ldr	r2, [pc, #784]	; (8009860 <__ieee754_rem_pio2+0x318>)
 8009550:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009554:	b08d      	sub	sp, #52	; 0x34
 8009556:	4592      	cmp	sl, r2
 8009558:	9104      	str	r1, [sp, #16]
 800955a:	dc07      	bgt.n	800956c <__ieee754_rem_pio2+0x24>
 800955c:	2200      	movs	r2, #0
 800955e:	2300      	movs	r3, #0
 8009560:	e9c4 0100 	strd	r0, r1, [r4]
 8009564:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009568:	2500      	movs	r5, #0
 800956a:	e024      	b.n	80095b6 <__ieee754_rem_pio2+0x6e>
 800956c:	4abd      	ldr	r2, [pc, #756]	; (8009864 <__ieee754_rem_pio2+0x31c>)
 800956e:	4592      	cmp	sl, r2
 8009570:	dc72      	bgt.n	8009658 <__ieee754_rem_pio2+0x110>
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	4dbc      	ldr	r5, [pc, #752]	; (8009868 <__ieee754_rem_pio2+0x320>)
 8009576:	2b00      	cmp	r3, #0
 8009578:	a3ab      	add	r3, pc, #684	; (adr r3, 8009828 <__ieee754_rem_pio2+0x2e0>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	dd36      	ble.n	80095ee <__ieee754_rem_pio2+0xa6>
 8009580:	f7f6 fe56 	bl	8000230 <__aeabi_dsub>
 8009584:	45aa      	cmp	sl, r5
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	d018      	beq.n	80095be <__ieee754_rem_pio2+0x76>
 800958c:	a3a8      	add	r3, pc, #672	; (adr r3, 8009830 <__ieee754_rem_pio2+0x2e8>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f7f6 fe4d 	bl	8000230 <__aeabi_dsub>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4630      	mov	r0, r6
 800959c:	e9c4 2300 	strd	r2, r3, [r4]
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f6 fe45 	bl	8000230 <__aeabi_dsub>
 80095a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8009830 <__ieee754_rem_pio2+0x2e8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe40 	bl	8000230 <__aeabi_dsub>
 80095b0:	2501      	movs	r5, #1
 80095b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80095b6:	4628      	mov	r0, r5
 80095b8:	b00d      	add	sp, #52	; 0x34
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	a39e      	add	r3, pc, #632	; (adr r3, 8009838 <__ieee754_rem_pio2+0x2f0>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	f7f6 fe34 	bl	8000230 <__aeabi_dsub>
 80095c8:	a39d      	add	r3, pc, #628	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2f8>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	4606      	mov	r6, r0
 80095d0:	460f      	mov	r7, r1
 80095d2:	f7f6 fe2d 	bl	8000230 <__aeabi_dsub>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4630      	mov	r0, r6
 80095dc:	e9c4 2300 	strd	r2, r3, [r4]
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f6 fe25 	bl	8000230 <__aeabi_dsub>
 80095e6:	a396      	add	r3, pc, #600	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2f8>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	e7de      	b.n	80095ac <__ieee754_rem_pio2+0x64>
 80095ee:	f7f6 fe21 	bl	8000234 <__adddf3>
 80095f2:	45aa      	cmp	sl, r5
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	d016      	beq.n	8009628 <__ieee754_rem_pio2+0xe0>
 80095fa:	a38d      	add	r3, pc, #564	; (adr r3, 8009830 <__ieee754_rem_pio2+0x2e8>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fe18 	bl	8000234 <__adddf3>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4630      	mov	r0, r6
 800960a:	e9c4 2300 	strd	r2, r3, [r4]
 800960e:	4639      	mov	r1, r7
 8009610:	f7f6 fe0e 	bl	8000230 <__aeabi_dsub>
 8009614:	a386      	add	r3, pc, #536	; (adr r3, 8009830 <__ieee754_rem_pio2+0x2e8>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe0b 	bl	8000234 <__adddf3>
 800961e:	f04f 35ff 	mov.w	r5, #4294967295
 8009622:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009626:	e7c6      	b.n	80095b6 <__ieee754_rem_pio2+0x6e>
 8009628:	a383      	add	r3, pc, #524	; (adr r3, 8009838 <__ieee754_rem_pio2+0x2f0>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f6 fe01 	bl	8000234 <__adddf3>
 8009632:	a383      	add	r3, pc, #524	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2f8>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	4606      	mov	r6, r0
 800963a:	460f      	mov	r7, r1
 800963c:	f7f6 fdfa 	bl	8000234 <__adddf3>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	e9c4 2300 	strd	r2, r3, [r4]
 800964a:	4639      	mov	r1, r7
 800964c:	f7f6 fdf0 	bl	8000230 <__aeabi_dsub>
 8009650:	a37b      	add	r3, pc, #492	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2f8>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	e7e0      	b.n	800961a <__ieee754_rem_pio2+0xd2>
 8009658:	4a84      	ldr	r2, [pc, #528]	; (800986c <__ieee754_rem_pio2+0x324>)
 800965a:	4592      	cmp	sl, r2
 800965c:	f300 80d5 	bgt.w	800980a <__ieee754_rem_pio2+0x2c2>
 8009660:	f7ff feb8 	bl	80093d4 <fabs>
 8009664:	a378      	add	r3, pc, #480	; (adr r3, 8009848 <__ieee754_rem_pio2+0x300>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	f7f6 ff97 	bl	80005a0 <__aeabi_dmul>
 8009672:	2200      	movs	r2, #0
 8009674:	4b7e      	ldr	r3, [pc, #504]	; (8009870 <__ieee754_rem_pio2+0x328>)
 8009676:	f7f6 fddd 	bl	8000234 <__adddf3>
 800967a:	f7f7 fa2b 	bl	8000ad4 <__aeabi_d2iz>
 800967e:	4605      	mov	r5, r0
 8009680:	f7f6 ff24 	bl	80004cc <__aeabi_i2d>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800968c:	a366      	add	r3, pc, #408	; (adr r3, 8009828 <__ieee754_rem_pio2+0x2e0>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f7f6 ff85 	bl	80005a0 <__aeabi_dmul>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4630      	mov	r0, r6
 800969c:	4639      	mov	r1, r7
 800969e:	f7f6 fdc7 	bl	8000230 <__aeabi_dsub>
 80096a2:	a363      	add	r3, pc, #396	; (adr r3, 8009830 <__ieee754_rem_pio2+0x2e8>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
 80096ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096b0:	f7f6 ff76 	bl	80005a0 <__aeabi_dmul>
 80096b4:	2d1f      	cmp	r5, #31
 80096b6:	4606      	mov	r6, r0
 80096b8:	460f      	mov	r7, r1
 80096ba:	dc0e      	bgt.n	80096da <__ieee754_rem_pio2+0x192>
 80096bc:	4b6d      	ldr	r3, [pc, #436]	; (8009874 <__ieee754_rem_pio2+0x32c>)
 80096be:	1e6a      	subs	r2, r5, #1
 80096c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c4:	4553      	cmp	r3, sl
 80096c6:	d008      	beq.n	80096da <__ieee754_rem_pio2+0x192>
 80096c8:	4632      	mov	r2, r6
 80096ca:	463b      	mov	r3, r7
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7f6 fdae 	bl	8000230 <__aeabi_dsub>
 80096d4:	e9c4 0100 	strd	r0, r1, [r4]
 80096d8:	e013      	b.n	8009702 <__ieee754_rem_pio2+0x1ba>
 80096da:	463b      	mov	r3, r7
 80096dc:	4632      	mov	r2, r6
 80096de:	4640      	mov	r0, r8
 80096e0:	4649      	mov	r1, r9
 80096e2:	f7f6 fda5 	bl	8000230 <__aeabi_dsub>
 80096e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80096f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80096f4:	f1ba 0f10 	cmp.w	sl, #16
 80096f8:	dc1f      	bgt.n	800973a <__ieee754_rem_pio2+0x1f2>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	e9c4 2300 	strd	r2, r3, [r4]
 8009702:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009706:	4640      	mov	r0, r8
 8009708:	4653      	mov	r3, sl
 800970a:	4649      	mov	r1, r9
 800970c:	f7f6 fd90 	bl	8000230 <__aeabi_dsub>
 8009710:	4632      	mov	r2, r6
 8009712:	463b      	mov	r3, r7
 8009714:	f7f6 fd8c 	bl	8000230 <__aeabi_dsub>
 8009718:	460b      	mov	r3, r1
 800971a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800971e:	9904      	ldr	r1, [sp, #16]
 8009720:	4602      	mov	r2, r0
 8009722:	2900      	cmp	r1, #0
 8009724:	f6bf af47 	bge.w	80095b6 <__ieee754_rem_pio2+0x6e>
 8009728:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800972c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009730:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009734:	60e3      	str	r3, [r4, #12]
 8009736:	426d      	negs	r5, r5
 8009738:	e73d      	b.n	80095b6 <__ieee754_rem_pio2+0x6e>
 800973a:	a33f      	add	r3, pc, #252	; (adr r3, 8009838 <__ieee754_rem_pio2+0x2f0>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009744:	f7f6 ff2c 	bl	80005a0 <__aeabi_dmul>
 8009748:	4606      	mov	r6, r0
 800974a:	460f      	mov	r7, r1
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f6 fd6c 	bl	8000230 <__aeabi_dsub>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4682      	mov	sl, r0
 800975e:	468b      	mov	fp, r1
 8009760:	4640      	mov	r0, r8
 8009762:	4649      	mov	r1, r9
 8009764:	f7f6 fd64 	bl	8000230 <__aeabi_dsub>
 8009768:	4632      	mov	r2, r6
 800976a:	463b      	mov	r3, r7
 800976c:	f7f6 fd60 	bl	8000230 <__aeabi_dsub>
 8009770:	a333      	add	r3, pc, #204	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2f8>)
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977e:	f7f6 ff0f 	bl	80005a0 <__aeabi_dmul>
 8009782:	4632      	mov	r2, r6
 8009784:	463b      	mov	r3, r7
 8009786:	f7f6 fd53 	bl	8000230 <__aeabi_dsub>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4606      	mov	r6, r0
 8009790:	460f      	mov	r7, r1
 8009792:	4650      	mov	r0, sl
 8009794:	4659      	mov	r1, fp
 8009796:	f7f6 fd4b 	bl	8000230 <__aeabi_dsub>
 800979a:	9a05      	ldr	r2, [sp, #20]
 800979c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b31      	cmp	r3, #49	; 0x31
 80097a4:	dc06      	bgt.n	80097b4 <__ieee754_rem_pio2+0x26c>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	46d0      	mov	r8, sl
 80097ac:	46d9      	mov	r9, fp
 80097ae:	e9c4 2300 	strd	r2, r3, [r4]
 80097b2:	e7a6      	b.n	8009702 <__ieee754_rem_pio2+0x1ba>
 80097b4:	a326      	add	r3, pc, #152	; (adr r3, 8009850 <__ieee754_rem_pio2+0x308>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097be:	f7f6 feef 	bl	80005a0 <__aeabi_dmul>
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	f7f6 fd2f 	bl	8000230 <__aeabi_dsub>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4680      	mov	r8, r0
 80097d8:	4689      	mov	r9, r1
 80097da:	4650      	mov	r0, sl
 80097dc:	4659      	mov	r1, fp
 80097de:	f7f6 fd27 	bl	8000230 <__aeabi_dsub>
 80097e2:	4632      	mov	r2, r6
 80097e4:	463b      	mov	r3, r7
 80097e6:	f7f6 fd23 	bl	8000230 <__aeabi_dsub>
 80097ea:	a31b      	add	r3, pc, #108	; (adr r3, 8009858 <__ieee754_rem_pio2+0x310>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	4606      	mov	r6, r0
 80097f2:	460f      	mov	r7, r1
 80097f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f8:	f7f6 fed2 	bl	80005a0 <__aeabi_dmul>
 80097fc:	4632      	mov	r2, r6
 80097fe:	463b      	mov	r3, r7
 8009800:	f7f6 fd16 	bl	8000230 <__aeabi_dsub>
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	e75e      	b.n	80096c8 <__ieee754_rem_pio2+0x180>
 800980a:	4a1b      	ldr	r2, [pc, #108]	; (8009878 <__ieee754_rem_pio2+0x330>)
 800980c:	4592      	cmp	sl, r2
 800980e:	dd35      	ble.n	800987c <__ieee754_rem_pio2+0x334>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	f7f6 fd0c 	bl	8000230 <__aeabi_dsub>
 8009818:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800981c:	e9c4 0100 	strd	r0, r1, [r4]
 8009820:	e6a2      	b.n	8009568 <__ieee754_rem_pio2+0x20>
 8009822:	bf00      	nop
 8009824:	f3af 8000 	nop.w
 8009828:	54400000 	.word	0x54400000
 800982c:	3ff921fb 	.word	0x3ff921fb
 8009830:	1a626331 	.word	0x1a626331
 8009834:	3dd0b461 	.word	0x3dd0b461
 8009838:	1a600000 	.word	0x1a600000
 800983c:	3dd0b461 	.word	0x3dd0b461
 8009840:	2e037073 	.word	0x2e037073
 8009844:	3ba3198a 	.word	0x3ba3198a
 8009848:	6dc9c883 	.word	0x6dc9c883
 800984c:	3fe45f30 	.word	0x3fe45f30
 8009850:	2e000000 	.word	0x2e000000
 8009854:	3ba3198a 	.word	0x3ba3198a
 8009858:	252049c1 	.word	0x252049c1
 800985c:	397b839a 	.word	0x397b839a
 8009860:	3fe921fb 	.word	0x3fe921fb
 8009864:	4002d97b 	.word	0x4002d97b
 8009868:	3ff921fb 	.word	0x3ff921fb
 800986c:	413921fb 	.word	0x413921fb
 8009870:	3fe00000 	.word	0x3fe00000
 8009874:	0800a628 	.word	0x0800a628
 8009878:	7fefffff 	.word	0x7fefffff
 800987c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009880:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009884:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009888:	460f      	mov	r7, r1
 800988a:	4606      	mov	r6, r0
 800988c:	f7f7 f922 	bl	8000ad4 <__aeabi_d2iz>
 8009890:	f7f6 fe1c 	bl	80004cc <__aeabi_i2d>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098a0:	f7f6 fcc6 	bl	8000230 <__aeabi_dsub>
 80098a4:	2200      	movs	r2, #0
 80098a6:	4b22      	ldr	r3, [pc, #136]	; (8009930 <__ieee754_rem_pio2+0x3e8>)
 80098a8:	f7f6 fe7a 	bl	80005a0 <__aeabi_dmul>
 80098ac:	460f      	mov	r7, r1
 80098ae:	4606      	mov	r6, r0
 80098b0:	f7f7 f910 	bl	8000ad4 <__aeabi_d2iz>
 80098b4:	f7f6 fe0a 	bl	80004cc <__aeabi_i2d>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4630      	mov	r0, r6
 80098be:	4639      	mov	r1, r7
 80098c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098c4:	f7f6 fcb4 	bl	8000230 <__aeabi_dsub>
 80098c8:	2200      	movs	r2, #0
 80098ca:	4b19      	ldr	r3, [pc, #100]	; (8009930 <__ieee754_rem_pio2+0x3e8>)
 80098cc:	f7f6 fe68 	bl	80005a0 <__aeabi_dmul>
 80098d0:	f04f 0803 	mov.w	r8, #3
 80098d4:	2600      	movs	r6, #0
 80098d6:	2700      	movs	r7, #0
 80098d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80098dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80098e0:	4632      	mov	r2, r6
 80098e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80098e6:	463b      	mov	r3, r7
 80098e8:	46c2      	mov	sl, r8
 80098ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80098ee:	f7f7 f8bf 	bl	8000a70 <__aeabi_dcmpeq>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d1f4      	bne.n	80098e0 <__ieee754_rem_pio2+0x398>
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <__ieee754_rem_pio2+0x3ec>)
 80098f8:	462a      	mov	r2, r5
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	2302      	movs	r3, #2
 80098fe:	4621      	mov	r1, r4
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	a806      	add	r0, sp, #24
 8009904:	4653      	mov	r3, sl
 8009906:	f000 f8d5 	bl	8009ab4 <__kernel_rem_pio2>
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	4605      	mov	r5, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	f6bf ae51 	bge.w	80095b6 <__ieee754_rem_pio2+0x6e>
 8009914:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009918:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800991c:	e9c4 2300 	strd	r2, r3, [r4]
 8009920:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009928:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800992c:	e703      	b.n	8009736 <__ieee754_rem_pio2+0x1ee>
 800992e:	bf00      	nop
 8009930:	41700000 	.word	0x41700000
 8009934:	0800a6a8 	.word	0x0800a6a8

08009938 <__kernel_cos>:
 8009938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009940:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009944:	4680      	mov	r8, r0
 8009946:	460f      	mov	r7, r1
 8009948:	e9cd 2300 	strd	r2, r3, [sp]
 800994c:	da04      	bge.n	8009958 <__kernel_cos+0x20>
 800994e:	f7f7 f8c1 	bl	8000ad4 <__aeabi_d2iz>
 8009952:	2800      	cmp	r0, #0
 8009954:	f000 8086 	beq.w	8009a64 <__kernel_cos+0x12c>
 8009958:	4642      	mov	r2, r8
 800995a:	463b      	mov	r3, r7
 800995c:	4640      	mov	r0, r8
 800995e:	4639      	mov	r1, r7
 8009960:	f7f6 fe1e 	bl	80005a0 <__aeabi_dmul>
 8009964:	2200      	movs	r2, #0
 8009966:	4b4e      	ldr	r3, [pc, #312]	; (8009aa0 <__kernel_cos+0x168>)
 8009968:	4604      	mov	r4, r0
 800996a:	460d      	mov	r5, r1
 800996c:	f7f6 fe18 	bl	80005a0 <__aeabi_dmul>
 8009970:	a33f      	add	r3, pc, #252	; (adr r3, 8009a70 <__kernel_cos+0x138>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	4682      	mov	sl, r0
 8009978:	468b      	mov	fp, r1
 800997a:	4620      	mov	r0, r4
 800997c:	4629      	mov	r1, r5
 800997e:	f7f6 fe0f 	bl	80005a0 <__aeabi_dmul>
 8009982:	a33d      	add	r3, pc, #244	; (adr r3, 8009a78 <__kernel_cos+0x140>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fc54 	bl	8000234 <__adddf3>
 800998c:	4622      	mov	r2, r4
 800998e:	462b      	mov	r3, r5
 8009990:	f7f6 fe06 	bl	80005a0 <__aeabi_dmul>
 8009994:	a33a      	add	r3, pc, #232	; (adr r3, 8009a80 <__kernel_cos+0x148>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc49 	bl	8000230 <__aeabi_dsub>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	f7f6 fdfd 	bl	80005a0 <__aeabi_dmul>
 80099a6:	a338      	add	r3, pc, #224	; (adr r3, 8009a88 <__kernel_cos+0x150>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fc42 	bl	8000234 <__adddf3>
 80099b0:	4622      	mov	r2, r4
 80099b2:	462b      	mov	r3, r5
 80099b4:	f7f6 fdf4 	bl	80005a0 <__aeabi_dmul>
 80099b8:	a335      	add	r3, pc, #212	; (adr r3, 8009a90 <__kernel_cos+0x158>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc37 	bl	8000230 <__aeabi_dsub>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	f7f6 fdeb 	bl	80005a0 <__aeabi_dmul>
 80099ca:	a333      	add	r3, pc, #204	; (adr r3, 8009a98 <__kernel_cos+0x160>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f7f6 fc30 	bl	8000234 <__adddf3>
 80099d4:	4622      	mov	r2, r4
 80099d6:	462b      	mov	r3, r5
 80099d8:	f7f6 fde2 	bl	80005a0 <__aeabi_dmul>
 80099dc:	4622      	mov	r2, r4
 80099de:	462b      	mov	r3, r5
 80099e0:	f7f6 fdde 	bl	80005a0 <__aeabi_dmul>
 80099e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e8:	4604      	mov	r4, r0
 80099ea:	460d      	mov	r5, r1
 80099ec:	4640      	mov	r0, r8
 80099ee:	4639      	mov	r1, r7
 80099f0:	f7f6 fdd6 	bl	80005a0 <__aeabi_dmul>
 80099f4:	460b      	mov	r3, r1
 80099f6:	4602      	mov	r2, r0
 80099f8:	4629      	mov	r1, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7f6 fc18 	bl	8000230 <__aeabi_dsub>
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <__kernel_cos+0x16c>)
 8009a02:	4680      	mov	r8, r0
 8009a04:	429e      	cmp	r6, r3
 8009a06:	4689      	mov	r9, r1
 8009a08:	dc0e      	bgt.n	8009a28 <__kernel_cos+0xf0>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4650      	mov	r0, sl
 8009a10:	4659      	mov	r1, fp
 8009a12:	f7f6 fc0d 	bl	8000230 <__aeabi_dsub>
 8009a16:	4602      	mov	r2, r0
 8009a18:	2000      	movs	r0, #0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4922      	ldr	r1, [pc, #136]	; (8009aa8 <__kernel_cos+0x170>)
 8009a1e:	f7f6 fc07 	bl	8000230 <__aeabi_dsub>
 8009a22:	b003      	add	sp, #12
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a28:	2400      	movs	r4, #0
 8009a2a:	4b20      	ldr	r3, [pc, #128]	; (8009aac <__kernel_cos+0x174>)
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	bfcc      	ite	gt
 8009a32:	4d1f      	ldrgt	r5, [pc, #124]	; (8009ab0 <__kernel_cos+0x178>)
 8009a34:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009a38:	462b      	mov	r3, r5
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	491a      	ldr	r1, [pc, #104]	; (8009aa8 <__kernel_cos+0x170>)
 8009a3e:	f7f6 fbf7 	bl	8000230 <__aeabi_dsub>
 8009a42:	4622      	mov	r2, r4
 8009a44:	4606      	mov	r6, r0
 8009a46:	460f      	mov	r7, r1
 8009a48:	462b      	mov	r3, r5
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	f7f6 fbef 	bl	8000230 <__aeabi_dsub>
 8009a52:	4642      	mov	r2, r8
 8009a54:	464b      	mov	r3, r9
 8009a56:	f7f6 fbeb 	bl	8000230 <__aeabi_dsub>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4630      	mov	r0, r6
 8009a60:	4639      	mov	r1, r7
 8009a62:	e7dc      	b.n	8009a1e <__kernel_cos+0xe6>
 8009a64:	2000      	movs	r0, #0
 8009a66:	4910      	ldr	r1, [pc, #64]	; (8009aa8 <__kernel_cos+0x170>)
 8009a68:	e7db      	b.n	8009a22 <__kernel_cos+0xea>
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w
 8009a70:	be8838d4 	.word	0xbe8838d4
 8009a74:	bda8fae9 	.word	0xbda8fae9
 8009a78:	bdb4b1c4 	.word	0xbdb4b1c4
 8009a7c:	3e21ee9e 	.word	0x3e21ee9e
 8009a80:	809c52ad 	.word	0x809c52ad
 8009a84:	3e927e4f 	.word	0x3e927e4f
 8009a88:	19cb1590 	.word	0x19cb1590
 8009a8c:	3efa01a0 	.word	0x3efa01a0
 8009a90:	16c15177 	.word	0x16c15177
 8009a94:	3f56c16c 	.word	0x3f56c16c
 8009a98:	5555554c 	.word	0x5555554c
 8009a9c:	3fa55555 	.word	0x3fa55555
 8009aa0:	3fe00000 	.word	0x3fe00000
 8009aa4:	3fd33332 	.word	0x3fd33332
 8009aa8:	3ff00000 	.word	0x3ff00000
 8009aac:	3fe90000 	.word	0x3fe90000
 8009ab0:	3fd20000 	.word	0x3fd20000

08009ab4 <__kernel_rem_pio2>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	9106      	str	r1, [sp, #24]
 8009ac0:	4bb6      	ldr	r3, [pc, #728]	; (8009d9c <__kernel_rem_pio2+0x2e8>)
 8009ac2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009ac4:	f112 0f14 	cmn.w	r2, #20
 8009ac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009acc:	bfa8      	it	ge
 8009ace:	1ed4      	subge	r4, r2, #3
 8009ad0:	9302      	str	r3, [sp, #8]
 8009ad2:	9b08      	ldr	r3, [sp, #32]
 8009ad4:	bfb8      	it	lt
 8009ad6:	2400      	movlt	r4, #0
 8009ad8:	f103 33ff 	add.w	r3, r3, #4294967295
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	bfa4      	itt	ge
 8009ae0:	2318      	movge	r3, #24
 8009ae2:	fb94 f4f3 	sdivge	r4, r4, r3
 8009ae6:	f06f 0317 	mvn.w	r3, #23
 8009aea:	fb04 3303 	mla	r3, r4, r3, r3
 8009aee:	eb03 0b02 	add.w	fp, r3, r2
 8009af2:	9a07      	ldr	r2, [sp, #28]
 8009af4:	9b02      	ldr	r3, [sp, #8]
 8009af6:	1aa7      	subs	r7, r4, r2
 8009af8:	eb03 0802 	add.w	r8, r3, r2
 8009afc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009afe:	2500      	movs	r5, #0
 8009b00:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009b04:	2200      	movs	r2, #0
 8009b06:	2300      	movs	r3, #0
 8009b08:	9009      	str	r0, [sp, #36]	; 0x24
 8009b0a:	ae20      	add	r6, sp, #128	; 0x80
 8009b0c:	4545      	cmp	r5, r8
 8009b0e:	dd14      	ble.n	8009b3a <__kernel_rem_pio2+0x86>
 8009b10:	f04f 0800 	mov.w	r8, #0
 8009b14:	9a08      	ldr	r2, [sp, #32]
 8009b16:	ab20      	add	r3, sp, #128	; 0x80
 8009b18:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8009b1c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	4598      	cmp	r8, r3
 8009b24:	dc35      	bgt.n	8009b92 <__kernel_rem_pio2+0xde>
 8009b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f1a3 0908 	sub.w	r9, r3, #8
 8009b2e:	2300      	movs	r3, #0
 8009b30:	462f      	mov	r7, r5
 8009b32:	2600      	movs	r6, #0
 8009b34:	e9cd 2300 	strd	r2, r3, [sp]
 8009b38:	e01f      	b.n	8009b7a <__kernel_rem_pio2+0xc6>
 8009b3a:	42ef      	cmn	r7, r5
 8009b3c:	d40b      	bmi.n	8009b56 <__kernel_rem_pio2+0xa2>
 8009b3e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009b42:	e9cd 2300 	strd	r2, r3, [sp]
 8009b46:	f7f6 fcc1 	bl	80004cc <__aeabi_i2d>
 8009b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b4e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009b52:	3501      	adds	r5, #1
 8009b54:	e7da      	b.n	8009b0c <__kernel_rem_pio2+0x58>
 8009b56:	4610      	mov	r0, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	e7f8      	b.n	8009b4e <__kernel_rem_pio2+0x9a>
 8009b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b60:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009b64:	f7f6 fd1c 	bl	80005a0 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b70:	f7f6 fb60 	bl	8000234 <__adddf3>
 8009b74:	e9cd 0100 	strd	r0, r1, [sp]
 8009b78:	3601      	adds	r6, #1
 8009b7a:	9b07      	ldr	r3, [sp, #28]
 8009b7c:	3f08      	subs	r7, #8
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	ddec      	ble.n	8009b5c <__kernel_rem_pio2+0xa8>
 8009b82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b86:	f108 0801 	add.w	r8, r8, #1
 8009b8a:	e8ea 2302 	strd	r2, r3, [sl], #8
 8009b8e:	3508      	adds	r5, #8
 8009b90:	e7c6      	b.n	8009b20 <__kernel_rem_pio2+0x6c>
 8009b92:	9b02      	ldr	r3, [sp, #8]
 8009b94:	aa0c      	add	r2, sp, #48	; 0x30
 8009b96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b9c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009b9e:	9e02      	ldr	r6, [sp, #8]
 8009ba0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ba6:	ab98      	add	r3, sp, #608	; 0x260
 8009ba8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009bac:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009bb0:	ab70      	add	r3, sp, #448	; 0x1c0
 8009bb2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8009bb6:	46d0      	mov	r8, sl
 8009bb8:	46b1      	mov	r9, r6
 8009bba:	af0c      	add	r7, sp, #48	; 0x30
 8009bbc:	9700      	str	r7, [sp, #0]
 8009bbe:	f1b9 0f00 	cmp.w	r9, #0
 8009bc2:	f1a8 0808 	sub.w	r8, r8, #8
 8009bc6:	dc71      	bgt.n	8009cac <__kernel_rem_pio2+0x1f8>
 8009bc8:	465a      	mov	r2, fp
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f000 fbeb 	bl	800a3a8 <scalbn>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	f7f6 fce0 	bl	80005a0 <__aeabi_dmul>
 8009be0:	f000 fb62 	bl	800a2a8 <floor>
 8009be4:	2200      	movs	r2, #0
 8009be6:	4b6e      	ldr	r3, [pc, #440]	; (8009da0 <__kernel_rem_pio2+0x2ec>)
 8009be8:	f7f6 fcda 	bl	80005a0 <__aeabi_dmul>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f7f6 fb1c 	bl	8000230 <__aeabi_dsub>
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	f7f6 ff6a 	bl	8000ad4 <__aeabi_d2iz>
 8009c00:	9004      	str	r0, [sp, #16]
 8009c02:	f7f6 fc63 	bl	80004cc <__aeabi_i2d>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	f7f6 fb0f 	bl	8000230 <__aeabi_dsub>
 8009c12:	f1bb 0f00 	cmp.w	fp, #0
 8009c16:	4680      	mov	r8, r0
 8009c18:	4689      	mov	r9, r1
 8009c1a:	dd70      	ble.n	8009cfe <__kernel_rem_pio2+0x24a>
 8009c1c:	1e72      	subs	r2, r6, #1
 8009c1e:	ab0c      	add	r3, sp, #48	; 0x30
 8009c20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009c24:	9c04      	ldr	r4, [sp, #16]
 8009c26:	f1cb 0118 	rsb	r1, fp, #24
 8009c2a:	fa40 f301 	asr.w	r3, r0, r1
 8009c2e:	441c      	add	r4, r3
 8009c30:	408b      	lsls	r3, r1
 8009c32:	1ac0      	subs	r0, r0, r3
 8009c34:	ab0c      	add	r3, sp, #48	; 0x30
 8009c36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009c3a:	f1cb 0317 	rsb	r3, fp, #23
 8009c3e:	9404      	str	r4, [sp, #16]
 8009c40:	fa40 f303 	asr.w	r3, r0, r3
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	dd66      	ble.n	8009d1a <__kernel_rem_pio2+0x266>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009c52:	4614      	mov	r4, r2
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	3301      	adds	r3, #1
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	4296      	cmp	r6, r2
 8009c5c:	f300 80ac 	bgt.w	8009db8 <__kernel_rem_pio2+0x304>
 8009c60:	f1bb 0f00 	cmp.w	fp, #0
 8009c64:	dd07      	ble.n	8009c76 <__kernel_rem_pio2+0x1c2>
 8009c66:	f1bb 0f01 	cmp.w	fp, #1
 8009c6a:	f000 80b4 	beq.w	8009dd6 <__kernel_rem_pio2+0x322>
 8009c6e:	f1bb 0f02 	cmp.w	fp, #2
 8009c72:	f000 80ba 	beq.w	8009dea <__kernel_rem_pio2+0x336>
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d14e      	bne.n	8009d1a <__kernel_rem_pio2+0x266>
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	464b      	mov	r3, r9
 8009c80:	2000      	movs	r0, #0
 8009c82:	4948      	ldr	r1, [pc, #288]	; (8009da4 <__kernel_rem_pio2+0x2f0>)
 8009c84:	f7f6 fad4 	bl	8000230 <__aeabi_dsub>
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4689      	mov	r9, r1
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	d044      	beq.n	8009d1a <__kernel_rem_pio2+0x266>
 8009c90:	465a      	mov	r2, fp
 8009c92:	2000      	movs	r0, #0
 8009c94:	4943      	ldr	r1, [pc, #268]	; (8009da4 <__kernel_rem_pio2+0x2f0>)
 8009c96:	f000 fb87 	bl	800a3a8 <scalbn>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	f7f6 fac5 	bl	8000230 <__aeabi_dsub>
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	4689      	mov	r9, r1
 8009caa:	e036      	b.n	8009d1a <__kernel_rem_pio2+0x266>
 8009cac:	2200      	movs	r2, #0
 8009cae:	4b3e      	ldr	r3, [pc, #248]	; (8009da8 <__kernel_rem_pio2+0x2f4>)
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 fc74 	bl	80005a0 <__aeabi_dmul>
 8009cb8:	f7f6 ff0c 	bl	8000ad4 <__aeabi_d2iz>
 8009cbc:	f7f6 fc06 	bl	80004cc <__aeabi_i2d>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4b38      	ldr	r3, [pc, #224]	; (8009dac <__kernel_rem_pio2+0x2f8>)
 8009ccc:	f7f6 fc68 	bl	80005a0 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 faaa 	bl	8000230 <__aeabi_dsub>
 8009cdc:	f7f6 fefa 	bl	8000ad4 <__aeabi_d2iz>
 8009ce0:	9b00      	ldr	r3, [sp, #0]
 8009ce2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ce6:	f843 0b04 	str.w	r0, [r3], #4
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cf0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009cf4:	f7f6 fa9e 	bl	8000234 <__adddf3>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	e75f      	b.n	8009bbe <__kernel_rem_pio2+0x10a>
 8009cfe:	d105      	bne.n	8009d0c <__kernel_rem_pio2+0x258>
 8009d00:	1e73      	subs	r3, r6, #1
 8009d02:	aa0c      	add	r2, sp, #48	; 0x30
 8009d04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009d08:	15c3      	asrs	r3, r0, #23
 8009d0a:	e79b      	b.n	8009c44 <__kernel_rem_pio2+0x190>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4b28      	ldr	r3, [pc, #160]	; (8009db0 <__kernel_rem_pio2+0x2fc>)
 8009d10:	f7f6 fecc 	bl	8000aac <__aeabi_dcmpge>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d13e      	bne.n	8009d96 <__kernel_rem_pio2+0x2e2>
 8009d18:	9000      	str	r0, [sp, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4649      	mov	r1, r9
 8009d22:	f7f6 fea5 	bl	8000a70 <__aeabi_dcmpeq>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	f000 80b1 	beq.w	8009e8e <__kernel_rem_pio2+0x3da>
 8009d2c:	1e74      	subs	r4, r6, #1
 8009d2e:	4623      	mov	r3, r4
 8009d30:	2200      	movs	r2, #0
 8009d32:	9902      	ldr	r1, [sp, #8]
 8009d34:	428b      	cmp	r3, r1
 8009d36:	da5f      	bge.n	8009df8 <__kernel_rem_pio2+0x344>
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d074      	beq.n	8009e26 <__kernel_rem_pio2+0x372>
 8009d3c:	ab0c      	add	r3, sp, #48	; 0x30
 8009d3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009d42:	f1ab 0b18 	sub.w	fp, fp, #24
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 809f 	beq.w	8009e8a <__kernel_rem_pio2+0x3d6>
 8009d4c:	465a      	mov	r2, fp
 8009d4e:	2000      	movs	r0, #0
 8009d50:	4914      	ldr	r1, [pc, #80]	; (8009da4 <__kernel_rem_pio2+0x2f0>)
 8009d52:	f000 fb29 	bl	800a3a8 <scalbn>
 8009d56:	46a2      	mov	sl, r4
 8009d58:	4606      	mov	r6, r0
 8009d5a:	460f      	mov	r7, r1
 8009d5c:	f04f 0800 	mov.w	r8, #0
 8009d60:	ab70      	add	r3, sp, #448	; 0x1c0
 8009d62:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009da8 <__kernel_rem_pio2+0x2f4>
 8009d66:	00e5      	lsls	r5, r4, #3
 8009d68:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009d6c:	f1ba 0f00 	cmp.w	sl, #0
 8009d70:	f280 80c3 	bge.w	8009efa <__kernel_rem_pio2+0x446>
 8009d74:	4626      	mov	r6, r4
 8009d76:	2e00      	cmp	r6, #0
 8009d78:	f2c0 80f5 	blt.w	8009f66 <__kernel_rem_pio2+0x4b2>
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <__kernel_rem_pio2+0x300>)
 8009d7e:	f04f 0a00 	mov.w	sl, #0
 8009d82:	9307      	str	r3, [sp, #28]
 8009d84:	ab70      	add	r3, sp, #448	; 0x1c0
 8009d86:	f04f 0b00 	mov.w	fp, #0
 8009d8a:	f04f 0800 	mov.w	r8, #0
 8009d8e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009d92:	1ba7      	subs	r7, r4, r6
 8009d94:	e0db      	b.n	8009f4e <__kernel_rem_pio2+0x49a>
 8009d96:	2302      	movs	r3, #2
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	e757      	b.n	8009c4c <__kernel_rem_pio2+0x198>
 8009d9c:	0800a7f0 	.word	0x0800a7f0
 8009da0:	40200000 	.word	0x40200000
 8009da4:	3ff00000 	.word	0x3ff00000
 8009da8:	3e700000 	.word	0x3e700000
 8009dac:	41700000 	.word	0x41700000
 8009db0:	3fe00000 	.word	0x3fe00000
 8009db4:	0800a7b0 	.word	0x0800a7b0
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	b944      	cbnz	r4, 8009dce <__kernel_rem_pio2+0x31a>
 8009dbc:	b11b      	cbz	r3, 8009dc6 <__kernel_rem_pio2+0x312>
 8009dbe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	461c      	mov	r4, r3
 8009dc8:	3201      	adds	r2, #1
 8009dca:	3704      	adds	r7, #4
 8009dcc:	e745      	b.n	8009c5a <__kernel_rem_pio2+0x1a6>
 8009dce:	1acb      	subs	r3, r1, r3
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	e7f7      	b.n	8009dc6 <__kernel_rem_pio2+0x312>
 8009dd6:	1e72      	subs	r2, r6, #1
 8009dd8:	ab0c      	add	r3, sp, #48	; 0x30
 8009dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009de2:	a90c      	add	r1, sp, #48	; 0x30
 8009de4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009de8:	e745      	b.n	8009c76 <__kernel_rem_pio2+0x1c2>
 8009dea:	1e72      	subs	r2, r6, #1
 8009dec:	ab0c      	add	r3, sp, #48	; 0x30
 8009dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009df6:	e7f4      	b.n	8009de2 <__kernel_rem_pio2+0x32e>
 8009df8:	a90c      	add	r1, sp, #48	; 0x30
 8009dfa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	430a      	orrs	r2, r1
 8009e02:	e796      	b.n	8009d32 <__kernel_rem_pio2+0x27e>
 8009e04:	3401      	adds	r4, #1
 8009e06:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d0fa      	beq.n	8009e04 <__kernel_rem_pio2+0x350>
 8009e0e:	9b08      	ldr	r3, [sp, #32]
 8009e10:	f106 0801 	add.w	r8, r6, #1
 8009e14:	18f5      	adds	r5, r6, r3
 8009e16:	ab20      	add	r3, sp, #128	; 0x80
 8009e18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009e1c:	4434      	add	r4, r6
 8009e1e:	4544      	cmp	r4, r8
 8009e20:	da04      	bge.n	8009e2c <__kernel_rem_pio2+0x378>
 8009e22:	4626      	mov	r6, r4
 8009e24:	e6bf      	b.n	8009ba6 <__kernel_rem_pio2+0xf2>
 8009e26:	2401      	movs	r4, #1
 8009e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2a:	e7ec      	b.n	8009e06 <__kernel_rem_pio2+0x352>
 8009e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009e36:	f7f6 fb49 	bl	80004cc <__aeabi_i2d>
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	2700      	movs	r7, #0
 8009e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e40:	e9c5 0100 	strd	r0, r1, [r5]
 8009e44:	3b08      	subs	r3, #8
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	9504      	str	r5, [sp, #16]
 8009e4a:	9b07      	ldr	r3, [sp, #28]
 8009e4c:	4599      	cmp	r9, r3
 8009e4e:	dd05      	ble.n	8009e5c <__kernel_rem_pio2+0x3a8>
 8009e50:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8009e54:	f108 0801 	add.w	r8, r8, #1
 8009e58:	3508      	adds	r5, #8
 8009e5a:	e7e0      	b.n	8009e1e <__kernel_rem_pio2+0x36a>
 8009e5c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009e60:	9900      	ldr	r1, [sp, #0]
 8009e62:	f109 0901 	add.w	r9, r9, #1
 8009e66:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009e6a:	9100      	str	r1, [sp, #0]
 8009e6c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8009e70:	f8cd c010 	str.w	ip, [sp, #16]
 8009e74:	f7f6 fb94 	bl	80005a0 <__aeabi_dmul>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 f9d8 	bl	8000234 <__adddf3>
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	e7df      	b.n	8009e4a <__kernel_rem_pio2+0x396>
 8009e8a:	3c01      	subs	r4, #1
 8009e8c:	e756      	b.n	8009d3c <__kernel_rem_pio2+0x288>
 8009e8e:	f1cb 0200 	rsb	r2, fp, #0
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f000 fa87 	bl	800a3a8 <scalbn>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4ba4      	ldr	r3, [pc, #656]	; (800a130 <__kernel_rem_pio2+0x67c>)
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	f7f6 fe03 	bl	8000aac <__aeabi_dcmpge>
 8009ea6:	b1f8      	cbz	r0, 8009ee8 <__kernel_rem_pio2+0x434>
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4ba2      	ldr	r3, [pc, #648]	; (800a134 <__kernel_rem_pio2+0x680>)
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fb76 	bl	80005a0 <__aeabi_dmul>
 8009eb4:	f7f6 fe0e 	bl	8000ad4 <__aeabi_d2iz>
 8009eb8:	4607      	mov	r7, r0
 8009eba:	f7f6 fb07 	bl	80004cc <__aeabi_i2d>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4b9b      	ldr	r3, [pc, #620]	; (800a130 <__kernel_rem_pio2+0x67c>)
 8009ec2:	f7f6 fb6d 	bl	80005a0 <__aeabi_dmul>
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4602      	mov	r2, r0
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f7f6 f9af 	bl	8000230 <__aeabi_dsub>
 8009ed2:	f7f6 fdff 	bl	8000ad4 <__aeabi_d2iz>
 8009ed6:	1c74      	adds	r4, r6, #1
 8009ed8:	ab0c      	add	r3, sp, #48	; 0x30
 8009eda:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009ede:	f10b 0b18 	add.w	fp, fp, #24
 8009ee2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8009ee6:	e731      	b.n	8009d4c <__kernel_rem_pio2+0x298>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 fdf2 	bl	8000ad4 <__aeabi_d2iz>
 8009ef0:	ab0c      	add	r3, sp, #48	; 0x30
 8009ef2:	4634      	mov	r4, r6
 8009ef4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009ef8:	e728      	b.n	8009d4c <__kernel_rem_pio2+0x298>
 8009efa:	ab0c      	add	r3, sp, #48	; 0x30
 8009efc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009f00:	f7f6 fae4 	bl	80004cc <__aeabi_i2d>
 8009f04:	4632      	mov	r2, r6
 8009f06:	463b      	mov	r3, r7
 8009f08:	f7f6 fb4a 	bl	80005a0 <__aeabi_dmul>
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009f12:	464b      	mov	r3, r9
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	f7f6 fb42 	bl	80005a0 <__aeabi_dmul>
 8009f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f20:	4606      	mov	r6, r0
 8009f22:	460f      	mov	r7, r1
 8009f24:	e722      	b.n	8009d6c <__kernel_rem_pio2+0x2b8>
 8009f26:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009f2a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009f2e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8009f32:	f8cd c01c 	str.w	ip, [sp, #28]
 8009f36:	f7f6 fb33 	bl	80005a0 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4659      	mov	r1, fp
 8009f42:	f7f6 f977 	bl	8000234 <__adddf3>
 8009f46:	4682      	mov	sl, r0
 8009f48:	468b      	mov	fp, r1
 8009f4a:	f108 0801 	add.w	r8, r8, #1
 8009f4e:	9b02      	ldr	r3, [sp, #8]
 8009f50:	4598      	cmp	r8, r3
 8009f52:	dc01      	bgt.n	8009f58 <__kernel_rem_pio2+0x4a4>
 8009f54:	45b8      	cmp	r8, r7
 8009f56:	dde6      	ble.n	8009f26 <__kernel_rem_pio2+0x472>
 8009f58:	ab48      	add	r3, sp, #288	; 0x120
 8009f5a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f5e:	e9c7 ab00 	strd	sl, fp, [r7]
 8009f62:	3e01      	subs	r6, #1
 8009f64:	e707      	b.n	8009d76 <__kernel_rem_pio2+0x2c2>
 8009f66:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	dc09      	bgt.n	8009f80 <__kernel_rem_pio2+0x4cc>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dc32      	bgt.n	8009fd6 <__kernel_rem_pio2+0x522>
 8009f70:	d05a      	beq.n	800a028 <__kernel_rem_pio2+0x574>
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	f003 0007 	and.w	r0, r3, #7
 8009f78:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f80:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d1f5      	bne.n	8009f72 <__kernel_rem_pio2+0x4be>
 8009f86:	ab48      	add	r3, sp, #288	; 0x120
 8009f88:	441d      	add	r5, r3
 8009f8a:	46aa      	mov	sl, r5
 8009f8c:	46a3      	mov	fp, r4
 8009f8e:	f1bb 0f00 	cmp.w	fp, #0
 8009f92:	dc76      	bgt.n	800a082 <__kernel_rem_pio2+0x5ce>
 8009f94:	46aa      	mov	sl, r5
 8009f96:	46a3      	mov	fp, r4
 8009f98:	f1bb 0f01 	cmp.w	fp, #1
 8009f9c:	f300 8090 	bgt.w	800a0c0 <__kernel_rem_pio2+0x60c>
 8009fa0:	2700      	movs	r7, #0
 8009fa2:	463e      	mov	r6, r7
 8009fa4:	2c01      	cmp	r4, #1
 8009fa6:	f300 80aa 	bgt.w	800a0fe <__kernel_rem_pio2+0x64a>
 8009faa:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009fae:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f040 80ac 	bne.w	800a112 <__kernel_rem_pio2+0x65e>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	9806      	ldr	r0, [sp, #24]
 8009fc0:	e9c0 2300 	strd	r2, r3, [r0]
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009fcc:	463a      	mov	r2, r7
 8009fce:	4633      	mov	r3, r6
 8009fd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009fd4:	e7cd      	b.n	8009f72 <__kernel_rem_pio2+0x4be>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	46a0      	mov	r8, r4
 8009fda:	4601      	mov	r1, r0
 8009fdc:	ab48      	add	r3, sp, #288	; 0x120
 8009fde:	441d      	add	r5, r3
 8009fe0:	f1b8 0f00 	cmp.w	r8, #0
 8009fe4:	da3a      	bge.n	800a05c <__kernel_rem_pio2+0x5a8>
 8009fe6:	9b00      	ldr	r3, [sp, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d03e      	beq.n	800a06a <__kernel_rem_pio2+0x5b6>
 8009fec:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	9d06      	ldr	r5, [sp, #24]
 8009ff6:	2601      	movs	r6, #1
 8009ff8:	e9c5 2300 	strd	r2, r3, [r5]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a002:	f7f6 f915 	bl	8000230 <__aeabi_dsub>
 800a006:	4684      	mov	ip, r0
 800a008:	460f      	mov	r7, r1
 800a00a:	ad48      	add	r5, sp, #288	; 0x120
 800a00c:	42b4      	cmp	r4, r6
 800a00e:	f105 0508 	add.w	r5, r5, #8
 800a012:	da2c      	bge.n	800a06e <__kernel_rem_pio2+0x5ba>
 800a014:	9b00      	ldr	r3, [sp, #0]
 800a016:	b10b      	cbz	r3, 800a01c <__kernel_rem_pio2+0x568>
 800a018:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a01c:	4662      	mov	r2, ip
 800a01e:	463b      	mov	r3, r7
 800a020:	9906      	ldr	r1, [sp, #24]
 800a022:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a026:	e7a4      	b.n	8009f72 <__kernel_rem_pio2+0x4be>
 800a028:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800a02a:	ab48      	add	r3, sp, #288	; 0x120
 800a02c:	4637      	mov	r7, r6
 800a02e:	441d      	add	r5, r3
 800a030:	2c00      	cmp	r4, #0
 800a032:	da09      	bge.n	800a048 <__kernel_rem_pio2+0x594>
 800a034:	9b00      	ldr	r3, [sp, #0]
 800a036:	b10b      	cbz	r3, 800a03c <__kernel_rem_pio2+0x588>
 800a038:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	9906      	ldr	r1, [sp, #24]
 800a042:	e9c1 2300 	strd	r2, r3, [r1]
 800a046:	e794      	b.n	8009f72 <__kernel_rem_pio2+0x4be>
 800a048:	4630      	mov	r0, r6
 800a04a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a04e:	4639      	mov	r1, r7
 800a050:	f7f6 f8f0 	bl	8000234 <__adddf3>
 800a054:	3c01      	subs	r4, #1
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	e7e9      	b.n	800a030 <__kernel_rem_pio2+0x57c>
 800a05c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a060:	f7f6 f8e8 	bl	8000234 <__adddf3>
 800a064:	f108 38ff 	add.w	r8, r8, #4294967295
 800a068:	e7ba      	b.n	8009fe0 <__kernel_rem_pio2+0x52c>
 800a06a:	460d      	mov	r5, r1
 800a06c:	e7c0      	b.n	8009ff0 <__kernel_rem_pio2+0x53c>
 800a06e:	4660      	mov	r0, ip
 800a070:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a074:	4639      	mov	r1, r7
 800a076:	f7f6 f8dd 	bl	8000234 <__adddf3>
 800a07a:	3601      	adds	r6, #1
 800a07c:	4684      	mov	ip, r0
 800a07e:	460f      	mov	r7, r1
 800a080:	e7c4      	b.n	800a00c <__kernel_rem_pio2+0x558>
 800a082:	e9da 6700 	ldrd	r6, r7, [sl]
 800a086:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800a08a:	4632      	mov	r2, r6
 800a08c:	463b      	mov	r3, r7
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 f8cf 	bl	8000234 <__adddf3>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 f8c5 	bl	8000230 <__aeabi_dsub>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	f7f6 f8c3 	bl	8000234 <__adddf3>
 800a0ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0b2:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a0b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a0be:	e766      	b.n	8009f8e <__kernel_rem_pio2+0x4da>
 800a0c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a0c4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800a0c8:	4642      	mov	r2, r8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f7f6 f8b0 	bl	8000234 <__adddf3>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 f8a6 	bl	8000230 <__aeabi_dsub>
 800a0e4:	4642      	mov	r2, r8
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	f7f6 f8a4 	bl	8000234 <__adddf3>
 800a0ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0f0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a0f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0f8:	e9ca 2300 	strd	r2, r3, [sl]
 800a0fc:	e74c      	b.n	8009f98 <__kernel_rem_pio2+0x4e4>
 800a0fe:	4638      	mov	r0, r7
 800a100:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a104:	4631      	mov	r1, r6
 800a106:	f7f6 f895 	bl	8000234 <__adddf3>
 800a10a:	3c01      	subs	r4, #1
 800a10c:	4607      	mov	r7, r0
 800a10e:	460e      	mov	r6, r1
 800a110:	e748      	b.n	8009fa4 <__kernel_rem_pio2+0x4f0>
 800a112:	9b06      	ldr	r3, [sp, #24]
 800a114:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a118:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a11c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a120:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a124:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a128:	601d      	str	r5, [r3, #0]
 800a12a:	615e      	str	r6, [r3, #20]
 800a12c:	e721      	b.n	8009f72 <__kernel_rem_pio2+0x4be>
 800a12e:	bf00      	nop
 800a130:	41700000 	.word	0x41700000
 800a134:	3e700000 	.word	0x3e700000

0800a138 <__kernel_sin>:
 800a138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	e9cd 2300 	strd	r2, r3, [sp]
 800a142:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a146:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a14a:	4682      	mov	sl, r0
 800a14c:	460c      	mov	r4, r1
 800a14e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a150:	da03      	bge.n	800a15a <__kernel_sin+0x22>
 800a152:	f7f6 fcbf 	bl	8000ad4 <__aeabi_d2iz>
 800a156:	2800      	cmp	r0, #0
 800a158:	d050      	beq.n	800a1fc <__kernel_sin+0xc4>
 800a15a:	4652      	mov	r2, sl
 800a15c:	4623      	mov	r3, r4
 800a15e:	4650      	mov	r0, sl
 800a160:	4621      	mov	r1, r4
 800a162:	f7f6 fa1d 	bl	80005a0 <__aeabi_dmul>
 800a166:	4606      	mov	r6, r0
 800a168:	460f      	mov	r7, r1
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4650      	mov	r0, sl
 800a170:	4621      	mov	r1, r4
 800a172:	f7f6 fa15 	bl	80005a0 <__aeabi_dmul>
 800a176:	a33e      	add	r3, pc, #248	; (adr r3, 800a270 <__kernel_sin+0x138>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	4680      	mov	r8, r0
 800a17e:	4689      	mov	r9, r1
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f6 fa0c 	bl	80005a0 <__aeabi_dmul>
 800a188:	a33b      	add	r3, pc, #236	; (adr r3, 800a278 <__kernel_sin+0x140>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 f84f 	bl	8000230 <__aeabi_dsub>
 800a192:	4632      	mov	r2, r6
 800a194:	463b      	mov	r3, r7
 800a196:	f7f6 fa03 	bl	80005a0 <__aeabi_dmul>
 800a19a:	a339      	add	r3, pc, #228	; (adr r3, 800a280 <__kernel_sin+0x148>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f7f6 f848 	bl	8000234 <__adddf3>
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	f7f6 f9fa 	bl	80005a0 <__aeabi_dmul>
 800a1ac:	a336      	add	r3, pc, #216	; (adr r3, 800a288 <__kernel_sin+0x150>)
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	f7f6 f83d 	bl	8000230 <__aeabi_dsub>
 800a1b6:	4632      	mov	r2, r6
 800a1b8:	463b      	mov	r3, r7
 800a1ba:	f7f6 f9f1 	bl	80005a0 <__aeabi_dmul>
 800a1be:	a334      	add	r3, pc, #208	; (adr r3, 800a290 <__kernel_sin+0x158>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 f836 	bl	8000234 <__adddf3>
 800a1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1cc:	b9dd      	cbnz	r5, 800a206 <__kernel_sin+0xce>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 f9e3 	bl	80005a0 <__aeabi_dmul>
 800a1da:	a32f      	add	r3, pc, #188	; (adr r3, 800a298 <__kernel_sin+0x160>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 f826 	bl	8000230 <__aeabi_dsub>
 800a1e4:	4642      	mov	r2, r8
 800a1e6:	464b      	mov	r3, r9
 800a1e8:	f7f6 f9da 	bl	80005a0 <__aeabi_dmul>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4650      	mov	r0, sl
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	f7f6 f81e 	bl	8000234 <__adddf3>
 800a1f8:	4682      	mov	sl, r0
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	4621      	mov	r1, r4
 800a200:	b006      	add	sp, #24
 800a202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a206:	2200      	movs	r2, #0
 800a208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a20c:	4b24      	ldr	r3, [pc, #144]	; (800a2a0 <__kernel_sin+0x168>)
 800a20e:	f7f6 f9c7 	bl	80005a0 <__aeabi_dmul>
 800a212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 f9bf 	bl	80005a0 <__aeabi_dmul>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a22a:	f7f6 f801 	bl	8000230 <__aeabi_dsub>
 800a22e:	4632      	mov	r2, r6
 800a230:	463b      	mov	r3, r7
 800a232:	f7f6 f9b5 	bl	80005a0 <__aeabi_dmul>
 800a236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a23a:	f7f5 fff9 	bl	8000230 <__aeabi_dsub>
 800a23e:	a316      	add	r3, pc, #88	; (adr r3, 800a298 <__kernel_sin+0x160>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	4640      	mov	r0, r8
 800a24a:	4649      	mov	r1, r9
 800a24c:	f7f6 f9a8 	bl	80005a0 <__aeabi_dmul>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f7f5 ffec 	bl	8000234 <__adddf3>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4650      	mov	r0, sl
 800a262:	4621      	mov	r1, r4
 800a264:	f7f5 ffe4 	bl	8000230 <__aeabi_dsub>
 800a268:	e7c6      	b.n	800a1f8 <__kernel_sin+0xc0>
 800a26a:	bf00      	nop
 800a26c:	f3af 8000 	nop.w
 800a270:	5acfd57c 	.word	0x5acfd57c
 800a274:	3de5d93a 	.word	0x3de5d93a
 800a278:	8a2b9ceb 	.word	0x8a2b9ceb
 800a27c:	3e5ae5e6 	.word	0x3e5ae5e6
 800a280:	57b1fe7d 	.word	0x57b1fe7d
 800a284:	3ec71de3 	.word	0x3ec71de3
 800a288:	19c161d5 	.word	0x19c161d5
 800a28c:	3f2a01a0 	.word	0x3f2a01a0
 800a290:	1110f8a6 	.word	0x1110f8a6
 800a294:	3f811111 	.word	0x3f811111
 800a298:	55555549 	.word	0x55555549
 800a29c:	3fc55555 	.word	0x3fc55555
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	00000000 	.word	0x00000000

0800a2a8 <floor>:
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a2b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a2b4:	2e13      	cmp	r6, #19
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	460c      	mov	r4, r1
 800a2be:	4605      	mov	r5, r0
 800a2c0:	dc33      	bgt.n	800a32a <floor+0x82>
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	da14      	bge.n	800a2f0 <floor+0x48>
 800a2c6:	a334      	add	r3, pc, #208	; (adr r3, 800a398 <floor+0xf0>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ffb2 	bl	8000234 <__adddf3>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f7f6 fbf4 	bl	8000ac0 <__aeabi_dcmpgt>
 800a2d8:	b138      	cbz	r0, 800a2ea <floor+0x42>
 800a2da:	2c00      	cmp	r4, #0
 800a2dc:	da58      	bge.n	800a390 <floor+0xe8>
 800a2de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a2e2:	431d      	orrs	r5, r3
 800a2e4:	d001      	beq.n	800a2ea <floor+0x42>
 800a2e6:	2500      	movs	r5, #0
 800a2e8:	4c2d      	ldr	r4, [pc, #180]	; (800a3a0 <floor+0xf8>)
 800a2ea:	4623      	mov	r3, r4
 800a2ec:	462f      	mov	r7, r5
 800a2ee:	e025      	b.n	800a33c <floor+0x94>
 800a2f0:	4a2c      	ldr	r2, [pc, #176]	; (800a3a4 <floor+0xfc>)
 800a2f2:	fa42 f806 	asr.w	r8, r2, r6
 800a2f6:	ea01 0208 	and.w	r2, r1, r8
 800a2fa:	4302      	orrs	r2, r0
 800a2fc:	d01e      	beq.n	800a33c <floor+0x94>
 800a2fe:	a326      	add	r3, pc, #152	; (adr r3, 800a398 <floor+0xf0>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f5 ff96 	bl	8000234 <__adddf3>
 800a308:	2200      	movs	r2, #0
 800a30a:	2300      	movs	r3, #0
 800a30c:	f7f6 fbd8 	bl	8000ac0 <__aeabi_dcmpgt>
 800a310:	2800      	cmp	r0, #0
 800a312:	d0ea      	beq.n	800a2ea <floor+0x42>
 800a314:	2c00      	cmp	r4, #0
 800a316:	bfbe      	ittt	lt
 800a318:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a31c:	fa43 f606 	asrlt.w	r6, r3, r6
 800a320:	19a4      	addlt	r4, r4, r6
 800a322:	2500      	movs	r5, #0
 800a324:	ea24 0408 	bic.w	r4, r4, r8
 800a328:	e7df      	b.n	800a2ea <floor+0x42>
 800a32a:	2e33      	cmp	r6, #51	; 0x33
 800a32c:	dd0a      	ble.n	800a344 <floor+0x9c>
 800a32e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a332:	d103      	bne.n	800a33c <floor+0x94>
 800a334:	f7f5 ff7e 	bl	8000234 <__adddf3>
 800a338:	4607      	mov	r7, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4638      	mov	r0, r7
 800a33e:	4619      	mov	r1, r3
 800a340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a34c:	fa22 f808 	lsr.w	r8, r2, r8
 800a350:	ea18 0f00 	tst.w	r8, r0
 800a354:	d0f2      	beq.n	800a33c <floor+0x94>
 800a356:	a310      	add	r3, pc, #64	; (adr r3, 800a398 <floor+0xf0>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f5 ff6a 	bl	8000234 <__adddf3>
 800a360:	2200      	movs	r2, #0
 800a362:	2300      	movs	r3, #0
 800a364:	f7f6 fbac 	bl	8000ac0 <__aeabi_dcmpgt>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d0be      	beq.n	800a2ea <floor+0x42>
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	da02      	bge.n	800a376 <floor+0xce>
 800a370:	2e14      	cmp	r6, #20
 800a372:	d103      	bne.n	800a37c <floor+0xd4>
 800a374:	3401      	adds	r4, #1
 800a376:	ea25 0508 	bic.w	r5, r5, r8
 800a37a:	e7b6      	b.n	800a2ea <floor+0x42>
 800a37c:	2301      	movs	r3, #1
 800a37e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a382:	fa03 f606 	lsl.w	r6, r3, r6
 800a386:	4435      	add	r5, r6
 800a388:	42bd      	cmp	r5, r7
 800a38a:	bf38      	it	cc
 800a38c:	18e4      	addcc	r4, r4, r3
 800a38e:	e7f2      	b.n	800a376 <floor+0xce>
 800a390:	2500      	movs	r5, #0
 800a392:	462c      	mov	r4, r5
 800a394:	e7a9      	b.n	800a2ea <floor+0x42>
 800a396:	bf00      	nop
 800a398:	8800759c 	.word	0x8800759c
 800a39c:	7e37e43c 	.word	0x7e37e43c
 800a3a0:	bff00000 	.word	0xbff00000
 800a3a4:	000fffff 	.word	0x000fffff

0800a3a8 <scalbn>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	4617      	mov	r7, r2
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	b996      	cbnz	r6, 800a3de <scalbn+0x36>
 800a3b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3bc:	4303      	orrs	r3, r0
 800a3be:	d039      	beq.n	800a434 <scalbn+0x8c>
 800a3c0:	4b33      	ldr	r3, [pc, #204]	; (800a490 <scalbn+0xe8>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f7f6 f8ec 	bl	80005a0 <__aeabi_dmul>
 800a3c8:	4b32      	ldr	r3, [pc, #200]	; (800a494 <scalbn+0xec>)
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	429f      	cmp	r7, r3
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	da0f      	bge.n	800a3f2 <scalbn+0x4a>
 800a3d2:	a32b      	add	r3, pc, #172	; (adr r3, 800a480 <scalbn+0xd8>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f6 f8e2 	bl	80005a0 <__aeabi_dmul>
 800a3dc:	e006      	b.n	800a3ec <scalbn+0x44>
 800a3de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a3e2:	4296      	cmp	r6, r2
 800a3e4:	d10a      	bne.n	800a3fc <scalbn+0x54>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	f7f5 ff24 	bl	8000234 <__adddf3>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	e020      	b.n	800a434 <scalbn+0x8c>
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a3f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a3fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a400:	19b9      	adds	r1, r7, r6
 800a402:	4291      	cmp	r1, r2
 800a404:	dd0e      	ble.n	800a424 <scalbn+0x7c>
 800a406:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a40a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a40e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a412:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a416:	4820      	ldr	r0, [pc, #128]	; (800a498 <scalbn+0xf0>)
 800a418:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a41c:	a31a      	add	r3, pc, #104	; (adr r3, 800a488 <scalbn+0xe0>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	e7d9      	b.n	800a3d8 <scalbn+0x30>
 800a424:	2900      	cmp	r1, #0
 800a426:	dd08      	ble.n	800a43a <scalbn+0x92>
 800a428:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a42c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a430:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a43e:	da12      	bge.n	800a466 <scalbn+0xbe>
 800a440:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a444:	429f      	cmp	r7, r3
 800a446:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a44a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a44e:	dcdc      	bgt.n	800a40a <scalbn+0x62>
 800a450:	a30b      	add	r3, pc, #44	; (adr r3, 800a480 <scalbn+0xd8>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a45a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a45e:	480f      	ldr	r0, [pc, #60]	; (800a49c <scalbn+0xf4>)
 800a460:	f041 011f 	orr.w	r1, r1, #31
 800a464:	e7b8      	b.n	800a3d8 <scalbn+0x30>
 800a466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a46a:	3136      	adds	r1, #54	; 0x36
 800a46c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a470:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	2200      	movs	r2, #0
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <scalbn+0xf8>)
 800a47c:	e7ac      	b.n	800a3d8 <scalbn+0x30>
 800a47e:	bf00      	nop
 800a480:	c2f8f359 	.word	0xc2f8f359
 800a484:	01a56e1f 	.word	0x01a56e1f
 800a488:	8800759c 	.word	0x8800759c
 800a48c:	7e37e43c 	.word	0x7e37e43c
 800a490:	43500000 	.word	0x43500000
 800a494:	ffff3cb0 	.word	0xffff3cb0
 800a498:	8800759c 	.word	0x8800759c
 800a49c:	c2f8f359 	.word	0xc2f8f359
 800a4a0:	3c900000 	.word	0x3c900000

0800a4a4 <_init>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr

0800a4b0 <_fini>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr
