
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc54  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800ce40  0800ce40  0001ce40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b8  0800d7b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7b8  0800d7b8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7b8  0800d7b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7bc  0800d7bc  0001d7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800d7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008138  20000088  0800d848  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200081c0  0800d848  000281c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001576b  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392e  00000000  00000000  0003581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d037  00000000  00000000  0003b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a657  00000000  00000000  00058957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e533  00000000  00000000  00072fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001114e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006558  00000000  00000000  00111534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000088 	.word	0x20000088
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ce24 	.word	0x0800ce24

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000008c 	.word	0x2000008c
 8000224:	0800ce24 	.word	0x0800ce24

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <Find_crash>:
extern Rectangle obstacles[5];			// area that depletes charge faster
extern Coordinate oppoBeacons[3];		// opponent charging station coordinate
extern Queue openlist;
extern List closelist;

uint8_t Find_crash(uint16_t cor, uint8_t flag) {
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	uint16_t x = cor / 256;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	81bb      	strh	r3, [r7, #12]
	uint16_t y = cor % 256;
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	817b      	strh	r3, [r7, #10]

	if (flag == 0) {
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <Find_crash+0x26>
		return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e109      	b.n	8001432 <Find_crash+0x23a>
	}
	if (flag == 1) {
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d151      	bne.n	80012c8 <Find_crash+0xd0>
		//walls
		if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	2b25      	cmp	r3, #37	; 0x25
 8001228:	d910      	bls.n	800124c <Find_crash+0x54>
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	2b28      	cmp	r3, #40	; 0x28
 800122e:	d80d      	bhi.n	800124c <Find_crash+0x54>
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	2b25      	cmp	r3, #37	; 0x25
 8001234:	d902      	bls.n	800123c <Find_crash+0x44>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	d905      	bls.n	8001248 <Find_crash+0x50>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b92      	cmp	r3, #146	; 0x92
 8001240:	d904      	bls.n	800124c <Find_crash+0x54>
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	2bd8      	cmp	r3, #216	; 0xd8
 8001246:	d801      	bhi.n	800124c <Find_crash+0x54>
			return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e0f2      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2bd5      	cmp	r3, #213	; 0xd5
 8001250:	d910      	bls.n	8001274 <Find_crash+0x7c>
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bd8      	cmp	r3, #216	; 0xd8
 8001256:	d80d      	bhi.n	8001274 <Find_crash+0x7c>
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b25      	cmp	r3, #37	; 0x25
 800125c:	d902      	bls.n	8001264 <Find_crash+0x6c>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	2b6b      	cmp	r3, #107	; 0x6b
 8001262:	d905      	bls.n	8001270 <Find_crash+0x78>
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b92      	cmp	r3, #146	; 0x92
 8001268:	d904      	bls.n	8001274 <Find_crash+0x7c>
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	2bd8      	cmp	r3, #216	; 0xd8
 800126e:	d801      	bhi.n	8001274 <Find_crash+0x7c>
			return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e0de      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	2b25      	cmp	r3, #37	; 0x25
 8001278:	d910      	bls.n	800129c <Find_crash+0xa4>
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	2b28      	cmp	r3, #40	; 0x28
 800127e:	d80d      	bhi.n	800129c <Find_crash+0xa4>
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d902      	bls.n	800128c <Find_crash+0x94>
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d905      	bls.n	8001298 <Find_crash+0xa0>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2b92      	cmp	r3, #146	; 0x92
 8001290:	d904      	bls.n	800129c <Find_crash+0xa4>
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2bd8      	cmp	r3, #216	; 0xd8
 8001296:	d801      	bhi.n	800129c <Find_crash+0xa4>
			return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e0ca      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2bd5      	cmp	r3, #213	; 0xd5
 80012a0:	d910      	bls.n	80012c4 <Find_crash+0xcc>
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2bd8      	cmp	r3, #216	; 0xd8
 80012a6:	d80d      	bhi.n	80012c4 <Find_crash+0xcc>
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	2b25      	cmp	r3, #37	; 0x25
 80012ac:	d902      	bls.n	80012b4 <Find_crash+0xbc>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	2b6b      	cmp	r3, #107	; 0x6b
 80012b2:	d905      	bls.n	80012c0 <Find_crash+0xc8>
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	2b92      	cmp	r3, #146	; 0x92
 80012b8:	d904      	bls.n	80012c4 <Find_crash+0xcc>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	2bd8      	cmp	r3, #216	; 0xd8
 80012be:	d801      	bhi.n	80012c4 <Find_crash+0xcc>
			return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b6      	b.n	8001432 <Find_crash+0x23a>
		}
		return 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0b4      	b.n	8001432 <Find_crash+0x23a>
	}
	//walls
	if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	2b25      	cmp	r3, #37	; 0x25
 80012cc:	d910      	bls.n	80012f0 <Find_crash+0xf8>
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	d80d      	bhi.n	80012f0 <Find_crash+0xf8>
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	2b25      	cmp	r3, #37	; 0x25
 80012d8:	d902      	bls.n	80012e0 <Find_crash+0xe8>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	2b6b      	cmp	r3, #107	; 0x6b
 80012de:	d905      	bls.n	80012ec <Find_crash+0xf4>
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	2b92      	cmp	r3, #146	; 0x92
 80012e4:	d904      	bls.n	80012f0 <Find_crash+0xf8>
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	2bd8      	cmp	r3, #216	; 0xd8
 80012ea:	d801      	bhi.n	80012f0 <Find_crash+0xf8>
		return 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0a0      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2bd5      	cmp	r3, #213	; 0xd5
 80012f4:	d910      	bls.n	8001318 <Find_crash+0x120>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	2bd8      	cmp	r3, #216	; 0xd8
 80012fa:	d80d      	bhi.n	8001318 <Find_crash+0x120>
 80012fc:	897b      	ldrh	r3, [r7, #10]
 80012fe:	2b25      	cmp	r3, #37	; 0x25
 8001300:	d902      	bls.n	8001308 <Find_crash+0x110>
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	2b6b      	cmp	r3, #107	; 0x6b
 8001306:	d905      	bls.n	8001314 <Find_crash+0x11c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	2b92      	cmp	r3, #146	; 0x92
 800130c:	d904      	bls.n	8001318 <Find_crash+0x120>
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	2bd8      	cmp	r3, #216	; 0xd8
 8001312:	d801      	bhi.n	8001318 <Find_crash+0x120>
		return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e08c      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b25      	cmp	r3, #37	; 0x25
 800131c:	d910      	bls.n	8001340 <Find_crash+0x148>
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	d80d      	bhi.n	8001340 <Find_crash+0x148>
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b25      	cmp	r3, #37	; 0x25
 8001328:	d902      	bls.n	8001330 <Find_crash+0x138>
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	2b6b      	cmp	r3, #107	; 0x6b
 800132e:	d905      	bls.n	800133c <Find_crash+0x144>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b92      	cmp	r3, #146	; 0x92
 8001334:	d904      	bls.n	8001340 <Find_crash+0x148>
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	2bd8      	cmp	r3, #216	; 0xd8
 800133a:	d801      	bhi.n	8001340 <Find_crash+0x148>
		return 0;
 800133c:	2300      	movs	r3, #0
 800133e:	e078      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	2bd5      	cmp	r3, #213	; 0xd5
 8001344:	d910      	bls.n	8001368 <Find_crash+0x170>
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d80d      	bhi.n	8001368 <Find_crash+0x170>
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	d902      	bls.n	8001358 <Find_crash+0x160>
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	2b6b      	cmp	r3, #107	; 0x6b
 8001356:	d905      	bls.n	8001364 <Find_crash+0x16c>
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b92      	cmp	r3, #146	; 0x92
 800135c:	d904      	bls.n	8001368 <Find_crash+0x170>
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	2bd8      	cmp	r3, #216	; 0xd8
 8001362:	d801      	bhi.n	8001368 <Find_crash+0x170>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e064      	b.n	8001432 <Find_crash+0x23a>
	}
	//obstacles
	for (uint8_t k = 0; k < 5; k++) {
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e026      	b.n	80013bc <Find_crash+0x1c4>
		if (x >= obstacles[k].coord1.x && y >= obstacles[k].coord1.y && x <= obstacles[k].coord2.x
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <Find_crash+0x244>)
 8001374:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 8001378:	4293      	cmp	r3, r2
 800137a:	db1c      	blt.n	80013b6 <Find_crash+0x1be>
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <Find_crash+0x244>)
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	db13      	blt.n	80013b6 <Find_crash+0x1be>
 800138e:	89ba      	ldrh	r2, [r7, #12]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <Find_crash+0x244>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dc0a      	bgt.n	80013b6 <Find_crash+0x1be>
				&& y <= obstacles[k].coord2.y) {
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4925      	ldr	r1, [pc, #148]	; (800143c <Find_crash+0x244>)
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <Find_crash+0x1be>
			return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e03d      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k < 5; k++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d9d5      	bls.n	800136e <Find_crash+0x176>
		}
	}
	// oppoBeacons
	for (uint8_t k = 0; k <= 2; k++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e030      	b.n	800142a <Find_crash+0x232>
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <Find_crash+0x248>)
 80013ce:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 80013d2:	1a9b      	subs	r3, r3, r2
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013d4:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013d6:	89ba      	ldrh	r2, [r7, #12]
 80013d8:	7bb9      	ldrb	r1, [r7, #14]
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <Find_crash+0x248>)
 80013dc:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 80013e0:	1a52      	subs	r2, r2, r1
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013e2:	b292      	uxth	r2, r2
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <Find_crash+0x248>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	b299      	uxth	r1, r3
 80013fc:	8978      	ldrh	r0, [r7, #10]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4c0f      	ldr	r4, [pc, #60]	; (8001440 <Find_crash+0x248>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4423      	add	r3, r4
 8001406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140a:	1ac3      	subs	r3, r0, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 8001414:	4413      	add	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
		if (distance <= 400) {
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	d801      	bhi.n	8001424 <Find_crash+0x22c>
			return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k <= 2; k++) {
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d9cb      	bls.n	80013c8 <Find_crash+0x1d0>
		}
	}
	return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	4770      	bx	lr
 800143c:	20000b84 	.word	0x20000b84
 8001440:	20000bb8 	.word	0x20000bb8

08001444 <cal_H>:

uint16_t cal_H(uint16_t cor1, uint16_t cor2) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
	return abs(x1 - x2) + abs(y1 - y2);
 800146c:	89fa      	ldrh	r2, [r7, #14]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <dir>:

int8_t dir(uint16_t cor1, uint16_t cor2) {
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	460a      	mov	r2, r1
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]
	return ((x2 - x1) + 2 * (y2 - y1));
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8939      	ldrh	r1, [r7, #8]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25b      	sxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <findend>:

uint8_t findend(uint16_t cur, uint16_t end, uint8_t step)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70fb      	strb	r3, [r7, #3]
	uint16_t x1 = cur / 256;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cur % 256;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = end / 256;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = end % 256;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	if (abs(x2 - x1) < step && abs(y2 - y1) < step)
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0b      	bge.n	800153c <findend+0x56>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	da01      	bge.n	800153c <findend+0x56>
	{
		return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <findend+0x58>
	}
	else
		return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Find_around_node>:

void Find_around_node(uint16_t currentindex, int8_t lastdir, A_Star_Node *end, uint8_t step) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	603a      	str	r2, [r7, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	717b      	strb	r3, [r7, #5]
 800155a:	4613      	mov	r3, r2
 800155c:	713b      	strb	r3, [r7, #4]
	uint16_t x = openlist.buffer[currentindex].cor / 256;
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	49b3      	ldr	r1, [pc, #716]	; (8001830 <Find_around_node+0x2e8>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t y = openlist.buffer[currentindex].cor % 256;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	49ad      	ldr	r1, [pc, #692]	; (8001830 <Find_around_node+0x2e8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t obstacleflag = 1;		//负责检测采取何种程度的避障
 800158e:	2301      	movs	r3, #1
 8001590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// left
	if (x >= step) {
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800159c:	429a      	cmp	r2, r3
 800159e:	f0c0 80a3 	bcc.w	80016e8 <Find_around_node+0x1a0>
		uint16_t curx = x - step;
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		uint16_t cury = y;
 80015b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t coordinateindex = curx * 256 + cury;
 80015b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c4:	4413      	add	r3, r2
 80015c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		if (Find_crash(coordinateindex, obstacleflag)) {
 80015ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80015ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe0f 	bl	80011f8 <Find_crash>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8083 	beq.w	80016e8 <Find_around_node+0x1a0>
			//not in close_list
			if (!findin_list(coordinateindex))
 80015e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f87e 	bl	80046e8 <findin_list>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17a      	bne.n	80016e8 <Find_around_node+0x1a0>
					{
				uint16_t index = findin_queue(coordinateindex);
 80015f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f848 	bl	800468c <findin_queue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001602:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001606:	85bb      	strh	r3, [r7, #44]	; 0x2c
				newnode.fatherindex = currentindex;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	86fb      	strh	r3, [r7, #54]	; 0x36
				newnode.cost = openlist.buffer[currentindex].cost + step;
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <Find_around_node+0x2e8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800161e:	4623      	mov	r3, r4
 8001620:	461c      	mov	r4, r3
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff face 	bl	8000bd0 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800163a:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 800163e:	4623      	mov	r3, r4
 8001640:	461c      	mov	r4, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fef9 	bl	8001444 <cal_H>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb6f 	bl	8000d38 <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fab6 	bl	8000bd0 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	4970      	ldr	r1, [pc, #448]	; (8001830 <Find_around_node+0x2e8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff07 	bl	8001496 <dir>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <Find_around_node+0x17c>
						&& lastdir != 0)
 8001694:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <Find_around_node+0x17c>
					newnode.total += 10 * step;
 800169c:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80016a0:	4623      	mov	r3, r4
 80016a2:	461c      	mov	r4, r3
 80016a4:	793a      	ldrb	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb42 	bl	8000d38 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fa89 	bl	8000bd0 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (!index)	//not in open_list
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Find_around_node+0x190>
				{
					queue_append(&newnode);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 ff03 	bl	80044dc <queue_append>
 80016d6:	e007      	b.n	80016e8 <Find_around_node+0x1a0>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 80016d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f826 	bl	8004734 <editcost>
				}
			}
		}
	}
	// right
	if (x <= 255 - step) {
 80016e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f300 80a6 	bgt.w	8001844 <Find_around_node+0x2fc>
		uint16_t curx = x + step;
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001700:	4413      	add	r3, r2
 8001702:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t cury = y;
 8001706:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800170a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t coordinateindex = curx * 256 + cury;
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800171a:	4413      	add	r3, r2
 800171c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Find_crash(coordinateindex, obstacleflag)) {
 8001720:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd64 	bl	80011f8 <Find_crash>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8086 	beq.w	8001844 <Find_around_node+0x2fc>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	4618      	mov	r0, r3
 800173e:	f002 ffd3 	bl	80046e8 <findin_list>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <Find_around_node+0x2fc>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f002 ff9d 	bl	800468c <findin_queue>
 8001752:	4603      	mov	r3, r0
 8001754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001758:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175c:	843b      	strh	r3, [r7, #32]
				newnode.fatherindex = currentindex;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4932      	ldr	r1, [pc, #200]	; (8001830 <Find_around_node+0x2e8>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001774:	4623      	mov	r3, r4
 8001776:	461c      	mov	r4, r3
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fadc 	bl	8000d38 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fa23 	bl	8000bd0 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001790:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 8001794:	4623      	mov	r3, r4
 8001796:	461c      	mov	r4, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe4e 	bl	8001444 <cal_H>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fac4 	bl	8000d38 <__aeabi_i2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa0b 	bl	8000bd0 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Find_around_node+0x2e8>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5c 	bl	8001496 <dir>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d017      	beq.n	800181a <Find_around_node+0x2d2>
						&& lastdir != 0)
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <Find_around_node+0x2d2>
					newnode.total += 10 * step;
 80017f2:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 80017f6:	4623      	mov	r3, r4
 80017f8:	461c      	mov	r4, r3
 80017fa:	793a      	ldrb	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa97 	bl	8000d38 <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f9de 	bl	8000bd0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (!index)	//not in open_list
 800181a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <Find_around_node+0x2ec>
				{
					queue_append(&newnode);
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fe58 	bl	80044dc <queue_append>
 800182c:	e00a      	b.n	8001844 <Find_around_node+0x2fc>
 800182e:	bf00      	nop
 8001830:	20000bf4 	.word	0x20000bf4
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f002 ff78 	bl	8004734 <editcost>
				}
			}
		}
	}
	// up
	if (y >= step) {
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800184c:	429a      	cmp	r2, r3
 800184e:	f0c0 80a3 	bcc.w	8001998 <Find_around_node+0x450>
		uint16_t curx = x;
 8001852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t cury = y - step;
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t coordinateindex = curx * 256 + cury;
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	4413      	add	r3, r2
 8001876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (Find_crash(coordinateindex, obstacleflag)) {
 800187a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800187e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcb7 	bl	80011f8 <Find_crash>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8083 	beq.w	8001998 <Find_around_node+0x450>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001896:	4618      	mov	r0, r3
 8001898:	f002 ff26 	bl	80046e8 <findin_list>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d17a      	bne.n	8001998 <Find_around_node+0x450>
					{
				uint16_t index = findin_queue(coordinateindex);
 80018a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fef0 	bl	800468c <findin_queue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80018b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018b6:	82bb      	strh	r3, [r7, #20]
				newnode.fatherindex = currentindex;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	83fb      	strh	r3, [r7, #30]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	4987      	ldr	r1, [pc, #540]	; (8001adc <Find_around_node+0x594>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80018ce:	4623      	mov	r3, r4
 80018d0:	461c      	mov	r4, r3
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa2f 	bl	8000d38 <__aeabi_i2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f976 	bl	8000bd0 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3016 	str.w	r3, [r7, #22]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 80018ea:	f8d7 4016 	ldr.w	r4, [r7, #22]
 80018ee:	4623      	mov	r3, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fda1 	bl	8001444 <cal_H>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa17 	bl	8000d38 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f95e 	bl	8000bd0 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 301a 	str.w	r3, [r7, #26]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <Find_around_node+0x594>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <dir>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <Find_around_node+0x42c>
						&& lastdir != 0)
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <Find_around_node+0x42c>
					newnode.total += 10 * step;
 800194c:	f8d7 401a 	ldr.w	r4, [r7, #26]
 8001950:	4623      	mov	r3, r4
 8001952:	461c      	mov	r4, r3
 8001954:	793a      	ldrb	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f931 	bl	8000bd0 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 301a 	str.w	r3, [r7, #26]
				if (!index)	//not in open_list
 8001974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <Find_around_node+0x440>
				{
					queue_append(&newnode);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fdab 	bl	80044dc <queue_append>
 8001986:	e007      	b.n	8001998 <Find_around_node+0x450>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fece 	bl	8004734 <editcost>
				}
			}
		}
	}
	// down
	if (y <= 255 - step) {
 8001998:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f300 8096 	bgt.w	8001ad4 <Find_around_node+0x58c>
		uint16_t curx = x;
 80019a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t cury = y + step;
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b8:	4413      	add	r3, r2
 80019ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t coordinateindex = curx * 256 + cury;
 80019bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019c6:	4413      	add	r3, r2
 80019c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (Find_crash(coordinateindex, obstacleflag)) {
 80019ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc10 	bl	80011f8 <Find_crash>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07a      	beq.n	8001ad4 <Find_around_node+0x58c>
			//not in close_list
			if (!findin_list(coordinateindex))
 80019de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fe81 	bl	80046e8 <findin_list>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d173      	bne.n	8001ad4 <Find_around_node+0x58c>
					{
				uint16_t index = findin_queue(coordinateindex);
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fe4c 	bl	800468c <findin_queue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	877b      	strh	r3, [r7, #58]	; 0x3a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80019f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fa:	813b      	strh	r3, [r7, #8]
				newnode.fatherindex = currentindex;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	827b      	strh	r3, [r7, #18]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <Find_around_node+0x594>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001a12:	4623      	mov	r3, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98d 	bl	8000d38 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8d4 	bl	8000bd0 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 300a 	str.w	r3, [r7, #10]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001a2e:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001a32:	4623      	mov	r3, r4
 8001a34:	461c      	mov	r4, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd00 	bl	8001444 <cal_H>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f976 	bl	8000d38 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f8bd 	bl	8000bd0 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 300e 	str.w	r3, [r7, #14]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <Find_around_node+0x594>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd0f 	bl	8001496 <dir>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d017      	beq.n	8001ab4 <Find_around_node+0x56c>
						&& lastdir != 0)
 8001a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <Find_around_node+0x56c>
					newnode.total += 10 * step;
 8001a8c:	f8d7 400e 	ldr.w	r4, [r7, #14]
 8001a90:	4623      	mov	r3, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	793a      	ldrb	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f94a 	bl	8000d38 <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f891 	bl	8000bd0 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 300e 	str.w	r3, [r7, #14]
				if (!index)	//not in open_list
 8001ab4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <Find_around_node+0x57e>
				{
					queue_append(&newnode);
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fd0c 	bl	80044dc <queue_append>
					editcost(index, &newnode);
				}
			}
		}
	}
}
 8001ac4:	e006      	b.n	8001ad4 <Find_around_node+0x58c>
					editcost(index, &newnode);
 8001ac6:	f107 0208 	add.w	r2, r7, #8
 8001aca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fe30 	bl	8004734 <editcost>
}
 8001ad4:	bf00      	nop
 8001ad6:	3764      	adds	r7, #100	; 0x64
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000bf4 	.word	0x20000bf4

08001ae0 <A_Star_main>:

uint8_t A_Star_main(Coordinate *start, Coordinate *last, uint8_t step) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
	A_Star_Node begin;
	A_Star_Node end;
	begin.cor = (start->x) * 256 + start->y;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	end.cor = (last->x) * 256 + last->y;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	begin.cost = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
	begin.total = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
	begin.fatherindex = 65535;
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	queue_append(&begin);
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fcca 	bl	80044dc <queue_append>
	uint16_t curindex = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t Flag = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int8_t lastdir = 0;     		// left:-step up:-2*step right:step down:2*step
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (1) {
		curindex = queue_top();
 8001b5a:	f002 fd77 	bl	800464c <queue_top>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (curindex == 65535)
 8001b64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <A_Star_main+0x94>
			return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e148      	b.n	8001e06 <A_Star_main+0x326>
		if (openlist.buffer[curindex].fatherindex != 65535) {
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b78:	49a5      	ldr	r1, [pc, #660]	; (8001e10 <A_Star_main+0x330>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330e      	adds	r3, #14
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <A_Star_main+0xf6>
			lastdir = dir(openlist.buffer[openlist.buffer[curindex].fatherindex].cor,
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b94:	499e      	ldr	r1, [pc, #632]	; (8001e10 <A_Star_main+0x330>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <A_Star_main+0x330>)
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4995      	ldr	r1, [pc, #596]	; (8001e10 <A_Star_main+0x330>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fc63 	bl	8001496 <dir>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					openlist.buffer[curindex].cor);
		}
		list_append(openlist.buffer[curindex].cor);
 8001bd6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bda:	498d      	ldr	r1, [pc, #564]	; (8001e10 <A_Star_main+0x330>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fd00 	bl	80045f0 <list_append>
		if(findend(openlist.buffer[curindex].cor, end.cor, step))
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4986      	ldr	r1, [pc, #536]	; (8001e10 <A_Star_main+0x330>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc6b 	bl	80014e6 <findend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <A_Star_main+0x17c>
		{
			Flag = curindex;
 8001c16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			break;
 8001c1e:	bf00      	nop
		Find_around_node(curindex, lastdir, &end, step);
	}

	//we now get the path
	Coordinate Astar_path[16];
	Astar_path[15].x = last->x;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Astar_path[15].y = last->y;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t i = 14;
 8001c34:	230e      	movs	r3, #14
 8001c36:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	A_Star_Node *p = &openlist.buffer[Flag];
 8001c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <A_Star_main+0x330>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
	if (p->cor != end.cor) {
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d027      	beq.n	8001caa <A_Star_main+0x1ca>
 8001c5a:	e009      	b.n	8001c70 <A_Star_main+0x190>
		Find_around_node(curindex, lastdir, &end, step);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001c66:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001c6a:	f7ff fc6d 	bl	8001548 <Find_around_node>
		curindex = queue_top();
 8001c6e:	e774      	b.n	8001b5a <A_Star_main+0x7a>
		Astar_path[i].x = p->cor / 256;
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3378      	adds	r3, #120	; 0x78
 8001c82:	443b      	add	r3, r7
 8001c84:	f823 2c68 	strh.w	r2, [r3, #-104]
		Astar_path[i].y = p->cor % 256;
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	b212      	sxth	r2, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3378      	adds	r3, #120	; 0x78
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f823 2c66 	strh.w	r2, [r3, #-102]
		i--;
 8001ca0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	if (p->fatherindex != 65535)
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d07a      	beq.n	8001dac <A_Star_main+0x2cc>
		lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <A_Star_main+0x330>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fbdf 	bl	8001496 <dir>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (p->fatherindex != 65535) {
 8001cde:	e065      	b.n	8001dac <A_Star_main+0x2cc>
		if (lastdir != dir(openlist.buffer[p->fatherindex].cor, p->cor))
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	895b      	ldrh	r3, [r3, #10]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <A_Star_main+0x330>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fbca 	bl	8001496 <dir>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d043      	beq.n	8001d96 <A_Star_main+0x2b6>
		{
			Astar_path[i].x = p->cor / 256;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3378      	adds	r3, #120	; 0x78
 8001d20:	443b      	add	r3, r7
 8001d22:	f823 2c68 	strh.w	r2, [r3, #-104]
			Astar_path[i].y = p->cor % 256;
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	b212      	sxth	r2, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3378      	adds	r3, #120	; 0x78
 8001d38:	443b      	add	r3, r7
 8001d3a:	f823 2c66 	strh.w	r2, [r3, #-102]
			if (i == 1) {
 8001d3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <A_Star_main+0x284>
				i = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				p = &(openlist.buffer[p->fatherindex]);
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <A_Star_main+0x330>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001d62:	e029      	b.n	8001db8 <A_Star_main+0x2d8>
			}
			i = i - 1;
 8001d64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <A_Star_main+0x330>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fb83 	bl	8001496 <dir>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		p = &(openlist.buffer[p->fatherindex]);
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <A_Star_main+0x330>)
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
	while (p->fatherindex != 65535) {
 8001dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dae:	895b      	ldrh	r3, [r3, #10]
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d193      	bne.n	8001ce0 <A_Star_main+0x200>
	}
	Astar_path[i].x = p->cor / 256;
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3378      	adds	r3, #120	; 0x78
 8001dca:	443b      	add	r3, r7
 8001dcc:	f823 2c68 	strh.w	r2, [r3, #-104]
	Astar_path[i].y = p->cor % 256;
 8001dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	b212      	sxth	r2, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3378      	adds	r3, #120	; 0x78
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c66 	strh.w	r2, [r3, #-102]

	Lane_init();
 8001de8:	f002 fb6a 	bl	80044c0 <Lane_init>
	uint8_t Laneis_OK = Insert_inLane(&Astar_path[0], i);
 8001dec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fce6 	bl	80047c8 <Insert_inLane>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	return Laneis_OK;
 8001e02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3778      	adds	r7, #120	; 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000bf4 	.word	0x20000bf4
 8001e14:	00000000 	.word	0x00000000

08001e18 <chao_move_angle>:
	straightPath->end = *end;
	return straightPath;
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 8001e24:	4984      	ldr	r1, [pc, #528]	; (8002038 <chao_move_angle+0x220>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f88e 	bl	8000f48 <__aeabi_fdiv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb5e 	bl	80004f0 <__aeabi_f2d>
 8001e34:	a37e      	add	r3, pc, #504	; (adr r3, 8002030 <chao_move_angle+0x218>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbb1 	bl	80005a0 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe6d 	bl	8000b24 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe fb4e 	bl	80004f0 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb49 	bl	80004f0 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f009 ff79 	bl	800bd5c <cos>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb36 	bl	80004f0 <__aeabi_f2d>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fb31 	bl	80004f0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f009 ffab 	bl	800bdf0 <sin>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fb7d 	bl	80005a0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe f9c1 	bl	8000234 <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe33 	bl	8000b24 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <chao_move_angle+0x224>)
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7fe fb13 	bl	80004f0 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb0e 	bl	80004f0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f009 ff3e 	bl	800bd5c <cos>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb5a 	bl	80005a0 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fafb 	bl	80004f0 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe faf6 	bl	80004f0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f009 ff70 	bl	800bdf0 <sin>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb42 	bl	80005a0 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4640      	mov	r0, r8
 8001f22:	4649      	mov	r1, r9
 8001f24:	f7fe f984 	bl	8000230 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdf8 	bl	8000b24 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <chao_move_angle+0x228>)
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe fad8 	bl	80004f0 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fad3 	bl	80004f0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f009 ff03 	bl	800bd5c <cos>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fb1f 	bl	80005a0 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fac0 	bl	80004f0 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7fe fabb 	bl	80004f0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f009 ff35 	bl	800bdf0 <sin>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb07 	bl	80005a0 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe f949 	bl	8000230 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbd 	bl	8000b24 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <chao_move_angle+0x22c>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f7fe fa9d 	bl	80004f0 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fa98 	bl	80004f0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f009 fec8 	bl	800bd5c <cos>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fae4 	bl	80005a0 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe fa85 	bl	80004f0 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fa80 	bl	80004f0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f009 fefa 	bl	800bdf0 <sin>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe facc 	bl	80005a0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f910 	bl	8000234 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd82 	bl	8000b24 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <chao_move_angle+0x230>)
 8002024:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002030:	54442d18 	.word	0x54442d18
 8002034:	400921fb 	.word	0x400921fb
 8002038:	43340000 	.word	0x43340000
 800203c:	200009a4 	.word	0x200009a4
 8002040:	200009e0 	.word	0x200009e0
 8002044:	20000a1c 	.word	0x20000a1c
 8002048:	20000a58 	.word	0x20000a58

0800204c <mingyan_pathfind_avoidObstacle>:

uint8_t mingyan_pathfind_avoidObstacle(Coordinate *start, Coordinate *end) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	return A_Star_main(start, end, 5);
 8002056:	2205      	movs	r2, #5
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd40 	bl	8001ae0 <A_Star_main>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e026      	b.n	80020cc <huansic_jy62_init+0x60>

	if (!himu->huart)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800208a:	2003      	movs	r0, #3
 800208c:	f004 fad2 	bl	8006634 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	230a      	movs	r3, #10
 8002096:	2203      	movs	r2, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <huansic_jy62_init+0x68>)
 800209a:	f007 fc47 	bl	800992c <HAL_UART_Transmit>

	// instead, just use DMA
	himu->pending_alignment = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3334      	adds	r3, #52	; 0x34
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	4619      	mov	r1, r3
 80020b2:	f007 fcfd 	bl	8009ab0 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000

080020d8 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (!himu)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e112      	b.n	8002310 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	2300      	movs	r3, #0
 80020f0:	73bb      	strb	r3, [r7, #14]
 80020f2:	e0ed      	b.n	80022d0 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fe:	2b55      	cmp	r3, #85	; 0x55
 8002100:	d01c      	beq.n	800213c <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3334      	adds	r3, #52	; 0x34
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f007 fc9b 	bl	8009a50 <HAL_UART_Receive_IT>
			if (i) {
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3b01      	subs	r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa69 	bl	8002600 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800212e:	f004 fa77 	bl	8006620 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8002138:	2305      	movs	r3, #5
 800213a:	e0e9      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002146:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4413      	add	r3, r2
 8002158:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	3302      	adds	r3, #2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4413      	add	r3, r2
 800216a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	3303      	adds	r3, #3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	4413      	add	r3, r2
 800217c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3304      	adds	r3, #4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	4413      	add	r3, r2
 800218e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3305      	adds	r3, #5
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	4413      	add	r3, r2
 80021a0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	3306      	adds	r3, #6
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	4413      	add	r3, r2
 80021b2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	3307      	adds	r3, #7
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	4413      	add	r3, r2
 80021c4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3308      	adds	r3, #8
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	4413      	add	r3, r2
 80021d6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3309      	adds	r3, #9
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	4413      	add	r3, r2
 80021e8:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	330a      	adds	r3, #10
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f6:	7b7a      	ldrb	r2, [r7, #13]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d01c      	beq.n	8002236 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3334      	adds	r3, #52	; 0x34
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f007 fc1e 	bl	8009a50 <HAL_UART_Receive_IT>
				if (i) {
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3b01      	subs	r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f9ec 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8002228:	f004 f9fa 	bl	8006620 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8002232:	2304      	movs	r3, #4
 8002234:	e06c      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b51      	cmp	r3, #81	; 0x51
 8002244:	d105      	bne.n	8002252 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c4 	bl	80023d8 <__huansic_jy62_decode_accel>
 8002250:	e038      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	3301      	adds	r3, #1
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225e:	2b52      	cmp	r3, #82	; 0x52
 8002260:	d105      	bne.n	800226e <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f920 	bl	80024ac <__huansic_jy62_decode_omega>
 800226c:	e02a      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	3301      	adds	r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b53      	cmp	r3, #83	; 0x53
 800227c:	d105      	bne.n	800228a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f966 	bl	8002554 <__huansic_jy62_decode_theta>
 8002288:	e01c      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	2201      	movs	r2, #1
 800229c:	4619      	mov	r1, r3
 800229e:	f007 fbd7 	bl	8009a50 <HAL_UART_Receive_IT>
				if (i) {
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9a5 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80022b6:	f004 f9b3 	bl	8006620 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80022c0:	2306      	movs	r3, #6
 80022c2:	e025      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	330b      	adds	r3, #11
 80022ce:	73bb      	strb	r3, [r7, #14]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f67f af0e 	bls.w	80020f4 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 80022d8:	f004 f9a2 	bl	8006620 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 80022e2:	2102      	movs	r1, #2
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98b 	bl	8002600 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3334      	adds	r3, #52	; 0x34
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	4619      	mov	r1, r3
 80022f6:	f007 fbdb 	bl	8009ab0 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (!himu)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e029      	b.n	800237e <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002330:	2b55      	cmp	r3, #85	; 0x55
 8002332:	d00d      	beq.n	8002350 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3334      	adds	r3, #52	; 0x34
 8002344:	2201      	movs	r2, #1
 8002346:	4619      	mov	r1, r3
 8002348:	f007 fb82 	bl	8009a50 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800234c:	2305      	movs	r3, #5
 800234e:	e016      	b.n	800237e <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3335      	adds	r3, #53	; 0x35
 8002360:	2220      	movs	r2, #32
 8002362:	4619      	mov	r1, r3
 8002364:	f007 fba4 	bl	8009ab0 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 800237c:	2300      	movs	r3, #0
	}
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3334      	adds	r3, #52	; 0x34
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	f007 fb55 	bl	8009a50 <HAL_UART_Receive_IT>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f007 fb41 	bl	8009a50 <HAL_UART_Receive_IT>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e050      	b.n	800248c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1cd9      	adds	r1, r3, #3
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	0059      	lsls	r1, r3, #1
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	440b      	add	r3, r1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242c:	b21a      	sxth	r2, r3
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8002434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc7d 	bl	8000d38 <__aeabi_i2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fccb 	bl	8000de0 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f84f 	bl	80004f0 <__aeabi_f2d>
 8002452:	a313      	add	r3, pc, #76	; (adr r3, 80024a0 <__huansic_jy62_decode_accel+0xc8>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8a2 	bl	80005a0 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <__huansic_jy62_decode_accel+0xd0>)
 800246a:	f7fe f9c3 	bl	80007f4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	7bfc      	ldrb	r4, [r7, #15]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb54 	bl	8000b24 <__aeabi_d2f>
 800247c:	4601      	mov	r1, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ca2      	adds	r2, r4, #2
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d9ab      	bls.n	80023ea <__huansic_jy62_decode_accel+0x12>
	}
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	40239999 	.word	0x40239999
 80024a8:	40e00000 	.word	0x40e00000

080024ac <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e03f      	b.n	800253e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1cd9      	adds	r1, r3, #3
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024da:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	0059      	lsls	r1, r3, #1
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002500:	b21a      	sxth	r2, r3
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fc13 	bl	8000d38 <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <__huansic_jy62_decode_omega+0xa4>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc62 	bl	8000de0 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	7bfc      	ldrb	r4, [r7, #15]
 8002520:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd0f 	bl	8000f48 <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	1d23      	adds	r3, r4, #4
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d9bc      	bls.n	80024be <__huansic_jy62_decode_omega+0x12>
	}
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	44fa0000 	.word	0x44fa0000

08002554 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e03f      	b.n	80025e6 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	1cd9      	adds	r1, r3, #3
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	440b      	add	r3, r1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	0059      	lsls	r1, r3, #1
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 80025b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbbf 	bl	8000d38 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <__huansic_jy62_decode_theta+0xa4>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fc0e 	bl	8000de0 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	7bfc      	ldrb	r4, [r7, #15]
 80025c8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fcbb 	bl	8000f48 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f104 0208 	add.w	r2, r4, #8
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d9bc      	bls.n	8002566 <__huansic_jy62_decode_theta+0x12>
	}
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	43340000 	.word	0x43340000
 80025fc:	00000000 	.word	0x00000000

08002600 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8002624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3309      	adds	r3, #9
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	b21a      	sxth	r2, r3
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb72 	bl	8000d38 <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4910      	ldr	r1, [pc, #64]	; (8002698 <__huansic_jy62_decode_temp+0x98>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc75 	bl	8000f48 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff45 	bl	80004f0 <__aeabi_f2d>
 8002666:	a30a      	add	r3, pc, #40	; (adr r3, 8002690 <__huansic_jy62_decode_temp+0x90>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fde2 	bl	8000234 <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa54 	bl	8000b24 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	0a3d70a4 	.word	0x0a3d70a4
 8002694:	404243d7 	.word	0x404243d7
 8002698:	43aa0000 	.word	0x43aa0000

0800269c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d101      	bne.n	80026c8 <huansic_order_new+0x18>
		return 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e046      	b.n	8002756 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e017      	b.n	80026fe <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	4923      	ldr	r1, [pc, #140]	; (8002760 <huansic_order_new+0xb0>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3310      	adds	r3, #16
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <huansic_order_new+0xb0>)
 80026f4:	4413      	add	r3, r2
 80026f6:	e02e      	b.n	8002756 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	3301      	adds	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b3b      	cmp	r3, #59	; 0x3b
 8002702:	d9e4      	bls.n	80026ce <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e021      	b.n	800274e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	4914      	ldr	r1, [pc, #80]	; (8002760 <huansic_order_new+0xb0>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3310      	adds	r3, #16
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d112      	bne.n	8002748 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <huansic_order_new+0xb0>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4403      	add	r3, r0
 8002734:	3310      	adds	r3, #16
 8002736:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <huansic_order_new+0xb0>)
 8002744:	4413      	add	r3, r2
 8002746:	e006      	b.n	8002756 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b3b      	cmp	r3, #59	; 0x3b
 8002752:	d9da      	bls.n	800270a <huansic_order_new+0x5a>
		}
	}

	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	200000a4 	.word	0x200000a4

08002764 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff90 	bl	800269c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 800277c:	e003      	b.n	8002786 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	611a      	str	r2, [r3, #16]
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <huansic_motor_init+0x1c>
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <huansic_motor_init+0x168>)
 80027a2:	4a56      	ldr	r2, [pc, #344]	; (80028fc <huansic_motor_init+0x16c>)
 80027a4:	210c      	movs	r1, #12
 80027a6:	4856      	ldr	r0, [pc, #344]	; (8002900 <huansic_motor_init+0x170>)
 80027a8:	f007 ff4a 	bl	800a640 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <huansic_motor_init+0x30>
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <huansic_motor_init+0x174>)
 80027b6:	4a51      	ldr	r2, [pc, #324]	; (80028fc <huansic_motor_init+0x16c>)
 80027b8:	210d      	movs	r1, #13
 80027ba:	4851      	ldr	r0, [pc, #324]	; (8002900 <huansic_motor_init+0x170>)
 80027bc:	f007 ff40 	bl	800a640 <__assert_func>
	assert(hmotor->dt);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fc9d 	bl	8001108 <__aeabi_fcmpeq>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <huansic_motor_init+0x50>
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <huansic_motor_init+0x178>)
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <huansic_motor_init+0x16c>)
 80027d8:	210e      	movs	r1, #14
 80027da:	4849      	ldr	r0, [pc, #292]	; (8002900 <huansic_motor_init+0x170>)
 80027dc:	f007 ff30 	bl	800a640 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	e01c      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d105      	bne.n	8002840 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
 800283e:	e012      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d105      	bne.n	8002854 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
 8002852:	e008      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d104      	bne.n	8002866 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d026      	beq.n	80028bc <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
 8002880:	e01c      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d105      	bne.n	8002896 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
 8002894:	e012      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d105      	bne.n	80028aa <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	e008      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d104      	bne.n	80028bc <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	213c      	movs	r1, #60	; 0x3c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f006 f8f0 	bl	8008aa8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f005 ff8c 	bl	80087f0 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f005 ff80 	bl	80087f0 <HAL_TIM_PWM_Start>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800ce40 	.word	0x0800ce40
 80028fc:	0800ceb0 	.word	0x0800ceb0
 8002900:	0800ce50 	.word	0x0800ce50
 8002904:	0800ce70 	.word	0x0800ce70
 8002908:	0800ce84 	.word	0x0800ce84

0800290c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	425b      	negs	r3, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8002930:	8afa      	ldrh	r2, [r7, #22]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b29b      	uxth	r3, r3
 800293a:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 800293c:	8afa      	ldrh	r2, [r7, #22]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8002942:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f9f6 	bl	8000d38 <__aeabi_i2f>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe faf7 	bl	8000f48 <__aeabi_fdiv>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdc2 	bl	80004f0 <__aeabi_f2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <huansic_motor_pid+0x2b4>)
 8002972:	f7fd fe15 	bl	80005a0 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4614      	mov	r4, r2
 800297c:	461d      	mov	r5, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdb4 	bl	80004f0 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fc50 	bl	8000234 <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <huansic_motor_pid+0x2b8>)
 80029a2:	f7fd ff27 	bl	80007f4 <__aeabi_ddiv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f8b9 	bl	8000b24 <__aeabi_d2f>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f7fe f900 	bl	8000bcc <__aeabi_fsub>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe f8fb 	bl	8000bcc <__aeabi_fsub>
 80029d6:	4603      	mov	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe f8f1 	bl	8000bcc <__aeabi_fsub>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f8e7 	bl	8000bd0 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f7fe f9e3 	bl	8000de0 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe f9d9 	bl	8000de0 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4619      	mov	r1, r3
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7fe f8cc 	bl	8000bd0 <__addsf3>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f9cc 	bl	8000de0 <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe f8bf 	bl	8000bd0 <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8002a56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fb7c 	bl	8001158 <__aeabi_fcmpgt>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <huansic_motor_pid+0x160>
 8002a66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a6a:	e009      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a6c:	4956      	ldr	r1, [pc, #344]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fb54 	bl	800111c <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <huansic_motor_pid+0x172>
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a7c:	e000      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7fe fb66 	bl	8001158 <__aeabi_fcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <huansic_motor_pid+0x1ba>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f945 	bl	8000d30 <__aeabi_ui2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f998 	bl	8000de0 <__aeabi_fmul>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f009 f9e2 	bl	800be7c <roundf>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb7c 	bl	80011b8 <__aeabi_f2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	e000      	b.n	8002ac8 <huansic_motor_pid+0x1bc>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7fe fb24 	bl	800111c <__aeabi_fcmplt>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <huansic_motor_pid+0x202>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f921 	bl	8000d30 <__aeabi_ui2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fe f974 	bl	8000de0 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f009 f9be 	bl	800be7c <roundf>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb58 	bl	80011b8 <__aeabi_f2uiz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	e000      	b.n	8002b10 <huansic_motor_pid+0x204>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <huansic_motor_pid+0x21a>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	897a      	ldrh	r2, [r7, #10]
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
 8002b24:	e01c      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d105      	bne.n	8002b3a <huansic_motor_pid+0x22e>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	897a      	ldrh	r2, [r7, #10]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
 8002b38:	e012      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d105      	bne.n	8002b4e <huansic_motor_pid+0x242>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	897a      	ldrh	r2, [r7, #10]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b4c:	e008      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d104      	bne.n	8002b60 <huansic_motor_pid+0x254>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	897a      	ldrh	r2, [r7, #10]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d026      	beq.n	8002bb6 <huansic_motor_pid+0x2aa>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <huansic_motor_pid+0x270>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	893a      	ldrh	r2, [r7, #8]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8002b7a:	e01c      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d105      	bne.n	8002b90 <huansic_motor_pid+0x284>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	893a      	ldrh	r2, [r7, #8]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b8e:	e012      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d105      	bne.n	8002ba4 <huansic_motor_pid+0x298>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ba2:	e008      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d104      	bne.n	8002bb6 <huansic_motor_pid+0x2aa>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	893a      	ldrh	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40100000 	.word	0x40100000
 8002bc4:	40140000 	.word	0x40140000
 8002bc8:	bf800000 	.word	0xbf800000

08002bcc <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]

}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <huansic_xb_decodeHeader>:
void huansic_xb_init(XB_HandleTypeDef *hxb) {
	hxb->nextPackageLength = 6;		// header length
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
}

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7a99      	ldrb	r1, [r3, #10]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7adb      	ldrb	r3, [r3, #11]
 8002bf4:	404b      	eors	r3, r1
 8002bf6:	b2d9      	uxtb	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7b1b      	ldrb	r3, [r3, #12]
 8002bfc:	404b      	eors	r3, r1
 8002bfe:	b2d9      	uxtb	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7b5b      	ldrb	r3, [r3, #13]
 8002c04:	404b      	eors	r3, r1
 8002c06:	b2d9      	uxtb	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7b9b      	ldrb	r3, [r3, #14]
 8002c0c:	404b      	eors	r3, r1
 8002c0e:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <huansic_xb_decodeHeader+0x38>
		return 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e01d      	b.n	8002c54 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7a9b      	ldrb	r3, [r3, #10]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d005      	beq.n	8002c2c <huansic_xb_decodeHeader+0x4c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7a9b      	ldrb	r3, [r3, #10]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d001      	beq.n	8002c2c <huansic_xb_decodeHeader+0x4c>
		return 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e013      	b.n	8002c54 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7a9a      	ldrb	r2, [r3, #10]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7b9a      	ldrb	r2, [r3, #14]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 010a 	add.w	r1, r3, #10
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7a5b      	ldrb	r3, [r3, #9]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f006 ff2f 	bl	8009ab0 <HAL_UART_Receive_DMA>
	return 1;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	76fb      	strb	r3, [r7, #27]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7a1b      	ldrb	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 816d 	bne.w	8002f50 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8002c76:	7f7b      	ldrb	r3, [r7, #29]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	777a      	strb	r2, [r7, #29]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	7a9a      	ldrb	r2, [r3, #10]
 8002c84:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <huansic_xb_decodeBody+0x25c>)
 8002c86:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8002c88:	7f7b      	ldrb	r3, [r7, #29]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002c8e:	2300      	movs	r3, #0
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e075      	b.n	8002d80 <huansic_xb_decodeBody+0x124>
			index += 2;
 8002c94:	7f7b      	ldrb	r3, [r7, #29]
 8002c96:	3302      	adds	r3, #2
 8002c98:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8002c9a:	7f7b      	ldrb	r3, [r7, #29]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	777a      	strb	r2, [r7, #29]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	7a9b      	ldrb	r3, [r3, #10]
 8002ca8:	021a      	lsls	r2, r3, #8
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	b211      	sxth	r1, r2
 8002cae:	4a83      	ldr	r2, [pc, #524]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002cb0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8002cb4:	7f7b      	ldrb	r3, [r7, #29]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	777a      	strb	r2, [r7, #29]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	7a9a      	ldrb	r2, [r3, #10]
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	b211      	sxth	r1, r2
 8002cc6:	4a7d      	ldr	r2, [pc, #500]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002cc8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002ccc:	7f7b      	ldrb	r3, [r7, #29]
 8002cce:	3302      	adds	r3, #2
 8002cd0:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8002cd2:	7f7b      	ldrb	r3, [r7, #29]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	777a      	strb	r2, [r7, #29]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	7a9b      	ldrb	r3, [r3, #10]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	b211      	sxth	r1, r2
 8002ce6:	4a75      	ldr	r2, [pc, #468]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	460a      	mov	r2, r1
 8002cee:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8002cf0:	7f7b      	ldrb	r3, [r7, #29]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	7a9a      	ldrb	r2, [r3, #10]
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	b211      	sxth	r1, r2
 8002cfc:	4a6f      	ldr	r2, [pc, #444]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	460a      	mov	r2, r1
 8002d04:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002d06:	7f7b      	ldrb	r3, [r7, #29]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8002d0c:	7f7b      	ldrb	r3, [r7, #29]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	777a      	strb	r2, [r7, #29]
 8002d12:	461a      	mov	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	7a9b      	ldrb	r3, [r3, #10]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	7ffb      	ldrb	r3, [r7, #31]
 8002d1e:	b211      	sxth	r1, r2
 8002d20:	4a66      	ldr	r2, [pc, #408]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	460a      	mov	r2, r1
 8002d28:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002d2a:	7f7b      	ldrb	r3, [r7, #29]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	7a9a      	ldrb	r2, [r3, #10]
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	b211      	sxth	r1, r2
 8002d36:	4a61      	ldr	r2, [pc, #388]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	809a      	strh	r2, [r3, #4]
			index += 2;
 8002d40:	7f7b      	ldrb	r3, [r7, #29]
 8002d42:	3302      	adds	r3, #2
 8002d44:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8002d46:	7f7b      	ldrb	r3, [r7, #29]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	777a      	strb	r2, [r7, #29]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	7a9b      	ldrb	r3, [r3, #10]
 8002d54:	021a      	lsls	r2, r3, #8
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	b211      	sxth	r1, r2
 8002d5a:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	460a      	mov	r2, r1
 8002d62:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8002d64:	7f7b      	ldrb	r3, [r7, #29]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	7a9a      	ldrb	r2, [r3, #10]
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	b211      	sxth	r1, r2
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <huansic_xb_decodeBody+0x260>)
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	460a      	mov	r2, r1
 8002d78:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	7ffb      	ldrb	r3, [r7, #31]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d986      	bls.n	8002c94 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8002d86:	7f7b      	ldrb	r3, [r7, #29]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8002d8c:	7f7b      	ldrb	r3, [r7, #29]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	777a      	strb	r2, [r7, #29]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	7a9b      	ldrb	r3, [r3, #10]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002d9e:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8002da0:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	4a46      	ldr	r2, [pc, #280]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002da8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002daa:	7f7b      	ldrb	r3, [r7, #29]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	777a      	strb	r2, [r7, #29]
 8002db0:	461a      	mov	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	7a9b      	ldrb	r3, [r3, #10]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	4a3f      	ldr	r2, [pc, #252]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002dc2:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4a3d      	ldr	r2, [pc, #244]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002dcc:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002dce:	7f7b      	ldrb	r3, [r7, #29]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	777a      	strb	r2, [r7, #29]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	7a9b      	ldrb	r3, [r3, #10]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002de6:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	4a34      	ldr	r2, [pc, #208]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002df0:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002df2:	7f7b      	ldrb	r3, [r7, #29]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	777a      	strb	r2, [r7, #29]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	7a9b      	ldrb	r3, [r3, #10]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	4a2d      	ldr	r2, [pc, #180]	; (8002ec0 <huansic_xb_decodeBody+0x264>)
 8002e0a:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002e0c:	7f7b      	ldrb	r3, [r7, #29]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	7a9b      	ldrb	r3, [r3, #10]
 8002e14:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002e16:	2300      	movs	r3, #0
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e03e      	b.n	8002e9a <huansic_xb_decodeBody+0x23e>
			index += 2;
 8002e1c:	7f7b      	ldrb	r3, [r7, #29]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002e22:	7f7b      	ldrb	r3, [r7, #29]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	777a      	strb	r2, [r7, #29]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	7a9b      	ldrb	r3, [r3, #10]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	b211      	sxth	r1, r2
 8002e36:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <huansic_xb_decodeBody+0x268>)
 8002e38:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002e3c:	7f7b      	ldrb	r3, [r7, #29]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	777a      	strb	r2, [r7, #29]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	7a9a      	ldrb	r2, [r3, #10]
 8002e4a:	7ffb      	ldrb	r3, [r7, #31]
 8002e4c:	b211      	sxth	r1, r2
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <huansic_xb_decodeBody+0x268>)
 8002e50:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002e54:	7f7b      	ldrb	r3, [r7, #29]
 8002e56:	3302      	adds	r3, #2
 8002e58:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002e5a:	7f7b      	ldrb	r3, [r7, #29]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	777a      	strb	r2, [r7, #29]
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	7a9b      	ldrb	r3, [r3, #10]
 8002e68:	021a      	lsls	r2, r3, #8
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	b211      	sxth	r1, r2
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <huansic_xb_decodeBody+0x268>)
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	460a      	mov	r2, r1
 8002e76:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8002e78:	7f7b      	ldrb	r3, [r7, #29]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	777a      	strb	r2, [r7, #29]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	7a9a      	ldrb	r2, [r3, #10]
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	b211      	sxth	r1, r2
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <huansic_xb_decodeBody+0x268>)
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	460a      	mov	r2, r1
 8002e92:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002e94:	7ffb      	ldrb	r3, [r7, #31]
 8002e96:	3301      	adds	r3, #1
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	7ffa      	ldrb	r2, [r7, #31]
 8002e9c:	7efb      	ldrb	r3, [r7, #27]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3bc      	bcc.n	8002e1c <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8002ea2:	7f7b      	ldrb	r3, [r7, #29]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8002ea8:	7f7b      	ldrb	r3, [r7, #29]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	7a9b      	ldrb	r3, [r3, #10]
 8002eb0:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e046      	b.n	8002f46 <huansic_xb_decodeBody+0x2ea>
 8002eb8:	20000b79 	.word	0x20000b79
 8002ebc:	20000b84 	.word	0x20000b84
 8002ec0:	20000b7c 	.word	0x20000b7c
 8002ec4:	20000bac 	.word	0x20000bac
			index += 2;
 8002ec8:	7f7b      	ldrb	r3, [r7, #29]
 8002eca:	3302      	adds	r3, #2
 8002ecc:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002ece:	7f7b      	ldrb	r3, [r7, #29]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	777a      	strb	r2, [r7, #29]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	7a9b      	ldrb	r3, [r3, #10]
 8002edc:	021a      	lsls	r2, r3, #8
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	b211      	sxth	r1, r2
 8002ee2:	4a9f      	ldr	r2, [pc, #636]	; (8003160 <huansic_xb_decodeBody+0x504>)
 8002ee4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002ee8:	7f7b      	ldrb	r3, [r7, #29]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	777a      	strb	r2, [r7, #29]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	7a9a      	ldrb	r2, [r3, #10]
 8002ef6:	7ffb      	ldrb	r3, [r7, #31]
 8002ef8:	b211      	sxth	r1, r2
 8002efa:	4a99      	ldr	r2, [pc, #612]	; (8003160 <huansic_xb_decodeBody+0x504>)
 8002efc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002f00:	7f7b      	ldrb	r3, [r7, #29]
 8002f02:	3302      	adds	r3, #2
 8002f04:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002f06:	7f7b      	ldrb	r3, [r7, #29]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	777a      	strb	r2, [r7, #29]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	7a9b      	ldrb	r3, [r3, #10]
 8002f14:	021a      	lsls	r2, r3, #8
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	b211      	sxth	r1, r2
 8002f1a:	4a91      	ldr	r2, [pc, #580]	; (8003160 <huansic_xb_decodeBody+0x504>)
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	460a      	mov	r2, r1
 8002f22:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002f24:	7f7b      	ldrb	r3, [r7, #29]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	777a      	strb	r2, [r7, #29]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	7a9a      	ldrb	r2, [r3, #10]
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	b211      	sxth	r1, r2
 8002f36:	4a8a      	ldr	r2, [pc, #552]	; (8003160 <huansic_xb_decodeBody+0x504>)
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	3301      	adds	r3, #1
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	7ffa      	ldrb	r2, [r7, #31]
 8002f48:	7efb      	ldrb	r3, [r7, #27]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3bc      	bcc.n	8002ec8 <huansic_xb_decodeBody+0x26c>
 8002f4e:	e31a      	b.n	8003586 <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7a1b      	ldrb	r3, [r3, #8]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	f040 8316 	bne.w	8003586 <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8002f5a:	7f7b      	ldrb	r3, [r7, #29]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	777a      	strb	r2, [r7, #29]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	7a9a      	ldrb	r2, [r3, #10]
 8002f68:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <huansic_xb_decodeBody+0x508>)
 8002f6a:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8002f6c:	7f7b      	ldrb	r3, [r7, #29]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	777a      	strb	r2, [r7, #29]
 8002f72:	461a      	mov	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	7a9b      	ldrb	r3, [r3, #10]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b7a      	ldr	r3, [pc, #488]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002f7e:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8002f80:	4b79      	ldr	r3, [pc, #484]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	4a78      	ldr	r2, [pc, #480]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002f88:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002f8a:	7f7b      	ldrb	r3, [r7, #29]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	777a      	strb	r2, [r7, #29]
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	7a9b      	ldrb	r3, [r3, #10]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b73      	ldr	r3, [pc, #460]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	4a71      	ldr	r2, [pc, #452]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fa2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002fa4:	4b70      	ldr	r3, [pc, #448]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fac:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002fae:	7f7b      	ldrb	r3, [r7, #29]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	777a      	strb	r2, [r7, #29]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	7a9b      	ldrb	r3, [r3, #10]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	4a68      	ldr	r2, [pc, #416]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fc6:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	4a66      	ldr	r2, [pc, #408]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fd0:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002fd2:	7f7b      	ldrb	r3, [r7, #29]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	777a      	strb	r2, [r7, #29]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	7a9b      	ldrb	r3, [r3, #10]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b61      	ldr	r3, [pc, #388]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	4a5f      	ldr	r2, [pc, #380]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002fea:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8002fec:	4b5f      	ldr	r3, [pc, #380]	; (800316c <huansic_xb_decodeBody+0x510>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <huansic_xb_decodeBody+0x50c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	4a5e      	ldr	r2, [pc, #376]	; (8003170 <huansic_xb_decodeBody+0x514>)
 8002ff8:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8002ffa:	7f7b      	ldrb	r3, [r7, #29]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	777a      	strb	r2, [r7, #29]
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	7a9b      	ldrb	r3, [r3, #10]
 8003008:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003010:	7f7b      	ldrb	r3, [r7, #29]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	777a      	strb	r2, [r7, #29]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	7a9b      	ldrb	r3, [r3, #10]
 800301e:	461a      	mov	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800302c:	7f7b      	ldrb	r3, [r7, #29]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	777a      	strb	r2, [r7, #29]
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	7a9b      	ldrb	r3, [r3, #10]
 800303a:	461a      	mov	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003048:	7f7b      	ldrb	r3, [r7, #29]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	777a      	strb	r2, [r7, #29]
 800304e:	461a      	mov	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	7a9b      	ldrb	r3, [r3, #10]
 8003056:	461a      	mov	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a43      	ldr	r2, [pc, #268]	; (8003174 <huansic_xb_decodeBody+0x518>)
 8003066:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8003068:	7f7b      	ldrb	r3, [r7, #29]
 800306a:	3302      	adds	r3, #2
 800306c:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 800306e:	7f7b      	ldrb	r3, [r7, #29]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	777a      	strb	r2, [r7, #29]
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	7a9b      	ldrb	r3, [r3, #10]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b21a      	sxth	r2, r3
 8003080:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <huansic_xb_decodeBody+0x51c>)
 8003082:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8003084:	7f7b      	ldrb	r3, [r7, #29]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	777a      	strb	r2, [r7, #29]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	7a9b      	ldrb	r3, [r3, #10]
 8003092:	b21a      	sxth	r2, r3
 8003094:	4b38      	ldr	r3, [pc, #224]	; (8003178 <huansic_xb_decodeBody+0x51c>)
 8003096:	801a      	strh	r2, [r3, #0]
		index += 2;
 8003098:	7f7b      	ldrb	r3, [r7, #29]
 800309a:	3302      	adds	r3, #2
 800309c:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 800309e:	7f7b      	ldrb	r3, [r7, #29]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	777a      	strb	r2, [r7, #29]
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	7a9b      	ldrb	r3, [r3, #10]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	4b31      	ldr	r3, [pc, #196]	; (8003178 <huansic_xb_decodeBody+0x51c>)
 80030b2:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 80030b4:	7f7b      	ldrb	r3, [r7, #29]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	777a      	strb	r2, [r7, #29]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	7a9b      	ldrb	r3, [r3, #10]
 80030c2:	b21a      	sxth	r2, r3
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <huansic_xb_decodeBody+0x51c>)
 80030c6:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 80030c8:	7f7b      	ldrb	r3, [r7, #29]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	777a      	strb	r2, [r7, #29]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	7a9b      	ldrb	r3, [r3, #10]
 80030d6:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80030de:	7f7b      	ldrb	r3, [r7, #29]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	777a      	strb	r2, [r7, #29]
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	7a9b      	ldrb	r3, [r3, #10]
 80030ec:	461a      	mov	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80030fa:	7f7b      	ldrb	r3, [r7, #29]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	777a      	strb	r2, [r7, #29]
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	7a9b      	ldrb	r3, [r3, #10]
 8003108:	461a      	mov	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003116:	7f7b      	ldrb	r3, [r7, #29]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	777a      	strb	r2, [r7, #29]
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	7a9b      	ldrb	r3, [r3, #10]
 8003124:	461a      	mov	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <huansic_xb_decodeBody+0x520>)
 8003134:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <huansic_xb_decodeBody+0x524>)
 8003138:	f107 0308 	add.w	r3, r7, #8
 800313c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 800314a:	7f7b      	ldrb	r3, [r7, #29]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	777a      	strb	r2, [r7, #29]
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	7a9b      	ldrb	r3, [r3, #10]
 8003158:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800315a:	2300      	movs	r3, #0
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e0fd      	b.n	800335c <huansic_xb_decodeBody+0x700>
 8003160:	20000bb8 	.word	0x20000bb8
 8003164:	20000b7a 	.word	0x20000b7a
 8003168:	20000b80 	.word	0x20000b80
 800316c:	20000b7c 	.word	0x20000b7c
 8003170:	20000be0 	.word	0x20000be0
 8003174:	20000bd8 	.word	0x20000bd8
 8003178:	20000bc4 	.word	0x20000bc4
 800317c:	20000bdc 	.word	0x20000bdc
 8003180:	0800ce90 	.word	0x0800ce90
			temp = hxb->buffer[index + 24];
 8003184:	7f7b      	ldrb	r3, [r7, #29]
 8003186:	3318      	adds	r3, #24
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	7a9b      	ldrb	r3, [r3, #10]
 800318e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 8003196:	7f7b      	ldrb	r3, [r7, #29]
 8003198:	3319      	adds	r3, #25
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	7a9b      	ldrb	r3, [r3, #10]
 80031a0:	461a      	mov	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80031ae:	7f7b      	ldrb	r3, [r7, #29]
 80031b0:	331a      	adds	r3, #26
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	7a9b      	ldrb	r3, [r3, #10]
 80031b8:	461a      	mov	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 80031c6:	7f7b      	ldrb	r3, [r7, #29]
 80031c8:	331b      	adds	r3, #27
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	7a9b      	ldrb	r3, [r3, #10]
 80031d0:	461a      	mov	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fa67 	bl	80026b0 <huansic_order_new>
 80031e2:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <huansic_xb_decodeBody+0x5a0>
				index += 28;
 80031ea:	7f7b      	ldrb	r3, [r7, #29]
 80031ec:	331c      	adds	r3, #28
 80031ee:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fce9 	bl	8002bcc <custom_order_new_failed>
				continue;
 80031fa:	e0ac      	b.n	8003356 <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80031fc:	7f7b      	ldrb	r3, [r7, #29]
 80031fe:	3302      	adds	r3, #2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	7a9b      	ldrb	r3, [r3, #10]
 8003206:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8003208:	b21a      	sxth	r2, r3
 800320a:	7f7b      	ldrb	r3, [r7, #29]
 800320c:	3303      	adds	r3, #3
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	440b      	add	r3, r1
 8003212:	7a9b      	ldrb	r3, [r3, #10]
 8003214:	b21b      	sxth	r3, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800321e:	7f7b      	ldrb	r3, [r7, #29]
 8003220:	3306      	adds	r3, #6
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	7a9b      	ldrb	r3, [r3, #10]
 8003228:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800322a:	b21a      	sxth	r2, r3
 800322c:	7f7b      	ldrb	r3, [r7, #29]
 800322e:	3307      	adds	r3, #7
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	440b      	add	r3, r1
 8003234:	7a9b      	ldrb	r3, [r3, #10]
 8003236:	b21b      	sxth	r3, r3
 8003238:	4313      	orrs	r3, r2
 800323a:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8003240:	7f7b      	ldrb	r3, [r7, #29]
 8003242:	330a      	adds	r3, #10
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	7a9b      	ldrb	r3, [r3, #10]
 800324a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 800324c:	b21a      	sxth	r2, r3
 800324e:	7f7b      	ldrb	r3, [r7, #29]
 8003250:	330b      	adds	r3, #11
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	440b      	add	r3, r1
 8003256:	7a9b      	ldrb	r3, [r3, #10]
 8003258:	b21b      	sxth	r3, r3
 800325a:	4313      	orrs	r3, r2
 800325c:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003262:	7f7b      	ldrb	r3, [r7, #29]
 8003264:	330e      	adds	r3, #14
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	7a9b      	ldrb	r3, [r3, #10]
 800326c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 800326e:	b21a      	sxth	r2, r3
 8003270:	7f7b      	ldrb	r3, [r7, #29]
 8003272:	330f      	adds	r3, #15
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	440b      	add	r3, r1
 8003278:	7a9b      	ldrb	r3, [r3, #10]
 800327a:	b21b      	sxth	r3, r3
 800327c:	4313      	orrs	r3, r2
 800327e:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8003284:	7f7b      	ldrb	r3, [r7, #29]
 8003286:	3310      	adds	r3, #16
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	7a9b      	ldrb	r3, [r3, #10]
 800328e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8003296:	7f7b      	ldrb	r3, [r7, #29]
 8003298:	3311      	adds	r3, #17
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	7a9b      	ldrb	r3, [r3, #10]
 80032a0:	461a      	mov	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80032ae:	7f7b      	ldrb	r3, [r7, #29]
 80032b0:	3312      	adds	r3, #18
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	7a9b      	ldrb	r3, [r3, #10]
 80032b8:	461a      	mov	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80032c6:	7f7b      	ldrb	r3, [r7, #29]
 80032c8:	3313      	adds	r3, #19
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	7a9b      	ldrb	r3, [r3, #10]
 80032d0:	461a      	mov	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 80032de:	7f7b      	ldrb	r3, [r7, #29]
 80032e0:	3314      	adds	r3, #20
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	7a9b      	ldrb	r3, [r3, #10]
 80032e8:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80032f0:	7f7b      	ldrb	r3, [r7, #29]
 80032f2:	3315      	adds	r3, #21
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	7a9b      	ldrb	r3, [r3, #10]
 80032fa:	461a      	mov	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8003308:	7f7b      	ldrb	r3, [r7, #29]
 800330a:	3316      	adds	r3, #22
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	7a9b      	ldrb	r3, [r3, #10]
 8003312:	461a      	mov	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8003320:	7f7b      	ldrb	r3, [r7, #29]
 8003322:	3317      	adds	r3, #23
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	7a9b      	ldrb	r3, [r3, #10]
 800332a:	461a      	mov	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 800333c:	7f7b      	ldrb	r3, [r7, #29]
 800333e:	331c      	adds	r3, #28
 8003340:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	7f3b      	ldrb	r3, [r7, #28]
 8003348:	1c59      	adds	r1, r3, #1
 800334a:	7739      	strb	r1, [r7, #28]
 800334c:	b252      	sxtb	r2, r2
 800334e:	3320      	adds	r3, #32
 8003350:	443b      	add	r3, r7
 8003352:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8003356:	7ffb      	ldrb	r3, [r7, #31]
 8003358:	3301      	adds	r3, #1
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	7ffa      	ldrb	r2, [r7, #31]
 800335e:	7efb      	ldrb	r3, [r7, #27]
 8003360:	429a      	cmp	r2, r3
 8003362:	f4ff af0f 	bcc.w	8003184 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 8003366:	2300      	movs	r3, #0
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e02d      	b.n	80033c8 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 800336c:	7ffb      	ldrb	r3, [r7, #31]
 800336e:	4a90      	ldr	r2, [pc, #576]	; (80035b0 <huansic_xb_decodeBody+0x954>)
 8003370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d022      	beq.n	80033c2 <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 800337c:	2300      	movs	r3, #0
 800337e:	77bb      	strb	r3, [r7, #30]
 8003380:	e011      	b.n	80033a6 <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	4a8a      	ldr	r2, [pc, #552]	; (80035b0 <huansic_xb_decodeBody+0x954>)
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	7fba      	ldrb	r2, [r7, #30]
 800338e:	3220      	adds	r2, #32
 8003390:	443a      	add	r2, r7
 8003392:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 8003396:	4293      	cmp	r3, r2
 8003398:	d102      	bne.n	80033a0 <huansic_xb_decodeBody+0x744>
						j = 255;
 800339a:	23ff      	movs	r3, #255	; 0xff
 800339c:	77bb      	strb	r3, [r7, #30]
						break;
 800339e:	e006      	b.n	80033ae <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 80033a0:	7fbb      	ldrb	r3, [r7, #30]
 80033a2:	3301      	adds	r3, #1
 80033a4:	77bb      	strb	r3, [r7, #30]
 80033a6:	7ffa      	ldrb	r2, [r7, #31]
 80033a8:	7f3b      	ldrb	r3, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3e9      	bcc.n	8003382 <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 80033ae:	7fbb      	ldrb	r3, [r7, #30]
 80033b0:	2bff      	cmp	r3, #255	; 0xff
 80033b2:	d006      	beq.n	80033c2 <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 80033b4:	7ffb      	ldrb	r3, [r7, #31]
 80033b6:	4a7e      	ldr	r2, [pc, #504]	; (80035b0 <huansic_xb_decodeBody+0x954>)
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff f9d1 	bl	8002764 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	3301      	adds	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	7ffb      	ldrb	r3, [r7, #31]
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d9ce      	bls.n	800336c <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 80033ce:	7f7b      	ldrb	r3, [r7, #29]
 80033d0:	3318      	adds	r3, #24
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	7a9b      	ldrb	r3, [r3, #10]
 80033d8:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 80033e0:	7f7b      	ldrb	r3, [r7, #29]
 80033e2:	3319      	adds	r3, #25
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	7a9b      	ldrb	r3, [r3, #10]
 80033ea:	461a      	mov	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 80033f8:	7f7b      	ldrb	r3, [r7, #29]
 80033fa:	331a      	adds	r3, #26
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	7a9b      	ldrb	r3, [r3, #10]
 8003402:	461a      	mov	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8003410:	7f7b      	ldrb	r3, [r7, #29]
 8003412:	331b      	adds	r3, #27
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	7a9b      	ldrb	r3, [r3, #10]
 800341a:	461a      	mov	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	b25b      	sxtb	r3, r3
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f942 	bl	80026b0 <huansic_order_new>
 800342c:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <huansic_xb_decodeBody+0x7ea>
			index += 28;
 8003434:	7f7b      	ldrb	r3, [r7, #29]
 8003436:	331c      	adds	r3, #28
 8003438:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fbc4 	bl	8002bcc <custom_order_new_failed>
 8003444:	e09f      	b.n	8003586 <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003446:	7f7b      	ldrb	r3, [r7, #29]
 8003448:	3302      	adds	r3, #2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	7a9b      	ldrb	r3, [r3, #10]
 8003450:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8003452:	b21a      	sxth	r2, r3
 8003454:	7f7b      	ldrb	r3, [r7, #29]
 8003456:	3303      	adds	r3, #3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	440b      	add	r3, r1
 800345c:	7a9b      	ldrb	r3, [r3, #10]
 800345e:	b21b      	sxth	r3, r3
 8003460:	4313      	orrs	r3, r2
 8003462:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003468:	7f7b      	ldrb	r3, [r7, #29]
 800346a:	3306      	adds	r3, #6
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	7a9b      	ldrb	r3, [r3, #10]
 8003472:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8003474:	b21a      	sxth	r2, r3
 8003476:	7f7b      	ldrb	r3, [r7, #29]
 8003478:	3307      	adds	r3, #7
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	440b      	add	r3, r1
 800347e:	7a9b      	ldrb	r3, [r3, #10]
 8003480:	b21b      	sxth	r3, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800348a:	7f7b      	ldrb	r3, [r7, #29]
 800348c:	330a      	adds	r3, #10
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	7a9b      	ldrb	r3, [r3, #10]
 8003494:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8003496:	b21a      	sxth	r2, r3
 8003498:	7f7b      	ldrb	r3, [r7, #29]
 800349a:	330b      	adds	r3, #11
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	440b      	add	r3, r1
 80034a0:	7a9b      	ldrb	r3, [r3, #10]
 80034a2:	b21b      	sxth	r3, r3
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80034ac:	7f7b      	ldrb	r3, [r7, #29]
 80034ae:	330e      	adds	r3, #14
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	7a9b      	ldrb	r3, [r3, #10]
 80034b6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80034b8:	b21a      	sxth	r2, r3
 80034ba:	7f7b      	ldrb	r3, [r7, #29]
 80034bc:	330f      	adds	r3, #15
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	440b      	add	r3, r1
 80034c2:	7a9b      	ldrb	r3, [r3, #10]
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80034ce:	7f7b      	ldrb	r3, [r7, #29]
 80034d0:	3310      	adds	r3, #16
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	7a9b      	ldrb	r3, [r3, #10]
 80034d8:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80034e0:	7f7b      	ldrb	r3, [r7, #29]
 80034e2:	3311      	adds	r3, #17
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	7a9b      	ldrb	r3, [r3, #10]
 80034ea:	461a      	mov	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80034f8:	7f7b      	ldrb	r3, [r7, #29]
 80034fa:	3312      	adds	r3, #18
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	7a9b      	ldrb	r3, [r3, #10]
 8003502:	461a      	mov	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8003510:	7f7b      	ldrb	r3, [r7, #29]
 8003512:	3313      	adds	r3, #19
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	7a9b      	ldrb	r3, [r3, #10]
 800351a:	461a      	mov	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8003528:	7f7b      	ldrb	r3, [r7, #29]
 800352a:	3314      	adds	r3, #20
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	7a9b      	ldrb	r3, [r3, #10]
 8003532:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800353a:	7f7b      	ldrb	r3, [r7, #29]
 800353c:	3315      	adds	r3, #21
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	7a9b      	ldrb	r3, [r3, #10]
 8003544:	461a      	mov	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8003552:	7f7b      	ldrb	r3, [r7, #29]
 8003554:	3316      	adds	r3, #22
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	7a9b      	ldrb	r3, [r3, #10]
 800355c:	461a      	mov	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 800356a:	7f7b      	ldrb	r3, [r7, #29]
 800356c:	3317      	adds	r3, #23
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	7a9b      	ldrb	r3, [r3, #10]
 8003574:	461a      	mov	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2206      	movs	r2, #6
 800358a:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 010a 	add.w	r1, r3, #10
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7a5b      	ldrb	r3, [r3, #9]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	f006 fa84 	bl	8009ab0 <HAL_UART_Receive_DMA>
}
 80035a8:	bf00      	nop
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20007f84 	.word	0x20007f84

080035b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  	HAL_Init();
 80035ba:	f002 ffd9 	bl	8006570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035be:	f000 f9ed 	bl	800399c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035c2:	f000 fde7 	bl	8004194 <MX_GPIO_Init>
  MX_DMA_Init();
 80035c6:	f000 fdbf 	bl	8004148 <MX_DMA_Init>
  MX_I2C1_Init();
 80035ca:	f000 fa2d 	bl	8003a28 <MX_I2C1_Init>
  MX_TIM1_Init();
 80035ce:	f000 fa59 	bl	8003a84 <MX_TIM1_Init>
  MX_TIM2_Init();
 80035d2:	f000 fb1b 	bl	8003c0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80035d6:	f000 fb6d 	bl	8003cb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80035da:	f000 fbbf 	bl	8003d5c <MX_TIM4_Init>
  MX_TIM5_Init();
 80035de:	f000 fc11 	bl	8003e04 <MX_TIM5_Init>
  MX_TIM8_Init();
 80035e2:	f000 fc99 	bl	8003f18 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80035e6:	f000 fd5b 	bl	80040a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80035ea:	f000 fd83 	bl	80040f4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80035ee:	f000 fc5d 	bl	8003eac <MX_TIM6_Init>
  ssd1306_Init();
 80035f2:	f001 fd61 	bl	80050b8 <ssd1306_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	cmotor_lf.encoderInverted = 1;
 80035f6:	4bb5      	ldr	r3, [pc, #724]	; (80038cc <main+0x318>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 80035fe:	4bb4      	ldr	r3, [pc, #720]	; (80038d0 <main+0x31c>)
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 8003606:	f000 fe1b 	bl	8004240 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 800360a:	f000 fe4d 	bl	80042a8 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 800360e:	f000 fe7f 	bl	8004310 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8003612:	f000 feb1 	bl	8004378 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8003616:	f000 fee3 	bl	80043e0 <HUAN_IMU_Init>
//	HUAN_ZIGBEE_Init();
	MING_zigbee_Init();
 800361a:	f000 feef 	bl	80043fc <MING_zigbee_Init>
	order_list_init();
 800361e:	f001 f90b 	bl	8004838 <order_list_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 8003622:	2014      	movs	r0, #20
 8003624:	f003 f806 	bl	8006634 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8003628:	48aa      	ldr	r0, [pc, #680]	; (80038d4 <main+0x320>)
 800362a:	f005 f829 	bl	8008680 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 800362e:	49aa      	ldr	r1, [pc, #680]	; (80038d8 <main+0x324>)
 8003630:	48aa      	ldr	r0, [pc, #680]	; (80038dc <main+0x328>)
 8003632:	f007 fb63 	bl	800acfc <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 8003636:	4aaa      	ldr	r2, [pc, #680]	; (80038e0 <main+0x32c>)
 8003638:	2301      	movs	r3, #1
 800363a:	ca06      	ldmia	r2, {r1, r2}
 800363c:	48a7      	ldr	r0, [pc, #668]	; (80038dc <main+0x328>)
 800363e:	f001 fec9 	bl	80053d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003642:	f001 fdc5 	bl	80051d0 <ssd1306_UpdateScreen>

	// test A*
	myCoord.x = 0;
 8003646:	4ba7      	ldr	r3, [pc, #668]	; (80038e4 <main+0x330>)
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 800364c:	4ba5      	ldr	r3, [pc, #660]	; (80038e4 <main+0x330>)
 800364e:	2200      	movs	r2, #0
 8003650:	805a      	strh	r2, [r3, #2]
//	Coordinate goal;
//	goal.x = 60;
//	goal.y = 0;
	EstiCoord.x = (float)myCoord.x;
 8003652:	4ba4      	ldr	r3, [pc, #656]	; (80038e4 <main+0x330>)
 8003654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fb6d 	bl	8000d38 <__aeabi_i2f>
 800365e:	4603      	mov	r3, r0
 8003660:	4aa1      	ldr	r2, [pc, #644]	; (80038e8 <main+0x334>)
 8003662:	6013      	str	r3, [r2, #0]
	EstiCoord.y = (float)myCoord.y;
 8003664:	4b9f      	ldr	r3, [pc, #636]	; (80038e4 <main+0x330>)
 8003666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fb64 	bl	8000d38 <__aeabi_i2f>
 8003670:	4603      	mov	r3, r0
 8003672:	4a9d      	ldr	r2, [pc, #628]	; (80038e8 <main+0x334>)
 8003674:	6053      	str	r3, [r2, #4]
	CoordinateUpdate = 0;
 8003676:	4b9d      	ldr	r3, [pc, #628]	; (80038ec <main+0x338>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

    	GameStatus_edc24 GameStatus = getGameStatus();
 800367c:	f002 fdee 	bl	800625c <getGameStatus>
 8003680:	4603      	mov	r3, r0
 8003682:	757b      	strb	r3, [r7, #21]
    	GameStage_edc24 GameStage = getGameStage();
 8003684:	f002 fefc 	bl	8006480 <getGameStage>
 8003688:	4603      	mov	r3, r0
 800368a:	753b      	strb	r3, [r7, #20]
		if(GameStatus == GameStandby){		// if the game is not running
 800368c:	7d7b      	ldrb	r3, [r7, #21]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d133      	bne.n	80036fa <main+0x146>
	    	LED1_ON;
 8003692:	2201      	movs	r2, #1
 8003694:	2101      	movs	r1, #1
 8003696:	4896      	ldr	r0, [pc, #600]	; (80038f0 <main+0x33c>)
 8003698:	f003 ff14 	bl	80074c4 <HAL_GPIO_WritePin>
	    	HAL_Delay(1000);
 800369c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036a0:	f002 ffc8 	bl	8006634 <HAL_Delay>
	    	LED1_OFF;
 80036a4:	2200      	movs	r2, #0
 80036a6:	2101      	movs	r1, #1
 80036a8:	4891      	ldr	r0, [pc, #580]	; (80038f0 <main+0x33c>)
 80036aa:	f003 ff0b 	bl	80074c4 <HAL_GPIO_WritePin>
 80036ae:	e7e5      	b.n	800367c <main+0xc8>
		}
		else
		{
			while (GameStage == Prematch) {		// pre-match
				chao_move_angle(0, 0);
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	f04f 0000 	mov.w	r0, #0
 80036b8:	f7fe fbae 	bl	8001e18 <chao_move_angle>
				// find angle offset
				initangleZ = -himu.theta[2];
 80036bc:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <main+0x340>)
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80036c4:	4a8c      	ldr	r2, [pc, #560]	; (80038f8 <main+0x344>)
 80036c6:	6013      	str	r3, [r2, #0]
				// do some initialization
				// get obstacle list
				for(uint8_t i = 0; i < 5; i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
 80036cc:	e010      	b.n	80036f0 <main+0x13c>
				{
					obstacles[i] = getOneBarrier(i);
 80036ce:	7dfc      	ldrb	r4, [r7, #23]
 80036d0:	4d8a      	ldr	r5, [pc, #552]	; (80038fc <main+0x348>)
 80036d2:	463b      	mov	r3, r7
 80036d4:	7dfa      	ldrb	r2, [r7, #23]
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fedf 	bl	800649c <getOneBarrier>
 80036de:	00e3      	lsls	r3, r4, #3
 80036e0:	442b      	add	r3, r5
 80036e2:	463a      	mov	r2, r7
 80036e4:	6810      	ldr	r0, [r2, #0]
 80036e6:	6851      	ldr	r1, [r2, #4]
 80036e8:	c303      	stmia	r3!, {r0, r1}
				for(uint8_t i = 0; i < 5; i++)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	3301      	adds	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d9eb      	bls.n	80036ce <main+0x11a>
				}
				Cal_Battery_Coord();
 80036f6:	f002 fb07 	bl	8005d08 <Cal_Battery_Coord>
			while (GameStage == Prematch) {		// pre-match
 80036fa:	7d3b      	ldrb	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0d7      	beq.n	80036b0 <main+0xfc>
			}

			while (GameStage == FirstHalf){			// first-half
 8003700:	e09b      	b.n	800383a <main+0x286>

				if(task_mode==0){
 8003702:	4b7f      	ldr	r3, [pc, #508]	; (8003900 <main+0x34c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d115      	bne.n	8003736 <main+0x182>
					//setChargingPile
					uint8_t i;
					for(i=0;i<3;i++){
 800370a:	2300      	movs	r3, #0
 800370c:	75bb      	strb	r3, [r7, #22]
 800370e:	e00b      	b.n	8003728 <main+0x174>
						GotoDestination(allyBeacons[i], 1);
 8003710:	7dbb      	ldrb	r3, [r7, #22]
 8003712:	4a7c      	ldr	r2, [pc, #496]	; (8003904 <main+0x350>)
 8003714:	2101      	movs	r1, #1
 8003716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800371a:	f001 f95b 	bl	80049d4 <GotoDestination>
						setChargingPile();
 800371e:	f002 fef1 	bl	8006504 <setChargingPile>
					for(i=0;i<3;i++){
 8003722:	7dbb      	ldrb	r3, [r7, #22]
 8003724:	3301      	adds	r3, #1
 8003726:	75bb      	strb	r3, [r7, #22]
 8003728:	7dbb      	ldrb	r3, [r7, #22]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d9f0      	bls.n	8003710 <main+0x15c>
					}
					task_mode = 1;
 800372e:	4b74      	ldr	r3, [pc, #464]	; (8003900 <main+0x34c>)
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e081      	b.n	800383a <main+0x286>
				}
				else {
					if(myCharge < 200){
 8003736:	4b74      	ldr	r3, [pc, #464]	; (8003908 <main+0x354>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2bc7      	cmp	r3, #199	; 0xc7
 800373c:	dc02      	bgt.n	8003744 <main+0x190>
						task_mode = 3;
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <main+0x34c>)
 8003740:	2203      	movs	r2, #3
 8003742:	701a      	strb	r2, [r3, #0]
					}
					if(task_mode == 1){
 8003744:	4b6e      	ldr	r3, [pc, #440]	; (8003900 <main+0x34c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <main+0x1a8>
						//merchant = Get_nearest_order();
						GotoDestination(merchant,1);
 800374c:	2101      	movs	r1, #1
 800374e:	6938      	ldr	r0, [r7, #16]
 8003750:	f001 f940 	bl	80049d4 <GotoDestination>
						task_mode = 4;
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <main+0x34c>)
 8003756:	2204      	movs	r2, #4
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e06e      	b.n	800383a <main+0x286>
					}
					else if(task_mode == 2){
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <main+0x34c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d107      	bne.n	8003774 <main+0x1c0>
						//consumer = Get_nearest_consumer();
						GotoDestination(consumer,1);
 8003764:	2101      	movs	r1, #1
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f001 f934 	bl	80049d4 <GotoDestination>
						task_mode = 4;
 800376c:	4b64      	ldr	r3, [pc, #400]	; (8003900 <main+0x34c>)
 800376e:	2204      	movs	r2, #4
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e062      	b.n	800383a <main+0x286>
					}
					else if(task_mode == 3){
 8003774:	4b62      	ldr	r3, [pc, #392]	; (8003900 <main+0x34c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d10f      	bne.n	800379c <main+0x1e8>
						Beacon = Get_nearest_Beacon();
 800377c:	f002 fbe0 	bl	8005f40 <Get_nearest_Beacon>
 8003780:	4603      	mov	r3, r0
 8003782:	60bb      	str	r3, [r7, #8]
						GotoDestination(Beacon,1);
 8003784:	2101      	movs	r1, #1
 8003786:	68b8      	ldr	r0, [r7, #8]
 8003788:	f001 f924 	bl	80049d4 <GotoDestination>
						HAL_Delay(1000);
 800378c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003790:	f002 ff50 	bl	8006634 <HAL_Delay>
						task_mode = 4;
 8003794:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <main+0x34c>)
 8003796:	2204      	movs	r2, #4
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e04e      	b.n	800383a <main+0x286>
					}
					else
					{
						merchant = Get_nearest_order();
 800379c:	f001 f89a 	bl	80048d4 <Get_nearest_order>
 80037a0:	4603      	mov	r3, r0
 80037a2:	613b      	str	r3, [r7, #16]
						consumer = Get_nearest_consumer();
 80037a4:	f002 fb46 	bl	8005e34 <Get_nearest_consumer>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
						if(getOrderNum()>3){
 80037ac:	f002 fd96 	bl	80062dc <getOrderNum>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d903      	bls.n	80037be <main+0x20a>
							task_mode = 2;
 80037b6:	4b52      	ldr	r3, [pc, #328]	; (8003900 <main+0x34c>)
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e03d      	b.n	800383a <main+0x286>
						}
						else if(getOrderNum() == 0){
 80037be:	f002 fd8d 	bl	80062dc <getOrderNum>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <main+0x21c>
							task_mode = 1;
 80037c8:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <main+0x34c>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e034      	b.n	800383a <main+0x286>
						}
						else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 80037d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <main+0x330>)
 80037d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037e2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <main+0x330>)
 80037ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037f2:	1acb      	subs	r3, r1, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bfb8      	it	lt
 80037f8:	425b      	neglt	r3, r3
 80037fa:	441a      	add	r2, r3
 80037fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003800:	4619      	mov	r1, r3
 8003802:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <main+0x330>)
 8003804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003808:	1acb      	subs	r3, r1, r3
 800380a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800380e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003816:	4618      	mov	r0, r3
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <main+0x330>)
 800381a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800381e:	1ac3      	subs	r3, r0, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfb8      	it	lt
 8003824:	425b      	neglt	r3, r3
 8003826:	440b      	add	r3, r1
 8003828:	429a      	cmp	r2, r3
 800382a:	da03      	bge.n	8003834 <main+0x280>
							task_mode = 1;
 800382c:	4b34      	ldr	r3, [pc, #208]	; (8003900 <main+0x34c>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e002      	b.n	800383a <main+0x286>
						}
						else{
							task_mode = 2;
 8003834:	4b32      	ldr	r3, [pc, #200]	; (8003900 <main+0x34c>)
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
			while (GameStage == FirstHalf){			// first-half
 800383a:	7d3b      	ldrb	r3, [r7, #20]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f43f af60 	beq.w	8003702 <main+0x14e>
					}
				}

			}

			while (GameStage == SecondHalf){			// second-half
 8003842:	e0a1      	b.n	8003988 <main+0x3d4>
				if(myCharge < 200){
 8003844:	4b30      	ldr	r3, [pc, #192]	; (8003908 <main+0x354>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2bc7      	cmp	r3, #199	; 0xc7
 800384a:	dc02      	bgt.n	8003852 <main+0x29e>
					task_mode = 3;
 800384c:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <main+0x34c>)
 800384e:	2203      	movs	r2, #3
 8003850:	701a      	strb	r2, [r3, #0]
				}
				if(task_mode == 1){
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <main+0x34c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <main+0x2b6>
					//merchant = Get_nearest_order();
					GotoDestination(merchant,1);
 800385a:	2101      	movs	r1, #1
 800385c:	6938      	ldr	r0, [r7, #16]
 800385e:	f001 f8b9 	bl	80049d4 <GotoDestination>
					task_mode = 4;
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <main+0x34c>)
 8003864:	2204      	movs	r2, #4
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e08e      	b.n	8003988 <main+0x3d4>
				}
				else if(task_mode == 2){
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <main+0x34c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d107      	bne.n	8003882 <main+0x2ce>
					//consumer = Get_nearest_consumer();
					GotoDestination(consumer,1);
 8003872:	2101      	movs	r1, #1
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f001 f8ad 	bl	80049d4 <GotoDestination>
					task_mode = 4;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <main+0x34c>)
 800387c:	2204      	movs	r2, #4
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e082      	b.n	8003988 <main+0x3d4>
				}
				else if(task_mode == 3){
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <main+0x34c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d10f      	bne.n	80038aa <main+0x2f6>
					Beacon = Get_nearest_Beacon();
 800388a:	f002 fb59 	bl	8005f40 <Get_nearest_Beacon>
 800388e:	4603      	mov	r3, r0
 8003890:	60bb      	str	r3, [r7, #8]
					GotoDestination(Beacon,1);
 8003892:	2101      	movs	r1, #1
 8003894:	68b8      	ldr	r0, [r7, #8]
 8003896:	f001 f89d 	bl	80049d4 <GotoDestination>
					HAL_Delay(1000);
 800389a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800389e:	f002 fec9 	bl	8006634 <HAL_Delay>
					task_mode = 4;
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <main+0x34c>)
 80038a4:	2204      	movs	r2, #4
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e06e      	b.n	8003988 <main+0x3d4>
				}
				else
				{
					merchant = Get_nearest_order();
 80038aa:	f001 f813 	bl	80048d4 <Get_nearest_order>
 80038ae:	4603      	mov	r3, r0
 80038b0:	613b      	str	r3, [r7, #16]
					consumer = Get_nearest_consumer();
 80038b2:	f002 fabf 	bl	8005e34 <Get_nearest_consumer>
 80038b6:	4603      	mov	r3, r0
 80038b8:	60fb      	str	r3, [r7, #12]
					if(getOrderNum()>3){
 80038ba:	f002 fd0f 	bl	80062dc <getOrderNum>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d923      	bls.n	800390c <main+0x358>
						task_mode = 2;
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <main+0x34c>)
 80038c6:	2202      	movs	r2, #2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e05d      	b.n	8003988 <main+0x3d4>
 80038cc:	200009a4 	.word	0x200009a4
 80038d0:	20000a1c 	.word	0x20000a1c
 80038d4:	20000800 	.word	0x20000800
 80038d8:	0800ce98 	.word	0x0800ce98
 80038dc:	20000be4 	.word	0x20000be4
 80038e0:	20000004 	.word	0x20000004
 80038e4:	20000bc4 	.word	0x20000bc4
 80038e8:	20000bc8 	.word	0x20000bc8
 80038ec:	20000bd0 	.word	0x20000bd0
 80038f0:	40010c00 	.word	0x40010c00
 80038f4:	20000a94 	.word	0x20000a94
 80038f8:	20000bd4 	.word	0x20000bd4
 80038fc:	20000b84 	.word	0x20000b84
 8003900:	20000b7b 	.word	0x20000b7b
 8003904:	20000bac 	.word	0x20000bac
 8003908:	20000bdc 	.word	0x20000bdc
					}
					else if(getOrderNum() == 0){
 800390c:	f002 fce6 	bl	80062dc <getOrderNum>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <main+0x36a>
						task_mode = 1;
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <main+0x3e0>)
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e034      	b.n	8003988 <main+0x3d4>
					}
					else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 800391e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003922:	461a      	mov	r2, r3
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <main+0x3e4>)
 8003926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003930:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003934:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003938:	4619      	mov	r1, r3
 800393a:	4b17      	ldr	r3, [pc, #92]	; (8003998 <main+0x3e4>)
 800393c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003940:	1acb      	subs	r3, r1, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfb8      	it	lt
 8003946:	425b      	neglt	r3, r3
 8003948:	441a      	add	r2, r3
 800394a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800394e:	4619      	mov	r1, r3
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <main+0x3e4>)
 8003952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003956:	1acb      	subs	r3, r1, r3
 8003958:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800395c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003964:	4618      	mov	r0, r3
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <main+0x3e4>)
 8003968:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800396c:	1ac3      	subs	r3, r0, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	425b      	neglt	r3, r3
 8003974:	440b      	add	r3, r1
 8003976:	429a      	cmp	r2, r3
 8003978:	da03      	bge.n	8003982 <main+0x3ce>
						task_mode = 1;
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <main+0x3e0>)
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e002      	b.n	8003988 <main+0x3d4>
					}
					else{
						task_mode = 2;
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <main+0x3e0>)
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]
			while (GameStage == SecondHalf){			// second-half
 8003988:	7d3b      	ldrb	r3, [r7, #20]
 800398a:	2b02      	cmp	r3, #2
 800398c:	f43f af5a 	beq.w	8003844 <main+0x290>
    while (1) {
 8003990:	e674      	b.n	800367c <main+0xc8>
 8003992:	bf00      	nop
 8003994:	20000b7b 	.word	0x20000b7b
 8003998:	20000bc4 	.word	0x20000bc4

0800399c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b090      	sub	sp, #64	; 0x40
 80039a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039a2:	f107 0318 	add.w	r3, r7, #24
 80039a6:	2228      	movs	r2, #40	; 0x28
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f006 feb0 	bl	800a710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039be:	2301      	movs	r3, #1
 80039c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80039c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039ce:	2301      	movs	r3, #1
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d2:	2302      	movs	r3, #2
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80039dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e2:	f107 0318 	add.w	r3, r7, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 f9de 	bl	8007da8 <HAL_RCC_OscConfig>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80039f2:	f000 fd5f 	bl	80044b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f6:	230f      	movs	r3, #15
 80039f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039fa:	2302      	movs	r3, #2
 80039fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f004 fc4b 	bl	80082ac <HAL_RCC_ClockConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003a1c:	f000 fd4a 	bl	80044b4 <Error_Handler>
  }
}
 8003a20:	bf00      	nop
 8003a22:	3740      	adds	r7, #64	; 0x40
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <MX_I2C1_Init+0x54>)
 8003a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <MX_I2C1_Init+0x58>)
 8003a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <MX_I2C1_Init+0x50>)
 8003a66:	f003 fd45 	bl	80074f4 <HAL_I2C_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a70:	f000 fd20 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000644 	.word	0x20000644
 8003a7c:	40005400 	.word	0x40005400
 8003a80:	000186a0 	.word	0x000186a0

08003a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b096      	sub	sp, #88	; 0x58
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2220      	movs	r2, #32
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f006 fe27 	bl	800a710 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ac2:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003ac4:	4a50      	ldr	r2, [pc, #320]	; (8003c08 <MX_TIM1_Init+0x184>)
 8003ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ac8:	4b4e      	ldr	r3, [pc, #312]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ace:	4b4d      	ldr	r3, [pc, #308]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ae2:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003aee:	4845      	ldr	r0, [pc, #276]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003af0:	f004 fd76 	bl	80085e0 <HAL_TIM_Base_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003afa:	f000 fcdb 	bl	80044b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b08:	4619      	mov	r1, r3
 8003b0a:	483e      	ldr	r0, [pc, #248]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003b0c:	f005 fa20 	bl	8008f50 <HAL_TIM_ConfigClockSource>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003b16:	f000 fccd 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b1a:	483a      	ldr	r0, [pc, #232]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003b1c:	f004 fe10 	bl	8008740 <HAL_TIM_PWM_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003b26:	f000 fcc5 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b36:	4619      	mov	r1, r3
 8003b38:	4832      	ldr	r0, [pc, #200]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003b3a:	f005 fddb 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b44:	f000 fcb6 	bl	80044b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b48:	2360      	movs	r3, #96	; 0x60
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b54:	2300      	movs	r3, #0
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b60:	2300      	movs	r3, #0
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4825      	ldr	r0, [pc, #148]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003b6e:	f005 f931 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003b78:	f000 fc9c 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b80:	2204      	movs	r2, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	481f      	ldr	r0, [pc, #124]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003b86:	f005 f925 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003b90:	f000 fc90 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4819      	ldr	r0, [pc, #100]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003b9e:	f005 f919 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003ba8:	f000 fc84 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb0:	220c      	movs	r2, #12
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4813      	ldr	r0, [pc, #76]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003bb6:	f005 f90d 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003bc0:	f000 fc78 	bl	80044b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4807      	ldr	r0, [pc, #28]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003be8:	f005 fdf0 	bl	80097cc <HAL_TIMEx_ConfigBreakDeadTime>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003bf2:	f000 fc5f 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003bf6:	4803      	ldr	r0, [pc, #12]	; (8003c04 <MX_TIM1_Init+0x180>)
 8003bf8:	f001 fe04 	bl	8005804 <HAL_TIM_MspPostInit>

}
 8003bfc:	bf00      	nop
 8003bfe:	3758      	adds	r7, #88	; 0x58
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000698 	.word	0x20000698
 8003c08:	40012c00 	.word	0x40012c00

08003c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c12:	f107 030c 	add.w	r3, r7, #12
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f006 fd78 	bl	800a710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c30:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c64:	2300      	movs	r3, #0
 8003c66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c7c:	f004 fe72 	bl	8008964 <HAL_TIM_Encoder_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003c86:	f000 fc15 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4806      	ldr	r0, [pc, #24]	; (8003cb0 <MX_TIM2_Init+0xa4>)
 8003c98:	f005 fd2c 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003ca2:	f000 fc07 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ca6:	bf00      	nop
 8003ca8:	3730      	adds	r7, #48	; 0x30
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200006e0 	.word	0x200006e0

08003cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	; 0x30
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	2224      	movs	r2, #36	; 0x24
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f006 fd24 	bl	800a710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cd0:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003cd2:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <MX_TIM3_Init+0xa4>)
 8003cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cea:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	4619      	mov	r1, r3
 8003d20:	480c      	ldr	r0, [pc, #48]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003d22:	f004 fe1f 	bl	8008964 <HAL_TIM_Encoder_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003d2c:	f000 fbc2 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4805      	ldr	r0, [pc, #20]	; (8003d54 <MX_TIM3_Init+0xa0>)
 8003d3e:	f005 fcd9 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003d48:	f000 fbb4 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d4c:	bf00      	nop
 8003d4e:	3730      	adds	r7, #48	; 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000728 	.word	0x20000728
 8003d58:	40000400 	.word	0x40000400

08003d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	; 0x30
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	2224      	movs	r2, #36	; 0x24
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f006 fcd0 	bl	800a710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <MX_TIM4_Init+0xa4>)
 8003d7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d7e:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003da6:	2301      	movs	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003db6:	2301      	movs	r3, #1
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	480c      	ldr	r0, [pc, #48]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003dca:	f004 fdcb 	bl	8008964 <HAL_TIM_Encoder_Init>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003dd4:	f000 fb6e 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	4619      	mov	r1, r3
 8003de4:	4805      	ldr	r0, [pc, #20]	; (8003dfc <MX_TIM4_Init+0xa0>)
 8003de6:	f005 fc85 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003df0:	f000 fb60 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003df4:	bf00      	nop
 8003df6:	3730      	adds	r7, #48	; 0x30
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000770 	.word	0x20000770
 8003e00:	40000800 	.word	0x40000800

08003e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f006 fc7c 	bl	800a710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e20:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e72:	f004 fd77 	bl	8008964 <HAL_TIM_Encoder_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003e7c:	f000 fb1a 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <MX_TIM5_Init+0xa0>)
 8003e8e:	f005 fc31 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003e98:	f000 fb0c 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200007b8 	.word	0x200007b8
 8003ea8:	40000c00 	.word	0x40000c00

08003eac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <MX_TIM6_Init+0x68>)
 8003ebe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003ec2:	2247      	movs	r2, #71	; 0x47
 8003ec4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003ece:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003eda:	480d      	ldr	r0, [pc, #52]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003edc:	f004 fb80 	bl	80085e0 <HAL_TIM_Base_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003ee6:	f000 fae5 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4806      	ldr	r0, [pc, #24]	; (8003f10 <MX_TIM6_Init+0x64>)
 8003ef8:	f005 fbfc 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003f02:	f000 fad7 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000800 	.word	0x20000800
 8003f14:	40001000 	.word	0x40001000

08003f18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b096      	sub	sp, #88	; 0x58
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f006 fbdd 	bl	800a710 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003f56:	4b50      	ldr	r3, [pc, #320]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f58:	4a50      	ldr	r2, [pc, #320]	; (800409c <MX_TIM8_Init+0x184>)
 8003f5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003f5c:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f62:	4b4d      	ldr	r3, [pc, #308]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f76:	4b48      	ldr	r3, [pc, #288]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003f82:	4845      	ldr	r0, [pc, #276]	; (8004098 <MX_TIM8_Init+0x180>)
 8003f84:	f004 fb2c 	bl	80085e0 <HAL_TIM_Base_Init>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003f8e:	f000 fa91 	bl	80044b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003f98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	483e      	ldr	r0, [pc, #248]	; (8004098 <MX_TIM8_Init+0x180>)
 8003fa0:	f004 ffd6 	bl	8008f50 <HAL_TIM_ConfigClockSource>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003faa:	f000 fa83 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003fae:	483a      	ldr	r0, [pc, #232]	; (8004098 <MX_TIM8_Init+0x180>)
 8003fb0:	f004 fbc6 	bl	8008740 <HAL_TIM_PWM_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003fba:	f000 fa7b 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003fc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4832      	ldr	r0, [pc, #200]	; (8004098 <MX_TIM8_Init+0x180>)
 8003fce:	f005 fb91 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003fd8:	f000 fa6c 	bl	80044b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fdc:	2360      	movs	r3, #96	; 0x60
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4619      	mov	r1, r3
 8004000:	4825      	ldr	r0, [pc, #148]	; (8004098 <MX_TIM8_Init+0x180>)
 8004002:	f004 fee7 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800400c:	f000 fa52 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004014:	2204      	movs	r2, #4
 8004016:	4619      	mov	r1, r3
 8004018:	481f      	ldr	r0, [pc, #124]	; (8004098 <MX_TIM8_Init+0x180>)
 800401a:	f004 fedb 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004024:	f000 fa46 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402c:	2208      	movs	r2, #8
 800402e:	4619      	mov	r1, r3
 8004030:	4819      	ldr	r0, [pc, #100]	; (8004098 <MX_TIM8_Init+0x180>)
 8004032:	f004 fecf 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800403c:	f000 fa3a 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004044:	220c      	movs	r2, #12
 8004046:	4619      	mov	r1, r3
 8004048:	4813      	ldr	r0, [pc, #76]	; (8004098 <MX_TIM8_Init+0x180>)
 800404a:	f004 fec3 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004054:	f000 fa2e 	bl	80044b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800406c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4807      	ldr	r0, [pc, #28]	; (8004098 <MX_TIM8_Init+0x180>)
 800407c:	f005 fba6 	bl	80097cc <HAL_TIMEx_ConfigBreakDeadTime>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8004086:	f000 fa15 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800408a:	4803      	ldr	r0, [pc, #12]	; (8004098 <MX_TIM8_Init+0x180>)
 800408c:	f001 fbba 	bl	8005804 <HAL_TIM_MspPostInit>

}
 8004090:	bf00      	nop
 8004092:	3758      	adds	r7, #88	; 0x58
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000848 	.word	0x20000848
 800409c:	40013400 	.word	0x40013400

080040a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <MX_USART2_UART_Init+0x50>)
 80040a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040c6:	220c      	movs	r2, #12
 80040c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040d8:	f005 fbdb 	bl	8009892 <HAL_UART_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040e2:	f000 f9e7 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000890 	.word	0x20000890
 80040f0:	40004400 	.word	0x40004400

080040f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <MX_USART3_UART_Init+0x50>)
 80040fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 8004100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004104:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 800410e:	2200      	movs	r2, #0
 8004110:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 800411a:	220c      	movs	r2, #12
 800411c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800412a:	4805      	ldr	r0, [pc, #20]	; (8004140 <MX_USART3_UART_Init+0x4c>)
 800412c:	f005 fbb1 	bl	8009892 <HAL_UART_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004136:	f000 f9bd 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200008d4 	.word	0x200008d4
 8004144:	40004800 	.word	0x40004800

08004148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <MX_DMA_Init+0x48>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <MX_DMA_Init+0x48>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6153      	str	r3, [r2, #20]
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <MX_DMA_Init+0x48>)
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2102      	movs	r1, #2
 800416a:	200d      	movs	r0, #13
 800416c:	f002 fb5d 	bl	800682a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004170:	200d      	movs	r0, #13
 8004172:	f002 fb76 	bl	8006862 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2102      	movs	r1, #2
 800417a:	2010      	movs	r0, #16
 800417c:	f002 fb55 	bl	800682a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004180:	2010      	movs	r0, #16
 8004182:	f002 fb6e 	bl	8006862 <HAL_NVIC_EnableIRQ>

}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000

08004194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a8:	4b23      	ldr	r3, [pc, #140]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	6193      	str	r3, [r2, #24]
 80041b4:	4b20      	ldr	r3, [pc, #128]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4a1c      	ldr	r2, [pc, #112]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	6193      	str	r3, [r2, #24]
 80041cc:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d8:	4b17      	ldr	r3, [pc, #92]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4a16      	ldr	r2, [pc, #88]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041de:	f043 0308 	orr.w	r3, r3, #8
 80041e2:	6193      	str	r3, [r2, #24]
 80041e4:	4b14      	ldr	r3, [pc, #80]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f0:	4b11      	ldr	r3, [pc, #68]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	4a10      	ldr	r2, [pc, #64]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	6193      	str	r3, [r2, #24]
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <MX_GPIO_Init+0xa4>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004208:	2200      	movs	r2, #0
 800420a:	2107      	movs	r1, #7
 800420c:	480b      	ldr	r0, [pc, #44]	; (800423c <MX_GPIO_Init+0xa8>)
 800420e:	f003 f959 	bl	80074c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8004212:	2307      	movs	r3, #7
 8004214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2302      	movs	r3, #2
 8004220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	f107 0310 	add.w	r3, r7, #16
 8004226:	4619      	mov	r1, r3
 8004228:	4804      	ldr	r0, [pc, #16]	; (800423c <MX_GPIO_Init+0xa8>)
 800422a:	f002 ffb7 	bl	800719c <HAL_GPIO_Init>

}
 800422e:	bf00      	nop
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40010c00 	.word	0x40010c00

08004240 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <HUAN_MOTOR1_Init+0x50>)
 8004248:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HUAN_MOTOR1_Init+0x54>)
 800424e:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HUAN_MOTOR1_Init+0x58>)
 8004254:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004258:	220c      	movs	r2, #12
 800425a:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <HUAN_MOTOR1_Init+0x58>)
 8004260:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004264:	2208      	movs	r2, #8
 8004266:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <HUAN_MOTOR1_Init+0x5c>)
 8004274:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004278:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <HUAN_MOTOR1_Init+0x60>)
 800427a:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HUAN_MOTOR1_Init+0x64>)
 8004280:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8004282:	4802      	ldr	r0, [pc, #8]	; (800428c <HUAN_MOTOR1_Init+0x4c>)
 8004284:	f7fe fa84 	bl	8002790 <huansic_motor_init>
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200009a4 	.word	0x200009a4
 8004290:	200006e0 	.word	0x200006e0
 8004294:	3d4ccccd 	.word	0x3d4ccccd
 8004298:	20000698 	.word	0x20000698
 800429c:	399d4952 	.word	0x399d4952
 80042a0:	37a7c5ac 	.word	0x37a7c5ac
 80042a4:	387ba882 	.word	0x387ba882

080042a8 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <HUAN_MOTOR2_Init+0x50>)
 80042b0:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042b4:	4a11      	ldr	r2, [pc, #68]	; (80042fc <HUAN_MOTOR2_Init+0x54>)
 80042b6:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042ba:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HUAN_MOTOR2_Init+0x58>)
 80042bc:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <HUAN_MOTOR2_Init+0x58>)
 80042c8:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042cc:	2204      	movs	r2, #4
 80042ce:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HUAN_MOTOR2_Init+0x5c>)
 80042dc:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042e0:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HUAN_MOTOR2_Init+0x60>)
 80042e2:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042e6:	4a09      	ldr	r2, [pc, #36]	; (800430c <HUAN_MOTOR2_Init+0x64>)
 80042e8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80042ea:	4802      	ldr	r0, [pc, #8]	; (80042f4 <HUAN_MOTOR2_Init+0x4c>)
 80042ec:	f7fe fa50 	bl	8002790 <huansic_motor_init>
}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200009e0 	.word	0x200009e0
 80042f8:	20000770 	.word	0x20000770
 80042fc:	3d4ccccd 	.word	0x3d4ccccd
 8004300:	20000698 	.word	0x20000698
 8004304:	399d4952 	.word	0x399d4952
 8004308:	37a7c5ac 	.word	0x37a7c5ac
 800430c:	387ba882 	.word	0x387ba882

08004310 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HUAN_MOTOR3_Init+0x50>)
 8004318:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <HUAN_MOTOR3_Init+0x54>)
 800431e:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004322:	4a11      	ldr	r2, [pc, #68]	; (8004368 <HUAN_MOTOR3_Init+0x58>)
 8004324:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004328:	220c      	movs	r2, #12
 800432a:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 800432e:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <HUAN_MOTOR3_Init+0x58>)
 8004330:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004334:	2208      	movs	r2, #8
 8004336:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HUAN_MOTOR3_Init+0x5c>)
 8004344:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HUAN_MOTOR3_Init+0x60>)
 800434a:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HUAN_MOTOR3_Init+0x64>)
 8004350:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8004352:	4802      	ldr	r0, [pc, #8]	; (800435c <HUAN_MOTOR3_Init+0x4c>)
 8004354:	f7fe fa1c 	bl	8002790 <huansic_motor_init>
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000a1c 	.word	0x20000a1c
 8004360:	20000728 	.word	0x20000728
 8004364:	3d4ccccd 	.word	0x3d4ccccd
 8004368:	20000848 	.word	0x20000848
 800436c:	399d4952 	.word	0x399d4952
 8004370:	37a7c5ac 	.word	0x37a7c5ac
 8004374:	387ba882 	.word	0x387ba882

08004378 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <HUAN_MOTOR4_Init+0x50>)
 8004380:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HUAN_MOTOR4_Init+0x54>)
 8004386:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 800438a:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <HUAN_MOTOR4_Init+0x58>)
 800438c:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 8004390:	2200      	movs	r2, #0
 8004392:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HUAN_MOTOR4_Init+0x58>)
 8004398:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 800439c:	2204      	movs	r2, #4
 800439e:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 80043aa:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <HUAN_MOTOR4_Init+0x5c>)
 80043ac:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 80043b0:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <HUAN_MOTOR4_Init+0x60>)
 80043b2:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HUAN_MOTOR4_Init+0x64>)
 80043b8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 80043ba:	4802      	ldr	r0, [pc, #8]	; (80043c4 <HUAN_MOTOR4_Init+0x4c>)
 80043bc:	f7fe f9e8 	bl	8002790 <huansic_motor_init>
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000a58 	.word	0x20000a58
 80043c8:	200007b8 	.word	0x200007b8
 80043cc:	3d4ccccd 	.word	0x3d4ccccd
 80043d0:	20000848 	.word	0x20000848
 80043d4:	399d4952 	.word	0x399d4952
 80043d8:	37a7c5ac 	.word	0x37a7c5ac
 80043dc:	387ba882 	.word	0x387ba882

080043e0 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HUAN_IMU_Init+0x14>)
 80043e6:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HUAN_IMU_Init+0x18>)
 80043e8:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 80043ea:	4802      	ldr	r0, [pc, #8]	; (80043f4 <HUAN_IMU_Init+0x14>)
 80043ec:	f7fd fe3e 	bl	800206c <huansic_jy62_init>
}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000a94 	.word	0x20000a94
 80043f8:	200008d4 	.word	0x200008d4

080043fc <MING_zigbee_Init>:
//static void HUAN_ZIGBEE_Init(void) {
//	hxb.uartPort = &huart2;
//	huansic_xb_init(&hxb);
//}

static void MING_zigbee_Init(void){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	zigbee_Init(&huart2);
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <MING_zigbee_Init+0x10>)
 8004402:	f001 fe53 	bl	80060ac <zigbee_Init>
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000890 	.word	0x20000890

08004410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_UART_RxCpltCallback+0x34>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d10b      	bne.n	800443a <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <HAL_UART_RxCpltCallback+0x34>)
 8004424:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 800442c:	4805      	ldr	r0, [pc, #20]	; (8004444 <HAL_UART_RxCpltCallback+0x34>)
 800442e:	f7fd ff73 	bl	8002318 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 8004432:	e002      	b.n	800443a <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 8004434:	4803      	ldr	r0, [pc, #12]	; (8004444 <HAL_UART_RxCpltCallback+0x34>)
 8004436:	f7fd fe4f 	bl	80020d8 <huansic_jy62_dma_isr>
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000a94 	.word	0x20000a94

08004448 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_UART_ErrorCallback+0x5c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d10b      	bne.n	8004472 <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_UART_ErrorCallback+0x5c>)
 800445c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8004464:	480f      	ldr	r0, [pc, #60]	; (80044a4 <HAL_UART_ErrorCallback+0x5c>)
 8004466:	f7fd ffa2 	bl	80023ae <huansic_jy62_error>
 800446a:	e002      	b.n	8004472 <HAL_UART_ErrorCallback+0x2a>
		else
			huansic_jy62_dma_error(&himu);
 800446c:	480d      	ldr	r0, [pc, #52]	; (80044a4 <HAL_UART_ErrorCallback+0x5c>)
 800446e:	f7fd ff8a 	bl	8002386 <huansic_jy62_dma_error>
	}
	if (huart == zigbee_huart)
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_UART_ErrorCallback+0x60>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d10e      	bne.n	800449a <HAL_UART_ErrorCallback+0x52>
	  {
		__HAL_UNLOCK(zigbee_huart);
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_UART_ErrorCallback+0x60>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		receive_flag=0;
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_UART_ErrorCallback+0x64>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(zigbee_huart,zigbeeMessage,MAX_MSG_LEN);
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_UART_ErrorCallback+0x60>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	22c8      	movs	r2, #200	; 0xc8
 8004492:	4907      	ldr	r1, [pc, #28]	; (80044b0 <HAL_UART_ErrorCallback+0x68>)
 8004494:	4618      	mov	r0, r3
 8004496:	f005 fb3b 	bl	8009b10 <HAL_UARTEx_ReceiveToIdle_DMA>
	  }
	/*else if(){

	}*/
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000a94 	.word	0x20000a94
 80044a8:	20000918 	.word	0x20000918
 80044ac:	20000b78 	.word	0x20000b78
 80044b0:	20007fe8 	.word	0x20007fe8

080044b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044b8:	b672      	cpsid	i
}
 80044ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80044bc:	e7fe      	b.n	80044bc <Error_Handler+0x8>
	...

080044c0 <Lane_init>:
	closelist.Head = 0;
	closelist.Tail = 0;
	closelist.Length = 0;
}

void Lane_init(void){
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	pathlane.Head = 0;
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <Lane_init+0x18>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 0;
 80044ca:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <Lane_init+0x18>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	805a      	strh	r2, [r3, #2]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20007c00 	.word	0x20007c00

080044dc <queue_append>:

uint8_t queue_append(A_Star_Node* node)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	if (openlist.Length + openlist.Head >= QUEUE_SIZE)
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <queue_append+0x110>)
 80044e6:	885b      	ldrh	r3, [r3, #2]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <queue_append+0x110>)
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	4413      	add	r3, r2
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f4:	db01      	blt.n	80044fa <queue_append+0x1e>
	{
		return 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e073      	b.n	80045e2 <queue_append+0x106>
	}
	else
	{
		uint16_t i = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	82fb      	strh	r3, [r7, #22]
		while (i < openlist.Length)
 80044fe:	e052      	b.n	80045a6 <queue_append+0xca>
		{
			if (openlist.buffer[i + openlist.Head].total <= node->total)
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <queue_append+0x110>)
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	441a      	add	r2, r3
 8004508:	4938      	ldr	r1, [pc, #224]	; (80045ec <queue_append+0x110>)
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	f8d2 2006 	ldr.w	r2, [r2, #6]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc fe05 	bl	8001130 <__aeabi_fcmple>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <queue_append+0x58>
			{
				i++;
 800452c:	8afb      	ldrh	r3, [r7, #22]
 800452e:	3301      	adds	r3, #1
 8004530:	82fb      	strh	r3, [r7, #22]
 8004532:	e038      	b.n	80045a6 <queue_append+0xca>
			}
			else
			{
				A_Star_Node change;
				while (i < openlist.Length + 1)
 8004534:	e02a      	b.n	800458c <queue_append+0xb0>
				{
					change = openlist.buffer[i + openlist.Head];
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <queue_append+0x110>)
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	441a      	add	r2, r3
 800453e:	492b      	ldr	r1, [pc, #172]	; (80045ec <queue_append+0x110>)
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	18ca      	adds	r2, r1, r3
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	3204      	adds	r2, #4
 8004550:	ca07      	ldmia	r2, {r0, r1, r2}
 8004552:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					openlist.buffer[i + openlist.Head] = *node;
 8004556:	8afb      	ldrh	r3, [r7, #22]
 8004558:	4a24      	ldr	r2, [pc, #144]	; (80045ec <queue_append+0x110>)
 800455a:	8812      	ldrh	r2, [r2, #0]
 800455c:	441a      	add	r2, r3
 800455e:	4923      	ldr	r1, [pc, #140]	; (80045ec <queue_append+0x110>)
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	6810      	ldr	r0, [r2, #0]
 8004570:	6851      	ldr	r1, [r2, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	c307      	stmia	r3!, {r0, r1, r2}
					*node = change;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	461c      	mov	r4, r3
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004580:	6020      	str	r0, [r4, #0]
 8004582:	6061      	str	r1, [r4, #4]
 8004584:	60a2      	str	r2, [r4, #8]
					i++;
 8004586:	8afb      	ldrh	r3, [r7, #22]
 8004588:	3301      	adds	r3, #1
 800458a:	82fb      	strh	r3, [r7, #22]
				while (i < openlist.Length + 1)
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <queue_append+0x110>)
 800458e:	885b      	ldrh	r3, [r3, #2]
 8004590:	8afa      	ldrh	r2, [r7, #22]
 8004592:	429a      	cmp	r2, r3
 8004594:	d9cf      	bls.n	8004536 <queue_append+0x5a>
				}
				openlist.Length += 1;
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <queue_append+0x110>)
 8004598:	885b      	ldrh	r3, [r3, #2]
 800459a:	3301      	adds	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <queue_append+0x110>)
 80045a0:	805a      	strh	r2, [r3, #2]
				return 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01d      	b.n	80045e2 <queue_append+0x106>
		while (i < openlist.Length)
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <queue_append+0x110>)
 80045a8:	885b      	ldrh	r3, [r3, #2]
 80045aa:	8afa      	ldrh	r2, [r7, #22]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3a7      	bcc.n	8004500 <queue_append+0x24>
			}
		}
		openlist.buffer[openlist.Head + openlist.Length] = *node;
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <queue_append+0x110>)
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <queue_append+0x110>)
 80045b8:	885b      	ldrh	r3, [r3, #2]
 80045ba:	441a      	add	r2, r3
 80045bc:	490b      	ldr	r1, [pc, #44]	; (80045ec <queue_append+0x110>)
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	6810      	ldr	r0, [r2, #0]
 80045ce:	6851      	ldr	r1, [r2, #4]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	c307      	stmia	r3!, {r0, r1, r2}
		openlist.Length++;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <queue_append+0x110>)
 80045d6:	885b      	ldrh	r3, [r3, #2]
 80045d8:	3301      	adds	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <queue_append+0x110>)
 80045de:	805a      	strh	r2, [r3, #2]
		return 1;
 80045e0:	2301      	movs	r3, #1
	}
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000bf4 	.word	0x20000bf4

080045f0 <list_append>:

uint8_t list_append(uint16_t c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]
	if (closelist.Length >= LIST_SIZE)
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <list_append+0x58>)
 80045fc:	889b      	ldrh	r3, [r3, #4]
 80045fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004602:	d301      	bcc.n	8004608 <list_append+0x18>
	{
		return 0;
 8004604:	2300      	movs	r3, #0
 8004606:	e01a      	b.n	800463e <list_append+0x4e>
	}
	else
	{
		closelist.buffer[closelist.Tail] = c;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <list_append+0x58>)
 800460a:	885b      	ldrh	r3, [r3, #2]
 800460c:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <list_append+0x58>)
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	80da      	strh	r2, [r3, #6]
		closelist.Tail = (closelist.Tail + 1) % LIST_SIZE;
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <list_append+0x58>)
 8004618:	885b      	ldrh	r3, [r3, #2]
 800461a:	3301      	adds	r3, #1
 800461c:	425a      	negs	r2, r3
 800461e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004622:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004626:	bf58      	it	pl
 8004628:	4253      	negpl	r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <list_append+0x58>)
 800462e:	805a      	strh	r2, [r3, #2]
		closelist.Length++;
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <list_append+0x58>)
 8004632:	889b      	ldrh	r3, [r3, #4]
 8004634:	3301      	adds	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <list_append+0x58>)
 800463a:	809a      	strh	r2, [r3, #4]
		return 1;
 800463c:	2301      	movs	r3, #1
	}
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	20006bf8 	.word	0x20006bf8

0800464c <queue_top>:

uint16_t queue_top()
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
	if (openlist.Length > 0)
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <queue_top+0x3c>)
 8004652:	885b      	ldrh	r3, [r3, #2]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <queue_top+0x2e>
	{
		openlist.Head++;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <queue_top+0x3c>)
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <queue_top+0x3c>)
 8004662:	801a      	strh	r2, [r3, #0]
		openlist.Length--;
 8004664:	4b08      	ldr	r3, [pc, #32]	; (8004688 <queue_top+0x3c>)
 8004666:	885b      	ldrh	r3, [r3, #2]
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <queue_top+0x3c>)
 800466e:	805a      	strh	r2, [r3, #2]
		return openlist.Head - 1;
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <queue_top+0x3c>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	e001      	b.n	800467e <queue_top+0x32>
	}
	else {
		return 65535;
 800467a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000bf4 	.word	0x20000bf4

0800468c <findin_queue>:

uint16_t findin_queue(uint16_t c)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < openlist.Length; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	81fb      	strh	r3, [r7, #14]
 800469a:	e017      	b.n	80046cc <findin_queue+0x40>
	{
		if (openlist.buffer[i + openlist.Head].cor == c) return (i + openlist.Head);
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <findin_queue+0x58>)
 80046a0:	8812      	ldrh	r2, [r2, #0]
 80046a2:	441a      	add	r2, r3
 80046a4:	490f      	ldr	r1, [pc, #60]	; (80046e4 <findin_queue+0x58>)
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3304      	adds	r3, #4
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d105      	bne.n	80046c6 <findin_queue+0x3a>
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <findin_queue+0x58>)
 80046bc:	881a      	ldrh	r2, [r3, #0]
 80046be:	89fb      	ldrh	r3, [r7, #14]
 80046c0:	4413      	add	r3, r2
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	e008      	b.n	80046d8 <findin_queue+0x4c>
	for (i = 0; i < openlist.Length; i++)
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	3301      	adds	r3, #1
 80046ca:	81fb      	strh	r3, [r7, #14]
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <findin_queue+0x58>)
 80046ce:	885b      	ldrh	r3, [r3, #2]
 80046d0:	89fa      	ldrh	r2, [r7, #14]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3e2      	bcc.n	800469c <findin_queue+0x10>
	}
	return 0;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000bf4 	.word	0x20000bf4

080046e8 <findin_list>:
	}
	return 0;
}

uint8_t findin_list(uint16_t c)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < closelist.Length; i++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	81fb      	strh	r3, [r7, #14]
 80046f6:	e00f      	b.n	8004718 <findin_list+0x30>
	{
		if (closelist.buffer[i + closelist.Head] == c) return 1;
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <findin_list+0x48>)
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	4a0b      	ldr	r2, [pc, #44]	; (8004730 <findin_list+0x48>)
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	88db      	ldrh	r3, [r3, #6]
 8004708:	88fa      	ldrh	r2, [r7, #6]
 800470a:	429a      	cmp	r2, r3
 800470c:	d101      	bne.n	8004712 <findin_list+0x2a>
 800470e:	2301      	movs	r3, #1
 8004710:	e008      	b.n	8004724 <findin_list+0x3c>
	for (i = 0; i < closelist.Length; i++)
 8004712:	89fb      	ldrh	r3, [r7, #14]
 8004714:	3301      	adds	r3, #1
 8004716:	81fb      	strh	r3, [r7, #14]
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <findin_list+0x48>)
 800471a:	889b      	ldrh	r3, [r3, #4]
 800471c:	89fa      	ldrh	r2, [r7, #14]
 800471e:	429a      	cmp	r2, r3
 8004720:	d3ea      	bcc.n	80046f8 <findin_list+0x10>
	}
	return 0;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20006bf8 	.word	0x20006bf8

08004734 <editcost>:

void editcost(uint16_t index, A_Star_Node* node)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	80fb      	strh	r3, [r7, #6]
	if (openlist.buffer[index].total > node->total)
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	4920      	ldr	r1, [pc, #128]	; (80047c4 <editcost+0x90>)
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fcfc 	bl	8001158 <__aeabi_fcmpgt>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d100      	bne.n	8004768 <editcost+0x34>
	{
		openlist.buffer[index].total = node->total;
		openlist.buffer[index].cost = node->cost;
		openlist.buffer[index].fatherindex = node->fatherindex;
	}
}
 8004766:	e029      	b.n	80047bc <editcost+0x88>
		openlist.buffer[index].total = node->total;
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8004770:	460b      	mov	r3, r1
 8004772:	4619      	mov	r1, r3
 8004774:	4813      	ldr	r0, [pc, #76]	; (80047c4 <editcost+0x90>)
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4403      	add	r3, r0
 8004780:	460a      	mov	r2, r1
 8004782:	f8c3 200a 	str.w	r2, [r3, #10]
		openlist.buffer[index].cost = node->cost;
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800478e:	460b      	mov	r3, r1
 8004790:	4619      	mov	r1, r3
 8004792:	480c      	ldr	r0, [pc, #48]	; (80047c4 <editcost+0x90>)
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4403      	add	r3, r0
 800479e:	460a      	mov	r2, r1
 80047a0:	f8c3 2006 	str.w	r2, [r3, #6]
		openlist.buffer[index].fatherindex = node->fatherindex;
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	8958      	ldrh	r0, [r3, #10]
 80047aa:	4906      	ldr	r1, [pc, #24]	; (80047c4 <editcost+0x90>)
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	330e      	adds	r3, #14
 80047b8:	4602      	mov	r2, r0
 80047ba:	801a      	strh	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000bf4 	.word	0x20000bf4

080047c8 <Insert_inLane>:

uint8_t Insert_inLane(Coordinate *head_coor, uint8_t head_index)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
	if(!head_coor) return 0;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <Insert_inLane+0x16>
 80047da:	2300      	movs	r3, #0
 80047dc:	e025      	b.n	800482a <Insert_inLane+0x62>
	pathlane.Head = 0;
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <Insert_inLane+0x6c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 16 - head_index;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f1c3 0310 	rsb	r3, r3, #16
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <Insert_inLane+0x6c>)
 80047f0:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = head_index; i < 16; i++)
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e014      	b.n	8004822 <Insert_inLane+0x5a>
	{
		pathlane.buffer[pathlane.Head + i - head_index] = *(head_coor + i);
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	18d1      	adds	r1, r2, r3
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <Insert_inLane+0x6c>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	441a      	add	r2, r3
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <Insert_inLane+0x6c>)
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	460a      	mov	r2, r1
 8004818:	6810      	ldr	r0, [r2, #0]
 800481a:	6018      	str	r0, [r3, #0]
	for(uint8_t i = head_index; i < 16; i++)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	3301      	adds	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d9e7      	bls.n	80047f8 <Insert_inLane+0x30>
	}
	return 1;
 8004828:	2301      	movs	r3, #1
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	20007c00 	.word	0x20007c00

08004838 <order_list_init>:

void order_list_init(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
	orders.length = 0;
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <order_list_init+0x18>)
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
	orders.new = 0;
 8004842:	4b03      	ldr	r3, [pc, #12]	; (8004850 <order_list_init+0x18>)
 8004844:	2200      	movs	r2, #0
 8004846:	705a      	strb	r2, [r3, #1]
}
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	20007c84 	.word	0x20007c84

08004854 <order_append>:

void order_append(Order_edc24 an_order)
{
 8004854:	b084      	sub	sp, #16
 8004856:	b490      	push	{r4, r7}
 8004858:	af00      	add	r7, sp, #0
 800485a:	f107 0408 	add.w	r4, r7, #8
 800485e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(!(an_order.depPos.x == orders.buffer[orders.new].x && an_order.depPos.y == orders.buffer[orders.new].y))
 8004862:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <order_append+0x7c>)
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	4919      	ldr	r1, [pc, #100]	; (80048d0 <order_append+0x7c>)
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004874:	429a      	cmp	r2, r3
 8004876:	d10a      	bne.n	800488e <order_append+0x3a>
 8004878:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800487c:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <order_append+0x7c>)
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	4913      	ldr	r1, [pc, #76]	; (80048d0 <order_append+0x7c>)
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d01b      	beq.n	80048c6 <order_append+0x72>
	{
		orders.buffer[orders.length].x = an_order.depPos.x;
 800488e:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <order_append+0x7c>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004896:	4a0e      	ldr	r2, [pc, #56]	; (80048d0 <order_append+0x7c>)
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	460a      	mov	r2, r1
 800489e:	805a      	strh	r2, [r3, #2]
		orders.buffer[orders.length].y = an_order.depPos.y;
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <order_append+0x7c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <order_append+0x7c>)
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	460a      	mov	r2, r1
 80048b0:	809a      	strh	r2, [r3, #4]
		orders.new = orders.length;
 80048b2:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <order_append+0x7c>)
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <order_append+0x7c>)
 80048b8:	705a      	strb	r2, [r3, #1]
		orders.length += 1;
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <order_append+0x7c>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <order_append+0x7c>)
 80048c4:	701a      	strb	r2, [r3, #0]
	}
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc90      	pop	{r4, r7}
 80048cc:	b004      	add	sp, #16
 80048ce:	4770      	bx	lr
 80048d0:	20007c84 	.word	0x20007c84

080048d4 <Get_nearest_order>:

Coordinate Get_nearest_order(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
	if(orders.length == 0)
 80048da:	4b3c      	ldr	r3, [pc, #240]	; (80049cc <Get_nearest_order+0xf8>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <Get_nearest_order+0x18>
		return myCoord;
 80048e2:	4a3b      	ldr	r2, [pc, #236]	; (80049d0 <Get_nearest_order+0xfc>)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	6810      	ldr	r0, [r2, #0]
 80048e8:	6018      	str	r0, [r3, #0]
 80048ea:	e063      	b.n	80049b4 <Get_nearest_order+0xe0>
	uint8_t i;
	int16_t mindis = 512;
 80048ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f0:	81bb      	strh	r3, [r7, #12]
	uint8_t minindex = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	72fb      	strb	r3, [r7, #11]
	for(i=0;i < orders.length; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
 80048fa:	e02d      	b.n	8004958 <Get_nearest_order+0x84>
	{
		int16_t distance = abs(orders.buffer[i].x - myCoord.x) + abs(orders.buffer[i].y - myCoord.y);
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	4a33      	ldr	r2, [pc, #204]	; (80049cc <Get_nearest_order+0xf8>)
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004908:	461a      	mov	r2, r3
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <Get_nearest_order+0xfc>)
 800490c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfb8      	it	lt
 8004916:	425b      	neglt	r3, r3
 8004918:	b29a      	uxth	r2, r3
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	492b      	ldr	r1, [pc, #172]	; (80049cc <Get_nearest_order+0xf8>)
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004926:	4619      	mov	r1, r3
 8004928:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <Get_nearest_order+0xfc>)
 800492a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800492e:	1acb      	subs	r3, r1, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfb8      	it	lt
 8004934:	425b      	neglt	r3, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	4413      	add	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	813b      	strh	r3, [r7, #8]
		if(distance < mindis)
 800493e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004942:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	da03      	bge.n	8004952 <Get_nearest_order+0x7e>
		{
			mindis = distance;
 800494a:	893b      	ldrh	r3, [r7, #8]
 800494c:	81bb      	strh	r3, [r7, #12]
			minindex = i;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	72fb      	strb	r3, [r7, #11]
	for(i=0;i < orders.length; i++)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	3301      	adds	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <Get_nearest_order+0xf8>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	429a      	cmp	r2, r3
 8004960:	d3cc      	bcc.n	80048fc <Get_nearest_order+0x28>
		}
	}
	Coordinate nearest = orders.buffer[minindex];
 8004962:	7afb      	ldrb	r3, [r7, #11]
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <Get_nearest_order+0xf8>)
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	463a      	mov	r2, r7
 800496c:	3302      	adds	r3, #2
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	6010      	str	r0, [r2, #0]

	for(i=minindex + 1; i < orders.length; i++)
 8004972:	7afb      	ldrb	r3, [r7, #11]
 8004974:	3301      	adds	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e00f      	b.n	800499a <Get_nearest_order+0xc6>
	{
		orders.buffer[i - 1] = orders.buffer[i];
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	7bfa      	ldrb	r2, [r7, #15]
 800497e:	3a01      	subs	r2, #1
 8004980:	4912      	ldr	r1, [pc, #72]	; (80049cc <Get_nearest_order+0xf8>)
 8004982:	0092      	lsls	r2, r2, #2
 8004984:	440a      	add	r2, r1
 8004986:	4911      	ldr	r1, [pc, #68]	; (80049cc <Get_nearest_order+0xf8>)
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3202      	adds	r2, #2
 800498e:	3302      	adds	r3, #2
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6013      	str	r3, [r2, #0]
	for(i=minindex + 1; i < orders.length; i++)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	3301      	adds	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <Get_nearest_order+0xf8>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d3ea      	bcc.n	800497a <Get_nearest_order+0xa6>
	}

	orders.length -= 1;
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <Get_nearest_order+0xf8>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <Get_nearest_order+0xf8>)
 80049ae:	701a      	strb	r2, [r3, #0]
	return nearest;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	607b      	str	r3, [r7, #4]
}
 80049b4:	2300      	movs	r3, #0
 80049b6:	88ba      	ldrh	r2, [r7, #4]
 80049b8:	f362 030f 	bfi	r3, r2, #0, #16
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	f362 431f 	bfi	r3, r2, #16, #16
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	20007c84 	.word	0x20007c84
 80049d0:	20000bc4 	.word	0x20000bc4

080049d4 <GotoDestination>:
extern JY62_HandleTypeDef himu;
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 80049d4:	b5b0      	push	{r4, r5, r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
	if(mode == 1)
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	f040 80a2 	bne.w	8004b2c <GotoDestination+0x158>
	{
		uint8_t isGetAroad = mingyan_pathfind_avoidObstacle(&myCoord, &Destination);
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4871      	ldr	r0, [pc, #452]	; (8004bb4 <GotoDestination+0x1e0>)
 80049ee:	f7fd fb2d 	bl	800204c <mingyan_pathfind_avoidObstacle>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
		if(isGetAroad != 0)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05c      	beq.n	8004ab6 <GotoDestination+0xe2>
		{
			// success get a road
			for(uint8_t i = 0; i < pathlane.Length; i ++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	73bb      	strb	r3, [r7, #14]
 8004a00:	bf00      	nop
 8004a02:	7bbb      	ldrb	r3, [r7, #14]
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a08:	885b      	ldrh	r3, [r3, #2]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f080 80cc 	bcs.w	8004ba8 <GotoDestination+0x1d4>
			{
				while(1)
				{
					Position_P(&EstiCoord, &pathlane.buffer[pathlane.Head + i]);
 8004a10:	4b69      	ldr	r3, [pc, #420]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	7bbb      	ldrb	r3, [r7, #14]
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4a66      	ldr	r2, [pc, #408]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4865      	ldr	r0, [pc, #404]	; (8004bbc <GotoDestination+0x1e8>)
 8004a26:	f000 f9e7 	bl	8004df8 <Position_P>
					CheckCoord();
 8004a2a:	f000 f931 	bl	8004c90 <CheckCoord>
					if(abs(EstiCoord.x - pathlane.buffer[pathlane.Head + i].x) + abs(EstiCoord.y - pathlane.buffer[pathlane.Head + i].y) <= PATH_PID_TOLERANCE)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <GotoDestination+0x1e8>)
 8004a30:	681c      	ldr	r4, [r3, #0]
 8004a32:	4b61      	ldr	r3, [pc, #388]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	7bbb      	ldrb	r3, [r7, #14]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	4a5e      	ldr	r2, [pc, #376]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc f976 	bl	8000d38 <__aeabi_i2f>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fc f8bb 	bl	8000bcc <__aeabi_fsub>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fc fb87 	bl	800116c <__aeabi_f2iz>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004a64:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004a68:	4b54      	ldr	r3, [pc, #336]	; (8004bbc <GotoDestination+0x1e8>)
 8004a6a:	685d      	ldr	r5, [r3, #4]
 8004a6c:	4b52      	ldr	r3, [pc, #328]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
 8004a74:	4413      	add	r3, r2
 8004a76:	4a50      	ldr	r2, [pc, #320]	; (8004bb8 <GotoDestination+0x1e4>)
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc f959 	bl	8000d38 <__aeabi_i2f>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7fc f89e 	bl	8000bcc <__aeabi_fsub>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fb6a 	bl	800116c <__aeabi_f2iz>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	425b      	neglt	r3, r3
 8004aa0:	4423      	add	r3, r4
 8004aa2:	2b0a      	cmp	r3, #10
 8004aa4:	dcb4      	bgt.n	8004a10 <GotoDestination+0x3c>
					{
						chao_move_angle(0,0);
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	f04f 0000 	mov.w	r0, #0
 8004aae:	f7fd f9b3 	bl	8001e18 <chao_move_angle>
						return 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e079      	b.n	8004baa <GotoDestination+0x1d6>
		}
		else
		{
			while(1)
			{
				Position_P(&EstiCoord, &Destination);
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4840      	ldr	r0, [pc, #256]	; (8004bbc <GotoDestination+0x1e8>)
 8004abc:	f000 f99c 	bl	8004df8 <Position_P>
				CheckCoord();
 8004ac0:	f000 f8e6 	bl	8004c90 <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004ac4:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <GotoDestination+0x1e8>)
 8004ac6:	681c      	ldr	r4, [r3, #0]
 8004ac8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fc f933 	bl	8000d38 <__aeabi_i2f>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7fc f878 	bl	8000bcc <__aeabi_fsub>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc fb44 	bl	800116c <__aeabi_f2iz>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004aea:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004aee:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <GotoDestination+0x1e8>)
 8004af0:	685d      	ldr	r5, [r3, #4]
 8004af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fc f91e 	bl	8000d38 <__aeabi_i2f>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4619      	mov	r1, r3
 8004b00:	4628      	mov	r0, r5
 8004b02:	f7fc f863 	bl	8000bcc <__aeabi_fsub>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fc fb2f 	bl	800116c <__aeabi_f2iz>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bfb8      	it	lt
 8004b14:	425b      	neglt	r3, r3
 8004b16:	4423      	add	r3, r4
 8004b18:	2b0a      	cmp	r3, #10
 8004b1a:	dccc      	bgt.n	8004ab6 <GotoDestination+0xe2>
				{
					chao_move_angle(0,0);
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	f04f 0000 	mov.w	r0, #0
 8004b24:	f7fd f978 	bl	8001e18 <chao_move_angle>
					return 1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e03e      	b.n	8004baa <GotoDestination+0x1d6>
				}
			}
		}
	}
	else if(mode == 0)
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13a      	bne.n	8004ba8 <GotoDestination+0x1d4>
	{
		while(1)
		{
			Position_P(&EstiCoord, &Destination);
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4821      	ldr	r0, [pc, #132]	; (8004bbc <GotoDestination+0x1e8>)
 8004b38:	f000 f95e 	bl	8004df8 <Position_P>
			CheckCoord();
 8004b3c:	f000 f8a8 	bl	8004c90 <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004b40:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <GotoDestination+0x1e8>)
 8004b42:	681c      	ldr	r4, [r3, #0]
 8004b44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fc f8f5 	bl	8000d38 <__aeabi_i2f>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4619      	mov	r1, r3
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7fc f83a 	bl	8000bcc <__aeabi_fsub>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc fb06 	bl	800116c <__aeabi_f2iz>
 8004b60:	4603      	mov	r3, r0
 8004b62:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004b66:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004b6a:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <GotoDestination+0x1e8>)
 8004b6c:	685d      	ldr	r5, [r3, #4]
 8004b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc f8e0 	bl	8000d38 <__aeabi_i2f>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f7fc f825 	bl	8000bcc <__aeabi_fsub>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fc faf1 	bl	800116c <__aeabi_f2iz>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bfb8      	it	lt
 8004b90:	425b      	neglt	r3, r3
 8004b92:	4423      	add	r3, r4
 8004b94:	2b0a      	cmp	r3, #10
 8004b96:	dccc      	bgt.n	8004b32 <GotoDestination+0x15e>
			{
				chao_move_angle(0,0);
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f7fd f93a 	bl	8001e18 <chao_move_angle>
				return 1;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <GotoDestination+0x1d6>
			}
		}
	}
	return 0;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000bc4 	.word	0x20000bc4
 8004bb8:	20007c00 	.word	0x20007c00
 8004bbc:	20000bc8 	.word	0x20000bc8

08004bc0 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004bcc:	e005      	b.n	8004bda <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 8004bce:	4910      	ldr	r1, [pc, #64]	; (8004c10 <Angle_normalization+0x50>)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7fb fffd 	bl	8000bd0 <__addsf3>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7fc fa9c 	bl	800111c <__aeabi_fcmplt>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f1      	bne.n	8004bce <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 8004bea:	e005      	b.n	8004bf8 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 8004bec:	4908      	ldr	r1, [pc, #32]	; (8004c10 <Angle_normalization+0x50>)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7fb ffec 	bl	8000bcc <__aeabi_fsub>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8004bf8:	4905      	ldr	r1, [pc, #20]	; (8004c10 <Angle_normalization+0x50>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7fc faac 	bl	8001158 <__aeabi_fcmpgt>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f2      	bne.n	8004bec <Angle_normalization+0x2c>
	}
	return raw_angle;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	43b40000 	.word	0x43b40000

08004c14 <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	80fb      	strh	r3, [r7, #6]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80bb      	strh	r3, [r7, #4]
	float kp = 2.0;
 8004c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c28:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 8004c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb8      	it	lt
 8004c32:	425b      	neglt	r3, r3
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bfb8      	it	lt
 8004c40:	425b      	neglt	r3, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc f876 	bl	8000d38 <__aeabi_i2f>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4619      	mov	r1, r3
 8004c50:	68b8      	ldr	r0, [r7, #8]
 8004c52:	f7fc f8c5 	bl	8000de0 <__aeabi_fmul>
 8004c56:	4603      	mov	r3, r0
 8004c58:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 8004c5a:	490b      	ldr	r1, [pc, #44]	; (8004c88 <CalSpeed+0x74>)
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7fc fa7b 	bl	8001158 <__aeabi_fcmpgt>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <CalSpeed+0x58>
	{
		Speed = MAX_SPEED;
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <CalSpeed+0x74>)
 8004c6a:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 8004c6c:	4907      	ldr	r1, [pc, #28]	; (8004c8c <CalSpeed+0x78>)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7fc fa54 	bl	800111c <__aeabi_fcmplt>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <CalSpeed+0x6a>
	{
		Speed = MIN_SPEED;
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <CalSpeed+0x78>)
 8004c7c:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	447a0000 	.word	0x447a0000
 8004c8c:	43fa0000 	.word	0x43fa0000

08004c90 <CheckCoord>:

uint8_t CheckCoord(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <CheckCoord+0x40>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d116      	bne.n	8004cca <CheckCoord+0x3a>
	{
		EstiCoord.x = myCoord.x;
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <CheckCoord+0x44>)
 8004c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc f848 	bl	8000d38 <__aeabi_i2f>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <CheckCoord+0x48>)
 8004cac:	6013      	str	r3, [r2, #0]
		EstiCoord.y = myCoord.y;
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <CheckCoord+0x44>)
 8004cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc f83f 	bl	8000d38 <__aeabi_i2f>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <CheckCoord+0x48>)
 8004cbe:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <CheckCoord+0x40>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
		return 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <CheckCoord+0x3c>
	}
	return 0;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000bd0 	.word	0x20000bd0
 8004cd4:	20000bc4 	.word	0x20000bc4
 8004cd8:	20000bc8 	.word	0x20000bc8

08004cdc <Get_v_x>:

float Get_v_x(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
	float v_x = (cmotor_rf.last5Speed - cmotor_lf.last5Speed + cmotor_lb.last5Speed - cmotor_rb.last5Speed) * 50.0 / 4000;
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <Get_v_x+0x74>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <Get_v_x+0x78>)
 8004ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fb ff6d 	bl	8000bcc <__aeabi_fsub>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <Get_v_x+0x7c>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fb ff67 	bl	8000bd0 <__addsf3>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <Get_v_x+0x80>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fb ff5d 	bl	8000bcc <__aeabi_fsub>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fb fbeb 	bl	80004f0 <__aeabi_f2d>
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <Get_v_x+0x84>)
 8004d20:	f7fb fc3e 	bl	80005a0 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <Get_v_x+0x88>)
 8004d32:	f7fb fd5f 	bl	80007f4 <__aeabi_ddiv>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f7fb fef1 	bl	8000b24 <__aeabi_d2f>
 8004d42:	4603      	mov	r3, r0
 8004d44:	607b      	str	r3, [r7, #4]
	return v_x;
 8004d46:	687b      	ldr	r3, [r7, #4]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200009e0 	.word	0x200009e0
 8004d54:	200009a4 	.word	0x200009a4
 8004d58:	20000a1c 	.word	0x20000a1c
 8004d5c:	20000a58 	.word	0x20000a58
 8004d60:	40490000 	.word	0x40490000
 8004d64:	40af4000 	.word	0x40af4000

08004d68 <Get_v_y>:

float Get_v_y(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	float v_y = (cmotor_rf.last5Speed + cmotor_lf.last5Speed + cmotor_lb.last5Speed + cmotor_rb.last5Speed) * 60.0 / 4000;
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <Get_v_y+0x74>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <Get_v_y+0x78>)
 8004d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb ff29 	bl	8000bd0 <__addsf3>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <Get_v_y+0x7c>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f7fb ff21 	bl	8000bd0 <__addsf3>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <Get_v_y+0x80>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fb ff19 	bl	8000bd0 <__addsf3>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb fba5 	bl	80004f0 <__aeabi_f2d>
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <Get_v_y+0x84>)
 8004dac:	f7fb fbf8 	bl	80005a0 <__aeabi_dmul>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <Get_v_y+0x88>)
 8004dbe:	f7fb fd19 	bl	80007f4 <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7fb feab 	bl	8000b24 <__aeabi_d2f>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	607b      	str	r3, [r7, #4]
	return v_y;
 8004dd2:	687b      	ldr	r3, [r7, #4]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	200009e0 	.word	0x200009e0
 8004de0:	200009a4 	.word	0x200009a4
 8004de4:	20000a1c 	.word	0x20000a1c
 8004de8:	20000a58 	.word	0x20000a58
 8004dec:	404e0000 	.word	0x404e0000
 8004df0:	40af4000 	.word	0x40af4000
 8004df4:	00000000 	.word	0x00000000

08004df8 <Position_P>:

void Position_P(Coordinate* cur, Coordinate* goal)
{
 8004df8:	b5b0      	push	{r4, r5, r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	int16_t x_error = goal->x - cur->x;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	827b      	strh	r3, [r7, #18]
	int16_t y_error = goal->y - cur->y;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	823b      	strh	r3, [r7, #16]
	if (y_error == 0)
 8004e2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d126      	bne.n	8004e84 <Position_P+0x8c>
	{
		if(x_error < 0)
 8004e36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da0b      	bge.n	8004e56 <Position_P+0x5e>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 8004e3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fee5 	bl	8004c14 <CalSpeed>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4878      	ldr	r0, [pc, #480]	; (8005030 <Position_P+0x238>)
 8004e50:	f7fc ffe2 	bl	8001e18 <chao_move_angle>
 8004e54:	e08d      	b.n	8004f72 <Position_P+0x17a>
		}
		else if(x_error > 0)
 8004e56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	dd0b      	ble.n	8004e76 <Position_P+0x7e>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 8004e5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fed5 	bl	8004c14 <CalSpeed>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4871      	ldr	r0, [pc, #452]	; (8005034 <Position_P+0x23c>)
 8004e70:	f7fc ffd2 	bl	8001e18 <chao_move_angle>
 8004e74:	e07d      	b.n	8004f72 <Position_P+0x17a>
		}
		else
		{
			chao_move_angle(0, 0);
 8004e76:	f04f 0100 	mov.w	r1, #0
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	f7fc ffcb 	bl	8001e18 <chao_move_angle>
 8004e82:	e076      	b.n	8004f72 <Position_P+0x17a>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 8004e84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb ff55 	bl	8000d38 <__aeabi_i2f>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb ff4f 	bl	8000d38 <__aeabi_i2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7fc f852 	bl	8000f48 <__aeabi_fdiv>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb fb22 	bl	80004f0 <__aeabi_f2d>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f006 fdc8 	bl	800ba48 <atan>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fb fe30 	bl	8000b24 <__aeabi_d2f>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	617b      	str	r3, [r7, #20]
		if(y_error < 0)
 8004ec8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da0f      	bge.n	8004ef0 <Position_P+0xf8>
		{
			azimuth += M_PI;
 8004ed0:	6978      	ldr	r0, [r7, #20]
 8004ed2:	f7fb fb0d 	bl	80004f0 <__aeabi_f2d>
 8004ed6:	a350      	add	r3, pc, #320	; (adr r3, 8005018 <Position_P+0x220>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f7fb f9aa 	bl	8000234 <__adddf3>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	f7fb fe1c 	bl	8000b24 <__aeabi_d2f>
 8004eec:	4603      	mov	r3, r0
 8004eee:	617b      	str	r3, [r7, #20]
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 8004ef0:	6978      	ldr	r0, [r7, #20]
 8004ef2:	f7fb fafd 	bl	80004f0 <__aeabi_f2d>
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	4b4f      	ldr	r3, [pc, #316]	; (8005038 <Position_P+0x240>)
 8004efc:	f7fb fb50 	bl	80005a0 <__aeabi_dmul>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	a345      	add	r3, pc, #276	; (adr r3, 8005020 <Position_P+0x228>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb fc71 	bl	80007f4 <__aeabi_ddiv>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fb fe03 	bl	8000b24 <__aeabi_d2f>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	617b      	str	r3, [r7, #20]
		azimuth = Angle_normalization(azimuth);
 8004f22:	6978      	ldr	r0, [r7, #20]
 8004f24:	f7ff fe4c 	bl	8004bc0 <Angle_normalization>
 8004f28:	6178      	str	r0, [r7, #20]
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 8004f2a:	4b44      	ldr	r3, [pc, #272]	; (800503c <Position_P+0x244>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a44      	ldr	r2, [pc, #272]	; (8005040 <Position_P+0x248>)
 8004f30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fb fe49 	bl	8000bcc <__aeabi_fsub>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fe3f 	bl	8004bc0 <Angle_normalization>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4619      	mov	r1, r3
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	f7fb fe40 	bl	8000bcc <__aeabi_fsub>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60fb      	str	r3, [r7, #12]
		angle = Angle_normalization(angle);
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7ff fe35 	bl	8004bc0 <Angle_normalization>
 8004f56:	60f8      	str	r0, [r7, #12]
		chao_move_angle(angle, CalSpeed(x_error, y_error));
 8004f58:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fe56 	bl	8004c14 <CalSpeed>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7fc ff53 	bl	8001e18 <chao_move_angle>
	}
	CheckCoord();
 8004f72:	f7ff fe8d 	bl	8004c90 <CheckCoord>
	HAL_Delay(10); // delay 10 ms = 100 Hz
 8004f76:	200a      	movs	r0, #10
 8004f78:	f001 fb5c 	bl	8006634 <HAL_Delay>
	if(CheckCoord() == 0)
 8004f7c:	f7ff fe88 	bl	8004c90 <CheckCoord>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d141      	bne.n	800500a <Position_P+0x212>
	{
		EstiCoord.x = EstiCoord.x + 0.01 * Get_v_x();
 8004f86:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <Position_P+0x24c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fb fab0 	bl	80004f0 <__aeabi_f2d>
 8004f90:	4604      	mov	r4, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	f7ff fea2 	bl	8004cdc <Get_v_x>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb faa8 	bl	80004f0 <__aeabi_f2d>
 8004fa0:	a321      	add	r3, pc, #132	; (adr r3, 8005028 <Position_P+0x230>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb fafb 	bl	80005a0 <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f7fb f93f 	bl	8000234 <__adddf3>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb fdb1 	bl	8000b24 <__aeabi_d2f>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <Position_P+0x24c>)
 8004fc6:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + 0.01 * Get_v_y();
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <Position_P+0x24c>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb fa8f 	bl	80004f0 <__aeabi_f2d>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	f7ff fec7 	bl	8004d68 <Get_v_y>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fb fa87 	bl	80004f0 <__aeabi_f2d>
 8004fe2:	a311      	add	r3, pc, #68	; (adr r3, 8005028 <Position_P+0x230>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb fada 	bl	80005a0 <__aeabi_dmul>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f7fb f91e 	bl	8000234 <__adddf3>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fd90 	bl	8000b24 <__aeabi_d2f>
 8005004:	4603      	mov	r3, r0
 8005006:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <Position_P+0x24c>)
 8005008:	6053      	str	r3, [r2, #4]
	}
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bdb0      	pop	{r4, r5, r7, pc}
 8005012:	bf00      	nop
 8005014:	f3af 8000 	nop.w
 8005018:	54442d18 	.word	0x54442d18
 800501c:	400921fb 	.word	0x400921fb
 8005020:	54442d18 	.word	0x54442d18
 8005024:	401921fb 	.word	0x401921fb
 8005028:	47ae147b 	.word	0x47ae147b
 800502c:	3f847ae1 	.word	0x3f847ae1
 8005030:	43870000 	.word	0x43870000
 8005034:	42b40000 	.word	0x42b40000
 8005038:	40768000 	.word	0x40768000
 800503c:	20000bd4 	.word	0x20000bd4
 8005040:	20000a94 	.word	0x20000a94
 8005044:	20000bc8 	.word	0x20000bc8

08005048 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af04      	add	r7, sp, #16
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	9302      	str	r3, [sp, #8]
 8005064:	2301      	movs	r3, #1
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	1dfb      	adds	r3, r7, #7
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2301      	movs	r3, #1
 800506e:	2200      	movs	r2, #0
 8005070:	2178      	movs	r1, #120	; 0x78
 8005072:	4803      	ldr	r0, [pc, #12]	; (8005080 <ssd1306_WriteCommand+0x2c>)
 8005074:	f002 fb82 	bl	800777c <HAL_I2C_Mem_Write>
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000644 	.word	0x20000644

08005084 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af04      	add	r7, sp, #16
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f04f 32ff 	mov.w	r2, #4294967295
 8005096:	9202      	str	r2, [sp, #8]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	2240      	movs	r2, #64	; 0x40
 80050a2:	2178      	movs	r1, #120	; 0x78
 80050a4:	4803      	ldr	r0, [pc, #12]	; (80050b4 <ssd1306_WriteData+0x30>)
 80050a6:	f002 fb69 	bl	800777c <HAL_I2C_Mem_Write>
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000644 	.word	0x20000644

080050b8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80050bc:	f7ff ffc4 	bl	8005048 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80050c0:	2064      	movs	r0, #100	; 0x64
 80050c2:	f001 fab7 	bl	8006634 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80050c6:	2000      	movs	r0, #0
 80050c8:	f000 f9be 	bl	8005448 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80050cc:	2020      	movs	r0, #32
 80050ce:	f7ff ffc1 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80050d2:	2000      	movs	r0, #0
 80050d4:	f7ff ffbe 	bl	8005054 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80050d8:	20b0      	movs	r0, #176	; 0xb0
 80050da:	f7ff ffbb 	bl	8005054 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80050de:	20c8      	movs	r0, #200	; 0xc8
 80050e0:	f7ff ffb8 	bl	8005054 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80050e4:	2000      	movs	r0, #0
 80050e6:	f7ff ffb5 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80050ea:	2010      	movs	r0, #16
 80050ec:	f7ff ffb2 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80050f0:	2040      	movs	r0, #64	; 0x40
 80050f2:	f7ff ffaf 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80050f6:	20ff      	movs	r0, #255	; 0xff
 80050f8:	f000 f992 	bl	8005420 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80050fc:	20a1      	movs	r0, #161	; 0xa1
 80050fe:	f7ff ffa9 	bl	8005054 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005102:	20a6      	movs	r0, #166	; 0xa6
 8005104:	f7ff ffa6 	bl	8005054 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005108:	20a8      	movs	r0, #168	; 0xa8
 800510a:	f7ff ffa3 	bl	8005054 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800510e:	201f      	movs	r0, #31
 8005110:	f7ff ffa0 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005114:	20a4      	movs	r0, #164	; 0xa4
 8005116:	f7ff ff9d 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800511a:	20d3      	movs	r0, #211	; 0xd3
 800511c:	f7ff ff9a 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005120:	2000      	movs	r0, #0
 8005122:	f7ff ff97 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005126:	20d5      	movs	r0, #213	; 0xd5
 8005128:	f7ff ff94 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800512c:	20f0      	movs	r0, #240	; 0xf0
 800512e:	f7ff ff91 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005132:	20d9      	movs	r0, #217	; 0xd9
 8005134:	f7ff ff8e 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005138:	2022      	movs	r0, #34	; 0x22
 800513a:	f7ff ff8b 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800513e:	20da      	movs	r0, #218	; 0xda
 8005140:	f7ff ff88 	bl	8005054 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8005144:	2002      	movs	r0, #2
 8005146:	f7ff ff85 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800514a:	20db      	movs	r0, #219	; 0xdb
 800514c:	f7ff ff82 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005150:	2020      	movs	r0, #32
 8005152:	f7ff ff7f 	bl	8005054 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005156:	208d      	movs	r0, #141	; 0x8d
 8005158:	f7ff ff7c 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800515c:	2014      	movs	r0, #20
 800515e:	f7ff ff79 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005162:	2001      	movs	r0, #1
 8005164:	f000 f970 	bl	8005448 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005168:	2000      	movs	r0, #0
 800516a:	f000 f80f 	bl	800518c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800516e:	f000 f82f 	bl	80051d0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <ssd1306_Init+0xd0>)
 8005174:	2200      	movs	r2, #0
 8005176:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <ssd1306_Init+0xd0>)
 800517a:	2200      	movs	r2, #0
 800517c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800517e:	4b02      	ldr	r3, [pc, #8]	; (8005188 <ssd1306_Init+0xd0>)
 8005180:	2201      	movs	r2, #1
 8005182:	711a      	strb	r2, [r3, #4]
}
 8005184:	bf00      	nop
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20007f78 	.word	0x20007f78

0800518c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e00d      	b.n	80051b8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <ssd1306_Fill+0x1a>
 80051a2:	2100      	movs	r1, #0
 80051a4:	e000      	b.n	80051a8 <ssd1306_Fill+0x1c>
 80051a6:	21ff      	movs	r1, #255	; 0xff
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <ssd1306_Fill+0x40>)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	460a      	mov	r2, r1
 80051b0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051be:	d3ed      	bcc.n	800519c <ssd1306_Fill+0x10>
    }
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	20007d78 	.word	0x20007d78

080051d0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051d6:	2300      	movs	r3, #0
 80051d8:	71fb      	strb	r3, [r7, #7]
 80051da:	e016      	b.n	800520a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	3b50      	subs	r3, #80	; 0x50
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff ff36 	bl	8005054 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80051e8:	2000      	movs	r0, #0
 80051ea:	f7ff ff33 	bl	8005054 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80051ee:	2010      	movs	r0, #16
 80051f0:	f7ff ff30 	bl	8005054 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	01db      	lsls	r3, r3, #7
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <ssd1306_UpdateScreen+0x4c>)
 80051fa:	4413      	add	r3, r2
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff40 	bl	8005084 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	3301      	adds	r3, #1
 8005208:	71fb      	strb	r3, [r7, #7]
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d9e5      	bls.n	80051dc <ssd1306_UpdateScreen+0xc>
    }
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20007d78 	.word	0x20007d78

08005220 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
 800522a:	460b      	mov	r3, r1
 800522c:	71bb      	strb	r3, [r7, #6]
 800522e:	4613      	mov	r3, r2
 8005230:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	2b00      	cmp	r3, #0
 8005238:	db3d      	blt.n	80052b6 <ssd1306_DrawPixel+0x96>
 800523a:	79bb      	ldrb	r3, [r7, #6]
 800523c:	2b1f      	cmp	r3, #31
 800523e:	d83a      	bhi.n	80052b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8005240:	797b      	ldrb	r3, [r7, #5]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d11a      	bne.n	800527c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005246:	79fa      	ldrb	r2, [r7, #7]
 8005248:	79bb      	ldrb	r3, [r7, #6]
 800524a:	08db      	lsrs	r3, r3, #3
 800524c:	b2d8      	uxtb	r0, r3
 800524e:	4603      	mov	r3, r0
 8005250:	01db      	lsls	r3, r3, #7
 8005252:	4413      	add	r3, r2
 8005254:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <ssd1306_DrawPixel+0xa0>)
 8005256:	5cd3      	ldrb	r3, [r2, r3]
 8005258:	b25a      	sxtb	r2, r3
 800525a:	79bb      	ldrb	r3, [r7, #6]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	b25b      	sxtb	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b259      	sxtb	r1, r3
 800526c:	79fa      	ldrb	r2, [r7, #7]
 800526e:	4603      	mov	r3, r0
 8005270:	01db      	lsls	r3, r3, #7
 8005272:	4413      	add	r3, r2
 8005274:	b2c9      	uxtb	r1, r1
 8005276:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <ssd1306_DrawPixel+0xa0>)
 8005278:	54d1      	strb	r1, [r2, r3]
 800527a:	e01d      	b.n	80052b8 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800527c:	79fa      	ldrb	r2, [r7, #7]
 800527e:	79bb      	ldrb	r3, [r7, #6]
 8005280:	08db      	lsrs	r3, r3, #3
 8005282:	b2d8      	uxtb	r0, r3
 8005284:	4603      	mov	r3, r0
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4413      	add	r3, r2
 800528a:	4a0d      	ldr	r2, [pc, #52]	; (80052c0 <ssd1306_DrawPixel+0xa0>)
 800528c:	5cd3      	ldrb	r3, [r2, r3]
 800528e:	b25a      	sxtb	r2, r3
 8005290:	79bb      	ldrb	r3, [r7, #6]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2101      	movs	r1, #1
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	b25b      	sxtb	r3, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	b25b      	sxtb	r3, r3
 80052a2:	4013      	ands	r3, r2
 80052a4:	b259      	sxtb	r1, r3
 80052a6:	79fa      	ldrb	r2, [r7, #7]
 80052a8:	4603      	mov	r3, r0
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	4413      	add	r3, r2
 80052ae:	b2c9      	uxtb	r1, r1
 80052b0:	4a03      	ldr	r2, [pc, #12]	; (80052c0 <ssd1306_DrawPixel+0xa0>)
 80052b2:	54d1      	strb	r1, [r2, r3]
 80052b4:	e000      	b.n	80052b8 <ssd1306_DrawPixel+0x98>
        return;
 80052b6:	bf00      	nop
    }
}
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	20007d78 	.word	0x20007d78

080052c4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b089      	sub	sp, #36	; 0x24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	1d38      	adds	r0, r7, #4
 80052ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80052d2:	461a      	mov	r2, r3
 80052d4:	4623      	mov	r3, r4
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	4613      	mov	r3, r2
 80052da:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b1f      	cmp	r3, #31
 80052e0:	d902      	bls.n	80052e8 <ssd1306_WriteChar+0x24>
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b7e      	cmp	r3, #126	; 0x7e
 80052e6:	d901      	bls.n	80052ec <ssd1306_WriteChar+0x28>
        return 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e06d      	b.n	80053c8 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	793b      	ldrb	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	dc06      	bgt.n	8005308 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80052fa:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 80052fc:	885b      	ldrh	r3, [r3, #2]
 80052fe:	461a      	mov	r2, r3
 8005300:	797b      	ldrb	r3, [r7, #5]
 8005302:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005304:	2b20      	cmp	r3, #32
 8005306:	dd01      	ble.n	800530c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005308:	2300      	movs	r3, #0
 800530a:	e05d      	b.n	80053c8 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	e04c      	b.n	80053ac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	3b20      	subs	r3, #32
 8005318:	7979      	ldrb	r1, [r7, #5]
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4619      	mov	r1, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	440b      	add	r3, r1
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	e034      	b.n	800539c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d012      	beq.n	8005368 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005342:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4413      	add	r3, r2
 800534e:	b2d8      	uxtb	r0, r3
 8005350:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 8005352:	885b      	ldrh	r3, [r3, #2]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	4413      	add	r3, r2
 800535c:	b2db      	uxtb	r3, r3
 800535e:	7bba      	ldrb	r2, [r7, #14]
 8005360:	4619      	mov	r1, r3
 8005362:	f7ff ff5d 	bl	8005220 <ssd1306_DrawPixel>
 8005366:	e016      	b.n	8005396 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	4413      	add	r3, r2
 8005374:	b2d8      	uxtb	r0, r3
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	4413      	add	r3, r2
 8005382:	b2d9      	uxtb	r1, r3
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	f7ff ff45 	bl	8005220 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3301      	adds	r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	793b      	ldrb	r3, [r7, #4]
 800539e:	461a      	mov	r2, r3
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d3c5      	bcc.n	8005332 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	797b      	ldrb	r3, [r7, #5]
 80053ae:	461a      	mov	r2, r3
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d3ad      	bcc.n	8005312 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 80053b8:	881a      	ldrh	r2, [r3, #0]
 80053ba:	793b      	ldrb	r3, [r7, #4]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4413      	add	r3, r2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <ssd1306_WriteChar+0x10c>)
 80053c4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3724      	adds	r7, #36	; 0x24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}
 80053d0:	20007f78 	.word	0x20007f78

080053d4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	1d38      	adds	r0, r7, #4
 80053de:	e880 0006 	stmia.w	r0, {r1, r2}
 80053e2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80053e4:	e012      	b.n	800540c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	7818      	ldrb	r0, [r3, #0]
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	1d3a      	adds	r2, r7, #4
 80053ee:	ca06      	ldmia	r2, {r1, r2}
 80053f0:	f7ff ff68 	bl	80052c4 <ssd1306_WriteChar>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d002      	beq.n	8005406 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	e008      	b.n	8005418 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e8      	bne.n	80053e6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800542a:	2381      	movs	r3, #129	; 0x81
 800542c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fe0f 	bl	8005054 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fe0b 	bl	8005054 <ssd1306_WriteCommand>
}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005458:	23af      	movs	r3, #175	; 0xaf
 800545a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <ssd1306_SetDisplayOn+0x38>)
 800545e:	2201      	movs	r2, #1
 8005460:	715a      	strb	r2, [r3, #5]
 8005462:	e004      	b.n	800546e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005464:	23ae      	movs	r3, #174	; 0xae
 8005466:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <ssd1306_SetDisplayOn+0x38>)
 800546a:	2200      	movs	r2, #0
 800546c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fdef 	bl	8005054 <ssd1306_WriteCommand>
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20007f78 	.word	0x20007f78

08005484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_MspInit+0x5c>)
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <HAL_MspInit+0x5c>)
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	6193      	str	r3, [r2, #24]
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <HAL_MspInit+0x5c>)
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <HAL_MspInit+0x5c>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <HAL_MspInit+0x5c>)
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	61d3      	str	r3, [r2, #28]
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <HAL_MspInit+0x5c>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_MspInit+0x60>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	4a04      	ldr	r2, [pc, #16]	; (80054e4 <HAL_MspInit+0x60>)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40010000 	.word	0x40010000

080054e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <HAL_I2C_MspInit+0x90>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d132      	bne.n	800556e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005508:	4b1c      	ldr	r3, [pc, #112]	; (800557c <HAL_I2C_MspInit+0x94>)
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_I2C_MspInit+0x94>)
 800550e:	f043 0308 	orr.w	r3, r3, #8
 8005512:	6193      	str	r3, [r2, #24]
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_I2C_MspInit+0x94>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005520:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005526:	2312      	movs	r3, #18
 8005528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800552a:	2303      	movs	r3, #3
 800552c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	4619      	mov	r1, r3
 8005534:	4812      	ldr	r0, [pc, #72]	; (8005580 <HAL_I2C_MspInit+0x98>)
 8005536:	f001 fe31 	bl	800719c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <HAL_I2C_MspInit+0x9c>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	4a0c      	ldr	r2, [pc, #48]	; (8005584 <HAL_I2C_MspInit+0x9c>)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <HAL_I2C_MspInit+0x94>)
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <HAL_I2C_MspInit+0x94>)
 800555c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005560:	61d3      	str	r3, [r2, #28]
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_I2C_MspInit+0x94>)
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800556e:	bf00      	nop
 8005570:	3728      	adds	r7, #40	; 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40005400 	.word	0x40005400
 800557c:	40021000 	.word	0x40021000
 8005580:	40010c00 	.word	0x40010c00
 8005584:	40010000 	.word	0x40010000

08005588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <HAL_TIM_Base_MspInit+0x8c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10c      	bne.n	80055b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800559a:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055a4:	6193      	str	r3, [r2, #24]
 80055a6:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80055b2:	e02a      	b.n	800560a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_TIM_Base_MspInit+0x94>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d114      	bne.n	80055e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80055be:	4b16      	ldr	r3, [pc, #88]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055c4:	f043 0310 	orr.w	r3, r3, #16
 80055c8:	61d3      	str	r3, [r2, #28]
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80055d6:	2200      	movs	r2, #0
 80055d8:	2101      	movs	r1, #1
 80055da:	2036      	movs	r0, #54	; 0x36
 80055dc:	f001 f925 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80055e0:	2036      	movs	r0, #54	; 0x36
 80055e2:	f001 f93e 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 80055e6:	e010      	b.n	800560a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <HAL_TIM_Base_MspInit+0x98>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10b      	bne.n	800560a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	4a08      	ldr	r2, [pc, #32]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 80055f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055fc:	6193      	str	r3, [r2, #24]
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_TIM_Base_MspInit+0x90>)
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40021000 	.word	0x40021000
 800561c:	40001000 	.word	0x40001000
 8005620:	40013400 	.word	0x40013400

08005624 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b090      	sub	sp, #64	; 0x40
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800562c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005642:	d14f      	bne.n	80056e4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005644:	4b68      	ldr	r3, [pc, #416]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	4a67      	ldr	r2, [pc, #412]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	61d3      	str	r3, [r2, #28]
 8005650:	4b65      	ldr	r3, [pc, #404]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565c:	4b62      	ldr	r3, [pc, #392]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	4a61      	ldr	r2, [pc, #388]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	6193      	str	r3, [r2, #24]
 8005668:	4b5f      	ldr	r3, [pc, #380]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005674:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	4a5b      	ldr	r2, [pc, #364]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800567a:	f043 0308 	orr.w	r3, r3, #8
 800567e:	6193      	str	r3, [r2, #24]
 8005680:	4b59      	ldr	r3, [pc, #356]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800568c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005692:	2300      	movs	r3, #0
 8005694:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005696:	2300      	movs	r3, #0
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800569e:	4619      	mov	r1, r3
 80056a0:	4852      	ldr	r0, [pc, #328]	; (80057ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80056a2:	f001 fd7b 	bl	800719c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056a6:	2308      	movs	r3, #8
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056aa:	2300      	movs	r3, #0
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056b6:	4619      	mov	r1, r3
 80056b8:	484d      	ldr	r0, [pc, #308]	; (80057f0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80056ba:	f001 fd6f 	bl	800719c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80056be:	4b4d      	ldr	r3, [pc, #308]	; (80057f4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056dc:	4a45      	ldr	r2, [pc, #276]	; (80057f4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80056e2:	e07c      	b.n	80057de <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a43      	ldr	r2, [pc, #268]	; (80057f8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d124      	bne.n	8005738 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056ee:	4b3e      	ldr	r3, [pc, #248]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4a3d      	ldr	r2, [pc, #244]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056f4:	f043 0302 	orr.w	r3, r3, #2
 80056f8:	61d3      	str	r3, [r2, #28]
 80056fa:	4b3b      	ldr	r3, [pc, #236]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005706:	4b38      	ldr	r3, [pc, #224]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	4a37      	ldr	r2, [pc, #220]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	6193      	str	r3, [r2, #24]
 8005712:	4b35      	ldr	r3, [pc, #212]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800571e:	23c0      	movs	r3, #192	; 0xc0
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005722:	2300      	movs	r3, #0
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800572e:	4619      	mov	r1, r3
 8005730:	482e      	ldr	r0, [pc, #184]	; (80057ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005732:	f001 fd33 	bl	800719c <HAL_GPIO_Init>
}
 8005736:	e052      	b.n	80057de <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <HAL_TIM_Encoder_MspInit+0x1d8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d124      	bne.n	800578c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005742:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005748:	f043 0304 	orr.w	r3, r3, #4
 800574c:	61d3      	str	r3, [r2, #28]
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800575a:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	6193      	str	r3, [r2, #24]
 8005766:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005772:	23c0      	movs	r3, #192	; 0xc0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005776:	2300      	movs	r3, #0
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005782:	4619      	mov	r1, r3
 8005784:	481a      	ldr	r0, [pc, #104]	; (80057f0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005786:	f001 fd09 	bl	800719c <HAL_GPIO_Init>
}
 800578a:	e028      	b.n	80057de <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d123      	bne.n	80057de <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800579c:	f043 0308 	orr.w	r3, r3, #8
 80057a0:	61d3      	str	r3, [r2, #28]
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057b4:	f043 0304 	orr.w	r3, r3, #4
 80057b8:	6193      	str	r3, [r2, #24]
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057c6:	2303      	movs	r3, #3
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057ca:	2300      	movs	r3, #0
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057d6:	4619      	mov	r1, r3
 80057d8:	4804      	ldr	r0, [pc, #16]	; (80057ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80057da:	f001 fcdf 	bl	800719c <HAL_GPIO_Init>
}
 80057de:	bf00      	nop
 80057e0:	3740      	adds	r7, #64	; 0x40
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40010800 	.word	0x40010800
 80057f0:	40010c00 	.word	0x40010c00
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00

08005804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800580c:	f107 0310 	add.w	r3, r7, #16
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_TIM_MspPostInit+0x98>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d119      	bne.n	8005858 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005824:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <HAL_TIM_MspPostInit+0x9c>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_TIM_MspPostInit+0x9c>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	6193      	str	r3, [r2, #24]
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_TIM_MspPostInit+0x9c>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800583c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005842:	2302      	movs	r3, #2
 8005844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005846:	2302      	movs	r3, #2
 8005848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584a:	f107 0310 	add.w	r3, r7, #16
 800584e:	4619      	mov	r1, r3
 8005850:	4814      	ldr	r0, [pc, #80]	; (80058a4 <HAL_TIM_MspPostInit+0xa0>)
 8005852:	f001 fca3 	bl	800719c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005856:	e01d      	b.n	8005894 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <HAL_TIM_MspPostInit+0xa4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d118      	bne.n	8005894 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <HAL_TIM_MspPostInit+0x9c>)
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <HAL_TIM_MspPostInit+0x9c>)
 8005868:	f043 0310 	orr.w	r3, r3, #16
 800586c:	6193      	str	r3, [r2, #24]
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_TIM_MspPostInit+0x9c>)
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800587a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800587e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005880:	2302      	movs	r3, #2
 8005882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005884:	2302      	movs	r3, #2
 8005886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005888:	f107 0310 	add.w	r3, r7, #16
 800588c:	4619      	mov	r1, r3
 800588e:	4807      	ldr	r0, [pc, #28]	; (80058ac <HAL_TIM_MspPostInit+0xa8>)
 8005890:	f001 fc84 	bl	800719c <HAL_GPIO_Init>
}
 8005894:	bf00      	nop
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40021000 	.word	0x40021000
 80058a4:	40010800 	.word	0x40010800
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40011000 	.word	0x40011000

080058b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b8:	f107 031c 	add.w	r3, r7, #28
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6a      	ldr	r2, [pc, #424]	; (8005a74 <HAL_UART_MspInit+0x1c4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d156      	bne.n	800597e <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058d0:	4b69      	ldr	r3, [pc, #420]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4a68      	ldr	r2, [pc, #416]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058da:	61d3      	str	r3, [r2, #28]
 80058dc:	4b66      	ldr	r3, [pc, #408]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e8:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	4a62      	ldr	r2, [pc, #392]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80058ee:	f043 0304 	orr.w	r3, r3, #4
 80058f2:	6193      	str	r3, [r2, #24]
 80058f4:	4b60      	ldr	r3, [pc, #384]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8005900:	2304      	movs	r3, #4
 8005902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005904:	2302      	movs	r3, #2
 8005906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005908:	2303      	movs	r3, #3
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 800590c:	f107 031c 	add.w	r3, r7, #28
 8005910:	4619      	mov	r1, r3
 8005912:	485a      	ldr	r0, [pc, #360]	; (8005a7c <HAL_UART_MspInit+0x1cc>)
 8005914:	f001 fc42 	bl	800719c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8005918:	2308      	movs	r3, #8
 800591a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800591c:	2300      	movs	r3, #0
 800591e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8005924:	f107 031c 	add.w	r3, r7, #28
 8005928:	4619      	mov	r1, r3
 800592a:	4854      	ldr	r0, [pc, #336]	; (8005a7c <HAL_UART_MspInit+0x1cc>)
 800592c:	f001 fc36 	bl	800719c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005932:	4a54      	ldr	r2, [pc, #336]	; (8005a84 <HAL_UART_MspInit+0x1d4>)
 8005934:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005936:	4b52      	ldr	r3, [pc, #328]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005938:	2200      	movs	r2, #0
 800593a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 800593e:	2200      	movs	r2, #0
 8005940:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005942:	4b4f      	ldr	r3, [pc, #316]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005948:	4b4d      	ldr	r3, [pc, #308]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800594e:	4b4c      	ldr	r3, [pc, #304]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005950:	2200      	movs	r2, #0
 8005952:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005954:	4b4a      	ldr	r3, [pc, #296]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005956:	2200      	movs	r2, #0
 8005958:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800595a:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 800595c:	2200      	movs	r2, #0
 800595e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005960:	4847      	ldr	r0, [pc, #284]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005962:	f000 ff99 	bl	8006898 <HAL_DMA_Init>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800596c:	f7fe fda2 	bl	80044b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a43      	ldr	r2, [pc, #268]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
 8005976:	4a42      	ldr	r2, [pc, #264]	; (8005a80 <HAL_UART_MspInit+0x1d0>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800597c:	e076      	b.n	8005a6c <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a41      	ldr	r2, [pc, #260]	; (8005a88 <HAL_UART_MspInit+0x1d8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d171      	bne.n	8005a6c <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005988:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4a3a      	ldr	r2, [pc, #232]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 800598e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005992:	61d3      	str	r3, [r2, #28]
 8005994:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	4a34      	ldr	r2, [pc, #208]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80059a6:	f043 0310 	orr.w	r3, r3, #16
 80059aa:	6193      	str	r3, [r2, #24]
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <HAL_UART_MspInit+0x1c8>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 80059b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059be:	2302      	movs	r3, #2
 80059c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059c2:	2303      	movs	r3, #3
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 80059c6:	f107 031c 	add.w	r3, r7, #28
 80059ca:	4619      	mov	r1, r3
 80059cc:	482f      	ldr	r0, [pc, #188]	; (8005a8c <HAL_UART_MspInit+0x1dc>)
 80059ce:	f001 fbe5 	bl	800719c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 80059d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059d8:	2300      	movs	r3, #0
 80059da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 80059e0:	f107 031c 	add.w	r3, r7, #28
 80059e4:	4619      	mov	r1, r3
 80059e6:	4829      	ldr	r0, [pc, #164]	; (8005a8c <HAL_UART_MspInit+0x1dc>)
 80059e8:	f001 fbd8 	bl	800719c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <HAL_UART_MspInit+0x1e0>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	f043 0310 	orr.w	r3, r3, #16
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0a:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_UART_MspInit+0x1e0>)
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005a10:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a12:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <HAL_UART_MspInit+0x1e8>)
 8005a14:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a24:	2280      	movs	r2, #128	; 0x80
 8005a26:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a28:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a2e:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a3a:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a40:	4814      	ldr	r0, [pc, #80]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a42:	f000 ff29 	bl	8006898 <HAL_DMA_Init>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8005a4c:	f7fe fd32 	bl	80044b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38
 8005a56:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <HAL_UART_MspInit+0x1e4>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2102      	movs	r1, #2
 8005a60:	2027      	movs	r0, #39	; 0x27
 8005a62:	f000 fee2 	bl	800682a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a66:	2027      	movs	r0, #39	; 0x27
 8005a68:	f000 fefb 	bl	8006862 <HAL_NVIC_EnableIRQ>
}
 8005a6c:	bf00      	nop
 8005a6e:	3730      	adds	r7, #48	; 0x30
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40010800 	.word	0x40010800
 8005a80:	2000091c 	.word	0x2000091c
 8005a84:	4002006c 	.word	0x4002006c
 8005a88:	40004800 	.word	0x40004800
 8005a8c:	40011000 	.word	0x40011000
 8005a90:	40010000 	.word	0x40010000
 8005a94:	20000960 	.word	0x20000960
 8005a98:	40020030 	.word	0x40020030

08005a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005aa0:	e7fe      	b.n	8005aa0 <NMI_Handler+0x4>

08005aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aa6:	e7fe      	b.n	8005aa6 <HardFault_Handler+0x4>

08005aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005aac:	e7fe      	b.n	8005aac <MemManage_Handler+0x4>

08005aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ab2:	e7fe      	b.n	8005ab2 <BusFault_Handler+0x4>

08005ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ab8:	e7fe      	b.n	8005ab8 <UsageFault_Handler+0x4>

08005aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005abe:	bf00      	nop
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aca:	bf00      	nop
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ae2:	f000 fd8b 	bl	80065fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005af0:	4802      	ldr	r0, [pc, #8]	; (8005afc <DMA1_Channel3_IRQHandler+0x10>)
 8005af2:	f001 f8e9 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000960 	.word	0x20000960

08005b00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <DMA1_Channel6_IRQHandler+0x24>)
 8005b06:	7a1b      	ldrb	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8005b0c:	4805      	ldr	r0, [pc, #20]	; (8005b24 <DMA1_Channel6_IRQHandler+0x24>)
 8005b0e:	f7fd f867 	bl	8002be0 <huansic_xb_decodeHeader>
 8005b12:	e002      	b.n	8005b1a <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8005b14:	4803      	ldr	r0, [pc, #12]	; (8005b24 <DMA1_Channel6_IRQHandler+0x24>)
 8005b16:	f7fd f8a1 	bl	8002c5c <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b1a:	4803      	ldr	r0, [pc, #12]	; (8005b28 <DMA1_Channel6_IRQHandler+0x28>)
 8005b1c:	f001 f8d4 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000aec 	.word	0x20000aec
 8005b28:	2000091c 	.word	0x2000091c

08005b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <USART3_IRQHandler+0x10>)
 8005b32:	f004 f83d 	bl	8009bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200008d4 	.word	0x200008d4

08005b40 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8005b44:	4808      	ldr	r0, [pc, #32]	; (8005b68 <TIM6_IRQHandler+0x28>)
 8005b46:	f7fc fee1 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8005b4a:	4808      	ldr	r0, [pc, #32]	; (8005b6c <TIM6_IRQHandler+0x2c>)
 8005b4c:	f7fc fede 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8005b50:	4807      	ldr	r0, [pc, #28]	; (8005b70 <TIM6_IRQHandler+0x30>)
 8005b52:	f7fc fedb 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8005b56:	4807      	ldr	r0, [pc, #28]	; (8005b74 <TIM6_IRQHandler+0x34>)
 8005b58:	f7fc fed8 	bl	800290c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005b5c:	4806      	ldr	r0, [pc, #24]	; (8005b78 <TIM6_IRQHandler+0x38>)
 8005b5e:	f003 f831 	bl	8008bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200009a4 	.word	0x200009a4
 8005b6c:	200009e0 	.word	0x200009e0
 8005b70:	20000a1c 	.word	0x20000a1c
 8005b74:	20000a58 	.word	0x20000a58
 8005b78:	20000800 	.word	0x20000800

08005b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
	return 1;
 8005b80:	2301      	movs	r3, #1
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <_kill>:

int _kill(int pid, int sig)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b94:	f004 fd72 	bl	800a67c <__errno>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2216      	movs	r2, #22
 8005b9c:	601a      	str	r2, [r3, #0]
	return -1;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <_exit>:

void _exit (int status)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff ffe7 	bl	8005b8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8005bbc:	e7fe      	b.n	8005bbc <_exit+0x12>

08005bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e00a      	b.n	8005be6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005bd0:	f3af 8000 	nop.w
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	60ba      	str	r2, [r7, #8]
 8005bdc:	b2ca      	uxtb	r2, r1
 8005bde:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	3301      	adds	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	dbf0      	blt.n	8005bd0 <_read+0x12>
	}

return len;
 8005bee:	687b      	ldr	r3, [r7, #4]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e009      	b.n	8005c1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	60ba      	str	r2, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	dbf1      	blt.n	8005c0a <_write+0x12>
	}
	return len;
 8005c26:	687b      	ldr	r3, [r7, #4]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_close>:

int _close(int file)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	return -1;
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c56:	605a      	str	r2, [r3, #4]
	return 0;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <_isatty>:

int _isatty(int file)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	return 1;
 8005c6c:	2301      	movs	r3, #1
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
	return 0;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c98:	4a14      	ldr	r2, [pc, #80]	; (8005cec <_sbrk+0x5c>)
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <_sbrk+0x60>)
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <_sbrk+0x64>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <_sbrk+0x64>)
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <_sbrk+0x68>)
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <_sbrk+0x64>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d207      	bcs.n	8005cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cc0:	f004 fcdc 	bl	800a67c <__errno>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	220c      	movs	r2, #12
 8005cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	e009      	b.n	8005ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <_sbrk+0x64>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <_sbrk+0x64>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	4a05      	ldr	r2, [pc, #20]	; (8005cf4 <_sbrk+0x64>)
 8005ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	2000c000 	.word	0x2000c000
 8005cf0:	00000400 	.word	0x00000400
 8005cf4:	20007f80 	.word	0x20007f80
 8005cf8:	200081c0 	.word	0x200081c0

08005cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <Cal_Battery_Coord>:
		// set a signal : this is a beacon
	}
}

void Cal_Battery_Coord(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	71fb      	strb	r3, [r7, #7]
	if(Find_crash(32552, 2))
 8005d12:	2102      	movs	r1, #2
 8005d14:	f647 7028 	movw	r0, #32552	; 0x7f28
 8005d18:	f7fb fa6e 	bl	80011f8 <Find_crash>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <Cal_Battery_Coord+0x36>
	{
		//set a signal
		allyBeacons[seted].x = 127;
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	4a42      	ldr	r2, [pc, #264]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005d26:	217f      	movs	r1, #127	; 0x7f
 8005d28:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		allyBeacons[seted].y = 40;
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	4a40      	ldr	r2, [pc, #256]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	2228      	movs	r2, #40	; 0x28
 8005d36:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(32726, 2))
 8005d3e:	2102      	movs	r1, #2
 8005d40:	f647 70d6 	movw	r0, #32726	; 0x7fd6
 8005d44:	f7fb fa58 	bl	80011f8 <Find_crash>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00d      	beq.n	8005d6a <Cal_Battery_Coord+0x62>
	{
		//set a signal
		allyBeacons[seted].x = 127;
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	4a37      	ldr	r2, [pc, #220]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005d52:	217f      	movs	r1, #127	; 0x7f
 8005d54:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		allyBeacons[seted].y = 214;
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	4a35      	ldr	r2, [pc, #212]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	22d6      	movs	r2, #214	; 0xd6
 8005d62:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	3301      	adds	r3, #1
 8005d68:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(10367, 2))
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	f642 007f 	movw	r0, #10367	; 0x287f
 8005d70:	f7fb fa42 	bl	80011f8 <Find_crash>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <Cal_Battery_Coord+0x8e>
	{
		//set a signal
		allyBeacons[seted].x = 40;
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005d7e:	2128      	movs	r1, #40	; 0x28
 8005d80:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		allyBeacons[seted].y = 127;
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	227f      	movs	r2, #127	; 0x7f
 8005d8e:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	3301      	adds	r3, #1
 8005d94:	71fb      	strb	r3, [r7, #7]
	}
	if(seted != 3)
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d015      	beq.n	8005dc8 <Cal_Battery_Coord+0xc0>
	{
		if(Find_crash(54911, 2))
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	f24d 607f 	movw	r0, #54911	; 0xd67f
 8005da2:	f7fb fa29 	bl	80011f8 <Find_crash>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <Cal_Battery_Coord+0xc0>
		{
			//set a signal
			allyBeacons[seted].x = 214;
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	4a20      	ldr	r2, [pc, #128]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005db0:	21d6      	movs	r1, #214	; 0xd6
 8005db2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[seted].y = 127;
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	227f      	movs	r2, #127	; 0x7f
 8005dc0:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	71fb      	strb	r3, [r7, #7]
		}
	}
	uint8_t x_i = 127;
 8005dc8:	237f      	movs	r3, #127	; 0x7f
 8005dca:	71bb      	strb	r3, [r7, #6]
	uint8_t y_i = 127;
 8005dcc:	237f      	movs	r3, #127	; 0x7f
 8005dce:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005dd0:	e026      	b.n	8005e20 <Cal_Battery_Coord+0x118>
	{
		if(Find_crash(x_i * 256 + y_i, 2))
 8005dd2:	79bb      	ldrb	r3, [r7, #6]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	797b      	ldrb	r3, [r7, #5]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2102      	movs	r1, #2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fb fa07 	bl	80011f8 <Find_crash>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d011      	beq.n	8005e14 <Cal_Battery_Coord+0x10c>
		{
			allyBeacons[seted].x = x_i;
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	79ba      	ldrb	r2, [r7, #6]
 8005df4:	b211      	sxth	r1, r2
 8005df6:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005df8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[seted].y = y_i;
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	797a      	ldrb	r2, [r7, #5]
 8005e00:	b211      	sxth	r1, r2
 8005e02:	4a0b      	ldr	r2, [pc, #44]	; (8005e30 <Cal_Battery_Coord+0x128>)
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	460a      	mov	r2, r1
 8005e0a:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	71fb      	strb	r3, [r7, #7]
 8005e12:	e005      	b.n	8005e20 <Cal_Battery_Coord+0x118>
		}
		else
		{
			x_i -= 5;
 8005e14:	79bb      	ldrb	r3, [r7, #6]
 8005e16:	3b05      	subs	r3, #5
 8005e18:	71bb      	strb	r3, [r7, #6]
			y_i -= 5;
 8005e1a:	797b      	ldrb	r3, [r7, #5]
 8005e1c:	3b05      	subs	r3, #5
 8005e1e:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d1d5      	bne.n	8005dd2 <Cal_Battery_Coord+0xca>
		}
	}
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000bac 	.word	0x20000bac

08005e34 <Get_nearest_consumer>:
{

}

Coordinate Get_nearest_consumer(void)
{
 8005e34:	b5b0      	push	{r4, r5, r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af00      	add	r7, sp, #0
	uint8_t total = getOrderNum();
 8005e3a:	f000 fa4f 	bl	80062dc <getOrderNum>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t mindis = 512;
 8005e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e48:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t distance;
	uint8_t minindex = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(uint8_t i = 0;i < total; i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005e56:	e050      	b.n	8005efa <Get_nearest_consumer+0xc6>
	{
		delivering[i] = getOneOrder(i);
 8005e58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e5c:	4936      	ldr	r1, [pc, #216]	; (8005f38 <Get_nearest_consumer+0x104>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	18cc      	adds	r4, r1, r3
 8005e68:	463b      	mov	r3, r7
 8005e6a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fa3d 	bl	80062f0 <getOneOrder>
 8005e76:	4625      	mov	r5, r4
 8005e78:	463c      	mov	r4, r7
 8005e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	602b      	str	r3, [r5, #0]
		distance = abs(myCoord.x - delivering[i].desPos.x) + abs(myCoord.y - delivering[i].desPos.y);
 8005e82:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <Get_nearest_consumer+0x108>)
 8005e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e8e:	492a      	ldr	r1, [pc, #168]	; (8005f38 <Get_nearest_consumer+0x104>)
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea0:	1ac3      	subs	r3, r0, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bfb8      	it	lt
 8005ea6:	425b      	neglt	r3, r3
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <Get_nearest_consumer+0x108>)
 8005eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005eb0:	461c      	mov	r4, r3
 8005eb2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005eb6:	4820      	ldr	r0, [pc, #128]	; (8005f38 <Get_nearest_consumer+0x104>)
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4403      	add	r3, r0
 8005ec2:	3306      	adds	r3, #6
 8005ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec8:	1ae3      	subs	r3, r4, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bfb8      	it	lt
 8005ece:	425b      	neglt	r3, r3
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	440b      	add	r3, r1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	843b      	strh	r3, [r7, #32]
		if(distance < mindis){
 8005ed8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005edc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	da05      	bge.n	8005ef0 <Get_nearest_consumer+0xbc>
			mindis = distance;
 8005ee4:	8c3b      	ldrh	r3, [r7, #32]
 8005ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
			minindex = i;
 8005ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005eec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(uint8_t i = 0;i < total; i++)
 8005ef0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005efa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3a8      	bcc.n	8005e58 <Get_nearest_consumer+0x24>
		}
	}
	Coordinate nearest = delivering[minindex].desPos;
 8005f06:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005f0a:	490b      	ldr	r1, [pc, #44]	; (8005f38 <Get_nearest_consumer+0x104>)
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	3304      	adds	r3, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	61bb      	str	r3, [r7, #24]
	return nearest;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	2300      	movs	r3, #0
 8005f22:	8bba      	ldrh	r2, [r7, #28]
 8005f24:	f362 030f 	bfi	r3, r2, #0, #16
 8005f28:	8bfa      	ldrh	r2, [r7, #30]
 8005f2a:	f362 431f 	bfi	r3, r2, #16, #16

}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3728      	adds	r7, #40	; 0x28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bdb0      	pop	{r4, r5, r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20007f84 	.word	0x20007f84
 8005f3c:	20000bc4 	.word	0x20000bc4

08005f40 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f4a:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	733b      	strb	r3, [r7, #12]
 8005f54:	e02b      	b.n	8005fae <Get_nearest_Beacon+0x6e>
	{

		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <Get_nearest_Beacon+0xa0>)
 8005f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	7b3b      	ldrb	r3, [r7, #12]
 8005f60:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <Get_nearest_Beacon+0xa4>)
 8005f62:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8005f66:	1acb      	subs	r3, r1, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bfb8      	it	lt
 8005f6c:	425b      	neglt	r3, r3
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <Get_nearest_Beacon+0xa0>)
 8005f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f76:	4618      	mov	r0, r3
 8005f78:	7b3b      	ldrb	r3, [r7, #12]
 8005f7a:	491a      	ldr	r1, [pc, #104]	; (8005fe4 <Get_nearest_Beacon+0xa4>)
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f84:	1ac3      	subs	r3, r0, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfb8      	it	lt
 8005f8a:	425b      	neglt	r3, r3
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8005f94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	da03      	bge.n	8005fa8 <Get_nearest_Beacon+0x68>
			mindis = distance;
 8005fa0:	897b      	ldrh	r3, [r7, #10]
 8005fa2:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8005fa4:	7b3b      	ldrb	r3, [r7, #12]
 8005fa6:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8005fa8:	7b3b      	ldrb	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	733b      	strb	r3, [r7, #12]
 8005fae:	7b3b      	ldrb	r3, [r7, #12]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d9d0      	bls.n	8005f56 <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 8005fb4:	7b7b      	ldrb	r3, [r7, #13]
 8005fb6:	490b      	ldr	r1, [pc, #44]	; (8005fe4 <Get_nearest_Beacon+0xa4>)
 8005fb8:	463a      	mov	r2, r7
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	6010      	str	r0, [r2, #0]
	return nearest;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	88ba      	ldrh	r2, [r7, #4]
 8005fca:	f362 030f 	bfi	r3, r2, #0, #16
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	f362 431f 	bfi	r3, r2, #16, #16
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20000bc4 	.word	0x20000bc4
 8005fe4:	20000bac 	.word	0x20000bac

08005fe8 <HAL_UARTEx_RxEventCallback>:
//    HAL_UARTEx_ReceiveToIdle_DMA(zigbee_huart,zigbeeMessage,MAX_MSG_LEN);
//  }
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart,uint16_t Size)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	807b      	strh	r3, [r7, #2]
    if(huart == zigbee_huart)
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HAL_UARTEx_RxEventCallback+0x5c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d11e      	bne.n	800603c <HAL_UARTEx_RxEventCallback+0x54>
    {
        receive_flag=1;
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_UARTEx_RxEventCallback+0x60>)
 8006000:	2201      	movs	r2, #1
 8006002:	701a      	strb	r2, [r3, #0]
        zigbeeMessageRecord();
 8006004:	f000 f880 	bl	8006108 <zigbeeMessageRecord>
        myCoord = getVehiclePos();
 8006008:	f000 f93c 	bl	8006284 <getVehiclePos>
 800600c:	4602      	mov	r2, r0
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <HAL_UARTEx_RxEventCallback+0x64>)
 8006010:	4611      	mov	r1, r2
 8006012:	8019      	strh	r1, [r3, #0]
 8006014:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8006018:	805a      	strh	r2, [r3, #2]
        order_append(getLatestPendingOrder());
 800601a:	f107 030c 	add.w	r3, r7, #12
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f9ca 	bl	80063b8 <getLatestPendingOrder>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	f107 030c 	add.w	r3, r7, #12
 800602c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800602e:	f7fe fc11 	bl	8004854 <order_append>
        myCharge = getRemainDist();
 8006032:	f000 f945 	bl	80062c0 <getRemainDist>
 8006036:	4603      	mov	r3, r0
 8006038:	4a05      	ldr	r2, [pc, #20]	; (8006050 <HAL_UARTEx_RxEventCallback+0x68>)
 800603a:	6013      	str	r3, [r2, #0]
    }
}
 800603c:	bf00      	nop
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000918 	.word	0x20000918
 8006048:	20000b78 	.word	0x20000b78
 800604c:	20000bc4 	.word	0x20000bc4
 8006050:	20000bdc 	.word	0x20000bdc

08006054 <CalculateChecksum>:

static uint8_t CalculateChecksum(const uint8_t data[], int32_t count)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint8_t checksum = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  for (int32_t i = 0; i < count; ++i)
 8006062:	2300      	movs	r3, #0
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	e009      	b.n	800607c <CalculateChecksum+0x28>
  {
    checksum ^= data[i];
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	4053      	eors	r3, r2
 8006074:	73fb      	strb	r3, [r7, #15]
  for (int32_t i = 0; i < count; ++i)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3301      	adds	r3, #1
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	dbf1      	blt.n	8006068 <CalculateChecksum+0x14>
  }
  return checksum;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <change_float_data>:

static float change_float_data(uint8_t* dat)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
    float float_data;
    float_data=*((float*)dat);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
    return float_data;
 800609e:	68fb      	ldr	r3, [r7, #12]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
	...

080060ac <zigbee_Init>:

//接口函数
void zigbee_Init(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
    memset(zigbeeMessage,0x00,MAX_MSG_LEN);
 80060b4:	22c8      	movs	r2, #200	; 0xc8
 80060b6:	2100      	movs	r1, #0
 80060b8:	480e      	ldr	r0, [pc, #56]	; (80060f4 <zigbee_Init+0x48>)
 80060ba:	f004 fb29 	bl	800a710 <memset>
    memset(gameInfoMessage,0x00,MAX_INFO_LEN);
 80060be:	2264      	movs	r2, #100	; 0x64
 80060c0:	2100      	movs	r1, #0
 80060c2:	480d      	ldr	r0, [pc, #52]	; (80060f8 <zigbee_Init+0x4c>)
 80060c4:	f004 fb24 	bl	800a710 <memset>
    memset(gameStatusMessage,0x00,MAX_STATUS_LEN);
 80060c8:	2296      	movs	r2, #150	; 0x96
 80060ca:	2100      	movs	r1, #0
 80060cc:	480b      	ldr	r0, [pc, #44]	; (80060fc <zigbee_Init+0x50>)
 80060ce:	f004 fb1f 	bl	800a710 <memset>
    zigbee_huart = huart;
 80060d2:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <zigbee_Init+0x54>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6013      	str	r3, [r2, #0]
    receive_flag=0;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <zigbee_Init+0x58>)
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(zigbee_huart,zigbeeMessage,MAX_MSG_LEN);
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <zigbee_Init+0x54>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	22c8      	movs	r2, #200	; 0xc8
 80060e4:	4903      	ldr	r1, [pc, #12]	; (80060f4 <zigbee_Init+0x48>)
 80060e6:	4618      	mov	r0, r3
 80060e8:	f003 fd12 	bl	8009b10 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20007fe8 	.word	0x20007fe8
 80060f8:	200080b0 	.word	0x200080b0
 80060fc:	20008114 	.word	0x20008114
 8006100:	20000918 	.word	0x20000918
 8006104:	20000b78 	.word	0x20000b78

08006108 <zigbeeMessageRecord>:

void zigbeeMessageRecord()
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
    uint16_t msgIndex=0;
 800610e:	2300      	movs	r3, #0
 8006110:	81fb      	strh	r3, [r7, #14]
    for(msgIndex=0;msgIndex<MAX_MSG_LEN;msgIndex++)
 8006112:	2300      	movs	r3, #0
 8006114:	81fb      	strh	r3, [r7, #14]
 8006116:	e07d      	b.n	8006214 <zigbeeMessageRecord+0x10c>
    {
        if(zigbeeMessage[msgIndex]==0x55&&zigbeeMessage[msgIndex+1]==0xAA)
 8006118:	89fb      	ldrh	r3, [r7, #14]
 800611a:	4a4b      	ldr	r2, [pc, #300]	; (8006248 <zigbeeMessageRecord+0x140>)
 800611c:	5cd3      	ldrb	r3, [r2, r3]
 800611e:	2b55      	cmp	r3, #85	; 0x55
 8006120:	d175      	bne.n	800620e <zigbeeMessageRecord+0x106>
 8006122:	89fb      	ldrh	r3, [r7, #14]
 8006124:	3301      	adds	r3, #1
 8006126:	4a48      	ldr	r2, [pc, #288]	; (8006248 <zigbeeMessageRecord+0x140>)
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	2baa      	cmp	r3, #170	; 0xaa
 800612c:	d16f      	bne.n	800620e <zigbeeMessageRecord+0x106>
        {
            int16_t tmpnum;
            tmpnum=*((int16_t*)(&zigbeeMessage[msgIndex+3]));
 800612e:	89fb      	ldrh	r3, [r7, #14]
 8006130:	3303      	adds	r3, #3
 8006132:	4a45      	ldr	r2, [pc, #276]	; (8006248 <zigbeeMessageRecord+0x140>)
 8006134:	4413      	add	r3, r2
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	807b      	strh	r3, [r7, #2]
            if(tmpnum<0||(tmpnum>MAX_INFO_LEN&&tmpnum>MAX_STATUS_LEN)) continue;
 800613a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800613e:	2b00      	cmp	r3, #0
 8006140:	db64      	blt.n	800620c <zigbeeMessageRecord+0x104>
 8006142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	dd03      	ble.n	8006152 <zigbeeMessageRecord+0x4a>
 800614a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800614e:	2b96      	cmp	r3, #150	; 0x96
 8006150:	dc5c      	bgt.n	800620c <zigbeeMessageRecord+0x104>
            if(msgIndex+tmpnum+6>=MAX_MSG_LEN) break;
 8006152:	89fa      	ldrh	r2, [r7, #14]
 8006154:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006158:	4413      	add	r3, r2
 800615a:	2bc1      	cmp	r3, #193	; 0xc1
 800615c:	dc5f      	bgt.n	800621e <zigbeeMessageRecord+0x116>
            uint8_t tmpchecksum;
            tmpchecksum=CalculateChecksum(&zigbeeMessage[msgIndex+6],tmpnum);
 800615e:	89fb      	ldrh	r3, [r7, #14]
 8006160:	3306      	adds	r3, #6
 8006162:	4a39      	ldr	r2, [pc, #228]	; (8006248 <zigbeeMessageRecord+0x140>)
 8006164:	4413      	add	r3, r2
 8006166:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff ff71 	bl	8006054 <CalculateChecksum>
 8006172:	4603      	mov	r3, r0
 8006174:	707b      	strb	r3, [r7, #1]
            if(tmpchecksum==zigbeeMessage[msgIndex+5])
 8006176:	89fb      	ldrh	r3, [r7, #14]
 8006178:	3305      	adds	r3, #5
 800617a:	4a33      	ldr	r2, [pc, #204]	; (8006248 <zigbeeMessageRecord+0x140>)
 800617c:	5cd3      	ldrb	r3, [r2, r3]
 800617e:	787a      	ldrb	r2, [r7, #1]
 8006180:	429a      	cmp	r2, r3
 8006182:	d144      	bne.n	800620e <zigbeeMessageRecord+0x106>
            {
                if(zigbeeMessage[msgIndex+2]==0x01)
 8006184:	89fb      	ldrh	r3, [r7, #14]
 8006186:	3302      	adds	r3, #2
 8006188:	4a2f      	ldr	r2, [pc, #188]	; (8006248 <zigbeeMessageRecord+0x140>)
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d11b      	bne.n	80061c8 <zigbeeMessageRecord+0xc0>
                {
                    memset(gameInfoMessage,0x00,MAX_INFO_LEN);
 8006190:	2264      	movs	r2, #100	; 0x64
 8006192:	2100      	movs	r1, #0
 8006194:	482d      	ldr	r0, [pc, #180]	; (800624c <zigbeeMessageRecord+0x144>)
 8006196:	f004 fabb 	bl	800a710 <memset>
                    for(int32_t i=0;i<tmpnum;i++)
 800619a:	2300      	movs	r3, #0
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	e00d      	b.n	80061bc <zigbeeMessageRecord+0xb4>
                    {
                        gameInfoMessage[i]=zigbeeMessage[msgIndex+6+i];
 80061a0:	89fb      	ldrh	r3, [r7, #14]
 80061a2:	1d9a      	adds	r2, r3, #6
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4413      	add	r3, r2
 80061a8:	4a27      	ldr	r2, [pc, #156]	; (8006248 <zigbeeMessageRecord+0x140>)
 80061aa:	5cd1      	ldrb	r1, [r2, r3]
 80061ac:	4a27      	ldr	r2, [pc, #156]	; (800624c <zigbeeMessageRecord+0x144>)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	460a      	mov	r2, r1
 80061b4:	701a      	strb	r2, [r3, #0]
                    for(int32_t i=0;i<tmpnum;i++)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	dbec      	blt.n	80061a0 <zigbeeMessageRecord+0x98>
                    }
                    continue;
 80061c6:	e022      	b.n	800620e <zigbeeMessageRecord+0x106>
                }
                else if(zigbeeMessage[msgIndex+2]==0x05)
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	3302      	adds	r3, #2
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <zigbeeMessageRecord+0x140>)
 80061ce:	5cd3      	ldrb	r3, [r2, r3]
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d11c      	bne.n	800620e <zigbeeMessageRecord+0x106>
                {
                    memset(gameStatusMessage,0x00,MAX_STATUS_LEN);
 80061d4:	2296      	movs	r2, #150	; 0x96
 80061d6:	2100      	movs	r1, #0
 80061d8:	481d      	ldr	r0, [pc, #116]	; (8006250 <zigbeeMessageRecord+0x148>)
 80061da:	f004 fa99 	bl	800a710 <memset>
                    for(int32_t i=0;i<tmpnum;i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	e00d      	b.n	8006200 <zigbeeMessageRecord+0xf8>
                    {
                        gameStatusMessage[i]=zigbeeMessage[msgIndex+6+i];
 80061e4:	89fb      	ldrh	r3, [r7, #14]
 80061e6:	1d9a      	adds	r2, r3, #6
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	4a16      	ldr	r2, [pc, #88]	; (8006248 <zigbeeMessageRecord+0x140>)
 80061ee:	5cd1      	ldrb	r1, [r2, r3]
 80061f0:	4a17      	ldr	r2, [pc, #92]	; (8006250 <zigbeeMessageRecord+0x148>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	460a      	mov	r2, r1
 80061f8:	701a      	strb	r2, [r3, #0]
                    for(int32_t i=0;i<tmpnum;i++)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3301      	adds	r3, #1
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	dbec      	blt.n	80061e4 <zigbeeMessageRecord+0xdc>
                    }
                    continue;
 800620a:	e000      	b.n	800620e <zigbeeMessageRecord+0x106>
            if(tmpnum<0||(tmpnum>MAX_INFO_LEN&&tmpnum>MAX_STATUS_LEN)) continue;
 800620c:	bf00      	nop
    for(msgIndex=0;msgIndex<MAX_MSG_LEN;msgIndex++)
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	3301      	adds	r3, #1
 8006212:	81fb      	strh	r3, [r7, #14]
 8006214:	89fb      	ldrh	r3, [r7, #14]
 8006216:	2bc7      	cmp	r3, #199	; 0xc7
 8006218:	f67f af7e 	bls.w	8006118 <zigbeeMessageRecord+0x10>
 800621c:	e000      	b.n	8006220 <zigbeeMessageRecord+0x118>
            if(msgIndex+tmpnum+6>=MAX_MSG_LEN) break;
 800621e:	bf00      	nop
                }
            }
        }
    }
    memset(zigbeeMessage,0x00,MAX_MSG_LEN);
 8006220:	22c8      	movs	r2, #200	; 0xc8
 8006222:	2100      	movs	r1, #0
 8006224:	4808      	ldr	r0, [pc, #32]	; (8006248 <zigbeeMessageRecord+0x140>)
 8006226:	f004 fa73 	bl	800a710 <memset>
    receive_flag=0;
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <zigbeeMessageRecord+0x14c>)
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(zigbee_huart,zigbeeMessage,MAX_MSG_LEN);
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <zigbeeMessageRecord+0x150>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	22c8      	movs	r2, #200	; 0xc8
 8006236:	4904      	ldr	r1, [pc, #16]	; (8006248 <zigbeeMessageRecord+0x140>)
 8006238:	4618      	mov	r0, r3
 800623a:	f003 fc69 	bl	8009b10 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20007fe8 	.word	0x20007fe8
 800624c:	200080b0 	.word	0x200080b0
 8006250:	20008114 	.word	0x20008114
 8006254:	20000b78 	.word	0x20000b78
 8006258:	20000918 	.word	0x20000918

0800625c <getGameStatus>:
    time=*((int32_t*)(&gameStatusMessage[1]));
    return time;
}

GameStatus_edc24 getGameStatus()
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
    uint8_t status;
    status=gameStatusMessage[0];
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <getGameStatus+0x24>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	71fb      	strb	r3, [r7, #7]
    if(status==0x00)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <getGameStatus+0x16>
    {
        return GameStandby;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <getGameStatus+0x18>
    }
    else
    {
        return GameGoing;
 8006272:	2301      	movs	r3, #1
    }
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20008114 	.word	0x20008114

08006284 <getVehiclePos>:
{
    return change_float_data(&gameStatusMessage[5]);
}

Coordinate getVehiclePos()
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
    Coordinate pos;
    pos.x=*((int16_t*)(&gameStatusMessage[9]));
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <getVehiclePos+0x34>)
 800628c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006290:	803b      	strh	r3, [r7, #0]
    pos.y=*((int16_t*)(&gameStatusMessage[11]));
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <getVehiclePos+0x38>)
 8006294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006298:	807b      	strh	r3, [r7, #2]
    return pos;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	2300      	movs	r3, #0
 80062a0:	88ba      	ldrh	r2, [r7, #4]
 80062a2:	f362 030f 	bfi	r3, r2, #0, #16
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	f362 431f 	bfi	r3, r2, #16, #16
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	2000811d 	.word	0x2000811d
 80062bc:	2000811f 	.word	0x2000811f

080062c0 <getRemainDist>:

int32_t getRemainDist()
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
    int32_t dist;
    dist=*((int32_t*)(&gameStatusMessage[13]));
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <getRemainDist+0x18>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	607b      	str	r3, [r7, #4]
    return dist;
 80062cc:	687b      	ldr	r3, [r7, #4]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	20008121 	.word	0x20008121

080062dc <getOrderNum>:

uint8_t getOrderNum()
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
    return gameStatusMessage[17];
 80062e0:	4b02      	ldr	r3, [pc, #8]	; (80062ec <getOrderNum+0x10>)
 80062e2:	7c5b      	ldrb	r3, [r3, #17]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	20008114 	.word	0x20008114

080062f0 <getOneOrder>:

Order_edc24 getOneOrder(uint8_t orderNo)
{
 80062f0:	b5b0      	push	{r4, r5, r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
    Order_edc24 order;
    order.depPos.x=*((int16_t*)(&gameStatusMessage[18+18*orderNo]));
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	461a      	mov	r2, r3
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <getOneOrder+0xc4>)
 800630c:	4413      	add	r3, r2
 800630e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006312:	81bb      	strh	r3, [r7, #12]
    order.depPos.y=*((int16_t*)(&gameStatusMessage[20+18*orderNo]));
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	3314      	adds	r3, #20
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <getOneOrder+0xc4>)
 8006322:	4413      	add	r3, r2
 8006324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006328:	81fb      	strh	r3, [r7, #14]
    order.desPos.x=*((int16_t*)(&gameStatusMessage[22+18*orderNo]));
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4413      	add	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	3316      	adds	r3, #22
 8006336:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <getOneOrder+0xc4>)
 8006338:	4413      	add	r3, r2
 800633a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800633e:	823b      	strh	r3, [r7, #16]
    order.desPos.y=*((int16_t*)(&gameStatusMessage[24+18*orderNo]));
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4413      	add	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	3318      	adds	r3, #24
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <getOneOrder+0xc4>)
 800634e:	4413      	add	r3, r2
 8006350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006354:	827b      	strh	r3, [r7, #18]
    order.timeLimit=*((int32_t*)(&gameStatusMessage[26+18*orderNo]));
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	331a      	adds	r3, #26
 8006362:	4a14      	ldr	r2, [pc, #80]	; (80063b4 <getOneOrder+0xc4>)
 8006364:	4413      	add	r3, r2
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	617b      	str	r3, [r7, #20]
    order.commission=change_float_data(&gameStatusMessage[30+18*orderNo]);
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	331e      	adds	r3, #30
 8006376:	4a0f      	ldr	r2, [pc, #60]	; (80063b4 <getOneOrder+0xc4>)
 8006378:	4413      	add	r3, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fe88 	bl	8006090 <change_float_data>
 8006380:	4603      	mov	r3, r0
 8006382:	61fb      	str	r3, [r7, #28]
    order.orderId=*((int16_t*)(&gameStatusMessage[34+18*orderNo]));
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	4613      	mov	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4413      	add	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	3322      	adds	r3, #34	; 0x22
 8006390:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <getOneOrder+0xc4>)
 8006392:	4413      	add	r3, r2
 8006394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006398:	833b      	strh	r3, [r7, #24]
    return order;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	461d      	mov	r5, r3
 800639e:	f107 040c 	add.w	r4, r7, #12
 80063a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	602b      	str	r3, [r5, #0]
}
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bdb0      	pop	{r4, r5, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20008114 	.word	0x20008114

080063b8 <getLatestPendingOrder>:

Order_edc24 getLatestPendingOrder()
{
 80063b8:	b5b0      	push	{r4, r5, r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
    int32_t tmpnum=(int32_t)gameStatusMessage[21];
 80063c0:	4b2e      	ldr	r3, [pc, #184]	; (800647c <getLatestPendingOrder+0xc4>)
 80063c2:	7d5b      	ldrb	r3, [r3, #21]
 80063c4:	61fb      	str	r3, [r7, #28]
    Order_edc24 order;
    order.depPos.x=*((int16_t*)(&gameStatusMessage[18+18*tmpnum]));
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4413      	add	r3, r2
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	461a      	mov	r2, r3
 80063d4:	4b29      	ldr	r3, [pc, #164]	; (800647c <getLatestPendingOrder+0xc4>)
 80063d6:	4413      	add	r3, r2
 80063d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063dc:	813b      	strh	r3, [r7, #8]
    order.depPos.y=*((int16_t*)(&gameStatusMessage[20+18*tmpnum]));
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	4413      	add	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	3314      	adds	r3, #20
 80063ea:	4a24      	ldr	r2, [pc, #144]	; (800647c <getLatestPendingOrder+0xc4>)
 80063ec:	4413      	add	r3, r2
 80063ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f2:	817b      	strh	r3, [r7, #10]
    order.desPos.x=*((int16_t*)(&gameStatusMessage[22+18*tmpnum]));
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	4613      	mov	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4413      	add	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	3316      	adds	r3, #22
 8006400:	4a1e      	ldr	r2, [pc, #120]	; (800647c <getLatestPendingOrder+0xc4>)
 8006402:	4413      	add	r3, r2
 8006404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006408:	81bb      	strh	r3, [r7, #12]
    order.desPos.y=*((int16_t*)(&gameStatusMessage[24+18*tmpnum]));
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	3318      	adds	r3, #24
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <getLatestPendingOrder+0xc4>)
 8006418:	4413      	add	r3, r2
 800641a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641e:	81fb      	strh	r3, [r7, #14]
    order.timeLimit=*((int32_t*)(&gameStatusMessage[26+18*tmpnum]));
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	331a      	adds	r3, #26
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <getLatestPendingOrder+0xc4>)
 800642e:	4413      	add	r3, r2
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
    order.commission=change_float_data(&gameStatusMessage[30+18*tmpnum]);
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4413      	add	r3, r2
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	331e      	adds	r3, #30
 8006440:	4a0e      	ldr	r2, [pc, #56]	; (800647c <getLatestPendingOrder+0xc4>)
 8006442:	4413      	add	r3, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fe23 	bl	8006090 <change_float_data>
 800644a:	4603      	mov	r3, r0
 800644c:	61bb      	str	r3, [r7, #24]
    order.orderId=*((int16_t*)(&gameStatusMessage[34+18*tmpnum]));
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	4613      	mov	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4413      	add	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	3322      	adds	r3, #34	; 0x22
 800645a:	4a08      	ldr	r2, [pc, #32]	; (800647c <getLatestPendingOrder+0xc4>)
 800645c:	4413      	add	r3, r2
 800645e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006462:	82bb      	strh	r3, [r7, #20]
    return order;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	461d      	mov	r5, r3
 8006468:	f107 0408 	add.w	r4, r7, #8
 800646c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800646e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	602b      	str	r3, [r5, #0]
}
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bdb0      	pop	{r4, r5, r7, pc}
 800647c:	20008114 	.word	0x20008114

08006480 <getGameStage>:

GameStage_edc24 getGameStage()
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
    uint8_t stage;
    stage=gameInfoMessage[0];
 8006486:	4b04      	ldr	r3, [pc, #16]	; (8006498 <getGameStage+0x18>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	71fb      	strb	r3, [r7, #7]
    return (GameStage_edc24)stage;
 800648c:	79fb      	ldrb	r3, [r7, #7]
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	200080b0 	.word	0x200080b0

0800649c <getOneBarrier>:

Rectangle getOneBarrier(uint8_t barrierNo)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
    Rectangle barrier;
    barrier.coord1.x=*((int16_t*)(&gameInfoMessage[2+8*barrierNo]));
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	3302      	adds	r3, #2
 80064ae:	4a14      	ldr	r2, [pc, #80]	; (8006500 <getOneBarrier+0x64>)
 80064b0:	4413      	add	r3, r2
 80064b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b6:	813b      	strh	r3, [r7, #8]
    barrier.coord1.y=*((int16_t*)(&gameInfoMessage[4+8*barrierNo]));
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3304      	adds	r3, #4
 80064be:	4a10      	ldr	r2, [pc, #64]	; (8006500 <getOneBarrier+0x64>)
 80064c0:	4413      	add	r3, r2
 80064c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c6:	817b      	strh	r3, [r7, #10]
    barrier.coord2.x=*((int16_t*)(&gameInfoMessage[6+8*barrierNo]));
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	3306      	adds	r3, #6
 80064ce:	4a0c      	ldr	r2, [pc, #48]	; (8006500 <getOneBarrier+0x64>)
 80064d0:	4413      	add	r3, r2
 80064d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d6:	81bb      	strh	r3, [r7, #12]
    barrier.coord2.y=*((int16_t*)(&gameInfoMessage[8+8*barrierNo]));
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	3301      	adds	r3, #1
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4a08      	ldr	r2, [pc, #32]	; (8006500 <getOneBarrier+0x64>)
 80064e0:	4413      	add	r3, r2
 80064e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064e6:	81fb      	strh	r3, [r7, #14]
    return barrier;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f107 0308 	add.w	r3, r7, #8
 80064f0:	cb03      	ldmia	r3!, {r0, r1}
 80064f2:	6010      	str	r0, [r2, #0]
 80064f4:	6051      	str	r1, [r2, #4]
}
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr
 8006500:	200080b0 	.word	0x200080b0

08006504 <setChargingPile>:
{
    HAL_UART_Transmit(zigbee_huart,zigbeeSend[0],6,HAL_MAX_DELAY);
}

void setChargingPile()
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(zigbee_huart,zigbeeSend[1],6,HAL_MAX_DELAY);
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <setChargingPile+0x18>)
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	2206      	movs	r2, #6
 8006512:	4903      	ldr	r1, [pc, #12]	; (8006520 <setChargingPile+0x1c>)
 8006514:	f003 fa0a 	bl	800992c <HAL_UART_Transmit>
}
 8006518:	bf00      	nop
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000918 	.word	0x20000918
 8006520:	20000016 	.word	0x20000016

08006524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006524:	480c      	ldr	r0, [pc, #48]	; (8006558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006526:	490d      	ldr	r1, [pc, #52]	; (800655c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800652a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800652c:	e002      	b.n	8006534 <LoopCopyDataInit>

0800652e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800652e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006532:	3304      	adds	r3, #4

08006534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006538:	d3f9      	bcc.n	800652e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800653a:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800653c:	4c0a      	ldr	r4, [pc, #40]	; (8006568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800653e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006540:	e001      	b.n	8006546 <LoopFillZerobss>

08006542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006544:	3204      	adds	r2, #4

08006546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006548:	d3fb      	bcc.n	8006542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800654a:	f7ff fbd7 	bl	8005cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800654e:	f004 f8ad 	bl	800a6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006552:	f7fd f82f 	bl	80035b4 <main>
  bx lr
 8006556:	4770      	bx	lr
  ldr r0, =_sdata
 8006558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800655c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006560:	0800d7c0 	.word	0x0800d7c0
  ldr r2, =_sbss
 8006564:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006568:	200081c0 	.word	0x200081c0

0800656c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800656c:	e7fe      	b.n	800656c <ADC1_2_IRQHandler>
	...

08006570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006574:	4b08      	ldr	r3, [pc, #32]	; (8006598 <HAL_Init+0x28>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a07      	ldr	r2, [pc, #28]	; (8006598 <HAL_Init+0x28>)
 800657a:	f043 0310 	orr.w	r3, r3, #16
 800657e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006580:	2003      	movs	r0, #3
 8006582:	f000 f947 	bl	8006814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006586:	200f      	movs	r0, #15
 8006588:	f000 f808 	bl	800659c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800658c:	f7fe ff7a 	bl	8005484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40022000 	.word	0x40022000

0800659c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065a4:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_InitTick+0x54>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <HAL_InitTick+0x58>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	4619      	mov	r1, r3
 80065ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f95f 	bl	800687e <HAL_SYSTICK_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e00e      	b.n	80065e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b0f      	cmp	r3, #15
 80065ce:	d80a      	bhi.n	80065e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065d0:	2200      	movs	r2, #0
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	f000 f927 	bl	800682a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065dc:	4a06      	ldr	r2, [pc, #24]	; (80065f8 <HAL_InitTick+0x5c>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	2000000c 	.word	0x2000000c
 80065f4:	20000020 	.word	0x20000020
 80065f8:	2000001c 	.word	0x2000001c

080065fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_IncTick+0x1c>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <HAL_IncTick+0x20>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4413      	add	r3, r2
 800660c:	4a03      	ldr	r2, [pc, #12]	; (800661c <HAL_IncTick+0x20>)
 800660e:	6013      	str	r3, [r2, #0]
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	20000020 	.word	0x20000020
 800661c:	200081ac 	.word	0x200081ac

08006620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return uwTick;
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <HAL_GetTick+0x10>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	200081ac 	.word	0x200081ac

08006634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800663c:	f7ff fff0 	bl	8006620 <HAL_GetTick>
 8006640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d005      	beq.n	800665a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <HAL_Delay+0x44>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800665a:	bf00      	nop
 800665c:	f7ff ffe0 	bl	8006620 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d8f7      	bhi.n	800665c <HAL_Delay+0x28>
  {
  }
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000020 	.word	0x20000020

0800667c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <__NVIC_SetPriorityGrouping+0x44>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006698:	4013      	ands	r3, r2
 800669a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066ae:	4a04      	ldr	r2, [pc, #16]	; (80066c0 <__NVIC_SetPriorityGrouping+0x44>)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	60d3      	str	r3, [r2, #12]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	e000ed00 	.word	0xe000ed00

080066c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <__NVIC_GetPriorityGrouping+0x18>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	f003 0307 	and.w	r3, r3, #7
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	e000ed00 	.word	0xe000ed00

080066e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	db0b      	blt.n	800670a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	f003 021f 	and.w	r2, r3, #31
 80066f8:	4906      	ldr	r1, [pc, #24]	; (8006714 <__NVIC_EnableIRQ+0x34>)
 80066fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2001      	movs	r0, #1
 8006702:	fa00 f202 	lsl.w	r2, r0, r2
 8006706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr
 8006714:	e000e100 	.word	0xe000e100

08006718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006728:	2b00      	cmp	r3, #0
 800672a:	db0a      	blt.n	8006742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	490c      	ldr	r1, [pc, #48]	; (8006764 <__NVIC_SetPriority+0x4c>)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	0112      	lsls	r2, r2, #4
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	440b      	add	r3, r1
 800673c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006740:	e00a      	b.n	8006758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4908      	ldr	r1, [pc, #32]	; (8006768 <__NVIC_SetPriority+0x50>)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	3b04      	subs	r3, #4
 8006750:	0112      	lsls	r2, r2, #4
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	440b      	add	r3, r1
 8006756:	761a      	strb	r2, [r3, #24]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	e000e100 	.word	0xe000e100
 8006768:	e000ed00 	.word	0xe000ed00

0800676c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f1c3 0307 	rsb	r3, r3, #7
 8006786:	2b04      	cmp	r3, #4
 8006788:	bf28      	it	cs
 800678a:	2304      	movcs	r3, #4
 800678c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3304      	adds	r3, #4
 8006792:	2b06      	cmp	r3, #6
 8006794:	d902      	bls.n	800679c <NVIC_EncodePriority+0x30>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3b03      	subs	r3, #3
 800679a:	e000      	b.n	800679e <NVIC_EncodePriority+0x32>
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	401a      	ands	r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067b4:	f04f 31ff 	mov.w	r1, #4294967295
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	43d9      	mvns	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067c4:	4313      	orrs	r3, r2
         );
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3724      	adds	r7, #36	; 0x24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3b01      	subs	r3, #1
 80067dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067e0:	d301      	bcc.n	80067e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00f      	b.n	8006806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067e6:	4a0a      	ldr	r2, [pc, #40]	; (8006810 <SysTick_Config+0x40>)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ee:	210f      	movs	r1, #15
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	f7ff ff90 	bl	8006718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <SysTick_Config+0x40>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <SysTick_Config+0x40>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010

08006814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff ff2d 	bl	800667c <__NVIC_SetPriorityGrouping>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	4603      	mov	r3, r0
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800683c:	f7ff ff42 	bl	80066c4 <__NVIC_GetPriorityGrouping>
 8006840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	6978      	ldr	r0, [r7, #20]
 8006848:	f7ff ff90 	bl	800676c <NVIC_EncodePriority>
 800684c:	4602      	mov	r2, r0
 800684e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff5f 	bl	8006718 <__NVIC_SetPriority>
}
 800685a:	bf00      	nop
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	4603      	mov	r3, r0
 800686a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800686c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff ff35 	bl	80066e0 <__NVIC_EnableIRQ>
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b082      	sub	sp, #8
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff ffa2 	bl	80067d0 <SysTick_Config>
 800688c:	4603      	mov	r3, r0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e059      	b.n	8006962 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b2d      	ldr	r3, [pc, #180]	; (800696c <HAL_DMA_Init+0xd4>)
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d80f      	bhi.n	80068da <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <HAL_DMA_Init+0xd8>)
 80068c2:	4413      	add	r3, r2
 80068c4:	4a2b      	ldr	r2, [pc, #172]	; (8006974 <HAL_DMA_Init+0xdc>)
 80068c6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ca:	091b      	lsrs	r3, r3, #4
 80068cc:	009a      	lsls	r2, r3, #2
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a28      	ldr	r2, [pc, #160]	; (8006978 <HAL_DMA_Init+0xe0>)
 80068d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80068d8:	e00e      	b.n	80068f8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	4b26      	ldr	r3, [pc, #152]	; (800697c <HAL_DMA_Init+0xe4>)
 80068e2:	4413      	add	r3, r2
 80068e4:	4a23      	ldr	r2, [pc, #140]	; (8006974 <HAL_DMA_Init+0xdc>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	009a      	lsls	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <HAL_DMA_Init+0xe8>)
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800690e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006912:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800691c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	40020407 	.word	0x40020407
 8006970:	bffdfff8 	.word	0xbffdfff8
 8006974:	cccccccd 	.word	0xcccccccd
 8006978:	40020000 	.word	0x40020000
 800697c:	bffdfbf8 	.word	0xbffdfbf8
 8006980:	40020400 	.word	0x40020400

08006984 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_DMA_Start_IT+0x20>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e04a      	b.n	8006a3a <HAL_DMA_Start_IT+0xb6>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d13a      	bne.n	8006a2c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fbb0 	bl	8007140 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 020e 	orr.w	r2, r2, #14
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e00f      	b.n	8006a1a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0204 	bic.w	r2, r2, #4
 8006a08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 020a 	orr.w	r2, r2, #10
 8006a18:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e005      	b.n	8006a38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
 8006a36:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d008      	beq.n	8006a6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e020      	b.n	8006aac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 020e 	bic.w	r2, r2, #14
 8006a78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0201 	bic.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	2101      	movs	r1, #1
 8006a94:	fa01 f202 	lsl.w	r2, r1, r2
 8006a98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr
	...

08006ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d005      	beq.n	8006ada <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
 8006ad8:	e0d6      	b.n	8006c88 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 020e 	bic.w	r2, r2, #14
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	4b64      	ldr	r3, [pc, #400]	; (8006c94 <HAL_DMA_Abort_IT+0x1dc>)
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d958      	bls.n	8006bb8 <HAL_DMA_Abort_IT+0x100>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a63      	ldr	r2, [pc, #396]	; (8006c98 <HAL_DMA_Abort_IT+0x1e0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d04f      	beq.n	8006bb0 <HAL_DMA_Abort_IT+0xf8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a61      	ldr	r2, [pc, #388]	; (8006c9c <HAL_DMA_Abort_IT+0x1e4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d048      	beq.n	8006bac <HAL_DMA_Abort_IT+0xf4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a60      	ldr	r2, [pc, #384]	; (8006ca0 <HAL_DMA_Abort_IT+0x1e8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d040      	beq.n	8006ba6 <HAL_DMA_Abort_IT+0xee>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a5e      	ldr	r2, [pc, #376]	; (8006ca4 <HAL_DMA_Abort_IT+0x1ec>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d038      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0xe8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a5d      	ldr	r2, [pc, #372]	; (8006ca8 <HAL_DMA_Abort_IT+0x1f0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d030      	beq.n	8006b9a <HAL_DMA_Abort_IT+0xe2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a5b      	ldr	r2, [pc, #364]	; (8006cac <HAL_DMA_Abort_IT+0x1f4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d028      	beq.n	8006b94 <HAL_DMA_Abort_IT+0xdc>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a53      	ldr	r2, [pc, #332]	; (8006c94 <HAL_DMA_Abort_IT+0x1dc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d020      	beq.n	8006b8e <HAL_DMA_Abort_IT+0xd6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a57      	ldr	r2, [pc, #348]	; (8006cb0 <HAL_DMA_Abort_IT+0x1f8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d019      	beq.n	8006b8a <HAL_DMA_Abort_IT+0xd2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a56      	ldr	r2, [pc, #344]	; (8006cb4 <HAL_DMA_Abort_IT+0x1fc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d012      	beq.n	8006b86 <HAL_DMA_Abort_IT+0xce>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a54      	ldr	r2, [pc, #336]	; (8006cb8 <HAL_DMA_Abort_IT+0x200>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00a      	beq.n	8006b80 <HAL_DMA_Abort_IT+0xc8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a53      	ldr	r2, [pc, #332]	; (8006cbc <HAL_DMA_Abort_IT+0x204>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d102      	bne.n	8006b7a <HAL_DMA_Abort_IT+0xc2>
 8006b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b78:	e01b      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b7e:	e018      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b84:	e015      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b86:	2310      	movs	r3, #16
 8006b88:	e013      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e011      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b92:	e00e      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b98:	e00b      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b9e:	e008      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba4:	e005      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006baa:	e002      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006bac:	2310      	movs	r3, #16
 8006bae:	e000      	b.n	8006bb2 <HAL_DMA_Abort_IT+0xfa>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4a43      	ldr	r2, [pc, #268]	; (8006cc0 <HAL_DMA_Abort_IT+0x208>)
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	e057      	b.n	8006c68 <HAL_DMA_Abort_IT+0x1b0>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a36      	ldr	r2, [pc, #216]	; (8006c98 <HAL_DMA_Abort_IT+0x1e0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d04f      	beq.n	8006c62 <HAL_DMA_Abort_IT+0x1aa>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a35      	ldr	r2, [pc, #212]	; (8006c9c <HAL_DMA_Abort_IT+0x1e4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d048      	beq.n	8006c5e <HAL_DMA_Abort_IT+0x1a6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a33      	ldr	r2, [pc, #204]	; (8006ca0 <HAL_DMA_Abort_IT+0x1e8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d040      	beq.n	8006c58 <HAL_DMA_Abort_IT+0x1a0>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a32      	ldr	r2, [pc, #200]	; (8006ca4 <HAL_DMA_Abort_IT+0x1ec>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d038      	beq.n	8006c52 <HAL_DMA_Abort_IT+0x19a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a30      	ldr	r2, [pc, #192]	; (8006ca8 <HAL_DMA_Abort_IT+0x1f0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d030      	beq.n	8006c4c <HAL_DMA_Abort_IT+0x194>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <HAL_DMA_Abort_IT+0x1f4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d028      	beq.n	8006c46 <HAL_DMA_Abort_IT+0x18e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_DMA_Abort_IT+0x1dc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d020      	beq.n	8006c40 <HAL_DMA_Abort_IT+0x188>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2b      	ldr	r2, [pc, #172]	; (8006cb0 <HAL_DMA_Abort_IT+0x1f8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d019      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x184>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <HAL_DMA_Abort_IT+0x1fc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d012      	beq.n	8006c38 <HAL_DMA_Abort_IT+0x180>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a28      	ldr	r2, [pc, #160]	; (8006cb8 <HAL_DMA_Abort_IT+0x200>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00a      	beq.n	8006c32 <HAL_DMA_Abort_IT+0x17a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <HAL_DMA_Abort_IT+0x204>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d102      	bne.n	8006c2c <HAL_DMA_Abort_IT+0x174>
 8006c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2a:	e01b      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c30:	e018      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c36:	e015      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	e013      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e011      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c44:	e00e      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c4a:	e00b      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c50:	e008      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c56:	e005      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c5c:	e002      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	e000      	b.n	8006c64 <HAL_DMA_Abort_IT+0x1ac>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <HAL_DMA_Abort_IT+0x20c>)
 8006c66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
    } 
  }
  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40020080 	.word	0x40020080
 8006c98:	40020008 	.word	0x40020008
 8006c9c:	4002001c 	.word	0x4002001c
 8006ca0:	40020030 	.word	0x40020030
 8006ca4:	40020044 	.word	0x40020044
 8006ca8:	40020058 	.word	0x40020058
 8006cac:	4002006c 	.word	0x4002006c
 8006cb0:	40020408 	.word	0x40020408
 8006cb4:	4002041c 	.word	0x4002041c
 8006cb8:	40020430 	.word	0x40020430
 8006cbc:	40020444 	.word	0x40020444
 8006cc0:	40020400 	.word	0x40020400
 8006cc4:	40020000 	.word	0x40020000

08006cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80f1 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0x20c>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80eb 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0204 	bic.w	r2, r2, #4
 8006d1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b5f      	ldr	r3, [pc, #380]	; (8006ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d958      	bls.n	8006dda <HAL_DMA_IRQHandler+0x112>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5d      	ldr	r2, [pc, #372]	; (8006ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d04f      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0x10a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a5c      	ldr	r2, [pc, #368]	; (8006ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d048      	beq.n	8006dce <HAL_DMA_IRQHandler+0x106>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a5a      	ldr	r2, [pc, #360]	; (8006eac <HAL_DMA_IRQHandler+0x1e4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d040      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x100>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a59      	ldr	r2, [pc, #356]	; (8006eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d038      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0xfa>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a57      	ldr	r2, [pc, #348]	; (8006eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d030      	beq.n	8006dbc <HAL_DMA_IRQHandler+0xf4>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a56      	ldr	r2, [pc, #344]	; (8006eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d028      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xee>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a4d      	ldr	r2, [pc, #308]	; (8006ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d020      	beq.n	8006db0 <HAL_DMA_IRQHandler+0xe8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a52      	ldr	r2, [pc, #328]	; (8006ebc <HAL_DMA_IRQHandler+0x1f4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d019      	beq.n	8006dac <HAL_DMA_IRQHandler+0xe4>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a50      	ldr	r2, [pc, #320]	; (8006ec0 <HAL_DMA_IRQHandler+0x1f8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d012      	beq.n	8006da8 <HAL_DMA_IRQHandler+0xe0>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a4f      	ldr	r2, [pc, #316]	; (8006ec4 <HAL_DMA_IRQHandler+0x1fc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00a      	beq.n	8006da2 <HAL_DMA_IRQHandler+0xda>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a4d      	ldr	r2, [pc, #308]	; (8006ec8 <HAL_DMA_IRQHandler+0x200>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d102      	bne.n	8006d9c <HAL_DMA_IRQHandler+0xd4>
 8006d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d9a:	e01b      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006d9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006da0:	e018      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da6:	e015      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	e013      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006dac:	2304      	movs	r3, #4
 8006dae:	e011      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006db0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006db4:	e00e      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006dba:	e00b      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006dbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dc0:	e008      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dc6:	e005      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dcc:	e002      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	e000      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x10c>
 8006dd2:	2304      	movs	r3, #4
 8006dd4:	4a3d      	ldr	r2, [pc, #244]	; (8006ecc <HAL_DMA_IRQHandler+0x204>)
 8006dd6:	6053      	str	r3, [r2, #4]
 8006dd8:	e057      	b.n	8006e8a <HAL_DMA_IRQHandler+0x1c2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a31      	ldr	r2, [pc, #196]	; (8006ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d04f      	beq.n	8006e84 <HAL_DMA_IRQHandler+0x1bc>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2f      	ldr	r2, [pc, #188]	; (8006ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d048      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x1b8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a2e      	ldr	r2, [pc, #184]	; (8006eac <HAL_DMA_IRQHandler+0x1e4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d040      	beq.n	8006e7a <HAL_DMA_IRQHandler+0x1b2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a2c      	ldr	r2, [pc, #176]	; (8006eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d038      	beq.n	8006e74 <HAL_DMA_IRQHandler+0x1ac>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2b      	ldr	r2, [pc, #172]	; (8006eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d030      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x1a6>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a29      	ldr	r2, [pc, #164]	; (8006eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d028      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x1a0>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d020      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x19a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <HAL_DMA_IRQHandler+0x1f4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d019      	beq.n	8006e5e <HAL_DMA_IRQHandler+0x196>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <HAL_DMA_IRQHandler+0x1f8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d012      	beq.n	8006e5a <HAL_DMA_IRQHandler+0x192>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <HAL_DMA_IRQHandler+0x1fc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00a      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x18c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a21      	ldr	r2, [pc, #132]	; (8006ec8 <HAL_DMA_IRQHandler+0x200>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d102      	bne.n	8006e4e <HAL_DMA_IRQHandler+0x186>
 8006e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e4c:	e01b      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e52:	e018      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e58:	e015      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e5a:	2340      	movs	r3, #64	; 0x40
 8006e5c:	e013      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e5e:	2304      	movs	r3, #4
 8006e60:	e011      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e66:	e00e      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e6c:	e00b      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e72:	e008      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e78:	e005      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e7e:	e002      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	e000      	b.n	8006e86 <HAL_DMA_IRQHandler+0x1be>
 8006e84:	2304      	movs	r3, #4
 8006e86:	4a12      	ldr	r2, [pc, #72]	; (8006ed0 <HAL_DMA_IRQHandler+0x208>)
 8006e88:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8136 	beq.w	8007100 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006e9c:	e130      	b.n	8007100 <HAL_DMA_IRQHandler+0x438>
 8006e9e:	bf00      	nop
 8006ea0:	40020080 	.word	0x40020080
 8006ea4:	40020008 	.word	0x40020008
 8006ea8:	4002001c 	.word	0x4002001c
 8006eac:	40020030 	.word	0x40020030
 8006eb0:	40020044 	.word	0x40020044
 8006eb4:	40020058 	.word	0x40020058
 8006eb8:	4002006c 	.word	0x4002006c
 8006ebc:	40020408 	.word	0x40020408
 8006ec0:	4002041c 	.word	0x4002041c
 8006ec4:	40020430 	.word	0x40020430
 8006ec8:	40020444 	.word	0x40020444
 8006ecc:	40020400 	.word	0x40020400
 8006ed0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	2202      	movs	r2, #2
 8006eda:	409a      	lsls	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80dd 	beq.w	80070a0 <HAL_DMA_IRQHandler+0x3d8>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80d7 	beq.w	80070a0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 020a 	bic.w	r2, r2, #10
 8006f0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b7b      	ldr	r3, [pc, #492]	; (800710c <HAL_DMA_IRQHandler+0x444>)
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d958      	bls.n	8006fd6 <HAL_DMA_IRQHandler+0x30e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a79      	ldr	r2, [pc, #484]	; (8007110 <HAL_DMA_IRQHandler+0x448>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d04f      	beq.n	8006fce <HAL_DMA_IRQHandler+0x306>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a78      	ldr	r2, [pc, #480]	; (8007114 <HAL_DMA_IRQHandler+0x44c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d048      	beq.n	8006fca <HAL_DMA_IRQHandler+0x302>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a76      	ldr	r2, [pc, #472]	; (8007118 <HAL_DMA_IRQHandler+0x450>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d040      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0x2fc>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a75      	ldr	r2, [pc, #468]	; (800711c <HAL_DMA_IRQHandler+0x454>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d038      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x2f6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a73      	ldr	r2, [pc, #460]	; (8007120 <HAL_DMA_IRQHandler+0x458>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d030      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x2f0>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a72      	ldr	r2, [pc, #456]	; (8007124 <HAL_DMA_IRQHandler+0x45c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d028      	beq.n	8006fb2 <HAL_DMA_IRQHandler+0x2ea>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a69      	ldr	r2, [pc, #420]	; (800710c <HAL_DMA_IRQHandler+0x444>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d020      	beq.n	8006fac <HAL_DMA_IRQHandler+0x2e4>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a6e      	ldr	r2, [pc, #440]	; (8007128 <HAL_DMA_IRQHandler+0x460>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d019      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x2e0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6c      	ldr	r2, [pc, #432]	; (800712c <HAL_DMA_IRQHandler+0x464>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d012      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x2dc>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6b      	ldr	r2, [pc, #428]	; (8007130 <HAL_DMA_IRQHandler+0x468>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00a      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x2d6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a69      	ldr	r2, [pc, #420]	; (8007134 <HAL_DMA_IRQHandler+0x46c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d102      	bne.n	8006f98 <HAL_DMA_IRQHandler+0x2d0>
 8006f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f96:	e01b      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f9c:	e018      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa2:	e015      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	e013      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e011      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb0:	e00e      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006fb6:	e00b      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fbc:	e008      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fc2:	e005      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc8:	e002      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fca:	2320      	movs	r3, #32
 8006fcc:	e000      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x308>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	4a59      	ldr	r2, [pc, #356]	; (8007138 <HAL_DMA_IRQHandler+0x470>)
 8006fd2:	6053      	str	r3, [r2, #4]
 8006fd4:	e057      	b.n	8007086 <HAL_DMA_IRQHandler+0x3be>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a4d      	ldr	r2, [pc, #308]	; (8007110 <HAL_DMA_IRQHandler+0x448>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04f      	beq.n	8007080 <HAL_DMA_IRQHandler+0x3b8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a4b      	ldr	r2, [pc, #300]	; (8007114 <HAL_DMA_IRQHandler+0x44c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d048      	beq.n	800707c <HAL_DMA_IRQHandler+0x3b4>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a4a      	ldr	r2, [pc, #296]	; (8007118 <HAL_DMA_IRQHandler+0x450>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <HAL_DMA_IRQHandler+0x3ae>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a48      	ldr	r2, [pc, #288]	; (800711c <HAL_DMA_IRQHandler+0x454>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d038      	beq.n	8007070 <HAL_DMA_IRQHandler+0x3a8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a47      	ldr	r2, [pc, #284]	; (8007120 <HAL_DMA_IRQHandler+0x458>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d030      	beq.n	800706a <HAL_DMA_IRQHandler+0x3a2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a45      	ldr	r2, [pc, #276]	; (8007124 <HAL_DMA_IRQHandler+0x45c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d028      	beq.n	8007064 <HAL_DMA_IRQHandler+0x39c>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3d      	ldr	r2, [pc, #244]	; (800710c <HAL_DMA_IRQHandler+0x444>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d020      	beq.n	800705e <HAL_DMA_IRQHandler+0x396>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a41      	ldr	r2, [pc, #260]	; (8007128 <HAL_DMA_IRQHandler+0x460>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d019      	beq.n	800705a <HAL_DMA_IRQHandler+0x392>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a40      	ldr	r2, [pc, #256]	; (800712c <HAL_DMA_IRQHandler+0x464>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d012      	beq.n	8007056 <HAL_DMA_IRQHandler+0x38e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a3e      	ldr	r2, [pc, #248]	; (8007130 <HAL_DMA_IRQHandler+0x468>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00a      	beq.n	8007050 <HAL_DMA_IRQHandler+0x388>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a3d      	ldr	r2, [pc, #244]	; (8007134 <HAL_DMA_IRQHandler+0x46c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d102      	bne.n	800704a <HAL_DMA_IRQHandler+0x382>
 8007044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007048:	e01b      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 800704a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800704e:	e018      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 8007050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007054:	e015      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 8007056:	2320      	movs	r3, #32
 8007058:	e013      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 800705a:	2302      	movs	r3, #2
 800705c:	e011      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 800705e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007062:	e00e      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 8007064:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007068:	e00b      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 800706a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800706e:	e008      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 8007070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007074:	e005      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707a:	e002      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 800707c:	2320      	movs	r3, #32
 800707e:	e000      	b.n	8007082 <HAL_DMA_IRQHandler+0x3ba>
 8007080:	2302      	movs	r3, #2
 8007082:	4a2e      	ldr	r2, [pc, #184]	; (800713c <HAL_DMA_IRQHandler+0x474>)
 8007084:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d034      	beq.n	8007100 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800709e:	e02f      	b.n	8007100 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	2208      	movs	r2, #8
 80070a6:	409a      	lsls	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d028      	beq.n	8007102 <HAL_DMA_IRQHandler+0x43a>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d023      	beq.n	8007102 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 020e 	bic.w	r2, r2, #14
 80070c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	2101      	movs	r1, #1
 80070d4:	fa01 f202 	lsl.w	r2, r1, r2
 80070d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
    }
  }
  return;
 8007100:	bf00      	nop
 8007102:	bf00      	nop
}
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40020080 	.word	0x40020080
 8007110:	40020008 	.word	0x40020008
 8007114:	4002001c 	.word	0x4002001c
 8007118:	40020030 	.word	0x40020030
 800711c:	40020044 	.word	0x40020044
 8007120:	40020058 	.word	0x40020058
 8007124:	4002006c 	.word	0x4002006c
 8007128:	40020408 	.word	0x40020408
 800712c:	4002041c 	.word	0x4002041c
 8007130:	40020430 	.word	0x40020430
 8007134:	40020444 	.word	0x40020444
 8007138:	40020400 	.word	0x40020400
 800713c:	40020000 	.word	0x40020000

08007140 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2101      	movs	r1, #1
 8007158:	fa01 f202 	lsl.w	r2, r1, r2
 800715c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b10      	cmp	r3, #16
 800716c:	d108      	bne.n	8007180 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800717e:	e007      	b.n	8007190 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr
	...

0800719c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800719c:	b480      	push	{r7}
 800719e:	b08b      	sub	sp, #44	; 0x2c
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071a6:	2300      	movs	r3, #0
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80071aa:	2300      	movs	r3, #0
 80071ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071ae:	e179      	b.n	80074a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80071b0:	2201      	movs	r2, #1
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	4013      	ands	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	f040 8168 	bne.w	800749e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4a96      	ldr	r2, [pc, #600]	; (800742c <HAL_GPIO_Init+0x290>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d05e      	beq.n	8007296 <HAL_GPIO_Init+0xfa>
 80071d8:	4a94      	ldr	r2, [pc, #592]	; (800742c <HAL_GPIO_Init+0x290>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d875      	bhi.n	80072ca <HAL_GPIO_Init+0x12e>
 80071de:	4a94      	ldr	r2, [pc, #592]	; (8007430 <HAL_GPIO_Init+0x294>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d058      	beq.n	8007296 <HAL_GPIO_Init+0xfa>
 80071e4:	4a92      	ldr	r2, [pc, #584]	; (8007430 <HAL_GPIO_Init+0x294>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d86f      	bhi.n	80072ca <HAL_GPIO_Init+0x12e>
 80071ea:	4a92      	ldr	r2, [pc, #584]	; (8007434 <HAL_GPIO_Init+0x298>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d052      	beq.n	8007296 <HAL_GPIO_Init+0xfa>
 80071f0:	4a90      	ldr	r2, [pc, #576]	; (8007434 <HAL_GPIO_Init+0x298>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d869      	bhi.n	80072ca <HAL_GPIO_Init+0x12e>
 80071f6:	4a90      	ldr	r2, [pc, #576]	; (8007438 <HAL_GPIO_Init+0x29c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d04c      	beq.n	8007296 <HAL_GPIO_Init+0xfa>
 80071fc:	4a8e      	ldr	r2, [pc, #568]	; (8007438 <HAL_GPIO_Init+0x29c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d863      	bhi.n	80072ca <HAL_GPIO_Init+0x12e>
 8007202:	4a8e      	ldr	r2, [pc, #568]	; (800743c <HAL_GPIO_Init+0x2a0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d046      	beq.n	8007296 <HAL_GPIO_Init+0xfa>
 8007208:	4a8c      	ldr	r2, [pc, #560]	; (800743c <HAL_GPIO_Init+0x2a0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d85d      	bhi.n	80072ca <HAL_GPIO_Init+0x12e>
 800720e:	2b12      	cmp	r3, #18
 8007210:	d82a      	bhi.n	8007268 <HAL_GPIO_Init+0xcc>
 8007212:	2b12      	cmp	r3, #18
 8007214:	d859      	bhi.n	80072ca <HAL_GPIO_Init+0x12e>
 8007216:	a201      	add	r2, pc, #4	; (adr r2, 800721c <HAL_GPIO_Init+0x80>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	08007297 	.word	0x08007297
 8007220:	08007271 	.word	0x08007271
 8007224:	08007283 	.word	0x08007283
 8007228:	080072c5 	.word	0x080072c5
 800722c:	080072cb 	.word	0x080072cb
 8007230:	080072cb 	.word	0x080072cb
 8007234:	080072cb 	.word	0x080072cb
 8007238:	080072cb 	.word	0x080072cb
 800723c:	080072cb 	.word	0x080072cb
 8007240:	080072cb 	.word	0x080072cb
 8007244:	080072cb 	.word	0x080072cb
 8007248:	080072cb 	.word	0x080072cb
 800724c:	080072cb 	.word	0x080072cb
 8007250:	080072cb 	.word	0x080072cb
 8007254:	080072cb 	.word	0x080072cb
 8007258:	080072cb 	.word	0x080072cb
 800725c:	080072cb 	.word	0x080072cb
 8007260:	08007279 	.word	0x08007279
 8007264:	0800728d 	.word	0x0800728d
 8007268:	4a75      	ldr	r2, [pc, #468]	; (8007440 <HAL_GPIO_Init+0x2a4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800726e:	e02c      	b.n	80072ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	623b      	str	r3, [r7, #32]
          break;
 8007276:	e029      	b.n	80072cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	3304      	adds	r3, #4
 800727e:	623b      	str	r3, [r7, #32]
          break;
 8007280:	e024      	b.n	80072cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	3308      	adds	r3, #8
 8007288:	623b      	str	r3, [r7, #32]
          break;
 800728a:	e01f      	b.n	80072cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	330c      	adds	r3, #12
 8007292:	623b      	str	r3, [r7, #32]
          break;
 8007294:	e01a      	b.n	80072cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d102      	bne.n	80072a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800729e:	2304      	movs	r3, #4
 80072a0:	623b      	str	r3, [r7, #32]
          break;
 80072a2:	e013      	b.n	80072cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d105      	bne.n	80072b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072ac:	2308      	movs	r3, #8
 80072ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	611a      	str	r2, [r3, #16]
          break;
 80072b6:	e009      	b.n	80072cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072b8:	2308      	movs	r3, #8
 80072ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	615a      	str	r2, [r3, #20]
          break;
 80072c2:	e003      	b.n	80072cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80072c4:	2300      	movs	r3, #0
 80072c6:	623b      	str	r3, [r7, #32]
          break;
 80072c8:	e000      	b.n	80072cc <HAL_GPIO_Init+0x130>
          break;
 80072ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2bff      	cmp	r3, #255	; 0xff
 80072d0:	d801      	bhi.n	80072d6 <HAL_GPIO_Init+0x13a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	e001      	b.n	80072da <HAL_GPIO_Init+0x13e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3304      	adds	r3, #4
 80072da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2bff      	cmp	r3, #255	; 0xff
 80072e0:	d802      	bhi.n	80072e8 <HAL_GPIO_Init+0x14c>
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	e002      	b.n	80072ee <HAL_GPIO_Init+0x152>
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	3b08      	subs	r3, #8
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	210f      	movs	r1, #15
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	401a      	ands	r2, r3
 8007300:	6a39      	ldr	r1, [r7, #32]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	fa01 f303 	lsl.w	r3, r1, r3
 8007308:	431a      	orrs	r2, r3
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 80c1 	beq.w	800749e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800731c:	4b49      	ldr	r3, [pc, #292]	; (8007444 <HAL_GPIO_Init+0x2a8>)
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	4a48      	ldr	r2, [pc, #288]	; (8007444 <HAL_GPIO_Init+0x2a8>)
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6193      	str	r3, [r2, #24]
 8007328:	4b46      	ldr	r3, [pc, #280]	; (8007444 <HAL_GPIO_Init+0x2a8>)
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007334:	4a44      	ldr	r2, [pc, #272]	; (8007448 <HAL_GPIO_Init+0x2ac>)
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	089b      	lsrs	r3, r3, #2
 800733a:	3302      	adds	r3, #2
 800733c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	220f      	movs	r2, #15
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4013      	ands	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a3c      	ldr	r2, [pc, #240]	; (800744c <HAL_GPIO_Init+0x2b0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d01f      	beq.n	80073a0 <HAL_GPIO_Init+0x204>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <HAL_GPIO_Init+0x2b4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d019      	beq.n	800739c <HAL_GPIO_Init+0x200>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a3a      	ldr	r2, [pc, #232]	; (8007454 <HAL_GPIO_Init+0x2b8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d013      	beq.n	8007398 <HAL_GPIO_Init+0x1fc>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a39      	ldr	r2, [pc, #228]	; (8007458 <HAL_GPIO_Init+0x2bc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00d      	beq.n	8007394 <HAL_GPIO_Init+0x1f8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a38      	ldr	r2, [pc, #224]	; (800745c <HAL_GPIO_Init+0x2c0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d007      	beq.n	8007390 <HAL_GPIO_Init+0x1f4>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a37      	ldr	r2, [pc, #220]	; (8007460 <HAL_GPIO_Init+0x2c4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d101      	bne.n	800738c <HAL_GPIO_Init+0x1f0>
 8007388:	2305      	movs	r3, #5
 800738a:	e00a      	b.n	80073a2 <HAL_GPIO_Init+0x206>
 800738c:	2306      	movs	r3, #6
 800738e:	e008      	b.n	80073a2 <HAL_GPIO_Init+0x206>
 8007390:	2304      	movs	r3, #4
 8007392:	e006      	b.n	80073a2 <HAL_GPIO_Init+0x206>
 8007394:	2303      	movs	r3, #3
 8007396:	e004      	b.n	80073a2 <HAL_GPIO_Init+0x206>
 8007398:	2302      	movs	r3, #2
 800739a:	e002      	b.n	80073a2 <HAL_GPIO_Init+0x206>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <HAL_GPIO_Init+0x206>
 80073a0:	2300      	movs	r3, #0
 80073a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a4:	f002 0203 	and.w	r2, r2, #3
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	4093      	lsls	r3, r2
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80073b2:	4925      	ldr	r1, [pc, #148]	; (8007448 <HAL_GPIO_Init+0x2ac>)
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	3302      	adds	r3, #2
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80073cc:	4b25      	ldr	r3, [pc, #148]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	4924      	ldr	r1, [pc, #144]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	600b      	str	r3, [r1, #0]
 80073d8:	e006      	b.n	80073e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80073da:	4b22      	ldr	r3, [pc, #136]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	43db      	mvns	r3, r3
 80073e2:	4920      	ldr	r1, [pc, #128]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80073f4:	4b1b      	ldr	r3, [pc, #108]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	491a      	ldr	r1, [pc, #104]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	604b      	str	r3, [r1, #4]
 8007400:	e006      	b.n	8007410 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007402:	4b18      	ldr	r3, [pc, #96]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	43db      	mvns	r3, r3
 800740a:	4916      	ldr	r1, [pc, #88]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 800740c:	4013      	ands	r3, r2
 800740e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d025      	beq.n	8007468 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800741c:	4b11      	ldr	r3, [pc, #68]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	4910      	ldr	r1, [pc, #64]	; (8007464 <HAL_GPIO_Init+0x2c8>)
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	4313      	orrs	r3, r2
 8007426:	608b      	str	r3, [r1, #8]
 8007428:	e025      	b.n	8007476 <HAL_GPIO_Init+0x2da>
 800742a:	bf00      	nop
 800742c:	10320000 	.word	0x10320000
 8007430:	10310000 	.word	0x10310000
 8007434:	10220000 	.word	0x10220000
 8007438:	10210000 	.word	0x10210000
 800743c:	10120000 	.word	0x10120000
 8007440:	10110000 	.word	0x10110000
 8007444:	40021000 	.word	0x40021000
 8007448:	40010000 	.word	0x40010000
 800744c:	40010800 	.word	0x40010800
 8007450:	40010c00 	.word	0x40010c00
 8007454:	40011000 	.word	0x40011000
 8007458:	40011400 	.word	0x40011400
 800745c:	40011800 	.word	0x40011800
 8007460:	40011c00 	.word	0x40011c00
 8007464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007468:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <HAL_GPIO_Init+0x324>)
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	43db      	mvns	r3, r3
 8007470:	4913      	ldr	r1, [pc, #76]	; (80074c0 <HAL_GPIO_Init+0x324>)
 8007472:	4013      	ands	r3, r2
 8007474:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d006      	beq.n	8007490 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_GPIO_Init+0x324>)
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	490e      	ldr	r1, [pc, #56]	; (80074c0 <HAL_GPIO_Init+0x324>)
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4313      	orrs	r3, r2
 800748c:	60cb      	str	r3, [r1, #12]
 800748e:	e006      	b.n	800749e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <HAL_GPIO_Init+0x324>)
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	43db      	mvns	r3, r3
 8007498:	4909      	ldr	r1, [pc, #36]	; (80074c0 <HAL_GPIO_Init+0x324>)
 800749a:	4013      	ands	r3, r2
 800749c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	3301      	adds	r3, #1
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	fa22 f303 	lsr.w	r3, r2, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f47f ae7e 	bne.w	80071b0 <HAL_GPIO_Init+0x14>
  }
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	372c      	adds	r7, #44	; 0x2c
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr
 80074c0:	40010400 	.word	0x40010400

080074c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	807b      	strh	r3, [r7, #2]
 80074d0:	4613      	mov	r3, r2
 80074d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074d4:	787b      	ldrb	r3, [r7, #1]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074da:	887a      	ldrh	r2, [r7, #2]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80074e0:	e003      	b.n	80074ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80074e2:	887b      	ldrh	r3, [r7, #2]
 80074e4:	041a      	lsls	r2, r3, #16
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e12b      	b.n	800775e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fd ffe4 	bl	80054e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	; 0x24
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007558:	f000 fffc 	bl	8008554 <HAL_RCC_GetPCLK1Freq>
 800755c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	4a81      	ldr	r2, [pc, #516]	; (8007768 <HAL_I2C_Init+0x274>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d807      	bhi.n	8007578 <HAL_I2C_Init+0x84>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4a80      	ldr	r2, [pc, #512]	; (800776c <HAL_I2C_Init+0x278>)
 800756c:	4293      	cmp	r3, r2
 800756e:	bf94      	ite	ls
 8007570:	2301      	movls	r3, #1
 8007572:	2300      	movhi	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e006      	b.n	8007586 <HAL_I2C_Init+0x92>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4a7d      	ldr	r2, [pc, #500]	; (8007770 <HAL_I2C_Init+0x27c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	bf94      	ite	ls
 8007580:	2301      	movls	r3, #1
 8007582:	2300      	movhi	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0e7      	b.n	800775e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a78      	ldr	r2, [pc, #480]	; (8007774 <HAL_I2C_Init+0x280>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	0c9b      	lsrs	r3, r3, #18
 8007598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	4a6a      	ldr	r2, [pc, #424]	; (8007768 <HAL_I2C_Init+0x274>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d802      	bhi.n	80075c8 <HAL_I2C_Init+0xd4>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3301      	adds	r3, #1
 80075c6:	e009      	b.n	80075dc <HAL_I2C_Init+0xe8>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	4a69      	ldr	r2, [pc, #420]	; (8007778 <HAL_I2C_Init+0x284>)
 80075d4:	fba2 2303 	umull	r2, r3, r2, r3
 80075d8:	099b      	lsrs	r3, r3, #6
 80075da:	3301      	adds	r3, #1
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	430b      	orrs	r3, r1
 80075e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80075ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	495c      	ldr	r1, [pc, #368]	; (8007768 <HAL_I2C_Init+0x274>)
 80075f8:	428b      	cmp	r3, r1
 80075fa:	d819      	bhi.n	8007630 <HAL_I2C_Init+0x13c>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	1e59      	subs	r1, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	fbb1 f3f3 	udiv	r3, r1, r3
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007610:	400b      	ands	r3, r1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <HAL_I2C_Init+0x138>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1e59      	subs	r1, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	fbb1 f3f3 	udiv	r3, r1, r3
 8007624:	3301      	adds	r3, #1
 8007626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800762a:	e051      	b.n	80076d0 <HAL_I2C_Init+0x1dc>
 800762c:	2304      	movs	r3, #4
 800762e:	e04f      	b.n	80076d0 <HAL_I2C_Init+0x1dc>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d111      	bne.n	800765c <HAL_I2C_Init+0x168>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	1e58      	subs	r0, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6859      	ldr	r1, [r3, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	440b      	add	r3, r1
 8007646:	fbb0 f3f3 	udiv	r3, r0, r3
 800764a:	3301      	adds	r3, #1
 800764c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	e012      	b.n	8007682 <HAL_I2C_Init+0x18e>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1e58      	subs	r0, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	0099      	lsls	r1, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007672:	3301      	adds	r3, #1
 8007674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007678:	2b00      	cmp	r3, #0
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <HAL_I2C_Init+0x196>
 8007686:	2301      	movs	r3, #1
 8007688:	e022      	b.n	80076d0 <HAL_I2C_Init+0x1dc>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10e      	bne.n	80076b0 <HAL_I2C_Init+0x1bc>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1e58      	subs	r0, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6859      	ldr	r1, [r3, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	440b      	add	r3, r1
 80076a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80076a4:	3301      	adds	r3, #1
 80076a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ae:	e00f      	b.n	80076d0 <HAL_I2C_Init+0x1dc>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	1e58      	subs	r0, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6859      	ldr	r1, [r3, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	0099      	lsls	r1, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076c6:	3301      	adds	r3, #1
 80076c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	6809      	ldr	r1, [r1, #0]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69da      	ldr	r2, [r3, #28]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80076fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6911      	ldr	r1, [r2, #16]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	68d2      	ldr	r2, [r2, #12]
 800770a:	4311      	orrs	r1, r2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	430b      	orrs	r3, r1
 8007712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	000186a0 	.word	0x000186a0
 800776c:	001e847f 	.word	0x001e847f
 8007770:	003d08ff 	.word	0x003d08ff
 8007774:	431bde83 	.word	0x431bde83
 8007778:	10624dd3 	.word	0x10624dd3

0800777c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af02      	add	r7, sp, #8
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	4608      	mov	r0, r1
 8007786:	4611      	mov	r1, r2
 8007788:	461a      	mov	r2, r3
 800778a:	4603      	mov	r3, r0
 800778c:	817b      	strh	r3, [r7, #10]
 800778e:	460b      	mov	r3, r1
 8007790:	813b      	strh	r3, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007796:	f7fe ff43 	bl	8006620 <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	f040 80d9 	bne.w	800795c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2319      	movs	r3, #25
 80077b0:	2201      	movs	r2, #1
 80077b2:	496d      	ldr	r1, [pc, #436]	; (8007968 <HAL_I2C_Mem_Write+0x1ec>)
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f971 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80077c0:	2302      	movs	r3, #2
 80077c2:	e0cc      	b.n	800795e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_I2C_Mem_Write+0x56>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e0c5      	b.n	800795e <HAL_I2C_Mem_Write+0x1e2>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d007      	beq.n	80077f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2221      	movs	r2, #33	; 0x21
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2240      	movs	r2, #64	; 0x40
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a3a      	ldr	r2, [r7, #32]
 8007822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a4d      	ldr	r2, [pc, #308]	; (800796c <HAL_I2C_Mem_Write+0x1f0>)
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800783a:	88f8      	ldrh	r0, [r7, #6]
 800783c:	893a      	ldrh	r2, [r7, #8]
 800783e:	8979      	ldrh	r1, [r7, #10]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4603      	mov	r3, r0
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f890 	bl	8007970 <I2C_RequestMemoryWrite>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d052      	beq.n	80078fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e081      	b.n	800795e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f9f2 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00d      	beq.n	8007886 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	2b04      	cmp	r3, #4
 8007870:	d107      	bne.n	8007882 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007880:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e06b      	b.n	800795e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d11b      	bne.n	80078fc <HAL_I2C_Mem_Write+0x180>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d017      	beq.n	80078fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1aa      	bne.n	800785a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f9de 	bl	8007cca <I2C_WaitOnBTFFlagUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00d      	beq.n	8007930 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	2b04      	cmp	r3, #4
 800791a:	d107      	bne.n	800792c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800792a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e016      	b.n	800795e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e000      	b.n	800795e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800795c:	2302      	movs	r3, #2
  }
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	00100002 	.word	0x00100002
 800796c:	ffff0000 	.word	0xffff0000

08007970 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af02      	add	r7, sp, #8
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	461a      	mov	r2, r3
 800797e:	4603      	mov	r3, r0
 8007980:	817b      	strh	r3, [r7, #10]
 8007982:	460b      	mov	r3, r1
 8007984:	813b      	strh	r3, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f878 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c0:	d103      	bne.n	80079ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e05f      	b.n	8007a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	6a3a      	ldr	r2, [r7, #32]
 80079e2:	492d      	ldr	r1, [pc, #180]	; (8007a98 <I2C_RequestMemoryWrite+0x128>)
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f8b0 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e04c      	b.n	8007a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	6a39      	ldr	r1, [r7, #32]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f91a 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d107      	bne.n	8007a32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e02b      	b.n	8007a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d105      	bne.n	8007a48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a3c:	893b      	ldrh	r3, [r7, #8]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	611a      	str	r2, [r3, #16]
 8007a46:	e021      	b.n	8007a8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a58:	6a39      	ldr	r1, [r7, #32]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f8f4 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d107      	bne.n	8007a7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e005      	b.n	8007a8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a82:	893b      	ldrh	r3, [r7, #8]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	00010002 	.word	0x00010002

08007a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aac:	e025      	b.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d021      	beq.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab6:	f7fe fdb3 	bl	8006620 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d116      	bne.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e023      	b.n	8007b42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10d      	bne.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	43da      	mvns	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf0c      	ite	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2300      	movne	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	e00c      	b.n	8007b3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	43da      	mvns	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf0c      	ite	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	2300      	movne	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d0b6      	beq.n	8007aae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
 8007b56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b58:	e051      	b.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b68:	d123      	bne.n	8007bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	f043 0204 	orr.w	r2, r3, #4
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e046      	b.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d021      	beq.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bba:	f7fe fd31 	bl	8006620 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d116      	bne.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0220 	orr.w	r2, r3, #32
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e020      	b.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10c      	bne.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	43da      	mvns	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4013      	ands	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	e00b      	b.n	8007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	43da      	mvns	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bf14      	ite	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	2300      	moveq	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d18d      	bne.n	8007b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c54:	e02d      	b.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f878 	bl	8007d4c <I2C_IsAcknowledgeFailed>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e02d      	b.n	8007cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d021      	beq.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6e:	f7fe fcd7 	bl	8006620 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d116      	bne.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	f043 0220 	orr.w	r2, r3, #32
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e007      	b.n	8007cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d1ca      	bne.n	8007c56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cd6:	e02d      	b.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f837 	bl	8007d4c <I2C_IsAcknowledgeFailed>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e02d      	b.n	8007d44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d021      	beq.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf0:	f7fe fc96 	bl	8006620 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d116      	bne.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	f043 0220 	orr.w	r2, r3, #32
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e007      	b.n	8007d44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d1ca      	bne.n	8007cd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d62:	d11b      	bne.n	8007d9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	f043 0204 	orr.w	r2, r3, #4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e000      	b.n	8007d9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e272      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 8087 	beq.w	8007ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dc8:	4b92      	ldr	r3, [pc, #584]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f003 030c 	and.w	r3, r3, #12
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d00c      	beq.n	8007dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007dd4:	4b8f      	ldr	r3, [pc, #572]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d112      	bne.n	8007e06 <HAL_RCC_OscConfig+0x5e>
 8007de0:	4b8c      	ldr	r3, [pc, #560]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d10b      	bne.n	8007e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dee:	4b89      	ldr	r3, [pc, #548]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06c      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x12c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d168      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e24c      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCC_OscConfig+0x76>
 8007e10:	4b80      	ldr	r3, [pc, #512]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a7f      	ldr	r2, [pc, #508]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	e02e      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCC_OscConfig+0x98>
 8007e26:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a7a      	ldr	r2, [pc, #488]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	4b78      	ldr	r3, [pc, #480]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a77      	ldr	r2, [pc, #476]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	e01d      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e48:	d10c      	bne.n	8007e64 <HAL_RCC_OscConfig+0xbc>
 8007e4a:	4b72      	ldr	r3, [pc, #456]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a71      	ldr	r2, [pc, #452]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	4b6f      	ldr	r3, [pc, #444]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a6e      	ldr	r2, [pc, #440]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	e00b      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e64:	4b6b      	ldr	r3, [pc, #428]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6a      	ldr	r2, [pc, #424]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	4b68      	ldr	r3, [pc, #416]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a67      	ldr	r2, [pc, #412]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d013      	beq.n	8007eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e84:	f7fe fbcc 	bl	8006620 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e8c:	f7fe fbc8 	bl	8006620 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b64      	cmp	r3, #100	; 0x64
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e200      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e9e:	4b5d      	ldr	r3, [pc, #372]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0f0      	beq.n	8007e8c <HAL_RCC_OscConfig+0xe4>
 8007eaa:	e014      	b.n	8007ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eac:	f7fe fbb8 	bl	8006620 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eb4:	f7fe fbb4 	bl	8006620 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b64      	cmp	r3, #100	; 0x64
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e1ec      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ec6:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x10c>
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d063      	beq.n	8007faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ee2:	4b4c      	ldr	r3, [pc, #304]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 030c 	and.w	r3, r3, #12
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007eee:	4b49      	ldr	r3, [pc, #292]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d11c      	bne.n	8007f34 <HAL_RCC_OscConfig+0x18c>
 8007efa:	4b46      	ldr	r3, [pc, #280]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d116      	bne.n	8007f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f06:	4b43      	ldr	r3, [pc, #268]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_RCC_OscConfig+0x176>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d001      	beq.n	8007f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e1c0      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1e:	4b3d      	ldr	r3, [pc, #244]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	4939      	ldr	r1, [pc, #228]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f32:	e03a      	b.n	8007faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f42:	f7fe fb6d 	bl	8006620 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f4a:	f7fe fb69 	bl	8006620 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e1a1      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f5c:	4b2d      	ldr	r3, [pc, #180]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f68:	4b2a      	ldr	r3, [pc, #168]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4927      	ldr	r1, [pc, #156]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	600b      	str	r3, [r1, #0]
 8007f7c:	e015      	b.n	8007faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7e:	4b26      	ldr	r3, [pc, #152]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f84:	f7fe fb4c 	bl	8006620 <HAL_GetTick>
 8007f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8c:	f7fe fb48 	bl	8006620 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e180      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f9e:	4b1d      	ldr	r3, [pc, #116]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d03a      	beq.n	800802c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d019      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fbe:	4b17      	ldr	r3, [pc, #92]	; (800801c <HAL_RCC_OscConfig+0x274>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fc4:	f7fe fb2c 	bl	8006620 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fcc:	f7fe fb28 	bl	8006620 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e160      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007fea:	2001      	movs	r0, #1
 8007fec:	f000 fada 	bl	80085a4 <RCC_Delay>
 8007ff0:	e01c      	b.n	800802c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <HAL_RCC_OscConfig+0x274>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff8:	f7fe fb12 	bl	8006620 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ffe:	e00f      	b.n	8008020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008000:	f7fe fb0e 	bl	8006620 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d908      	bls.n	8008020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e146      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000
 8008018:	42420000 	.word	0x42420000
 800801c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008020:	4b92      	ldr	r3, [pc, #584]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e9      	bne.n	8008000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a6 	beq.w	8008186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800803e:	4b8b      	ldr	r3, [pc, #556]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10d      	bne.n	8008066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800804a:	4b88      	ldr	r3, [pc, #544]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4a87      	ldr	r2, [pc, #540]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008054:	61d3      	str	r3, [r2, #28]
 8008056:	4b85      	ldr	r3, [pc, #532]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008066:	4b82      	ldr	r3, [pc, #520]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d118      	bne.n	80080a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008072:	4b7f      	ldr	r3, [pc, #508]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a7e      	ldr	r2, [pc, #504]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 8008078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800807c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800807e:	f7fe facf 	bl	8006620 <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008086:	f7fe facb 	bl	8006620 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b64      	cmp	r3, #100	; 0x64
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e103      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008098:	4b75      	ldr	r3, [pc, #468]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0f0      	beq.n	8008086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d106      	bne.n	80080ba <HAL_RCC_OscConfig+0x312>
 80080ac:	4b6f      	ldr	r3, [pc, #444]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	4a6e      	ldr	r2, [pc, #440]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	6213      	str	r3, [r2, #32]
 80080b8:	e02d      	b.n	8008116 <HAL_RCC_OscConfig+0x36e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10c      	bne.n	80080dc <HAL_RCC_OscConfig+0x334>
 80080c2:	4b6a      	ldr	r3, [pc, #424]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	4a69      	ldr	r2, [pc, #420]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080c8:	f023 0301 	bic.w	r3, r3, #1
 80080cc:	6213      	str	r3, [r2, #32]
 80080ce:	4b67      	ldr	r3, [pc, #412]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	4a66      	ldr	r2, [pc, #408]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080d4:	f023 0304 	bic.w	r3, r3, #4
 80080d8:	6213      	str	r3, [r2, #32]
 80080da:	e01c      	b.n	8008116 <HAL_RCC_OscConfig+0x36e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	2b05      	cmp	r3, #5
 80080e2:	d10c      	bne.n	80080fe <HAL_RCC_OscConfig+0x356>
 80080e4:	4b61      	ldr	r3, [pc, #388]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	4a60      	ldr	r2, [pc, #384]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080ea:	f043 0304 	orr.w	r3, r3, #4
 80080ee:	6213      	str	r3, [r2, #32]
 80080f0:	4b5e      	ldr	r3, [pc, #376]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	4a5d      	ldr	r2, [pc, #372]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	6213      	str	r3, [r2, #32]
 80080fc:	e00b      	b.n	8008116 <HAL_RCC_OscConfig+0x36e>
 80080fe:	4b5b      	ldr	r3, [pc, #364]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	4a5a      	ldr	r2, [pc, #360]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	6213      	str	r3, [r2, #32]
 800810a:	4b58      	ldr	r3, [pc, #352]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	4a57      	ldr	r2, [pc, #348]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008110:	f023 0304 	bic.w	r3, r3, #4
 8008114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d015      	beq.n	800814a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811e:	f7fe fa7f 	bl	8006620 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008124:	e00a      	b.n	800813c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008126:	f7fe fa7b 	bl	8006620 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	f241 3288 	movw	r2, #5000	; 0x1388
 8008134:	4293      	cmp	r3, r2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e0b1      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800813c:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0ee      	beq.n	8008126 <HAL_RCC_OscConfig+0x37e>
 8008148:	e014      	b.n	8008174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800814a:	f7fe fa69 	bl	8006620 <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008150:	e00a      	b.n	8008168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008152:	f7fe fa65 	bl	8006620 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008160:	4293      	cmp	r3, r2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e09b      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008168:	4b40      	ldr	r3, [pc, #256]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1ee      	bne.n	8008152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d105      	bne.n	8008186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800817a:	4b3c      	ldr	r3, [pc, #240]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4a3b      	ldr	r2, [pc, #236]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8087 	beq.w	800829e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008190:	4b36      	ldr	r3, [pc, #216]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 030c 	and.w	r3, r3, #12
 8008198:	2b08      	cmp	r3, #8
 800819a:	d061      	beq.n	8008260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d146      	bne.n	8008232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a4:	4b33      	ldr	r3, [pc, #204]	; (8008274 <HAL_RCC_OscConfig+0x4cc>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081aa:	f7fe fa39 	bl	8006620 <HAL_GetTick>
 80081ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081b2:	f7fe fa35 	bl	8006620 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e06d      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081c4:	4b29      	ldr	r3, [pc, #164]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f0      	bne.n	80081b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d108      	bne.n	80081ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80081da:	4b24      	ldr	r3, [pc, #144]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	4921      	ldr	r1, [pc, #132]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081ec:	4b1f      	ldr	r3, [pc, #124]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a19      	ldr	r1, [r3, #32]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	430b      	orrs	r3, r1
 80081fe:	491b      	ldr	r1, [pc, #108]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008200:	4313      	orrs	r3, r2
 8008202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008204:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <HAL_RCC_OscConfig+0x4cc>)
 8008206:	2201      	movs	r2, #1
 8008208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800820a:	f7fe fa09 	bl	8006620 <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008210:	e008      	b.n	8008224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008212:	f7fe fa05 	bl	8006620 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e03d      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008224:	4b11      	ldr	r3, [pc, #68]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0f0      	beq.n	8008212 <HAL_RCC_OscConfig+0x46a>
 8008230:	e035      	b.n	800829e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <HAL_RCC_OscConfig+0x4cc>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008238:	f7fe f9f2 	bl	8006620 <HAL_GetTick>
 800823c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008240:	f7fe f9ee 	bl	8006620 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e026      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f0      	bne.n	8008240 <HAL_RCC_OscConfig+0x498>
 800825e:	e01e      	b.n	800829e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d107      	bne.n	8008278 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e019      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
 800826c:	40021000 	.word	0x40021000
 8008270:	40007000 	.word	0x40007000
 8008274:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <HAL_RCC_OscConfig+0x500>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	429a      	cmp	r2, r3
 800828a:	d106      	bne.n	800829a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d001      	beq.n	800829e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40021000 	.word	0x40021000

080082ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e0d0      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082c0:	4b6a      	ldr	r3, [pc, #424]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d910      	bls.n	80082f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b67      	ldr	r3, [pc, #412]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 0207 	bic.w	r2, r3, #7
 80082d6:	4965      	ldr	r1, [pc, #404]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	4313      	orrs	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b63      	ldr	r3, [pc, #396]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e0b8      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d020      	beq.n	800833e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008308:	4b59      	ldr	r3, [pc, #356]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4a58      	ldr	r2, [pc, #352]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800830e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008320:	4b53      	ldr	r3, [pc, #332]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4a52      	ldr	r2, [pc, #328]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008326:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800832a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800832c:	4b50      	ldr	r3, [pc, #320]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	494d      	ldr	r1, [pc, #308]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800833a:	4313      	orrs	r3, r2
 800833c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d040      	beq.n	80083cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d107      	bne.n	8008362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008352:	4b47      	ldr	r3, [pc, #284]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d115      	bne.n	800838a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e07f      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d107      	bne.n	800837a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800836a:	4b41      	ldr	r3, [pc, #260]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e073      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800837a:	4b3d      	ldr	r3, [pc, #244]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e06b      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800838a:	4b39      	ldr	r3, [pc, #228]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f023 0203 	bic.w	r2, r3, #3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	4936      	ldr	r1, [pc, #216]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008398:	4313      	orrs	r3, r2
 800839a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800839c:	f7fe f940 	bl	8006620 <HAL_GetTick>
 80083a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a2:	e00a      	b.n	80083ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083a4:	f7fe f93c 	bl	8006620 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e053      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ba:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f003 020c 	and.w	r2, r3, #12
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d1eb      	bne.n	80083a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083cc:	4b27      	ldr	r3, [pc, #156]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d210      	bcs.n	80083fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083da:	4b24      	ldr	r3, [pc, #144]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f023 0207 	bic.w	r2, r3, #7
 80083e2:	4922      	ldr	r1, [pc, #136]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b20      	ldr	r3, [pc, #128]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d001      	beq.n	80083fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e032      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	4916      	ldr	r1, [pc, #88]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008416:	4313      	orrs	r3, r2
 8008418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0308 	and.w	r3, r3, #8
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008426:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	490e      	ldr	r1, [pc, #56]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008436:	4313      	orrs	r3, r2
 8008438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800843a:	f000 f821 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 800843e:	4602      	mov	r2, r0
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	490a      	ldr	r1, [pc, #40]	; (8008474 <HAL_RCC_ClockConfig+0x1c8>)
 800844c:	5ccb      	ldrb	r3, [r1, r3]
 800844e:	fa22 f303 	lsr.w	r3, r2, r3
 8008452:	4a09      	ldr	r2, [pc, #36]	; (8008478 <HAL_RCC_ClockConfig+0x1cc>)
 8008454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <HAL_RCC_ClockConfig+0x1d0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe f89e 	bl	800659c <HAL_InitTick>

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40022000 	.word	0x40022000
 8008470:	40021000 	.word	0x40021000
 8008474:	0800d4b4 	.word	0x0800d4b4
 8008478:	2000000c 	.word	0x2000000c
 800847c:	2000001c 	.word	0x2000001c

08008480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008480:	b490      	push	{r4, r7}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008486:	4b29      	ldr	r3, [pc, #164]	; (800852c <HAL_RCC_GetSysClockFreq+0xac>)
 8008488:	1d3c      	adds	r4, r7, #4
 800848a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800848c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008490:	f240 2301 	movw	r3, #513	; 0x201
 8008494:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80084aa:	4b21      	ldr	r3, [pc, #132]	; (8008530 <HAL_RCC_GetSysClockFreq+0xb0>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f003 030c 	and.w	r3, r3, #12
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d002      	beq.n	80084c0 <HAL_RCC_GetSysClockFreq+0x40>
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d003      	beq.n	80084c6 <HAL_RCC_GetSysClockFreq+0x46>
 80084be:	e02b      	b.n	8008518 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084c0:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <HAL_RCC_GetSysClockFreq+0xb4>)
 80084c2:	623b      	str	r3, [r7, #32]
      break;
 80084c4:	e02b      	b.n	800851e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	0c9b      	lsrs	r3, r3, #18
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	3328      	adds	r3, #40	; 0x28
 80084d0:	443b      	add	r3, r7
 80084d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80084d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <HAL_RCC_GetSysClockFreq+0xb0>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	0c5b      	lsrs	r3, r3, #17
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	3328      	adds	r3, #40	; 0x28
 80084ee:	443b      	add	r3, r7
 80084f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80084f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4a0e      	ldr	r2, [pc, #56]	; (8008534 <HAL_RCC_GetSysClockFreq+0xb4>)
 80084fa:	fb03 f202 	mul.w	r2, r3, r2
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
 8008506:	e004      	b.n	8008512 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800850c:	fb02 f303 	mul.w	r3, r2, r3
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	623b      	str	r3, [r7, #32]
      break;
 8008516:	e002      	b.n	800851e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008518:	4b08      	ldr	r3, [pc, #32]	; (800853c <HAL_RCC_GetSysClockFreq+0xbc>)
 800851a:	623b      	str	r3, [r7, #32]
      break;
 800851c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800851e:	6a3b      	ldr	r3, [r7, #32]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3728      	adds	r7, #40	; 0x28
 8008524:	46bd      	mov	sp, r7
 8008526:	bc90      	pop	{r4, r7}
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	0800cea0 	.word	0x0800cea0
 8008530:	40021000 	.word	0x40021000
 8008534:	00f42400 	.word	0x00f42400
 8008538:	003d0900 	.word	0x003d0900
 800853c:	007a1200 	.word	0x007a1200

08008540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <HAL_RCC_GetHCLKFreq+0x10>)
 8008546:	681b      	ldr	r3, [r3, #0]
}
 8008548:	4618      	mov	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr
 8008550:	2000000c 	.word	0x2000000c

08008554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008558:	f7ff fff2 	bl	8008540 <HAL_RCC_GetHCLKFreq>
 800855c:	4602      	mov	r2, r0
 800855e:	4b05      	ldr	r3, [pc, #20]	; (8008574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	4903      	ldr	r1, [pc, #12]	; (8008578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800856a:	5ccb      	ldrb	r3, [r1, r3]
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40021000 	.word	0x40021000
 8008578:	0800d4c4 	.word	0x0800d4c4

0800857c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008580:	f7ff ffde 	bl	8008540 <HAL_RCC_GetHCLKFreq>
 8008584:	4602      	mov	r2, r0
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	0adb      	lsrs	r3, r3, #11
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	4903      	ldr	r1, [pc, #12]	; (80085a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008592:	5ccb      	ldrb	r3, [r1, r3]
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008598:	4618      	mov	r0, r3
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40021000 	.word	0x40021000
 80085a0:	0800d4c4 	.word	0x0800d4c4

080085a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <RCC_Delay+0x34>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <RCC_Delay+0x38>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	0a5b      	lsrs	r3, r3, #9
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80085c0:	bf00      	nop
  }
  while (Delay --);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1e5a      	subs	r2, r3, #1
 80085c6:	60fa      	str	r2, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f9      	bne.n	80085c0 <RCC_Delay+0x1c>
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr
 80085d8:	2000000c 	.word	0x2000000c
 80085dc:	10624dd3 	.word	0x10624dd3

080085e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e041      	b.n	8008676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fc ffbe 	bl	8005588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f000 fd88 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b01      	cmp	r3, #1
 8008692:	d001      	beq.n	8008698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e044      	b.n	8008722 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0201 	orr.w	r2, r2, #1
 80086ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1d      	ldr	r2, [pc, #116]	; (800872c <HAL_TIM_Base_Start_IT+0xac>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d018      	beq.n	80086ec <HAL_TIM_Base_Start_IT+0x6c>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a1c      	ldr	r2, [pc, #112]	; (8008730 <HAL_TIM_Base_Start_IT+0xb0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d013      	beq.n	80086ec <HAL_TIM_Base_Start_IT+0x6c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086cc:	d00e      	beq.n	80086ec <HAL_TIM_Base_Start_IT+0x6c>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a18      	ldr	r2, [pc, #96]	; (8008734 <HAL_TIM_Base_Start_IT+0xb4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d009      	beq.n	80086ec <HAL_TIM_Base_Start_IT+0x6c>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a16      	ldr	r2, [pc, #88]	; (8008738 <HAL_TIM_Base_Start_IT+0xb8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d004      	beq.n	80086ec <HAL_TIM_Base_Start_IT+0x6c>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a15      	ldr	r2, [pc, #84]	; (800873c <HAL_TIM_Base_Start_IT+0xbc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d111      	bne.n	8008710 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b06      	cmp	r3, #6
 80086fc:	d010      	beq.n	8008720 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870e:	e007      	b.n	8008720 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr
 800872c:	40012c00 	.word	0x40012c00
 8008730:	40013400 	.word	0x40013400
 8008734:	40000400 	.word	0x40000400
 8008738:	40000800 	.word	0x40000800
 800873c:	40000c00 	.word	0x40000c00

08008740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e041      	b.n	80087d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f839 	bl	80087de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f000 fcd8 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr

080087f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d109      	bne.n	8008814 <HAL_TIM_PWM_Start+0x24>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	e022      	b.n	800885a <HAL_TIM_PWM_Start+0x6a>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b04      	cmp	r3, #4
 8008818:	d109      	bne.n	800882e <HAL_TIM_PWM_Start+0x3e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b01      	cmp	r3, #1
 8008824:	bf14      	ite	ne
 8008826:	2301      	movne	r3, #1
 8008828:	2300      	moveq	r3, #0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	e015      	b.n	800885a <HAL_TIM_PWM_Start+0x6a>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b08      	cmp	r3, #8
 8008832:	d109      	bne.n	8008848 <HAL_TIM_PWM_Start+0x58>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b01      	cmp	r3, #1
 800883e:	bf14      	ite	ne
 8008840:	2301      	movne	r3, #1
 8008842:	2300      	moveq	r3, #0
 8008844:	b2db      	uxtb	r3, r3
 8008846:	e008      	b.n	800885a <HAL_TIM_PWM_Start+0x6a>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b01      	cmp	r3, #1
 8008852:	bf14      	ite	ne
 8008854:	2301      	movne	r3, #1
 8008856:	2300      	moveq	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e072      	b.n	8008948 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d104      	bne.n	8008872 <HAL_TIM_PWM_Start+0x82>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008870:	e013      	b.n	800889a <HAL_TIM_PWM_Start+0xaa>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b04      	cmp	r3, #4
 8008876:	d104      	bne.n	8008882 <HAL_TIM_PWM_Start+0x92>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008880:	e00b      	b.n	800889a <HAL_TIM_PWM_Start+0xaa>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b08      	cmp	r3, #8
 8008886:	d104      	bne.n	8008892 <HAL_TIM_PWM_Start+0xa2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008890:	e003      	b.n	800889a <HAL_TIM_PWM_Start+0xaa>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2202      	movs	r2, #2
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2201      	movs	r2, #1
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 ff02 	bl	80096ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a28      	ldr	r2, [pc, #160]	; (8008950 <HAL_TIM_PWM_Start+0x160>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIM_PWM_Start+0xcc>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a27      	ldr	r2, [pc, #156]	; (8008954 <HAL_TIM_PWM_Start+0x164>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d101      	bne.n	80088c0 <HAL_TIM_PWM_Start+0xd0>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_TIM_PWM_Start+0xd2>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1d      	ldr	r2, [pc, #116]	; (8008950 <HAL_TIM_PWM_Start+0x160>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d018      	beq.n	8008912 <HAL_TIM_PWM_Start+0x122>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	; (8008954 <HAL_TIM_PWM_Start+0x164>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_TIM_PWM_Start+0x122>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f2:	d00e      	beq.n	8008912 <HAL_TIM_PWM_Start+0x122>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a17      	ldr	r2, [pc, #92]	; (8008958 <HAL_TIM_PWM_Start+0x168>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_TIM_PWM_Start+0x122>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a16      	ldr	r2, [pc, #88]	; (800895c <HAL_TIM_PWM_Start+0x16c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIM_PWM_Start+0x122>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a14      	ldr	r2, [pc, #80]	; (8008960 <HAL_TIM_PWM_Start+0x170>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d111      	bne.n	8008936 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b06      	cmp	r3, #6
 8008922:	d010      	beq.n	8008946 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008934:	e007      	b.n	8008946 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0201 	orr.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40013400 	.word	0x40013400
 8008958:	40000400 	.word	0x40000400
 800895c:	40000800 	.word	0x40000800
 8008960:	40000c00 	.word	0x40000c00

08008964 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e093      	b.n	8008aa0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7fc fe49 	bl	8005624 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2202      	movs	r2, #2
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6812      	ldr	r2, [r2, #0]
 80089a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089a8:	f023 0307 	bic.w	r3, r3, #7
 80089ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f000 fbbb 	bl	8009134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4313      	orrs	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e6:	f023 0303 	bic.w	r3, r3, #3
 80089ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	4313      	orrs	r3, r2
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008a04:	f023 030c 	bic.w	r3, r3, #12
 8008a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	4313      	orrs	r3, r2
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	011a      	lsls	r2, r3, #4
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	031b      	lsls	r3, r3, #12
 8008a34:	4313      	orrs	r3, r2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ac0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ac8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ad0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d110      	bne.n	8008afa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d102      	bne.n	8008ae4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ade:	7b7b      	ldrb	r3, [r7, #13]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d001      	beq.n	8008ae8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e069      	b.n	8008bbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008af8:	e031      	b.n	8008b5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d110      	bne.n	8008b22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d102      	bne.n	8008b0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b06:	7b3b      	ldrb	r3, [r7, #12]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d001      	beq.n	8008b10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e055      	b.n	8008bbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b20:	e01d      	b.n	8008b5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d108      	bne.n	8008b3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d105      	bne.n	8008b3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b2e:	7b7b      	ldrb	r3, [r7, #13]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d102      	bne.n	8008b3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b34:	7b3b      	ldrb	r3, [r7, #12]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d001      	beq.n	8008b3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e03e      	b.n	8008bbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2202      	movs	r2, #2
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_TIM_Encoder_Start+0xc4>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d008      	beq.n	8008b7c <HAL_TIM_Encoder_Start+0xd4>
 8008b6a:	e00f      	b.n	8008b8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2201      	movs	r2, #1
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fd99 	bl	80096ac <TIM_CCxChannelCmd>
      break;
 8008b7a:	e016      	b.n	8008baa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2201      	movs	r2, #1
 8008b82:	2104      	movs	r1, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fd91 	bl	80096ac <TIM_CCxChannelCmd>
      break;
 8008b8a:	e00e      	b.n	8008baa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2201      	movs	r2, #1
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fd89 	bl	80096ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	2104      	movs	r1, #4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fd82 	bl	80096ac <TIM_CCxChannelCmd>
      break;
 8008ba8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0201 	orr.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d122      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d11b      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0202 	mvn.w	r2, #2
 8008bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa78 	bl	80090fc <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa6b 	bl	80090ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fa7a 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d122      	bne.n	8008c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d11b      	bne.n	8008c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f06f 0204 	mvn.w	r2, #4
 8008c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa4e 	bl	80090fc <HAL_TIM_IC_CaptureCallback>
 8008c60:	e005      	b.n	8008c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa41 	bl	80090ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa50 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d122      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0208 	mvn.w	r2, #8
 8008c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa24 	bl	80090fc <HAL_TIM_IC_CaptureCallback>
 8008cb4:	e005      	b.n	8008cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa17 	bl	80090ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fa26 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0310 	and.w	r3, r3, #16
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d122      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d11b      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0210 	mvn.w	r2, #16
 8008cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9fa 	bl	80090fc <HAL_TIM_IC_CaptureCallback>
 8008d08:	e005      	b.n	8008d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f9ed 	bl	80090ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f9fc 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10e      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d107      	bne.n	8008d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0201 	mvn.w	r2, #1
 8008d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f9c8 	bl	80090d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b80      	cmp	r3, #128	; 0x80
 8008d54:	d10e      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b80      	cmp	r3, #128	; 0x80
 8008d62:	d107      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fd86 	bl	8009880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7e:	2b40      	cmp	r3, #64	; 0x40
 8008d80:	d10e      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b40      	cmp	r3, #64	; 0x40
 8008d8e:	d107      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f9c0 	bl	8009120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d10e      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d107      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0220 	mvn.w	r2, #32
 8008dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fd51 	bl	800986e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e0ac      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b0c      	cmp	r3, #12
 8008dfa:	f200 809f 	bhi.w	8008f3c <HAL_TIM_PWM_ConfigChannel+0x168>
 8008dfe:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e39 	.word	0x08008e39
 8008e08:	08008f3d 	.word	0x08008f3d
 8008e0c:	08008f3d 	.word	0x08008f3d
 8008e10:	08008f3d 	.word	0x08008f3d
 8008e14:	08008e79 	.word	0x08008e79
 8008e18:	08008f3d 	.word	0x08008f3d
 8008e1c:	08008f3d 	.word	0x08008f3d
 8008e20:	08008f3d 	.word	0x08008f3d
 8008e24:	08008ebb 	.word	0x08008ebb
 8008e28:	08008f3d 	.word	0x08008f3d
 8008e2c:	08008f3d 	.word	0x08008f3d
 8008e30:	08008f3d 	.word	0x08008f3d
 8008e34:	08008efb 	.word	0x08008efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f9f2 	bl	8009228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0208 	orr.w	r2, r2, #8
 8008e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0204 	bic.w	r2, r2, #4
 8008e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6999      	ldr	r1, [r3, #24]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	619a      	str	r2, [r3, #24]
      break;
 8008e76:	e062      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fa42 	bl	8009308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699a      	ldr	r2, [r3, #24]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6999      	ldr	r1, [r3, #24]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	021a      	lsls	r2, r3, #8
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	619a      	str	r2, [r3, #24]
      break;
 8008eb8:	e041      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fa95 	bl	80093f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69da      	ldr	r2, [r3, #28]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0204 	bic.w	r2, r2, #4
 8008ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69d9      	ldr	r1, [r3, #28]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	61da      	str	r2, [r3, #28]
      break;
 8008ef8:	e021      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fae9 	bl	80094d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69da      	ldr	r2, [r3, #28]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69d9      	ldr	r1, [r3, #28]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	021a      	lsls	r2, r3, #8
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	61da      	str	r2, [r3, #28]
      break;
 8008f3a:	e000      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_TIM_ConfigClockSource+0x18>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e0b3      	b.n	80090d0 <HAL_TIM_ConfigClockSource+0x180>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa0:	d03e      	beq.n	8009020 <HAL_TIM_ConfigClockSource+0xd0>
 8008fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa6:	f200 8087 	bhi.w	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fae:	f000 8085 	beq.w	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb6:	d87f      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fb8:	2b70      	cmp	r3, #112	; 0x70
 8008fba:	d01a      	beq.n	8008ff2 <HAL_TIM_ConfigClockSource+0xa2>
 8008fbc:	2b70      	cmp	r3, #112	; 0x70
 8008fbe:	d87b      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fc0:	2b60      	cmp	r3, #96	; 0x60
 8008fc2:	d050      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x116>
 8008fc4:	2b60      	cmp	r3, #96	; 0x60
 8008fc6:	d877      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fc8:	2b50      	cmp	r3, #80	; 0x50
 8008fca:	d03c      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0xf6>
 8008fcc:	2b50      	cmp	r3, #80	; 0x50
 8008fce:	d873      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d058      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x136>
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d86f      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fd8:	2b30      	cmp	r3, #48	; 0x30
 8008fda:	d064      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x156>
 8008fdc:	2b30      	cmp	r3, #48	; 0x30
 8008fde:	d86b      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	d060      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x156>
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d867      	bhi.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d05c      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x156>
 8008fec:	2b10      	cmp	r3, #16
 8008fee:	d05a      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008ff0:	e062      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6899      	ldr	r1, [r3, #8]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f000 fb34 	bl	800966e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009014:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	609a      	str	r2, [r3, #8]
      break;
 800901e:	e04e      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6899      	ldr	r1, [r3, #8]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f000 fb1d 	bl	800966e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009042:	609a      	str	r2, [r3, #8]
      break;
 8009044:	e03b      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6859      	ldr	r1, [r3, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	461a      	mov	r2, r3
 8009054:	f000 fa94 	bl	8009580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2150      	movs	r1, #80	; 0x50
 800905e:	4618      	mov	r0, r3
 8009060:	f000 faeb 	bl	800963a <TIM_ITRx_SetConfig>
      break;
 8009064:	e02b      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6859      	ldr	r1, [r3, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	461a      	mov	r2, r3
 8009074:	f000 fab2 	bl	80095dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2160      	movs	r1, #96	; 0x60
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fadb 	bl	800963a <TIM_ITRx_SetConfig>
      break;
 8009084:	e01b      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6859      	ldr	r1, [r3, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	461a      	mov	r2, r3
 8009094:	f000 fa74 	bl	8009580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2140      	movs	r1, #64	; 0x40
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 facb 	bl	800963a <TIM_ITRx_SetConfig>
      break;
 80090a4:	e00b      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4619      	mov	r1, r3
 80090b0:	4610      	mov	r0, r2
 80090b2:	f000 fac2 	bl	800963a <TIM_ITRx_SetConfig>
        break;
 80090b6:	e002      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090b8:	bf00      	nop
 80090ba:	e000      	b.n	80090be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr

080090ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bc80      	pop	{r7}
 80090fa:	4770      	bx	lr

080090fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr

0800910e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	bc80      	pop	{r7}
 800911e:	4770      	bx	lr

08009120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
	...

08009134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a33      	ldr	r2, [pc, #204]	; (8009214 <TIM_Base_SetConfig+0xe0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d013      	beq.n	8009174 <TIM_Base_SetConfig+0x40>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a32      	ldr	r2, [pc, #200]	; (8009218 <TIM_Base_SetConfig+0xe4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00f      	beq.n	8009174 <TIM_Base_SetConfig+0x40>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915a:	d00b      	beq.n	8009174 <TIM_Base_SetConfig+0x40>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a2f      	ldr	r2, [pc, #188]	; (800921c <TIM_Base_SetConfig+0xe8>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d007      	beq.n	8009174 <TIM_Base_SetConfig+0x40>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a2e      	ldr	r2, [pc, #184]	; (8009220 <TIM_Base_SetConfig+0xec>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <TIM_Base_SetConfig+0x40>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a2d      	ldr	r2, [pc, #180]	; (8009224 <TIM_Base_SetConfig+0xf0>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d108      	bne.n	8009186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a22      	ldr	r2, [pc, #136]	; (8009214 <TIM_Base_SetConfig+0xe0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d013      	beq.n	80091b6 <TIM_Base_SetConfig+0x82>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a21      	ldr	r2, [pc, #132]	; (8009218 <TIM_Base_SetConfig+0xe4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00f      	beq.n	80091b6 <TIM_Base_SetConfig+0x82>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919c:	d00b      	beq.n	80091b6 <TIM_Base_SetConfig+0x82>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a1e      	ldr	r2, [pc, #120]	; (800921c <TIM_Base_SetConfig+0xe8>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d007      	beq.n	80091b6 <TIM_Base_SetConfig+0x82>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a1d      	ldr	r2, [pc, #116]	; (8009220 <TIM_Base_SetConfig+0xec>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d003      	beq.n	80091b6 <TIM_Base_SetConfig+0x82>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a1c      	ldr	r2, [pc, #112]	; (8009224 <TIM_Base_SetConfig+0xf0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d108      	bne.n	80091c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a09      	ldr	r2, [pc, #36]	; (8009214 <TIM_Base_SetConfig+0xe0>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_Base_SetConfig+0xc8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a08      	ldr	r2, [pc, #32]	; (8009218 <TIM_Base_SetConfig+0xe4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d103      	bne.n	8009204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	691a      	ldr	r2, [r3, #16]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	615a      	str	r2, [r3, #20]
}
 800920a:	bf00      	nop
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	bc80      	pop	{r7}
 8009212:	4770      	bx	lr
 8009214:	40012c00 	.word	0x40012c00
 8009218:	40013400 	.word	0x40013400
 800921c:	40000400 	.word	0x40000400
 8009220:	40000800 	.word	0x40000800
 8009224:	40000c00 	.word	0x40000c00

08009228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f023 0201 	bic.w	r2, r3, #1
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f023 0302 	bic.w	r3, r3, #2
 8009270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a20      	ldr	r2, [pc, #128]	; (8009300 <TIM_OC1_SetConfig+0xd8>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC1_SetConfig+0x64>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a1f      	ldr	r2, [pc, #124]	; (8009304 <TIM_OC1_SetConfig+0xdc>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d10c      	bne.n	80092a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f023 0308 	bic.w	r3, r3, #8
 8009292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f023 0304 	bic.w	r3, r3, #4
 80092a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a15      	ldr	r2, [pc, #84]	; (8009300 <TIM_OC1_SetConfig+0xd8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d003      	beq.n	80092b6 <TIM_OC1_SetConfig+0x8e>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a14      	ldr	r2, [pc, #80]	; (8009304 <TIM_OC1_SetConfig+0xdc>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d111      	bne.n	80092da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	621a      	str	r2, [r3, #32]
}
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	40012c00 	.word	0x40012c00
 8009304:	40013400 	.word	0x40013400

08009308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	f023 0210 	bic.w	r2, r3, #16
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800933e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f023 0320 	bic.w	r3, r3, #32
 8009352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a21      	ldr	r2, [pc, #132]	; (80093e8 <TIM_OC2_SetConfig+0xe0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d003      	beq.n	8009370 <TIM_OC2_SetConfig+0x68>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a20      	ldr	r2, [pc, #128]	; (80093ec <TIM_OC2_SetConfig+0xe4>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d10d      	bne.n	800938c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a16      	ldr	r2, [pc, #88]	; (80093e8 <TIM_OC2_SetConfig+0xe0>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d003      	beq.n	800939c <TIM_OC2_SetConfig+0x94>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a15      	ldr	r2, [pc, #84]	; (80093ec <TIM_OC2_SetConfig+0xe4>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d113      	bne.n	80093c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr
 80093e8:	40012c00 	.word	0x40012c00
 80093ec:	40013400 	.word	0x40013400

080093f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0303 	bic.w	r3, r3, #3
 8009426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	021b      	lsls	r3, r3, #8
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	4313      	orrs	r3, r2
 8009444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a21      	ldr	r2, [pc, #132]	; (80094d0 <TIM_OC3_SetConfig+0xe0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_OC3_SetConfig+0x66>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a20      	ldr	r2, [pc, #128]	; (80094d4 <TIM_OC3_SetConfig+0xe4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d10d      	bne.n	8009472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800945c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	4313      	orrs	r3, r2
 8009468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a16      	ldr	r2, [pc, #88]	; (80094d0 <TIM_OC3_SetConfig+0xe0>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d003      	beq.n	8009482 <TIM_OC3_SetConfig+0x92>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a15      	ldr	r2, [pc, #84]	; (80094d4 <TIM_OC3_SetConfig+0xe4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d113      	bne.n	80094aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	621a      	str	r2, [r3, #32]
}
 80094c4:	bf00      	nop
 80094c6:	371c      	adds	r7, #28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40012c00 	.word	0x40012c00
 80094d4:	40013400 	.word	0x40013400

080094d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800950e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	021b      	lsls	r3, r3, #8
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	031b      	lsls	r3, r3, #12
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a11      	ldr	r2, [pc, #68]	; (8009578 <TIM_OC4_SetConfig+0xa0>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_OC4_SetConfig+0x68>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a10      	ldr	r2, [pc, #64]	; (800957c <TIM_OC4_SetConfig+0xa4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d109      	bne.n	8009554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	019b      	lsls	r3, r3, #6
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	621a      	str	r2, [r3, #32]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	bc80      	pop	{r7}
 8009576:	4770      	bx	lr
 8009578:	40012c00 	.word	0x40012c00
 800957c:	40013400 	.word	0x40013400

08009580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f023 030a 	bic.w	r3, r3, #10
 80095bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	621a      	str	r2, [r3, #32]
}
 80095d2:	bf00      	nop
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bc80      	pop	{r7}
 80095da:	4770      	bx	lr

080095dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	f023 0210 	bic.w	r2, r3, #16
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009606:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	031b      	lsls	r3, r3, #12
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009618:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	621a      	str	r2, [r3, #32]
}
 8009630:	bf00      	nop
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr

0800963a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	f043 0307 	orr.w	r3, r3, #7
 800965c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	609a      	str	r2, [r3, #8]
}
 8009664:	bf00      	nop
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr

0800966e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800966e:	b480      	push	{r7}
 8009670:	b087      	sub	sp, #28
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	021a      	lsls	r2, r3, #8
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	431a      	orrs	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4313      	orrs	r3, r2
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	609a      	str	r2, [r3, #8]
}
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr

080096ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f003 031f 	and.w	r3, r3, #31
 80096be:	2201      	movs	r2, #1
 80096c0:	fa02 f303 	lsl.w	r3, r2, r3
 80096c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	43db      	mvns	r3, r3
 80096ce:	401a      	ands	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a1a      	ldr	r2, [r3, #32]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f003 031f 	and.w	r3, r3, #31
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	fa01 f303 	lsl.w	r3, r1, r3
 80096e4:	431a      	orrs	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009708:	2302      	movs	r3, #2
 800970a:	e050      	b.n	80097ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d018      	beq.n	8009782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a19      	ldr	r2, [pc, #100]	; (80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d013      	beq.n	8009782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009762:	d00e      	beq.n	8009782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d009      	beq.n	8009782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a14      	ldr	r2, [pc, #80]	; (80097c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d004      	beq.n	8009782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a12      	ldr	r2, [pc, #72]	; (80097c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d10c      	bne.n	800979c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4313      	orrs	r3, r2
 8009792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bc80      	pop	{r7}
 80097b6:	4770      	bx	lr
 80097b8:	40012c00 	.word	0x40012c00
 80097bc:	40013400 	.word	0x40013400
 80097c0:	40000400 	.word	0x40000400
 80097c4:	40000800 	.word	0x40000800
 80097c8:	40000c00 	.word	0x40000c00

080097cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e03d      	b.n	8009864 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	4313      	orrs	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	4313      	orrs	r3, r2
 8009818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4313      	orrs	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	bc80      	pop	{r7}
 800986c:	4770      	bx	lr

0800986e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr

08009880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	bc80      	pop	{r7}
 8009890:	4770      	bx	lr

08009892 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e03f      	b.n	8009924 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7fb fff9 	bl	80058b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2224      	movs	r2, #36	; 0x24
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fe24 	bl	800a524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695a      	ldr	r2, [r3, #20]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800990a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	4613      	mov	r3, r2
 800993a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b20      	cmp	r3, #32
 800994a:	d17c      	bne.n	8009a46 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <HAL_UART_Transmit+0x2c>
 8009952:	88fb      	ldrh	r3, [r7, #6]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e075      	b.n	8009a48 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <HAL_UART_Transmit+0x3e>
 8009966:	2302      	movs	r3, #2
 8009968:	e06e      	b.n	8009a48 <HAL_UART_Transmit+0x11c>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2221      	movs	r2, #33	; 0x21
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009980:	f7fc fe4e 	bl	8006620 <HAL_GetTick>
 8009984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	88fa      	ldrh	r2, [r7, #6]
 800998a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	d108      	bne.n	80099ae <HAL_UART_Transmit+0x82>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	e003      	b.n	80099b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80099be:	e02a      	b.n	8009a16 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2200      	movs	r2, #0
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 fb5c 	bl	800a088 <UART_WaitOnFlagUntilTimeout>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e036      	b.n	8009a48 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	3302      	adds	r3, #2
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e007      	b.n	8009a08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	781a      	ldrb	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	3301      	adds	r3, #1
 8009a06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1cf      	bne.n	80099c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2200      	movs	r2, #0
 8009a28:	2140      	movs	r1, #64	; 0x40
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fb2c 	bl	800a088 <UART_WaitOnFlagUntilTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e006      	b.n	8009a48 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e000      	b.n	8009a48 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009a46:	2302      	movs	r3, #2
  }
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d11d      	bne.n	8009aa6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <HAL_UART_Receive_IT+0x26>
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e016      	b.n	8009aa8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_UART_Receive_IT+0x38>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e00f      	b.n	8009aa8 <HAL_UART_Receive_IT+0x58>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fb3d 	bl	800a11c <UART_Start_Receive_IT>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	e000      	b.n	8009aa8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009aa6:	2302      	movs	r3, #2
  }
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	4613      	mov	r3, r2
 8009abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d11d      	bne.n	8009b06 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <HAL_UART_Receive_DMA+0x26>
 8009ad0:	88fb      	ldrh	r3, [r7, #6]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e016      	b.n	8009b08 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_UART_Receive_DMA+0x38>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e00f      	b.n	8009b08 <HAL_UART_Receive_DMA+0x58>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	461a      	mov	r2, r3
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fb47 	bl	800a190 <UART_Start_Receive_DMA>
 8009b02:	4603      	mov	r3, r0
 8009b04:	e000      	b.n	8009b08 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009b06:	2302      	movs	r3, #2
  }
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d13c      	bne.n	8009ba4 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e035      	b.n	8009ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d101      	bne.n	8009b48 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009b44:	2302      	movs	r3, #2
 8009b46:	e02e      	b.n	8009ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 fb17 	bl	800a190 <UART_Start_Receive_DMA>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d119      	bne.n	8009ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d113      	bne.n	8009b9c <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f042 0210 	orr.w	r2, r2, #16
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	e001      	b.n	8009ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	e000      	b.n	8009ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009ba4:	2302      	movs	r3, #2
  }
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	f003 030f 	and.w	r3, r3, #15
 8009bde:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10d      	bne.n	8009c02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <HAL_UART_IRQHandler+0x52>
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fbe8 	bl	800a3d0 <UART_Receive_IT>
      return;
 8009c00:	e17b      	b.n	8009efa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 80b1 	beq.w	8009d6c <HAL_UART_IRQHandler+0x1bc>
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <HAL_UART_IRQHandler+0x70>
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 80a6 	beq.w	8009d6c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <HAL_UART_IRQHandler+0x90>
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d005      	beq.n	8009c40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	f043 0201 	orr.w	r2, r3, #1
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <HAL_UART_IRQHandler+0xb0>
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c58:	f043 0202 	orr.w	r2, r3, #2
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <HAL_UART_IRQHandler+0xd0>
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c78:	f043 0204 	orr.w	r2, r3, #4
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	f003 0308 	and.w	r3, r3, #8
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00f      	beq.n	8009caa <HAL_UART_IRQHandler+0xfa>
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	f003 0320 	and.w	r3, r3, #32
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <HAL_UART_IRQHandler+0xee>
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d005      	beq.n	8009caa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f043 0208 	orr.w	r2, r3, #8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 811e 	beq.w	8009ef0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_UART_IRQHandler+0x11e>
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	f003 0320 	and.w	r3, r3, #32
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fb81 	bl	800a3d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bf14      	ite	ne
 8009cdc:	2301      	movne	r3, #1
 8009cde:	2300      	moveq	r3, #0
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d102      	bne.n	8009cf6 <HAL_UART_IRQHandler+0x146>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d031      	beq.n	8009d5a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fac3 	bl	800a282 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d023      	beq.n	8009d52 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695a      	ldr	r2, [r3, #20]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	4a76      	ldr	r2, [pc, #472]	; (8009f00 <HAL_UART_IRQHandler+0x350>)
 8009d28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fc fec2 	bl	8006ab8 <HAL_DMA_Abort_IT>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d016      	beq.n	8009d68 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d48:	e00e      	b.n	8009d68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fa fb7c 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d50:	e00a      	b.n	8009d68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7fa fb78 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d58:	e006      	b.n	8009d68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fa fb74 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009d66:	e0c3      	b.n	8009ef0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d68:	bf00      	nop
    return;
 8009d6a:	e0c1      	b.n	8009ef0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	f040 80a1 	bne.w	8009eb8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	f003 0310 	and.w	r3, r3, #16
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 809b 	beq.w	8009eb8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 8095 	beq.w	8009eb8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d04e      	beq.n	8009e50 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009dbc:	8a3b      	ldrh	r3, [r7, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 8098 	beq.w	8009ef4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dc8:	8a3a      	ldrh	r2, [r7, #16]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	f080 8092 	bcs.w	8009ef4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8a3a      	ldrh	r2, [r7, #16]
 8009dd4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d02b      	beq.n	8009e38 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68da      	ldr	r2, [r3, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	695a      	ldr	r2, [r3, #20]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0201 	bic.w	r2, r2, #1
 8009dfe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	695a      	ldr	r2, [r3, #20]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e0e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2220      	movs	r2, #32
 8009e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0210 	bic.w	r2, r2, #16
 8009e2c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fc fe05 	bl	8006a42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7fc f8cd 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009e4e:	e051      	b.n	8009ef4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d047      	beq.n	8009ef8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009e68:	8a7b      	ldrh	r3, [r7, #18]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d044      	beq.n	8009ef8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e7c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695a      	ldr	r2, [r3, #20]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0201 	bic.w	r2, r2, #1
 8009e8c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f022 0210 	bic.w	r2, r2, #16
 8009eaa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009eac:	8a7b      	ldrh	r3, [r7, #18]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7fc f899 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009eb6:	e01f      	b.n	8009ef8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x324>
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fa18 	bl	800a302 <UART_Transmit_IT>
    return;
 8009ed2:	e012      	b.n	8009efa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <HAL_UART_IRQHandler+0x34a>
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d008      	beq.n	8009efa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa59 	bl	800a3a0 <UART_EndTransmit_IT>
    return;
 8009eee:	e004      	b.n	8009efa <HAL_UART_IRQHandler+0x34a>
    return;
 8009ef0:	bf00      	nop
 8009ef2:	e002      	b.n	8009efa <HAL_UART_IRQHandler+0x34a>
      return;
 8009ef4:	bf00      	nop
 8009ef6:	e000      	b.n	8009efa <HAL_UART_IRQHandler+0x34a>
      return;
 8009ef8:	bf00      	nop
  }
}
 8009efa:	3728      	adds	r7, #40	; 0x28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	0800a2db 	.word	0x0800a2db

08009f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bc80      	pop	{r7}
 8009f14:	4770      	bx	lr

08009f16 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f1e:	bf00      	nop
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bc80      	pop	{r7}
 8009f26:	4770      	bx	lr

08009f28 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d12a      	bne.n	8009f9a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68da      	ldr	r2, [r3, #12]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f58:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695a      	ldr	r2, [r3, #20]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0201 	bic.w	r2, r2, #1
 8009f68:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	695a      	ldr	r2, [r3, #20]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f78:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d107      	bne.n	8009f9a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0210 	bic.w	r2, r2, #16
 8009f98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d106      	bne.n	8009fb0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7fc f81d 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fae:	e002      	b.n	8009fb6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7fa fa2d 	bl	8004410 <HAL_UART_RxCpltCallback>
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d108      	bne.n	8009fe6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fd8:	085b      	lsrs	r3, r3, #1
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4619      	mov	r1, r3
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fc f802 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fe4:	e002      	b.n	8009fec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff ff95 	bl	8009f16 <HAL_UART_RxHalfCpltCallback>
}
 8009fec:	bf00      	nop
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a010:	2b00      	cmp	r3, #0
 800a012:	bf14      	ite	ne
 800a014:	2301      	movne	r3, #1
 800a016:	2300      	moveq	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b21      	cmp	r3, #33	; 0x21
 800a026:	d108      	bne.n	800a03a <UART_DMAError+0x46>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d005      	beq.n	800a03a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2200      	movs	r2, #0
 800a032:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a034:	68b8      	ldr	r0, [r7, #8]
 800a036:	f000 f90f 	bl	800a258 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	bf14      	ite	ne
 800a048:	2301      	movne	r3, #1
 800a04a:	2300      	moveq	r3, #0
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b22      	cmp	r3, #34	; 0x22
 800a05a:	d108      	bne.n	800a06e <UART_DMAError+0x7a>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a068:	68b8      	ldr	r0, [r7, #8]
 800a06a:	f000 f90a 	bl	800a282 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	f043 0210 	orr.w	r2, r3, #16
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a07a:	68b8      	ldr	r0, [r7, #8]
 800a07c:	f7fa f9e4 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	4613      	mov	r3, r2
 800a096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a098:	e02c      	b.n	800a0f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a0:	d028      	beq.n	800a0f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d007      	beq.n	800a0b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0a8:	f7fc faba 	bl	8006620 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d21d      	bcs.n	800a0f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	695a      	ldr	r2, [r3, #20]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0201 	bic.w	r2, r2, #1
 800a0d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e00f      	b.n	800a114 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	429a      	cmp	r2, r3
 800a102:	bf0c      	ite	eq
 800a104:	2301      	moveq	r3, #1
 800a106:	2300      	movne	r3, #0
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d0c3      	beq.n	800a09a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	88fa      	ldrh	r2, [r7, #6]
 800a134:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	88fa      	ldrh	r2, [r7, #6]
 800a13a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2222      	movs	r2, #34	; 0x22
 800a146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68da      	ldr	r2, [r3, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a160:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695a      	ldr	r2, [r3, #20]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f042 0201 	orr.w	r2, r2, #1
 800a170:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0220 	orr.w	r2, r2, #32
 800a180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
	...

0800a190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	88fa      	ldrh	r2, [r7, #6]
 800a1a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2222      	movs	r2, #34	; 0x22
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	4a23      	ldr	r2, [pc, #140]	; (800a24c <UART_Start_Receive_DMA+0xbc>)
 800a1be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	4a22      	ldr	r2, [pc, #136]	; (800a250 <UART_Start_Receive_DMA+0xc0>)
 800a1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1cc:	4a21      	ldr	r2, [pc, #132]	; (800a254 <UART_Start_Receive_DMA+0xc4>)
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	88fb      	ldrh	r3, [r7, #6]
 800a1f0:	f7fc fbc8 	bl	8006984 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68da      	ldr	r2, [r3, #12]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a220:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	695a      	ldr	r2, [r3, #20]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0201 	orr.w	r2, r2, #1
 800a230:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	695a      	ldr	r2, [r3, #20]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a240:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	08009f29 	.word	0x08009f29
 800a250:	08009fbf 	.word	0x08009fbf
 800a254:	08009ff5 	.word	0x08009ff5

0800a258 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a26e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bc80      	pop	{r7}
 800a280:	4770      	bx	lr

0800a282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a282:	b480      	push	{r7}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a298:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	695a      	ldr	r2, [r3, #20]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 0201 	bic.w	r2, r2, #1
 800a2a8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d107      	bne.n	800a2c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0210 	bic.w	r2, r2, #16
 800a2c0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr

0800a2da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7fa f8a7 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2fa:	bf00      	nop
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b21      	cmp	r3, #33	; 0x21
 800a314:	d13e      	bne.n	800a394 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a31e:	d114      	bne.n	800a34a <UART_Transmit_IT+0x48>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d110      	bne.n	800a34a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a33c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	1c9a      	adds	r2, r3, #2
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	621a      	str	r2, [r3, #32]
 800a348:	e008      	b.n	800a35c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	1c59      	adds	r1, r3, #1
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6211      	str	r1, [r2, #32]
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	b29b      	uxth	r3, r3
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4619      	mov	r1, r3
 800a36a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10f      	bne.n	800a390 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a37e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a38e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a394:	2302      	movs	r3, #2
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr

0800a3a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2220      	movs	r2, #32
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff fd9f 	bl	8009f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b22      	cmp	r3, #34	; 0x22
 800a3e2:	f040 8099 	bne.w	800a518 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ee:	d117      	bne.n	800a420 <UART_Receive_IT+0x50>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d113      	bne.n	800a420 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a400:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40e:	b29a      	uxth	r2, r3
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a418:	1c9a      	adds	r2, r3, #2
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	629a      	str	r2, [r3, #40]	; 0x28
 800a41e:	e026      	b.n	800a46e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a424:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a426:	2300      	movs	r3, #0
 800a428:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a432:	d007      	beq.n	800a444 <UART_Receive_IT+0x74>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <UART_Receive_IT+0x82>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d106      	bne.n	800a452 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	701a      	strb	r2, [r3, #0]
 800a450:	e008      	b.n	800a464 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a472:	b29b      	uxth	r3, r3
 800a474:	3b01      	subs	r3, #1
 800a476:	b29b      	uxth	r3, r3
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	4619      	mov	r1, r3
 800a47c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d148      	bne.n	800a514 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0220 	bic.w	r2, r2, #32
 800a490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68da      	ldr	r2, [r3, #12]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	695a      	ldr	r2, [r3, #20]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d123      	bne.n	800a50a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0210 	bic.w	r2, r2, #16
 800a4d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0310 	and.w	r3, r3, #16
 800a4e2:	2b10      	cmp	r3, #16
 800a4e4:	d10a      	bne.n	800a4fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7fb fd70 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
 800a508:	e002      	b.n	800a510 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7f9 ff80 	bl	8004410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	e002      	b.n	800a51a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	e000      	b.n	800a51a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a518:	2302      	movs	r3, #2
  }
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68da      	ldr	r2, [r3, #12]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	430a      	orrs	r2, r1
 800a540:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	4313      	orrs	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a55e:	f023 030c 	bic.w	r3, r3, #12
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	430b      	orrs	r3, r1
 800a56a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a2c      	ldr	r2, [pc, #176]	; (800a638 <UART_SetConfig+0x114>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d103      	bne.n	800a594 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a58c:	f7fd fff6 	bl	800857c <HAL_RCC_GetPCLK2Freq>
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	e002      	b.n	800a59a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a594:	f7fd ffde 	bl	8008554 <HAL_RCC_GetPCLK1Freq>
 800a598:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009a      	lsls	r2, r3, #2
 800a5a4:	441a      	add	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b0:	4a22      	ldr	r2, [pc, #136]	; (800a63c <UART_SetConfig+0x118>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	095b      	lsrs	r3, r3, #5
 800a5b8:	0119      	lsls	r1, r3, #4
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009a      	lsls	r2, r3, #2
 800a5c4:	441a      	add	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <UART_SetConfig+0x118>)
 800a5d2:	fba3 0302 	umull	r0, r3, r3, r2
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	2064      	movs	r0, #100	; 0x64
 800a5da:	fb00 f303 	mul.w	r3, r0, r3
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	011b      	lsls	r3, r3, #4
 800a5e2:	3332      	adds	r3, #50	; 0x32
 800a5e4:	4a15      	ldr	r2, [pc, #84]	; (800a63c <UART_SetConfig+0x118>)
 800a5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ea:	095b      	lsrs	r3, r3, #5
 800a5ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5f0:	4419      	add	r1, r3
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009a      	lsls	r2, r3, #2
 800a5fc:	441a      	add	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	fbb2 f2f3 	udiv	r2, r2, r3
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <UART_SetConfig+0x118>)
 800a60a:	fba3 0302 	umull	r0, r3, r3, r2
 800a60e:	095b      	lsrs	r3, r3, #5
 800a610:	2064      	movs	r0, #100	; 0x64
 800a612:	fb00 f303 	mul.w	r3, r0, r3
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	011b      	lsls	r3, r3, #4
 800a61a:	3332      	adds	r3, #50	; 0x32
 800a61c:	4a07      	ldr	r2, [pc, #28]	; (800a63c <UART_SetConfig+0x118>)
 800a61e:	fba2 2303 	umull	r2, r3, r2, r3
 800a622:	095b      	lsrs	r3, r3, #5
 800a624:	f003 020f 	and.w	r2, r3, #15
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	440a      	add	r2, r1
 800a62e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	40013800 	.word	0x40013800
 800a63c:	51eb851f 	.word	0x51eb851f

0800a640 <__assert_func>:
 800a640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a642:	4614      	mov	r4, r2
 800a644:	461a      	mov	r2, r3
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <__assert_func+0x2c>)
 800a648:	4605      	mov	r5, r0
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68d8      	ldr	r0, [r3, #12]
 800a64e:	b14c      	cbz	r4, 800a664 <__assert_func+0x24>
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <__assert_func+0x30>)
 800a652:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a656:	9100      	str	r1, [sp, #0]
 800a658:	462b      	mov	r3, r5
 800a65a:	4906      	ldr	r1, [pc, #24]	; (800a674 <__assert_func+0x34>)
 800a65c:	f000 f814 	bl	800a688 <fiprintf>
 800a660:	f000 fc2c 	bl	800aebc <abort>
 800a664:	4b04      	ldr	r3, [pc, #16]	; (800a678 <__assert_func+0x38>)
 800a666:	461c      	mov	r4, r3
 800a668:	e7f3      	b.n	800a652 <__assert_func+0x12>
 800a66a:	bf00      	nop
 800a66c:	20000024 	.word	0x20000024
 800a670:	0800d4cc 	.word	0x0800d4cc
 800a674:	0800d4d9 	.word	0x0800d4d9
 800a678:	0800d507 	.word	0x0800d507

0800a67c <__errno>:
 800a67c:	4b01      	ldr	r3, [pc, #4]	; (800a684 <__errno+0x8>)
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000024 	.word	0x20000024

0800a688 <fiprintf>:
 800a688:	b40e      	push	{r1, r2, r3}
 800a68a:	b503      	push	{r0, r1, lr}
 800a68c:	4601      	mov	r1, r0
 800a68e:	ab03      	add	r3, sp, #12
 800a690:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <fiprintf+0x20>)
 800a692:	f853 2b04 	ldr.w	r2, [r3], #4
 800a696:	6800      	ldr	r0, [r0, #0]
 800a698:	9301      	str	r3, [sp, #4]
 800a69a:	f000 f869 	bl	800a770 <_vfiprintf_r>
 800a69e:	b002      	add	sp, #8
 800a6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a4:	b003      	add	sp, #12
 800a6a6:	4770      	bx	lr
 800a6a8:	20000024 	.word	0x20000024

0800a6ac <__libc_init_array>:
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	2600      	movs	r6, #0
 800a6b0:	4d0c      	ldr	r5, [pc, #48]	; (800a6e4 <__libc_init_array+0x38>)
 800a6b2:	4c0d      	ldr	r4, [pc, #52]	; (800a6e8 <__libc_init_array+0x3c>)
 800a6b4:	1b64      	subs	r4, r4, r5
 800a6b6:	10a4      	asrs	r4, r4, #2
 800a6b8:	42a6      	cmp	r6, r4
 800a6ba:	d109      	bne.n	800a6d0 <__libc_init_array+0x24>
 800a6bc:	f002 fbb2 	bl	800ce24 <_init>
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	4d0a      	ldr	r5, [pc, #40]	; (800a6ec <__libc_init_array+0x40>)
 800a6c4:	4c0a      	ldr	r4, [pc, #40]	; (800a6f0 <__libc_init_array+0x44>)
 800a6c6:	1b64      	subs	r4, r4, r5
 800a6c8:	10a4      	asrs	r4, r4, #2
 800a6ca:	42a6      	cmp	r6, r4
 800a6cc:	d105      	bne.n	800a6da <__libc_init_array+0x2e>
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d4:	4798      	blx	r3
 800a6d6:	3601      	adds	r6, #1
 800a6d8:	e7ee      	b.n	800a6b8 <__libc_init_array+0xc>
 800a6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6de:	4798      	blx	r3
 800a6e0:	3601      	adds	r6, #1
 800a6e2:	e7f2      	b.n	800a6ca <__libc_init_array+0x1e>
 800a6e4:	0800d7b8 	.word	0x0800d7b8
 800a6e8:	0800d7b8 	.word	0x0800d7b8
 800a6ec:	0800d7b8 	.word	0x0800d7b8
 800a6f0:	0800d7bc 	.word	0x0800d7bc

0800a6f4 <memcpy>:
 800a6f4:	440a      	add	r2, r1
 800a6f6:	4291      	cmp	r1, r2
 800a6f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6fc:	d100      	bne.n	800a700 <memcpy+0xc>
 800a6fe:	4770      	bx	lr
 800a700:	b510      	push	{r4, lr}
 800a702:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a706:	4291      	cmp	r1, r2
 800a708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a70c:	d1f9      	bne.n	800a702 <memcpy+0xe>
 800a70e:	bd10      	pop	{r4, pc}

0800a710 <memset>:
 800a710:	4603      	mov	r3, r0
 800a712:	4402      	add	r2, r0
 800a714:	4293      	cmp	r3, r2
 800a716:	d100      	bne.n	800a71a <memset+0xa>
 800a718:	4770      	bx	lr
 800a71a:	f803 1b01 	strb.w	r1, [r3], #1
 800a71e:	e7f9      	b.n	800a714 <memset+0x4>

0800a720 <__sfputc_r>:
 800a720:	6893      	ldr	r3, [r2, #8]
 800a722:	b410      	push	{r4}
 800a724:	3b01      	subs	r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	6093      	str	r3, [r2, #8]
 800a72a:	da07      	bge.n	800a73c <__sfputc_r+0x1c>
 800a72c:	6994      	ldr	r4, [r2, #24]
 800a72e:	42a3      	cmp	r3, r4
 800a730:	db01      	blt.n	800a736 <__sfputc_r+0x16>
 800a732:	290a      	cmp	r1, #10
 800a734:	d102      	bne.n	800a73c <__sfputc_r+0x1c>
 800a736:	bc10      	pop	{r4}
 800a738:	f000 bb00 	b.w	800ad3c <__swbuf_r>
 800a73c:	6813      	ldr	r3, [r2, #0]
 800a73e:	1c58      	adds	r0, r3, #1
 800a740:	6010      	str	r0, [r2, #0]
 800a742:	7019      	strb	r1, [r3, #0]
 800a744:	4608      	mov	r0, r1
 800a746:	bc10      	pop	{r4}
 800a748:	4770      	bx	lr

0800a74a <__sfputs_r>:
 800a74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	4614      	mov	r4, r2
 800a752:	18d5      	adds	r5, r2, r3
 800a754:	42ac      	cmp	r4, r5
 800a756:	d101      	bne.n	800a75c <__sfputs_r+0x12>
 800a758:	2000      	movs	r0, #0
 800a75a:	e007      	b.n	800a76c <__sfputs_r+0x22>
 800a75c:	463a      	mov	r2, r7
 800a75e:	4630      	mov	r0, r6
 800a760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a764:	f7ff ffdc 	bl	800a720 <__sfputc_r>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d1f3      	bne.n	800a754 <__sfputs_r+0xa>
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a770 <_vfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	460d      	mov	r5, r1
 800a776:	4614      	mov	r4, r2
 800a778:	4698      	mov	r8, r3
 800a77a:	4606      	mov	r6, r0
 800a77c:	b09d      	sub	sp, #116	; 0x74
 800a77e:	b118      	cbz	r0, 800a788 <_vfiprintf_r+0x18>
 800a780:	6983      	ldr	r3, [r0, #24]
 800a782:	b90b      	cbnz	r3, 800a788 <_vfiprintf_r+0x18>
 800a784:	f000 fcb8 	bl	800b0f8 <__sinit>
 800a788:	4b89      	ldr	r3, [pc, #548]	; (800a9b0 <_vfiprintf_r+0x240>)
 800a78a:	429d      	cmp	r5, r3
 800a78c:	d11b      	bne.n	800a7c6 <_vfiprintf_r+0x56>
 800a78e:	6875      	ldr	r5, [r6, #4]
 800a790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a792:	07d9      	lsls	r1, r3, #31
 800a794:	d405      	bmi.n	800a7a2 <_vfiprintf_r+0x32>
 800a796:	89ab      	ldrh	r3, [r5, #12]
 800a798:	059a      	lsls	r2, r3, #22
 800a79a:	d402      	bmi.n	800a7a2 <_vfiprintf_r+0x32>
 800a79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a79e:	f000 fd49 	bl	800b234 <__retarget_lock_acquire_recursive>
 800a7a2:	89ab      	ldrh	r3, [r5, #12]
 800a7a4:	071b      	lsls	r3, r3, #28
 800a7a6:	d501      	bpl.n	800a7ac <_vfiprintf_r+0x3c>
 800a7a8:	692b      	ldr	r3, [r5, #16]
 800a7aa:	b9eb      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x78>
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f000 fb16 	bl	800ade0 <__swsetup_r>
 800a7b4:	b1c0      	cbz	r0, 800a7e8 <_vfiprintf_r+0x78>
 800a7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b8:	07dc      	lsls	r4, r3, #31
 800a7ba:	d50e      	bpl.n	800a7da <_vfiprintf_r+0x6a>
 800a7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c0:	b01d      	add	sp, #116	; 0x74
 800a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c6:	4b7b      	ldr	r3, [pc, #492]	; (800a9b4 <_vfiprintf_r+0x244>)
 800a7c8:	429d      	cmp	r5, r3
 800a7ca:	d101      	bne.n	800a7d0 <_vfiprintf_r+0x60>
 800a7cc:	68b5      	ldr	r5, [r6, #8]
 800a7ce:	e7df      	b.n	800a790 <_vfiprintf_r+0x20>
 800a7d0:	4b79      	ldr	r3, [pc, #484]	; (800a9b8 <_vfiprintf_r+0x248>)
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	bf08      	it	eq
 800a7d6:	68f5      	ldreq	r5, [r6, #12]
 800a7d8:	e7da      	b.n	800a790 <_vfiprintf_r+0x20>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	0598      	lsls	r0, r3, #22
 800a7de:	d4ed      	bmi.n	800a7bc <_vfiprintf_r+0x4c>
 800a7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e2:	f000 fd28 	bl	800b236 <__retarget_lock_release_recursive>
 800a7e6:	e7e9      	b.n	800a7bc <_vfiprintf_r+0x4c>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7f2:	2330      	movs	r3, #48	; 0x30
 800a7f4:	f04f 0901 	mov.w	r9, #1
 800a7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a9bc <_vfiprintf_r+0x24c>
 800a800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a804:	4623      	mov	r3, r4
 800a806:	469a      	mov	sl, r3
 800a808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80c:	b10a      	cbz	r2, 800a812 <_vfiprintf_r+0xa2>
 800a80e:	2a25      	cmp	r2, #37	; 0x25
 800a810:	d1f9      	bne.n	800a806 <_vfiprintf_r+0x96>
 800a812:	ebba 0b04 	subs.w	fp, sl, r4
 800a816:	d00b      	beq.n	800a830 <_vfiprintf_r+0xc0>
 800a818:	465b      	mov	r3, fp
 800a81a:	4622      	mov	r2, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	4630      	mov	r0, r6
 800a820:	f7ff ff93 	bl	800a74a <__sfputs_r>
 800a824:	3001      	adds	r0, #1
 800a826:	f000 80aa 	beq.w	800a97e <_vfiprintf_r+0x20e>
 800a82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a82c:	445a      	add	r2, fp
 800a82e:	9209      	str	r2, [sp, #36]	; 0x24
 800a830:	f89a 3000 	ldrb.w	r3, [sl]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80a2 	beq.w	800a97e <_vfiprintf_r+0x20e>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a844:	f10a 0a01 	add.w	sl, sl, #1
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a850:	931a      	str	r3, [sp, #104]	; 0x68
 800a852:	4654      	mov	r4, sl
 800a854:	2205      	movs	r2, #5
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4858      	ldr	r0, [pc, #352]	; (800a9bc <_vfiprintf_r+0x24c>)
 800a85c:	f000 fd52 	bl	800b304 <memchr>
 800a860:	9a04      	ldr	r2, [sp, #16]
 800a862:	b9d8      	cbnz	r0, 800a89c <_vfiprintf_r+0x12c>
 800a864:	06d1      	lsls	r1, r2, #27
 800a866:	bf44      	itt	mi
 800a868:	2320      	movmi	r3, #32
 800a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a86e:	0713      	lsls	r3, r2, #28
 800a870:	bf44      	itt	mi
 800a872:	232b      	movmi	r3, #43	; 0x2b
 800a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a878:	f89a 3000 	ldrb.w	r3, [sl]
 800a87c:	2b2a      	cmp	r3, #42	; 0x2a
 800a87e:	d015      	beq.n	800a8ac <_vfiprintf_r+0x13c>
 800a880:	4654      	mov	r4, sl
 800a882:	2000      	movs	r0, #0
 800a884:	f04f 0c0a 	mov.w	ip, #10
 800a888:	9a07      	ldr	r2, [sp, #28]
 800a88a:	4621      	mov	r1, r4
 800a88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a890:	3b30      	subs	r3, #48	; 0x30
 800a892:	2b09      	cmp	r3, #9
 800a894:	d94e      	bls.n	800a934 <_vfiprintf_r+0x1c4>
 800a896:	b1b0      	cbz	r0, 800a8c6 <_vfiprintf_r+0x156>
 800a898:	9207      	str	r2, [sp, #28]
 800a89a:	e014      	b.n	800a8c6 <_vfiprintf_r+0x156>
 800a89c:	eba0 0308 	sub.w	r3, r0, r8
 800a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	46a2      	mov	sl, r4
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	e7d2      	b.n	800a852 <_vfiprintf_r+0xe2>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d19      	adds	r1, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9103      	str	r1, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfbb      	ittet	lt
 800a8b8:	425b      	neglt	r3, r3
 800a8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a8be:	9307      	strge	r3, [sp, #28]
 800a8c0:	9307      	strlt	r3, [sp, #28]
 800a8c2:	bfb8      	it	lt
 800a8c4:	9204      	strlt	r2, [sp, #16]
 800a8c6:	7823      	ldrb	r3, [r4, #0]
 800a8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ca:	d10c      	bne.n	800a8e6 <_vfiprintf_r+0x176>
 800a8cc:	7863      	ldrb	r3, [r4, #1]
 800a8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d0:	d135      	bne.n	800a93e <_vfiprintf_r+0x1ce>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	3402      	adds	r4, #2
 800a8d6:	1d1a      	adds	r2, r3, #4
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	9203      	str	r2, [sp, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bfb8      	it	lt
 800a8e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8e4:	9305      	str	r3, [sp, #20]
 800a8e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a9c0 <_vfiprintf_r+0x250>
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	7821      	ldrb	r1, [r4, #0]
 800a8f0:	f000 fd08 	bl	800b304 <memchr>
 800a8f4:	b140      	cbz	r0, 800a908 <_vfiprintf_r+0x198>
 800a8f6:	2340      	movs	r3, #64	; 0x40
 800a8f8:	eba0 000a 	sub.w	r0, r0, sl
 800a8fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a900:	9b04      	ldr	r3, [sp, #16]
 800a902:	3401      	adds	r4, #1
 800a904:	4303      	orrs	r3, r0
 800a906:	9304      	str	r3, [sp, #16]
 800a908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90c:	2206      	movs	r2, #6
 800a90e:	482d      	ldr	r0, [pc, #180]	; (800a9c4 <_vfiprintf_r+0x254>)
 800a910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a914:	f000 fcf6 	bl	800b304 <memchr>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d03f      	beq.n	800a99c <_vfiprintf_r+0x22c>
 800a91c:	4b2a      	ldr	r3, [pc, #168]	; (800a9c8 <_vfiprintf_r+0x258>)
 800a91e:	bb1b      	cbnz	r3, 800a968 <_vfiprintf_r+0x1f8>
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	3307      	adds	r3, #7
 800a924:	f023 0307 	bic.w	r3, r3, #7
 800a928:	3308      	adds	r3, #8
 800a92a:	9303      	str	r3, [sp, #12]
 800a92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92e:	443b      	add	r3, r7
 800a930:	9309      	str	r3, [sp, #36]	; 0x24
 800a932:	e767      	b.n	800a804 <_vfiprintf_r+0x94>
 800a934:	460c      	mov	r4, r1
 800a936:	2001      	movs	r0, #1
 800a938:	fb0c 3202 	mla	r2, ip, r2, r3
 800a93c:	e7a5      	b.n	800a88a <_vfiprintf_r+0x11a>
 800a93e:	2300      	movs	r3, #0
 800a940:	f04f 0c0a 	mov.w	ip, #10
 800a944:	4619      	mov	r1, r3
 800a946:	3401      	adds	r4, #1
 800a948:	9305      	str	r3, [sp, #20]
 800a94a:	4620      	mov	r0, r4
 800a94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a950:	3a30      	subs	r2, #48	; 0x30
 800a952:	2a09      	cmp	r2, #9
 800a954:	d903      	bls.n	800a95e <_vfiprintf_r+0x1ee>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0c5      	beq.n	800a8e6 <_vfiprintf_r+0x176>
 800a95a:	9105      	str	r1, [sp, #20]
 800a95c:	e7c3      	b.n	800a8e6 <_vfiprintf_r+0x176>
 800a95e:	4604      	mov	r4, r0
 800a960:	2301      	movs	r3, #1
 800a962:	fb0c 2101 	mla	r1, ip, r1, r2
 800a966:	e7f0      	b.n	800a94a <_vfiprintf_r+0x1da>
 800a968:	ab03      	add	r3, sp, #12
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	462a      	mov	r2, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <_vfiprintf_r+0x25c>)
 800a972:	a904      	add	r1, sp, #16
 800a974:	f3af 8000 	nop.w
 800a978:	4607      	mov	r7, r0
 800a97a:	1c78      	adds	r0, r7, #1
 800a97c:	d1d6      	bne.n	800a92c <_vfiprintf_r+0x1bc>
 800a97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a980:	07d9      	lsls	r1, r3, #31
 800a982:	d405      	bmi.n	800a990 <_vfiprintf_r+0x220>
 800a984:	89ab      	ldrh	r3, [r5, #12]
 800a986:	059a      	lsls	r2, r3, #22
 800a988:	d402      	bmi.n	800a990 <_vfiprintf_r+0x220>
 800a98a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a98c:	f000 fc53 	bl	800b236 <__retarget_lock_release_recursive>
 800a990:	89ab      	ldrh	r3, [r5, #12]
 800a992:	065b      	lsls	r3, r3, #25
 800a994:	f53f af12 	bmi.w	800a7bc <_vfiprintf_r+0x4c>
 800a998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a99a:	e711      	b.n	800a7c0 <_vfiprintf_r+0x50>
 800a99c:	ab03      	add	r3, sp, #12
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <_vfiprintf_r+0x25c>)
 800a9a6:	a904      	add	r1, sp, #16
 800a9a8:	f000 f882 	bl	800aab0 <_printf_i>
 800a9ac:	e7e4      	b.n	800a978 <_vfiprintf_r+0x208>
 800a9ae:	bf00      	nop
 800a9b0:	0800d560 	.word	0x0800d560
 800a9b4:	0800d580 	.word	0x0800d580
 800a9b8:	0800d540 	.word	0x0800d540
 800a9bc:	0800d50c 	.word	0x0800d50c
 800a9c0:	0800d512 	.word	0x0800d512
 800a9c4:	0800d516 	.word	0x0800d516
 800a9c8:	00000000 	.word	0x00000000
 800a9cc:	0800a74b 	.word	0x0800a74b

0800a9d0 <_printf_common>:
 800a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d4:	4616      	mov	r6, r2
 800a9d6:	4699      	mov	r9, r3
 800a9d8:	688a      	ldr	r2, [r1, #8]
 800a9da:	690b      	ldr	r3, [r1, #16]
 800a9dc:	4607      	mov	r7, r0
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	bfb8      	it	lt
 800a9e2:	4613      	movlt	r3, r2
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9f0:	b10a      	cbz	r2, 800a9f6 <_printf_common+0x26>
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	6033      	str	r3, [r6, #0]
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	0699      	lsls	r1, r3, #26
 800a9fa:	bf42      	ittt	mi
 800a9fc:	6833      	ldrmi	r3, [r6, #0]
 800a9fe:	3302      	addmi	r3, #2
 800aa00:	6033      	strmi	r3, [r6, #0]
 800aa02:	6825      	ldr	r5, [r4, #0]
 800aa04:	f015 0506 	ands.w	r5, r5, #6
 800aa08:	d106      	bne.n	800aa18 <_printf_common+0x48>
 800aa0a:	f104 0a19 	add.w	sl, r4, #25
 800aa0e:	68e3      	ldr	r3, [r4, #12]
 800aa10:	6832      	ldr	r2, [r6, #0]
 800aa12:	1a9b      	subs	r3, r3, r2
 800aa14:	42ab      	cmp	r3, r5
 800aa16:	dc28      	bgt.n	800aa6a <_printf_common+0x9a>
 800aa18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa1c:	1e13      	subs	r3, r2, #0
 800aa1e:	6822      	ldr	r2, [r4, #0]
 800aa20:	bf18      	it	ne
 800aa22:	2301      	movne	r3, #1
 800aa24:	0692      	lsls	r2, r2, #26
 800aa26:	d42d      	bmi.n	800aa84 <_printf_common+0xb4>
 800aa28:	4649      	mov	r1, r9
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa30:	47c0      	blx	r8
 800aa32:	3001      	adds	r0, #1
 800aa34:	d020      	beq.n	800aa78 <_printf_common+0xa8>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	68e5      	ldr	r5, [r4, #12]
 800aa3a:	f003 0306 	and.w	r3, r3, #6
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	bf18      	it	ne
 800aa42:	2500      	movne	r5, #0
 800aa44:	6832      	ldr	r2, [r6, #0]
 800aa46:	f04f 0600 	mov.w	r6, #0
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	bf08      	it	eq
 800aa4e:	1aad      	subeq	r5, r5, r2
 800aa50:	6922      	ldr	r2, [r4, #16]
 800aa52:	bf08      	it	eq
 800aa54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	bfc4      	itt	gt
 800aa5c:	1a9b      	subgt	r3, r3, r2
 800aa5e:	18ed      	addgt	r5, r5, r3
 800aa60:	341a      	adds	r4, #26
 800aa62:	42b5      	cmp	r5, r6
 800aa64:	d11a      	bne.n	800aa9c <_printf_common+0xcc>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e008      	b.n	800aa7c <_printf_common+0xac>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4638      	mov	r0, r7
 800aa72:	47c0      	blx	r8
 800aa74:	3001      	adds	r0, #1
 800aa76:	d103      	bne.n	800aa80 <_printf_common+0xb0>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa80:	3501      	adds	r5, #1
 800aa82:	e7c4      	b.n	800aa0e <_printf_common+0x3e>
 800aa84:	2030      	movs	r0, #48	; 0x30
 800aa86:	18e1      	adds	r1, r4, r3
 800aa88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa92:	4422      	add	r2, r4
 800aa94:	3302      	adds	r3, #2
 800aa96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa9a:	e7c5      	b.n	800aa28 <_printf_common+0x58>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d0e6      	beq.n	800aa78 <_printf_common+0xa8>
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7d9      	b.n	800aa62 <_printf_common+0x92>
	...

0800aab0 <_printf_i>:
 800aab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	7e0f      	ldrb	r7, [r1, #24]
 800aab6:	4691      	mov	r9, r2
 800aab8:	2f78      	cmp	r7, #120	; 0x78
 800aaba:	4680      	mov	r8, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	469a      	mov	sl, r3
 800aac0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aac6:	d807      	bhi.n	800aad8 <_printf_i+0x28>
 800aac8:	2f62      	cmp	r7, #98	; 0x62
 800aaca:	d80a      	bhi.n	800aae2 <_printf_i+0x32>
 800aacc:	2f00      	cmp	r7, #0
 800aace:	f000 80d9 	beq.w	800ac84 <_printf_i+0x1d4>
 800aad2:	2f58      	cmp	r7, #88	; 0x58
 800aad4:	f000 80a4 	beq.w	800ac20 <_printf_i+0x170>
 800aad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aae0:	e03a      	b.n	800ab58 <_printf_i+0xa8>
 800aae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aae6:	2b15      	cmp	r3, #21
 800aae8:	d8f6      	bhi.n	800aad8 <_printf_i+0x28>
 800aaea:	a101      	add	r1, pc, #4	; (adr r1, 800aaf0 <_printf_i+0x40>)
 800aaec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800aad9 	.word	0x0800aad9
 800aafc:	0800aad9 	.word	0x0800aad9
 800ab00:	0800aad9 	.word	0x0800aad9
 800ab04:	0800aad9 	.word	0x0800aad9
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800aad9 	.word	0x0800aad9
 800ab10:	0800aad9 	.word	0x0800aad9
 800ab14:	0800aad9 	.word	0x0800aad9
 800ab18:	0800aad9 	.word	0x0800aad9
 800ab1c:	0800ac6b 	.word	0x0800ac6b
 800ab20:	0800ab8d 	.word	0x0800ab8d
 800ab24:	0800ac4d 	.word	0x0800ac4d
 800ab28:	0800aad9 	.word	0x0800aad9
 800ab2c:	0800aad9 	.word	0x0800aad9
 800ab30:	0800ac8d 	.word	0x0800ac8d
 800ab34:	0800aad9 	.word	0x0800aad9
 800ab38:	0800ab8d 	.word	0x0800ab8d
 800ab3c:	0800aad9 	.word	0x0800aad9
 800ab40:	0800aad9 	.word	0x0800aad9
 800ab44:	0800ac55 	.word	0x0800ac55
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e0a4      	b.n	800aca6 <_printf_i+0x1f6>
 800ab5c:	6820      	ldr	r0, [r4, #0]
 800ab5e:	6829      	ldr	r1, [r5, #0]
 800ab60:	0606      	lsls	r6, r0, #24
 800ab62:	f101 0304 	add.w	r3, r1, #4
 800ab66:	d50a      	bpl.n	800ab7e <_printf_i+0xce>
 800ab68:	680e      	ldr	r6, [r1, #0]
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	2e00      	cmp	r6, #0
 800ab6e:	da03      	bge.n	800ab78 <_printf_i+0xc8>
 800ab70:	232d      	movs	r3, #45	; 0x2d
 800ab72:	4276      	negs	r6, r6
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	230a      	movs	r3, #10
 800ab7a:	485e      	ldr	r0, [pc, #376]	; (800acf4 <_printf_i+0x244>)
 800ab7c:	e019      	b.n	800abb2 <_printf_i+0x102>
 800ab7e:	680e      	ldr	r6, [r1, #0]
 800ab80:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	bf18      	it	ne
 800ab88:	b236      	sxthne	r6, r6
 800ab8a:	e7ef      	b.n	800ab6c <_printf_i+0xbc>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	6820      	ldr	r0, [r4, #0]
 800ab90:	1d19      	adds	r1, r3, #4
 800ab92:	6029      	str	r1, [r5, #0]
 800ab94:	0601      	lsls	r1, r0, #24
 800ab96:	d501      	bpl.n	800ab9c <_printf_i+0xec>
 800ab98:	681e      	ldr	r6, [r3, #0]
 800ab9a:	e002      	b.n	800aba2 <_printf_i+0xf2>
 800ab9c:	0646      	lsls	r6, r0, #25
 800ab9e:	d5fb      	bpl.n	800ab98 <_printf_i+0xe8>
 800aba0:	881e      	ldrh	r6, [r3, #0]
 800aba2:	2f6f      	cmp	r7, #111	; 0x6f
 800aba4:	bf0c      	ite	eq
 800aba6:	2308      	moveq	r3, #8
 800aba8:	230a      	movne	r3, #10
 800abaa:	4852      	ldr	r0, [pc, #328]	; (800acf4 <_printf_i+0x244>)
 800abac:	2100      	movs	r1, #0
 800abae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abb2:	6865      	ldr	r5, [r4, #4]
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	bfa8      	it	ge
 800abb8:	6821      	ldrge	r1, [r4, #0]
 800abba:	60a5      	str	r5, [r4, #8]
 800abbc:	bfa4      	itt	ge
 800abbe:	f021 0104 	bicge.w	r1, r1, #4
 800abc2:	6021      	strge	r1, [r4, #0]
 800abc4:	b90e      	cbnz	r6, 800abca <_printf_i+0x11a>
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	d04d      	beq.n	800ac66 <_printf_i+0x1b6>
 800abca:	4615      	mov	r5, r2
 800abcc:	fbb6 f1f3 	udiv	r1, r6, r3
 800abd0:	fb03 6711 	mls	r7, r3, r1, r6
 800abd4:	5dc7      	ldrb	r7, [r0, r7]
 800abd6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abda:	4637      	mov	r7, r6
 800abdc:	42bb      	cmp	r3, r7
 800abde:	460e      	mov	r6, r1
 800abe0:	d9f4      	bls.n	800abcc <_printf_i+0x11c>
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d10b      	bne.n	800abfe <_printf_i+0x14e>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	07de      	lsls	r6, r3, #31
 800abea:	d508      	bpl.n	800abfe <_printf_i+0x14e>
 800abec:	6923      	ldr	r3, [r4, #16]
 800abee:	6861      	ldr	r1, [r4, #4]
 800abf0:	4299      	cmp	r1, r3
 800abf2:	bfde      	ittt	le
 800abf4:	2330      	movle	r3, #48	; 0x30
 800abf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abfe:	1b52      	subs	r2, r2, r5
 800ac00:	6122      	str	r2, [r4, #16]
 800ac02:	464b      	mov	r3, r9
 800ac04:	4621      	mov	r1, r4
 800ac06:	4640      	mov	r0, r8
 800ac08:	f8cd a000 	str.w	sl, [sp]
 800ac0c:	aa03      	add	r2, sp, #12
 800ac0e:	f7ff fedf 	bl	800a9d0 <_printf_common>
 800ac12:	3001      	adds	r0, #1
 800ac14:	d14c      	bne.n	800acb0 <_printf_i+0x200>
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1a:	b004      	add	sp, #16
 800ac1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac20:	4834      	ldr	r0, [pc, #208]	; (800acf4 <_printf_i+0x244>)
 800ac22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac26:	6829      	ldr	r1, [r5, #0]
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac2e:	6029      	str	r1, [r5, #0]
 800ac30:	061d      	lsls	r5, r3, #24
 800ac32:	d514      	bpl.n	800ac5e <_printf_i+0x1ae>
 800ac34:	07df      	lsls	r7, r3, #31
 800ac36:	bf44      	itt	mi
 800ac38:	f043 0320 	orrmi.w	r3, r3, #32
 800ac3c:	6023      	strmi	r3, [r4, #0]
 800ac3e:	b91e      	cbnz	r6, 800ac48 <_printf_i+0x198>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	f023 0320 	bic.w	r3, r3, #32
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	2310      	movs	r3, #16
 800ac4a:	e7af      	b.n	800abac <_printf_i+0xfc>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	f043 0320 	orr.w	r3, r3, #32
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	2378      	movs	r3, #120	; 0x78
 800ac56:	4828      	ldr	r0, [pc, #160]	; (800acf8 <_printf_i+0x248>)
 800ac58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac5c:	e7e3      	b.n	800ac26 <_printf_i+0x176>
 800ac5e:	0659      	lsls	r1, r3, #25
 800ac60:	bf48      	it	mi
 800ac62:	b2b6      	uxthmi	r6, r6
 800ac64:	e7e6      	b.n	800ac34 <_printf_i+0x184>
 800ac66:	4615      	mov	r5, r2
 800ac68:	e7bb      	b.n	800abe2 <_printf_i+0x132>
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	6826      	ldr	r6, [r4, #0]
 800ac6e:	1d18      	adds	r0, r3, #4
 800ac70:	6961      	ldr	r1, [r4, #20]
 800ac72:	6028      	str	r0, [r5, #0]
 800ac74:	0635      	lsls	r5, r6, #24
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	d501      	bpl.n	800ac7e <_printf_i+0x1ce>
 800ac7a:	6019      	str	r1, [r3, #0]
 800ac7c:	e002      	b.n	800ac84 <_printf_i+0x1d4>
 800ac7e:	0670      	lsls	r0, r6, #25
 800ac80:	d5fb      	bpl.n	800ac7a <_printf_i+0x1ca>
 800ac82:	8019      	strh	r1, [r3, #0]
 800ac84:	2300      	movs	r3, #0
 800ac86:	4615      	mov	r5, r2
 800ac88:	6123      	str	r3, [r4, #16]
 800ac8a:	e7ba      	b.n	800ac02 <_printf_i+0x152>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	2100      	movs	r1, #0
 800ac90:	1d1a      	adds	r2, r3, #4
 800ac92:	602a      	str	r2, [r5, #0]
 800ac94:	681d      	ldr	r5, [r3, #0]
 800ac96:	6862      	ldr	r2, [r4, #4]
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f000 fb33 	bl	800b304 <memchr>
 800ac9e:	b108      	cbz	r0, 800aca4 <_printf_i+0x1f4>
 800aca0:	1b40      	subs	r0, r0, r5
 800aca2:	6060      	str	r0, [r4, #4]
 800aca4:	6863      	ldr	r3, [r4, #4]
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	2300      	movs	r3, #0
 800acaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acae:	e7a8      	b.n	800ac02 <_printf_i+0x152>
 800acb0:	462a      	mov	r2, r5
 800acb2:	4649      	mov	r1, r9
 800acb4:	4640      	mov	r0, r8
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	47d0      	blx	sl
 800acba:	3001      	adds	r0, #1
 800acbc:	d0ab      	beq.n	800ac16 <_printf_i+0x166>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	079b      	lsls	r3, r3, #30
 800acc2:	d413      	bmi.n	800acec <_printf_i+0x23c>
 800acc4:	68e0      	ldr	r0, [r4, #12]
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	4298      	cmp	r0, r3
 800acca:	bfb8      	it	lt
 800accc:	4618      	movlt	r0, r3
 800acce:	e7a4      	b.n	800ac1a <_printf_i+0x16a>
 800acd0:	2301      	movs	r3, #1
 800acd2:	4632      	mov	r2, r6
 800acd4:	4649      	mov	r1, r9
 800acd6:	4640      	mov	r0, r8
 800acd8:	47d0      	blx	sl
 800acda:	3001      	adds	r0, #1
 800acdc:	d09b      	beq.n	800ac16 <_printf_i+0x166>
 800acde:	3501      	adds	r5, #1
 800ace0:	68e3      	ldr	r3, [r4, #12]
 800ace2:	9903      	ldr	r1, [sp, #12]
 800ace4:	1a5b      	subs	r3, r3, r1
 800ace6:	42ab      	cmp	r3, r5
 800ace8:	dcf2      	bgt.n	800acd0 <_printf_i+0x220>
 800acea:	e7eb      	b.n	800acc4 <_printf_i+0x214>
 800acec:	2500      	movs	r5, #0
 800acee:	f104 0619 	add.w	r6, r4, #25
 800acf2:	e7f5      	b.n	800ace0 <_printf_i+0x230>
 800acf4:	0800d51d 	.word	0x0800d51d
 800acf8:	0800d52e 	.word	0x0800d52e

0800acfc <siprintf>:
 800acfc:	b40e      	push	{r1, r2, r3}
 800acfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad02:	b500      	push	{lr}
 800ad04:	b09c      	sub	sp, #112	; 0x70
 800ad06:	ab1d      	add	r3, sp, #116	; 0x74
 800ad08:	9002      	str	r0, [sp, #8]
 800ad0a:	9006      	str	r0, [sp, #24]
 800ad0c:	9107      	str	r1, [sp, #28]
 800ad0e:	9104      	str	r1, [sp, #16]
 800ad10:	4808      	ldr	r0, [pc, #32]	; (800ad34 <siprintf+0x38>)
 800ad12:	4909      	ldr	r1, [pc, #36]	; (800ad38 <siprintf+0x3c>)
 800ad14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad18:	9105      	str	r1, [sp, #20]
 800ad1a:	6800      	ldr	r0, [r0, #0]
 800ad1c:	a902      	add	r1, sp, #8
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	f000 fc7e 	bl	800b620 <_svfiprintf_r>
 800ad24:	2200      	movs	r2, #0
 800ad26:	9b02      	ldr	r3, [sp, #8]
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	b01c      	add	sp, #112	; 0x70
 800ad2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad30:	b003      	add	sp, #12
 800ad32:	4770      	bx	lr
 800ad34:	20000024 	.word	0x20000024
 800ad38:	ffff0208 	.word	0xffff0208

0800ad3c <__swbuf_r>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	460e      	mov	r6, r1
 800ad40:	4614      	mov	r4, r2
 800ad42:	4605      	mov	r5, r0
 800ad44:	b118      	cbz	r0, 800ad4e <__swbuf_r+0x12>
 800ad46:	6983      	ldr	r3, [r0, #24]
 800ad48:	b90b      	cbnz	r3, 800ad4e <__swbuf_r+0x12>
 800ad4a:	f000 f9d5 	bl	800b0f8 <__sinit>
 800ad4e:	4b21      	ldr	r3, [pc, #132]	; (800add4 <__swbuf_r+0x98>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	d12b      	bne.n	800adac <__swbuf_r+0x70>
 800ad54:	686c      	ldr	r4, [r5, #4]
 800ad56:	69a3      	ldr	r3, [r4, #24]
 800ad58:	60a3      	str	r3, [r4, #8]
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	071a      	lsls	r2, r3, #28
 800ad5e:	d52f      	bpl.n	800adc0 <__swbuf_r+0x84>
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	b36b      	cbz	r3, 800adc0 <__swbuf_r+0x84>
 800ad64:	6923      	ldr	r3, [r4, #16]
 800ad66:	6820      	ldr	r0, [r4, #0]
 800ad68:	b2f6      	uxtb	r6, r6
 800ad6a:	1ac0      	subs	r0, r0, r3
 800ad6c:	6963      	ldr	r3, [r4, #20]
 800ad6e:	4637      	mov	r7, r6
 800ad70:	4283      	cmp	r3, r0
 800ad72:	dc04      	bgt.n	800ad7e <__swbuf_r+0x42>
 800ad74:	4621      	mov	r1, r4
 800ad76:	4628      	mov	r0, r5
 800ad78:	f000 f92a 	bl	800afd0 <_fflush_r>
 800ad7c:	bb30      	cbnz	r0, 800adcc <__swbuf_r+0x90>
 800ad7e:	68a3      	ldr	r3, [r4, #8]
 800ad80:	3001      	adds	r0, #1
 800ad82:	3b01      	subs	r3, #1
 800ad84:	60a3      	str	r3, [r4, #8]
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	6022      	str	r2, [r4, #0]
 800ad8c:	701e      	strb	r6, [r3, #0]
 800ad8e:	6963      	ldr	r3, [r4, #20]
 800ad90:	4283      	cmp	r3, r0
 800ad92:	d004      	beq.n	800ad9e <__swbuf_r+0x62>
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	07db      	lsls	r3, r3, #31
 800ad98:	d506      	bpl.n	800ada8 <__swbuf_r+0x6c>
 800ad9a:	2e0a      	cmp	r6, #10
 800ad9c:	d104      	bne.n	800ada8 <__swbuf_r+0x6c>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4628      	mov	r0, r5
 800ada2:	f000 f915 	bl	800afd0 <_fflush_r>
 800ada6:	b988      	cbnz	r0, 800adcc <__swbuf_r+0x90>
 800ada8:	4638      	mov	r0, r7
 800adaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <__swbuf_r+0x9c>)
 800adae:	429c      	cmp	r4, r3
 800adb0:	d101      	bne.n	800adb6 <__swbuf_r+0x7a>
 800adb2:	68ac      	ldr	r4, [r5, #8]
 800adb4:	e7cf      	b.n	800ad56 <__swbuf_r+0x1a>
 800adb6:	4b09      	ldr	r3, [pc, #36]	; (800addc <__swbuf_r+0xa0>)
 800adb8:	429c      	cmp	r4, r3
 800adba:	bf08      	it	eq
 800adbc:	68ec      	ldreq	r4, [r5, #12]
 800adbe:	e7ca      	b.n	800ad56 <__swbuf_r+0x1a>
 800adc0:	4621      	mov	r1, r4
 800adc2:	4628      	mov	r0, r5
 800adc4:	f000 f80c 	bl	800ade0 <__swsetup_r>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d0cb      	beq.n	800ad64 <__swbuf_r+0x28>
 800adcc:	f04f 37ff 	mov.w	r7, #4294967295
 800add0:	e7ea      	b.n	800ada8 <__swbuf_r+0x6c>
 800add2:	bf00      	nop
 800add4:	0800d560 	.word	0x0800d560
 800add8:	0800d580 	.word	0x0800d580
 800addc:	0800d540 	.word	0x0800d540

0800ade0 <__swsetup_r>:
 800ade0:	4b32      	ldr	r3, [pc, #200]	; (800aeac <__swsetup_r+0xcc>)
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	681d      	ldr	r5, [r3, #0]
 800ade6:	4606      	mov	r6, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	b125      	cbz	r5, 800adf6 <__swsetup_r+0x16>
 800adec:	69ab      	ldr	r3, [r5, #24]
 800adee:	b913      	cbnz	r3, 800adf6 <__swsetup_r+0x16>
 800adf0:	4628      	mov	r0, r5
 800adf2:	f000 f981 	bl	800b0f8 <__sinit>
 800adf6:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <__swsetup_r+0xd0>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	d10f      	bne.n	800ae1c <__swsetup_r+0x3c>
 800adfc:	686c      	ldr	r4, [r5, #4]
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae04:	0719      	lsls	r1, r3, #28
 800ae06:	d42c      	bmi.n	800ae62 <__swsetup_r+0x82>
 800ae08:	06dd      	lsls	r5, r3, #27
 800ae0a:	d411      	bmi.n	800ae30 <__swsetup_r+0x50>
 800ae0c:	2309      	movs	r3, #9
 800ae0e:	6033      	str	r3, [r6, #0]
 800ae10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e03e      	b.n	800ae9a <__swsetup_r+0xba>
 800ae1c:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <__swsetup_r+0xd4>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	d101      	bne.n	800ae26 <__swsetup_r+0x46>
 800ae22:	68ac      	ldr	r4, [r5, #8]
 800ae24:	e7eb      	b.n	800adfe <__swsetup_r+0x1e>
 800ae26:	4b24      	ldr	r3, [pc, #144]	; (800aeb8 <__swsetup_r+0xd8>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	bf08      	it	eq
 800ae2c:	68ec      	ldreq	r4, [r5, #12]
 800ae2e:	e7e6      	b.n	800adfe <__swsetup_r+0x1e>
 800ae30:	0758      	lsls	r0, r3, #29
 800ae32:	d512      	bpl.n	800ae5a <__swsetup_r+0x7a>
 800ae34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae36:	b141      	cbz	r1, 800ae4a <__swsetup_r+0x6a>
 800ae38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae3c:	4299      	cmp	r1, r3
 800ae3e:	d002      	beq.n	800ae46 <__swsetup_r+0x66>
 800ae40:	4630      	mov	r0, r6
 800ae42:	f000 fa87 	bl	800b354 <_free_r>
 800ae46:	2300      	movs	r3, #0
 800ae48:	6363      	str	r3, [r4, #52]	; 0x34
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	2300      	movs	r3, #0
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f043 0308 	orr.w	r3, r3, #8
 800ae60:	81a3      	strh	r3, [r4, #12]
 800ae62:	6923      	ldr	r3, [r4, #16]
 800ae64:	b94b      	cbnz	r3, 800ae7a <__swsetup_r+0x9a>
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae70:	d003      	beq.n	800ae7a <__swsetup_r+0x9a>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4630      	mov	r0, r6
 800ae76:	f000 fa05 	bl	800b284 <__smakebuf_r>
 800ae7a:	89a0      	ldrh	r0, [r4, #12]
 800ae7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae80:	f010 0301 	ands.w	r3, r0, #1
 800ae84:	d00a      	beq.n	800ae9c <__swsetup_r+0xbc>
 800ae86:	2300      	movs	r3, #0
 800ae88:	60a3      	str	r3, [r4, #8]
 800ae8a:	6963      	ldr	r3, [r4, #20]
 800ae8c:	425b      	negs	r3, r3
 800ae8e:	61a3      	str	r3, [r4, #24]
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	b943      	cbnz	r3, 800aea6 <__swsetup_r+0xc6>
 800ae94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae98:	d1ba      	bne.n	800ae10 <__swsetup_r+0x30>
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	0781      	lsls	r1, r0, #30
 800ae9e:	bf58      	it	pl
 800aea0:	6963      	ldrpl	r3, [r4, #20]
 800aea2:	60a3      	str	r3, [r4, #8]
 800aea4:	e7f4      	b.n	800ae90 <__swsetup_r+0xb0>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e7f7      	b.n	800ae9a <__swsetup_r+0xba>
 800aeaa:	bf00      	nop
 800aeac:	20000024 	.word	0x20000024
 800aeb0:	0800d560 	.word	0x0800d560
 800aeb4:	0800d580 	.word	0x0800d580
 800aeb8:	0800d540 	.word	0x0800d540

0800aebc <abort>:
 800aebc:	2006      	movs	r0, #6
 800aebe:	b508      	push	{r3, lr}
 800aec0:	f000 fce6 	bl	800b890 <raise>
 800aec4:	2001      	movs	r0, #1
 800aec6:	f7fa fe70 	bl	8005baa <_exit>
	...

0800aecc <__sflush_r>:
 800aecc:	898a      	ldrh	r2, [r1, #12]
 800aece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed0:	4605      	mov	r5, r0
 800aed2:	0710      	lsls	r0, r2, #28
 800aed4:	460c      	mov	r4, r1
 800aed6:	d457      	bmi.n	800af88 <__sflush_r+0xbc>
 800aed8:	684b      	ldr	r3, [r1, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	dc04      	bgt.n	800aee8 <__sflush_r+0x1c>
 800aede:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dc01      	bgt.n	800aee8 <__sflush_r+0x1c>
 800aee4:	2000      	movs	r0, #0
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeea:	2e00      	cmp	r6, #0
 800aeec:	d0fa      	beq.n	800aee4 <__sflush_r+0x18>
 800aeee:	2300      	movs	r3, #0
 800aef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aef4:	682f      	ldr	r7, [r5, #0]
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	d032      	beq.n	800af60 <__sflush_r+0x94>
 800aefa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	075a      	lsls	r2, r3, #29
 800af00:	d505      	bpl.n	800af0e <__sflush_r+0x42>
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	1ac0      	subs	r0, r0, r3
 800af06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af08:	b10b      	cbz	r3, 800af0e <__sflush_r+0x42>
 800af0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af0c:	1ac0      	subs	r0, r0, r3
 800af0e:	2300      	movs	r3, #0
 800af10:	4602      	mov	r2, r0
 800af12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af14:	4628      	mov	r0, r5
 800af16:	6a21      	ldr	r1, [r4, #32]
 800af18:	47b0      	blx	r6
 800af1a:	1c43      	adds	r3, r0, #1
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	d106      	bne.n	800af2e <__sflush_r+0x62>
 800af20:	6829      	ldr	r1, [r5, #0]
 800af22:	291d      	cmp	r1, #29
 800af24:	d82c      	bhi.n	800af80 <__sflush_r+0xb4>
 800af26:	4a29      	ldr	r2, [pc, #164]	; (800afcc <__sflush_r+0x100>)
 800af28:	40ca      	lsrs	r2, r1
 800af2a:	07d6      	lsls	r6, r2, #31
 800af2c:	d528      	bpl.n	800af80 <__sflush_r+0xb4>
 800af2e:	2200      	movs	r2, #0
 800af30:	6062      	str	r2, [r4, #4]
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	04d9      	lsls	r1, r3, #19
 800af36:	6022      	str	r2, [r4, #0]
 800af38:	d504      	bpl.n	800af44 <__sflush_r+0x78>
 800af3a:	1c42      	adds	r2, r0, #1
 800af3c:	d101      	bne.n	800af42 <__sflush_r+0x76>
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	b903      	cbnz	r3, 800af44 <__sflush_r+0x78>
 800af42:	6560      	str	r0, [r4, #84]	; 0x54
 800af44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af46:	602f      	str	r7, [r5, #0]
 800af48:	2900      	cmp	r1, #0
 800af4a:	d0cb      	beq.n	800aee4 <__sflush_r+0x18>
 800af4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af50:	4299      	cmp	r1, r3
 800af52:	d002      	beq.n	800af5a <__sflush_r+0x8e>
 800af54:	4628      	mov	r0, r5
 800af56:	f000 f9fd 	bl	800b354 <_free_r>
 800af5a:	2000      	movs	r0, #0
 800af5c:	6360      	str	r0, [r4, #52]	; 0x34
 800af5e:	e7c2      	b.n	800aee6 <__sflush_r+0x1a>
 800af60:	6a21      	ldr	r1, [r4, #32]
 800af62:	2301      	movs	r3, #1
 800af64:	4628      	mov	r0, r5
 800af66:	47b0      	blx	r6
 800af68:	1c41      	adds	r1, r0, #1
 800af6a:	d1c7      	bne.n	800aefc <__sflush_r+0x30>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c4      	beq.n	800aefc <__sflush_r+0x30>
 800af72:	2b1d      	cmp	r3, #29
 800af74:	d001      	beq.n	800af7a <__sflush_r+0xae>
 800af76:	2b16      	cmp	r3, #22
 800af78:	d101      	bne.n	800af7e <__sflush_r+0xb2>
 800af7a:	602f      	str	r7, [r5, #0]
 800af7c:	e7b2      	b.n	800aee4 <__sflush_r+0x18>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	e7ae      	b.n	800aee6 <__sflush_r+0x1a>
 800af88:	690f      	ldr	r7, [r1, #16]
 800af8a:	2f00      	cmp	r7, #0
 800af8c:	d0aa      	beq.n	800aee4 <__sflush_r+0x18>
 800af8e:	0793      	lsls	r3, r2, #30
 800af90:	bf18      	it	ne
 800af92:	2300      	movne	r3, #0
 800af94:	680e      	ldr	r6, [r1, #0]
 800af96:	bf08      	it	eq
 800af98:	694b      	ldreq	r3, [r1, #20]
 800af9a:	1bf6      	subs	r6, r6, r7
 800af9c:	600f      	str	r7, [r1, #0]
 800af9e:	608b      	str	r3, [r1, #8]
 800afa0:	2e00      	cmp	r6, #0
 800afa2:	dd9f      	ble.n	800aee4 <__sflush_r+0x18>
 800afa4:	4633      	mov	r3, r6
 800afa6:	463a      	mov	r2, r7
 800afa8:	4628      	mov	r0, r5
 800afaa:	6a21      	ldr	r1, [r4, #32]
 800afac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800afb0:	47e0      	blx	ip
 800afb2:	2800      	cmp	r0, #0
 800afb4:	dc06      	bgt.n	800afc4 <__sflush_r+0xf8>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	e790      	b.n	800aee6 <__sflush_r+0x1a>
 800afc4:	4407      	add	r7, r0
 800afc6:	1a36      	subs	r6, r6, r0
 800afc8:	e7ea      	b.n	800afa0 <__sflush_r+0xd4>
 800afca:	bf00      	nop
 800afcc:	20400001 	.word	0x20400001

0800afd0 <_fflush_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	690b      	ldr	r3, [r1, #16]
 800afd4:	4605      	mov	r5, r0
 800afd6:	460c      	mov	r4, r1
 800afd8:	b913      	cbnz	r3, 800afe0 <_fflush_r+0x10>
 800afda:	2500      	movs	r5, #0
 800afdc:	4628      	mov	r0, r5
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	b118      	cbz	r0, 800afea <_fflush_r+0x1a>
 800afe2:	6983      	ldr	r3, [r0, #24]
 800afe4:	b90b      	cbnz	r3, 800afea <_fflush_r+0x1a>
 800afe6:	f000 f887 	bl	800b0f8 <__sinit>
 800afea:	4b14      	ldr	r3, [pc, #80]	; (800b03c <_fflush_r+0x6c>)
 800afec:	429c      	cmp	r4, r3
 800afee:	d11b      	bne.n	800b028 <_fflush_r+0x58>
 800aff0:	686c      	ldr	r4, [r5, #4]
 800aff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0ef      	beq.n	800afda <_fflush_r+0xa>
 800affa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800affc:	07d0      	lsls	r0, r2, #31
 800affe:	d404      	bmi.n	800b00a <_fflush_r+0x3a>
 800b000:	0599      	lsls	r1, r3, #22
 800b002:	d402      	bmi.n	800b00a <_fflush_r+0x3a>
 800b004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b006:	f000 f915 	bl	800b234 <__retarget_lock_acquire_recursive>
 800b00a:	4628      	mov	r0, r5
 800b00c:	4621      	mov	r1, r4
 800b00e:	f7ff ff5d 	bl	800aecc <__sflush_r>
 800b012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b014:	4605      	mov	r5, r0
 800b016:	07da      	lsls	r2, r3, #31
 800b018:	d4e0      	bmi.n	800afdc <_fflush_r+0xc>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	059b      	lsls	r3, r3, #22
 800b01e:	d4dd      	bmi.n	800afdc <_fflush_r+0xc>
 800b020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b022:	f000 f908 	bl	800b236 <__retarget_lock_release_recursive>
 800b026:	e7d9      	b.n	800afdc <_fflush_r+0xc>
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <_fflush_r+0x70>)
 800b02a:	429c      	cmp	r4, r3
 800b02c:	d101      	bne.n	800b032 <_fflush_r+0x62>
 800b02e:	68ac      	ldr	r4, [r5, #8]
 800b030:	e7df      	b.n	800aff2 <_fflush_r+0x22>
 800b032:	4b04      	ldr	r3, [pc, #16]	; (800b044 <_fflush_r+0x74>)
 800b034:	429c      	cmp	r4, r3
 800b036:	bf08      	it	eq
 800b038:	68ec      	ldreq	r4, [r5, #12]
 800b03a:	e7da      	b.n	800aff2 <_fflush_r+0x22>
 800b03c:	0800d560 	.word	0x0800d560
 800b040:	0800d580 	.word	0x0800d580
 800b044:	0800d540 	.word	0x0800d540

0800b048 <std>:
 800b048:	2300      	movs	r3, #0
 800b04a:	b510      	push	{r4, lr}
 800b04c:	4604      	mov	r4, r0
 800b04e:	e9c0 3300 	strd	r3, r3, [r0]
 800b052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b056:	6083      	str	r3, [r0, #8]
 800b058:	8181      	strh	r1, [r0, #12]
 800b05a:	6643      	str	r3, [r0, #100]	; 0x64
 800b05c:	81c2      	strh	r2, [r0, #14]
 800b05e:	6183      	str	r3, [r0, #24]
 800b060:	4619      	mov	r1, r3
 800b062:	2208      	movs	r2, #8
 800b064:	305c      	adds	r0, #92	; 0x5c
 800b066:	f7ff fb53 	bl	800a710 <memset>
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <std+0x38>)
 800b06c:	6224      	str	r4, [r4, #32]
 800b06e:	6263      	str	r3, [r4, #36]	; 0x24
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <std+0x3c>)
 800b072:	62a3      	str	r3, [r4, #40]	; 0x28
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <std+0x40>)
 800b076:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b078:	4b04      	ldr	r3, [pc, #16]	; (800b08c <std+0x44>)
 800b07a:	6323      	str	r3, [r4, #48]	; 0x30
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800b8c9 	.word	0x0800b8c9
 800b084:	0800b8eb 	.word	0x0800b8eb
 800b088:	0800b923 	.word	0x0800b923
 800b08c:	0800b947 	.word	0x0800b947

0800b090 <_cleanup_r>:
 800b090:	4901      	ldr	r1, [pc, #4]	; (800b098 <_cleanup_r+0x8>)
 800b092:	f000 b8af 	b.w	800b1f4 <_fwalk_reent>
 800b096:	bf00      	nop
 800b098:	0800afd1 	.word	0x0800afd1

0800b09c <__sfmoreglue>:
 800b09c:	2268      	movs	r2, #104	; 0x68
 800b09e:	b570      	push	{r4, r5, r6, lr}
 800b0a0:	1e4d      	subs	r5, r1, #1
 800b0a2:	4355      	muls	r5, r2
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0aa:	f000 f9bb 	bl	800b424 <_malloc_r>
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	b140      	cbz	r0, 800b0c4 <__sfmoreglue+0x28>
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b0b8:	300c      	adds	r0, #12
 800b0ba:	60a0      	str	r0, [r4, #8]
 800b0bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0c0:	f7ff fb26 	bl	800a710 <memset>
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}

0800b0c8 <__sfp_lock_acquire>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__sfp_lock_acquire+0x8>)
 800b0ca:	f000 b8b3 	b.w	800b234 <__retarget_lock_acquire_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	200081b1 	.word	0x200081b1

0800b0d4 <__sfp_lock_release>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__sfp_lock_release+0x8>)
 800b0d6:	f000 b8ae 	b.w	800b236 <__retarget_lock_release_recursive>
 800b0da:	bf00      	nop
 800b0dc:	200081b1 	.word	0x200081b1

0800b0e0 <__sinit_lock_acquire>:
 800b0e0:	4801      	ldr	r0, [pc, #4]	; (800b0e8 <__sinit_lock_acquire+0x8>)
 800b0e2:	f000 b8a7 	b.w	800b234 <__retarget_lock_acquire_recursive>
 800b0e6:	bf00      	nop
 800b0e8:	200081b2 	.word	0x200081b2

0800b0ec <__sinit_lock_release>:
 800b0ec:	4801      	ldr	r0, [pc, #4]	; (800b0f4 <__sinit_lock_release+0x8>)
 800b0ee:	f000 b8a2 	b.w	800b236 <__retarget_lock_release_recursive>
 800b0f2:	bf00      	nop
 800b0f4:	200081b2 	.word	0x200081b2

0800b0f8 <__sinit>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	f7ff fff0 	bl	800b0e0 <__sinit_lock_acquire>
 800b100:	69a3      	ldr	r3, [r4, #24]
 800b102:	b11b      	cbz	r3, 800b10c <__sinit+0x14>
 800b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b108:	f7ff bff0 	b.w	800b0ec <__sinit_lock_release>
 800b10c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b110:	6523      	str	r3, [r4, #80]	; 0x50
 800b112:	4b13      	ldr	r3, [pc, #76]	; (800b160 <__sinit+0x68>)
 800b114:	4a13      	ldr	r2, [pc, #76]	; (800b164 <__sinit+0x6c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	62a2      	str	r2, [r4, #40]	; 0x28
 800b11a:	42a3      	cmp	r3, r4
 800b11c:	bf08      	it	eq
 800b11e:	2301      	moveq	r3, #1
 800b120:	4620      	mov	r0, r4
 800b122:	bf08      	it	eq
 800b124:	61a3      	streq	r3, [r4, #24]
 800b126:	f000 f81f 	bl	800b168 <__sfp>
 800b12a:	6060      	str	r0, [r4, #4]
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f81b 	bl	800b168 <__sfp>
 800b132:	60a0      	str	r0, [r4, #8]
 800b134:	4620      	mov	r0, r4
 800b136:	f000 f817 	bl	800b168 <__sfp>
 800b13a:	2200      	movs	r2, #0
 800b13c:	2104      	movs	r1, #4
 800b13e:	60e0      	str	r0, [r4, #12]
 800b140:	6860      	ldr	r0, [r4, #4]
 800b142:	f7ff ff81 	bl	800b048 <std>
 800b146:	2201      	movs	r2, #1
 800b148:	2109      	movs	r1, #9
 800b14a:	68a0      	ldr	r0, [r4, #8]
 800b14c:	f7ff ff7c 	bl	800b048 <std>
 800b150:	2202      	movs	r2, #2
 800b152:	2112      	movs	r1, #18
 800b154:	68e0      	ldr	r0, [r4, #12]
 800b156:	f7ff ff77 	bl	800b048 <std>
 800b15a:	2301      	movs	r3, #1
 800b15c:	61a3      	str	r3, [r4, #24]
 800b15e:	e7d1      	b.n	800b104 <__sinit+0xc>
 800b160:	0800d508 	.word	0x0800d508
 800b164:	0800b091 	.word	0x0800b091

0800b168 <__sfp>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	4607      	mov	r7, r0
 800b16c:	f7ff ffac 	bl	800b0c8 <__sfp_lock_acquire>
 800b170:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <__sfp+0x84>)
 800b172:	681e      	ldr	r6, [r3, #0]
 800b174:	69b3      	ldr	r3, [r6, #24]
 800b176:	b913      	cbnz	r3, 800b17e <__sfp+0x16>
 800b178:	4630      	mov	r0, r6
 800b17a:	f7ff ffbd 	bl	800b0f8 <__sinit>
 800b17e:	3648      	adds	r6, #72	; 0x48
 800b180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b184:	3b01      	subs	r3, #1
 800b186:	d503      	bpl.n	800b190 <__sfp+0x28>
 800b188:	6833      	ldr	r3, [r6, #0]
 800b18a:	b30b      	cbz	r3, 800b1d0 <__sfp+0x68>
 800b18c:	6836      	ldr	r6, [r6, #0]
 800b18e:	e7f7      	b.n	800b180 <__sfp+0x18>
 800b190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b194:	b9d5      	cbnz	r5, 800b1cc <__sfp+0x64>
 800b196:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <__sfp+0x88>)
 800b198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b19c:	60e3      	str	r3, [r4, #12]
 800b19e:	6665      	str	r5, [r4, #100]	; 0x64
 800b1a0:	f000 f847 	bl	800b232 <__retarget_lock_init_recursive>
 800b1a4:	f7ff ff96 	bl	800b0d4 <__sfp_lock_release>
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1b4:	6025      	str	r5, [r4, #0]
 800b1b6:	61a5      	str	r5, [r4, #24]
 800b1b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1bc:	f7ff faa8 	bl	800a710 <memset>
 800b1c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1cc:	3468      	adds	r4, #104	; 0x68
 800b1ce:	e7d9      	b.n	800b184 <__sfp+0x1c>
 800b1d0:	2104      	movs	r1, #4
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f7ff ff62 	bl	800b09c <__sfmoreglue>
 800b1d8:	4604      	mov	r4, r0
 800b1da:	6030      	str	r0, [r6, #0]
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d1d5      	bne.n	800b18c <__sfp+0x24>
 800b1e0:	f7ff ff78 	bl	800b0d4 <__sfp_lock_release>
 800b1e4:	230c      	movs	r3, #12
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	e7ee      	b.n	800b1c8 <__sfp+0x60>
 800b1ea:	bf00      	nop
 800b1ec:	0800d508 	.word	0x0800d508
 800b1f0:	ffff0001 	.word	0xffff0001

0800b1f4 <_fwalk_reent>:
 800b1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	4688      	mov	r8, r1
 800b1fc:	2700      	movs	r7, #0
 800b1fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b206:	f1b9 0901 	subs.w	r9, r9, #1
 800b20a:	d505      	bpl.n	800b218 <_fwalk_reent+0x24>
 800b20c:	6824      	ldr	r4, [r4, #0]
 800b20e:	2c00      	cmp	r4, #0
 800b210:	d1f7      	bne.n	800b202 <_fwalk_reent+0xe>
 800b212:	4638      	mov	r0, r7
 800b214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b218:	89ab      	ldrh	r3, [r5, #12]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d907      	bls.n	800b22e <_fwalk_reent+0x3a>
 800b21e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b222:	3301      	adds	r3, #1
 800b224:	d003      	beq.n	800b22e <_fwalk_reent+0x3a>
 800b226:	4629      	mov	r1, r5
 800b228:	4630      	mov	r0, r6
 800b22a:	47c0      	blx	r8
 800b22c:	4307      	orrs	r7, r0
 800b22e:	3568      	adds	r5, #104	; 0x68
 800b230:	e7e9      	b.n	800b206 <_fwalk_reent+0x12>

0800b232 <__retarget_lock_init_recursive>:
 800b232:	4770      	bx	lr

0800b234 <__retarget_lock_acquire_recursive>:
 800b234:	4770      	bx	lr

0800b236 <__retarget_lock_release_recursive>:
 800b236:	4770      	bx	lr

0800b238 <__swhatbuf_r>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	460e      	mov	r6, r1
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	4614      	mov	r4, r2
 800b242:	2900      	cmp	r1, #0
 800b244:	461d      	mov	r5, r3
 800b246:	b096      	sub	sp, #88	; 0x58
 800b248:	da08      	bge.n	800b25c <__swhatbuf_r+0x24>
 800b24a:	2200      	movs	r2, #0
 800b24c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	061a      	lsls	r2, r3, #24
 800b254:	d410      	bmi.n	800b278 <__swhatbuf_r+0x40>
 800b256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b25a:	e00e      	b.n	800b27a <__swhatbuf_r+0x42>
 800b25c:	466a      	mov	r2, sp
 800b25e:	f000 fb99 	bl	800b994 <_fstat_r>
 800b262:	2800      	cmp	r0, #0
 800b264:	dbf1      	blt.n	800b24a <__swhatbuf_r+0x12>
 800b266:	9a01      	ldr	r2, [sp, #4]
 800b268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b26c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b270:	425a      	negs	r2, r3
 800b272:	415a      	adcs	r2, r3
 800b274:	602a      	str	r2, [r5, #0]
 800b276:	e7ee      	b.n	800b256 <__swhatbuf_r+0x1e>
 800b278:	2340      	movs	r3, #64	; 0x40
 800b27a:	2000      	movs	r0, #0
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	b016      	add	sp, #88	; 0x58
 800b280:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b284 <__smakebuf_r>:
 800b284:	898b      	ldrh	r3, [r1, #12]
 800b286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b288:	079d      	lsls	r5, r3, #30
 800b28a:	4606      	mov	r6, r0
 800b28c:	460c      	mov	r4, r1
 800b28e:	d507      	bpl.n	800b2a0 <__smakebuf_r+0x1c>
 800b290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	2301      	movs	r3, #1
 800b29a:	6163      	str	r3, [r4, #20]
 800b29c:	b002      	add	sp, #8
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	466a      	mov	r2, sp
 800b2a2:	ab01      	add	r3, sp, #4
 800b2a4:	f7ff ffc8 	bl	800b238 <__swhatbuf_r>
 800b2a8:	9900      	ldr	r1, [sp, #0]
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f000 f8b9 	bl	800b424 <_malloc_r>
 800b2b2:	b948      	cbnz	r0, 800b2c8 <__smakebuf_r+0x44>
 800b2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b8:	059a      	lsls	r2, r3, #22
 800b2ba:	d4ef      	bmi.n	800b29c <__smakebuf_r+0x18>
 800b2bc:	f023 0303 	bic.w	r3, r3, #3
 800b2c0:	f043 0302 	orr.w	r3, r3, #2
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	e7e3      	b.n	800b290 <__smakebuf_r+0xc>
 800b2c8:	4b0d      	ldr	r3, [pc, #52]	; (800b300 <__smakebuf_r+0x7c>)
 800b2ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	6020      	str	r0, [r4, #0]
 800b2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	9b00      	ldr	r3, [sp, #0]
 800b2d8:	6120      	str	r0, [r4, #16]
 800b2da:	6163      	str	r3, [r4, #20]
 800b2dc:	9b01      	ldr	r3, [sp, #4]
 800b2de:	b15b      	cbz	r3, 800b2f8 <__smakebuf_r+0x74>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e6:	f000 fb67 	bl	800b9b8 <_isatty_r>
 800b2ea:	b128      	cbz	r0, 800b2f8 <__smakebuf_r+0x74>
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	f043 0301 	orr.w	r3, r3, #1
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	89a0      	ldrh	r0, [r4, #12]
 800b2fa:	4305      	orrs	r5, r0
 800b2fc:	81a5      	strh	r5, [r4, #12]
 800b2fe:	e7cd      	b.n	800b29c <__smakebuf_r+0x18>
 800b300:	0800b091 	.word	0x0800b091

0800b304 <memchr>:
 800b304:	4603      	mov	r3, r0
 800b306:	b510      	push	{r4, lr}
 800b308:	b2c9      	uxtb	r1, r1
 800b30a:	4402      	add	r2, r0
 800b30c:	4293      	cmp	r3, r2
 800b30e:	4618      	mov	r0, r3
 800b310:	d101      	bne.n	800b316 <memchr+0x12>
 800b312:	2000      	movs	r0, #0
 800b314:	e003      	b.n	800b31e <memchr+0x1a>
 800b316:	7804      	ldrb	r4, [r0, #0]
 800b318:	3301      	adds	r3, #1
 800b31a:	428c      	cmp	r4, r1
 800b31c:	d1f6      	bne.n	800b30c <memchr+0x8>
 800b31e:	bd10      	pop	{r4, pc}

0800b320 <memmove>:
 800b320:	4288      	cmp	r0, r1
 800b322:	b510      	push	{r4, lr}
 800b324:	eb01 0402 	add.w	r4, r1, r2
 800b328:	d902      	bls.n	800b330 <memmove+0x10>
 800b32a:	4284      	cmp	r4, r0
 800b32c:	4623      	mov	r3, r4
 800b32e:	d807      	bhi.n	800b340 <memmove+0x20>
 800b330:	1e43      	subs	r3, r0, #1
 800b332:	42a1      	cmp	r1, r4
 800b334:	d008      	beq.n	800b348 <memmove+0x28>
 800b336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b33e:	e7f8      	b.n	800b332 <memmove+0x12>
 800b340:	4601      	mov	r1, r0
 800b342:	4402      	add	r2, r0
 800b344:	428a      	cmp	r2, r1
 800b346:	d100      	bne.n	800b34a <memmove+0x2a>
 800b348:	bd10      	pop	{r4, pc}
 800b34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b352:	e7f7      	b.n	800b344 <memmove+0x24>

0800b354 <_free_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4605      	mov	r5, r0
 800b358:	2900      	cmp	r1, #0
 800b35a:	d040      	beq.n	800b3de <_free_r+0x8a>
 800b35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b360:	1f0c      	subs	r4, r1, #4
 800b362:	2b00      	cmp	r3, #0
 800b364:	bfb8      	it	lt
 800b366:	18e4      	addlt	r4, r4, r3
 800b368:	f000 fb48 	bl	800b9fc <__malloc_lock>
 800b36c:	4a1c      	ldr	r2, [pc, #112]	; (800b3e0 <_free_r+0x8c>)
 800b36e:	6813      	ldr	r3, [r2, #0]
 800b370:	b933      	cbnz	r3, 800b380 <_free_r+0x2c>
 800b372:	6063      	str	r3, [r4, #4]
 800b374:	6014      	str	r4, [r2, #0]
 800b376:	4628      	mov	r0, r5
 800b378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b37c:	f000 bb44 	b.w	800ba08 <__malloc_unlock>
 800b380:	42a3      	cmp	r3, r4
 800b382:	d908      	bls.n	800b396 <_free_r+0x42>
 800b384:	6820      	ldr	r0, [r4, #0]
 800b386:	1821      	adds	r1, r4, r0
 800b388:	428b      	cmp	r3, r1
 800b38a:	bf01      	itttt	eq
 800b38c:	6819      	ldreq	r1, [r3, #0]
 800b38e:	685b      	ldreq	r3, [r3, #4]
 800b390:	1809      	addeq	r1, r1, r0
 800b392:	6021      	streq	r1, [r4, #0]
 800b394:	e7ed      	b.n	800b372 <_free_r+0x1e>
 800b396:	461a      	mov	r2, r3
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	b10b      	cbz	r3, 800b3a0 <_free_r+0x4c>
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	d9fa      	bls.n	800b396 <_free_r+0x42>
 800b3a0:	6811      	ldr	r1, [r2, #0]
 800b3a2:	1850      	adds	r0, r2, r1
 800b3a4:	42a0      	cmp	r0, r4
 800b3a6:	d10b      	bne.n	800b3c0 <_free_r+0x6c>
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	4401      	add	r1, r0
 800b3ac:	1850      	adds	r0, r2, r1
 800b3ae:	4283      	cmp	r3, r0
 800b3b0:	6011      	str	r1, [r2, #0]
 800b3b2:	d1e0      	bne.n	800b376 <_free_r+0x22>
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	4401      	add	r1, r0
 800b3ba:	6011      	str	r1, [r2, #0]
 800b3bc:	6053      	str	r3, [r2, #4]
 800b3be:	e7da      	b.n	800b376 <_free_r+0x22>
 800b3c0:	d902      	bls.n	800b3c8 <_free_r+0x74>
 800b3c2:	230c      	movs	r3, #12
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	e7d6      	b.n	800b376 <_free_r+0x22>
 800b3c8:	6820      	ldr	r0, [r4, #0]
 800b3ca:	1821      	adds	r1, r4, r0
 800b3cc:	428b      	cmp	r3, r1
 800b3ce:	bf01      	itttt	eq
 800b3d0:	6819      	ldreq	r1, [r3, #0]
 800b3d2:	685b      	ldreq	r3, [r3, #4]
 800b3d4:	1809      	addeq	r1, r1, r0
 800b3d6:	6021      	streq	r1, [r4, #0]
 800b3d8:	6063      	str	r3, [r4, #4]
 800b3da:	6054      	str	r4, [r2, #4]
 800b3dc:	e7cb      	b.n	800b376 <_free_r+0x22>
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	200081b4 	.word	0x200081b4

0800b3e4 <sbrk_aligned>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4e0e      	ldr	r6, [pc, #56]	; (800b420 <sbrk_aligned+0x3c>)
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	6831      	ldr	r1, [r6, #0]
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	b911      	cbnz	r1, 800b3f6 <sbrk_aligned+0x12>
 800b3f0:	f000 fa16 	bl	800b820 <_sbrk_r>
 800b3f4:	6030      	str	r0, [r6, #0]
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f000 fa11 	bl	800b820 <_sbrk_r>
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	d00a      	beq.n	800b418 <sbrk_aligned+0x34>
 800b402:	1cc4      	adds	r4, r0, #3
 800b404:	f024 0403 	bic.w	r4, r4, #3
 800b408:	42a0      	cmp	r0, r4
 800b40a:	d007      	beq.n	800b41c <sbrk_aligned+0x38>
 800b40c:	1a21      	subs	r1, r4, r0
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 fa06 	bl	800b820 <_sbrk_r>
 800b414:	3001      	adds	r0, #1
 800b416:	d101      	bne.n	800b41c <sbrk_aligned+0x38>
 800b418:	f04f 34ff 	mov.w	r4, #4294967295
 800b41c:	4620      	mov	r0, r4
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	200081b8 	.word	0x200081b8

0800b424 <_malloc_r>:
 800b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b428:	1ccd      	adds	r5, r1, #3
 800b42a:	f025 0503 	bic.w	r5, r5, #3
 800b42e:	3508      	adds	r5, #8
 800b430:	2d0c      	cmp	r5, #12
 800b432:	bf38      	it	cc
 800b434:	250c      	movcc	r5, #12
 800b436:	2d00      	cmp	r5, #0
 800b438:	4607      	mov	r7, r0
 800b43a:	db01      	blt.n	800b440 <_malloc_r+0x1c>
 800b43c:	42a9      	cmp	r1, r5
 800b43e:	d905      	bls.n	800b44c <_malloc_r+0x28>
 800b440:	230c      	movs	r3, #12
 800b442:	2600      	movs	r6, #0
 800b444:	603b      	str	r3, [r7, #0]
 800b446:	4630      	mov	r0, r6
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	4e2e      	ldr	r6, [pc, #184]	; (800b508 <_malloc_r+0xe4>)
 800b44e:	f000 fad5 	bl	800b9fc <__malloc_lock>
 800b452:	6833      	ldr	r3, [r6, #0]
 800b454:	461c      	mov	r4, r3
 800b456:	bb34      	cbnz	r4, 800b4a6 <_malloc_r+0x82>
 800b458:	4629      	mov	r1, r5
 800b45a:	4638      	mov	r0, r7
 800b45c:	f7ff ffc2 	bl	800b3e4 <sbrk_aligned>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	4604      	mov	r4, r0
 800b464:	d14d      	bne.n	800b502 <_malloc_r+0xde>
 800b466:	6834      	ldr	r4, [r6, #0]
 800b468:	4626      	mov	r6, r4
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	d140      	bne.n	800b4f0 <_malloc_r+0xcc>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	4631      	mov	r1, r6
 800b472:	4638      	mov	r0, r7
 800b474:	eb04 0803 	add.w	r8, r4, r3
 800b478:	f000 f9d2 	bl	800b820 <_sbrk_r>
 800b47c:	4580      	cmp	r8, r0
 800b47e:	d13a      	bne.n	800b4f6 <_malloc_r+0xd2>
 800b480:	6821      	ldr	r1, [r4, #0]
 800b482:	3503      	adds	r5, #3
 800b484:	1a6d      	subs	r5, r5, r1
 800b486:	f025 0503 	bic.w	r5, r5, #3
 800b48a:	3508      	adds	r5, #8
 800b48c:	2d0c      	cmp	r5, #12
 800b48e:	bf38      	it	cc
 800b490:	250c      	movcc	r5, #12
 800b492:	4638      	mov	r0, r7
 800b494:	4629      	mov	r1, r5
 800b496:	f7ff ffa5 	bl	800b3e4 <sbrk_aligned>
 800b49a:	3001      	adds	r0, #1
 800b49c:	d02b      	beq.n	800b4f6 <_malloc_r+0xd2>
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	442b      	add	r3, r5
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	e00e      	b.n	800b4c4 <_malloc_r+0xa0>
 800b4a6:	6822      	ldr	r2, [r4, #0]
 800b4a8:	1b52      	subs	r2, r2, r5
 800b4aa:	d41e      	bmi.n	800b4ea <_malloc_r+0xc6>
 800b4ac:	2a0b      	cmp	r2, #11
 800b4ae:	d916      	bls.n	800b4de <_malloc_r+0xba>
 800b4b0:	1961      	adds	r1, r4, r5
 800b4b2:	42a3      	cmp	r3, r4
 800b4b4:	6025      	str	r5, [r4, #0]
 800b4b6:	bf18      	it	ne
 800b4b8:	6059      	strne	r1, [r3, #4]
 800b4ba:	6863      	ldr	r3, [r4, #4]
 800b4bc:	bf08      	it	eq
 800b4be:	6031      	streq	r1, [r6, #0]
 800b4c0:	5162      	str	r2, [r4, r5]
 800b4c2:	604b      	str	r3, [r1, #4]
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f104 060b 	add.w	r6, r4, #11
 800b4ca:	f000 fa9d 	bl	800ba08 <__malloc_unlock>
 800b4ce:	f026 0607 	bic.w	r6, r6, #7
 800b4d2:	1d23      	adds	r3, r4, #4
 800b4d4:	1af2      	subs	r2, r6, r3
 800b4d6:	d0b6      	beq.n	800b446 <_malloc_r+0x22>
 800b4d8:	1b9b      	subs	r3, r3, r6
 800b4da:	50a3      	str	r3, [r4, r2]
 800b4dc:	e7b3      	b.n	800b446 <_malloc_r+0x22>
 800b4de:	6862      	ldr	r2, [r4, #4]
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	bf0c      	ite	eq
 800b4e4:	6032      	streq	r2, [r6, #0]
 800b4e6:	605a      	strne	r2, [r3, #4]
 800b4e8:	e7ec      	b.n	800b4c4 <_malloc_r+0xa0>
 800b4ea:	4623      	mov	r3, r4
 800b4ec:	6864      	ldr	r4, [r4, #4]
 800b4ee:	e7b2      	b.n	800b456 <_malloc_r+0x32>
 800b4f0:	4634      	mov	r4, r6
 800b4f2:	6876      	ldr	r6, [r6, #4]
 800b4f4:	e7b9      	b.n	800b46a <_malloc_r+0x46>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	f000 fa84 	bl	800ba08 <__malloc_unlock>
 800b500:	e7a1      	b.n	800b446 <_malloc_r+0x22>
 800b502:	6025      	str	r5, [r4, #0]
 800b504:	e7de      	b.n	800b4c4 <_malloc_r+0xa0>
 800b506:	bf00      	nop
 800b508:	200081b4 	.word	0x200081b4

0800b50c <_realloc_r>:
 800b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b510:	4680      	mov	r8, r0
 800b512:	4614      	mov	r4, r2
 800b514:	460e      	mov	r6, r1
 800b516:	b921      	cbnz	r1, 800b522 <_realloc_r+0x16>
 800b518:	4611      	mov	r1, r2
 800b51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b51e:	f7ff bf81 	b.w	800b424 <_malloc_r>
 800b522:	b92a      	cbnz	r2, 800b530 <_realloc_r+0x24>
 800b524:	f7ff ff16 	bl	800b354 <_free_r>
 800b528:	4625      	mov	r5, r4
 800b52a:	4628      	mov	r0, r5
 800b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b530:	f000 fa70 	bl	800ba14 <_malloc_usable_size_r>
 800b534:	4284      	cmp	r4, r0
 800b536:	4607      	mov	r7, r0
 800b538:	d802      	bhi.n	800b540 <_realloc_r+0x34>
 800b53a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b53e:	d812      	bhi.n	800b566 <_realloc_r+0x5a>
 800b540:	4621      	mov	r1, r4
 800b542:	4640      	mov	r0, r8
 800b544:	f7ff ff6e 	bl	800b424 <_malloc_r>
 800b548:	4605      	mov	r5, r0
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d0ed      	beq.n	800b52a <_realloc_r+0x1e>
 800b54e:	42bc      	cmp	r4, r7
 800b550:	4622      	mov	r2, r4
 800b552:	4631      	mov	r1, r6
 800b554:	bf28      	it	cs
 800b556:	463a      	movcs	r2, r7
 800b558:	f7ff f8cc 	bl	800a6f4 <memcpy>
 800b55c:	4631      	mov	r1, r6
 800b55e:	4640      	mov	r0, r8
 800b560:	f7ff fef8 	bl	800b354 <_free_r>
 800b564:	e7e1      	b.n	800b52a <_realloc_r+0x1e>
 800b566:	4635      	mov	r5, r6
 800b568:	e7df      	b.n	800b52a <_realloc_r+0x1e>

0800b56a <__ssputs_r>:
 800b56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b56e:	688e      	ldr	r6, [r1, #8]
 800b570:	4682      	mov	sl, r0
 800b572:	429e      	cmp	r6, r3
 800b574:	460c      	mov	r4, r1
 800b576:	4690      	mov	r8, r2
 800b578:	461f      	mov	r7, r3
 800b57a:	d838      	bhi.n	800b5ee <__ssputs_r+0x84>
 800b57c:	898a      	ldrh	r2, [r1, #12]
 800b57e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b582:	d032      	beq.n	800b5ea <__ssputs_r+0x80>
 800b584:	6825      	ldr	r5, [r4, #0]
 800b586:	6909      	ldr	r1, [r1, #16]
 800b588:	3301      	adds	r3, #1
 800b58a:	eba5 0901 	sub.w	r9, r5, r1
 800b58e:	6965      	ldr	r5, [r4, #20]
 800b590:	444b      	add	r3, r9
 800b592:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b59a:	106d      	asrs	r5, r5, #1
 800b59c:	429d      	cmp	r5, r3
 800b59e:	bf38      	it	cc
 800b5a0:	461d      	movcc	r5, r3
 800b5a2:	0553      	lsls	r3, r2, #21
 800b5a4:	d531      	bpl.n	800b60a <__ssputs_r+0xa0>
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f7ff ff3c 	bl	800b424 <_malloc_r>
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	b950      	cbnz	r0, 800b5c6 <__ssputs_r+0x5c>
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	f8ca 3000 	str.w	r3, [sl]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c6:	464a      	mov	r2, r9
 800b5c8:	6921      	ldr	r1, [r4, #16]
 800b5ca:	f7ff f893 	bl	800a6f4 <memcpy>
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	6126      	str	r6, [r4, #16]
 800b5dc:	444e      	add	r6, r9
 800b5de:	6026      	str	r6, [r4, #0]
 800b5e0:	463e      	mov	r6, r7
 800b5e2:	6165      	str	r5, [r4, #20]
 800b5e4:	eba5 0509 	sub.w	r5, r5, r9
 800b5e8:	60a5      	str	r5, [r4, #8]
 800b5ea:	42be      	cmp	r6, r7
 800b5ec:	d900      	bls.n	800b5f0 <__ssputs_r+0x86>
 800b5ee:	463e      	mov	r6, r7
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	4641      	mov	r1, r8
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	f7ff fe93 	bl	800b320 <memmove>
 800b5fa:	68a3      	ldr	r3, [r4, #8]
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	1b9b      	subs	r3, r3, r6
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	4433      	add	r3, r6
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	e7db      	b.n	800b5c2 <__ssputs_r+0x58>
 800b60a:	462a      	mov	r2, r5
 800b60c:	f7ff ff7e 	bl	800b50c <_realloc_r>
 800b610:	4606      	mov	r6, r0
 800b612:	2800      	cmp	r0, #0
 800b614:	d1e1      	bne.n	800b5da <__ssputs_r+0x70>
 800b616:	4650      	mov	r0, sl
 800b618:	6921      	ldr	r1, [r4, #16]
 800b61a:	f7ff fe9b 	bl	800b354 <_free_r>
 800b61e:	e7c7      	b.n	800b5b0 <__ssputs_r+0x46>

0800b620 <_svfiprintf_r>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	4698      	mov	r8, r3
 800b626:	898b      	ldrh	r3, [r1, #12]
 800b628:	4607      	mov	r7, r0
 800b62a:	061b      	lsls	r3, r3, #24
 800b62c:	460d      	mov	r5, r1
 800b62e:	4614      	mov	r4, r2
 800b630:	b09d      	sub	sp, #116	; 0x74
 800b632:	d50e      	bpl.n	800b652 <_svfiprintf_r+0x32>
 800b634:	690b      	ldr	r3, [r1, #16]
 800b636:	b963      	cbnz	r3, 800b652 <_svfiprintf_r+0x32>
 800b638:	2140      	movs	r1, #64	; 0x40
 800b63a:	f7ff fef3 	bl	800b424 <_malloc_r>
 800b63e:	6028      	str	r0, [r5, #0]
 800b640:	6128      	str	r0, [r5, #16]
 800b642:	b920      	cbnz	r0, 800b64e <_svfiprintf_r+0x2e>
 800b644:	230c      	movs	r3, #12
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	e0d1      	b.n	800b7f2 <_svfiprintf_r+0x1d2>
 800b64e:	2340      	movs	r3, #64	; 0x40
 800b650:	616b      	str	r3, [r5, #20]
 800b652:	2300      	movs	r3, #0
 800b654:	9309      	str	r3, [sp, #36]	; 0x24
 800b656:	2320      	movs	r3, #32
 800b658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b65c:	2330      	movs	r3, #48	; 0x30
 800b65e:	f04f 0901 	mov.w	r9, #1
 800b662:	f8cd 800c 	str.w	r8, [sp, #12]
 800b666:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b80c <_svfiprintf_r+0x1ec>
 800b66a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b66e:	4623      	mov	r3, r4
 800b670:	469a      	mov	sl, r3
 800b672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b676:	b10a      	cbz	r2, 800b67c <_svfiprintf_r+0x5c>
 800b678:	2a25      	cmp	r2, #37	; 0x25
 800b67a:	d1f9      	bne.n	800b670 <_svfiprintf_r+0x50>
 800b67c:	ebba 0b04 	subs.w	fp, sl, r4
 800b680:	d00b      	beq.n	800b69a <_svfiprintf_r+0x7a>
 800b682:	465b      	mov	r3, fp
 800b684:	4622      	mov	r2, r4
 800b686:	4629      	mov	r1, r5
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff ff6e 	bl	800b56a <__ssputs_r>
 800b68e:	3001      	adds	r0, #1
 800b690:	f000 80aa 	beq.w	800b7e8 <_svfiprintf_r+0x1c8>
 800b694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b696:	445a      	add	r2, fp
 800b698:	9209      	str	r2, [sp, #36]	; 0x24
 800b69a:	f89a 3000 	ldrb.w	r3, [sl]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 80a2 	beq.w	800b7e8 <_svfiprintf_r+0x1c8>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ae:	f10a 0a01 	add.w	sl, sl, #1
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	9307      	str	r3, [sp, #28]
 800b6b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b6bc:	4654      	mov	r4, sl
 800b6be:	2205      	movs	r2, #5
 800b6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c4:	4851      	ldr	r0, [pc, #324]	; (800b80c <_svfiprintf_r+0x1ec>)
 800b6c6:	f7ff fe1d 	bl	800b304 <memchr>
 800b6ca:	9a04      	ldr	r2, [sp, #16]
 800b6cc:	b9d8      	cbnz	r0, 800b706 <_svfiprintf_r+0xe6>
 800b6ce:	06d0      	lsls	r0, r2, #27
 800b6d0:	bf44      	itt	mi
 800b6d2:	2320      	movmi	r3, #32
 800b6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d8:	0711      	lsls	r1, r2, #28
 800b6da:	bf44      	itt	mi
 800b6dc:	232b      	movmi	r3, #43	; 0x2b
 800b6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e8:	d015      	beq.n	800b716 <_svfiprintf_r+0xf6>
 800b6ea:	4654      	mov	r4, sl
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f04f 0c0a 	mov.w	ip, #10
 800b6f2:	9a07      	ldr	r2, [sp, #28]
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6fa:	3b30      	subs	r3, #48	; 0x30
 800b6fc:	2b09      	cmp	r3, #9
 800b6fe:	d94e      	bls.n	800b79e <_svfiprintf_r+0x17e>
 800b700:	b1b0      	cbz	r0, 800b730 <_svfiprintf_r+0x110>
 800b702:	9207      	str	r2, [sp, #28]
 800b704:	e014      	b.n	800b730 <_svfiprintf_r+0x110>
 800b706:	eba0 0308 	sub.w	r3, r0, r8
 800b70a:	fa09 f303 	lsl.w	r3, r9, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	46a2      	mov	sl, r4
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	e7d2      	b.n	800b6bc <_svfiprintf_r+0x9c>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	1d19      	adds	r1, r3, #4
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	9103      	str	r1, [sp, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bfbb      	ittet	lt
 800b722:	425b      	neglt	r3, r3
 800b724:	f042 0202 	orrlt.w	r2, r2, #2
 800b728:	9307      	strge	r3, [sp, #28]
 800b72a:	9307      	strlt	r3, [sp, #28]
 800b72c:	bfb8      	it	lt
 800b72e:	9204      	strlt	r2, [sp, #16]
 800b730:	7823      	ldrb	r3, [r4, #0]
 800b732:	2b2e      	cmp	r3, #46	; 0x2e
 800b734:	d10c      	bne.n	800b750 <_svfiprintf_r+0x130>
 800b736:	7863      	ldrb	r3, [r4, #1]
 800b738:	2b2a      	cmp	r3, #42	; 0x2a
 800b73a:	d135      	bne.n	800b7a8 <_svfiprintf_r+0x188>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	3402      	adds	r4, #2
 800b740:	1d1a      	adds	r2, r3, #4
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	9203      	str	r2, [sp, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	bfb8      	it	lt
 800b74a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b74e:	9305      	str	r3, [sp, #20]
 800b750:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b810 <_svfiprintf_r+0x1f0>
 800b754:	2203      	movs	r2, #3
 800b756:	4650      	mov	r0, sl
 800b758:	7821      	ldrb	r1, [r4, #0]
 800b75a:	f7ff fdd3 	bl	800b304 <memchr>
 800b75e:	b140      	cbz	r0, 800b772 <_svfiprintf_r+0x152>
 800b760:	2340      	movs	r3, #64	; 0x40
 800b762:	eba0 000a 	sub.w	r0, r0, sl
 800b766:	fa03 f000 	lsl.w	r0, r3, r0
 800b76a:	9b04      	ldr	r3, [sp, #16]
 800b76c:	3401      	adds	r4, #1
 800b76e:	4303      	orrs	r3, r0
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b776:	2206      	movs	r2, #6
 800b778:	4826      	ldr	r0, [pc, #152]	; (800b814 <_svfiprintf_r+0x1f4>)
 800b77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b77e:	f7ff fdc1 	bl	800b304 <memchr>
 800b782:	2800      	cmp	r0, #0
 800b784:	d038      	beq.n	800b7f8 <_svfiprintf_r+0x1d8>
 800b786:	4b24      	ldr	r3, [pc, #144]	; (800b818 <_svfiprintf_r+0x1f8>)
 800b788:	bb1b      	cbnz	r3, 800b7d2 <_svfiprintf_r+0x1b2>
 800b78a:	9b03      	ldr	r3, [sp, #12]
 800b78c:	3307      	adds	r3, #7
 800b78e:	f023 0307 	bic.w	r3, r3, #7
 800b792:	3308      	adds	r3, #8
 800b794:	9303      	str	r3, [sp, #12]
 800b796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b798:	4433      	add	r3, r6
 800b79a:	9309      	str	r3, [sp, #36]	; 0x24
 800b79c:	e767      	b.n	800b66e <_svfiprintf_r+0x4e>
 800b79e:	460c      	mov	r4, r1
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7a6:	e7a5      	b.n	800b6f4 <_svfiprintf_r+0xd4>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f04f 0c0a 	mov.w	ip, #10
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ba:	3a30      	subs	r2, #48	; 0x30
 800b7bc:	2a09      	cmp	r2, #9
 800b7be:	d903      	bls.n	800b7c8 <_svfiprintf_r+0x1a8>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d0c5      	beq.n	800b750 <_svfiprintf_r+0x130>
 800b7c4:	9105      	str	r1, [sp, #20]
 800b7c6:	e7c3      	b.n	800b750 <_svfiprintf_r+0x130>
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7d0:	e7f0      	b.n	800b7b4 <_svfiprintf_r+0x194>
 800b7d2:	ab03      	add	r3, sp, #12
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	462a      	mov	r2, r5
 800b7d8:	4638      	mov	r0, r7
 800b7da:	4b10      	ldr	r3, [pc, #64]	; (800b81c <_svfiprintf_r+0x1fc>)
 800b7dc:	a904      	add	r1, sp, #16
 800b7de:	f3af 8000 	nop.w
 800b7e2:	1c42      	adds	r2, r0, #1
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	d1d6      	bne.n	800b796 <_svfiprintf_r+0x176>
 800b7e8:	89ab      	ldrh	r3, [r5, #12]
 800b7ea:	065b      	lsls	r3, r3, #25
 800b7ec:	f53f af2c 	bmi.w	800b648 <_svfiprintf_r+0x28>
 800b7f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7f2:	b01d      	add	sp, #116	; 0x74
 800b7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f8:	ab03      	add	r3, sp, #12
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	462a      	mov	r2, r5
 800b7fe:	4638      	mov	r0, r7
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <_svfiprintf_r+0x1fc>)
 800b802:	a904      	add	r1, sp, #16
 800b804:	f7ff f954 	bl	800aab0 <_printf_i>
 800b808:	e7eb      	b.n	800b7e2 <_svfiprintf_r+0x1c2>
 800b80a:	bf00      	nop
 800b80c:	0800d50c 	.word	0x0800d50c
 800b810:	0800d512 	.word	0x0800d512
 800b814:	0800d516 	.word	0x0800d516
 800b818:	00000000 	.word	0x00000000
 800b81c:	0800b56b 	.word	0x0800b56b

0800b820 <_sbrk_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	2300      	movs	r3, #0
 800b824:	4d05      	ldr	r5, [pc, #20]	; (800b83c <_sbrk_r+0x1c>)
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7fa fa30 	bl	8005c90 <_sbrk>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_sbrk_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_sbrk_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	200081bc 	.word	0x200081bc

0800b840 <_raise_r>:
 800b840:	291f      	cmp	r1, #31
 800b842:	b538      	push	{r3, r4, r5, lr}
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	d904      	bls.n	800b854 <_raise_r+0x14>
 800b84a:	2316      	movs	r3, #22
 800b84c:	6003      	str	r3, [r0, #0]
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b856:	b112      	cbz	r2, 800b85e <_raise_r+0x1e>
 800b858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b85c:	b94b      	cbnz	r3, 800b872 <_raise_r+0x32>
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f830 	bl	800b8c4 <_getpid_r>
 800b864:	462a      	mov	r2, r5
 800b866:	4601      	mov	r1, r0
 800b868:	4620      	mov	r0, r4
 800b86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b86e:	f000 b817 	b.w	800b8a0 <_kill_r>
 800b872:	2b01      	cmp	r3, #1
 800b874:	d00a      	beq.n	800b88c <_raise_r+0x4c>
 800b876:	1c59      	adds	r1, r3, #1
 800b878:	d103      	bne.n	800b882 <_raise_r+0x42>
 800b87a:	2316      	movs	r3, #22
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	2001      	movs	r0, #1
 800b880:	e7e7      	b.n	800b852 <_raise_r+0x12>
 800b882:	2400      	movs	r4, #0
 800b884:	4628      	mov	r0, r5
 800b886:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b88a:	4798      	blx	r3
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7e0      	b.n	800b852 <_raise_r+0x12>

0800b890 <raise>:
 800b890:	4b02      	ldr	r3, [pc, #8]	; (800b89c <raise+0xc>)
 800b892:	4601      	mov	r1, r0
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	f7ff bfd3 	b.w	800b840 <_raise_r>
 800b89a:	bf00      	nop
 800b89c:	20000024 	.word	0x20000024

0800b8a0 <_kill_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_kill_r+0x20>)
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f7fa f96c 	bl	8005b8a <_kill>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_kill_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_kill_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	200081bc 	.word	0x200081bc

0800b8c4 <_getpid_r>:
 800b8c4:	f7fa b95a 	b.w	8005b7c <_getpid>

0800b8c8 <__sread>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d0:	f000 f8a8 	bl	800ba24 <_read_r>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	bfab      	itete	ge
 800b8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8da:	89a3      	ldrhlt	r3, [r4, #12]
 800b8dc:	181b      	addge	r3, r3, r0
 800b8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8e2:	bfac      	ite	ge
 800b8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8e6:	81a3      	strhlt	r3, [r4, #12]
 800b8e8:	bd10      	pop	{r4, pc}

0800b8ea <__swrite>:
 800b8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ee:	461f      	mov	r7, r3
 800b8f0:	898b      	ldrh	r3, [r1, #12]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	05db      	lsls	r3, r3, #23
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	4616      	mov	r6, r2
 800b8fa:	d505      	bpl.n	800b908 <__swrite+0x1e>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	2200      	movs	r2, #0
 800b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b904:	f000 f868 	bl	800b9d8 <_lseek_r>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	4632      	mov	r2, r6
 800b90c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	4628      	mov	r0, r5
 800b914:	463b      	mov	r3, r7
 800b916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b91e:	f000 b817 	b.w	800b950 <_write_r>

0800b922 <__sseek>:
 800b922:	b510      	push	{r4, lr}
 800b924:	460c      	mov	r4, r1
 800b926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92a:	f000 f855 	bl	800b9d8 <_lseek_r>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	bf15      	itete	ne
 800b934:	6560      	strne	r0, [r4, #84]	; 0x54
 800b936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b93e:	81a3      	strheq	r3, [r4, #12]
 800b940:	bf18      	it	ne
 800b942:	81a3      	strhne	r3, [r4, #12]
 800b944:	bd10      	pop	{r4, pc}

0800b946 <__sclose>:
 800b946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94a:	f000 b813 	b.w	800b974 <_close_r>
	...

0800b950 <_write_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	2200      	movs	r2, #0
 800b95a:	4d05      	ldr	r5, [pc, #20]	; (800b970 <_write_r+0x20>)
 800b95c:	602a      	str	r2, [r5, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	f7fa f94a 	bl	8005bf8 <_write>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_write_r+0x1e>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_write_r+0x1e>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	200081bc 	.word	0x200081bc

0800b974 <_close_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	2300      	movs	r3, #0
 800b978:	4d05      	ldr	r5, [pc, #20]	; (800b990 <_close_r+0x1c>)
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	f7fa f956 	bl	8005c30 <_close>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_close_r+0x1a>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_close_r+0x1a>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	200081bc 	.word	0x200081bc

0800b994 <_fstat_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	2300      	movs	r3, #0
 800b998:	4d06      	ldr	r5, [pc, #24]	; (800b9b4 <_fstat_r+0x20>)
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	4611      	mov	r1, r2
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f7fa f950 	bl	8005c46 <_fstat>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d102      	bne.n	800b9b0 <_fstat_r+0x1c>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b103      	cbz	r3, 800b9b0 <_fstat_r+0x1c>
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200081bc 	.word	0x200081bc

0800b9b8 <_isatty_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	4d05      	ldr	r5, [pc, #20]	; (800b9d4 <_isatty_r+0x1c>)
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	602b      	str	r3, [r5, #0]
 800b9c4:	f7fa f94e 	bl	8005c64 <_isatty>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_isatty_r+0x1a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_isatty_r+0x1a>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	200081bc 	.word	0x200081bc

0800b9d8 <_lseek_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	4611      	mov	r1, r2
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	4d05      	ldr	r5, [pc, #20]	; (800b9f8 <_lseek_r+0x20>)
 800b9e4:	602a      	str	r2, [r5, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f7fa f946 	bl	8005c78 <_lseek>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_lseek_r+0x1e>
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_lseek_r+0x1e>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	200081bc 	.word	0x200081bc

0800b9fc <__malloc_lock>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	; (800ba04 <__malloc_lock+0x8>)
 800b9fe:	f7ff bc19 	b.w	800b234 <__retarget_lock_acquire_recursive>
 800ba02:	bf00      	nop
 800ba04:	200081b0 	.word	0x200081b0

0800ba08 <__malloc_unlock>:
 800ba08:	4801      	ldr	r0, [pc, #4]	; (800ba10 <__malloc_unlock+0x8>)
 800ba0a:	f7ff bc14 	b.w	800b236 <__retarget_lock_release_recursive>
 800ba0e:	bf00      	nop
 800ba10:	200081b0 	.word	0x200081b0

0800ba14 <_malloc_usable_size_r>:
 800ba14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba18:	1f18      	subs	r0, r3, #4
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	bfbc      	itt	lt
 800ba1e:	580b      	ldrlt	r3, [r1, r0]
 800ba20:	18c0      	addlt	r0, r0, r3
 800ba22:	4770      	bx	lr

0800ba24 <_read_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4d05      	ldr	r5, [pc, #20]	; (800ba44 <_read_r+0x20>)
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7fa f8c3 	bl	8005bbe <_read>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_read_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_read_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	200081bc 	.word	0x200081bc

0800ba48 <atan>:
 800ba48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	4bb6      	ldr	r3, [pc, #728]	; (800bd28 <atan+0x2e0>)
 800ba4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba52:	429e      	cmp	r6, r3
 800ba54:	4604      	mov	r4, r0
 800ba56:	460d      	mov	r5, r1
 800ba58:	468b      	mov	fp, r1
 800ba5a:	dd17      	ble.n	800ba8c <atan+0x44>
 800ba5c:	4bb3      	ldr	r3, [pc, #716]	; (800bd2c <atan+0x2e4>)
 800ba5e:	429e      	cmp	r6, r3
 800ba60:	dc01      	bgt.n	800ba66 <atan+0x1e>
 800ba62:	d109      	bne.n	800ba78 <atan+0x30>
 800ba64:	b140      	cbz	r0, 800ba78 <atan+0x30>
 800ba66:	4622      	mov	r2, r4
 800ba68:	462b      	mov	r3, r5
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	f7f4 fbe1 	bl	8000234 <__adddf3>
 800ba72:	4604      	mov	r4, r0
 800ba74:	460d      	mov	r5, r1
 800ba76:	e005      	b.n	800ba84 <atan+0x3c>
 800ba78:	f1bb 0f00 	cmp.w	fp, #0
 800ba7c:	4cac      	ldr	r4, [pc, #688]	; (800bd30 <atan+0x2e8>)
 800ba7e:	f300 8121 	bgt.w	800bcc4 <atan+0x27c>
 800ba82:	4dac      	ldr	r5, [pc, #688]	; (800bd34 <atan+0x2ec>)
 800ba84:	4620      	mov	r0, r4
 800ba86:	4629      	mov	r1, r5
 800ba88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8c:	4baa      	ldr	r3, [pc, #680]	; (800bd38 <atan+0x2f0>)
 800ba8e:	429e      	cmp	r6, r3
 800ba90:	dc11      	bgt.n	800bab6 <atan+0x6e>
 800ba92:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ba96:	429e      	cmp	r6, r3
 800ba98:	dc0a      	bgt.n	800bab0 <atan+0x68>
 800ba9a:	a38b      	add	r3, pc, #556	; (adr r3, 800bcc8 <atan+0x280>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fbc8 	bl	8000234 <__adddf3>
 800baa4:	2200      	movs	r2, #0
 800baa6:	4ba5      	ldr	r3, [pc, #660]	; (800bd3c <atan+0x2f4>)
 800baa8:	f7f5 f80a 	bl	8000ac0 <__aeabi_dcmpgt>
 800baac:	2800      	cmp	r0, #0
 800baae:	d1e9      	bne.n	800ba84 <atan+0x3c>
 800bab0:	f04f 3aff 	mov.w	sl, #4294967295
 800bab4:	e027      	b.n	800bb06 <atan+0xbe>
 800bab6:	f000 f997 	bl	800bde8 <fabs>
 800baba:	4ba1      	ldr	r3, [pc, #644]	; (800bd40 <atan+0x2f8>)
 800babc:	4604      	mov	r4, r0
 800babe:	429e      	cmp	r6, r3
 800bac0:	460d      	mov	r5, r1
 800bac2:	f300 80b8 	bgt.w	800bc36 <atan+0x1ee>
 800bac6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800baca:	429e      	cmp	r6, r3
 800bacc:	f300 809c 	bgt.w	800bc08 <atan+0x1c0>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	f7f4 fbae 	bl	8000234 <__adddf3>
 800bad8:	2200      	movs	r2, #0
 800bada:	4b98      	ldr	r3, [pc, #608]	; (800bd3c <atan+0x2f4>)
 800badc:	f7f4 fba8 	bl	8000230 <__aeabi_dsub>
 800bae0:	2200      	movs	r2, #0
 800bae2:	4606      	mov	r6, r0
 800bae4:	460f      	mov	r7, r1
 800bae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fba1 	bl	8000234 <__adddf3>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fe7b 	bl	80007f4 <__aeabi_ddiv>
 800bafe:	f04f 0a00 	mov.w	sl, #0
 800bb02:	4604      	mov	r4, r0
 800bb04:	460d      	mov	r5, r1
 800bb06:	4622      	mov	r2, r4
 800bb08:	462b      	mov	r3, r5
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	f7f4 fd47 	bl	80005a0 <__aeabi_dmul>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4680      	mov	r8, r0
 800bb18:	4689      	mov	r9, r1
 800bb1a:	f7f4 fd41 	bl	80005a0 <__aeabi_dmul>
 800bb1e:	a36c      	add	r3, pc, #432	; (adr r3, 800bcd0 <atan+0x288>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	f7f4 fd3a 	bl	80005a0 <__aeabi_dmul>
 800bb2c:	a36a      	add	r3, pc, #424	; (adr r3, 800bcd8 <atan+0x290>)
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	f7f4 fb7f 	bl	8000234 <__adddf3>
 800bb36:	4632      	mov	r2, r6
 800bb38:	463b      	mov	r3, r7
 800bb3a:	f7f4 fd31 	bl	80005a0 <__aeabi_dmul>
 800bb3e:	a368      	add	r3, pc, #416	; (adr r3, 800bce0 <atan+0x298>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f7f4 fb76 	bl	8000234 <__adddf3>
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	f7f4 fd28 	bl	80005a0 <__aeabi_dmul>
 800bb50:	a365      	add	r3, pc, #404	; (adr r3, 800bce8 <atan+0x2a0>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f7f4 fb6d 	bl	8000234 <__adddf3>
 800bb5a:	4632      	mov	r2, r6
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	f7f4 fd1f 	bl	80005a0 <__aeabi_dmul>
 800bb62:	a363      	add	r3, pc, #396	; (adr r3, 800bcf0 <atan+0x2a8>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	f7f4 fb64 	bl	8000234 <__adddf3>
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	463b      	mov	r3, r7
 800bb70:	f7f4 fd16 	bl	80005a0 <__aeabi_dmul>
 800bb74:	a360      	add	r3, pc, #384	; (adr r3, 800bcf8 <atan+0x2b0>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fb5b 	bl	8000234 <__adddf3>
 800bb7e:	4642      	mov	r2, r8
 800bb80:	464b      	mov	r3, r9
 800bb82:	f7f4 fd0d 	bl	80005a0 <__aeabi_dmul>
 800bb86:	a35e      	add	r3, pc, #376	; (adr r3, 800bd00 <atan+0x2b8>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	4689      	mov	r9, r1
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fd04 	bl	80005a0 <__aeabi_dmul>
 800bb98:	a35b      	add	r3, pc, #364	; (adr r3, 800bd08 <atan+0x2c0>)
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	f7f4 fb47 	bl	8000230 <__aeabi_dsub>
 800bba2:	4632      	mov	r2, r6
 800bba4:	463b      	mov	r3, r7
 800bba6:	f7f4 fcfb 	bl	80005a0 <__aeabi_dmul>
 800bbaa:	a359      	add	r3, pc, #356	; (adr r3, 800bd10 <atan+0x2c8>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f7f4 fb3e 	bl	8000230 <__aeabi_dsub>
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	f7f4 fcf2 	bl	80005a0 <__aeabi_dmul>
 800bbbc:	a356      	add	r3, pc, #344	; (adr r3, 800bd18 <atan+0x2d0>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f7f4 fb35 	bl	8000230 <__aeabi_dsub>
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	463b      	mov	r3, r7
 800bbca:	f7f4 fce9 	bl	80005a0 <__aeabi_dmul>
 800bbce:	a354      	add	r3, pc, #336	; (adr r3, 800bd20 <atan+0x2d8>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fb2c 	bl	8000230 <__aeabi_dsub>
 800bbd8:	4632      	mov	r2, r6
 800bbda:	463b      	mov	r3, r7
 800bbdc:	f7f4 fce0 	bl	80005a0 <__aeabi_dmul>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f7f4 fb24 	bl	8000234 <__adddf3>
 800bbec:	4622      	mov	r2, r4
 800bbee:	462b      	mov	r3, r5
 800bbf0:	f7f4 fcd6 	bl	80005a0 <__aeabi_dmul>
 800bbf4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	d144      	bne.n	800bc88 <atan+0x240>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fb15 	bl	8000230 <__aeabi_dsub>
 800bc06:	e734      	b.n	800ba72 <atan+0x2a>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4b4c      	ldr	r3, [pc, #304]	; (800bd3c <atan+0x2f4>)
 800bc0c:	f7f4 fb10 	bl	8000230 <__aeabi_dsub>
 800bc10:	2200      	movs	r2, #0
 800bc12:	4606      	mov	r6, r0
 800bc14:	460f      	mov	r7, r1
 800bc16:	4620      	mov	r0, r4
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4b48      	ldr	r3, [pc, #288]	; (800bd3c <atan+0x2f4>)
 800bc1c:	f7f4 fb0a 	bl	8000234 <__adddf3>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4630      	mov	r0, r6
 800bc26:	4639      	mov	r1, r7
 800bc28:	f7f4 fde4 	bl	80007f4 <__aeabi_ddiv>
 800bc2c:	f04f 0a01 	mov.w	sl, #1
 800bc30:	4604      	mov	r4, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	e767      	b.n	800bb06 <atan+0xbe>
 800bc36:	4b43      	ldr	r3, [pc, #268]	; (800bd44 <atan+0x2fc>)
 800bc38:	429e      	cmp	r6, r3
 800bc3a:	da1a      	bge.n	800bc72 <atan+0x22a>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4b42      	ldr	r3, [pc, #264]	; (800bd48 <atan+0x300>)
 800bc40:	f7f4 faf6 	bl	8000230 <__aeabi_dsub>
 800bc44:	2200      	movs	r2, #0
 800bc46:	4606      	mov	r6, r0
 800bc48:	460f      	mov	r7, r1
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4b3e      	ldr	r3, [pc, #248]	; (800bd48 <atan+0x300>)
 800bc50:	f7f4 fca6 	bl	80005a0 <__aeabi_dmul>
 800bc54:	2200      	movs	r2, #0
 800bc56:	4b39      	ldr	r3, [pc, #228]	; (800bd3c <atan+0x2f4>)
 800bc58:	f7f4 faec 	bl	8000234 <__adddf3>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4630      	mov	r0, r6
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f4 fdc6 	bl	80007f4 <__aeabi_ddiv>
 800bc68:	f04f 0a02 	mov.w	sl, #2
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	460d      	mov	r5, r1
 800bc70:	e749      	b.n	800bb06 <atan+0xbe>
 800bc72:	4602      	mov	r2, r0
 800bc74:	460b      	mov	r3, r1
 800bc76:	2000      	movs	r0, #0
 800bc78:	4934      	ldr	r1, [pc, #208]	; (800bd4c <atan+0x304>)
 800bc7a:	f7f4 fdbb 	bl	80007f4 <__aeabi_ddiv>
 800bc7e:	f04f 0a03 	mov.w	sl, #3
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	e73e      	b.n	800bb06 <atan+0xbe>
 800bc88:	4b31      	ldr	r3, [pc, #196]	; (800bd50 <atan+0x308>)
 800bc8a:	4e32      	ldr	r6, [pc, #200]	; (800bd54 <atan+0x30c>)
 800bc8c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc90:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bc94:	e9da 2300 	ldrd	r2, r3, [sl]
 800bc98:	f7f4 faca 	bl	8000230 <__aeabi_dsub>
 800bc9c:	4622      	mov	r2, r4
 800bc9e:	462b      	mov	r3, r5
 800bca0:	f7f4 fac6 	bl	8000230 <__aeabi_dsub>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bcac:	f7f4 fac0 	bl	8000230 <__aeabi_dsub>
 800bcb0:	f1bb 0f00 	cmp.w	fp, #0
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	f6bf aee4 	bge.w	800ba84 <atan+0x3c>
 800bcbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcc0:	461d      	mov	r5, r3
 800bcc2:	e6df      	b.n	800ba84 <atan+0x3c>
 800bcc4:	4d24      	ldr	r5, [pc, #144]	; (800bd58 <atan+0x310>)
 800bcc6:	e6dd      	b.n	800ba84 <atan+0x3c>
 800bcc8:	8800759c 	.word	0x8800759c
 800bccc:	7e37e43c 	.word	0x7e37e43c
 800bcd0:	e322da11 	.word	0xe322da11
 800bcd4:	3f90ad3a 	.word	0x3f90ad3a
 800bcd8:	24760deb 	.word	0x24760deb
 800bcdc:	3fa97b4b 	.word	0x3fa97b4b
 800bce0:	a0d03d51 	.word	0xa0d03d51
 800bce4:	3fb10d66 	.word	0x3fb10d66
 800bce8:	c54c206e 	.word	0xc54c206e
 800bcec:	3fb745cd 	.word	0x3fb745cd
 800bcf0:	920083ff 	.word	0x920083ff
 800bcf4:	3fc24924 	.word	0x3fc24924
 800bcf8:	5555550d 	.word	0x5555550d
 800bcfc:	3fd55555 	.word	0x3fd55555
 800bd00:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd04:	bfa2b444 	.word	0xbfa2b444
 800bd08:	52defd9a 	.word	0x52defd9a
 800bd0c:	3fadde2d 	.word	0x3fadde2d
 800bd10:	af749a6d 	.word	0xaf749a6d
 800bd14:	3fb3b0f2 	.word	0x3fb3b0f2
 800bd18:	fe231671 	.word	0xfe231671
 800bd1c:	3fbc71c6 	.word	0x3fbc71c6
 800bd20:	9998ebc4 	.word	0x9998ebc4
 800bd24:	3fc99999 	.word	0x3fc99999
 800bd28:	440fffff 	.word	0x440fffff
 800bd2c:	7ff00000 	.word	0x7ff00000
 800bd30:	54442d18 	.word	0x54442d18
 800bd34:	bff921fb 	.word	0xbff921fb
 800bd38:	3fdbffff 	.word	0x3fdbffff
 800bd3c:	3ff00000 	.word	0x3ff00000
 800bd40:	3ff2ffff 	.word	0x3ff2ffff
 800bd44:	40038000 	.word	0x40038000
 800bd48:	3ff80000 	.word	0x3ff80000
 800bd4c:	bff00000 	.word	0xbff00000
 800bd50:	0800d5c0 	.word	0x0800d5c0
 800bd54:	0800d5a0 	.word	0x0800d5a0
 800bd58:	3ff921fb 	.word	0x3ff921fb

0800bd5c <cos>:
 800bd5c:	b530      	push	{r4, r5, lr}
 800bd5e:	4a20      	ldr	r2, [pc, #128]	; (800bde0 <cos+0x84>)
 800bd60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd64:	4293      	cmp	r3, r2
 800bd66:	b087      	sub	sp, #28
 800bd68:	dc06      	bgt.n	800bd78 <cos+0x1c>
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	b007      	add	sp, #28
 800bd70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd74:	f000 baa0 	b.w	800c2b8 <__kernel_cos>
 800bd78:	4a1a      	ldr	r2, [pc, #104]	; (800bde4 <cos+0x88>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	dd05      	ble.n	800bd8a <cos+0x2e>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	f7f4 fa55 	bl	8000230 <__aeabi_dsub>
 800bd86:	b007      	add	sp, #28
 800bd88:	bd30      	pop	{r4, r5, pc}
 800bd8a:	aa02      	add	r2, sp, #8
 800bd8c:	f000 f89c 	bl	800bec8 <__ieee754_rem_pio2>
 800bd90:	f000 0003 	and.w	r0, r0, #3
 800bd94:	2801      	cmp	r0, #1
 800bd96:	d009      	beq.n	800bdac <cos+0x50>
 800bd98:	2802      	cmp	r0, #2
 800bd9a:	d011      	beq.n	800bdc0 <cos+0x64>
 800bd9c:	b9b8      	cbnz	r0, 800bdce <cos+0x72>
 800bd9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda6:	f000 fa87 	bl	800c2b8 <__kernel_cos>
 800bdaa:	e7ec      	b.n	800bd86 <cos+0x2a>
 800bdac:	9000      	str	r0, [sp, #0]
 800bdae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb6:	f000 fe7f 	bl	800cab8 <__kernel_sin>
 800bdba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bdbe:	e7e2      	b.n	800bd86 <cos+0x2a>
 800bdc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc8:	f000 fa76 	bl	800c2b8 <__kernel_cos>
 800bdcc:	e7f5      	b.n	800bdba <cos+0x5e>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdda:	f000 fe6d 	bl	800cab8 <__kernel_sin>
 800bdde:	e7d2      	b.n	800bd86 <cos+0x2a>
 800bde0:	3fe921fb 	.word	0x3fe921fb
 800bde4:	7fefffff 	.word	0x7fefffff

0800bde8 <fabs>:
 800bde8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bdec:	4770      	bx	lr
	...

0800bdf0 <sin>:
 800bdf0:	b530      	push	{r4, r5, lr}
 800bdf2:	4a20      	ldr	r2, [pc, #128]	; (800be74 <sin+0x84>)
 800bdf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	dc06      	bgt.n	800be0c <sin+0x1c>
 800bdfe:	2300      	movs	r3, #0
 800be00:	2200      	movs	r2, #0
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	2300      	movs	r3, #0
 800be06:	f000 fe57 	bl	800cab8 <__kernel_sin>
 800be0a:	e006      	b.n	800be1a <sin+0x2a>
 800be0c:	4a1a      	ldr	r2, [pc, #104]	; (800be78 <sin+0x88>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	dd05      	ble.n	800be1e <sin+0x2e>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	f7f4 fa0b 	bl	8000230 <__aeabi_dsub>
 800be1a:	b007      	add	sp, #28
 800be1c:	bd30      	pop	{r4, r5, pc}
 800be1e:	aa02      	add	r2, sp, #8
 800be20:	f000 f852 	bl	800bec8 <__ieee754_rem_pio2>
 800be24:	f000 0003 	and.w	r0, r0, #3
 800be28:	2801      	cmp	r0, #1
 800be2a:	d009      	beq.n	800be40 <sin+0x50>
 800be2c:	2802      	cmp	r0, #2
 800be2e:	d00e      	beq.n	800be4e <sin+0x5e>
 800be30:	b9c0      	cbnz	r0, 800be64 <sin+0x74>
 800be32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be36:	2301      	movs	r3, #1
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be3e:	e7e2      	b.n	800be06 <sin+0x16>
 800be40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be48:	f000 fa36 	bl	800c2b8 <__kernel_cos>
 800be4c:	e7e5      	b.n	800be1a <sin+0x2a>
 800be4e:	2301      	movs	r3, #1
 800be50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be5a:	f000 fe2d 	bl	800cab8 <__kernel_sin>
 800be5e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be62:	e7da      	b.n	800be1a <sin+0x2a>
 800be64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be6c:	f000 fa24 	bl	800c2b8 <__kernel_cos>
 800be70:	e7f5      	b.n	800be5e <sin+0x6e>
 800be72:	bf00      	nop
 800be74:	3fe921fb 	.word	0x3fe921fb
 800be78:	7fefffff 	.word	0x7fefffff

0800be7c <roundf>:
 800be7c:	b508      	push	{r3, lr}
 800be7e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800be82:	3b7f      	subs	r3, #127	; 0x7f
 800be84:	2b16      	cmp	r3, #22
 800be86:	4601      	mov	r1, r0
 800be88:	4602      	mov	r2, r0
 800be8a:	dc14      	bgt.n	800beb6 <roundf+0x3a>
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	da07      	bge.n	800bea0 <roundf+0x24>
 800be90:	3301      	adds	r3, #1
 800be92:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800be96:	d101      	bne.n	800be9c <roundf+0x20>
 800be98:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800be9c:	4608      	mov	r0, r1
 800be9e:	bd08      	pop	{r3, pc}
 800bea0:	4808      	ldr	r0, [pc, #32]	; (800bec4 <roundf+0x48>)
 800bea2:	4118      	asrs	r0, r3
 800bea4:	4201      	tst	r1, r0
 800bea6:	d0f9      	beq.n	800be9c <roundf+0x20>
 800bea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800beac:	4119      	asrs	r1, r3
 800beae:	4411      	add	r1, r2
 800beb0:	ea21 0100 	bic.w	r1, r1, r0
 800beb4:	e7f2      	b.n	800be9c <roundf+0x20>
 800beb6:	2b80      	cmp	r3, #128	; 0x80
 800beb8:	d1f0      	bne.n	800be9c <roundf+0x20>
 800beba:	f7f4 fe89 	bl	8000bd0 <__addsf3>
 800bebe:	4601      	mov	r1, r0
 800bec0:	e7ec      	b.n	800be9c <roundf+0x20>
 800bec2:	bf00      	nop
 800bec4:	007fffff 	.word	0x007fffff

0800bec8 <__ieee754_rem_pio2>:
 800bec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	4614      	mov	r4, r2
 800bece:	4ac4      	ldr	r2, [pc, #784]	; (800c1e0 <__ieee754_rem_pio2+0x318>)
 800bed0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bed4:	b08d      	sub	sp, #52	; 0x34
 800bed6:	4592      	cmp	sl, r2
 800bed8:	9104      	str	r1, [sp, #16]
 800beda:	dc07      	bgt.n	800beec <__ieee754_rem_pio2+0x24>
 800bedc:	2200      	movs	r2, #0
 800bede:	2300      	movs	r3, #0
 800bee0:	e9c4 0100 	strd	r0, r1, [r4]
 800bee4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bee8:	2500      	movs	r5, #0
 800beea:	e024      	b.n	800bf36 <__ieee754_rem_pio2+0x6e>
 800beec:	4abd      	ldr	r2, [pc, #756]	; (800c1e4 <__ieee754_rem_pio2+0x31c>)
 800beee:	4592      	cmp	sl, r2
 800bef0:	dc72      	bgt.n	800bfd8 <__ieee754_rem_pio2+0x110>
 800bef2:	9b04      	ldr	r3, [sp, #16]
 800bef4:	4dbc      	ldr	r5, [pc, #752]	; (800c1e8 <__ieee754_rem_pio2+0x320>)
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	a3ab      	add	r3, pc, #684	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x2e0>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	dd36      	ble.n	800bf6e <__ieee754_rem_pio2+0xa6>
 800bf00:	f7f4 f996 	bl	8000230 <__aeabi_dsub>
 800bf04:	45aa      	cmp	sl, r5
 800bf06:	4606      	mov	r6, r0
 800bf08:	460f      	mov	r7, r1
 800bf0a:	d018      	beq.n	800bf3e <__ieee754_rem_pio2+0x76>
 800bf0c:	a3a8      	add	r3, pc, #672	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x2e8>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 f98d 	bl	8000230 <__aeabi_dsub>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	e9c4 2300 	strd	r2, r3, [r4]
 800bf20:	4639      	mov	r1, r7
 800bf22:	f7f4 f985 	bl	8000230 <__aeabi_dsub>
 800bf26:	a3a2      	add	r3, pc, #648	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x2e8>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	f7f4 f980 	bl	8000230 <__aeabi_dsub>
 800bf30:	2501      	movs	r5, #1
 800bf32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf36:	4628      	mov	r0, r5
 800bf38:	b00d      	add	sp, #52	; 0x34
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	a39e      	add	r3, pc, #632	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x2f0>)
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	f7f4 f974 	bl	8000230 <__aeabi_dsub>
 800bf48:	a39d      	add	r3, pc, #628	; (adr r3, 800c1c0 <__ieee754_rem_pio2+0x2f8>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	4606      	mov	r6, r0
 800bf50:	460f      	mov	r7, r1
 800bf52:	f7f4 f96d 	bl	8000230 <__aeabi_dsub>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	e9c4 2300 	strd	r2, r3, [r4]
 800bf60:	4639      	mov	r1, r7
 800bf62:	f7f4 f965 	bl	8000230 <__aeabi_dsub>
 800bf66:	a396      	add	r3, pc, #600	; (adr r3, 800c1c0 <__ieee754_rem_pio2+0x2f8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	e7de      	b.n	800bf2c <__ieee754_rem_pio2+0x64>
 800bf6e:	f7f4 f961 	bl	8000234 <__adddf3>
 800bf72:	45aa      	cmp	sl, r5
 800bf74:	4606      	mov	r6, r0
 800bf76:	460f      	mov	r7, r1
 800bf78:	d016      	beq.n	800bfa8 <__ieee754_rem_pio2+0xe0>
 800bf7a:	a38d      	add	r3, pc, #564	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x2e8>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 f958 	bl	8000234 <__adddf3>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4630      	mov	r0, r6
 800bf8a:	e9c4 2300 	strd	r2, r3, [r4]
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 f94e 	bl	8000230 <__aeabi_dsub>
 800bf94:	a386      	add	r3, pc, #536	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x2e8>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 f94b 	bl	8000234 <__adddf3>
 800bf9e:	f04f 35ff 	mov.w	r5, #4294967295
 800bfa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfa6:	e7c6      	b.n	800bf36 <__ieee754_rem_pio2+0x6e>
 800bfa8:	a383      	add	r3, pc, #524	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x2f0>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 f941 	bl	8000234 <__adddf3>
 800bfb2:	a383      	add	r3, pc, #524	; (adr r3, 800c1c0 <__ieee754_rem_pio2+0x2f8>)
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	4606      	mov	r6, r0
 800bfba:	460f      	mov	r7, r1
 800bfbc:	f7f4 f93a 	bl	8000234 <__adddf3>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	e9c4 2300 	strd	r2, r3, [r4]
 800bfca:	4639      	mov	r1, r7
 800bfcc:	f7f4 f930 	bl	8000230 <__aeabi_dsub>
 800bfd0:	a37b      	add	r3, pc, #492	; (adr r3, 800c1c0 <__ieee754_rem_pio2+0x2f8>)
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	e7e0      	b.n	800bf9a <__ieee754_rem_pio2+0xd2>
 800bfd8:	4a84      	ldr	r2, [pc, #528]	; (800c1ec <__ieee754_rem_pio2+0x324>)
 800bfda:	4592      	cmp	sl, r2
 800bfdc:	f300 80d5 	bgt.w	800c18a <__ieee754_rem_pio2+0x2c2>
 800bfe0:	f7ff ff02 	bl	800bde8 <fabs>
 800bfe4:	a378      	add	r3, pc, #480	; (adr r3, 800c1c8 <__ieee754_rem_pio2+0x300>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	4606      	mov	r6, r0
 800bfec:	460f      	mov	r7, r1
 800bfee:	f7f4 fad7 	bl	80005a0 <__aeabi_dmul>
 800bff2:	2200      	movs	r2, #0
 800bff4:	4b7e      	ldr	r3, [pc, #504]	; (800c1f0 <__ieee754_rem_pio2+0x328>)
 800bff6:	f7f4 f91d 	bl	8000234 <__adddf3>
 800bffa:	f7f4 fd6b 	bl	8000ad4 <__aeabi_d2iz>
 800bffe:	4605      	mov	r5, r0
 800c000:	f7f4 fa64 	bl	80004cc <__aeabi_i2d>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c00c:	a366      	add	r3, pc, #408	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x2e0>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 fac5 	bl	80005a0 <__aeabi_dmul>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 f907 	bl	8000230 <__aeabi_dsub>
 800c022:	a363      	add	r3, pc, #396	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x2e8>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	4680      	mov	r8, r0
 800c02a:	4689      	mov	r9, r1
 800c02c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c030:	f7f4 fab6 	bl	80005a0 <__aeabi_dmul>
 800c034:	2d1f      	cmp	r5, #31
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	dc0e      	bgt.n	800c05a <__ieee754_rem_pio2+0x192>
 800c03c:	4b6d      	ldr	r3, [pc, #436]	; (800c1f4 <__ieee754_rem_pio2+0x32c>)
 800c03e:	1e6a      	subs	r2, r5, #1
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	4553      	cmp	r3, sl
 800c046:	d008      	beq.n	800c05a <__ieee754_rem_pio2+0x192>
 800c048:	4632      	mov	r2, r6
 800c04a:	463b      	mov	r3, r7
 800c04c:	4640      	mov	r0, r8
 800c04e:	4649      	mov	r1, r9
 800c050:	f7f4 f8ee 	bl	8000230 <__aeabi_dsub>
 800c054:	e9c4 0100 	strd	r0, r1, [r4]
 800c058:	e013      	b.n	800c082 <__ieee754_rem_pio2+0x1ba>
 800c05a:	463b      	mov	r3, r7
 800c05c:	4632      	mov	r2, r6
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 f8e5 	bl	8000230 <__aeabi_dsub>
 800c066:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c06a:	9305      	str	r3, [sp, #20]
 800c06c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c070:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c074:	f1ba 0f10 	cmp.w	sl, #16
 800c078:	dc1f      	bgt.n	800c0ba <__ieee754_rem_pio2+0x1f2>
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	e9c4 2300 	strd	r2, r3, [r4]
 800c082:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c086:	4640      	mov	r0, r8
 800c088:	4653      	mov	r3, sl
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 f8d0 	bl	8000230 <__aeabi_dsub>
 800c090:	4632      	mov	r2, r6
 800c092:	463b      	mov	r3, r7
 800c094:	f7f4 f8cc 	bl	8000230 <__aeabi_dsub>
 800c098:	460b      	mov	r3, r1
 800c09a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c09e:	9904      	ldr	r1, [sp, #16]
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	2900      	cmp	r1, #0
 800c0a4:	f6bf af47 	bge.w	800bf36 <__ieee754_rem_pio2+0x6e>
 800c0a8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c0ac:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c0b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0b4:	60e3      	str	r3, [r4, #12]
 800c0b6:	426d      	negs	r5, r5
 800c0b8:	e73d      	b.n	800bf36 <__ieee754_rem_pio2+0x6e>
 800c0ba:	a33f      	add	r3, pc, #252	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x2f0>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c4:	f7f4 fa6c 	bl	80005a0 <__aeabi_dmul>
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	f7f4 f8ac 	bl	8000230 <__aeabi_dsub>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4682      	mov	sl, r0
 800c0de:	468b      	mov	fp, r1
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	f7f4 f8a4 	bl	8000230 <__aeabi_dsub>
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	f7f4 f8a0 	bl	8000230 <__aeabi_dsub>
 800c0f0:	a333      	add	r3, pc, #204	; (adr r3, 800c1c0 <__ieee754_rem_pio2+0x2f8>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fe:	f7f4 fa4f 	bl	80005a0 <__aeabi_dmul>
 800c102:	4632      	mov	r2, r6
 800c104:	463b      	mov	r3, r7
 800c106:	f7f4 f893 	bl	8000230 <__aeabi_dsub>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4606      	mov	r6, r0
 800c110:	460f      	mov	r7, r1
 800c112:	4650      	mov	r0, sl
 800c114:	4659      	mov	r1, fp
 800c116:	f7f4 f88b 	bl	8000230 <__aeabi_dsub>
 800c11a:	9a05      	ldr	r2, [sp, #20]
 800c11c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	2b31      	cmp	r3, #49	; 0x31
 800c124:	dc06      	bgt.n	800c134 <__ieee754_rem_pio2+0x26c>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	46d0      	mov	r8, sl
 800c12c:	46d9      	mov	r9, fp
 800c12e:	e9c4 2300 	strd	r2, r3, [r4]
 800c132:	e7a6      	b.n	800c082 <__ieee754_rem_pio2+0x1ba>
 800c134:	a326      	add	r3, pc, #152	; (adr r3, 800c1d0 <__ieee754_rem_pio2+0x308>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13e:	f7f4 fa2f 	bl	80005a0 <__aeabi_dmul>
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4650      	mov	r0, sl
 800c14c:	4659      	mov	r1, fp
 800c14e:	f7f4 f86f 	bl	8000230 <__aeabi_dsub>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4680      	mov	r8, r0
 800c158:	4689      	mov	r9, r1
 800c15a:	4650      	mov	r0, sl
 800c15c:	4659      	mov	r1, fp
 800c15e:	f7f4 f867 	bl	8000230 <__aeabi_dsub>
 800c162:	4632      	mov	r2, r6
 800c164:	463b      	mov	r3, r7
 800c166:	f7f4 f863 	bl	8000230 <__aeabi_dsub>
 800c16a:	a31b      	add	r3, pc, #108	; (adr r3, 800c1d8 <__ieee754_rem_pio2+0x310>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	4606      	mov	r6, r0
 800c172:	460f      	mov	r7, r1
 800c174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c178:	f7f4 fa12 	bl	80005a0 <__aeabi_dmul>
 800c17c:	4632      	mov	r2, r6
 800c17e:	463b      	mov	r3, r7
 800c180:	f7f4 f856 	bl	8000230 <__aeabi_dsub>
 800c184:	4606      	mov	r6, r0
 800c186:	460f      	mov	r7, r1
 800c188:	e75e      	b.n	800c048 <__ieee754_rem_pio2+0x180>
 800c18a:	4a1b      	ldr	r2, [pc, #108]	; (800c1f8 <__ieee754_rem_pio2+0x330>)
 800c18c:	4592      	cmp	sl, r2
 800c18e:	dd35      	ble.n	800c1fc <__ieee754_rem_pio2+0x334>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	f7f4 f84c 	bl	8000230 <__aeabi_dsub>
 800c198:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c19c:	e9c4 0100 	strd	r0, r1, [r4]
 800c1a0:	e6a2      	b.n	800bee8 <__ieee754_rem_pio2+0x20>
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
 800c1a8:	54400000 	.word	0x54400000
 800c1ac:	3ff921fb 	.word	0x3ff921fb
 800c1b0:	1a626331 	.word	0x1a626331
 800c1b4:	3dd0b461 	.word	0x3dd0b461
 800c1b8:	1a600000 	.word	0x1a600000
 800c1bc:	3dd0b461 	.word	0x3dd0b461
 800c1c0:	2e037073 	.word	0x2e037073
 800c1c4:	3ba3198a 	.word	0x3ba3198a
 800c1c8:	6dc9c883 	.word	0x6dc9c883
 800c1cc:	3fe45f30 	.word	0x3fe45f30
 800c1d0:	2e000000 	.word	0x2e000000
 800c1d4:	3ba3198a 	.word	0x3ba3198a
 800c1d8:	252049c1 	.word	0x252049c1
 800c1dc:	397b839a 	.word	0x397b839a
 800c1e0:	3fe921fb 	.word	0x3fe921fb
 800c1e4:	4002d97b 	.word	0x4002d97b
 800c1e8:	3ff921fb 	.word	0x3ff921fb
 800c1ec:	413921fb 	.word	0x413921fb
 800c1f0:	3fe00000 	.word	0x3fe00000
 800c1f4:	0800d5e0 	.word	0x0800d5e0
 800c1f8:	7fefffff 	.word	0x7fefffff
 800c1fc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c200:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c204:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c208:	460f      	mov	r7, r1
 800c20a:	4606      	mov	r6, r0
 800c20c:	f7f4 fc62 	bl	8000ad4 <__aeabi_d2iz>
 800c210:	f7f4 f95c 	bl	80004cc <__aeabi_i2d>
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	4630      	mov	r0, r6
 800c21a:	4639      	mov	r1, r7
 800c21c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c220:	f7f4 f806 	bl	8000230 <__aeabi_dsub>
 800c224:	2200      	movs	r2, #0
 800c226:	4b22      	ldr	r3, [pc, #136]	; (800c2b0 <__ieee754_rem_pio2+0x3e8>)
 800c228:	f7f4 f9ba 	bl	80005a0 <__aeabi_dmul>
 800c22c:	460f      	mov	r7, r1
 800c22e:	4606      	mov	r6, r0
 800c230:	f7f4 fc50 	bl	8000ad4 <__aeabi_d2iz>
 800c234:	f7f4 f94a 	bl	80004cc <__aeabi_i2d>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	4630      	mov	r0, r6
 800c23e:	4639      	mov	r1, r7
 800c240:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c244:	f7f3 fff4 	bl	8000230 <__aeabi_dsub>
 800c248:	2200      	movs	r2, #0
 800c24a:	4b19      	ldr	r3, [pc, #100]	; (800c2b0 <__ieee754_rem_pio2+0x3e8>)
 800c24c:	f7f4 f9a8 	bl	80005a0 <__aeabi_dmul>
 800c250:	f04f 0803 	mov.w	r8, #3
 800c254:	2600      	movs	r6, #0
 800c256:	2700      	movs	r7, #0
 800c258:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c25c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c260:	4632      	mov	r2, r6
 800c262:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c266:	463b      	mov	r3, r7
 800c268:	46c2      	mov	sl, r8
 800c26a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c26e:	f7f4 fbff 	bl	8000a70 <__aeabi_dcmpeq>
 800c272:	2800      	cmp	r0, #0
 800c274:	d1f4      	bne.n	800c260 <__ieee754_rem_pio2+0x398>
 800c276:	4b0f      	ldr	r3, [pc, #60]	; (800c2b4 <__ieee754_rem_pio2+0x3ec>)
 800c278:	462a      	mov	r2, r5
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	2302      	movs	r3, #2
 800c27e:	4621      	mov	r1, r4
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	a806      	add	r0, sp, #24
 800c284:	4653      	mov	r3, sl
 800c286:	f000 f8d5 	bl	800c434 <__kernel_rem_pio2>
 800c28a:	9b04      	ldr	r3, [sp, #16]
 800c28c:	4605      	mov	r5, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f6bf ae51 	bge.w	800bf36 <__ieee754_rem_pio2+0x6e>
 800c294:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c29c:	e9c4 2300 	strd	r2, r3, [r4]
 800c2a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c2ac:	e703      	b.n	800c0b6 <__ieee754_rem_pio2+0x1ee>
 800c2ae:	bf00      	nop
 800c2b0:	41700000 	.word	0x41700000
 800c2b4:	0800d660 	.word	0x0800d660

0800c2b8 <__kernel_cos>:
 800c2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c2c0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	460f      	mov	r7, r1
 800c2c8:	e9cd 2300 	strd	r2, r3, [sp]
 800c2cc:	da04      	bge.n	800c2d8 <__kernel_cos+0x20>
 800c2ce:	f7f4 fc01 	bl	8000ad4 <__aeabi_d2iz>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f000 8086 	beq.w	800c3e4 <__kernel_cos+0x12c>
 800c2d8:	4642      	mov	r2, r8
 800c2da:	463b      	mov	r3, r7
 800c2dc:	4640      	mov	r0, r8
 800c2de:	4639      	mov	r1, r7
 800c2e0:	f7f4 f95e 	bl	80005a0 <__aeabi_dmul>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	4b4e      	ldr	r3, [pc, #312]	; (800c420 <__kernel_cos+0x168>)
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	f7f4 f958 	bl	80005a0 <__aeabi_dmul>
 800c2f0:	a33f      	add	r3, pc, #252	; (adr r3, 800c3f0 <__kernel_cos+0x138>)
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	4682      	mov	sl, r0
 800c2f8:	468b      	mov	fp, r1
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7f4 f94f 	bl	80005a0 <__aeabi_dmul>
 800c302:	a33d      	add	r3, pc, #244	; (adr r3, 800c3f8 <__kernel_cos+0x140>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f7f3 ff94 	bl	8000234 <__adddf3>
 800c30c:	4622      	mov	r2, r4
 800c30e:	462b      	mov	r3, r5
 800c310:	f7f4 f946 	bl	80005a0 <__aeabi_dmul>
 800c314:	a33a      	add	r3, pc, #232	; (adr r3, 800c400 <__kernel_cos+0x148>)
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	f7f3 ff89 	bl	8000230 <__aeabi_dsub>
 800c31e:	4622      	mov	r2, r4
 800c320:	462b      	mov	r3, r5
 800c322:	f7f4 f93d 	bl	80005a0 <__aeabi_dmul>
 800c326:	a338      	add	r3, pc, #224	; (adr r3, 800c408 <__kernel_cos+0x150>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	f7f3 ff82 	bl	8000234 <__adddf3>
 800c330:	4622      	mov	r2, r4
 800c332:	462b      	mov	r3, r5
 800c334:	f7f4 f934 	bl	80005a0 <__aeabi_dmul>
 800c338:	a335      	add	r3, pc, #212	; (adr r3, 800c410 <__kernel_cos+0x158>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f7f3 ff77 	bl	8000230 <__aeabi_dsub>
 800c342:	4622      	mov	r2, r4
 800c344:	462b      	mov	r3, r5
 800c346:	f7f4 f92b 	bl	80005a0 <__aeabi_dmul>
 800c34a:	a333      	add	r3, pc, #204	; (adr r3, 800c418 <__kernel_cos+0x160>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f7f3 ff70 	bl	8000234 <__adddf3>
 800c354:	4622      	mov	r2, r4
 800c356:	462b      	mov	r3, r5
 800c358:	f7f4 f922 	bl	80005a0 <__aeabi_dmul>
 800c35c:	4622      	mov	r2, r4
 800c35e:	462b      	mov	r3, r5
 800c360:	f7f4 f91e 	bl	80005a0 <__aeabi_dmul>
 800c364:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c368:	4604      	mov	r4, r0
 800c36a:	460d      	mov	r5, r1
 800c36c:	4640      	mov	r0, r8
 800c36e:	4639      	mov	r1, r7
 800c370:	f7f4 f916 	bl	80005a0 <__aeabi_dmul>
 800c374:	460b      	mov	r3, r1
 800c376:	4602      	mov	r2, r0
 800c378:	4629      	mov	r1, r5
 800c37a:	4620      	mov	r0, r4
 800c37c:	f7f3 ff58 	bl	8000230 <__aeabi_dsub>
 800c380:	4b28      	ldr	r3, [pc, #160]	; (800c424 <__kernel_cos+0x16c>)
 800c382:	4680      	mov	r8, r0
 800c384:	429e      	cmp	r6, r3
 800c386:	4689      	mov	r9, r1
 800c388:	dc0e      	bgt.n	800c3a8 <__kernel_cos+0xf0>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	4650      	mov	r0, sl
 800c390:	4659      	mov	r1, fp
 800c392:	f7f3 ff4d 	bl	8000230 <__aeabi_dsub>
 800c396:	4602      	mov	r2, r0
 800c398:	2000      	movs	r0, #0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4922      	ldr	r1, [pc, #136]	; (800c428 <__kernel_cos+0x170>)
 800c39e:	f7f3 ff47 	bl	8000230 <__aeabi_dsub>
 800c3a2:	b003      	add	sp, #12
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	2400      	movs	r4, #0
 800c3aa:	4b20      	ldr	r3, [pc, #128]	; (800c42c <__kernel_cos+0x174>)
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	429e      	cmp	r6, r3
 800c3b0:	bfcc      	ite	gt
 800c3b2:	4d1f      	ldrgt	r5, [pc, #124]	; (800c430 <__kernel_cos+0x178>)
 800c3b4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c3b8:	462b      	mov	r3, r5
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	491a      	ldr	r1, [pc, #104]	; (800c428 <__kernel_cos+0x170>)
 800c3be:	f7f3 ff37 	bl	8000230 <__aeabi_dsub>
 800c3c2:	4622      	mov	r2, r4
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	460f      	mov	r7, r1
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	4650      	mov	r0, sl
 800c3cc:	4659      	mov	r1, fp
 800c3ce:	f7f3 ff2f 	bl	8000230 <__aeabi_dsub>
 800c3d2:	4642      	mov	r2, r8
 800c3d4:	464b      	mov	r3, r9
 800c3d6:	f7f3 ff2b 	bl	8000230 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	e7dc      	b.n	800c39e <__kernel_cos+0xe6>
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	4910      	ldr	r1, [pc, #64]	; (800c428 <__kernel_cos+0x170>)
 800c3e8:	e7db      	b.n	800c3a2 <__kernel_cos+0xea>
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	be8838d4 	.word	0xbe8838d4
 800c3f4:	bda8fae9 	.word	0xbda8fae9
 800c3f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c3fc:	3e21ee9e 	.word	0x3e21ee9e
 800c400:	809c52ad 	.word	0x809c52ad
 800c404:	3e927e4f 	.word	0x3e927e4f
 800c408:	19cb1590 	.word	0x19cb1590
 800c40c:	3efa01a0 	.word	0x3efa01a0
 800c410:	16c15177 	.word	0x16c15177
 800c414:	3f56c16c 	.word	0x3f56c16c
 800c418:	5555554c 	.word	0x5555554c
 800c41c:	3fa55555 	.word	0x3fa55555
 800c420:	3fe00000 	.word	0x3fe00000
 800c424:	3fd33332 	.word	0x3fd33332
 800c428:	3ff00000 	.word	0x3ff00000
 800c42c:	3fe90000 	.word	0x3fe90000
 800c430:	3fd20000 	.word	0x3fd20000

0800c434 <__kernel_rem_pio2>:
 800c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c438:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c43c:	9308      	str	r3, [sp, #32]
 800c43e:	9106      	str	r1, [sp, #24]
 800c440:	4bb6      	ldr	r3, [pc, #728]	; (800c71c <__kernel_rem_pio2+0x2e8>)
 800c442:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c444:	f112 0f14 	cmn.w	r2, #20
 800c448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c44c:	bfa8      	it	ge
 800c44e:	1ed4      	subge	r4, r2, #3
 800c450:	9302      	str	r3, [sp, #8]
 800c452:	9b08      	ldr	r3, [sp, #32]
 800c454:	bfb8      	it	lt
 800c456:	2400      	movlt	r4, #0
 800c458:	f103 33ff 	add.w	r3, r3, #4294967295
 800c45c:	9307      	str	r3, [sp, #28]
 800c45e:	bfa4      	itt	ge
 800c460:	2318      	movge	r3, #24
 800c462:	fb94 f4f3 	sdivge	r4, r4, r3
 800c466:	f06f 0317 	mvn.w	r3, #23
 800c46a:	fb04 3303 	mla	r3, r4, r3, r3
 800c46e:	eb03 0b02 	add.w	fp, r3, r2
 800c472:	9a07      	ldr	r2, [sp, #28]
 800c474:	9b02      	ldr	r3, [sp, #8]
 800c476:	1aa7      	subs	r7, r4, r2
 800c478:	eb03 0802 	add.w	r8, r3, r2
 800c47c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c47e:	2500      	movs	r5, #0
 800c480:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c484:	2200      	movs	r2, #0
 800c486:	2300      	movs	r3, #0
 800c488:	9009      	str	r0, [sp, #36]	; 0x24
 800c48a:	ae20      	add	r6, sp, #128	; 0x80
 800c48c:	4545      	cmp	r5, r8
 800c48e:	dd14      	ble.n	800c4ba <__kernel_rem_pio2+0x86>
 800c490:	f04f 0800 	mov.w	r8, #0
 800c494:	9a08      	ldr	r2, [sp, #32]
 800c496:	ab20      	add	r3, sp, #128	; 0x80
 800c498:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c49c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c4a0:	9b02      	ldr	r3, [sp, #8]
 800c4a2:	4598      	cmp	r8, r3
 800c4a4:	dc35      	bgt.n	800c512 <__kernel_rem_pio2+0xde>
 800c4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f1a3 0908 	sub.w	r9, r3, #8
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	462f      	mov	r7, r5
 800c4b2:	2600      	movs	r6, #0
 800c4b4:	e9cd 2300 	strd	r2, r3, [sp]
 800c4b8:	e01f      	b.n	800c4fa <__kernel_rem_pio2+0xc6>
 800c4ba:	42ef      	cmn	r7, r5
 800c4bc:	d40b      	bmi.n	800c4d6 <__kernel_rem_pio2+0xa2>
 800c4be:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c4c2:	e9cd 2300 	strd	r2, r3, [sp]
 800c4c6:	f7f4 f801 	bl	80004cc <__aeabi_i2d>
 800c4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ce:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c4d2:	3501      	adds	r5, #1
 800c4d4:	e7da      	b.n	800c48c <__kernel_rem_pio2+0x58>
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	e7f8      	b.n	800c4ce <__kernel_rem_pio2+0x9a>
 800c4dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c4e4:	f7f4 f85c 	bl	80005a0 <__aeabi_dmul>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4f0:	f7f3 fea0 	bl	8000234 <__adddf3>
 800c4f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c4f8:	3601      	adds	r6, #1
 800c4fa:	9b07      	ldr	r3, [sp, #28]
 800c4fc:	3f08      	subs	r7, #8
 800c4fe:	429e      	cmp	r6, r3
 800c500:	ddec      	ble.n	800c4dc <__kernel_rem_pio2+0xa8>
 800c502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c506:	f108 0801 	add.w	r8, r8, #1
 800c50a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c50e:	3508      	adds	r5, #8
 800c510:	e7c6      	b.n	800c4a0 <__kernel_rem_pio2+0x6c>
 800c512:	9b02      	ldr	r3, [sp, #8]
 800c514:	aa0c      	add	r2, sp, #48	; 0x30
 800c516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c51c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c51e:	9e02      	ldr	r6, [sp, #8]
 800c520:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c524:	930a      	str	r3, [sp, #40]	; 0x28
 800c526:	ab98      	add	r3, sp, #608	; 0x260
 800c528:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c52c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c530:	ab70      	add	r3, sp, #448	; 0x1c0
 800c532:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c536:	46d0      	mov	r8, sl
 800c538:	46b1      	mov	r9, r6
 800c53a:	af0c      	add	r7, sp, #48	; 0x30
 800c53c:	9700      	str	r7, [sp, #0]
 800c53e:	f1b9 0f00 	cmp.w	r9, #0
 800c542:	f1a8 0808 	sub.w	r8, r8, #8
 800c546:	dc71      	bgt.n	800c62c <__kernel_rem_pio2+0x1f8>
 800c548:	465a      	mov	r2, fp
 800c54a:	4620      	mov	r0, r4
 800c54c:	4629      	mov	r1, r5
 800c54e:	f000 fbeb 	bl	800cd28 <scalbn>
 800c552:	2200      	movs	r2, #0
 800c554:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c558:	4604      	mov	r4, r0
 800c55a:	460d      	mov	r5, r1
 800c55c:	f7f4 f820 	bl	80005a0 <__aeabi_dmul>
 800c560:	f000 fb62 	bl	800cc28 <floor>
 800c564:	2200      	movs	r2, #0
 800c566:	4b6e      	ldr	r3, [pc, #440]	; (800c720 <__kernel_rem_pio2+0x2ec>)
 800c568:	f7f4 f81a 	bl	80005a0 <__aeabi_dmul>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	4620      	mov	r0, r4
 800c572:	4629      	mov	r1, r5
 800c574:	f7f3 fe5c 	bl	8000230 <__aeabi_dsub>
 800c578:	460d      	mov	r5, r1
 800c57a:	4604      	mov	r4, r0
 800c57c:	f7f4 faaa 	bl	8000ad4 <__aeabi_d2iz>
 800c580:	9004      	str	r0, [sp, #16]
 800c582:	f7f3 ffa3 	bl	80004cc <__aeabi_i2d>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4620      	mov	r0, r4
 800c58c:	4629      	mov	r1, r5
 800c58e:	f7f3 fe4f 	bl	8000230 <__aeabi_dsub>
 800c592:	f1bb 0f00 	cmp.w	fp, #0
 800c596:	4680      	mov	r8, r0
 800c598:	4689      	mov	r9, r1
 800c59a:	dd70      	ble.n	800c67e <__kernel_rem_pio2+0x24a>
 800c59c:	1e72      	subs	r2, r6, #1
 800c59e:	ab0c      	add	r3, sp, #48	; 0x30
 800c5a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c5a4:	9c04      	ldr	r4, [sp, #16]
 800c5a6:	f1cb 0118 	rsb	r1, fp, #24
 800c5aa:	fa40 f301 	asr.w	r3, r0, r1
 800c5ae:	441c      	add	r4, r3
 800c5b0:	408b      	lsls	r3, r1
 800c5b2:	1ac0      	subs	r0, r0, r3
 800c5b4:	ab0c      	add	r3, sp, #48	; 0x30
 800c5b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c5ba:	f1cb 0317 	rsb	r3, fp, #23
 800c5be:	9404      	str	r4, [sp, #16]
 800c5c0:	fa40 f303 	asr.w	r3, r0, r3
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	9b00      	ldr	r3, [sp, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dd66      	ble.n	800c69a <__kernel_rem_pio2+0x266>
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c5d2:	4614      	mov	r4, r2
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	4296      	cmp	r6, r2
 800c5dc:	f300 80ac 	bgt.w	800c738 <__kernel_rem_pio2+0x304>
 800c5e0:	f1bb 0f00 	cmp.w	fp, #0
 800c5e4:	dd07      	ble.n	800c5f6 <__kernel_rem_pio2+0x1c2>
 800c5e6:	f1bb 0f01 	cmp.w	fp, #1
 800c5ea:	f000 80b4 	beq.w	800c756 <__kernel_rem_pio2+0x322>
 800c5ee:	f1bb 0f02 	cmp.w	fp, #2
 800c5f2:	f000 80ba 	beq.w	800c76a <__kernel_rem_pio2+0x336>
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d14e      	bne.n	800c69a <__kernel_rem_pio2+0x266>
 800c5fc:	4642      	mov	r2, r8
 800c5fe:	464b      	mov	r3, r9
 800c600:	2000      	movs	r0, #0
 800c602:	4948      	ldr	r1, [pc, #288]	; (800c724 <__kernel_rem_pio2+0x2f0>)
 800c604:	f7f3 fe14 	bl	8000230 <__aeabi_dsub>
 800c608:	4680      	mov	r8, r0
 800c60a:	4689      	mov	r9, r1
 800c60c:	2c00      	cmp	r4, #0
 800c60e:	d044      	beq.n	800c69a <__kernel_rem_pio2+0x266>
 800c610:	465a      	mov	r2, fp
 800c612:	2000      	movs	r0, #0
 800c614:	4943      	ldr	r1, [pc, #268]	; (800c724 <__kernel_rem_pio2+0x2f0>)
 800c616:	f000 fb87 	bl	800cd28 <scalbn>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4640      	mov	r0, r8
 800c620:	4649      	mov	r1, r9
 800c622:	f7f3 fe05 	bl	8000230 <__aeabi_dsub>
 800c626:	4680      	mov	r8, r0
 800c628:	4689      	mov	r9, r1
 800c62a:	e036      	b.n	800c69a <__kernel_rem_pio2+0x266>
 800c62c:	2200      	movs	r2, #0
 800c62e:	4b3e      	ldr	r3, [pc, #248]	; (800c728 <__kernel_rem_pio2+0x2f4>)
 800c630:	4620      	mov	r0, r4
 800c632:	4629      	mov	r1, r5
 800c634:	f7f3 ffb4 	bl	80005a0 <__aeabi_dmul>
 800c638:	f7f4 fa4c 	bl	8000ad4 <__aeabi_d2iz>
 800c63c:	f7f3 ff46 	bl	80004cc <__aeabi_i2d>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c648:	2200      	movs	r2, #0
 800c64a:	4b38      	ldr	r3, [pc, #224]	; (800c72c <__kernel_rem_pio2+0x2f8>)
 800c64c:	f7f3 ffa8 	bl	80005a0 <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 fdea 	bl	8000230 <__aeabi_dsub>
 800c65c:	f7f4 fa3a 	bl	8000ad4 <__aeabi_d2iz>
 800c660:	9b00      	ldr	r3, [sp, #0]
 800c662:	f109 39ff 	add.w	r9, r9, #4294967295
 800c666:	f843 0b04 	str.w	r0, [r3], #4
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c670:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c674:	f7f3 fdde 	bl	8000234 <__adddf3>
 800c678:	4604      	mov	r4, r0
 800c67a:	460d      	mov	r5, r1
 800c67c:	e75f      	b.n	800c53e <__kernel_rem_pio2+0x10a>
 800c67e:	d105      	bne.n	800c68c <__kernel_rem_pio2+0x258>
 800c680:	1e73      	subs	r3, r6, #1
 800c682:	aa0c      	add	r2, sp, #48	; 0x30
 800c684:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c688:	15c3      	asrs	r3, r0, #23
 800c68a:	e79b      	b.n	800c5c4 <__kernel_rem_pio2+0x190>
 800c68c:	2200      	movs	r2, #0
 800c68e:	4b28      	ldr	r3, [pc, #160]	; (800c730 <__kernel_rem_pio2+0x2fc>)
 800c690:	f7f4 fa0c 	bl	8000aac <__aeabi_dcmpge>
 800c694:	2800      	cmp	r0, #0
 800c696:	d13e      	bne.n	800c716 <__kernel_rem_pio2+0x2e2>
 800c698:	9000      	str	r0, [sp, #0]
 800c69a:	2200      	movs	r2, #0
 800c69c:	2300      	movs	r3, #0
 800c69e:	4640      	mov	r0, r8
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	f7f4 f9e5 	bl	8000a70 <__aeabi_dcmpeq>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f000 80b1 	beq.w	800c80e <__kernel_rem_pio2+0x3da>
 800c6ac:	1e74      	subs	r4, r6, #1
 800c6ae:	4623      	mov	r3, r4
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	9902      	ldr	r1, [sp, #8]
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	da5f      	bge.n	800c778 <__kernel_rem_pio2+0x344>
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	d074      	beq.n	800c7a6 <__kernel_rem_pio2+0x372>
 800c6bc:	ab0c      	add	r3, sp, #48	; 0x30
 800c6be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c6c2:	f1ab 0b18 	sub.w	fp, fp, #24
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 809f 	beq.w	800c80a <__kernel_rem_pio2+0x3d6>
 800c6cc:	465a      	mov	r2, fp
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	4914      	ldr	r1, [pc, #80]	; (800c724 <__kernel_rem_pio2+0x2f0>)
 800c6d2:	f000 fb29 	bl	800cd28 <scalbn>
 800c6d6:	46a2      	mov	sl, r4
 800c6d8:	4606      	mov	r6, r0
 800c6da:	460f      	mov	r7, r1
 800c6dc:	f04f 0800 	mov.w	r8, #0
 800c6e0:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6e2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c728 <__kernel_rem_pio2+0x2f4>
 800c6e6:	00e5      	lsls	r5, r4, #3
 800c6e8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c6ec:	f1ba 0f00 	cmp.w	sl, #0
 800c6f0:	f280 80c3 	bge.w	800c87a <__kernel_rem_pio2+0x446>
 800c6f4:	4626      	mov	r6, r4
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	f2c0 80f5 	blt.w	800c8e6 <__kernel_rem_pio2+0x4b2>
 800c6fc:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <__kernel_rem_pio2+0x300>)
 800c6fe:	f04f 0a00 	mov.w	sl, #0
 800c702:	9307      	str	r3, [sp, #28]
 800c704:	ab70      	add	r3, sp, #448	; 0x1c0
 800c706:	f04f 0b00 	mov.w	fp, #0
 800c70a:	f04f 0800 	mov.w	r8, #0
 800c70e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c712:	1ba7      	subs	r7, r4, r6
 800c714:	e0db      	b.n	800c8ce <__kernel_rem_pio2+0x49a>
 800c716:	2302      	movs	r3, #2
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	e757      	b.n	800c5cc <__kernel_rem_pio2+0x198>
 800c71c:	0800d7a8 	.word	0x0800d7a8
 800c720:	40200000 	.word	0x40200000
 800c724:	3ff00000 	.word	0x3ff00000
 800c728:	3e700000 	.word	0x3e700000
 800c72c:	41700000 	.word	0x41700000
 800c730:	3fe00000 	.word	0x3fe00000
 800c734:	0800d768 	.word	0x0800d768
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	b944      	cbnz	r4, 800c74e <__kernel_rem_pio2+0x31a>
 800c73c:	b11b      	cbz	r3, 800c746 <__kernel_rem_pio2+0x312>
 800c73e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c742:	603b      	str	r3, [r7, #0]
 800c744:	2301      	movs	r3, #1
 800c746:	461c      	mov	r4, r3
 800c748:	3201      	adds	r2, #1
 800c74a:	3704      	adds	r7, #4
 800c74c:	e745      	b.n	800c5da <__kernel_rem_pio2+0x1a6>
 800c74e:	1acb      	subs	r3, r1, r3
 800c750:	603b      	str	r3, [r7, #0]
 800c752:	4623      	mov	r3, r4
 800c754:	e7f7      	b.n	800c746 <__kernel_rem_pio2+0x312>
 800c756:	1e72      	subs	r2, r6, #1
 800c758:	ab0c      	add	r3, sp, #48	; 0x30
 800c75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c762:	a90c      	add	r1, sp, #48	; 0x30
 800c764:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c768:	e745      	b.n	800c5f6 <__kernel_rem_pio2+0x1c2>
 800c76a:	1e72      	subs	r2, r6, #1
 800c76c:	ab0c      	add	r3, sp, #48	; 0x30
 800c76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c772:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c776:	e7f4      	b.n	800c762 <__kernel_rem_pio2+0x32e>
 800c778:	a90c      	add	r1, sp, #48	; 0x30
 800c77a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c77e:	3b01      	subs	r3, #1
 800c780:	430a      	orrs	r2, r1
 800c782:	e796      	b.n	800c6b2 <__kernel_rem_pio2+0x27e>
 800c784:	3401      	adds	r4, #1
 800c786:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c78a:	2a00      	cmp	r2, #0
 800c78c:	d0fa      	beq.n	800c784 <__kernel_rem_pio2+0x350>
 800c78e:	9b08      	ldr	r3, [sp, #32]
 800c790:	f106 0801 	add.w	r8, r6, #1
 800c794:	18f5      	adds	r5, r6, r3
 800c796:	ab20      	add	r3, sp, #128	; 0x80
 800c798:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c79c:	4434      	add	r4, r6
 800c79e:	4544      	cmp	r4, r8
 800c7a0:	da04      	bge.n	800c7ac <__kernel_rem_pio2+0x378>
 800c7a2:	4626      	mov	r6, r4
 800c7a4:	e6bf      	b.n	800c526 <__kernel_rem_pio2+0xf2>
 800c7a6:	2401      	movs	r4, #1
 800c7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7aa:	e7ec      	b.n	800c786 <__kernel_rem_pio2+0x352>
 800c7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ae:	f04f 0900 	mov.w	r9, #0
 800c7b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c7b6:	f7f3 fe89 	bl	80004cc <__aeabi_i2d>
 800c7ba:	2600      	movs	r6, #0
 800c7bc:	2700      	movs	r7, #0
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	e9c5 0100 	strd	r0, r1, [r5]
 800c7c4:	3b08      	subs	r3, #8
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	9504      	str	r5, [sp, #16]
 800c7ca:	9b07      	ldr	r3, [sp, #28]
 800c7cc:	4599      	cmp	r9, r3
 800c7ce:	dd05      	ble.n	800c7dc <__kernel_rem_pio2+0x3a8>
 800c7d0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c7d4:	f108 0801 	add.w	r8, r8, #1
 800c7d8:	3508      	adds	r5, #8
 800c7da:	e7e0      	b.n	800c79e <__kernel_rem_pio2+0x36a>
 800c7dc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c7e0:	9900      	ldr	r1, [sp, #0]
 800c7e2:	f109 0901 	add.w	r9, r9, #1
 800c7e6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c7ea:	9100      	str	r1, [sp, #0]
 800c7ec:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c7f0:	f8cd c010 	str.w	ip, [sp, #16]
 800c7f4:	f7f3 fed4 	bl	80005a0 <__aeabi_dmul>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	4639      	mov	r1, r7
 800c800:	f7f3 fd18 	bl	8000234 <__adddf3>
 800c804:	4606      	mov	r6, r0
 800c806:	460f      	mov	r7, r1
 800c808:	e7df      	b.n	800c7ca <__kernel_rem_pio2+0x396>
 800c80a:	3c01      	subs	r4, #1
 800c80c:	e756      	b.n	800c6bc <__kernel_rem_pio2+0x288>
 800c80e:	f1cb 0200 	rsb	r2, fp, #0
 800c812:	4640      	mov	r0, r8
 800c814:	4649      	mov	r1, r9
 800c816:	f000 fa87 	bl	800cd28 <scalbn>
 800c81a:	2200      	movs	r2, #0
 800c81c:	4ba4      	ldr	r3, [pc, #656]	; (800cab0 <__kernel_rem_pio2+0x67c>)
 800c81e:	4604      	mov	r4, r0
 800c820:	460d      	mov	r5, r1
 800c822:	f7f4 f943 	bl	8000aac <__aeabi_dcmpge>
 800c826:	b1f8      	cbz	r0, 800c868 <__kernel_rem_pio2+0x434>
 800c828:	2200      	movs	r2, #0
 800c82a:	4ba2      	ldr	r3, [pc, #648]	; (800cab4 <__kernel_rem_pio2+0x680>)
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 feb6 	bl	80005a0 <__aeabi_dmul>
 800c834:	f7f4 f94e 	bl	8000ad4 <__aeabi_d2iz>
 800c838:	4607      	mov	r7, r0
 800c83a:	f7f3 fe47 	bl	80004cc <__aeabi_i2d>
 800c83e:	2200      	movs	r2, #0
 800c840:	4b9b      	ldr	r3, [pc, #620]	; (800cab0 <__kernel_rem_pio2+0x67c>)
 800c842:	f7f3 fead 	bl	80005a0 <__aeabi_dmul>
 800c846:	460b      	mov	r3, r1
 800c848:	4602      	mov	r2, r0
 800c84a:	4629      	mov	r1, r5
 800c84c:	4620      	mov	r0, r4
 800c84e:	f7f3 fcef 	bl	8000230 <__aeabi_dsub>
 800c852:	f7f4 f93f 	bl	8000ad4 <__aeabi_d2iz>
 800c856:	1c74      	adds	r4, r6, #1
 800c858:	ab0c      	add	r3, sp, #48	; 0x30
 800c85a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c85e:	f10b 0b18 	add.w	fp, fp, #24
 800c862:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c866:	e731      	b.n	800c6cc <__kernel_rem_pio2+0x298>
 800c868:	4620      	mov	r0, r4
 800c86a:	4629      	mov	r1, r5
 800c86c:	f7f4 f932 	bl	8000ad4 <__aeabi_d2iz>
 800c870:	ab0c      	add	r3, sp, #48	; 0x30
 800c872:	4634      	mov	r4, r6
 800c874:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c878:	e728      	b.n	800c6cc <__kernel_rem_pio2+0x298>
 800c87a:	ab0c      	add	r3, sp, #48	; 0x30
 800c87c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c880:	f7f3 fe24 	bl	80004cc <__aeabi_i2d>
 800c884:	4632      	mov	r2, r6
 800c886:	463b      	mov	r3, r7
 800c888:	f7f3 fe8a 	bl	80005a0 <__aeabi_dmul>
 800c88c:	4642      	mov	r2, r8
 800c88e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c892:	464b      	mov	r3, r9
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f3 fe82 	bl	80005a0 <__aeabi_dmul>
 800c89c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	e722      	b.n	800c6ec <__kernel_rem_pio2+0x2b8>
 800c8a6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c8aa:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c8ae:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c8b2:	f8cd c01c 	str.w	ip, [sp, #28]
 800c8b6:	f7f3 fe73 	bl	80005a0 <__aeabi_dmul>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4650      	mov	r0, sl
 800c8c0:	4659      	mov	r1, fp
 800c8c2:	f7f3 fcb7 	bl	8000234 <__adddf3>
 800c8c6:	4682      	mov	sl, r0
 800c8c8:	468b      	mov	fp, r1
 800c8ca:	f108 0801 	add.w	r8, r8, #1
 800c8ce:	9b02      	ldr	r3, [sp, #8]
 800c8d0:	4598      	cmp	r8, r3
 800c8d2:	dc01      	bgt.n	800c8d8 <__kernel_rem_pio2+0x4a4>
 800c8d4:	45b8      	cmp	r8, r7
 800c8d6:	dde6      	ble.n	800c8a6 <__kernel_rem_pio2+0x472>
 800c8d8:	ab48      	add	r3, sp, #288	; 0x120
 800c8da:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c8de:	e9c7 ab00 	strd	sl, fp, [r7]
 800c8e2:	3e01      	subs	r6, #1
 800c8e4:	e707      	b.n	800c6f6 <__kernel_rem_pio2+0x2c2>
 800c8e6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	dc09      	bgt.n	800c900 <__kernel_rem_pio2+0x4cc>
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dc32      	bgt.n	800c956 <__kernel_rem_pio2+0x522>
 800c8f0:	d05a      	beq.n	800c9a8 <__kernel_rem_pio2+0x574>
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	f003 0007 	and.w	r0, r3, #7
 800c8f8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c900:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c902:	2b03      	cmp	r3, #3
 800c904:	d1f5      	bne.n	800c8f2 <__kernel_rem_pio2+0x4be>
 800c906:	ab48      	add	r3, sp, #288	; 0x120
 800c908:	441d      	add	r5, r3
 800c90a:	46aa      	mov	sl, r5
 800c90c:	46a3      	mov	fp, r4
 800c90e:	f1bb 0f00 	cmp.w	fp, #0
 800c912:	dc76      	bgt.n	800ca02 <__kernel_rem_pio2+0x5ce>
 800c914:	46aa      	mov	sl, r5
 800c916:	46a3      	mov	fp, r4
 800c918:	f1bb 0f01 	cmp.w	fp, #1
 800c91c:	f300 8090 	bgt.w	800ca40 <__kernel_rem_pio2+0x60c>
 800c920:	2700      	movs	r7, #0
 800c922:	463e      	mov	r6, r7
 800c924:	2c01      	cmp	r4, #1
 800c926:	f300 80aa 	bgt.w	800ca7e <__kernel_rem_pio2+0x64a>
 800c92a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c92e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c932:	9b00      	ldr	r3, [sp, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f040 80ac 	bne.w	800ca92 <__kernel_rem_pio2+0x65e>
 800c93a:	4603      	mov	r3, r0
 800c93c:	462a      	mov	r2, r5
 800c93e:	9806      	ldr	r0, [sp, #24]
 800c940:	e9c0 2300 	strd	r2, r3, [r0]
 800c944:	4622      	mov	r2, r4
 800c946:	460b      	mov	r3, r1
 800c948:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c94c:	463a      	mov	r2, r7
 800c94e:	4633      	mov	r3, r6
 800c950:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c954:	e7cd      	b.n	800c8f2 <__kernel_rem_pio2+0x4be>
 800c956:	2000      	movs	r0, #0
 800c958:	46a0      	mov	r8, r4
 800c95a:	4601      	mov	r1, r0
 800c95c:	ab48      	add	r3, sp, #288	; 0x120
 800c95e:	441d      	add	r5, r3
 800c960:	f1b8 0f00 	cmp.w	r8, #0
 800c964:	da3a      	bge.n	800c9dc <__kernel_rem_pio2+0x5a8>
 800c966:	9b00      	ldr	r3, [sp, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d03e      	beq.n	800c9ea <__kernel_rem_pio2+0x5b6>
 800c96c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c970:	4602      	mov	r2, r0
 800c972:	462b      	mov	r3, r5
 800c974:	9d06      	ldr	r5, [sp, #24]
 800c976:	2601      	movs	r6, #1
 800c978:	e9c5 2300 	strd	r2, r3, [r5]
 800c97c:	460b      	mov	r3, r1
 800c97e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c982:	f7f3 fc55 	bl	8000230 <__aeabi_dsub>
 800c986:	4684      	mov	ip, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	ad48      	add	r5, sp, #288	; 0x120
 800c98c:	42b4      	cmp	r4, r6
 800c98e:	f105 0508 	add.w	r5, r5, #8
 800c992:	da2c      	bge.n	800c9ee <__kernel_rem_pio2+0x5ba>
 800c994:	9b00      	ldr	r3, [sp, #0]
 800c996:	b10b      	cbz	r3, 800c99c <__kernel_rem_pio2+0x568>
 800c998:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c99c:	4662      	mov	r2, ip
 800c99e:	463b      	mov	r3, r7
 800c9a0:	9906      	ldr	r1, [sp, #24]
 800c9a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c9a6:	e7a4      	b.n	800c8f2 <__kernel_rem_pio2+0x4be>
 800c9a8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c9aa:	ab48      	add	r3, sp, #288	; 0x120
 800c9ac:	4637      	mov	r7, r6
 800c9ae:	441d      	add	r5, r3
 800c9b0:	2c00      	cmp	r4, #0
 800c9b2:	da09      	bge.n	800c9c8 <__kernel_rem_pio2+0x594>
 800c9b4:	9b00      	ldr	r3, [sp, #0]
 800c9b6:	b10b      	cbz	r3, 800c9bc <__kernel_rem_pio2+0x588>
 800c9b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c9bc:	4632      	mov	r2, r6
 800c9be:	463b      	mov	r3, r7
 800c9c0:	9906      	ldr	r1, [sp, #24]
 800c9c2:	e9c1 2300 	strd	r2, r3, [r1]
 800c9c6:	e794      	b.n	800c8f2 <__kernel_rem_pio2+0x4be>
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	f7f3 fc30 	bl	8000234 <__adddf3>
 800c9d4:	3c01      	subs	r4, #1
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	460f      	mov	r7, r1
 800c9da:	e7e9      	b.n	800c9b0 <__kernel_rem_pio2+0x57c>
 800c9dc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c9e0:	f7f3 fc28 	bl	8000234 <__adddf3>
 800c9e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9e8:	e7ba      	b.n	800c960 <__kernel_rem_pio2+0x52c>
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	e7c0      	b.n	800c970 <__kernel_rem_pio2+0x53c>
 800c9ee:	4660      	mov	r0, ip
 800c9f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	f7f3 fc1d 	bl	8000234 <__adddf3>
 800c9fa:	3601      	adds	r6, #1
 800c9fc:	4684      	mov	ip, r0
 800c9fe:	460f      	mov	r7, r1
 800ca00:	e7c4      	b.n	800c98c <__kernel_rem_pio2+0x558>
 800ca02:	e9da 6700 	ldrd	r6, r7, [sl]
 800ca06:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ca0a:	4632      	mov	r2, r6
 800ca0c:	463b      	mov	r3, r7
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f7f3 fc0f 	bl	8000234 <__adddf3>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca1e:	4640      	mov	r0, r8
 800ca20:	4649      	mov	r1, r9
 800ca22:	f7f3 fc05 	bl	8000230 <__aeabi_dsub>
 800ca26:	4632      	mov	r2, r6
 800ca28:	463b      	mov	r3, r7
 800ca2a:	f7f3 fc03 	bl	8000234 <__adddf3>
 800ca2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca32:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ca36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca3a:	e9ca 2300 	strd	r2, r3, [sl]
 800ca3e:	e766      	b.n	800c90e <__kernel_rem_pio2+0x4da>
 800ca40:	e9da 8900 	ldrd	r8, r9, [sl]
 800ca44:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ca48:	4642      	mov	r2, r8
 800ca4a:	464b      	mov	r3, r9
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f7f3 fbf0 	bl	8000234 <__adddf3>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4639      	mov	r1, r7
 800ca60:	f7f3 fbe6 	bl	8000230 <__aeabi_dsub>
 800ca64:	4642      	mov	r2, r8
 800ca66:	464b      	mov	r3, r9
 800ca68:	f7f3 fbe4 	bl	8000234 <__adddf3>
 800ca6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca70:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ca74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca78:	e9ca 2300 	strd	r2, r3, [sl]
 800ca7c:	e74c      	b.n	800c918 <__kernel_rem_pio2+0x4e4>
 800ca7e:	4638      	mov	r0, r7
 800ca80:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ca84:	4631      	mov	r1, r6
 800ca86:	f7f3 fbd5 	bl	8000234 <__adddf3>
 800ca8a:	3c01      	subs	r4, #1
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	460e      	mov	r6, r1
 800ca90:	e748      	b.n	800c924 <__kernel_rem_pio2+0x4f0>
 800ca92:	9b06      	ldr	r3, [sp, #24]
 800ca94:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca98:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ca9c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800caa0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800caa4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800caa8:	601d      	str	r5, [r3, #0]
 800caaa:	615e      	str	r6, [r3, #20]
 800caac:	e721      	b.n	800c8f2 <__kernel_rem_pio2+0x4be>
 800caae:	bf00      	nop
 800cab0:	41700000 	.word	0x41700000
 800cab4:	3e700000 	.word	0x3e700000

0800cab8 <__kernel_sin>:
 800cab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cabc:	b086      	sub	sp, #24
 800cabe:	e9cd 2300 	strd	r2, r3, [sp]
 800cac2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cac6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800caca:	4682      	mov	sl, r0
 800cacc:	460c      	mov	r4, r1
 800cace:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cad0:	da03      	bge.n	800cada <__kernel_sin+0x22>
 800cad2:	f7f3 ffff 	bl	8000ad4 <__aeabi_d2iz>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d050      	beq.n	800cb7c <__kernel_sin+0xc4>
 800cada:	4652      	mov	r2, sl
 800cadc:	4623      	mov	r3, r4
 800cade:	4650      	mov	r0, sl
 800cae0:	4621      	mov	r1, r4
 800cae2:	f7f3 fd5d 	bl	80005a0 <__aeabi_dmul>
 800cae6:	4606      	mov	r6, r0
 800cae8:	460f      	mov	r7, r1
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	4650      	mov	r0, sl
 800caf0:	4621      	mov	r1, r4
 800caf2:	f7f3 fd55 	bl	80005a0 <__aeabi_dmul>
 800caf6:	a33e      	add	r3, pc, #248	; (adr r3, 800cbf0 <__kernel_sin+0x138>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	4680      	mov	r8, r0
 800cafe:	4689      	mov	r9, r1
 800cb00:	4630      	mov	r0, r6
 800cb02:	4639      	mov	r1, r7
 800cb04:	f7f3 fd4c 	bl	80005a0 <__aeabi_dmul>
 800cb08:	a33b      	add	r3, pc, #236	; (adr r3, 800cbf8 <__kernel_sin+0x140>)
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	f7f3 fb8f 	bl	8000230 <__aeabi_dsub>
 800cb12:	4632      	mov	r2, r6
 800cb14:	463b      	mov	r3, r7
 800cb16:	f7f3 fd43 	bl	80005a0 <__aeabi_dmul>
 800cb1a:	a339      	add	r3, pc, #228	; (adr r3, 800cc00 <__kernel_sin+0x148>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fb88 	bl	8000234 <__adddf3>
 800cb24:	4632      	mov	r2, r6
 800cb26:	463b      	mov	r3, r7
 800cb28:	f7f3 fd3a 	bl	80005a0 <__aeabi_dmul>
 800cb2c:	a336      	add	r3, pc, #216	; (adr r3, 800cc08 <__kernel_sin+0x150>)
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	f7f3 fb7d 	bl	8000230 <__aeabi_dsub>
 800cb36:	4632      	mov	r2, r6
 800cb38:	463b      	mov	r3, r7
 800cb3a:	f7f3 fd31 	bl	80005a0 <__aeabi_dmul>
 800cb3e:	a334      	add	r3, pc, #208	; (adr r3, 800cc10 <__kernel_sin+0x158>)
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	f7f3 fb76 	bl	8000234 <__adddf3>
 800cb48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb4c:	b9dd      	cbnz	r5, 800cb86 <__kernel_sin+0xce>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	f7f3 fd23 	bl	80005a0 <__aeabi_dmul>
 800cb5a:	a32f      	add	r3, pc, #188	; (adr r3, 800cc18 <__kernel_sin+0x160>)
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	f7f3 fb66 	bl	8000230 <__aeabi_dsub>
 800cb64:	4642      	mov	r2, r8
 800cb66:	464b      	mov	r3, r9
 800cb68:	f7f3 fd1a 	bl	80005a0 <__aeabi_dmul>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4650      	mov	r0, sl
 800cb72:	4621      	mov	r1, r4
 800cb74:	f7f3 fb5e 	bl	8000234 <__adddf3>
 800cb78:	4682      	mov	sl, r0
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	4650      	mov	r0, sl
 800cb7e:	4621      	mov	r1, r4
 800cb80:	b006      	add	sp, #24
 800cb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb86:	2200      	movs	r2, #0
 800cb88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb8c:	4b24      	ldr	r3, [pc, #144]	; (800cc20 <__kernel_sin+0x168>)
 800cb8e:	f7f3 fd07 	bl	80005a0 <__aeabi_dmul>
 800cb92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb9a:	4640      	mov	r0, r8
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	f7f3 fcff 	bl	80005a0 <__aeabi_dmul>
 800cba2:	4602      	mov	r2, r0
 800cba4:	460b      	mov	r3, r1
 800cba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbaa:	f7f3 fb41 	bl	8000230 <__aeabi_dsub>
 800cbae:	4632      	mov	r2, r6
 800cbb0:	463b      	mov	r3, r7
 800cbb2:	f7f3 fcf5 	bl	80005a0 <__aeabi_dmul>
 800cbb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbba:	f7f3 fb39 	bl	8000230 <__aeabi_dsub>
 800cbbe:	a316      	add	r3, pc, #88	; (adr r3, 800cc18 <__kernel_sin+0x160>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	4640      	mov	r0, r8
 800cbca:	4649      	mov	r1, r9
 800cbcc:	f7f3 fce8 	bl	80005a0 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 fb2c 	bl	8000234 <__adddf3>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f7f3 fb24 	bl	8000230 <__aeabi_dsub>
 800cbe8:	e7c6      	b.n	800cb78 <__kernel_sin+0xc0>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
 800cbf0:	5acfd57c 	.word	0x5acfd57c
 800cbf4:	3de5d93a 	.word	0x3de5d93a
 800cbf8:	8a2b9ceb 	.word	0x8a2b9ceb
 800cbfc:	3e5ae5e6 	.word	0x3e5ae5e6
 800cc00:	57b1fe7d 	.word	0x57b1fe7d
 800cc04:	3ec71de3 	.word	0x3ec71de3
 800cc08:	19c161d5 	.word	0x19c161d5
 800cc0c:	3f2a01a0 	.word	0x3f2a01a0
 800cc10:	1110f8a6 	.word	0x1110f8a6
 800cc14:	3f811111 	.word	0x3f811111
 800cc18:	55555549 	.word	0x55555549
 800cc1c:	3fc55555 	.word	0x3fc55555
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	00000000 	.word	0x00000000

0800cc28 <floor>:
 800cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc2c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cc30:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cc34:	2e13      	cmp	r6, #19
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	4605      	mov	r5, r0
 800cc40:	dc33      	bgt.n	800ccaa <floor+0x82>
 800cc42:	2e00      	cmp	r6, #0
 800cc44:	da14      	bge.n	800cc70 <floor+0x48>
 800cc46:	a334      	add	r3, pc, #208	; (adr r3, 800cd18 <floor+0xf0>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7f3 faf2 	bl	8000234 <__adddf3>
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	f7f3 ff34 	bl	8000ac0 <__aeabi_dcmpgt>
 800cc58:	b138      	cbz	r0, 800cc6a <floor+0x42>
 800cc5a:	2c00      	cmp	r4, #0
 800cc5c:	da58      	bge.n	800cd10 <floor+0xe8>
 800cc5e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cc62:	431d      	orrs	r5, r3
 800cc64:	d001      	beq.n	800cc6a <floor+0x42>
 800cc66:	2500      	movs	r5, #0
 800cc68:	4c2d      	ldr	r4, [pc, #180]	; (800cd20 <floor+0xf8>)
 800cc6a:	4623      	mov	r3, r4
 800cc6c:	462f      	mov	r7, r5
 800cc6e:	e025      	b.n	800ccbc <floor+0x94>
 800cc70:	4a2c      	ldr	r2, [pc, #176]	; (800cd24 <floor+0xfc>)
 800cc72:	fa42 f806 	asr.w	r8, r2, r6
 800cc76:	ea01 0208 	and.w	r2, r1, r8
 800cc7a:	4302      	orrs	r2, r0
 800cc7c:	d01e      	beq.n	800ccbc <floor+0x94>
 800cc7e:	a326      	add	r3, pc, #152	; (adr r3, 800cd18 <floor+0xf0>)
 800cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc84:	f7f3 fad6 	bl	8000234 <__adddf3>
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f7f3 ff18 	bl	8000ac0 <__aeabi_dcmpgt>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d0ea      	beq.n	800cc6a <floor+0x42>
 800cc94:	2c00      	cmp	r4, #0
 800cc96:	bfbe      	ittt	lt
 800cc98:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cc9c:	fa43 f606 	asrlt.w	r6, r3, r6
 800cca0:	19a4      	addlt	r4, r4, r6
 800cca2:	2500      	movs	r5, #0
 800cca4:	ea24 0408 	bic.w	r4, r4, r8
 800cca8:	e7df      	b.n	800cc6a <floor+0x42>
 800ccaa:	2e33      	cmp	r6, #51	; 0x33
 800ccac:	dd0a      	ble.n	800ccc4 <floor+0x9c>
 800ccae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ccb2:	d103      	bne.n	800ccbc <floor+0x94>
 800ccb4:	f7f3 fabe 	bl	8000234 <__adddf3>
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cccc:	fa22 f808 	lsr.w	r8, r2, r8
 800ccd0:	ea18 0f00 	tst.w	r8, r0
 800ccd4:	d0f2      	beq.n	800ccbc <floor+0x94>
 800ccd6:	a310      	add	r3, pc, #64	; (adr r3, 800cd18 <floor+0xf0>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	f7f3 faaa 	bl	8000234 <__adddf3>
 800cce0:	2200      	movs	r2, #0
 800cce2:	2300      	movs	r3, #0
 800cce4:	f7f3 feec 	bl	8000ac0 <__aeabi_dcmpgt>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d0be      	beq.n	800cc6a <floor+0x42>
 800ccec:	2c00      	cmp	r4, #0
 800ccee:	da02      	bge.n	800ccf6 <floor+0xce>
 800ccf0:	2e14      	cmp	r6, #20
 800ccf2:	d103      	bne.n	800ccfc <floor+0xd4>
 800ccf4:	3401      	adds	r4, #1
 800ccf6:	ea25 0508 	bic.w	r5, r5, r8
 800ccfa:	e7b6      	b.n	800cc6a <floor+0x42>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd02:	fa03 f606 	lsl.w	r6, r3, r6
 800cd06:	4435      	add	r5, r6
 800cd08:	42bd      	cmp	r5, r7
 800cd0a:	bf38      	it	cc
 800cd0c:	18e4      	addcc	r4, r4, r3
 800cd0e:	e7f2      	b.n	800ccf6 <floor+0xce>
 800cd10:	2500      	movs	r5, #0
 800cd12:	462c      	mov	r4, r5
 800cd14:	e7a9      	b.n	800cc6a <floor+0x42>
 800cd16:	bf00      	nop
 800cd18:	8800759c 	.word	0x8800759c
 800cd1c:	7e37e43c 	.word	0x7e37e43c
 800cd20:	bff00000 	.word	0xbff00000
 800cd24:	000fffff 	.word	0x000fffff

0800cd28 <scalbn>:
 800cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	4617      	mov	r7, r2
 800cd34:	460b      	mov	r3, r1
 800cd36:	b996      	cbnz	r6, 800cd5e <scalbn+0x36>
 800cd38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd3c:	4303      	orrs	r3, r0
 800cd3e:	d039      	beq.n	800cdb4 <scalbn+0x8c>
 800cd40:	4b33      	ldr	r3, [pc, #204]	; (800ce10 <scalbn+0xe8>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	f7f3 fc2c 	bl	80005a0 <__aeabi_dmul>
 800cd48:	4b32      	ldr	r3, [pc, #200]	; (800ce14 <scalbn+0xec>)
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	429f      	cmp	r7, r3
 800cd4e:	460d      	mov	r5, r1
 800cd50:	da0f      	bge.n	800cd72 <scalbn+0x4a>
 800cd52:	a32b      	add	r3, pc, #172	; (adr r3, 800ce00 <scalbn+0xd8>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7f3 fc22 	bl	80005a0 <__aeabi_dmul>
 800cd5c:	e006      	b.n	800cd6c <scalbn+0x44>
 800cd5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cd62:	4296      	cmp	r6, r2
 800cd64:	d10a      	bne.n	800cd7c <scalbn+0x54>
 800cd66:	4602      	mov	r2, r0
 800cd68:	f7f3 fa64 	bl	8000234 <__adddf3>
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	e020      	b.n	800cdb4 <scalbn+0x8c>
 800cd72:	460b      	mov	r3, r1
 800cd74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cd78:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cd7c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cd80:	19b9      	adds	r1, r7, r6
 800cd82:	4291      	cmp	r1, r2
 800cd84:	dd0e      	ble.n	800cda4 <scalbn+0x7c>
 800cd86:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cd8a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cd8e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cd92:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cd96:	4820      	ldr	r0, [pc, #128]	; (800ce18 <scalbn+0xf0>)
 800cd98:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cd9c:	a31a      	add	r3, pc, #104	; (adr r3, 800ce08 <scalbn+0xe0>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	e7d9      	b.n	800cd58 <scalbn+0x30>
 800cda4:	2900      	cmp	r1, #0
 800cda6:	dd08      	ble.n	800cdba <scalbn+0x92>
 800cda8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cdbe:	da12      	bge.n	800cde6 <scalbn+0xbe>
 800cdc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cdc4:	429f      	cmp	r7, r3
 800cdc6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cdca:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800cdce:	dcdc      	bgt.n	800cd8a <scalbn+0x62>
 800cdd0:	a30b      	add	r3, pc, #44	; (adr r3, 800ce00 <scalbn+0xd8>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800cdda:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cdde:	480f      	ldr	r0, [pc, #60]	; (800ce1c <scalbn+0xf4>)
 800cde0:	f041 011f 	orr.w	r1, r1, #31
 800cde4:	e7b8      	b.n	800cd58 <scalbn+0x30>
 800cde6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdea:	3136      	adds	r1, #54	; 0x36
 800cdec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdf0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <scalbn+0xf8>)
 800cdfc:	e7ac      	b.n	800cd58 <scalbn+0x30>
 800cdfe:	bf00      	nop
 800ce00:	c2f8f359 	.word	0xc2f8f359
 800ce04:	01a56e1f 	.word	0x01a56e1f
 800ce08:	8800759c 	.word	0x8800759c
 800ce0c:	7e37e43c 	.word	0x7e37e43c
 800ce10:	43500000 	.word	0x43500000
 800ce14:	ffff3cb0 	.word	0xffff3cb0
 800ce18:	8800759c 	.word	0x8800759c
 800ce1c:	c2f8f359 	.word	0xc2f8f359
 800ce20:	3c900000 	.word	0x3c900000

0800ce24 <_init>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr

0800ce30 <_fini>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr
