
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c73c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800c928  0800c928  0001c928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2a0  0800d2a0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2a0  0800d2a0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2a0  0800d2a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a4  0800d2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f40  2000007c  0800d324  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007fbc  0800d324  00027fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015289  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003690  00000000  00000000  0003532e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000389c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00039da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca67  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019890  00000000  00000000  00057abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e39a  00000000  00000000  0007134f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f6e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f0  00000000  00000000  0010f73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000007c 	.word	0x2000007c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c90c 	.word	0x0800c90c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000080 	.word	0x20000080
 8000224:	0800c90c 	.word	0x0800c90c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <Find_crash>:
extern Rectangle obstacles[5];			// area that depletes charge faster
extern Coordinate oppoBeacons[3];		// opponent charging station coordinate
extern Queue openlist;
extern List closelist;

uint8_t Find_crash(uint16_t cor, uint8_t flag) {
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	uint16_t x = cor / 256;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	81bb      	strh	r3, [r7, #12]
	uint16_t y = cor % 256;
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	817b      	strh	r3, [r7, #10]

	if (flag == 0) {
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <Find_crash+0x26>
		return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e109      	b.n	8001432 <Find_crash+0x23a>
	}
	if (flag == 1) {
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d151      	bne.n	80012c8 <Find_crash+0xd0>
		//walls
		if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	2b25      	cmp	r3, #37	; 0x25
 8001228:	d910      	bls.n	800124c <Find_crash+0x54>
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	2b28      	cmp	r3, #40	; 0x28
 800122e:	d80d      	bhi.n	800124c <Find_crash+0x54>
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	2b25      	cmp	r3, #37	; 0x25
 8001234:	d902      	bls.n	800123c <Find_crash+0x44>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	d905      	bls.n	8001248 <Find_crash+0x50>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b92      	cmp	r3, #146	; 0x92
 8001240:	d904      	bls.n	800124c <Find_crash+0x54>
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	2bd8      	cmp	r3, #216	; 0xd8
 8001246:	d801      	bhi.n	800124c <Find_crash+0x54>
			return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e0f2      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2bd5      	cmp	r3, #213	; 0xd5
 8001250:	d910      	bls.n	8001274 <Find_crash+0x7c>
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bd8      	cmp	r3, #216	; 0xd8
 8001256:	d80d      	bhi.n	8001274 <Find_crash+0x7c>
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b25      	cmp	r3, #37	; 0x25
 800125c:	d902      	bls.n	8001264 <Find_crash+0x6c>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	2b6b      	cmp	r3, #107	; 0x6b
 8001262:	d905      	bls.n	8001270 <Find_crash+0x78>
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b92      	cmp	r3, #146	; 0x92
 8001268:	d904      	bls.n	8001274 <Find_crash+0x7c>
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	2bd8      	cmp	r3, #216	; 0xd8
 800126e:	d801      	bhi.n	8001274 <Find_crash+0x7c>
			return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e0de      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	2b25      	cmp	r3, #37	; 0x25
 8001278:	d910      	bls.n	800129c <Find_crash+0xa4>
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	2b28      	cmp	r3, #40	; 0x28
 800127e:	d80d      	bhi.n	800129c <Find_crash+0xa4>
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d902      	bls.n	800128c <Find_crash+0x94>
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d905      	bls.n	8001298 <Find_crash+0xa0>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2b92      	cmp	r3, #146	; 0x92
 8001290:	d904      	bls.n	800129c <Find_crash+0xa4>
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2bd8      	cmp	r3, #216	; 0xd8
 8001296:	d801      	bhi.n	800129c <Find_crash+0xa4>
			return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e0ca      	b.n	8001432 <Find_crash+0x23a>
		}
		if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2bd5      	cmp	r3, #213	; 0xd5
 80012a0:	d910      	bls.n	80012c4 <Find_crash+0xcc>
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2bd8      	cmp	r3, #216	; 0xd8
 80012a6:	d80d      	bhi.n	80012c4 <Find_crash+0xcc>
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	2b25      	cmp	r3, #37	; 0x25
 80012ac:	d902      	bls.n	80012b4 <Find_crash+0xbc>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	2b6b      	cmp	r3, #107	; 0x6b
 80012b2:	d905      	bls.n	80012c0 <Find_crash+0xc8>
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	2b92      	cmp	r3, #146	; 0x92
 80012b8:	d904      	bls.n	80012c4 <Find_crash+0xcc>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	2bd8      	cmp	r3, #216	; 0xd8
 80012be:	d801      	bhi.n	80012c4 <Find_crash+0xcc>
			return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b6      	b.n	8001432 <Find_crash+0x23a>
		}
		return 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0b4      	b.n	8001432 <Find_crash+0x23a>
	}
	//walls
	if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	2b25      	cmp	r3, #37	; 0x25
 80012cc:	d910      	bls.n	80012f0 <Find_crash+0xf8>
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	d80d      	bhi.n	80012f0 <Find_crash+0xf8>
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	2b25      	cmp	r3, #37	; 0x25
 80012d8:	d902      	bls.n	80012e0 <Find_crash+0xe8>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	2b6b      	cmp	r3, #107	; 0x6b
 80012de:	d905      	bls.n	80012ec <Find_crash+0xf4>
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	2b92      	cmp	r3, #146	; 0x92
 80012e4:	d904      	bls.n	80012f0 <Find_crash+0xf8>
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	2bd8      	cmp	r3, #216	; 0xd8
 80012ea:	d801      	bhi.n	80012f0 <Find_crash+0xf8>
		return 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0a0      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2bd5      	cmp	r3, #213	; 0xd5
 80012f4:	d910      	bls.n	8001318 <Find_crash+0x120>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	2bd8      	cmp	r3, #216	; 0xd8
 80012fa:	d80d      	bhi.n	8001318 <Find_crash+0x120>
 80012fc:	897b      	ldrh	r3, [r7, #10]
 80012fe:	2b25      	cmp	r3, #37	; 0x25
 8001300:	d902      	bls.n	8001308 <Find_crash+0x110>
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	2b6b      	cmp	r3, #107	; 0x6b
 8001306:	d905      	bls.n	8001314 <Find_crash+0x11c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	2b92      	cmp	r3, #146	; 0x92
 800130c:	d904      	bls.n	8001318 <Find_crash+0x120>
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	2bd8      	cmp	r3, #216	; 0xd8
 8001312:	d801      	bhi.n	8001318 <Find_crash+0x120>
		return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e08c      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b25      	cmp	r3, #37	; 0x25
 800131c:	d910      	bls.n	8001340 <Find_crash+0x148>
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	d80d      	bhi.n	8001340 <Find_crash+0x148>
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b25      	cmp	r3, #37	; 0x25
 8001328:	d902      	bls.n	8001330 <Find_crash+0x138>
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	2b6b      	cmp	r3, #107	; 0x6b
 800132e:	d905      	bls.n	800133c <Find_crash+0x144>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b92      	cmp	r3, #146	; 0x92
 8001334:	d904      	bls.n	8001340 <Find_crash+0x148>
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	2bd8      	cmp	r3, #216	; 0xd8
 800133a:	d801      	bhi.n	8001340 <Find_crash+0x148>
		return 0;
 800133c:	2300      	movs	r3, #0
 800133e:	e078      	b.n	8001432 <Find_crash+0x23a>
	}
	if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	2bd5      	cmp	r3, #213	; 0xd5
 8001344:	d910      	bls.n	8001368 <Find_crash+0x170>
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d80d      	bhi.n	8001368 <Find_crash+0x170>
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	d902      	bls.n	8001358 <Find_crash+0x160>
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	2b6b      	cmp	r3, #107	; 0x6b
 8001356:	d905      	bls.n	8001364 <Find_crash+0x16c>
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b92      	cmp	r3, #146	; 0x92
 800135c:	d904      	bls.n	8001368 <Find_crash+0x170>
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	2bd8      	cmp	r3, #216	; 0xd8
 8001362:	d801      	bhi.n	8001368 <Find_crash+0x170>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e064      	b.n	8001432 <Find_crash+0x23a>
	}
	//obstacles
	for (uint8_t k = 0; k < 5; k++) {
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e026      	b.n	80013bc <Find_crash+0x1c4>
		if (x >= obstacles[k].coord1.x && y >= obstacles[k].coord1.y && x <= obstacles[k].coord2.x
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <Find_crash+0x244>)
 8001374:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 8001378:	4293      	cmp	r3, r2
 800137a:	db1c      	blt.n	80013b6 <Find_crash+0x1be>
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <Find_crash+0x244>)
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	db13      	blt.n	80013b6 <Find_crash+0x1be>
 800138e:	89ba      	ldrh	r2, [r7, #12]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <Find_crash+0x244>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dc0a      	bgt.n	80013b6 <Find_crash+0x1be>
				&& y <= obstacles[k].coord2.y) {
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4925      	ldr	r1, [pc, #148]	; (800143c <Find_crash+0x244>)
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <Find_crash+0x1be>
			return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e03d      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k < 5; k++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d9d5      	bls.n	800136e <Find_crash+0x176>
		}
	}
	// oppoBeacons
	for (uint8_t k = 0; k <= 2; k++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e030      	b.n	800142a <Find_crash+0x232>
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <Find_crash+0x248>)
 80013ce:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 80013d2:	1a9b      	subs	r3, r3, r2
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013d4:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 80013d6:	89ba      	ldrh	r2, [r7, #12]
 80013d8:	7bb9      	ldrb	r1, [r7, #14]
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <Find_crash+0x248>)
 80013dc:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 80013e0:	1a52      	subs	r2, r2, r1
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 80013e2:	b292      	uxth	r2, r2
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <Find_crash+0x248>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	b299      	uxth	r1, r3
 80013fc:	8978      	ldrh	r0, [r7, #10]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4c0f      	ldr	r4, [pc, #60]	; (8001440 <Find_crash+0x248>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4423      	add	r3, r4
 8001406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140a:	1ac3      	subs	r3, r0, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 8001414:	4413      	add	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
		if (distance <= 400) {
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	d801      	bhi.n	8001424 <Find_crash+0x22c>
			return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <Find_crash+0x23a>
	for (uint8_t k = 0; k <= 2; k++) {
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d9cb      	bls.n	80013c8 <Find_crash+0x1d0>
		}
	}
	return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	4770      	bx	lr
 800143c:	20000b7c 	.word	0x20000b7c
 8001440:	20000bb0 	.word	0x20000bb0

08001444 <cal_H>:

uint16_t cal_H(uint16_t cor1, uint16_t cor2) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
	return abs(x1 - x2) + abs(y1 - y2);
 800146c:	89fa      	ldrh	r2, [r7, #14]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <dir>:

int8_t dir(uint16_t cor1, uint16_t cor2) {
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	460a      	mov	r2, r1
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]
	return ((x2 - x1) + 2 * (y2 - y1));
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8939      	ldrh	r1, [r7, #8]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25b      	sxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <findend>:

uint8_t findend(uint16_t cur, uint16_t end, uint8_t step)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70fb      	strb	r3, [r7, #3]
	uint16_t x1 = cur / 256;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cur % 256;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = end / 256;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = end % 256;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	if (abs(x2 - x1) < step && abs(y2 - y1) < step)
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0b      	bge.n	800153c <findend+0x56>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	da01      	bge.n	800153c <findend+0x56>
	{
		return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <findend+0x58>
	}
	else
		return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Find_around_node>:

void Find_around_node(uint16_t currentindex, int8_t lastdir, A_Star_Node *end, uint8_t step) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	603a      	str	r2, [r7, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	717b      	strb	r3, [r7, #5]
 800155a:	4613      	mov	r3, r2
 800155c:	713b      	strb	r3, [r7, #4]
	uint16_t x = openlist.buffer[currentindex].cor / 256;
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	49b3      	ldr	r1, [pc, #716]	; (8001830 <Find_around_node+0x2e8>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t y = openlist.buffer[currentindex].cor % 256;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	49ad      	ldr	r1, [pc, #692]	; (8001830 <Find_around_node+0x2e8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t obstacleflag = 1;		//负责检测采取何种程度的避障
 800158e:	2301      	movs	r3, #1
 8001590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// left
	if (x >= step) {
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800159c:	429a      	cmp	r2, r3
 800159e:	f0c0 80a3 	bcc.w	80016e8 <Find_around_node+0x1a0>
		uint16_t curx = x - step;
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		uint16_t cury = y;
 80015b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t coordinateindex = curx * 256 + cury;
 80015b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c4:	4413      	add	r3, r2
 80015c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		if (Find_crash(coordinateindex, obstacleflag)) {
 80015ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80015ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe0f 	bl	80011f8 <Find_crash>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8083 	beq.w	80016e8 <Find_around_node+0x1a0>
			//not in close_list
			if (!findin_list(coordinateindex))
 80015e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f98a 	bl	8004900 <findin_list>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17a      	bne.n	80016e8 <Find_around_node+0x1a0>
					{
				uint16_t index = findin_queue(coordinateindex);
 80015f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f954 	bl	80048a4 <findin_queue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001602:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001606:	85bb      	strh	r3, [r7, #44]	; 0x2c
				newnode.fatherindex = currentindex;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	86fb      	strh	r3, [r7, #54]	; 0x36
				newnode.cost = openlist.buffer[currentindex].cost + step;
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <Find_around_node+0x2e8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800161e:	4623      	mov	r3, r4
 8001620:	461c      	mov	r4, r3
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff face 	bl	8000bd0 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800163a:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 800163e:	4623      	mov	r3, r4
 8001640:	461c      	mov	r4, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fef9 	bl	8001444 <cal_H>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb6f 	bl	8000d38 <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fab6 	bl	8000bd0 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	4970      	ldr	r1, [pc, #448]	; (8001830 <Find_around_node+0x2e8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff07 	bl	8001496 <dir>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <Find_around_node+0x17c>
						&& lastdir != 0)
 8001694:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <Find_around_node+0x17c>
					newnode.total += 10 * step;
 800169c:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80016a0:	4623      	mov	r3, r4
 80016a2:	461c      	mov	r4, r3
 80016a4:	793a      	ldrb	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb42 	bl	8000d38 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fa89 	bl	8000bd0 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (!index)	//not in open_list
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Find_around_node+0x190>
				{
					queue_append(&newnode);
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 f80f 	bl	80046f4 <queue_append>
 80016d6:	e007      	b.n	80016e8 <Find_around_node+0x1a0>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 80016d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f932 	bl	800494c <editcost>
				}
			}
		}
	}
	// right
	if (x <= 255 - step) {
 80016e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f300 80a6 	bgt.w	8001844 <Find_around_node+0x2fc>
		uint16_t curx = x + step;
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001700:	4413      	add	r3, r2
 8001702:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t cury = y;
 8001706:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800170a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t coordinateindex = curx * 256 + cury;
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800171a:	4413      	add	r3, r2
 800171c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Find_crash(coordinateindex, obstacleflag)) {
 8001720:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd64 	bl	80011f8 <Find_crash>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8086 	beq.w	8001844 <Find_around_node+0x2fc>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f8df 	bl	8004900 <findin_list>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <Find_around_node+0x2fc>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f8a9 	bl	80048a4 <findin_queue>
 8001752:	4603      	mov	r3, r0
 8001754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001758:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175c:	843b      	strh	r3, [r7, #32]
				newnode.fatherindex = currentindex;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4932      	ldr	r1, [pc, #200]	; (8001830 <Find_around_node+0x2e8>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001774:	4623      	mov	r3, r4
 8001776:	461c      	mov	r4, r3
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fadc 	bl	8000d38 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fa23 	bl	8000bd0 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001790:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 8001794:	4623      	mov	r3, r4
 8001796:	461c      	mov	r4, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe4e 	bl	8001444 <cal_H>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fac4 	bl	8000d38 <__aeabi_i2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa0b 	bl	8000bd0 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Find_around_node+0x2e8>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5c 	bl	8001496 <dir>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d017      	beq.n	800181a <Find_around_node+0x2d2>
						&& lastdir != 0)
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <Find_around_node+0x2d2>
					newnode.total += 10 * step;
 80017f2:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 80017f6:	4623      	mov	r3, r4
 80017f8:	461c      	mov	r4, r3
 80017fa:	793a      	ldrb	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa97 	bl	8000d38 <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f9de 	bl	8000bd0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (!index)	//not in open_list
 800181a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <Find_around_node+0x2ec>
				{
					queue_append(&newnode);
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff64 	bl	80046f4 <queue_append>
 800182c:	e00a      	b.n	8001844 <Find_around_node+0x2fc>
 800182e:	bf00      	nop
 8001830:	20000c18 	.word	0x20000c18
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f884 	bl	800494c <editcost>
				}
			}
		}
	}
	// up
	if (y >= step) {
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800184c:	429a      	cmp	r2, r3
 800184e:	f0c0 80a3 	bcc.w	8001998 <Find_around_node+0x450>
		uint16_t curx = x;
 8001852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t cury = y - step;
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t coordinateindex = curx * 256 + cury;
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	4413      	add	r3, r2
 8001876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (Find_crash(coordinateindex, obstacleflag)) {
 800187a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800187e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcb7 	bl	80011f8 <Find_crash>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8083 	beq.w	8001998 <Find_around_node+0x450>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f832 	bl	8004900 <findin_list>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d17a      	bne.n	8001998 <Find_around_node+0x450>
					{
				uint16_t index = findin_queue(coordinateindex);
 80018a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fffc 	bl	80048a4 <findin_queue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80018b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018b6:	82bb      	strh	r3, [r7, #20]
				newnode.fatherindex = currentindex;
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	83fb      	strh	r3, [r7, #30]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	4987      	ldr	r1, [pc, #540]	; (8001adc <Find_around_node+0x594>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80018ce:	4623      	mov	r3, r4
 80018d0:	461c      	mov	r4, r3
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa2f 	bl	8000d38 <__aeabi_i2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f976 	bl	8000bd0 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3016 	str.w	r3, [r7, #22]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 80018ea:	f8d7 4016 	ldr.w	r4, [r7, #22]
 80018ee:	4623      	mov	r3, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fda1 	bl	8001444 <cal_H>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa17 	bl	8000d38 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f95e 	bl	8000bd0 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 301a 	str.w	r3, [r7, #26]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <Find_around_node+0x594>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <dir>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <Find_around_node+0x42c>
						&& lastdir != 0)
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <Find_around_node+0x42c>
					newnode.total += 10 * step;
 800194c:	f8d7 401a 	ldr.w	r4, [r7, #26]
 8001950:	4623      	mov	r3, r4
 8001952:	461c      	mov	r4, r3
 8001954:	793a      	ldrb	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f931 	bl	8000bd0 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 301a 	str.w	r3, [r7, #26]
				if (!index)	//not in open_list
 8001974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <Find_around_node+0x440>
				{
					queue_append(&newnode);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f002 feb7 	bl	80046f4 <queue_append>
 8001986:	e007      	b.n	8001998 <Find_around_node+0x450>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ffda 	bl	800494c <editcost>
				}
			}
		}
	}
	// down
	if (y <= 255 - step) {
 8001998:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f300 8096 	bgt.w	8001ad4 <Find_around_node+0x58c>
		uint16_t curx = x;
 80019a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t cury = y + step;
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b8:	4413      	add	r3, r2
 80019ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t coordinateindex = curx * 256 + cury;
 80019bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019c6:	4413      	add	r3, r2
 80019c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (Find_crash(coordinateindex, obstacleflag)) {
 80019ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc10 	bl	80011f8 <Find_crash>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07a      	beq.n	8001ad4 <Find_around_node+0x58c>
			//not in close_list
			if (!findin_list(coordinateindex))
 80019de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 ff8d 	bl	8004900 <findin_list>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d173      	bne.n	8001ad4 <Find_around_node+0x58c>
					{
				uint16_t index = findin_queue(coordinateindex);
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff58 	bl	80048a4 <findin_queue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	877b      	strh	r3, [r7, #58]	; 0x3a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80019f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fa:	813b      	strh	r3, [r7, #8]
				newnode.fatherindex = currentindex;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	827b      	strh	r3, [r7, #18]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <Find_around_node+0x594>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001a12:	4623      	mov	r3, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98d 	bl	8000d38 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8d4 	bl	8000bd0 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 300a 	str.w	r3, [r7, #10]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001a2e:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001a32:	4623      	mov	r3, r4
 8001a34:	461c      	mov	r4, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd00 	bl	8001444 <cal_H>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f976 	bl	8000d38 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f8bd 	bl	8000bd0 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 300e 	str.w	r3, [r7, #14]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <Find_around_node+0x594>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd0f 	bl	8001496 <dir>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d017      	beq.n	8001ab4 <Find_around_node+0x56c>
						&& lastdir != 0)
 8001a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <Find_around_node+0x56c>
					newnode.total += 10 * step;
 8001a8c:	f8d7 400e 	ldr.w	r4, [r7, #14]
 8001a90:	4623      	mov	r3, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	793a      	ldrb	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f94a 	bl	8000d38 <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f891 	bl	8000bd0 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 300e 	str.w	r3, [r7, #14]
				if (!index)	//not in open_list
 8001ab4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <Find_around_node+0x57e>
				{
					queue_append(&newnode);
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fe18 	bl	80046f4 <queue_append>
					editcost(index, &newnode);
				}
			}
		}
	}
}
 8001ac4:	e006      	b.n	8001ad4 <Find_around_node+0x58c>
					editcost(index, &newnode);
 8001ac6:	f107 0208 	add.w	r2, r7, #8
 8001aca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 ff3c 	bl	800494c <editcost>
}
 8001ad4:	bf00      	nop
 8001ad6:	3764      	adds	r7, #100	; 0x64
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000c18 	.word	0x20000c18

08001ae0 <A_Star_main>:

uint8_t A_Star_main(Coordinate *start, Coordinate *last, uint8_t step) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
	A_Star_Node begin;
	A_Star_Node end;
	begin.cor = (start->x) * 256 + start->y;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	end.cor = (last->x) * 256 + last->y;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	begin.cost = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
	begin.total = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
	begin.fatherindex = 65535;
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	queue_append(&begin);
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fdd6 	bl	80046f4 <queue_append>
	uint16_t curindex = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t Flag = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int8_t lastdir = 0;     		// left:-step up:-2*step right:step down:2*step
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (1) {
		curindex = queue_top();
 8001b5a:	f002 fe83 	bl	8004864 <queue_top>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (curindex == 65535)
 8001b64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <A_Star_main+0x94>
			return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e148      	b.n	8001e06 <A_Star_main+0x326>
		if (openlist.buffer[curindex].fatherindex != 65535) {
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b78:	49a5      	ldr	r1, [pc, #660]	; (8001e10 <A_Star_main+0x330>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330e      	adds	r3, #14
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <A_Star_main+0xf6>
			lastdir = dir(openlist.buffer[openlist.buffer[curindex].fatherindex].cor,
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b94:	499e      	ldr	r1, [pc, #632]	; (8001e10 <A_Star_main+0x330>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <A_Star_main+0x330>)
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4995      	ldr	r1, [pc, #596]	; (8001e10 <A_Star_main+0x330>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fc63 	bl	8001496 <dir>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					openlist.buffer[curindex].cor);
		}
		list_append(openlist.buffer[curindex].cor);
 8001bd6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bda:	498d      	ldr	r1, [pc, #564]	; (8001e10 <A_Star_main+0x330>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fe0c 	bl	8004808 <list_append>
		if(findend(openlist.buffer[curindex].cor, end.cor, step))
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4986      	ldr	r1, [pc, #536]	; (8001e10 <A_Star_main+0x330>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc6b 	bl	80014e6 <findend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <A_Star_main+0x17c>
		{
			Flag = curindex;
 8001c16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			break;
 8001c1e:	bf00      	nop
		Find_around_node(curindex, lastdir, &end, step);
	}

	//we now get the path
	Coordinate Astar_path[16];
	Astar_path[15].x = last->x;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Astar_path[15].y = last->y;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t i = 14;
 8001c34:	230e      	movs	r3, #14
 8001c36:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	A_Star_Node *p = &openlist.buffer[Flag];
 8001c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <A_Star_main+0x330>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
	if (p->cor != end.cor) {
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d027      	beq.n	8001caa <A_Star_main+0x1ca>
 8001c5a:	e009      	b.n	8001c70 <A_Star_main+0x190>
		Find_around_node(curindex, lastdir, &end, step);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001c66:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001c6a:	f7ff fc6d 	bl	8001548 <Find_around_node>
		curindex = queue_top();
 8001c6e:	e774      	b.n	8001b5a <A_Star_main+0x7a>
		Astar_path[i].x = p->cor / 256;
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3378      	adds	r3, #120	; 0x78
 8001c82:	443b      	add	r3, r7
 8001c84:	f823 2c68 	strh.w	r2, [r3, #-104]
		Astar_path[i].y = p->cor % 256;
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	b212      	sxth	r2, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3378      	adds	r3, #120	; 0x78
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f823 2c66 	strh.w	r2, [r3, #-102]
		i--;
 8001ca0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	if (p->fatherindex != 65535)
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d07a      	beq.n	8001dac <A_Star_main+0x2cc>
		lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <A_Star_main+0x330>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fbdf 	bl	8001496 <dir>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (p->fatherindex != 65535) {
 8001cde:	e065      	b.n	8001dac <A_Star_main+0x2cc>
		if (lastdir != dir(openlist.buffer[p->fatherindex].cor, p->cor))
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	895b      	ldrh	r3, [r3, #10]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <A_Star_main+0x330>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fbca 	bl	8001496 <dir>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d043      	beq.n	8001d96 <A_Star_main+0x2b6>
		{
			Astar_path[i].x = p->cor / 256;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3378      	adds	r3, #120	; 0x78
 8001d20:	443b      	add	r3, r7
 8001d22:	f823 2c68 	strh.w	r2, [r3, #-104]
			Astar_path[i].y = p->cor % 256;
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	b212      	sxth	r2, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3378      	adds	r3, #120	; 0x78
 8001d38:	443b      	add	r3, r7
 8001d3a:	f823 2c66 	strh.w	r2, [r3, #-102]
			if (i == 1) {
 8001d3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <A_Star_main+0x284>
				i = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				p = &(openlist.buffer[p->fatherindex]);
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <A_Star_main+0x330>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001d62:	e029      	b.n	8001db8 <A_Star_main+0x2d8>
			}
			i = i - 1;
 8001d64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <A_Star_main+0x330>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fb83 	bl	8001496 <dir>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		p = &(openlist.buffer[p->fatherindex]);
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <A_Star_main+0x330>)
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
	while (p->fatherindex != 65535) {
 8001dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dae:	895b      	ldrh	r3, [r3, #10]
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d193      	bne.n	8001ce0 <A_Star_main+0x200>
	}
	Astar_path[i].x = p->cor / 256;
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3378      	adds	r3, #120	; 0x78
 8001dca:	443b      	add	r3, r7
 8001dcc:	f823 2c68 	strh.w	r2, [r3, #-104]
	Astar_path[i].y = p->cor % 256;
 8001dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	b212      	sxth	r2, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3378      	adds	r3, #120	; 0x78
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c66 	strh.w	r2, [r3, #-102]

	Lane_init();
 8001de8:	f002 fc76 	bl	80046d8 <Lane_init>
	uint8_t Laneis_OK = Insert_inLane(&Astar_path[0], i);
 8001dec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fdf2 	bl	80049e0 <Insert_inLane>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	return Laneis_OK;
 8001e02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3778      	adds	r7, #120	; 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000c18 	.word	0x20000c18
 8001e14:	00000000 	.word	0x00000000

08001e18 <chao_move_angle>:
	straightPath->end = *end;
	return straightPath;
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 8001e24:	4984      	ldr	r1, [pc, #528]	; (8002038 <chao_move_angle+0x220>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f88e 	bl	8000f48 <__aeabi_fdiv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb5e 	bl	80004f0 <__aeabi_f2d>
 8001e34:	a37e      	add	r3, pc, #504	; (adr r3, 8002030 <chao_move_angle+0x218>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbb1 	bl	80005a0 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe6d 	bl	8000b24 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe fb4e 	bl	80004f0 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb49 	bl	80004f0 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f009 fced 	bl	800b844 <cos>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb36 	bl	80004f0 <__aeabi_f2d>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fb31 	bl	80004f0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f009 fd1f 	bl	800b8d8 <sin>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fb7d 	bl	80005a0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe f9c1 	bl	8000234 <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe33 	bl	8000b24 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <chao_move_angle+0x224>)
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7fe fb13 	bl	80004f0 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb0e 	bl	80004f0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f009 fcb2 	bl	800b844 <cos>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb5a 	bl	80005a0 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fafb 	bl	80004f0 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe faf6 	bl	80004f0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f009 fce4 	bl	800b8d8 <sin>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb42 	bl	80005a0 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4640      	mov	r0, r8
 8001f22:	4649      	mov	r1, r9
 8001f24:	f7fe f984 	bl	8000230 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdf8 	bl	8000b24 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <chao_move_angle+0x228>)
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe fad8 	bl	80004f0 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fad3 	bl	80004f0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f009 fc77 	bl	800b844 <cos>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fb1f 	bl	80005a0 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fac0 	bl	80004f0 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7fe fabb 	bl	80004f0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f009 fca9 	bl	800b8d8 <sin>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb07 	bl	80005a0 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe f949 	bl	8000230 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbd 	bl	8000b24 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <chao_move_angle+0x22c>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f7fe fa9d 	bl	80004f0 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fa98 	bl	80004f0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f009 fc3c 	bl	800b844 <cos>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fae4 	bl	80005a0 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe fa85 	bl	80004f0 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fa80 	bl	80004f0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f009 fc6e 	bl	800b8d8 <sin>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe facc 	bl	80005a0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f910 	bl	8000234 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd82 	bl	8000b24 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <chao_move_angle+0x230>)
 8002024:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002030:	54442d18 	.word	0x54442d18
 8002034:	400921fb 	.word	0x400921fb
 8002038:	43340000 	.word	0x43340000
 800203c:	20000994 	.word	0x20000994
 8002040:	200009d0 	.word	0x200009d0
 8002044:	20000a0c 	.word	0x20000a0c
 8002048:	20000a48 	.word	0x20000a48

0800204c <mingyan_pathfind_avoidObstacle>:

uint8_t mingyan_pathfind_avoidObstacle(Coordinate *start, Coordinate *end) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	return A_Star_main(start, end, 5);
 8002056:	2205      	movs	r2, #5
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd40 	bl	8001ae0 <A_Star_main>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e026      	b.n	80020cc <huansic_jy62_init+0x60>

	if (!himu->huart)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800208a:	2003      	movs	r0, #3
 800208c:	f004 f88c 	bl	80061a8 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	230a      	movs	r3, #10
 8002096:	2203      	movs	r2, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <huansic_jy62_init+0x68>)
 800209a:	f007 fa01 	bl	80094a0 <HAL_UART_Transmit>

	// instead, just use DMA
	himu->pending_alignment = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3334      	adds	r3, #52	; 0x34
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	4619      	mov	r1, r3
 80020b2:	f007 fab7 	bl	8009624 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000

080020d8 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (!himu)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e112      	b.n	8002310 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	2300      	movs	r3, #0
 80020f0:	73bb      	strb	r3, [r7, #14]
 80020f2:	e0ed      	b.n	80022d0 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fe:	2b55      	cmp	r3, #85	; 0x55
 8002100:	d01c      	beq.n	800213c <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3334      	adds	r3, #52	; 0x34
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f007 fa55 	bl	80095c4 <HAL_UART_Receive_IT>
			if (i) {
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3b01      	subs	r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa69 	bl	8002600 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800212e:	f004 f831 	bl	8006194 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8002138:	2305      	movs	r3, #5
 800213a:	e0e9      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002146:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4413      	add	r3, r2
 8002158:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	3302      	adds	r3, #2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4413      	add	r3, r2
 800216a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	3303      	adds	r3, #3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	4413      	add	r3, r2
 800217c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3304      	adds	r3, #4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	4413      	add	r3, r2
 800218e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3305      	adds	r3, #5
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	4413      	add	r3, r2
 80021a0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	3306      	adds	r3, #6
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	4413      	add	r3, r2
 80021b2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	3307      	adds	r3, #7
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	4413      	add	r3, r2
 80021c4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3308      	adds	r3, #8
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	4413      	add	r3, r2
 80021d6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3309      	adds	r3, #9
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	4413      	add	r3, r2
 80021e8:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	330a      	adds	r3, #10
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f6:	7b7a      	ldrb	r2, [r7, #13]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d01c      	beq.n	8002236 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3334      	adds	r3, #52	; 0x34
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f007 f9d8 	bl	80095c4 <HAL_UART_Receive_IT>
				if (i) {
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3b01      	subs	r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f9ec 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8002228:	f003 ffb4 	bl	8006194 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8002232:	2304      	movs	r3, #4
 8002234:	e06c      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b51      	cmp	r3, #81	; 0x51
 8002244:	d105      	bne.n	8002252 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c4 	bl	80023d8 <__huansic_jy62_decode_accel>
 8002250:	e038      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	3301      	adds	r3, #1
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225e:	2b52      	cmp	r3, #82	; 0x52
 8002260:	d105      	bne.n	800226e <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f920 	bl	80024ac <__huansic_jy62_decode_omega>
 800226c:	e02a      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	3301      	adds	r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b53      	cmp	r3, #83	; 0x53
 800227c:	d105      	bne.n	800228a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f966 	bl	8002554 <__huansic_jy62_decode_theta>
 8002288:	e01c      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	2201      	movs	r2, #1
 800229c:	4619      	mov	r1, r3
 800229e:	f007 f991 	bl	80095c4 <HAL_UART_Receive_IT>
				if (i) {
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9a5 	bl	8002600 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80022b6:	f003 ff6d 	bl	8006194 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80022c0:	2306      	movs	r3, #6
 80022c2:	e025      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	330b      	adds	r3, #11
 80022ce:	73bb      	strb	r3, [r7, #14]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f67f af0e 	bls.w	80020f4 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 80022d8:	f003 ff5c 	bl	8006194 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 80022e2:	2102      	movs	r1, #2
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98b 	bl	8002600 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3334      	adds	r3, #52	; 0x34
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	4619      	mov	r1, r3
 80022f6:	f007 f995 	bl	8009624 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (!himu)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e029      	b.n	800237e <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002330:	2b55      	cmp	r3, #85	; 0x55
 8002332:	d00d      	beq.n	8002350 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3334      	adds	r3, #52	; 0x34
 8002344:	2201      	movs	r2, #1
 8002346:	4619      	mov	r1, r3
 8002348:	f007 f93c 	bl	80095c4 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800234c:	2305      	movs	r3, #5
 800234e:	e016      	b.n	800237e <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3335      	adds	r3, #53	; 0x35
 8002360:	2220      	movs	r2, #32
 8002362:	4619      	mov	r1, r3
 8002364:	f007 f95e 	bl	8009624 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 800237c:	2300      	movs	r3, #0
	}
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3334      	adds	r3, #52	; 0x34
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	f007 f90f 	bl	80095c4 <HAL_UART_Receive_IT>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f007 f8fb 	bl	80095c4 <HAL_UART_Receive_IT>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e050      	b.n	800248c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1cd9      	adds	r1, r3, #3
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	0059      	lsls	r1, r3, #1
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	440b      	add	r3, r1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242c:	b21a      	sxth	r2, r3
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8002434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc7d 	bl	8000d38 <__aeabi_i2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fccb 	bl	8000de0 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f84f 	bl	80004f0 <__aeabi_f2d>
 8002452:	a313      	add	r3, pc, #76	; (adr r3, 80024a0 <__huansic_jy62_decode_accel+0xc8>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8a2 	bl	80005a0 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <__huansic_jy62_decode_accel+0xd0>)
 800246a:	f7fe f9c3 	bl	80007f4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	7bfc      	ldrb	r4, [r7, #15]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb54 	bl	8000b24 <__aeabi_d2f>
 800247c:	4601      	mov	r1, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ca2      	adds	r2, r4, #2
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d9ab      	bls.n	80023ea <__huansic_jy62_decode_accel+0x12>
	}
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	40239999 	.word	0x40239999
 80024a8:	40e00000 	.word	0x40e00000

080024ac <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e03f      	b.n	800253e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1cd9      	adds	r1, r3, #3
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024da:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	0059      	lsls	r1, r3, #1
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002500:	b21a      	sxth	r2, r3
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fc13 	bl	8000d38 <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <__huansic_jy62_decode_omega+0xa4>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc62 	bl	8000de0 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	7bfc      	ldrb	r4, [r7, #15]
 8002520:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd0f 	bl	8000f48 <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	1d23      	adds	r3, r4, #4
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d9bc      	bls.n	80024be <__huansic_jy62_decode_omega+0x12>
	}
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	44fa0000 	.word	0x44fa0000

08002554 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e03f      	b.n	80025e6 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	1cd9      	adds	r1, r3, #3
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	440b      	add	r3, r1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	0059      	lsls	r1, r3, #1
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 80025b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbbf 	bl	8000d38 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <__huansic_jy62_decode_theta+0xa4>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fc0e 	bl	8000de0 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	7bfc      	ldrb	r4, [r7, #15]
 80025c8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fcbb 	bl	8000f48 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f104 0208 	add.w	r2, r4, #8
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d9bc      	bls.n	8002566 <__huansic_jy62_decode_theta+0x12>
	}
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	43340000 	.word	0x43340000
 80025fc:	00000000 	.word	0x00000000

08002600 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8002624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3309      	adds	r3, #9
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	b21a      	sxth	r2, r3
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb72 	bl	8000d38 <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4910      	ldr	r1, [pc, #64]	; (8002698 <__huansic_jy62_decode_temp+0x98>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc75 	bl	8000f48 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff45 	bl	80004f0 <__aeabi_f2d>
 8002666:	a30a      	add	r3, pc, #40	; (adr r3, 8002690 <__huansic_jy62_decode_temp+0x90>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fde2 	bl	8000234 <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa54 	bl	8000b24 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	0a3d70a4 	.word	0x0a3d70a4
 8002694:	404243d7 	.word	0x404243d7
 8002698:	43aa0000 	.word	0x43aa0000

0800269c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d101      	bne.n	80026c8 <huansic_order_new+0x18>
		return 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e046      	b.n	8002756 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e017      	b.n	80026fe <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	4923      	ldr	r1, [pc, #140]	; (8002760 <huansic_order_new+0xb0>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3310      	adds	r3, #16
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <huansic_order_new+0xb0>)
 80026f4:	4413      	add	r3, r2
 80026f6:	e02e      	b.n	8002756 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	3301      	adds	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b3b      	cmp	r3, #59	; 0x3b
 8002702:	d9e4      	bls.n	80026ce <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e021      	b.n	800274e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	4914      	ldr	r1, [pc, #80]	; (8002760 <huansic_order_new+0xb0>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3310      	adds	r3, #16
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d112      	bne.n	8002748 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <huansic_order_new+0xb0>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4403      	add	r3, r0
 8002734:	3310      	adds	r3, #16
 8002736:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <huansic_order_new+0xb0>)
 8002744:	4413      	add	r3, r2
 8002746:	e006      	b.n	8002756 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b3b      	cmp	r3, #59	; 0x3b
 8002752:	d9da      	bls.n	800270a <huansic_order_new+0x5a>
		}
	}

	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000098 	.word	0x20000098

08002764 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff90 	bl	800269c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 800277c:	e003      	b.n	8002786 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	611a      	str	r2, [r3, #16]
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <huansic_motor_init+0x1c>
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <huansic_motor_init+0x168>)
 80027a2:	4a56      	ldr	r2, [pc, #344]	; (80028fc <huansic_motor_init+0x16c>)
 80027a4:	210c      	movs	r1, #12
 80027a6:	4856      	ldr	r0, [pc, #344]	; (8002900 <huansic_motor_init+0x170>)
 80027a8:	f007 fcbe 	bl	800a128 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <huansic_motor_init+0x30>
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <huansic_motor_init+0x174>)
 80027b6:	4a51      	ldr	r2, [pc, #324]	; (80028fc <huansic_motor_init+0x16c>)
 80027b8:	210d      	movs	r1, #13
 80027ba:	4851      	ldr	r0, [pc, #324]	; (8002900 <huansic_motor_init+0x170>)
 80027bc:	f007 fcb4 	bl	800a128 <__assert_func>
	assert(hmotor->dt);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fc9d 	bl	8001108 <__aeabi_fcmpeq>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <huansic_motor_init+0x50>
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <huansic_motor_init+0x178>)
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <huansic_motor_init+0x16c>)
 80027d8:	210e      	movs	r1, #14
 80027da:	4849      	ldr	r0, [pc, #292]	; (8002900 <huansic_motor_init+0x170>)
 80027dc:	f007 fca4 	bl	800a128 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	e01c      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d105      	bne.n	8002840 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
 800283e:	e012      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d105      	bne.n	8002854 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
 8002852:	e008      	b.n	8002866 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d104      	bne.n	8002866 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d026      	beq.n	80028bc <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
 8002880:	e01c      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d105      	bne.n	8002896 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
 8002894:	e012      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d105      	bne.n	80028aa <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	e008      	b.n	80028bc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d104      	bne.n	80028bc <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	213c      	movs	r1, #60	; 0x3c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f005 feaa 	bl	800861c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f005 fd46 	bl	8008364 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f005 fd3a 	bl	8008364 <HAL_TIM_PWM_Start>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800c928 	.word	0x0800c928
 80028fc:	0800c998 	.word	0x0800c998
 8002900:	0800c938 	.word	0x0800c938
 8002904:	0800c958 	.word	0x0800c958
 8002908:	0800c96c 	.word	0x0800c96c

0800290c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	425b      	negs	r3, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8002930:	8afa      	ldrh	r2, [r7, #22]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b29b      	uxth	r3, r3
 800293a:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 800293c:	8afa      	ldrh	r2, [r7, #22]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8002942:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f9f6 	bl	8000d38 <__aeabi_i2f>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe faf7 	bl	8000f48 <__aeabi_fdiv>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdc2 	bl	80004f0 <__aeabi_f2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <huansic_motor_pid+0x2b4>)
 8002972:	f7fd fe15 	bl	80005a0 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4614      	mov	r4, r2
 800297c:	461d      	mov	r5, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdb4 	bl	80004f0 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fc50 	bl	8000234 <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <huansic_motor_pid+0x2b8>)
 80029a2:	f7fd ff27 	bl	80007f4 <__aeabi_ddiv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f8b9 	bl	8000b24 <__aeabi_d2f>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f7fe f900 	bl	8000bcc <__aeabi_fsub>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe f8fb 	bl	8000bcc <__aeabi_fsub>
 80029d6:	4603      	mov	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe f8f1 	bl	8000bcc <__aeabi_fsub>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f8e7 	bl	8000bd0 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f7fe f9e3 	bl	8000de0 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe f9d9 	bl	8000de0 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4619      	mov	r1, r3
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7fe f8cc 	bl	8000bd0 <__addsf3>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f9cc 	bl	8000de0 <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe f8bf 	bl	8000bd0 <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8002a56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fb7c 	bl	8001158 <__aeabi_fcmpgt>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <huansic_motor_pid+0x160>
 8002a66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a6a:	e009      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a6c:	4956      	ldr	r1, [pc, #344]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fb54 	bl	800111c <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <huansic_motor_pid+0x172>
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a7c:	e000      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7fe fb66 	bl	8001158 <__aeabi_fcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <huansic_motor_pid+0x1ba>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f945 	bl	8000d30 <__aeabi_ui2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f998 	bl	8000de0 <__aeabi_fmul>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f008 ff56 	bl	800b964 <roundf>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb7c 	bl	80011b8 <__aeabi_f2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	e000      	b.n	8002ac8 <huansic_motor_pid+0x1bc>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7fe fb24 	bl	800111c <__aeabi_fcmplt>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <huansic_motor_pid+0x202>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f921 	bl	8000d30 <__aeabi_ui2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fe f974 	bl	8000de0 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f008 ff32 	bl	800b964 <roundf>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb58 	bl	80011b8 <__aeabi_f2uiz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	e000      	b.n	8002b10 <huansic_motor_pid+0x204>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <huansic_motor_pid+0x21a>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	897a      	ldrh	r2, [r7, #10]
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
 8002b24:	e01c      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d105      	bne.n	8002b3a <huansic_motor_pid+0x22e>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	897a      	ldrh	r2, [r7, #10]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
 8002b38:	e012      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d105      	bne.n	8002b4e <huansic_motor_pid+0x242>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	897a      	ldrh	r2, [r7, #10]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b4c:	e008      	b.n	8002b60 <huansic_motor_pid+0x254>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d104      	bne.n	8002b60 <huansic_motor_pid+0x254>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	897a      	ldrh	r2, [r7, #10]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d026      	beq.n	8002bb6 <huansic_motor_pid+0x2aa>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <huansic_motor_pid+0x270>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	893a      	ldrh	r2, [r7, #8]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8002b7a:	e01c      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d105      	bne.n	8002b90 <huansic_motor_pid+0x284>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	893a      	ldrh	r2, [r7, #8]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b8e:	e012      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d105      	bne.n	8002ba4 <huansic_motor_pid+0x298>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ba2:	e008      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d104      	bne.n	8002bb6 <huansic_motor_pid+0x2aa>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	893a      	ldrh	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40100000 	.word	0x40100000
 8002bc4:	40140000 	.word	0x40140000
 8002bc8:	bf800000 	.word	0xbf800000

08002bcc <custom_order_new_failed>:
// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms
extern uint8_t CoordinateUpdate;
extern uint8_t delivering_num;

__weak void custom_order_new_failed(uint8_t id) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]

}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	hxb->pending_alignment = 0;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->nextPackageID = 0x00;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	731a      	strb	r2, [r3, #12]
	hxb->nextPackageLength = 6;		// header length
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	735a      	strb	r2, [r3, #13]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 010e 	add.w	r1, r3, #14
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7b5b      	ldrb	r3, [r3, #13]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f006 fd09 	bl	8009624 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <huansic_xb_decodeHeader>:

enum XB_STATUS huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <huansic_xb_decodeHeader+0x12>
		return XB_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e02c      	b.n	8002c9a <huansic_xb_decodeHeader+0x6c>

	// record checksum
	hxb->checksum = hxb->buffer[5];
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7cda      	ldrb	r2, [r3, #19]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7c1b      	ldrb	r3, [r3, #16]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <huansic_xb_decodeHeader+0x30>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7c1b      	ldrb	r3, [r3, #16]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d001      	beq.n	8002c5e <huansic_xb_decodeHeader+0x30>
		return XB_ID_ERROR;
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	e01d      	b.n	8002c9a <huansic_xb_decodeHeader+0x6c>
	hxb->nextPackageID = hxb->buffer[2];
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7c1a      	ldrb	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	731a      	strb	r2, [r3, #12]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7c9a      	ldrb	r2, [r3, #18]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	735a      	strb	r2, [r3, #13]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 010e 	add.w	r1, r3, #14
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7b5b      	ldrb	r3, [r3, #13]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f006 fcd0 	bl	8009624 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
	return XB_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <huansic_xb_decodeBody>:

enum XB_STATUS huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	76fb      	strb	r3, [r7, #27]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	777b      	strb	r3, [r7, #29]
	uint32_t temp;

	// checksum
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77bb      	strb	r3, [r7, #30]
 8002cbc:	e009      	b.n	8002cd2 <huansic_xb_decodeBody+0x2e>
		j ^= hxb->buffer[i];
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	7b9a      	ldrb	r2, [r3, #14]
 8002cc6:	7fbb      	ldrb	r3, [r7, #30]
 8002cc8:	4053      	eors	r3, r2
 8002cca:	77bb      	strb	r3, [r7, #30]
	for (i = 0, j = 0; i < hxb->nextPackageLength; i++)
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7b5b      	ldrb	r3, [r3, #13]
 8002cd6:	7ffa      	ldrb	r2, [r7, #31]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3f0      	bcc.n	8002cbe <huansic_xb_decodeBody+0x1a>

	if (j != hxb->checksum) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002ce2:	7fba      	ldrb	r2, [r7, #30]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d00e      	beq.n	8002d06 <huansic_xb_decodeBody+0x62>
		hxb->pending_alignment = 1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	330e      	adds	r3, #14
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f006 fc62 	bl	80095c4 <HAL_UART_Receive_IT>
		return XB_SUM_ERROR;
 8002d00:	2304      	movs	r3, #4
 8002d02:	f000 bcbf 	b.w	8003684 <huansic_xb_decodeBody+0x9e0>
	}

	if (hxb->nextPackageID == 0x01) {		// game information
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7b1b      	ldrb	r3, [r3, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	f040 816e 	bne.w	8002fec <huansic_xb_decodeBody+0x348>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8002d10:	7f7b      	ldrb	r3, [r7, #29]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	777a      	strb	r2, [r7, #29]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	7b9a      	ldrb	r2, [r3, #14]
 8002d1e:	4b8d      	ldr	r3, [pc, #564]	; (8002f54 <huansic_xb_decodeBody+0x2b0>)
 8002d20:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8002d22:	7f7b      	ldrb	r3, [r7, #29]
 8002d24:	3301      	adds	r3, #1
 8002d26:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e075      	b.n	8002e1a <huansic_xb_decodeBody+0x176>
			index += 2;
 8002d2e:	7f7b      	ldrb	r3, [r7, #29]
 8002d30:	3302      	adds	r3, #2
 8002d32:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8002d34:	7f7b      	ldrb	r3, [r7, #29]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	777a      	strb	r2, [r7, #29]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	7b9b      	ldrb	r3, [r3, #14]
 8002d42:	021a      	lsls	r2, r3, #8
 8002d44:	7ffb      	ldrb	r3, [r7, #31]
 8002d46:	b211      	sxth	r1, r2
 8002d48:	4a83      	ldr	r2, [pc, #524]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002d4a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8002d4e:	7f7b      	ldrb	r3, [r7, #29]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	777a      	strb	r2, [r7, #29]
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	7b9a      	ldrb	r2, [r3, #14]
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
 8002d5e:	b211      	sxth	r1, r2
 8002d60:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002d62:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002d66:	7f7b      	ldrb	r3, [r7, #29]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8002d6c:	7f7b      	ldrb	r3, [r7, #29]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	777a      	strb	r2, [r7, #29]
 8002d72:	461a      	mov	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	7b9b      	ldrb	r3, [r3, #14]
 8002d7a:	021a      	lsls	r2, r3, #8
 8002d7c:	7ffb      	ldrb	r3, [r7, #31]
 8002d7e:	b211      	sxth	r1, r2
 8002d80:	4a75      	ldr	r2, [pc, #468]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	460a      	mov	r2, r1
 8002d88:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8002d8a:	7f7b      	ldrb	r3, [r7, #29]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	7b9a      	ldrb	r2, [r3, #14]
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	b211      	sxth	r1, r2
 8002d96:	4a70      	ldr	r2, [pc, #448]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002da0:	7f7b      	ldrb	r3, [r7, #29]
 8002da2:	3302      	adds	r3, #2
 8002da4:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8002da6:	7f7b      	ldrb	r3, [r7, #29]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	777a      	strb	r2, [r7, #29]
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	7b9b      	ldrb	r3, [r3, #14]
 8002db4:	021a      	lsls	r2, r3, #8
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
 8002db8:	b211      	sxth	r1, r2
 8002dba:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002dc4:	7f7b      	ldrb	r3, [r7, #29]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	7b9a      	ldrb	r2, [r3, #14]
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	b211      	sxth	r1, r2
 8002dd0:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	809a      	strh	r2, [r3, #4]
			index += 2;
 8002dda:	7f7b      	ldrb	r3, [r7, #29]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8002de0:	7f7b      	ldrb	r3, [r7, #29]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	777a      	strb	r2, [r7, #29]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	7b9b      	ldrb	r3, [r3, #14]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
 8002df2:	b211      	sxth	r1, r2
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8002dfe:	7f7b      	ldrb	r3, [r7, #29]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	7b9a      	ldrb	r2, [r3, #14]
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	b211      	sxth	r1, r2
 8002e0a:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <huansic_xb_decodeBody+0x2b4>)
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	460a      	mov	r2, r1
 8002e12:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
 8002e16:	3301      	adds	r3, #1
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d986      	bls.n	8002d2e <huansic_xb_decodeBody+0x8a>
		}

		/* total time of this round */
		index++;
 8002e20:	7f7b      	ldrb	r3, [r7, #29]
 8002e22:	3301      	adds	r3, #1
 8002e24:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8002e26:	7f7b      	ldrb	r3, [r7, #29]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	777a      	strb	r2, [r7, #29]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	7b9b      	ldrb	r3, [r3, #14]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e38:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	4a46      	ldr	r2, [pc, #280]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e42:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e44:	7f7b      	ldrb	r3, [r7, #29]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	777a      	strb	r2, [r7, #29]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	7b9b      	ldrb	r3, [r3, #14]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e5c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	4a3d      	ldr	r2, [pc, #244]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e66:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e68:	7f7b      	ldrb	r3, [r7, #29]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	777a      	strb	r2, [r7, #29]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	7b9b      	ldrb	r3, [r3, #14]
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	4a37      	ldr	r2, [pc, #220]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e80:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e8a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e8c:	7f7b      	ldrb	r3, [r7, #29]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	777a      	strb	r2, [r7, #29]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	7b9b      	ldrb	r3, [r3, #14]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <huansic_xb_decodeBody+0x2b8>)
 8002ea4:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002ea6:	7f7b      	ldrb	r3, [r7, #29]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	7b9b      	ldrb	r3, [r3, #14]
 8002eae:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e03e      	b.n	8002f34 <huansic_xb_decodeBody+0x290>
			index += 2;
 8002eb6:	7f7b      	ldrb	r3, [r7, #29]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002ebc:	7f7b      	ldrb	r3, [r7, #29]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	777a      	strb	r2, [r7, #29]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	7b9b      	ldrb	r3, [r3, #14]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
 8002ece:	b211      	sxth	r1, r2
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <huansic_xb_decodeBody+0x2bc>)
 8002ed2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002ed6:	7f7b      	ldrb	r3, [r7, #29]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	777a      	strb	r2, [r7, #29]
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	7b9a      	ldrb	r2, [r3, #14]
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	b211      	sxth	r1, r2
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <huansic_xb_decodeBody+0x2bc>)
 8002eea:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002eee:	7f7b      	ldrb	r3, [r7, #29]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002ef4:	7f7b      	ldrb	r3, [r7, #29]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	777a      	strb	r2, [r7, #29]
 8002efa:	461a      	mov	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	7b9b      	ldrb	r3, [r3, #14]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
 8002f06:	b211      	sxth	r1, r2
 8002f08:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <huansic_xb_decodeBody+0x2bc>)
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	460a      	mov	r2, r1
 8002f10:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8002f12:	7f7b      	ldrb	r3, [r7, #29]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	777a      	strb	r2, [r7, #29]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	7b9a      	ldrb	r2, [r3, #14]
 8002f20:	7ffb      	ldrb	r3, [r7, #31]
 8002f22:	b211      	sxth	r1, r2
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <huansic_xb_decodeBody+0x2bc>)
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	3301      	adds	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	7ffa      	ldrb	r2, [r7, #31]
 8002f36:	7efb      	ldrb	r3, [r7, #27]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d3bc      	bcc.n	8002eb6 <huansic_xb_decodeBody+0x212>
		}

		/* opponent beacons */
		index++;
 8002f3c:	7f7b      	ldrb	r3, [r7, #29]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8002f42:	7f7b      	ldrb	r3, [r7, #29]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	7b9b      	ldrb	r3, [r3, #14]
 8002f4a:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e047      	b.n	8002fe2 <huansic_xb_decodeBody+0x33e>
 8002f52:	bf00      	nop
 8002f54:	20000b70 	.word	0x20000b70
 8002f58:	20000b7c 	.word	0x20000b7c
 8002f5c:	20000b74 	.word	0x20000b74
 8002f60:	20000ba4 	.word	0x20000ba4
			index += 2;
 8002f64:	7f7b      	ldrb	r3, [r7, #29]
 8002f66:	3302      	adds	r3, #2
 8002f68:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002f6a:	7f7b      	ldrb	r3, [r7, #29]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	777a      	strb	r2, [r7, #29]
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	7b9b      	ldrb	r3, [r3, #14]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	b211      	sxth	r1, r2
 8002f7e:	4aa2      	ldr	r2, [pc, #648]	; (8003208 <huansic_xb_decodeBody+0x564>)
 8002f80:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002f84:	7f7b      	ldrb	r3, [r7, #29]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	777a      	strb	r2, [r7, #29]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	7b9a      	ldrb	r2, [r3, #14]
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	b211      	sxth	r1, r2
 8002f96:	4a9c      	ldr	r2, [pc, #624]	; (8003208 <huansic_xb_decodeBody+0x564>)
 8002f98:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002f9c:	7f7b      	ldrb	r3, [r7, #29]
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002fa2:	7f7b      	ldrb	r3, [r7, #29]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	777a      	strb	r2, [r7, #29]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	7b9b      	ldrb	r3, [r3, #14]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	b211      	sxth	r1, r2
 8002fb6:	4a94      	ldr	r2, [pc, #592]	; (8003208 <huansic_xb_decodeBody+0x564>)
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002fc0:	7f7b      	ldrb	r3, [r7, #29]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	777a      	strb	r2, [r7, #29]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	7b9a      	ldrb	r2, [r3, #14]
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	b211      	sxth	r1, r2
 8002fd2:	4a8d      	ldr	r2, [pc, #564]	; (8003208 <huansic_xb_decodeBody+0x564>)
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	460a      	mov	r2, r1
 8002fda:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	7ffa      	ldrb	r2, [r7, #31]
 8002fe4:	7efb      	ldrb	r3, [r7, #27]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3bc      	bcc.n	8002f64 <huansic_xb_decodeBody+0x2c0>
 8002fea:	e32a      	b.n	8003642 <huansic_xb_decodeBody+0x99e>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7b1b      	ldrb	r3, [r3, #12]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	f040 8324 	bne.w	800363e <huansic_xb_decodeBody+0x99a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8002ff6:	7f7b      	ldrb	r3, [r7, #29]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	777a      	strb	r2, [r7, #29]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	7b9a      	ldrb	r2, [r3, #14]
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <huansic_xb_decodeBody+0x568>)
 8003006:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8003008:	7f7b      	ldrb	r3, [r7, #29]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	777a      	strb	r2, [r7, #29]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	7b9b      	ldrb	r3, [r3, #14]
 8003016:	461a      	mov	r2, r3
 8003018:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 800301a:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 800301c:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003024:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8003026:	7f7b      	ldrb	r3, [r7, #29]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	777a      	strb	r2, [r7, #29]
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	7b9b      	ldrb	r3, [r3, #14]
 8003034:	461a      	mov	r2, r3
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	4a74      	ldr	r2, [pc, #464]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 800303e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8003040:	4b73      	ldr	r3, [pc, #460]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	4a72      	ldr	r2, [pc, #456]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003048:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 800304a:	7f7b      	ldrb	r3, [r7, #29]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	777a      	strb	r2, [r7, #29]
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	7b9b      	ldrb	r3, [r3, #14]
 8003058:	461a      	mov	r2, r3
 800305a:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003062:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	4a69      	ldr	r2, [pc, #420]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 800306c:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 800306e:	7f7b      	ldrb	r3, [r7, #29]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	777a      	strb	r2, [r7, #29]
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	7b9b      	ldrb	r3, [r3, #14]
 800307c:	461a      	mov	r2, r3
 800307e:	4b64      	ldr	r3, [pc, #400]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	4a62      	ldr	r2, [pc, #392]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 8003086:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8003088:	4b62      	ldr	r3, [pc, #392]	; (8003214 <huansic_xb_decodeBody+0x570>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b60      	ldr	r3, [pc, #384]	; (8003210 <huansic_xb_decodeBody+0x56c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	4a61      	ldr	r2, [pc, #388]	; (8003218 <huansic_xb_decodeBody+0x574>)
 8003094:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8003096:	7f7b      	ldrb	r3, [r7, #29]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	777a      	strb	r2, [r7, #29]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	7b9b      	ldrb	r3, [r3, #14]
 80030a4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80030ac:	7f7b      	ldrb	r3, [r7, #29]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	777a      	strb	r2, [r7, #29]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	7b9b      	ldrb	r3, [r3, #14]
 80030ba:	461a      	mov	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80030c8:	7f7b      	ldrb	r3, [r7, #29]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	777a      	strb	r2, [r7, #29]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	7b9b      	ldrb	r3, [r3, #14]
 80030d6:	461a      	mov	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80030e4:	7f7b      	ldrb	r3, [r7, #29]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	777a      	strb	r2, [r7, #29]
 80030ea:	461a      	mov	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	7b9b      	ldrb	r3, [r3, #14]
 80030f2:	461a      	mov	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a46      	ldr	r2, [pc, #280]	; (800321c <huansic_xb_decodeBody+0x578>)
 8003102:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8003104:	7f7b      	ldrb	r3, [r7, #29]
 8003106:	3302      	adds	r3, #2
 8003108:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 800310a:	7f7b      	ldrb	r3, [r7, #29]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	777a      	strb	r2, [r7, #29]
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	7b9b      	ldrb	r3, [r3, #14]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	b21a      	sxth	r2, r3
 800311c:	4b40      	ldr	r3, [pc, #256]	; (8003220 <huansic_xb_decodeBody+0x57c>)
 800311e:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8003120:	7f7b      	ldrb	r3, [r7, #29]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	777a      	strb	r2, [r7, #29]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	7b9b      	ldrb	r3, [r3, #14]
 800312e:	b21a      	sxth	r2, r3
 8003130:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <huansic_xb_decodeBody+0x57c>)
 8003132:	801a      	strh	r2, [r3, #0]
		index += 2;
 8003134:	7f7b      	ldrb	r3, [r7, #29]
 8003136:	3302      	adds	r3, #2
 8003138:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 800313a:	7f7b      	ldrb	r3, [r7, #29]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	777a      	strb	r2, [r7, #29]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	7b9b      	ldrb	r3, [r3, #14]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	b21a      	sxth	r2, r3
 800314c:	4b34      	ldr	r3, [pc, #208]	; (8003220 <huansic_xb_decodeBody+0x57c>)
 800314e:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8003150:	7f7b      	ldrb	r3, [r7, #29]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	777a      	strb	r2, [r7, #29]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	7b9b      	ldrb	r3, [r3, #14]
 800315e:	b21a      	sxth	r2, r3
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <huansic_xb_decodeBody+0x57c>)
 8003162:	805a      	strh	r2, [r3, #2]
		CoordinateUpdate = 1;
 8003164:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <huansic_xb_decodeBody+0x580>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]

		/* fetch battery */
		temp = hxb->buffer[index++];
 800316a:	7f7b      	ldrb	r3, [r7, #29]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	777a      	strb	r2, [r7, #29]
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	7b9b      	ldrb	r3, [r3, #14]
 8003178:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003180:	7f7b      	ldrb	r3, [r7, #29]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	777a      	strb	r2, [r7, #29]
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	7b9b      	ldrb	r3, [r3, #14]
 800318e:	461a      	mov	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800319c:	7f7b      	ldrb	r3, [r7, #29]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	777a      	strb	r2, [r7, #29]
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	7b9b      	ldrb	r3, [r3, #14]
 80031aa:	461a      	mov	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80031b8:	7f7b      	ldrb	r3, [r7, #29]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	777a      	strb	r2, [r7, #29]
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	7b9b      	ldrb	r3, [r3, #14]
 80031c6:	461a      	mov	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <huansic_xb_decodeBody+0x584>)
 80031d6:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <huansic_xb_decodeBody+0x588>)
 80031da:	f107 0308 	add.w	r3, r7, #8
 80031de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031e2:	6018      	str	r0, [r3, #0]
 80031e4:	3304      	adds	r3, #4
 80031e6:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 80031ec:	7f7b      	ldrb	r3, [r7, #29]
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	777a      	strb	r2, [r7, #29]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	7b9b      	ldrb	r3, [r3, #14]
 80031fa:	76fb      	strb	r3, [r7, #27]
		delivering_num = listLength;
 80031fc:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <huansic_xb_decodeBody+0x58c>)
 80031fe:	7efb      	ldrb	r3, [r7, #27]
 8003200:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e101      	b.n	800340c <huansic_xb_decodeBody+0x768>
 8003208:	20000bb0 	.word	0x20000bb0
 800320c:	20000b71 	.word	0x20000b71
 8003210:	20000b78 	.word	0x20000b78
 8003214:	20000b74 	.word	0x20000b74
 8003218:	20000bfc 	.word	0x20000bfc
 800321c:	20000bf4 	.word	0x20000bf4
 8003220:	20000be0 	.word	0x20000be0
 8003224:	20000bec 	.word	0x20000bec
 8003228:	20000bf8 	.word	0x20000bf8
 800322c:	0800c978 	.word	0x0800c978
 8003230:	20000bdc 	.word	0x20000bdc
			temp = hxb->buffer[index + 24];
 8003234:	7f7b      	ldrb	r3, [r7, #29]
 8003236:	3318      	adds	r3, #24
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	7b9b      	ldrb	r3, [r3, #14]
 800323e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 8003246:	7f7b      	ldrb	r3, [r7, #29]
 8003248:	3319      	adds	r3, #25
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	7b9b      	ldrb	r3, [r3, #14]
 8003250:	461a      	mov	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 800325e:	7f7b      	ldrb	r3, [r7, #29]
 8003260:	331a      	adds	r3, #26
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	7b9b      	ldrb	r3, [r3, #14]
 8003268:	461a      	mov	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 8003276:	7f7b      	ldrb	r3, [r7, #29]
 8003278:	331b      	adds	r3, #27
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	7b9b      	ldrb	r3, [r3, #14]
 8003280:	461a      	mov	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b25b      	sxtb	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fa0f 	bl	80026b0 <huansic_order_new>
 8003292:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <huansic_xb_decodeBody+0x608>
				index += 28;
 800329a:	7f7b      	ldrb	r3, [r7, #29]
 800329c:	331c      	adds	r3, #28
 800329e:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fc91 	bl	8002bcc <custom_order_new_failed>
				continue;
 80032aa:	e0ac      	b.n	8003406 <huansic_xb_decodeBody+0x762>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80032ac:	7f7b      	ldrb	r3, [r7, #29]
 80032ae:	3302      	adds	r3, #2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	7b9b      	ldrb	r3, [r3, #14]
 80032b6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	7f7b      	ldrb	r3, [r7, #29]
 80032bc:	3303      	adds	r3, #3
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	440b      	add	r3, r1
 80032c2:	7b9b      	ldrb	r3, [r3, #14]
 80032c4:	b21b      	sxth	r3, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80032ce:	7f7b      	ldrb	r3, [r7, #29]
 80032d0:	3306      	adds	r3, #6
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	7b9b      	ldrb	r3, [r3, #14]
 80032d8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80032da:	b21a      	sxth	r2, r3
 80032dc:	7f7b      	ldrb	r3, [r7, #29]
 80032de:	3307      	adds	r3, #7
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	440b      	add	r3, r1
 80032e4:	7b9b      	ldrb	r3, [r3, #14]
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80032f0:	7f7b      	ldrb	r3, [r7, #29]
 80032f2:	330a      	adds	r3, #10
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	7b9b      	ldrb	r3, [r3, #14]
 80032fa:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80032fc:	b21a      	sxth	r2, r3
 80032fe:	7f7b      	ldrb	r3, [r7, #29]
 8003300:	330b      	adds	r3, #11
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	440b      	add	r3, r1
 8003306:	7b9b      	ldrb	r3, [r3, #14]
 8003308:	b21b      	sxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003312:	7f7b      	ldrb	r3, [r7, #29]
 8003314:	330e      	adds	r3, #14
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	7b9b      	ldrb	r3, [r3, #14]
 800331c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 800331e:	b21a      	sxth	r2, r3
 8003320:	7f7b      	ldrb	r3, [r7, #29]
 8003322:	330f      	adds	r3, #15
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	440b      	add	r3, r1
 8003328:	7b9b      	ldrb	r3, [r3, #14]
 800332a:	b21b      	sxth	r3, r3
 800332c:	4313      	orrs	r3, r2
 800332e:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8003334:	7f7b      	ldrb	r3, [r7, #29]
 8003336:	3310      	adds	r3, #16
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	7b9b      	ldrb	r3, [r3, #14]
 800333e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8003346:	7f7b      	ldrb	r3, [r7, #29]
 8003348:	3311      	adds	r3, #17
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	7b9b      	ldrb	r3, [r3, #14]
 8003350:	461a      	mov	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 800335e:	7f7b      	ldrb	r3, [r7, #29]
 8003360:	3312      	adds	r3, #18
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	7b9b      	ldrb	r3, [r3, #14]
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8003376:	7f7b      	ldrb	r3, [r7, #29]
 8003378:	3313      	adds	r3, #19
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	7b9b      	ldrb	r3, [r3, #14]
 8003380:	461a      	mov	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800338e:	7f7b      	ldrb	r3, [r7, #29]
 8003390:	3314      	adds	r3, #20
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	7b9b      	ldrb	r3, [r3, #14]
 8003398:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80033a0:	7f7b      	ldrb	r3, [r7, #29]
 80033a2:	3315      	adds	r3, #21
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	7b9b      	ldrb	r3, [r3, #14]
 80033aa:	461a      	mov	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80033b8:	7f7b      	ldrb	r3, [r7, #29]
 80033ba:	3316      	adds	r3, #22
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	7b9b      	ldrb	r3, [r3, #14]
 80033c2:	461a      	mov	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80033d0:	7f7b      	ldrb	r3, [r7, #29]
 80033d2:	3317      	adds	r3, #23
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	7b9b      	ldrb	r3, [r3, #14]
 80033da:	461a      	mov	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 80033ec:	7f7b      	ldrb	r3, [r7, #29]
 80033ee:	331c      	adds	r3, #28
 80033f0:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	7f3b      	ldrb	r3, [r7, #28]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	7739      	strb	r1, [r7, #28]
 80033fc:	b252      	sxtb	r2, r2
 80033fe:	3320      	adds	r3, #32
 8003400:	443b      	add	r3, r7
 8003402:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	3301      	adds	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	7ffa      	ldrb	r2, [r7, #31]
 800340e:	7efb      	ldrb	r3, [r7, #27]
 8003410:	429a      	cmp	r2, r3
 8003412:	f4ff af0f 	bcc.w	8003234 <huansic_xb_decodeBody+0x590>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e02d      	b.n	8003478 <huansic_xb_decodeBody+0x7d4>
			if (delivering[i]->id != -1) {
 800341c:	7ffb      	ldrb	r3, [r7, #31]
 800341e:	4a9b      	ldr	r2, [pc, #620]	; (800368c <huansic_xb_decodeBody+0x9e8>)
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d022      	beq.n	8003472 <huansic_xb_decodeBody+0x7ce>
				for (j = 0; j < updatedOrderIndex; j++)
 800342c:	2300      	movs	r3, #0
 800342e:	77bb      	strb	r3, [r7, #30]
 8003430:	e011      	b.n	8003456 <huansic_xb_decodeBody+0x7b2>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	4a95      	ldr	r2, [pc, #596]	; (800368c <huansic_xb_decodeBody+0x9e8>)
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	7fba      	ldrb	r2, [r7, #30]
 800343e:	3220      	adds	r2, #32
 8003440:	443a      	add	r2, r7
 8003442:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 8003446:	4293      	cmp	r3, r2
 8003448:	d102      	bne.n	8003450 <huansic_xb_decodeBody+0x7ac>
						j = 255;
 800344a:	23ff      	movs	r3, #255	; 0xff
 800344c:	77bb      	strb	r3, [r7, #30]
						break;
 800344e:	e006      	b.n	800345e <huansic_xb_decodeBody+0x7ba>
				for (j = 0; j < updatedOrderIndex; j++)
 8003450:	7fbb      	ldrb	r3, [r7, #30]
 8003452:	3301      	adds	r3, #1
 8003454:	77bb      	strb	r3, [r7, #30]
 8003456:	7fba      	ldrb	r2, [r7, #30]
 8003458:	7f3b      	ldrb	r3, [r7, #28]
 800345a:	429a      	cmp	r2, r3
 800345c:	d3e9      	bcc.n	8003432 <huansic_xb_decodeBody+0x78e>
					}
				if (j != 255)
 800345e:	7fbb      	ldrb	r3, [r7, #30]
 8003460:	2bff      	cmp	r3, #255	; 0xff
 8003462:	d006      	beq.n	8003472 <huansic_xb_decodeBody+0x7ce>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8003464:	7ffb      	ldrb	r3, [r7, #31]
 8003466:	4a89      	ldr	r2, [pc, #548]	; (800368c <huansic_xb_decodeBody+0x9e8>)
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f979 	bl	8002764 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	3301      	adds	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d9ce      	bls.n	800341c <huansic_xb_decodeBody+0x778>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 800347e:	7f7b      	ldrb	r3, [r7, #29]
 8003480:	3318      	adds	r3, #24
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	7b9b      	ldrb	r3, [r3, #14]
 8003488:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8003490:	7f7b      	ldrb	r3, [r7, #29]
 8003492:	3319      	adds	r3, #25
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	7b9b      	ldrb	r3, [r3, #14]
 800349a:	461a      	mov	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 80034a8:	7f7b      	ldrb	r3, [r7, #29]
 80034aa:	331a      	adds	r3, #26
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	7b9b      	ldrb	r3, [r3, #14]
 80034b2:	461a      	mov	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 80034c0:	7f7b      	ldrb	r3, [r7, #29]
 80034c2:	331b      	adds	r3, #27
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	7b9b      	ldrb	r3, [r3, #14]
 80034ca:	461a      	mov	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f8ea 	bl	80026b0 <huansic_order_new>
 80034dc:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <huansic_xb_decodeBody+0x852>
			index += 28;
 80034e4:	7f7b      	ldrb	r3, [r7, #29]
 80034e6:	331c      	adds	r3, #28
 80034e8:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fb6c 	bl	8002bcc <custom_order_new_failed>
 80034f4:	e0a5      	b.n	8003642 <huansic_xb_decodeBody+0x99e>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80034f6:	7f7b      	ldrb	r3, [r7, #29]
 80034f8:	3302      	adds	r3, #2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	7b9b      	ldrb	r3, [r3, #14]
 8003500:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8003502:	b21a      	sxth	r2, r3
 8003504:	7f7b      	ldrb	r3, [r7, #29]
 8003506:	3303      	adds	r3, #3
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	440b      	add	r3, r1
 800350c:	7b9b      	ldrb	r3, [r3, #14]
 800350e:	b21b      	sxth	r3, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003518:	7f7b      	ldrb	r3, [r7, #29]
 800351a:	3306      	adds	r3, #6
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	7b9b      	ldrb	r3, [r3, #14]
 8003522:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8003524:	b21a      	sxth	r2, r3
 8003526:	7f7b      	ldrb	r3, [r7, #29]
 8003528:	3307      	adds	r3, #7
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	440b      	add	r3, r1
 800352e:	7b9b      	ldrb	r3, [r3, #14]
 8003530:	b21b      	sxth	r3, r3
 8003532:	4313      	orrs	r3, r2
 8003534:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	805a      	strh	r2, [r3, #2]
			order_append(tempOrder);
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f001 fa96 	bl	8004a6c <order_append>
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8003540:	7f7b      	ldrb	r3, [r7, #29]
 8003542:	330a      	adds	r3, #10
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	7b9b      	ldrb	r3, [r3, #14]
 800354a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 800354c:	b21a      	sxth	r2, r3
 800354e:	7f7b      	ldrb	r3, [r7, #29]
 8003550:	330b      	adds	r3, #11
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	440b      	add	r3, r1
 8003556:	7b9b      	ldrb	r3, [r3, #14]
 8003558:	b21b      	sxth	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003562:	7f7b      	ldrb	r3, [r7, #29]
 8003564:	330e      	adds	r3, #14
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	7b9b      	ldrb	r3, [r3, #14]
 800356c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 800356e:	b21a      	sxth	r2, r3
 8003570:	7f7b      	ldrb	r3, [r7, #29]
 8003572:	330f      	adds	r3, #15
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	440b      	add	r3, r1
 8003578:	7b9b      	ldrb	r3, [r3, #14]
 800357a:	b21b      	sxth	r3, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8003584:	7f7b      	ldrb	r3, [r7, #29]
 8003586:	3310      	adds	r3, #16
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	7b9b      	ldrb	r3, [r3, #14]
 800358e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8003596:	7f7b      	ldrb	r3, [r7, #29]
 8003598:	3311      	adds	r3, #17
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	7b9b      	ldrb	r3, [r3, #14]
 80035a0:	461a      	mov	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80035ae:	7f7b      	ldrb	r3, [r7, #29]
 80035b0:	3312      	adds	r3, #18
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	7b9b      	ldrb	r3, [r3, #14]
 80035b8:	461a      	mov	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80035c6:	7f7b      	ldrb	r3, [r7, #29]
 80035c8:	3313      	adds	r3, #19
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	7b9b      	ldrb	r3, [r3, #14]
 80035d0:	461a      	mov	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 80035de:	7f7b      	ldrb	r3, [r7, #29]
 80035e0:	3314      	adds	r3, #20
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	7b9b      	ldrb	r3, [r3, #14]
 80035e8:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80035f0:	7f7b      	ldrb	r3, [r7, #29]
 80035f2:	3315      	adds	r3, #21
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4413      	add	r3, r2
 80035f8:	7b9b      	ldrb	r3, [r3, #14]
 80035fa:	461a      	mov	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8003608:	7f7b      	ldrb	r3, [r7, #29]
 800360a:	3316      	adds	r3, #22
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	7b9b      	ldrb	r3, [r3, #14]
 8003612:	461a      	mov	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8003620:	7f7b      	ldrb	r3, [r7, #29]
 8003622:	3317      	adds	r3, #23
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	7b9b      	ldrb	r3, [r3, #14]
 800362a:	461a      	mov	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8003632:	f107 0310 	add.w	r3, r7, #16
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	615a      	str	r2, [r3, #20]
 800363c:	e001      	b.n	8003642 <huansic_xb_decodeBody+0x99e>
		}
	} else {
		return XB_ID_ERROR;
 800363e:	2306      	movs	r3, #6
 8003640:	e020      	b.n	8003684 <huansic_xb_decodeBody+0x9e0>
	}

	// set up next DMA
	hxb->lastUpdated = HAL_GetTick();		// update last updated time stamp
 8003642:	f002 fda7 	bl	8006194 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
	hxb->nextPackageLength = 6;		// header length
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2206      	movs	r2, #6
 8003650:	735a      	strb	r2, [r3, #13]
	hxb->nextPackageID = 0x00;		// the next one is header
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	731a      	strb	r2, [r3, #12]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f103 010e 	add.w	r1, r3, #14
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7b5b      	ldrb	r3, [r3, #13]
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	f005 ffdb 	bl	8009624 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0204 	bic.w	r2, r2, #4
 8003680:	601a      	str	r2, [r3, #0]
	return XB_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000bc8 	.word	0x20000bc8

08003690 <huansic_xb_setBeacon>:
void huansic_xb_requestGameInfo(XB_HandleTypeDef *hxb) {
	uint8_t buffer = 0x00;
	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
}

void huansic_xb_setBeacon(XB_HandleTypeDef *hxb) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0x02;
 8003698:	2302      	movs	r3, #2
 800369a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	f107 010f 	add.w	r1, r7, #15
 80036a4:	230a      	movs	r3, #10
 80036a6:	2201      	movs	r2, #1
 80036a8:	f005 fefa 	bl	80094a0 <HAL_UART_Transmit>
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <huansic_xb_dma_error>:

void huansic_xb_dma_error(XB_HandleTypeDef *hxb) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	330e      	adds	r3, #14
 80036cc:	2201      	movs	r2, #1
 80036ce:	4619      	mov	r1, r3
 80036d0:	f005 ff78 	bl	80095c4 <HAL_UART_Receive_IT>
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <huansic_xb_it_error>:

void huansic_xb_it_error(XB_HandleTypeDef *hxb) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	330e      	adds	r3, #14
 80036f4:	2201      	movs	r2, #1
 80036f6:	4619      	mov	r1, r3
 80036f8:	f005 ff64 	bl	80095c4 <HAL_UART_Receive_IT>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <huansic_xb_isr>:

enum XB_STATUS huansic_xb_isr(XB_HandleTypeDef *hxb) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	if (!hxb)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <huansic_xb_isr+0x12>
		return XB_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e038      	b.n	8003788 <huansic_xb_isr+0x84>

	if (hxb->buffer[0] == 0xAA && hxb->lastByte == 0x55) {		// if aligned (look for header)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7b9b      	ldrb	r3, [r3, #14]
 800371a:	2baa      	cmp	r3, #170	; 0xaa
 800371c:	d122      	bne.n	8003764 <huansic_xb_isr+0x60>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003724:	2b55      	cmp	r3, #85	; 0x55
 8003726:	d11d      	bne.n	8003764 <huansic_xb_isr+0x60>
		hxb->pending_alignment = 0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->nextPackageID = 0x00;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	731a      	strb	r2, [r3, #12]
		hxb->buffer[1] = 0x55;		// for further processing
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2255      	movs	r2, #85	; 0x55
 800373a:	73da      	strb	r2, [r3, #15]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2], 4);		// receive the rest of header
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3310      	adds	r3, #16
 8003744:	2204      	movs	r2, #4
 8003746:	4619      	mov	r1, r3
 8003748:	f005 ff6c 	bl	8009624 <HAL_UART_Receive_DMA>
		hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0204 	bic.w	r2, r2, #4
 800375e:	601a      	str	r2, [r3, #0]
		return XB_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e011      	b.n	8003788 <huansic_xb_isr+0x84>
	} else {
		hxb->pending_alignment = 1;		// enter aligning mode if not already
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = hxb->buffer[0];
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7b9a      	ldrb	r2, [r3, #14]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	330e      	adds	r3, #14
 800377e:	2201      	movs	r2, #1
 8003780:	4619      	mov	r1, r3
 8003782:	f005 ff1f 	bl	80095c4 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8003786:	2305      	movs	r3, #5
	}
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <huansic_xb_dma_isr>:

enum XB_STATUS huansic_xb_dma_isr(XB_HandleTypeDef *hxb) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <huansic_xb_dma_isr+0x12>
		return XB_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00c      	b.n	80037bc <huansic_xb_dma_isr+0x2c>

	if (hxb->nextPackageID == 0x00)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7b1b      	ldrb	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <huansic_xb_dma_isr+0x24>
		return huansic_xb_decodeHeader(hxb);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fa3f 	bl	8002c2e <huansic_xb_decodeHeader>
 80037b0:	4603      	mov	r3, r0
 80037b2:	e003      	b.n	80037bc <huansic_xb_dma_isr+0x2c>
	else
		return huansic_xb_decodeBody(hxb);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fa75 	bl	8002ca4 <huansic_xb_decodeBody>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80037ca:	f002 fc8b 	bl	80060e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80037ce:	f000 f9d3 	bl	8003b78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80037d2:	f000 fdcd 	bl	8004370 <MX_GPIO_Init>
	MX_DMA_Init();
 80037d6:	f000 fda5 	bl	8004324 <MX_DMA_Init>
	MX_I2C1_Init();
 80037da:	f000 fa13 	bl	8003c04 <MX_I2C1_Init>
	MX_TIM1_Init();
 80037de:	f000 fa3f 	bl	8003c60 <MX_TIM1_Init>
	MX_TIM2_Init();
 80037e2:	f000 fb01 	bl	8003de8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80037e6:	f000 fb53 	bl	8003e90 <MX_TIM3_Init>
	MX_TIM4_Init();
 80037ea:	f000 fba5 	bl	8003f38 <MX_TIM4_Init>
	MX_TIM5_Init();
 80037ee:	f000 fbf7 	bl	8003fe0 <MX_TIM5_Init>
	MX_TIM8_Init();
 80037f2:	f000 fc7f 	bl	80040f4 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80037f6:	f000 fd41 	bl	800427c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80037fa:	f000 fd69 	bl	80042d0 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 80037fe:	f000 fc43 	bl	8004088 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//Motor init
	cmotor_lf.encoderInverted = 1;
 8003802:	4ba5      	ldr	r3, [pc, #660]	; (8003a98 <main+0x2d4>)
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 800380a:	4ba4      	ldr	r3, [pc, #656]	; (8003a9c <main+0x2d8>)
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 8003812:	f000 fe03 	bl	800441c <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8003816:	f000 fe35 	bl	8004484 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 800381a:	f000 fe67 	bl	80044ec <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 800381e:	f000 fe99 	bl	8004554 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8003822:	f000 fecb 	bl	80045bc <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8003826:	f000 fedd 	bl	80045e4 <HUAN_ZIGBEE_Init>
	order_list_init();
 800382a:	f001 f911 	bl	8004a50 <order_list_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 800382e:	2014      	movs	r0, #20
 8003830:	f002 fcba 	bl	80061a8 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8003834:	489a      	ldr	r0, [pc, #616]	; (8003aa0 <main+0x2dc>)
 8003836:	f004 fcdd 	bl	80081f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 800383a:	499a      	ldr	r1, [pc, #616]	; (8003aa4 <main+0x2e0>)
 800383c:	489a      	ldr	r0, [pc, #616]	; (8003aa8 <main+0x2e4>)
 800383e:	f006 ffd1 	bl	800a7e4 <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 8003842:	4a9a      	ldr	r2, [pc, #616]	; (8003aac <main+0x2e8>)
 8003844:	2301      	movs	r3, #1
 8003846:	ca06      	ldmia	r2, {r1, r2}
 8003848:	4897      	ldr	r0, [pc, #604]	; (8003aa8 <main+0x2e4>)
 800384a:	f001 fe2b 	bl	80054a4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800384e:	f001 fd27 	bl	80052a0 <ssd1306_UpdateScreen>

	// test A*
	myCoord.x = 0;
 8003852:	4b97      	ldr	r3, [pc, #604]	; (8003ab0 <main+0x2ec>)
 8003854:	2200      	movs	r2, #0
 8003856:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 8003858:	4b95      	ldr	r3, [pc, #596]	; (8003ab0 <main+0x2ec>)
 800385a:	2200      	movs	r2, #0
 800385c:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 50;
 800385e:	2332      	movs	r3, #50	; 0x32
 8003860:	80bb      	strh	r3, [r7, #4]
	goal.y = 10;
 8003862:	230a      	movs	r3, #10
 8003864:	80fb      	strh	r3, [r7, #6]
	EstiCoord.x = (float)myCoord.x;
 8003866:	4b92      	ldr	r3, [pc, #584]	; (8003ab0 <main+0x2ec>)
 8003868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd fa63 	bl	8000d38 <__aeabi_i2f>
 8003872:	4603      	mov	r3, r0
 8003874:	4a8f      	ldr	r2, [pc, #572]	; (8003ab4 <main+0x2f0>)
 8003876:	6013      	str	r3, [r2, #0]
	EstiCoord.y = (float)myCoord.y;
 8003878:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <main+0x2ec>)
 800387a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fa5a 	bl	8000d38 <__aeabi_i2f>
 8003884:	4603      	mov	r3, r0
 8003886:	4a8b      	ldr	r2, [pc, #556]	; (8003ab4 <main+0x2f0>)
 8003888:	6053      	str	r3, [r2, #4]
	CoordinateUpdate = 0;
 800388a:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <main+0x2f4>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
//	uint8_t flag = mingyan_pathfind_avoidObstacle(&myCoord, &goal);
//	Position_P(&myCoord, &goal);
	GotoDestination(goal, 0);
 8003890:	2100      	movs	r1, #0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 f9ae 	bl	8004bf4 <GotoDestination>
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

		if(gameStatus == 0){		// if the game is not running
 8003898:	4b88      	ldr	r3, [pc, #544]	; (8003abc <main+0x2f8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11f      	bne.n	80038e0 <main+0x11c>
	    	LED1_ON;
 80038a0:	2201      	movs	r2, #1
 80038a2:	2101      	movs	r1, #1
 80038a4:	4886      	ldr	r0, [pc, #536]	; (8003ac0 <main+0x2fc>)
 80038a6:	f003 fbc7 	bl	8007038 <HAL_GPIO_WritePin>
	    	HAL_Delay(1000);
 80038aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ae:	f002 fc7b 	bl	80061a8 <HAL_Delay>
	    	LED1_OFF;
 80038b2:	2200      	movs	r2, #0
 80038b4:	2101      	movs	r1, #1
 80038b6:	4882      	ldr	r0, [pc, #520]	; (8003ac0 <main+0x2fc>)
 80038b8:	f003 fbbe 	bl	8007038 <HAL_GPIO_WritePin>
 80038bc:	e7ec      	b.n	8003898 <main+0xd4>
		}
		else
		{
			while (gameStage == 0) {		// pre-match
				chao_move_angle(0, 0);
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f7fe faa7 	bl	8001e18 <chao_move_angle>
				// find angle offset
				initangleZ = -himu.theta[2];
 80038ca:	4b7e      	ldr	r3, [pc, #504]	; (8003ac4 <main+0x300>)
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80038d2:	4a7d      	ldr	r2, [pc, #500]	; (8003ac8 <main+0x304>)
 80038d4:	6013      	str	r3, [r2, #0]
				// do some initialization
				// get obstacle list
				Cal_Battery_Coord();
 80038d6:	f002 fa85 	bl	8005de4 <Cal_Battery_Coord>
				task_mode = 0;
 80038da:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <main+0x308>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
			while (gameStage == 0) {		// pre-match
 80038e0:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <main+0x30c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ea      	beq.n	80038be <main+0xfa>
			}

			while (gameStage == 1){			// first-half
 80038e8:	e089      	b.n	80039fe <main+0x23a>
				if(task_mode==0){
 80038ea:	4b78      	ldr	r3, [pc, #480]	; (8003acc <main+0x308>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <main+0x13a>
					//setChargingPile
					set_Beacons();
 80038f2:	f002 fa55 	bl	8005da0 <set_Beacons>
					task_mode = 1;
 80038f6:	4b75      	ldr	r3, [pc, #468]	; (8003acc <main+0x308>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e07f      	b.n	80039fe <main+0x23a>
				}
				else {
					if(myCharge < 200){
 80038fe:	4b75      	ldr	r3, [pc, #468]	; (8003ad4 <main+0x310>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2bc7      	cmp	r3, #199	; 0xc7
 8003904:	dc02      	bgt.n	800390c <main+0x148>
						task_mode = 3;
 8003906:	4b71      	ldr	r3, [pc, #452]	; (8003acc <main+0x308>)
 8003908:	2203      	movs	r2, #3
 800390a:	701a      	strb	r2, [r3, #0]
					}
					if(task_mode == 1){
 800390c:	4b6f      	ldr	r3, [pc, #444]	; (8003acc <main+0x308>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <main+0x160>
						Get_packet(merchant);
 8003914:	4b70      	ldr	r3, [pc, #448]	; (8003ad8 <main+0x314>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	f002 fafa 	bl	8005f10 <Get_packet>
						task_mode = 4;
 800391c:	4b6b      	ldr	r3, [pc, #428]	; (8003acc <main+0x308>)
 800391e:	2204      	movs	r2, #4
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e06c      	b.n	80039fe <main+0x23a>
					}
					else if(task_mode == 2){
 8003924:	4b69      	ldr	r3, [pc, #420]	; (8003acc <main+0x308>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d107      	bne.n	800393c <main+0x178>
						Send_packet(consumer);
 800392c:	4b6b      	ldr	r3, [pc, #428]	; (8003adc <main+0x318>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	f002 fafa 	bl	8005f28 <Send_packet>
						task_mode = 4;
 8003934:	4b65      	ldr	r3, [pc, #404]	; (8003acc <main+0x308>)
 8003936:	2204      	movs	r2, #4
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e060      	b.n	80039fe <main+0x23a>
					}
					else if(task_mode == 3){
 800393c:	4b63      	ldr	r3, [pc, #396]	; (8003acc <main+0x308>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d109      	bne.n	8003958 <main+0x194>
						go_Charge();
 8003944:	f002 fa1c 	bl	8005d80 <go_Charge>
						HAL_Delay(1000);
 8003948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800394c:	f002 fc2c 	bl	80061a8 <HAL_Delay>
						task_mode = 4;
 8003950:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <main+0x308>)
 8003952:	2204      	movs	r2, #4
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e052      	b.n	80039fe <main+0x23a>
					}
					else
					{
						merchant = Get_nearest_order();
 8003958:	f001 f8cc 	bl	8004af4 <Get_nearest_order>
 800395c:	4603      	mov	r3, r0
 800395e:	4a5e      	ldr	r2, [pc, #376]	; (8003ad8 <main+0x314>)
 8003960:	6013      	str	r3, [r2, #0]
						consumer = Get_nearest_consumer();
 8003962:	f002 faed 	bl	8005f40 <Get_nearest_consumer>
 8003966:	4603      	mov	r3, r0
 8003968:	4a5c      	ldr	r2, [pc, #368]	; (8003adc <main+0x318>)
 800396a:	6013      	str	r3, [r2, #0]
						if(delivering_num > 3){
 800396c:	4b5c      	ldr	r3, [pc, #368]	; (8003ae0 <main+0x31c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d903      	bls.n	800397c <main+0x1b8>
							task_mode = 2;
 8003974:	4b55      	ldr	r3, [pc, #340]	; (8003acc <main+0x308>)
 8003976:	2202      	movs	r2, #2
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e040      	b.n	80039fe <main+0x23a>
						}
						else if(delivering_num == 0){
 800397c:	4b58      	ldr	r3, [pc, #352]	; (8003ae0 <main+0x31c>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <main+0x1c8>
							task_mode = 1;
 8003984:	4b51      	ldr	r3, [pc, #324]	; (8003acc <main+0x308>)
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e038      	b.n	80039fe <main+0x23a>
						}
						else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 800398c:	4b52      	ldr	r3, [pc, #328]	; (8003ad8 <main+0x314>)
 800398e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003992:	461a      	mov	r2, r3
 8003994:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <main+0x2ec>)
 8003996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80039a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80039a4:	4b4c      	ldr	r3, [pc, #304]	; (8003ad8 <main+0x314>)
 80039a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <main+0x2ec>)
 80039ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039b2:	1acb      	subs	r3, r1, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bfb8      	it	lt
 80039b8:	425b      	neglt	r3, r3
 80039ba:	441a      	add	r2, r3
 80039bc:	4b47      	ldr	r3, [pc, #284]	; (8003adc <main+0x318>)
 80039be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c2:	4619      	mov	r1, r3
 80039c4:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <main+0x2ec>)
 80039c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ca:	1acb      	subs	r3, r1, r3
 80039cc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80039d0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80039d4:	4b41      	ldr	r3, [pc, #260]	; (8003adc <main+0x318>)
 80039d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039da:	4618      	mov	r0, r3
 80039dc:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <main+0x2ec>)
 80039de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039e2:	1ac3      	subs	r3, r0, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bfb8      	it	lt
 80039e8:	425b      	neglt	r3, r3
 80039ea:	440b      	add	r3, r1
 80039ec:	429a      	cmp	r2, r3
 80039ee:	da03      	bge.n	80039f8 <main+0x234>
							task_mode = 1;
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <main+0x308>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e002      	b.n	80039fe <main+0x23a>
						}
						else{
							task_mode = 2;
 80039f8:	4b34      	ldr	r3, [pc, #208]	; (8003acc <main+0x308>)
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
			while (gameStage == 1){			// first-half
 80039fe:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <main+0x30c>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f43f af71 	beq.w	80038ea <main+0x126>
					}
				}

			}

			while (gameStage == 2){			// second-half
 8003a08:	e0a5      	b.n	8003b56 <main+0x392>
				if(myCharge < 200){
 8003a0a:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <main+0x310>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2bc7      	cmp	r3, #199	; 0xc7
 8003a10:	dc02      	bgt.n	8003a18 <main+0x254>
					task_mode = 3;
 8003a12:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <main+0x308>)
 8003a14:	2203      	movs	r2, #3
 8003a16:	701a      	strb	r2, [r3, #0]
				}
				if(task_mode == 1){
 8003a18:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <main+0x308>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <main+0x26c>
					Get_packet(merchant);
 8003a20:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <main+0x314>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	f002 fa74 	bl	8005f10 <Get_packet>
					task_mode = 4;
 8003a28:	4b28      	ldr	r3, [pc, #160]	; (8003acc <main+0x308>)
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e092      	b.n	8003b56 <main+0x392>
				}
				else if(task_mode == 2){
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <main+0x308>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d107      	bne.n	8003a48 <main+0x284>
					Send_packet(consumer);
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <main+0x318>)
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	f002 fa74 	bl	8005f28 <Send_packet>
					task_mode = 4;
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <main+0x308>)
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e086      	b.n	8003b56 <main+0x392>
				}
				else if(task_mode == 3){
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <main+0x308>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d109      	bne.n	8003a64 <main+0x2a0>
					go_Charge();
 8003a50:	f002 f996 	bl	8005d80 <go_Charge>
					HAL_Delay(1000);
 8003a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a58:	f002 fba6 	bl	80061a8 <HAL_Delay>
					task_mode = 4;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <main+0x308>)
 8003a5e:	2204      	movs	r2, #4
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e078      	b.n	8003b56 <main+0x392>
				}
				else
				{
					merchant = Get_nearest_order();
 8003a64:	f001 f846 	bl	8004af4 <Get_nearest_order>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <main+0x314>)
 8003a6c:	6013      	str	r3, [r2, #0]
					consumer = Get_nearest_consumer();
 8003a6e:	f002 fa67 	bl	8005f40 <Get_nearest_consumer>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <main+0x318>)
 8003a76:	6013      	str	r3, [r2, #0]
					if(delivering_num > 3){
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <main+0x31c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d903      	bls.n	8003a88 <main+0x2c4>
						task_mode = 2;
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <main+0x308>)
 8003a82:	2202      	movs	r2, #2
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e066      	b.n	8003b56 <main+0x392>
					}
					else if(delivering_num == 0){
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <main+0x31c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d129      	bne.n	8003ae4 <main+0x320>
						task_mode = 1;
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <main+0x308>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e05e      	b.n	8003b56 <main+0x392>
 8003a98:	20000994 	.word	0x20000994
 8003a9c:	20000a0c 	.word	0x20000a0c
 8003aa0:	200007f4 	.word	0x200007f4
 8003aa4:	0800c980 	.word	0x0800c980
 8003aa8:	20000c00 	.word	0x20000c00
 8003aac:	20000004 	.word	0x20000004
 8003ab0:	20000be0 	.word	0x20000be0
 8003ab4:	20000be4 	.word	0x20000be4
 8003ab8:	20000bec 	.word	0x20000bec
 8003abc:	20000b71 	.word	0x20000b71
 8003ac0:	40010c00 	.word	0x40010c00
 8003ac4:	20000a84 	.word	0x20000a84
 8003ac8:	20000bf0 	.word	0x20000bf0
 8003acc:	20000b72 	.word	0x20000b72
 8003ad0:	20000b70 	.word	0x20000b70
 8003ad4:	20000bf8 	.word	0x20000bf8
 8003ad8:	20000c10 	.word	0x20000c10
 8003adc:	20000c14 	.word	0x20000c14
 8003ae0:	20000bdc 	.word	0x20000bdc
					}
					else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <main+0x3a0>)
 8003ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <main+0x3a4>)
 8003aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003af8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <main+0x3a0>)
 8003afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b02:	4619      	mov	r1, r3
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <main+0x3a4>)
 8003b06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b0a:	1acb      	subs	r3, r1, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bfb8      	it	lt
 8003b10:	425b      	neglt	r3, r3
 8003b12:	441a      	add	r2, r3
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <main+0x3a8>)
 8003b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <main+0x3a4>)
 8003b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b22:	1acb      	subs	r3, r1, r3
 8003b24:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003b28:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <main+0x3a8>)
 8003b2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b32:	4618      	mov	r0, r3
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <main+0x3a4>)
 8003b36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b3a:	1ac3      	subs	r3, r0, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bfb8      	it	lt
 8003b40:	425b      	neglt	r3, r3
 8003b42:	440b      	add	r3, r1
 8003b44:	429a      	cmp	r2, r3
 8003b46:	da03      	bge.n	8003b50 <main+0x38c>
						task_mode = 1;
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <main+0x3ac>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e002      	b.n	8003b56 <main+0x392>
					}
					else{
						task_mode = 2;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <main+0x3ac>)
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]
			while (gameStage == 2){			// second-half
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <main+0x3b0>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	f43f af55 	beq.w	8003a0a <main+0x246>
		if(gameStatus == 0){		// if the game is not running
 8003b60:	e69a      	b.n	8003898 <main+0xd4>
 8003b62:	bf00      	nop
 8003b64:	20000c10 	.word	0x20000c10
 8003b68:	20000be0 	.word	0x20000be0
 8003b6c:	20000c14 	.word	0x20000c14
 8003b70:	20000b72 	.word	0x20000b72
 8003b74:	20000b70 	.word	0x20000b70

08003b78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b090      	sub	sp, #64	; 0x40
 8003b7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003b7e:	f107 0318 	add.w	r3, r7, #24
 8003b82:	2228      	movs	r2, #40	; 0x28
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f006 fb36 	bl	800a1f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003baa:	2301      	movs	r3, #1
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003bb8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bbe:	f107 0318 	add.w	r3, r7, #24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 feaa 	bl	800791c <HAL_RCC_OscConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <SystemClock_Config+0x5a>
			{
		Error_Handler();
 8003bce:	f000 fd7d 	bl	80046cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003bd2:	230f      	movs	r3, #15
 8003bd4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f004 f917 	bl	8007e20 <HAL_RCC_ClockConfig>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <SystemClock_Config+0x84>
			{
		Error_Handler();
 8003bf8:	f000 fd68 	bl	80046cc <Error_Handler>
	}
}
 8003bfc:	bf00      	nop
 8003bfe:	3740      	adds	r7, #64	; 0x40
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <MX_I2C1_Init+0x54>)
 8003c0c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c10:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <MX_I2C1_Init+0x58>)
 8003c12:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c26:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <MX_I2C1_Init+0x50>)
 8003c42:	f003 fa11 	bl	8007068 <HAL_I2C_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8003c4c:	f000 fd3e 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000638 	.word	0x20000638
 8003c58:	40005400 	.word	0x40005400
 8003c5c:	000186a0 	.word	0x000186a0

08003c60 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b096      	sub	sp, #88	; 0x58
 8003c64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	609a      	str	r2, [r3, #8]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	611a      	str	r2, [r3, #16]
 8003c8e:	615a      	str	r2, [r3, #20]
 8003c90:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	2220      	movs	r2, #32
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f006 faad 	bl	800a1f8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003c9e:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <MX_TIM1_Init+0x184>)
 8003ca2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003ca4:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003caa:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003cb0:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003cbe:	4b48      	ldr	r3, [pc, #288]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc4:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cca:	4845      	ldr	r0, [pc, #276]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003ccc:	f004 fa42 	bl	8008154 <HAL_TIM_Base_Init>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 8003cd6:	f000 fcf9 	bl	80046cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cde:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	483e      	ldr	r0, [pc, #248]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003ce8:	f004 feec 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 8003cf2:	f000 fceb 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cf6:	483a      	ldr	r0, [pc, #232]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003cf8:	f004 fadc 	bl	80082b4 <HAL_TIM_PWM_Init>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 8003d02:	f000 fce3 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d12:	4619      	mov	r1, r3
 8003d14:	4832      	ldr	r0, [pc, #200]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003d16:	f005 faa7 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 8003d20:	f000 fcd4 	bl	80046cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d24:	2360      	movs	r3, #96	; 0x60
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d30:	2300      	movs	r3, #0
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d44:	2200      	movs	r2, #0
 8003d46:	4619      	mov	r1, r3
 8003d48:	4825      	ldr	r0, [pc, #148]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003d4a:	f004 fdfd 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 8003d54:	f000 fcba 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	481f      	ldr	r0, [pc, #124]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003d62:	f004 fdf1 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8003d6c:	f000 fcae 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d74:	2208      	movs	r2, #8
 8003d76:	4619      	mov	r1, r3
 8003d78:	4819      	ldr	r0, [pc, #100]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003d7a:	f004 fde5 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 8003d84:	f000 fca2 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d8c:	220c      	movs	r2, #12
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4813      	ldr	r0, [pc, #76]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003d92:	f004 fdd9 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 8003d9c:	f000 fc96 	bl	80046cc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003db8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4807      	ldr	r0, [pc, #28]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003dc4:	f005 fabc 	bl	8009340 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 8003dce:	f000 fc7d 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003dd2:	4803      	ldr	r0, [pc, #12]	; (8003de0 <MX_TIM1_Init+0x180>)
 8003dd4:	f001 fd4c 	bl	8005870 <HAL_TIM_MspPostInit>

}
 8003dd8:	bf00      	nop
 8003dda:	3758      	adds	r7, #88	; 0x58
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	2000068c 	.word	0x2000068c
 8003de4:	40012c00 	.word	0x40012c00

08003de8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f006 f9fe 	bl	800a1f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e0a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e1e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e26:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e44:	2301      	movs	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	4619      	mov	r1, r3
 8003e56:	480d      	ldr	r0, [pc, #52]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e58:	f004 fb3e 	bl	80084d8 <HAL_TIM_Encoder_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 8003e62:	f000 fc33 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4806      	ldr	r0, [pc, #24]	; (8003e8c <MX_TIM2_Init+0xa4>)
 8003e74:	f005 f9f8 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 8003e7e:	f000 fc25 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003e82:	bf00      	nop
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200006d4 	.word	0x200006d4

08003e90 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	; 0x30
 8003e94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f006 f9aa 	bl	800a1f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003eae:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <MX_TIM3_Init+0xa4>)
 8003eb0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ec4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003eda:	2301      	movs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eea:	2301      	movs	r3, #1
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	4619      	mov	r1, r3
 8003efc:	480c      	ldr	r0, [pc, #48]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003efe:	f004 faeb 	bl	80084d8 <HAL_TIM_Encoder_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 8003f08:	f000 fbe0 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <MX_TIM3_Init+0xa0>)
 8003f1a:	f005 f9a5 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8003f24:	f000 fbd2 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003f28:	bf00      	nop
 8003f2a:	3730      	adds	r7, #48	; 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	2000071c 	.word	0x2000071c
 8003f34:	40000400 	.word	0x40000400

08003f38 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f006 f956 	bl	800a1f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <MX_TIM4_Init+0xa4>)
 8003f58:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f82:	2301      	movs	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f92:	2301      	movs	r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	480c      	ldr	r0, [pc, #48]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003fa6:	f004 fa97 	bl	80084d8 <HAL_TIM_Encoder_Init>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8003fb0:	f000 fb8c 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <MX_TIM4_Init+0xa0>)
 8003fc2:	f005 f951 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8003fcc:	f000 fb7e 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003fd0:	bf00      	nop
 8003fd2:	3730      	adds	r7, #48	; 0x30
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000764 	.word	0x20000764
 8003fdc:	40000800 	.word	0x40000800

08003fe0 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08c      	sub	sp, #48	; 0x30
 8003fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f006 f902 	bl	800a1f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <MX_TIM5_Init+0xa0>)
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <MX_TIM5_Init+0xa4>)
 8004000:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8004002:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <MX_TIM5_Init+0xa0>)
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <MX_TIM5_Init+0xa0>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 800400e:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <MX_TIM5_Init+0xa0>)
 8004010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004014:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004016:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <MX_TIM5_Init+0xa0>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800401c:	4b18      	ldr	r3, [pc, #96]	; (8004080 <MX_TIM5_Init+0xa0>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004022:	2301      	movs	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800402a:	2301      	movs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004036:	2300      	movs	r3, #0
 8004038:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800403a:	2301      	movs	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800403e:	2300      	movs	r3, #0
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004046:	f107 030c 	add.w	r3, r7, #12
 800404a:	4619      	mov	r1, r3
 800404c:	480c      	ldr	r0, [pc, #48]	; (8004080 <MX_TIM5_Init+0xa0>)
 800404e:	f004 fa43 	bl	80084d8 <HAL_TIM_Encoder_Init>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 8004058:	f000 fb38 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800405c:	2300      	movs	r3, #0
 800405e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4805      	ldr	r0, [pc, #20]	; (8004080 <MX_TIM5_Init+0xa0>)
 800406a:	f005 f8fd 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 8004074:	f000 fb2a 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8004078:	bf00      	nop
 800407a:	3730      	adds	r7, #48	; 0x30
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200007ac 	.word	0x200007ac
 8004084:	40000c00 	.word	0x40000c00

08004088 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800408e:	463b      	mov	r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <MX_TIM6_Init+0x64>)
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <MX_TIM6_Init+0x68>)
 800409a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 800409c:	4b13      	ldr	r3, [pc, #76]	; (80040ec <MX_TIM6_Init+0x64>)
 800409e:	2247      	movs	r2, #71	; 0x47
 80040a0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <MX_TIM6_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <MX_TIM6_Init+0x64>)
 80040aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80040ae:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <MX_TIM6_Init+0x64>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040b6:	480d      	ldr	r0, [pc, #52]	; (80040ec <MX_TIM6_Init+0x64>)
 80040b8:	f004 f84c 	bl	8008154 <HAL_TIM_Base_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 80040c2:	f000 fb03 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040ce:	463b      	mov	r3, r7
 80040d0:	4619      	mov	r1, r3
 80040d2:	4806      	ldr	r0, [pc, #24]	; (80040ec <MX_TIM6_Init+0x64>)
 80040d4:	f005 f8c8 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 80040de:	f000 faf5 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200007f4 	.word	0x200007f4
 80040f0:	40001000 	.word	0x40001000

080040f4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b096      	sub	sp, #88	; 0x58
 80040f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80040fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	615a      	str	r2, [r3, #20]
 8004124:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	2220      	movs	r2, #32
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f006 f863 	bl	800a1f8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <MX_TIM8_Init+0x180>)
 8004134:	4a50      	ldr	r2, [pc, #320]	; (8004278 <MX_TIM8_Init+0x184>)
 8004136:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8004138:	4b4e      	ldr	r3, [pc, #312]	; (8004274 <MX_TIM8_Init+0x180>)
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413e:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <MX_TIM8_Init+0x180>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8004144:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <MX_TIM8_Init+0x180>)
 8004146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800414a:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <MX_TIM8_Init+0x180>)
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004152:	4b48      	ldr	r3, [pc, #288]	; (8004274 <MX_TIM8_Init+0x180>)
 8004154:	2200      	movs	r2, #0
 8004156:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <MX_TIM8_Init+0x180>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800415e:	4845      	ldr	r0, [pc, #276]	; (8004274 <MX_TIM8_Init+0x180>)
 8004160:	f003 fff8 	bl	8008154 <HAL_TIM_Base_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 800416a:	f000 faaf 	bl	80046cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800416e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004172:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004174:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004178:	4619      	mov	r1, r3
 800417a:	483e      	ldr	r0, [pc, #248]	; (8004274 <MX_TIM8_Init+0x180>)
 800417c:	f004 fca2 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 8004186:	f000 faa1 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800418a:	483a      	ldr	r0, [pc, #232]	; (8004274 <MX_TIM8_Init+0x180>)
 800418c:	f004 f892 	bl	80082b4 <HAL_TIM_PWM_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 8004196:	f000 fa99 	bl	80046cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800419e:	2300      	movs	r3, #0
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80041a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041a6:	4619      	mov	r1, r3
 80041a8:	4832      	ldr	r0, [pc, #200]	; (8004274 <MX_TIM8_Init+0x180>)
 80041aa:	f005 f85d 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 80041b4:	f000 fa8a 	bl	80046cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b8:	2360      	movs	r3, #96	; 0x60
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041c4:	2300      	movs	r3, #0
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041cc:	2300      	movs	r3, #0
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041d0:	2300      	movs	r3, #0
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d8:	2200      	movs	r2, #0
 80041da:	4619      	mov	r1, r3
 80041dc:	4825      	ldr	r0, [pc, #148]	; (8004274 <MX_TIM8_Init+0x180>)
 80041de:	f004 fbb3 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 80041e8:	f000 fa70 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f0:	2204      	movs	r2, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	481f      	ldr	r0, [pc, #124]	; (8004274 <MX_TIM8_Init+0x180>)
 80041f6:	f004 fba7 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 8004200:	f000 fa64 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004208:	2208      	movs	r2, #8
 800420a:	4619      	mov	r1, r3
 800420c:	4819      	ldr	r0, [pc, #100]	; (8004274 <MX_TIM8_Init+0x180>)
 800420e:	f004 fb9b 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 8004218:	f000 fa58 	bl	80046cc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800421c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004220:	220c      	movs	r2, #12
 8004222:	4619      	mov	r1, r3
 8004224:	4813      	ldr	r0, [pc, #76]	; (8004274 <MX_TIM8_Init+0x180>)
 8004226:	f004 fb8f 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 8004230:	f000 fa4c 	bl	80046cc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004234:	2300      	movs	r3, #0
 8004236:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800424c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4807      	ldr	r0, [pc, #28]	; (8004274 <MX_TIM8_Init+0x180>)
 8004258:	f005 f872 	bl	8009340 <HAL_TIMEx_ConfigBreakDeadTime>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 8004262:	f000 fa33 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8004266:	4803      	ldr	r0, [pc, #12]	; (8004274 <MX_TIM8_Init+0x180>)
 8004268:	f001 fb02 	bl	8005870 <HAL_TIM_MspPostInit>

}
 800426c:	bf00      	nop
 800426e:	3758      	adds	r7, #88	; 0x58
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	2000083c 	.word	0x2000083c
 8004278:	40013400 	.word	0x40013400

0800427c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 8004282:	4a12      	ldr	r2, [pc, #72]	; (80042cc <MX_USART2_UART_Init+0x50>)
 8004284:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 8004288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800428c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800428e:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 8004296:	2200      	movs	r2, #0
 8004298:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 80042a2:	220c      	movs	r2, #12
 80042a4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80042b2:	4805      	ldr	r0, [pc, #20]	; (80042c8 <MX_USART2_UART_Init+0x4c>)
 80042b4:	f005 f8a7 	bl	8009406 <HAL_UART_Init>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 80042be:	f000 fa05 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000884 	.word	0x20000884
 80042cc:	40004400 	.word	0x40004400

080042d0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042d6:	4a12      	ldr	r2, [pc, #72]	; (8004320 <MX_USART3_UART_Init+0x50>)
 80042d8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042e0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042f6:	220c      	movs	r2, #12
 80042f8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <MX_USART3_UART_Init+0x4c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <MX_USART3_UART_Init+0x4c>)
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004306:	4805      	ldr	r0, [pc, #20]	; (800431c <MX_USART3_UART_Init+0x4c>)
 8004308:	f005 f87d 	bl	8009406 <HAL_UART_Init>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 8004312:	f000 f9db 	bl	80046cc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200008c8 	.word	0x200008c8
 8004320:	40004800 	.word	0x40004800

08004324 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <MX_DMA_Init+0x48>)
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4a0f      	ldr	r2, [pc, #60]	; (800436c <MX_DMA_Init+0x48>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6153      	str	r3, [r2, #20]
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <MX_DMA_Init+0x48>)
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2103      	movs	r1, #3
 8004346:	200d      	movs	r0, #13
 8004348:	f002 f829 	bl	800639e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800434c:	200d      	movs	r0, #13
 800434e:	f002 f842 	bl	80063d6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2103      	movs	r1, #3
 8004356:	2010      	movs	r0, #16
 8004358:	f002 f821 	bl	800639e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800435c:	2010      	movs	r0, #16
 800435e:	f002 f83a 	bl	80063d6 <HAL_NVIC_EnableIRQ>

}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000

08004370 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004376:	f107 0310 	add.w	r3, r7, #16
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <MX_GPIO_Init+0xa4>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	4a22      	ldr	r2, [pc, #136]	; (8004414 <MX_GPIO_Init+0xa4>)
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	6193      	str	r3, [r2, #24]
 8004390:	4b20      	ldr	r3, [pc, #128]	; (8004414 <MX_GPIO_Init+0xa4>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <MX_GPIO_Init+0xa4>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	6193      	str	r3, [r2, #24]
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043ba:	f043 0308 	orr.w	r3, r3, #8
 80043be:	6193      	str	r3, [r2, #24]
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4a10      	ldr	r2, [pc, #64]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043d2:	f043 0310 	orr.w	r3, r3, #16
 80043d6:	6193      	str	r3, [r2, #24]
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <MX_GPIO_Init+0xa4>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80043e4:	2200      	movs	r2, #0
 80043e6:	2107      	movs	r1, #7
 80043e8:	480b      	ldr	r0, [pc, #44]	; (8004418 <MX_GPIO_Init+0xa8>)
 80043ea:	f002 fe25 	bl	8007038 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 80043ee:	2307      	movs	r3, #7
 80043f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2302      	movs	r3, #2
 80043fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fe:	f107 0310 	add.w	r3, r7, #16
 8004402:	4619      	mov	r1, r3
 8004404:	4804      	ldr	r0, [pc, #16]	; (8004418 <MX_GPIO_Init+0xa8>)
 8004406:	f002 fc83 	bl	8006d10 <HAL_GPIO_Init>

}
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	40010c00 	.word	0x40010c00

0800441c <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <HUAN_MOTOR1_Init+0x50>)
 8004424:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HUAN_MOTOR1_Init+0x54>)
 800442a:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 800442e:	4a11      	ldr	r2, [pc, #68]	; (8004474 <HUAN_MOTOR1_Init+0x58>)
 8004430:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004434:	220c      	movs	r2, #12
 8004436:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HUAN_MOTOR1_Init+0x58>)
 800443c:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004440:	2208      	movs	r2, #8
 8004442:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HUAN_MOTOR1_Init+0x5c>)
 8004450:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004454:	4a09      	ldr	r2, [pc, #36]	; (800447c <HUAN_MOTOR1_Init+0x60>)
 8004456:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 800445a:	4a09      	ldr	r2, [pc, #36]	; (8004480 <HUAN_MOTOR1_Init+0x64>)
 800445c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 800445e:	4802      	ldr	r0, [pc, #8]	; (8004468 <HUAN_MOTOR1_Init+0x4c>)
 8004460:	f7fe f996 	bl	8002790 <huansic_motor_init>
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000994 	.word	0x20000994
 800446c:	200006d4 	.word	0x200006d4
 8004470:	3d4ccccd 	.word	0x3d4ccccd
 8004474:	2000068c 	.word	0x2000068c
 8004478:	399d4952 	.word	0x399d4952
 800447c:	37a7c5ac 	.word	0x37a7c5ac
 8004480:	387ba882 	.word	0x387ba882

08004484 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HUAN_MOTOR2_Init+0x50>)
 800448c:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 8004490:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <HUAN_MOTOR2_Init+0x54>)
 8004492:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 8004496:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HUAN_MOTOR2_Init+0x58>)
 8004498:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 800449c:	2200      	movs	r2, #0
 800449e:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HUAN_MOTOR2_Init+0x58>)
 80044a4:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044a8:	2204      	movs	r2, #4
 80044aa:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HUAN_MOTOR2_Init+0x5c>)
 80044b8:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044bc:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <HUAN_MOTOR2_Init+0x60>)
 80044be:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <HUAN_MOTOR2_Init+0x64>)
 80044c4:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80044c6:	4802      	ldr	r0, [pc, #8]	; (80044d0 <HUAN_MOTOR2_Init+0x4c>)
 80044c8:	f7fe f962 	bl	8002790 <huansic_motor_init>
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200009d0 	.word	0x200009d0
 80044d4:	20000764 	.word	0x20000764
 80044d8:	3d4ccccd 	.word	0x3d4ccccd
 80044dc:	2000068c 	.word	0x2000068c
 80044e0:	399d4952 	.word	0x399d4952
 80044e4:	37a7c5ac 	.word	0x37a7c5ac
 80044e8:	387ba882 	.word	0x387ba882

080044ec <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <HUAN_MOTOR3_Init+0x50>)
 80044f4:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <HUAN_MOTOR3_Init+0x54>)
 80044fa:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <HUAN_MOTOR3_Init+0x58>)
 8004500:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 8004504:	220c      	movs	r2, #12
 8004506:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HUAN_MOTOR3_Init+0x58>)
 800450c:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 8004510:	2208      	movs	r2, #8
 8004512:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8004514:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <HUAN_MOTOR3_Init+0x5c>)
 8004520:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 8004524:	4a09      	ldr	r2, [pc, #36]	; (800454c <HUAN_MOTOR3_Init+0x60>)
 8004526:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 800452a:	4a09      	ldr	r2, [pc, #36]	; (8004550 <HUAN_MOTOR3_Init+0x64>)
 800452c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 800452e:	4802      	ldr	r0, [pc, #8]	; (8004538 <HUAN_MOTOR3_Init+0x4c>)
 8004530:	f7fe f92e 	bl	8002790 <huansic_motor_init>
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000a0c 	.word	0x20000a0c
 800453c:	2000071c 	.word	0x2000071c
 8004540:	3d4ccccd 	.word	0x3d4ccccd
 8004544:	2000083c 	.word	0x2000083c
 8004548:	399d4952 	.word	0x399d4952
 800454c:	37a7c5ac 	.word	0x37a7c5ac
 8004550:	387ba882 	.word	0x387ba882

08004554 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 800455a:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <HUAN_MOTOR4_Init+0x50>)
 800455c:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HUAN_MOTOR4_Init+0x54>)
 8004562:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <HUAN_MOTOR4_Init+0x58>)
 8004568:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004572:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <HUAN_MOTOR4_Init+0x58>)
 8004574:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004578:	2204      	movs	r2, #4
 800457a:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <HUAN_MOTOR4_Init+0x5c>)
 8004588:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 800458c:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HUAN_MOTOR4_Init+0x60>)
 800458e:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HUAN_MOTOR4_Init+0x64>)
 8004594:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 8004596:	4802      	ldr	r0, [pc, #8]	; (80045a0 <HUAN_MOTOR4_Init+0x4c>)
 8004598:	f7fe f8fa 	bl	8002790 <huansic_motor_init>
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000a48 	.word	0x20000a48
 80045a4:	200007ac 	.word	0x200007ac
 80045a8:	3d4ccccd 	.word	0x3d4ccccd
 80045ac:	2000083c 	.word	0x2000083c
 80045b0:	399d4952 	.word	0x399d4952
 80045b4:	37a7c5ac 	.word	0x37a7c5ac
 80045b8:	387ba882 	.word	0x387ba882

080045bc <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HUAN_IMU_Init+0x1c>)
 80045c2:	4a06      	ldr	r2, [pc, #24]	; (80045dc <HUAN_IMU_Init+0x20>)
 80045c4:	601a      	str	r2, [r3, #0]
	himu.hdma = &hdma_usart3_rx;
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HUAN_IMU_Init+0x1c>)
 80045c8:	4a05      	ldr	r2, [pc, #20]	; (80045e0 <HUAN_IMU_Init+0x24>)
 80045ca:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <HUAN_IMU_Init+0x1c>)
 80045ce:	f7fd fd4d 	bl	800206c <huansic_jy62_init>
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000a84 	.word	0x20000a84
 80045dc:	200008c8 	.word	0x200008c8
 80045e0:	20000950 	.word	0x20000950

080045e4 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
	hxb.huart = &huart2;
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HUAN_ZIGBEE_Init+0x1c>)
 80045ea:	4a06      	ldr	r2, [pc, #24]	; (8004604 <HUAN_ZIGBEE_Init+0x20>)
 80045ec:	601a      	str	r2, [r3, #0]
	hxb.hdma = &hdma_usart2_rx;
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <HUAN_ZIGBEE_Init+0x1c>)
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <HUAN_ZIGBEE_Init+0x24>)
 80045f2:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <HUAN_ZIGBEE_Init+0x1c>)
 80045f6:	f7fe faf3 	bl	8002be0 <huansic_xb_init>
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000adc 	.word	0x20000adc
 8004604:	20000884 	.word	0x20000884
 8004608:	2000090c 	.word	0x2000090c

0800460c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_UART_RxCpltCallback+0x58>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10c      	bne.n	8004638 <HAL_UART_RxCpltCallback+0x2c>
		if (himu.pending_alignment)
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_UART_RxCpltCallback+0x58>)
 8004620:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 8004628:	480e      	ldr	r0, [pc, #56]	; (8004664 <HAL_UART_RxCpltCallback+0x58>)
 800462a:	f7fd fe75 	bl	8002318 <huansic_jy62_isr>
		if(hxb.pending_alignment)
			huansic_xb_isr(&hxb);
		else
			huansic_xb_dma_isr(&hxb);
	}
}
 800462e:	e014      	b.n	800465a <HAL_UART_RxCpltCallback+0x4e>
			huansic_jy62_dma_isr(&himu);
 8004630:	480c      	ldr	r0, [pc, #48]	; (8004664 <HAL_UART_RxCpltCallback+0x58>)
 8004632:	f7fd fd51 	bl	80020d8 <huansic_jy62_dma_isr>
}
 8004636:	e010      	b.n	800465a <HAL_UART_RxCpltCallback+0x4e>
	} else if (hxb.huart == huart) {
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_UART_RxCpltCallback+0x5c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d10b      	bne.n	800465a <HAL_UART_RxCpltCallback+0x4e>
		if(hxb.pending_alignment)
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_UART_RxCpltCallback+0x5c>)
 8004644:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_UART_RxCpltCallback+0x48>
			huansic_xb_isr(&hxb);
 800464c:	4806      	ldr	r0, [pc, #24]	; (8004668 <HAL_UART_RxCpltCallback+0x5c>)
 800464e:	f7ff f859 	bl	8003704 <huansic_xb_isr>
}
 8004652:	e002      	b.n	800465a <HAL_UART_RxCpltCallback+0x4e>
			huansic_xb_dma_isr(&hxb);
 8004654:	4804      	ldr	r0, [pc, #16]	; (8004668 <HAL_UART_RxCpltCallback+0x5c>)
 8004656:	f7ff f89b 	bl	8003790 <huansic_xb_dma_isr>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000a84 	.word	0x20000a84
 8004668:	20000adc 	.word	0x20000adc

0800466c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004674:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <HAL_UART_ErrorCallback+0x58>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d10c      	bne.n	8004698 <HAL_UART_ErrorCallback+0x2c>
		if (himu.pending_alignment)
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_UART_ErrorCallback+0x58>)
 8004680:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8004688:	480e      	ldr	r0, [pc, #56]	; (80046c4 <HAL_UART_ErrorCallback+0x58>)
 800468a:	f7fd fe90 	bl	80023ae <huansic_jy62_error>
		if (hxb.pending_alignment)
			huansic_xb_it_error(&hxb);
		else
			huansic_xb_dma_error(&hxb);
	}
}
 800468e:	e014      	b.n	80046ba <HAL_UART_ErrorCallback+0x4e>
			huansic_jy62_dma_error(&himu);
 8004690:	480c      	ldr	r0, [pc, #48]	; (80046c4 <HAL_UART_ErrorCallback+0x58>)
 8004692:	f7fd fe78 	bl	8002386 <huansic_jy62_dma_error>
}
 8004696:	e010      	b.n	80046ba <HAL_UART_ErrorCallback+0x4e>
	} else if (hxb.huart == huart) {
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_UART_ErrorCallback+0x5c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d10b      	bne.n	80046ba <HAL_UART_ErrorCallback+0x4e>
		if (hxb.pending_alignment)
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_UART_ErrorCallback+0x5c>)
 80046a4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_UART_ErrorCallback+0x48>
			huansic_xb_it_error(&hxb);
 80046ac:	4806      	ldr	r0, [pc, #24]	; (80046c8 <HAL_UART_ErrorCallback+0x5c>)
 80046ae:	f7ff f815 	bl	80036dc <huansic_xb_it_error>
}
 80046b2:	e002      	b.n	80046ba <HAL_UART_ErrorCallback+0x4e>
			huansic_xb_dma_error(&hxb);
 80046b4:	4804      	ldr	r0, [pc, #16]	; (80046c8 <HAL_UART_ErrorCallback+0x5c>)
 80046b6:	f7fe fffd 	bl	80036b4 <huansic_xb_dma_error>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000a84 	.word	0x20000a84
 80046c8:	20000adc 	.word	0x20000adc

080046cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046d0:	b672      	cpsid	i
}
 80046d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80046d4:	e7fe      	b.n	80046d4 <Error_Handler+0x8>
	...

080046d8 <Lane_init>:
	closelist.Head = 0;
	closelist.Tail = 0;
	closelist.Length = 0;
}

void Lane_init(void){
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
	pathlane.Head = 0;
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <Lane_init+0x18>)
 80046de:	2200      	movs	r2, #0
 80046e0:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 0;
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <Lane_init+0x18>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	805a      	strh	r2, [r3, #2]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	20007c24 	.word	0x20007c24

080046f4 <queue_append>:

uint8_t queue_append(A_Star_Node* node)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	if (openlist.Length + openlist.Head >= QUEUE_SIZE)
 80046fc:	4b41      	ldr	r3, [pc, #260]	; (8004804 <queue_append+0x110>)
 80046fe:	885b      	ldrh	r3, [r3, #2]
 8004700:	461a      	mov	r2, r3
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <queue_append+0x110>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	4413      	add	r3, r2
 8004708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470c:	db01      	blt.n	8004712 <queue_append+0x1e>
	{
		return 0;
 800470e:	2300      	movs	r3, #0
 8004710:	e073      	b.n	80047fa <queue_append+0x106>
	}
	else
	{
		uint16_t i = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	82fb      	strh	r3, [r7, #22]
		while (i < openlist.Length)
 8004716:	e052      	b.n	80047be <queue_append+0xca>
		{
			if (openlist.buffer[i + openlist.Head].total <= node->total)
 8004718:	8afb      	ldrh	r3, [r7, #22]
 800471a:	4a3a      	ldr	r2, [pc, #232]	; (8004804 <queue_append+0x110>)
 800471c:	8812      	ldrh	r2, [r2, #0]
 800471e:	441a      	add	r2, r3
 8004720:	4938      	ldr	r1, [pc, #224]	; (8004804 <queue_append+0x110>)
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc fcf9 	bl	8001130 <__aeabi_fcmple>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <queue_append+0x58>
			{
				i++;
 8004744:	8afb      	ldrh	r3, [r7, #22]
 8004746:	3301      	adds	r3, #1
 8004748:	82fb      	strh	r3, [r7, #22]
 800474a:	e038      	b.n	80047be <queue_append+0xca>
			}
			else
			{
				A_Star_Node change;
				while (i < openlist.Length + 1)
 800474c:	e02a      	b.n	80047a4 <queue_append+0xb0>
				{
					change = openlist.buffer[i + openlist.Head];
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	4a2c      	ldr	r2, [pc, #176]	; (8004804 <queue_append+0x110>)
 8004752:	8812      	ldrh	r2, [r2, #0]
 8004754:	441a      	add	r2, r3
 8004756:	492b      	ldr	r1, [pc, #172]	; (8004804 <queue_append+0x110>)
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	18ca      	adds	r2, r1, r3
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	3204      	adds	r2, #4
 8004768:	ca07      	ldmia	r2, {r0, r1, r2}
 800476a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					openlist.buffer[i + openlist.Head] = *node;
 800476e:	8afb      	ldrh	r3, [r7, #22]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <queue_append+0x110>)
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	441a      	add	r2, r3
 8004776:	4923      	ldr	r1, [pc, #140]	; (8004804 <queue_append+0x110>)
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	6810      	ldr	r0, [r2, #0]
 8004788:	6851      	ldr	r1, [r2, #4]
 800478a:	6892      	ldr	r2, [r2, #8]
 800478c:	c307      	stmia	r3!, {r0, r1, r2}
					*node = change;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	461c      	mov	r4, r3
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004798:	6020      	str	r0, [r4, #0]
 800479a:	6061      	str	r1, [r4, #4]
 800479c:	60a2      	str	r2, [r4, #8]
					i++;
 800479e:	8afb      	ldrh	r3, [r7, #22]
 80047a0:	3301      	adds	r3, #1
 80047a2:	82fb      	strh	r3, [r7, #22]
				while (i < openlist.Length + 1)
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <queue_append+0x110>)
 80047a6:	885b      	ldrh	r3, [r3, #2]
 80047a8:	8afa      	ldrh	r2, [r7, #22]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d9cf      	bls.n	800474e <queue_append+0x5a>
				}
				openlist.Length += 1;
 80047ae:	4b15      	ldr	r3, [pc, #84]	; (8004804 <queue_append+0x110>)
 80047b0:	885b      	ldrh	r3, [r3, #2]
 80047b2:	3301      	adds	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	4b13      	ldr	r3, [pc, #76]	; (8004804 <queue_append+0x110>)
 80047b8:	805a      	strh	r2, [r3, #2]
				return 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e01d      	b.n	80047fa <queue_append+0x106>
		while (i < openlist.Length)
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <queue_append+0x110>)
 80047c0:	885b      	ldrh	r3, [r3, #2]
 80047c2:	8afa      	ldrh	r2, [r7, #22]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3a7      	bcc.n	8004718 <queue_append+0x24>
			}
		}
		openlist.buffer[openlist.Head + openlist.Length] = *node;
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <queue_append+0x110>)
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <queue_append+0x110>)
 80047d0:	885b      	ldrh	r3, [r3, #2]
 80047d2:	441a      	add	r2, r3
 80047d4:	490b      	ldr	r1, [pc, #44]	; (8004804 <queue_append+0x110>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	6810      	ldr	r0, [r2, #0]
 80047e6:	6851      	ldr	r1, [r2, #4]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	c307      	stmia	r3!, {r0, r1, r2}
		openlist.Length++;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <queue_append+0x110>)
 80047ee:	885b      	ldrh	r3, [r3, #2]
 80047f0:	3301      	adds	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <queue_append+0x110>)
 80047f6:	805a      	strh	r2, [r3, #2]
		return 1;
 80047f8:	2301      	movs	r3, #1
	}
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	20000c18 	.word	0x20000c18

08004808 <list_append>:

uint8_t list_append(uint16_t c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	80fb      	strh	r3, [r7, #6]
	if (closelist.Length >= LIST_SIZE)
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <list_append+0x58>)
 8004814:	889b      	ldrh	r3, [r3, #4]
 8004816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481a:	d301      	bcc.n	8004820 <list_append+0x18>
	{
		return 0;
 800481c:	2300      	movs	r3, #0
 800481e:	e01a      	b.n	8004856 <list_append+0x4e>
	}
	else
	{
		closelist.buffer[closelist.Tail] = c;
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <list_append+0x58>)
 8004822:	885b      	ldrh	r3, [r3, #2]
 8004824:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <list_append+0x58>)
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4413      	add	r3, r2
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	80da      	strh	r2, [r3, #6]
		closelist.Tail = (closelist.Tail + 1) % LIST_SIZE;
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <list_append+0x58>)
 8004830:	885b      	ldrh	r3, [r3, #2]
 8004832:	3301      	adds	r3, #1
 8004834:	425a      	negs	r2, r3
 8004836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800483e:	bf58      	it	pl
 8004840:	4253      	negpl	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <list_append+0x58>)
 8004846:	805a      	strh	r2, [r3, #2]
		closelist.Length++;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <list_append+0x58>)
 800484a:	889b      	ldrh	r3, [r3, #4]
 800484c:	3301      	adds	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <list_append+0x58>)
 8004852:	809a      	strh	r2, [r3, #4]
		return 1;
 8004854:	2301      	movs	r3, #1
	}
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	20006c1c 	.word	0x20006c1c

08004864 <queue_top>:

uint16_t queue_top()
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	if (openlist.Length > 0)
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <queue_top+0x3c>)
 800486a:	885b      	ldrh	r3, [r3, #2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <queue_top+0x2e>
	{
		openlist.Head++;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <queue_top+0x3c>)
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <queue_top+0x3c>)
 800487a:	801a      	strh	r2, [r3, #0]
		openlist.Length--;
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <queue_top+0x3c>)
 800487e:	885b      	ldrh	r3, [r3, #2]
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <queue_top+0x3c>)
 8004886:	805a      	strh	r2, [r3, #2]
		return openlist.Head - 1;
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <queue_top+0x3c>)
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	3b01      	subs	r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	e001      	b.n	8004896 <queue_top+0x32>
	}
	else {
		return 65535;
 8004892:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000c18 	.word	0x20000c18

080048a4 <findin_queue>:

uint16_t findin_queue(uint16_t c)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < openlist.Length; i++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	81fb      	strh	r3, [r7, #14]
 80048b2:	e017      	b.n	80048e4 <findin_queue+0x40>
	{
		if (openlist.buffer[i + openlist.Head].cor == c) return (i + openlist.Head);
 80048b4:	89fb      	ldrh	r3, [r7, #14]
 80048b6:	4a11      	ldr	r2, [pc, #68]	; (80048fc <findin_queue+0x58>)
 80048b8:	8812      	ldrh	r2, [r2, #0]
 80048ba:	441a      	add	r2, r3
 80048bc:	490f      	ldr	r1, [pc, #60]	; (80048fc <findin_queue+0x58>)
 80048be:	4613      	mov	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3304      	adds	r3, #4
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d105      	bne.n	80048de <findin_queue+0x3a>
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <findin_queue+0x58>)
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	89fb      	ldrh	r3, [r7, #14]
 80048d8:	4413      	add	r3, r2
 80048da:	b29b      	uxth	r3, r3
 80048dc:	e008      	b.n	80048f0 <findin_queue+0x4c>
	for (i = 0; i < openlist.Length; i++)
 80048de:	89fb      	ldrh	r3, [r7, #14]
 80048e0:	3301      	adds	r3, #1
 80048e2:	81fb      	strh	r3, [r7, #14]
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <findin_queue+0x58>)
 80048e6:	885b      	ldrh	r3, [r3, #2]
 80048e8:	89fa      	ldrh	r2, [r7, #14]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3e2      	bcc.n	80048b4 <findin_queue+0x10>
	}
	return 0;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000c18 	.word	0x20000c18

08004900 <findin_list>:
	}
	return 0;
}

uint8_t findin_list(uint16_t c)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < closelist.Length; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	81fb      	strh	r3, [r7, #14]
 800490e:	e00f      	b.n	8004930 <findin_list+0x30>
	{
		if (closelist.buffer[i + closelist.Head] == c) return 1;
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <findin_list+0x48>)
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	4413      	add	r3, r2
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <findin_list+0x48>)
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	88db      	ldrh	r3, [r3, #6]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	429a      	cmp	r2, r3
 8004924:	d101      	bne.n	800492a <findin_list+0x2a>
 8004926:	2301      	movs	r3, #1
 8004928:	e008      	b.n	800493c <findin_list+0x3c>
	for (i = 0; i < closelist.Length; i++)
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	3301      	adds	r3, #1
 800492e:	81fb      	strh	r3, [r7, #14]
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <findin_list+0x48>)
 8004932:	889b      	ldrh	r3, [r3, #4]
 8004934:	89fa      	ldrh	r2, [r7, #14]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3ea      	bcc.n	8004910 <findin_list+0x10>
	}
	return 0;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20006c1c 	.word	0x20006c1c

0800494c <editcost>:

void editcost(uint16_t index, A_Star_Node* node)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	6039      	str	r1, [r7, #0]
 8004956:	80fb      	strh	r3, [r7, #6]
	if (openlist.buffer[index].total > node->total)
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	4920      	ldr	r1, [pc, #128]	; (80049dc <editcost+0x90>)
 800495c:	4613      	mov	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc fbf0 	bl	8001158 <__aeabi_fcmpgt>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d100      	bne.n	8004980 <editcost+0x34>
	{
		openlist.buffer[index].total = node->total;
		openlist.buffer[index].cost = node->cost;
		openlist.buffer[index].fatherindex = node->fatherindex;
	}
}
 800497e:	e029      	b.n	80049d4 <editcost+0x88>
		openlist.buffer[index].total = node->total;
 8004980:	88fa      	ldrh	r2, [r7, #6]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8004988:	460b      	mov	r3, r1
 800498a:	4619      	mov	r1, r3
 800498c:	4813      	ldr	r0, [pc, #76]	; (80049dc <editcost+0x90>)
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4403      	add	r3, r0
 8004998:	460a      	mov	r2, r1
 800499a:	f8c3 200a 	str.w	r2, [r3, #10]
		openlist.buffer[index].cost = node->cost;
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f8d3 1002 	ldr.w	r1, [r3, #2]
 80049a6:	460b      	mov	r3, r1
 80049a8:	4619      	mov	r1, r3
 80049aa:	480c      	ldr	r0, [pc, #48]	; (80049dc <editcost+0x90>)
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4403      	add	r3, r0
 80049b6:	460a      	mov	r2, r1
 80049b8:	f8c3 2006 	str.w	r2, [r3, #6]
		openlist.buffer[index].fatherindex = node->fatherindex;
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	8958      	ldrh	r0, [r3, #10]
 80049c2:	4906      	ldr	r1, [pc, #24]	; (80049dc <editcost+0x90>)
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	330e      	adds	r3, #14
 80049d0:	4602      	mov	r2, r0
 80049d2:	801a      	strh	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000c18 	.word	0x20000c18

080049e0 <Insert_inLane>:

uint8_t Insert_inLane(Coordinate *head_coor, uint8_t head_index)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
	if(!head_coor) return 0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <Insert_inLane+0x16>
 80049f2:	2300      	movs	r3, #0
 80049f4:	e025      	b.n	8004a42 <Insert_inLane+0x62>
	pathlane.Head = 0;
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <Insert_inLane+0x6c>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 16 - head_index;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f1c3 0310 	rsb	r3, r3, #16
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <Insert_inLane+0x6c>)
 8004a08:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = head_index; i < 16; i++)
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e014      	b.n	8004a3a <Insert_inLane+0x5a>
	{
		pathlane.buffer[pathlane.Head + i - head_index] = *(head_coor + i);
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	18d1      	adds	r1, r2, r3
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <Insert_inLane+0x6c>)
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	441a      	add	r2, r3
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <Insert_inLane+0x6c>)
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	460a      	mov	r2, r1
 8004a30:	6810      	ldr	r0, [r2, #0]
 8004a32:	6018      	str	r0, [r3, #0]
	for(uint8_t i = head_index; i < 16; i++)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	3301      	adds	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	d9e7      	bls.n	8004a10 <Insert_inLane+0x30>
	}
	return 1;
 8004a40:	2301      	movs	r3, #1
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	20007c24 	.word	0x20007c24

08004a50 <order_list_init>:

void order_list_init(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
	orders.length = 0;
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <order_list_init+0x18>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
	orders.new = 0;
 8004a5a:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <order_list_init+0x18>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	705a      	strb	r2, [r3, #1]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	20007ca8 	.word	0x20007ca8

08004a6c <order_append>:

void order_append(Order *an_order)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	if(!(an_order->startCoord.x == orders.buffer[orders.new].x && an_order->startCoord.y == orders.buffer[orders.new].y))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <order_append+0x84>)
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	491c      	ldr	r1, [pc, #112]	; (8004af0 <order_append+0x84>)
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d10b      	bne.n	8004aa4 <order_append+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004a92:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <order_append+0x84>)
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	4916      	ldr	r1, [pc, #88]	; (8004af0 <order_append+0x84>)
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d01f      	beq.n	8004ae4 <order_append+0x78>
	{
		orders.buffer[orders.length].x = an_order->startCoord.x;
 8004aa4:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <order_append+0x84>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ab0:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <order_append+0x84>)
 8004ab2:	0083      	lsls	r3, r0, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	805a      	strh	r2, [r3, #2]
		orders.buffer[orders.length].y = an_order->startCoord.y;
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <order_append+0x84>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <order_append+0x84>)
 8004ac8:	0083      	lsls	r3, r0, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	460a      	mov	r2, r1
 8004ace:	809a      	strh	r2, [r3, #4]
		orders.new = orders.length;
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <order_append+0x84>)
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <order_append+0x84>)
 8004ad6:	705a      	strb	r2, [r3, #1]
		orders.length += 1;
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <order_append+0x84>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <order_append+0x84>)
 8004ae2:	701a      	strb	r2, [r3, #0]
	}
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20007ca8 	.word	0x20007ca8

08004af4 <Get_nearest_order>:

Coordinate Get_nearest_order(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
	if(orders.length == 0)
 8004afa:	4b3c      	ldr	r3, [pc, #240]	; (8004bec <Get_nearest_order+0xf8>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <Get_nearest_order+0x18>
		return myCoord;
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <Get_nearest_order+0xfc>)
 8004b04:	1d3b      	adds	r3, r7, #4
 8004b06:	6810      	ldr	r0, [r2, #0]
 8004b08:	6018      	str	r0, [r3, #0]
 8004b0a:	e063      	b.n	8004bd4 <Get_nearest_order+0xe0>
	uint8_t i;
	int16_t mindis = 512;
 8004b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b10:	81bb      	strh	r3, [r7, #12]
	uint8_t minindex = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	72fb      	strb	r3, [r7, #11]
	for(i=0;i < orders.length; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e02d      	b.n	8004b78 <Get_nearest_order+0x84>
	{
		int16_t distance = abs(orders.buffer[i].x - myCoord.x) + abs(orders.buffer[i].y - myCoord.y);
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	4a33      	ldr	r2, [pc, #204]	; (8004bec <Get_nearest_order+0xf8>)
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <Get_nearest_order+0xfc>)
 8004b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bfb8      	it	lt
 8004b36:	425b      	neglt	r3, r3
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	492b      	ldr	r1, [pc, #172]	; (8004bec <Get_nearest_order+0xf8>)
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b46:	4619      	mov	r1, r3
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <Get_nearest_order+0xfc>)
 8004b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b4e:	1acb      	subs	r3, r1, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bfb8      	it	lt
 8004b54:	425b      	neglt	r3, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	813b      	strh	r3, [r7, #8]
		if(distance < mindis)
 8004b5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	da03      	bge.n	8004b72 <Get_nearest_order+0x7e>
		{
			mindis = distance;
 8004b6a:	893b      	ldrh	r3, [r7, #8]
 8004b6c:	81bb      	strh	r3, [r7, #12]
			minindex = i;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	72fb      	strb	r3, [r7, #11]
	for(i=0;i < orders.length; i++)
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	3301      	adds	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <Get_nearest_order+0xf8>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	7bfa      	ldrb	r2, [r7, #15]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d3cc      	bcc.n	8004b1c <Get_nearest_order+0x28>
		}
	}
	Coordinate nearest = orders.buffer[minindex];
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <Get_nearest_order+0xf8>)
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	463a      	mov	r2, r7
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	6010      	str	r0, [r2, #0]

	for(i=minindex + 1; i < orders.length; i++)
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	3301      	adds	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e00f      	b.n	8004bba <Get_nearest_order+0xc6>
	{
		orders.buffer[i - 1] = orders.buffer[i];
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	4912      	ldr	r1, [pc, #72]	; (8004bec <Get_nearest_order+0xf8>)
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	440a      	add	r2, r1
 8004ba6:	4911      	ldr	r1, [pc, #68]	; (8004bec <Get_nearest_order+0xf8>)
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3202      	adds	r2, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6013      	str	r3, [r2, #0]
	for(i=minindex + 1; i < orders.length; i++)
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <Get_nearest_order+0xf8>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d3ea      	bcc.n	8004b9a <Get_nearest_order+0xa6>
	}

	orders.length -= 1;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <Get_nearest_order+0xf8>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <Get_nearest_order+0xf8>)
 8004bce:	701a      	strb	r2, [r3, #0]
	return nearest;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	88ba      	ldrh	r2, [r7, #4]
 8004bd8:	f362 030f 	bfi	r3, r2, #0, #16
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	f362 431f 	bfi	r3, r2, #16, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	20007ca8 	.word	0x20007ca8
 8004bf0:	20000be0 	.word	0x20000be0

08004bf4 <GotoDestination>:
extern JY62_HandleTypeDef himu;
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 8004bf4:	b5b0      	push	{r4, r5, r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
	if(mode == 1)
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	f040 80a2 	bne.w	8004d4c <GotoDestination+0x158>
	{
		uint8_t isGetAroad = mingyan_pathfind_avoidObstacle(&myCoord, &Destination);
 8004c08:	1d3b      	adds	r3, r7, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	486f      	ldr	r0, [pc, #444]	; (8004dcc <GotoDestination+0x1d8>)
 8004c0e:	f7fd fa1d 	bl	800204c <mingyan_pathfind_avoidObstacle>
 8004c12:	4603      	mov	r3, r0
 8004c14:	73fb      	strb	r3, [r7, #15]
		if(isGetAroad != 0)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05c      	beq.n	8004cd6 <GotoDestination+0xe2>
		{
			// success get a road
			for(uint8_t i = 0; i < pathlane.Length; i ++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73bb      	strb	r3, [r7, #14]
 8004c20:	bf00      	nop
 8004c22:	7bbb      	ldrb	r3, [r7, #14]
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c28:	885b      	ldrh	r3, [r3, #2]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	f080 80c9 	bcs.w	8004dc2 <GotoDestination+0x1ce>
			{
				while(1)
				{
					Position_P(&EstiCoord, &pathlane.buffer[pathlane.Head + i]);
 8004c30:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	7bbb      	ldrb	r3, [r7, #14]
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4a64      	ldr	r2, [pc, #400]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4863      	ldr	r0, [pc, #396]	; (8004dd4 <GotoDestination+0x1e0>)
 8004c46:	f000 f957 	bl	8004ef8 <Position_P>
					CheckCoord();
 8004c4a:	f000 f92f 	bl	8004eac <CheckCoord>
					if(abs(EstiCoord.x - pathlane.buffer[pathlane.Head + i].x) + abs(EstiCoord.y - pathlane.buffer[pathlane.Head + i].y) <= PATH_PID_TOLERANCE)
 8004c4e:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <GotoDestination+0x1e0>)
 8004c50:	681c      	ldr	r4, [r3, #0]
 8004c52:	4b5f      	ldr	r3, [pc, #380]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	7bbb      	ldrb	r3, [r7, #14]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a5c      	ldr	r2, [pc, #368]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fc f866 	bl	8000d38 <__aeabi_i2f>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7fb ffab 	bl	8000bcc <__aeabi_fsub>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fc fa77 	bl	800116c <__aeabi_f2iz>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004c84:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004c88:	4b52      	ldr	r3, [pc, #328]	; (8004dd4 <GotoDestination+0x1e0>)
 8004c8a:	685d      	ldr	r5, [r3, #4]
 8004c8c:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	7bbb      	ldrb	r3, [r7, #14]
 8004c94:	4413      	add	r3, r2
 8004c96:	4a4e      	ldr	r2, [pc, #312]	; (8004dd0 <GotoDestination+0x1dc>)
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fc f849 	bl	8000d38 <__aeabi_i2f>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7fb ff8e 	bl	8000bcc <__aeabi_fsub>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc fa5a 	bl	800116c <__aeabi_f2iz>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bfb8      	it	lt
 8004cbe:	425b      	neglt	r3, r3
 8004cc0:	4423      	add	r3, r4
 8004cc2:	2b0a      	cmp	r3, #10
 8004cc4:	dcb4      	bgt.n	8004c30 <GotoDestination+0x3c>
					{
						chao_move_angle(0,0);
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f7fd f8a3 	bl	8001e18 <chao_move_angle>
						return 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e076      	b.n	8004dc4 <GotoDestination+0x1d0>
		}
		else
		{
			while(1)
			{
				Position_P(&EstiCoord, &Destination);
 8004cd6:	1d3b      	adds	r3, r7, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	483e      	ldr	r0, [pc, #248]	; (8004dd4 <GotoDestination+0x1e0>)
 8004cdc:	f000 f90c 	bl	8004ef8 <Position_P>
				CheckCoord();
 8004ce0:	f000 f8e4 	bl	8004eac <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004ce4:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <GotoDestination+0x1e0>)
 8004ce6:	681c      	ldr	r4, [r3, #0]
 8004ce8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc f823 	bl	8000d38 <__aeabi_i2f>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7fb ff68 	bl	8000bcc <__aeabi_fsub>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fa34 	bl	800116c <__aeabi_f2iz>
 8004d04:	4603      	mov	r3, r0
 8004d06:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004d0a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <GotoDestination+0x1e0>)
 8004d10:	685d      	ldr	r5, [r3, #4]
 8004d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc f80e 	bl	8000d38 <__aeabi_i2f>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4628      	mov	r0, r5
 8004d22:	f7fb ff53 	bl	8000bcc <__aeabi_fsub>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fc fa1f 	bl	800116c <__aeabi_f2iz>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bfb8      	it	lt
 8004d34:	425b      	neglt	r3, r3
 8004d36:	4423      	add	r3, r4
 8004d38:	2b0a      	cmp	r3, #10
 8004d3a:	dccc      	bgt.n	8004cd6 <GotoDestination+0xe2>
				{
					chao_move_angle(0,0);
 8004d3c:	f04f 0100 	mov.w	r1, #0
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	f7fd f868 	bl	8001e18 <chao_move_angle>
					return 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e03b      	b.n	8004dc4 <GotoDestination+0x1d0>
	}
	else
	{
		while(1)
		{
			Position_P(&EstiCoord, &Destination);
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4820      	ldr	r0, [pc, #128]	; (8004dd4 <GotoDestination+0x1e0>)
 8004d52:	f000 f8d1 	bl	8004ef8 <Position_P>
			CheckCoord();
 8004d56:	f000 f8a9 	bl	8004eac <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <GotoDestination+0x1e0>)
 8004d5c:	681c      	ldr	r4, [r3, #0]
 8004d5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fb ffe8 	bl	8000d38 <__aeabi_i2f>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7fb ff2d 	bl	8000bcc <__aeabi_fsub>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc f9f9 	bl	800116c <__aeabi_f2iz>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004d80:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <GotoDestination+0x1e0>)
 8004d86:	685d      	ldr	r5, [r3, #4]
 8004d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb ffd3 	bl	8000d38 <__aeabi_i2f>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4619      	mov	r1, r3
 8004d96:	4628      	mov	r0, r5
 8004d98:	f7fb ff18 	bl	8000bcc <__aeabi_fsub>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fc f9e4 	bl	800116c <__aeabi_f2iz>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bfb8      	it	lt
 8004daa:	425b      	neglt	r3, r3
 8004dac:	4423      	add	r3, r4
 8004dae:	2b0a      	cmp	r3, #10
 8004db0:	dccc      	bgt.n	8004d4c <GotoDestination+0x158>
			{
				chao_move_angle(0,0);
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	f04f 0000 	mov.w	r0, #0
 8004dba:	f7fd f82d 	bl	8001e18 <chao_move_angle>
				return 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <GotoDestination+0x1d0>
			}
		}
	}
	return 0;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bdb0      	pop	{r4, r5, r7, pc}
 8004dcc:	20000be0 	.word	0x20000be0
 8004dd0:	20007c24 	.word	0x20007c24
 8004dd4:	20000be4 	.word	0x20000be4

08004dd8 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004de4:	e005      	b.n	8004df2 <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 8004de6:	4910      	ldr	r1, [pc, #64]	; (8004e28 <Angle_normalization+0x50>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7fb fef1 	bl	8000bd0 <__addsf3>
 8004dee:	4603      	mov	r3, r0
 8004df0:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7fc f990 	bl	800111c <__aeabi_fcmplt>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f1      	bne.n	8004de6 <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 8004e02:	e005      	b.n	8004e10 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 8004e04:	4908      	ldr	r1, [pc, #32]	; (8004e28 <Angle_normalization+0x50>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7fb fee0 	bl	8000bcc <__aeabi_fsub>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8004e10:	4905      	ldr	r1, [pc, #20]	; (8004e28 <Angle_normalization+0x50>)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7fc f9a0 	bl	8001158 <__aeabi_fcmpgt>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f2      	bne.n	8004e04 <Angle_normalization+0x2c>
	}
	return raw_angle;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	43b40000 	.word	0x43b40000

08004e2c <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	460a      	mov	r2, r1
 8004e36:	80fb      	strh	r3, [r7, #6]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80bb      	strh	r3, [r7, #4]
	float kp = 10.0;
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <CalSpeed+0x74>)
 8004e3e:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 8004e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bfb8      	it	lt
 8004e48:	425b      	neglt	r3, r3
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfb8      	it	lt
 8004e56:	425b      	neglt	r3, r3
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb ff6b 	bl	8000d38 <__aeabi_i2f>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4619      	mov	r1, r3
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f7fb ffba 	bl	8000de0 <__aeabi_fmul>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 8004e70:	490c      	ldr	r1, [pc, #48]	; (8004ea4 <CalSpeed+0x78>)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7fc f970 	bl	8001158 <__aeabi_fcmpgt>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <CalSpeed+0x56>
	{
		Speed = MAX_SPEED;
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <CalSpeed+0x78>)
 8004e80:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 8004e82:	4909      	ldr	r1, [pc, #36]	; (8004ea8 <CalSpeed+0x7c>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7fc f949 	bl	800111c <__aeabi_fcmplt>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <CalSpeed+0x68>
	{
		Speed = MIN_SPEED;
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <CalSpeed+0x7c>)
 8004e92:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 8004e94:	68fb      	ldr	r3, [r7, #12]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	41200000 	.word	0x41200000
 8004ea4:	447a0000 	.word	0x447a0000
 8004ea8:	43fa0000 	.word	0x43fa0000

08004eac <CheckCoord>:

uint8_t CheckCoord(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <CheckCoord+0x40>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d116      	bne.n	8004ee6 <CheckCoord+0x3a>
	{
		EstiCoord.x = myCoord.x;
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <CheckCoord+0x44>)
 8004eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb ff3a 	bl	8000d38 <__aeabi_i2f>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a0b      	ldr	r2, [pc, #44]	; (8004ef4 <CheckCoord+0x48>)
 8004ec8:	6013      	str	r3, [r2, #0]
		EstiCoord.y = myCoord.y;
 8004eca:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <CheckCoord+0x44>)
 8004ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fb ff31 	bl	8000d38 <__aeabi_i2f>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4a06      	ldr	r2, [pc, #24]	; (8004ef4 <CheckCoord+0x48>)
 8004eda:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <CheckCoord+0x40>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
		return 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <CheckCoord+0x3c>
	}
	return 0;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20000bec 	.word	0x20000bec
 8004ef0:	20000be0 	.word	0x20000be0
 8004ef4:	20000be4 	.word	0x20000be4

08004ef8 <Position_P>:
	float v_y = (cmotor_rf.lastSpeed + cmotor_lf.lastSpeed + cmotor_lb.lastSpeed + cmotor_rb.lastSpeed) * 60.0 / 20000;
	return v_y;
}

void Position_P(fCoordinate* cur, Coordinate* goal)
{
 8004ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004efc:	b08e      	sub	sp, #56	; 0x38
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
	float x_error = goal->x - cur->x;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb ff14 	bl	8000d38 <__aeabi_i2f>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fb fe57 	bl	8000bcc <__aeabi_fsub>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
	float y_error = goal->y - cur->y;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fb ff05 	bl	8000d38 <__aeabi_i2f>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7fb fe48 	bl	8000bcc <__aeabi_fsub>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (y_error == 0)
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f46:	f7fc f8df 	bl	8001108 <__aeabi_fcmpeq>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d034      	beq.n	8004fba <Position_P+0xc2>
	{
		if(x_error < 0)
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f56:	f7fc f8e1 	bl	800111c <__aeabi_fcmplt>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00e      	beq.n	8004f7e <Position_P+0x86>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 8004f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f62:	f7fc f903 	bl	800116c <__aeabi_f2iz>
 8004f66:	4603      	mov	r3, r0
 8004f68:	b21b      	sxth	r3, r3
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ff5d 	bl	8004e2c <CalSpeed>
 8004f72:	4603      	mov	r3, r0
 8004f74:	4619      	mov	r1, r3
 8004f76:	48a6      	ldr	r0, [pc, #664]	; (8005210 <Position_P+0x318>)
 8004f78:	f7fc ff4e 	bl	8001e18 <chao_move_angle>
 8004f7c:	e092      	b.n	80050a4 <Position_P+0x1ac>
		}
		else if(x_error > 0)
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f84:	f7fc f8e8 	bl	8001158 <__aeabi_fcmpgt>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <Position_P+0xb4>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 8004f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f90:	f7fc f8ec 	bl	800116c <__aeabi_f2iz>
 8004f94:	4603      	mov	r3, r0
 8004f96:	b21b      	sxth	r3, r3
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ff46 	bl	8004e2c <CalSpeed>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	489b      	ldr	r0, [pc, #620]	; (8005214 <Position_P+0x31c>)
 8004fa6:	f7fc ff37 	bl	8001e18 <chao_move_angle>
 8004faa:	e07b      	b.n	80050a4 <Position_P+0x1ac>
		}
		else
		{
			chao_move_angle(0, 0);
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f7fc ff30 	bl	8001e18 <chao_move_angle>
 8004fb8:	e074      	b.n	80050a4 <Position_P+0x1ac>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 8004fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fbe:	f7fb ffc3 	bl	8000f48 <__aeabi_fdiv>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fb fa93 	bl	80004f0 <__aeabi_f2d>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f006 faad 	bl	800b530 <atan>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f7fb fda1 	bl	8000b24 <__aeabi_d2f>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
		if(y_error < 0)
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fec:	f7fc f896 	bl	800111c <__aeabi_fcmplt>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00f      	beq.n	8005016 <Position_P+0x11e>
		{
			azimuth += M_PI;
 8004ff6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ff8:	f7fb fa7a 	bl	80004f0 <__aeabi_f2d>
 8004ffc:	a37e      	add	r3, pc, #504	; (adr r3, 80051f8 <Position_P+0x300>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb f917 	bl	8000234 <__adddf3>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f7fb fd89 	bl	8000b24 <__aeabi_d2f>
 8005012:	4603      	mov	r3, r0
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 8005016:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005018:	f7fb fa6a 	bl	80004f0 <__aeabi_f2d>
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	4b7d      	ldr	r3, [pc, #500]	; (8005218 <Position_P+0x320>)
 8005022:	f7fb fabd 	bl	80005a0 <__aeabi_dmul>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	a374      	add	r3, pc, #464	; (adr r3, 8005200 <Position_P+0x308>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb fbde 	bl	80007f4 <__aeabi_ddiv>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	f7fb fd70 	bl	8000b24 <__aeabi_d2f>
 8005044:	4603      	mov	r3, r0
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
		azimuth = Angle_normalization(azimuth);
 8005048:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800504a:	f7ff fec5 	bl	8004dd8 <Angle_normalization>
 800504e:	6378      	str	r0, [r7, #52]	; 0x34
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 8005050:	4b72      	ldr	r3, [pc, #456]	; (800521c <Position_P+0x324>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a72      	ldr	r2, [pc, #456]	; (8005220 <Position_P+0x328>)
 8005056:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb fdb6 	bl	8000bcc <__aeabi_fsub>
 8005060:	4603      	mov	r3, r0
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff feb8 	bl	8004dd8 <Angle_normalization>
 8005068:	4603      	mov	r3, r0
 800506a:	4619      	mov	r1, r3
 800506c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800506e:	f7fb fdad 	bl	8000bcc <__aeabi_fsub>
 8005072:	4603      	mov	r3, r0
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
		angle = Angle_normalization(angle);
 8005076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005078:	f7ff feae 	bl	8004dd8 <Angle_normalization>
 800507c:	62b8      	str	r0, [r7, #40]	; 0x28
		chao_move_angle(angle, CalSpeed(x_error, y_error));
 800507e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005080:	f7fc f874 	bl	800116c <__aeabi_f2iz>
 8005084:	4603      	mov	r3, r0
 8005086:	b21c      	sxth	r4, r3
 8005088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800508a:	f7fc f86f 	bl	800116c <__aeabi_f2iz>
 800508e:	4603      	mov	r3, r0
 8005090:	b21b      	sxth	r3, r3
 8005092:	4619      	mov	r1, r3
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff fec9 	bl	8004e2c <CalSpeed>
 800509a:	4603      	mov	r3, r0
 800509c:	4619      	mov	r1, r3
 800509e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a0:	f7fc feba 	bl	8001e18 <chao_move_angle>
	}
	CheckCoord();
 80050a4:	f7ff ff02 	bl	8004eac <CheckCoord>
	uint32_t timestart = HAL_GetTick();
 80050a8:	f001 f874 	bl	8006194 <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(10); // delay 10 ms = 100 Hz
 80050ae:	200a      	movs	r0, #10
 80050b0:	f001 f87a 	bl	80061a8 <HAL_Delay>
	if(CheckCoord() == 0)
 80050b4:	f7ff fefa 	bl	8004eac <CheckCoord>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 8097 	bne.w	80051ee <Position_P+0x2f6>
	{
		float lf_v = cmotor_lf.lastSpeed;
 80050c0:	4b58      	ldr	r3, [pc, #352]	; (8005224 <Position_P+0x32c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	623b      	str	r3, [r7, #32]
		float lb_v = cmotor_lb.lastSpeed;
 80050c6:	4b58      	ldr	r3, [pc, #352]	; (8005228 <Position_P+0x330>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	61fb      	str	r3, [r7, #28]
		float rf_v = cmotor_rf.lastSpeed;
 80050cc:	4b57      	ldr	r3, [pc, #348]	; (800522c <Position_P+0x334>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	61bb      	str	r3, [r7, #24]
		float rb_v = cmotor_rb.lastSpeed;
 80050d2:	4b57      	ldr	r3, [pc, #348]	; (8005230 <Position_P+0x338>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	617b      	str	r3, [r7, #20]
		float v_x = -((rf_v - lf_v + lb_v - rb_v) / 500);
 80050d8:	6a39      	ldr	r1, [r7, #32]
 80050da:	69b8      	ldr	r0, [r7, #24]
 80050dc:	f7fb fd76 	bl	8000bcc <__aeabi_fsub>
 80050e0:	4603      	mov	r3, r0
 80050e2:	69f9      	ldr	r1, [r7, #28]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb fd73 	bl	8000bd0 <__addsf3>
 80050ea:	4603      	mov	r3, r0
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb fd6c 	bl	8000bcc <__aeabi_fsub>
 80050f4:	4603      	mov	r3, r0
 80050f6:	494f      	ldr	r1, [pc, #316]	; (8005234 <Position_P+0x33c>)
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb ff25 	bl	8000f48 <__aeabi_fdiv>
 80050fe:	4603      	mov	r3, r0
 8005100:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005104:	613b      	str	r3, [r7, #16]
		float v_y = ((rf_v + lf_v + lb_v + rb_v) / 500);
 8005106:	6a39      	ldr	r1, [r7, #32]
 8005108:	69b8      	ldr	r0, [r7, #24]
 800510a:	f7fb fd61 	bl	8000bd0 <__addsf3>
 800510e:	4603      	mov	r3, r0
 8005110:	69f9      	ldr	r1, [r7, #28]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb fd5c 	bl	8000bd0 <__addsf3>
 8005118:	4603      	mov	r3, r0
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb fd57 	bl	8000bd0 <__addsf3>
 8005122:	4603      	mov	r3, r0
 8005124:	4943      	ldr	r1, [pc, #268]	; (8005234 <Position_P+0x33c>)
 8005126:	4618      	mov	r0, r3
 8005128:	f7fb ff0e 	bl	8000f48 <__aeabi_fdiv>
 800512c:	4603      	mov	r3, r0
 800512e:	60fb      	str	r3, [r7, #12]
		uint32_t timeend = HAL_GetTick();
 8005130:	f001 f830 	bl	8006194 <HAL_GetTick>
 8005134:	60b8      	str	r0, [r7, #8]
		EstiCoord.x = EstiCoord.x + (timeend - timestart) * 0.001 * v_x;
 8005136:	4b40      	ldr	r3, [pc, #256]	; (8005238 <Position_P+0x340>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb f9d8 	bl	80004f0 <__aeabi_f2d>
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb f9ae 	bl	80004ac <__aeabi_ui2d>
 8005150:	a32d      	add	r3, pc, #180	; (adr r3, 8005208 <Position_P+0x310>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f7fb fa23 	bl	80005a0 <__aeabi_dmul>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4690      	mov	r8, r2
 8005160:	4699      	mov	r9, r3
 8005162:	6938      	ldr	r0, [r7, #16]
 8005164:	f7fb f9c4 	bl	80004f0 <__aeabi_f2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4640      	mov	r0, r8
 800516e:	4649      	mov	r1, r9
 8005170:	f7fb fa16 	bl	80005a0 <__aeabi_dmul>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4620      	mov	r0, r4
 800517a:	4629      	mov	r1, r5
 800517c:	f7fb f85a 	bl	8000234 <__adddf3>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	f7fb fccc 	bl	8000b24 <__aeabi_d2f>
 800518c:	4603      	mov	r3, r0
 800518e:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <Position_P+0x340>)
 8005190:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + (timeend - timestart) * 0.001 * v_y;
 8005192:	4b29      	ldr	r3, [pc, #164]	; (8005238 <Position_P+0x340>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fb f9aa 	bl	80004f0 <__aeabi_f2d>
 800519c:	4604      	mov	r4, r0
 800519e:	460d      	mov	r5, r1
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb f980 	bl	80004ac <__aeabi_ui2d>
 80051ac:	a316      	add	r3, pc, #88	; (adr r3, 8005208 <Position_P+0x310>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb f9f5 	bl	80005a0 <__aeabi_dmul>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4690      	mov	r8, r2
 80051bc:	4699      	mov	r9, r3
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7fb f996 	bl	80004f0 <__aeabi_f2d>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4640      	mov	r0, r8
 80051ca:	4649      	mov	r1, r9
 80051cc:	f7fb f9e8 	bl	80005a0 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4620      	mov	r0, r4
 80051d6:	4629      	mov	r1, r5
 80051d8:	f7fb f82c 	bl	8000234 <__adddf3>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	f7fb fc9e 	bl	8000b24 <__aeabi_d2f>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4a13      	ldr	r2, [pc, #76]	; (8005238 <Position_P+0x340>)
 80051ec:	6053      	str	r3, [r2, #4]
	}
}
 80051ee:	bf00      	nop
 80051f0:	3738      	adds	r7, #56	; 0x38
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051f8:	54442d18 	.word	0x54442d18
 80051fc:	400921fb 	.word	0x400921fb
 8005200:	54442d18 	.word	0x54442d18
 8005204:	401921fb 	.word	0x401921fb
 8005208:	d2f1a9fc 	.word	0xd2f1a9fc
 800520c:	3f50624d 	.word	0x3f50624d
 8005210:	43870000 	.word	0x43870000
 8005214:	42b40000 	.word	0x42b40000
 8005218:	40768000 	.word	0x40768000
 800521c:	20000bf0 	.word	0x20000bf0
 8005220:	20000a84 	.word	0x20000a84
 8005224:	20000994 	.word	0x20000994
 8005228:	20000a0c 	.word	0x20000a0c
 800522c:	200009d0 	.word	0x200009d0
 8005230:	20000a48 	.word	0x20000a48
 8005234:	43fa0000 	.word	0x43fa0000
 8005238:	20000be4 	.word	0x20000be4

0800523c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af04      	add	r7, sp, #16
 8005242:	4603      	mov	r3, r0
 8005244:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005246:	f04f 33ff 	mov.w	r3, #4294967295
 800524a:	9302      	str	r3, [sp, #8]
 800524c:	2301      	movs	r3, #1
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	1dfb      	adds	r3, r7, #7
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2301      	movs	r3, #1
 8005256:	2200      	movs	r2, #0
 8005258:	2178      	movs	r1, #120	; 0x78
 800525a:	4803      	ldr	r0, [pc, #12]	; (8005268 <ssd1306_WriteCommand+0x2c>)
 800525c:	f002 f848 	bl	80072f0 <HAL_I2C_Mem_Write>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000638 	.word	0x20000638

0800526c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af04      	add	r7, sp, #16
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	9202      	str	r2, [sp, #8]
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	2301      	movs	r3, #1
 8005288:	2240      	movs	r2, #64	; 0x40
 800528a:	2178      	movs	r1, #120	; 0x78
 800528c:	4803      	ldr	r0, [pc, #12]	; (800529c <ssd1306_WriteData+0x30>)
 800528e:	f002 f82f 	bl	80072f0 <HAL_I2C_Mem_Write>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000638 	.word	0x20000638

080052a0 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80052a6:	2300      	movs	r3, #0
 80052a8:	71fb      	strb	r3, [r7, #7]
 80052aa:	e016      	b.n	80052da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	3b50      	subs	r3, #80	; 0x50
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ffc2 	bl	800523c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7ff ffbf 	bl	800523c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80052be:	2010      	movs	r0, #16
 80052c0:	f7ff ffbc 	bl	800523c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	01db      	lsls	r3, r3, #7
 80052c8:	4a08      	ldr	r2, [pc, #32]	; (80052ec <ssd1306_UpdateScreen+0x4c>)
 80052ca:	4413      	add	r3, r2
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ffcc 	bl	800526c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	3301      	adds	r3, #1
 80052d8:	71fb      	strb	r3, [r7, #7]
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d9e5      	bls.n	80052ac <ssd1306_UpdateScreen+0xc>
    }
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20007d9c 	.word	0x20007d9c

080052f0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
 80052fa:	460b      	mov	r3, r1
 80052fc:	71bb      	strb	r3, [r7, #6]
 80052fe:	4613      	mov	r3, r2
 8005300:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005306:	2b00      	cmp	r3, #0
 8005308:	db3d      	blt.n	8005386 <ssd1306_DrawPixel+0x96>
 800530a:	79bb      	ldrb	r3, [r7, #6]
 800530c:	2b1f      	cmp	r3, #31
 800530e:	d83a      	bhi.n	8005386 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8005310:	797b      	ldrb	r3, [r7, #5]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d11a      	bne.n	800534c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005316:	79fa      	ldrb	r2, [r7, #7]
 8005318:	79bb      	ldrb	r3, [r7, #6]
 800531a:	08db      	lsrs	r3, r3, #3
 800531c:	b2d8      	uxtb	r0, r3
 800531e:	4603      	mov	r3, r0
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	4413      	add	r3, r2
 8005324:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <ssd1306_DrawPixel+0xa0>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	b25a      	sxtb	r2, r3
 800532a:	79bb      	ldrb	r3, [r7, #6]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	2101      	movs	r1, #1
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	b25b      	sxtb	r3, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	b259      	sxtb	r1, r3
 800533c:	79fa      	ldrb	r2, [r7, #7]
 800533e:	4603      	mov	r3, r0
 8005340:	01db      	lsls	r3, r3, #7
 8005342:	4413      	add	r3, r2
 8005344:	b2c9      	uxtb	r1, r1
 8005346:	4a12      	ldr	r2, [pc, #72]	; (8005390 <ssd1306_DrawPixel+0xa0>)
 8005348:	54d1      	strb	r1, [r2, r3]
 800534a:	e01d      	b.n	8005388 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	79bb      	ldrb	r3, [r7, #6]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	b2d8      	uxtb	r0, r3
 8005354:	4603      	mov	r3, r0
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	4413      	add	r3, r2
 800535a:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <ssd1306_DrawPixel+0xa0>)
 800535c:	5cd3      	ldrb	r3, [r2, r3]
 800535e:	b25a      	sxtb	r2, r3
 8005360:	79bb      	ldrb	r3, [r7, #6]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	b25b      	sxtb	r3, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	b25b      	sxtb	r3, r3
 8005372:	4013      	ands	r3, r2
 8005374:	b259      	sxtb	r1, r3
 8005376:	79fa      	ldrb	r2, [r7, #7]
 8005378:	4603      	mov	r3, r0
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	4413      	add	r3, r2
 800537e:	b2c9      	uxtb	r1, r1
 8005380:	4a03      	ldr	r2, [pc, #12]	; (8005390 <ssd1306_DrawPixel+0xa0>)
 8005382:	54d1      	strb	r1, [r2, r3]
 8005384:	e000      	b.n	8005388 <ssd1306_DrawPixel+0x98>
        return;
 8005386:	bf00      	nop
    }
}
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	20007d9c 	.word	0x20007d9c

08005394 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b089      	sub	sp, #36	; 0x24
 8005398:	af00      	add	r7, sp, #0
 800539a:	4604      	mov	r4, r0
 800539c:	1d38      	adds	r0, r7, #4
 800539e:	e880 0006 	stmia.w	r0, {r1, r2}
 80053a2:	461a      	mov	r2, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	4613      	mov	r3, r2
 80053aa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b1f      	cmp	r3, #31
 80053b0:	d902      	bls.n	80053b8 <ssd1306_WriteChar+0x24>
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b7e      	cmp	r3, #126	; 0x7e
 80053b6:	d901      	bls.n	80053bc <ssd1306_WriteChar+0x28>
        return 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e06d      	b.n	8005498 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80053bc:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	793b      	ldrb	r3, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	dc06      	bgt.n	80053d8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80053ca:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 80053cc:	885b      	ldrh	r3, [r3, #2]
 80053ce:	461a      	mov	r2, r3
 80053d0:	797b      	ldrb	r3, [r7, #5]
 80053d2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	dd01      	ble.n	80053dc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	e05d      	b.n	8005498 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e04c      	b.n	800547c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	3b20      	subs	r3, #32
 80053e8:	7979      	ldrb	r1, [r7, #5]
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4619      	mov	r1, r3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	440b      	add	r3, r1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e034      	b.n	800546c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d012      	beq.n	8005438 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005412:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4413      	add	r3, r2
 800541e:	b2d8      	uxtb	r0, r3
 8005420:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 8005422:	885b      	ldrh	r3, [r3, #2]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4413      	add	r3, r2
 800542c:	b2db      	uxtb	r3, r3
 800542e:	7bba      	ldrb	r2, [r7, #14]
 8005430:	4619      	mov	r1, r3
 8005432:	f7ff ff5d 	bl	80052f0 <ssd1306_DrawPixel>
 8005436:	e016      	b.n	8005466 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4413      	add	r3, r2
 8005444:	b2d8      	uxtb	r0, r3
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 8005448:	885b      	ldrh	r3, [r3, #2]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	4413      	add	r3, r2
 8005452:	b2d9      	uxtb	r1, r3
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	f7ff ff45 	bl	80052f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	3301      	adds	r3, #1
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	793b      	ldrb	r3, [r7, #4]
 800546e:	461a      	mov	r2, r3
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	4293      	cmp	r3, r2
 8005474:	d3c5      	bcc.n	8005402 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	797b      	ldrb	r3, [r7, #5]
 800547e:	461a      	mov	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4293      	cmp	r3, r2
 8005484:	d3ad      	bcc.n	80053e2 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	793b      	ldrb	r3, [r7, #4]
 800548c:	b29b      	uxth	r3, r3
 800548e:	4413      	add	r3, r2
 8005490:	b29a      	uxth	r2, r3
 8005492:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <ssd1306_WriteChar+0x10c>)
 8005494:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3724      	adds	r7, #36	; 0x24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}
 80054a0:	20007f9c 	.word	0x20007f9c

080054a4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	1d38      	adds	r0, r7, #4
 80054ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80054b2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80054b4:	e012      	b.n	80054dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	7818      	ldrb	r0, [r3, #0]
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	1d3a      	adds	r2, r7, #4
 80054be:	ca06      	ldmia	r2, {r1, r2}
 80054c0:	f7ff ff68 	bl	8005394 <ssd1306_WriteChar>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d002      	beq.n	80054d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	e008      	b.n	80054e8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e8      	bne.n	80054b6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	781b      	ldrb	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054f6:	4b15      	ldr	r3, [pc, #84]	; (800554c <HAL_MspInit+0x5c>)
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <HAL_MspInit+0x5c>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6193      	str	r3, [r2, #24]
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_MspInit+0x5c>)
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <HAL_MspInit+0x5c>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <HAL_MspInit+0x5c>)
 8005514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005518:	61d3      	str	r3, [r2, #28]
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <HAL_MspInit+0x5c>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_MspInit+0x60>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	4a04      	ldr	r2, [pc, #16]	; (8005550 <HAL_MspInit+0x60>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	40021000 	.word	0x40021000
 8005550:	40010000 	.word	0x40010000

08005554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
 8005568:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_I2C_MspInit+0x90>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d132      	bne.n	80055da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <HAL_I2C_MspInit+0x94>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4a1b      	ldr	r2, [pc, #108]	; (80055e8 <HAL_I2C_MspInit+0x94>)
 800557a:	f043 0308 	orr.w	r3, r3, #8
 800557e:	6193      	str	r3, [r2, #24]
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <HAL_I2C_MspInit+0x94>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800558c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005592:	2312      	movs	r3, #18
 8005594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005596:	2303      	movs	r3, #3
 8005598:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	4619      	mov	r1, r3
 80055a0:	4812      	ldr	r0, [pc, #72]	; (80055ec <HAL_I2C_MspInit+0x98>)
 80055a2:	f001 fbb5 	bl	8006d10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_I2C_MspInit+0x9c>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
 80055bc:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_I2C_MspInit+0x9c>)
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_I2C_MspInit+0x94>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <HAL_I2C_MspInit+0x94>)
 80055c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055cc:	61d3      	str	r3, [r2, #28]
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <HAL_I2C_MspInit+0x94>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055da:	bf00      	nop
 80055dc:	3728      	adds	r7, #40	; 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40005400 	.word	0x40005400
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40010c00 	.word	0x40010c00
 80055f0:	40010000 	.word	0x40010000

080055f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_TIM_Base_MspInit+0x8c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 800560c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005610:	6193      	str	r3, [r2, #24]
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800561e:	e02a      	b.n	8005676 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_TIM_Base_MspInit+0x94>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d114      	bne.n	8005654 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 8005630:	f043 0310 	orr.w	r3, r3, #16
 8005634:	61d3      	str	r3, [r2, #28]
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8005642:	2200      	movs	r2, #0
 8005644:	2101      	movs	r1, #1
 8005646:	2036      	movs	r0, #54	; 0x36
 8005648:	f000 fea9 	bl	800639e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800564c:	2036      	movs	r0, #54	; 0x36
 800564e:	f000 fec2 	bl	80063d6 <HAL_NVIC_EnableIRQ>
}
 8005652:	e010      	b.n	8005676 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a0c      	ldr	r2, [pc, #48]	; (800568c <HAL_TIM_Base_MspInit+0x98>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10b      	bne.n	8005676 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	4a08      	ldr	r2, [pc, #32]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 8005664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005668:	6193      	str	r3, [r2, #24]
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_TIM_Base_MspInit+0x90>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40021000 	.word	0x40021000
 8005688:	40001000 	.word	0x40001000
 800568c:	40013400 	.word	0x40013400

08005690 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b090      	sub	sp, #64	; 0x40
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d14f      	bne.n	8005750 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056b0:	4b68      	ldr	r3, [pc, #416]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4a67      	ldr	r2, [pc, #412]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	61d3      	str	r3, [r2, #28]
 80056bc:	4b65      	ldr	r3, [pc, #404]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056c8:	4b62      	ldr	r3, [pc, #392]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	4a61      	ldr	r2, [pc, #388]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056ce:	f043 0304 	orr.w	r3, r3, #4
 80056d2:	6193      	str	r3, [r2, #24]
 80056d4:	4b5f      	ldr	r3, [pc, #380]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e0:	4b5c      	ldr	r3, [pc, #368]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	4a5b      	ldr	r2, [pc, #364]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056e6:	f043 0308 	orr.w	r3, r3, #8
 80056ea:	6193      	str	r3, [r2, #24]
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80056f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056fe:	2300      	movs	r3, #0
 8005700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005702:	2300      	movs	r3, #0
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800570a:	4619      	mov	r1, r3
 800570c:	4852      	ldr	r0, [pc, #328]	; (8005858 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800570e:	f001 faff 	bl	8006d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005712:	2308      	movs	r3, #8
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005716:	2300      	movs	r3, #0
 8005718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005722:	4619      	mov	r1, r3
 8005724:	484d      	ldr	r0, [pc, #308]	; (800585c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005726:	f001 faf3 	bl	8006d10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800572a:	4b4d      	ldr	r3, [pc, #308]	; (8005860 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005748:	4a45      	ldr	r2, [pc, #276]	; (8005860 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800574e:	e07c      	b.n	800584a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a43      	ldr	r2, [pc, #268]	; (8005864 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d124      	bne.n	80057a4 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800575a:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4a3d      	ldr	r2, [pc, #244]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005760:	f043 0302 	orr.w	r3, r3, #2
 8005764:	61d3      	str	r3, [r2, #28]
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005772:	4b38      	ldr	r3, [pc, #224]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	4a37      	ldr	r2, [pc, #220]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005778:	f043 0304 	orr.w	r3, r3, #4
 800577c:	6193      	str	r3, [r2, #24]
 800577e:	4b35      	ldr	r3, [pc, #212]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800578a:	23c0      	movs	r3, #192	; 0xc0
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800578e:	2300      	movs	r3, #0
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	2300      	movs	r3, #0
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800579a:	4619      	mov	r1, r3
 800579c:	482e      	ldr	r0, [pc, #184]	; (8005858 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800579e:	f001 fab7 	bl	8006d10 <HAL_GPIO_Init>
}
 80057a2:	e052      	b.n	800584a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d124      	bne.n	80057f8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057ae:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	4a28      	ldr	r2, [pc, #160]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057b4:	f043 0304 	orr.w	r3, r3, #4
 80057b8:	61d3      	str	r3, [r2, #28]
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c6:	4b23      	ldr	r3, [pc, #140]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	4a22      	ldr	r2, [pc, #136]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057cc:	f043 0308 	orr.w	r3, r3, #8
 80057d0:	6193      	str	r3, [r2, #24]
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057de:	23c0      	movs	r3, #192	; 0xc0
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057e2:	2300      	movs	r3, #0
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057ee:	4619      	mov	r1, r3
 80057f0:	481a      	ldr	r0, [pc, #104]	; (800585c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80057f2:	f001 fa8d 	bl	8006d10 <HAL_GPIO_Init>
}
 80057f6:	e028      	b.n	800584a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d123      	bne.n	800584a <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005808:	f043 0308 	orr.w	r3, r3, #8
 800580c:	61d3      	str	r3, [r2, #28]
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800581a:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005820:	f043 0304 	orr.w	r3, r3, #4
 8005824:	6193      	str	r3, [r2, #24]
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005832:	2303      	movs	r3, #3
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005836:	2300      	movs	r3, #0
 8005838:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583a:	2300      	movs	r3, #0
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800583e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005842:	4619      	mov	r1, r3
 8005844:	4804      	ldr	r0, [pc, #16]	; (8005858 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8005846:	f001 fa63 	bl	8006d10 <HAL_GPIO_Init>
}
 800584a:	bf00      	nop
 800584c:	3740      	adds	r7, #64	; 0x40
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000
 8005858:	40010800 	.word	0x40010800
 800585c:	40010c00 	.word	0x40010c00
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00

08005870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005878:	f107 0310 	add.w	r3, r7, #16
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <HAL_TIM_MspPostInit+0x98>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d119      	bne.n	80058c4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_TIM_MspPostInit+0x9c>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4a1d      	ldr	r2, [pc, #116]	; (800590c <HAL_TIM_MspPostInit+0x9c>)
 8005896:	f043 0304 	orr.w	r3, r3, #4
 800589a:	6193      	str	r3, [r2, #24]
 800589c:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_TIM_MspPostInit+0x9c>)
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80058a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80058ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ae:	2302      	movs	r3, #2
 80058b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b2:	2302      	movs	r3, #2
 80058b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b6:	f107 0310 	add.w	r3, r7, #16
 80058ba:	4619      	mov	r1, r3
 80058bc:	4814      	ldr	r0, [pc, #80]	; (8005910 <HAL_TIM_MspPostInit+0xa0>)
 80058be:	f001 fa27 	bl	8006d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80058c2:	e01d      	b.n	8005900 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a12      	ldr	r2, [pc, #72]	; (8005914 <HAL_TIM_MspPostInit+0xa4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d118      	bne.n	8005900 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <HAL_TIM_MspPostInit+0x9c>)
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4a0e      	ldr	r2, [pc, #56]	; (800590c <HAL_TIM_MspPostInit+0x9c>)
 80058d4:	f043 0310 	orr.w	r3, r3, #16
 80058d8:	6193      	str	r3, [r2, #24]
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <HAL_TIM_MspPostInit+0x9c>)
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80058e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80058ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ec:	2302      	movs	r3, #2
 80058ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f0:	2302      	movs	r3, #2
 80058f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	4619      	mov	r1, r3
 80058fa:	4807      	ldr	r0, [pc, #28]	; (8005918 <HAL_TIM_MspPostInit+0xa8>)
 80058fc:	f001 fa08 	bl	8006d10 <HAL_GPIO_Init>
}
 8005900:	bf00      	nop
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40021000 	.word	0x40021000
 8005910:	40010800 	.word	0x40010800
 8005914:	40013400 	.word	0x40013400
 8005918:	40011000 	.word	0x40011000

0800591c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08c      	sub	sp, #48	; 0x30
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005924:	f107 031c 	add.w	r3, r7, #28
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a6e      	ldr	r2, [pc, #440]	; (8005af0 <HAL_UART_MspInit+0x1d4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d15e      	bne.n	80059fa <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800593c:	4b6d      	ldr	r3, [pc, #436]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4a6c      	ldr	r2, [pc, #432]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005946:	61d3      	str	r3, [r2, #28]
 8005948:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005954:	4b67      	ldr	r3, [pc, #412]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	4a66      	ldr	r2, [pc, #408]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 800595a:	f043 0304 	orr.w	r3, r3, #4
 800595e:	6193      	str	r3, [r2, #24]
 8005960:	4b64      	ldr	r3, [pc, #400]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 800596c:	2304      	movs	r3, #4
 800596e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005970:	2302      	movs	r3, #2
 8005972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005974:	2303      	movs	r3, #3
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8005978:	f107 031c 	add.w	r3, r7, #28
 800597c:	4619      	mov	r1, r3
 800597e:	485e      	ldr	r0, [pc, #376]	; (8005af8 <HAL_UART_MspInit+0x1dc>)
 8005980:	f001 f9c6 	bl	8006d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8005984:	2308      	movs	r3, #8
 8005986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005988:	2300      	movs	r3, #0
 800598a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8005990:	f107 031c 	add.w	r3, r7, #28
 8005994:	4619      	mov	r1, r3
 8005996:	4858      	ldr	r0, [pc, #352]	; (8005af8 <HAL_UART_MspInit+0x1dc>)
 8005998:	f001 f9ba 	bl	8006d10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800599c:	4b57      	ldr	r3, [pc, #348]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 800599e:	4a58      	ldr	r2, [pc, #352]	; (8005b00 <HAL_UART_MspInit+0x1e4>)
 80059a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059a2:	4b56      	ldr	r3, [pc, #344]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059a8:	4b54      	ldr	r3, [pc, #336]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059ae:	4b53      	ldr	r3, [pc, #332]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059b0:	2280      	movs	r2, #128	; 0x80
 80059b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059b4:	4b51      	ldr	r3, [pc, #324]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059ba:	4b50      	ldr	r3, [pc, #320]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059bc:	2200      	movs	r2, #0
 80059be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80059c0:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059c6:	4b4d      	ldr	r3, [pc, #308]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80059cc:	484b      	ldr	r0, [pc, #300]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059ce:	f000 fd1d 	bl	800640c <HAL_DMA_Init>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80059d8:	f7fe fe78 	bl	80046cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a47      	ldr	r2, [pc, #284]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
 80059e2:	4a46      	ldr	r2, [pc, #280]	; (8005afc <HAL_UART_MspInit+0x1e0>)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80059e8:	2200      	movs	r2, #0
 80059ea:	2102      	movs	r1, #2
 80059ec:	2026      	movs	r0, #38	; 0x26
 80059ee:	f000 fcd6 	bl	800639e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059f2:	2026      	movs	r0, #38	; 0x26
 80059f4:	f000 fcef 	bl	80063d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80059f8:	e076      	b.n	8005ae8 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a41      	ldr	r2, [pc, #260]	; (8005b04 <HAL_UART_MspInit+0x1e8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d171      	bne.n	8005ae8 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a04:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4a3a      	ldr	r2, [pc, #232]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a0e:	61d3      	str	r3, [r2, #28]
 8005a10:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a1c:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	4a34      	ldr	r2, [pc, #208]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005a22:	f043 0310 	orr.w	r3, r3, #16
 8005a26:	6193      	str	r3, [r2, #24]
 8005a28:	4b32      	ldr	r3, [pc, #200]	; (8005af4 <HAL_UART_MspInit+0x1d8>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8005a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8005a42:	f107 031c 	add.w	r3, r7, #28
 8005a46:	4619      	mov	r1, r3
 8005a48:	482f      	ldr	r0, [pc, #188]	; (8005b08 <HAL_UART_MspInit+0x1ec>)
 8005a4a:	f001 f961 	bl	8006d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8005a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8005a5c:	f107 031c 	add.w	r3, r7, #28
 8005a60:	4619      	mov	r1, r3
 8005a62:	4829      	ldr	r0, [pc, #164]	; (8005b08 <HAL_UART_MspInit+0x1ec>)
 8005a64:	f001 f954 	bl	8006d10 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8005a68:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <HAL_UART_MspInit+0x1f0>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	f043 0310 	orr.w	r3, r3, #16
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a86:	4a21      	ldr	r2, [pc, #132]	; (8005b0c <HAL_UART_MspInit+0x1f0>)
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005a8c:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_UART_MspInit+0x1f8>)
 8005a90:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a92:	4b1f      	ldr	r3, [pc, #124]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aaa:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005abc:	4814      	ldr	r0, [pc, #80]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005abe:	f000 fca5 	bl	800640c <HAL_DMA_Init>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8005ac8:	f7fe fe00 	bl	80046cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ad2:	4a0f      	ldr	r2, [pc, #60]	; (8005b10 <HAL_UART_MspInit+0x1f4>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2102      	movs	r1, #2
 8005adc:	2027      	movs	r0, #39	; 0x27
 8005ade:	f000 fc5e 	bl	800639e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ae2:	2027      	movs	r0, #39	; 0x27
 8005ae4:	f000 fc77 	bl	80063d6 <HAL_NVIC_EnableIRQ>
}
 8005ae8:	bf00      	nop
 8005aea:	3730      	adds	r7, #48	; 0x30
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40004400 	.word	0x40004400
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40010800 	.word	0x40010800
 8005afc:	2000090c 	.word	0x2000090c
 8005b00:	4002006c 	.word	0x4002006c
 8005b04:	40004800 	.word	0x40004800
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	20000950 	.word	0x20000950
 8005b14:	40020030 	.word	0x40020030

08005b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005b1c:	e7fe      	b.n	8005b1c <NMI_Handler+0x4>

08005b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b22:	e7fe      	b.n	8005b22 <HardFault_Handler+0x4>

08005b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b28:	e7fe      	b.n	8005b28 <MemManage_Handler+0x4>

08005b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b2e:	e7fe      	b.n	8005b2e <BusFault_Handler+0x4>

08005b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b34:	e7fe      	b.n	8005b34 <UsageFault_Handler+0x4>

08005b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b36:	b480      	push	{r7}
 8005b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b5e:	f000 fb07 	bl	8006170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005b6c:	4802      	ldr	r0, [pc, #8]	; (8005b78 <DMA1_Channel3_IRQHandler+0x10>)
 8005b6e:	f000 fe65 	bl	800683c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000950 	.word	0x20000950

08005b7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b80:	4802      	ldr	r0, [pc, #8]	; (8005b8c <DMA1_Channel6_IRQHandler+0x10>)
 8005b82:	f000 fe5b 	bl	800683c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	2000090c 	.word	0x2000090c

08005b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b94:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <USART2_IRQHandler+0x10>)
 8005b96:	f003 fd75 	bl	8009684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000884 	.word	0x20000884

08005ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005ba8:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <USART3_IRQHandler+0x10>)
 8005baa:	f003 fd6b 	bl	8009684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200008c8 	.word	0x200008c8

08005bb8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8005bbc:	4808      	ldr	r0, [pc, #32]	; (8005be0 <TIM6_IRQHandler+0x28>)
 8005bbe:	f7fc fea5 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8005bc2:	4808      	ldr	r0, [pc, #32]	; (8005be4 <TIM6_IRQHandler+0x2c>)
 8005bc4:	f7fc fea2 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8005bc8:	4807      	ldr	r0, [pc, #28]	; (8005be8 <TIM6_IRQHandler+0x30>)
 8005bca:	f7fc fe9f 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8005bce:	4807      	ldr	r0, [pc, #28]	; (8005bec <TIM6_IRQHandler+0x34>)
 8005bd0:	f7fc fe9c 	bl	800290c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005bd4:	4806      	ldr	r0, [pc, #24]	; (8005bf0 <TIM6_IRQHandler+0x38>)
 8005bd6:	f002 fdaf 	bl	8008738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000994 	.word	0x20000994
 8005be4:	200009d0 	.word	0x200009d0
 8005be8:	20000a0c 	.word	0x20000a0c
 8005bec:	20000a48 	.word	0x20000a48
 8005bf0:	200007f4 	.word	0x200007f4

08005bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	return 1;
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <_kill>:

int _kill(int pid, int sig)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005c0c:	f004 faaa 	bl	800a164 <__errno>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2216      	movs	r2, #22
 8005c14:	601a      	str	r2, [r3, #0]
	return -1;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <_exit>:

void _exit (int status)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffe7 	bl	8005c02 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005c34:	e7fe      	b.n	8005c34 <_exit+0x12>

08005c36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	e00a      	b.n	8005c5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c48:	f3af 8000 	nop.w
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	60ba      	str	r2, [r7, #8]
 8005c54:	b2ca      	uxtb	r2, r1
 8005c56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	dbf0      	blt.n	8005c48 <_read+0x12>
	}

return len;
 8005c66:	687b      	ldr	r3, [r7, #4]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e009      	b.n	8005c96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	60ba      	str	r2, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	3301      	adds	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	dbf1      	blt.n	8005c82 <_write+0x12>
	}
	return len;
 8005c9e:	687b      	ldr	r3, [r7, #4]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <_close>:

int _close(int file)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	return -1;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cce:	605a      	str	r2, [r3, #4]
	return 0;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <_isatty>:

int _isatty(int file)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	return 1;
 8005ce4:	2301      	movs	r3, #1
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
	return 0;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d10:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <_sbrk+0x5c>)
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <_sbrk+0x60>)
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d1c:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <_sbrk+0x64>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <_sbrk+0x64>)
 8005d26:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <_sbrk+0x68>)
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d2a:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <_sbrk+0x64>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d207      	bcs.n	8005d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d38:	f004 fa14 	bl	800a164 <__errno>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	220c      	movs	r2, #12
 8005d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e009      	b.n	8005d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <_sbrk+0x64>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <_sbrk+0x64>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <_sbrk+0x64>)
 8005d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	2000c000 	.word	0x2000c000
 8005d68:	00000400 	.word	0x00000400
 8005d6c:	20007fa4 	.word	0x20007fa4
 8005d70:	20007fc0 	.word	0x20007fc0

08005d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <go_Charge>:
extern Order *delivering[5];
extern uint8_t delivering_num;
extern XB_HandleTypeDef hxb;

void go_Charge(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
	Coordinate Beacon;
	Beacon = Get_nearest_Beacon();
 8005d86:	f000 f933 	bl	8005ff0 <Get_nearest_Beacon>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	607b      	str	r3, [r7, #4]
	GotoDestination(Beacon,1);
 8005d8e:	2101      	movs	r1, #1
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fe ff2f 	bl	8004bf4 <GotoDestination>
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <set_Beacons>:

void set_Beacons(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i < 3; i++){
 8005da6:	2300      	movs	r3, #0
 8005da8:	71fb      	strb	r3, [r7, #7]
 8005daa:	e00e      	b.n	8005dca <set_Beacons+0x2a>
		GotoDestination(want_allyBeacons[i], 1);
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <set_Beacons+0x3c>)
 8005db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	2101      	movs	r1, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe ff1b 	bl	8004bf4 <GotoDestination>
		huansic_xb_setBeacon(&hxb);
 8005dbe:	4808      	ldr	r0, [pc, #32]	; (8005de0 <set_Beacons+0x40>)
 8005dc0:	f7fd fc66 	bl	8003690 <huansic_xb_setBeacon>
	for(i = 0;i < 3; i++){
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	71fb      	strb	r3, [r7, #7]
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d9ed      	bls.n	8005dac <set_Beacons+0xc>
	}
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000bbc 	.word	0x20000bbc
 8005de0:	20000adc 	.word	0x20000adc

08005de4 <Cal_Battery_Coord>:

void Cal_Battery_Coord(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	71fb      	strb	r3, [r7, #7]
	if(Find_crash(32552, 2))
 8005dee:	2102      	movs	r1, #2
 8005df0:	f647 7028 	movw	r0, #32552	; 0x7f28
 8005df4:	f7fb fa00 	bl	80011f8 <Find_crash>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <Cal_Battery_Coord+0x36>
	{
		//set a signal
		want_allyBeacons[seted].x = 127;
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	4a42      	ldr	r2, [pc, #264]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e02:	217f      	movs	r1, #127	; 0x7f
 8005e04:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 40;
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	4a40      	ldr	r2, [pc, #256]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	2228      	movs	r2, #40	; 0x28
 8005e12:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	3301      	adds	r3, #1
 8005e18:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(32726, 2))
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	f647 70d6 	movw	r0, #32726	; 0x7fd6
 8005e20:	f7fb f9ea 	bl	80011f8 <Find_crash>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00d      	beq.n	8005e46 <Cal_Battery_Coord+0x62>
	{
		//set a signal
		want_allyBeacons[seted].x = 127;
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	4a37      	ldr	r2, [pc, #220]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e2e:	217f      	movs	r1, #127	; 0x7f
 8005e30:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 214;
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	4a35      	ldr	r2, [pc, #212]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	22d6      	movs	r2, #214	; 0xd6
 8005e3e:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	3301      	adds	r3, #1
 8005e44:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(10367, 2))
 8005e46:	2102      	movs	r1, #2
 8005e48:	f642 007f 	movw	r0, #10367	; 0x287f
 8005e4c:	f7fb f9d4 	bl	80011f8 <Find_crash>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <Cal_Battery_Coord+0x8e>
	{
		//set a signal
		want_allyBeacons[seted].x = 40;
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	4a2c      	ldr	r2, [pc, #176]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e5a:	2128      	movs	r1, #40	; 0x28
 8005e5c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 127;
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	227f      	movs	r2, #127	; 0x7f
 8005e6a:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	71fb      	strb	r3, [r7, #7]
	}
	if(seted != 3)
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d015      	beq.n	8005ea4 <Cal_Battery_Coord+0xc0>
	{
		if(Find_crash(54911, 2))
 8005e78:	2102      	movs	r1, #2
 8005e7a:	f24d 607f 	movw	r0, #54911	; 0xd67f
 8005e7e:	f7fb f9bb 	bl	80011f8 <Find_crash>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <Cal_Battery_Coord+0xc0>
		{
			//set a signal
			want_allyBeacons[seted].x = 214;
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	4a20      	ldr	r2, [pc, #128]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e8c:	21d6      	movs	r1, #214	; 0xd6
 8005e8e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			want_allyBeacons[seted].y = 127;
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	227f      	movs	r2, #127	; 0x7f
 8005e9c:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	71fb      	strb	r3, [r7, #7]
		}
	}
	uint8_t x_i = 127;
 8005ea4:	237f      	movs	r3, #127	; 0x7f
 8005ea6:	71bb      	strb	r3, [r7, #6]
	uint8_t y_i = 127;
 8005ea8:	237f      	movs	r3, #127	; 0x7f
 8005eaa:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005eac:	e026      	b.n	8005efc <Cal_Battery_Coord+0x118>
	{
		if(Find_crash(x_i * 256 + y_i, 2))
 8005eae:	79bb      	ldrb	r3, [r7, #6]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	797b      	ldrb	r3, [r7, #5]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4413      	add	r3, r2
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fb f999 	bl	80011f8 <Find_crash>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d011      	beq.n	8005ef0 <Cal_Battery_Coord+0x10c>
		{
			want_allyBeacons[seted].x = x_i;
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	79ba      	ldrb	r2, [r7, #6]
 8005ed0:	b211      	sxth	r1, r2
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005ed4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			want_allyBeacons[seted].y = y_i;
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	797a      	ldrb	r2, [r7, #5]
 8005edc:	b211      	sxth	r1, r2
 8005ede:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <Cal_Battery_Coord+0x128>)
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	460a      	mov	r2, r1
 8005ee6:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	3301      	adds	r3, #1
 8005eec:	71fb      	strb	r3, [r7, #7]
 8005eee:	e005      	b.n	8005efc <Cal_Battery_Coord+0x118>
		}
		else
		{
			x_i -= 5;
 8005ef0:	79bb      	ldrb	r3, [r7, #6]
 8005ef2:	3b05      	subs	r3, #5
 8005ef4:	71bb      	strb	r3, [r7, #6]
			y_i -= 5;
 8005ef6:	797b      	ldrb	r3, [r7, #5]
 8005ef8:	3b05      	subs	r3, #5
 8005efa:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d1d5      	bne.n	8005eae <Cal_Battery_Coord+0xca>
		}
	}
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000bbc 	.word	0x20000bbc

08005f10 <Get_packet>:

void Get_packet(Coordinate merchant)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	GotoDestination(merchant,1);
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fe fe6a 	bl	8004bf4 <GotoDestination>
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <Send_packet>:

void Send_packet(Coordinate consumer)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	GotoDestination(consumer,1);
 8005f30:	2101      	movs	r1, #1
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe fe5e 	bl	8004bf4 <GotoDestination>
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <Get_nearest_consumer>:

Coordinate Get_nearest_consumer(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f4a:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	733b      	strb	r3, [r7, #12]
 8005f54:	e02d      	b.n	8005fb2 <Get_nearest_consumer+0x72>
	{
		distance = abs(myCoord.x - delivering[i]->destCoord.x) + abs(myCoord.y - delivering[i]->destCoord.y);
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <Get_nearest_consumer+0xa4>)
 8005f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	7b3b      	ldrb	r3, [r7, #12]
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <Get_nearest_consumer+0xa8>)
 8005f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f6a:	1acb      	subs	r3, r1, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfb8      	it	lt
 8005f70:	425b      	neglt	r3, r3
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <Get_nearest_consumer+0xa4>)
 8005f76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	7b3b      	ldrb	r3, [r7, #12]
 8005f7e:	491a      	ldr	r1, [pc, #104]	; (8005fe8 <Get_nearest_consumer+0xa8>)
 8005f80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005f88:	1ac3      	subs	r3, r0, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfb8      	it	lt
 8005f8e:	425b      	neglt	r3, r3
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8005f98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	da03      	bge.n	8005fac <Get_nearest_consumer+0x6c>
			mindis = distance;
 8005fa4:	897b      	ldrh	r3, [r7, #10]
 8005fa6:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8005fa8:	7b3b      	ldrb	r3, [r7, #12]
 8005faa:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 8005fac:	7b3b      	ldrb	r3, [r7, #12]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	733b      	strb	r3, [r7, #12]
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <Get_nearest_consumer+0xac>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	7b3a      	ldrb	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d3cc      	bcc.n	8005f56 <Get_nearest_consumer+0x16>
		}
	}
	Coordinate nearest = delivering[minindex]->destCoord;
 8005fbc:	7b7b      	ldrb	r3, [r7, #13]
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	; (8005fe8 <Get_nearest_consumer+0xa8>)
 8005fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	603b      	str	r3, [r7, #0]
	return nearest;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	88ba      	ldrh	r2, [r7, #4]
 8005fd0:	f362 030f 	bfi	r3, r2, #0, #16
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	f362 431f 	bfi	r3, r2, #16, #16

}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	20000be0 	.word	0x20000be0
 8005fe8:	20000bc8 	.word	0x20000bc8
 8005fec:	20000bdc 	.word	0x20000bdc

08005ff0 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffa:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8006000:	2300      	movs	r3, #0
 8006002:	733b      	strb	r3, [r7, #12]
 8006004:	e02b      	b.n	800605e <Get_nearest_Beacon+0x6e>
	{

		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <Get_nearest_Beacon+0xa0>)
 8006008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800600c:	4619      	mov	r1, r3
 800600e:	7b3b      	ldrb	r3, [r7, #12]
 8006010:	4a20      	ldr	r2, [pc, #128]	; (8006094 <Get_nearest_Beacon+0xa4>)
 8006012:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8006016:	1acb      	subs	r3, r1, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfb8      	it	lt
 800601c:	425b      	neglt	r3, r3
 800601e:	b29a      	uxth	r2, r3
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <Get_nearest_Beacon+0xa0>)
 8006022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006026:	4618      	mov	r0, r3
 8006028:	7b3b      	ldrb	r3, [r7, #12]
 800602a:	491a      	ldr	r1, [pc, #104]	; (8006094 <Get_nearest_Beacon+0xa4>)
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006034:	1ac3      	subs	r3, r0, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfb8      	it	lt
 800603a:	425b      	neglt	r3, r3
 800603c:	b29b      	uxth	r3, r3
 800603e:	4413      	add	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8006044:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800604c:	429a      	cmp	r2, r3
 800604e:	da03      	bge.n	8006058 <Get_nearest_Beacon+0x68>
			mindis = distance;
 8006050:	897b      	ldrh	r3, [r7, #10]
 8006052:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8006054:	7b3b      	ldrb	r3, [r7, #12]
 8006056:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8006058:	7b3b      	ldrb	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	733b      	strb	r3, [r7, #12]
 800605e:	7b3b      	ldrb	r3, [r7, #12]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d9d0      	bls.n	8006006 <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 8006064:	7b7b      	ldrb	r3, [r7, #13]
 8006066:	490b      	ldr	r1, [pc, #44]	; (8006094 <Get_nearest_Beacon+0xa4>)
 8006068:	463a      	mov	r2, r7
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	6010      	str	r0, [r2, #0]
	return nearest;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	2300      	movs	r3, #0
 8006078:	88ba      	ldrh	r2, [r7, #4]
 800607a:	f362 030f 	bfi	r3, r2, #0, #16
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000be0 	.word	0x20000be0
 8006094:	20000ba4 	.word	0x20000ba4

08006098 <Reset_Handler>:
 8006098:	480c      	ldr	r0, [pc, #48]	; (80060cc <LoopFillZerobss+0x12>)
 800609a:	490d      	ldr	r1, [pc, #52]	; (80060d0 <LoopFillZerobss+0x16>)
 800609c:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <LoopFillZerobss+0x1a>)
 800609e:	2300      	movs	r3, #0
 80060a0:	e002      	b.n	80060a8 <LoopCopyDataInit>

080060a2 <CopyDataInit>:
 80060a2:	58d4      	ldr	r4, [r2, r3]
 80060a4:	50c4      	str	r4, [r0, r3]
 80060a6:	3304      	adds	r3, #4

080060a8 <LoopCopyDataInit>:
 80060a8:	18c4      	adds	r4, r0, r3
 80060aa:	428c      	cmp	r4, r1
 80060ac:	d3f9      	bcc.n	80060a2 <CopyDataInit>
 80060ae:	4a0a      	ldr	r2, [pc, #40]	; (80060d8 <LoopFillZerobss+0x1e>)
 80060b0:	4c0a      	ldr	r4, [pc, #40]	; (80060dc <LoopFillZerobss+0x22>)
 80060b2:	2300      	movs	r3, #0
 80060b4:	e001      	b.n	80060ba <LoopFillZerobss>

080060b6 <FillZerobss>:
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	3204      	adds	r2, #4

080060ba <LoopFillZerobss>:
 80060ba:	42a2      	cmp	r2, r4
 80060bc:	d3fb      	bcc.n	80060b6 <FillZerobss>
 80060be:	f7ff fe59 	bl	8005d74 <SystemInit>
 80060c2:	f004 f867 	bl	800a194 <__libc_init_array>
 80060c6:	f7fd fb7d 	bl	80037c4 <main>
 80060ca:	4770      	bx	lr
 80060cc:	20000000 	.word	0x20000000
 80060d0:	2000007c 	.word	0x2000007c
 80060d4:	0800d2a8 	.word	0x0800d2a8
 80060d8:	2000007c 	.word	0x2000007c
 80060dc:	20007fbc 	.word	0x20007fbc

080060e0 <ADC1_2_IRQHandler>:
 80060e0:	e7fe      	b.n	80060e0 <ADC1_2_IRQHandler>
	...

080060e4 <HAL_Init>:
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	4b08      	ldr	r3, [pc, #32]	; (800610c <HAL_Init+0x28>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a07      	ldr	r2, [pc, #28]	; (800610c <HAL_Init+0x28>)
 80060ee:	f043 0310 	orr.w	r3, r3, #16
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	2003      	movs	r0, #3
 80060f6:	f000 f947 	bl	8006388 <HAL_NVIC_SetPriorityGrouping>
 80060fa:	200f      	movs	r0, #15
 80060fc:	f000 f808 	bl	8006110 <HAL_InitTick>
 8006100:	f7ff f9f6 	bl	80054f0 <HAL_MspInit>
 8006104:	2300      	movs	r3, #0
 8006106:	4618      	mov	r0, r3
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40022000 	.word	0x40022000

08006110 <HAL_InitTick>:
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	4b12      	ldr	r3, [pc, #72]	; (8006164 <HAL_InitTick+0x54>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4b12      	ldr	r3, [pc, #72]	; (8006168 <HAL_InitTick+0x58>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4619      	mov	r1, r3
 8006122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006126:	fbb3 f3f1 	udiv	r3, r3, r1
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f95f 	bl	80063f2 <HAL_SYSTICK_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_InitTick+0x2e>
 800613a:	2301      	movs	r3, #1
 800613c:	e00e      	b.n	800615c <HAL_InitTick+0x4c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d80a      	bhi.n	800615a <HAL_InitTick+0x4a>
 8006144:	2200      	movs	r2, #0
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	f000 f927 	bl	800639e <HAL_NVIC_SetPriority>
 8006150:	4a06      	ldr	r2, [pc, #24]	; (800616c <HAL_InitTick+0x5c>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <HAL_InitTick+0x4c>
 800615a:	2301      	movs	r3, #1
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2000000c 	.word	0x2000000c
 8006168:	20000014 	.word	0x20000014
 800616c:	20000010 	.word	0x20000010

08006170 <HAL_IncTick>:
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <HAL_IncTick+0x1c>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <HAL_IncTick+0x20>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4413      	add	r3, r2
 8006180:	4a03      	ldr	r2, [pc, #12]	; (8006190 <HAL_IncTick+0x20>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr
 800618c:	20000014 	.word	0x20000014
 8006190:	20007fa8 	.word	0x20007fa8

08006194 <HAL_GetTick>:
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <HAL_GetTick+0x10>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	20007fa8 	.word	0x20007fa8

080061a8 <HAL_Delay>:
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	f7ff fff0 	bl	8006194 <HAL_GetTick>
 80061b4:	60b8      	str	r0, [r7, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d005      	beq.n	80061ce <HAL_Delay+0x26>
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_Delay+0x44>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	bf00      	nop
 80061d0:	f7ff ffe0 	bl	8006194 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d8f7      	bhi.n	80061d0 <HAL_Delay+0x28>
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000014 	.word	0x20000014

080061f0 <__NVIC_SetPriorityGrouping>:
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <__NVIC_SetPriorityGrouping+0x44>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800620c:	4013      	ands	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	021a      	lsls	r2, r3, #8
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800621c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	4a04      	ldr	r2, [pc, #16]	; (8006234 <__NVIC_SetPriorityGrouping+0x44>)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	60d3      	str	r3, [r2, #12]
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	e000ed00 	.word	0xe000ed00

08006238 <__NVIC_GetPriorityGrouping>:
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <__NVIC_GetPriorityGrouping+0x18>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	e000ed00 	.word	0xe000ed00

08006254 <__NVIC_EnableIRQ>:
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
 800625e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006262:	2b00      	cmp	r3, #0
 8006264:	db0b      	blt.n	800627e <__NVIC_EnableIRQ+0x2a>
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	f003 021f 	and.w	r2, r3, #31
 800626c:	4906      	ldr	r1, [pc, #24]	; (8006288 <__NVIC_EnableIRQ+0x34>)
 800626e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2001      	movs	r0, #1
 8006276:	fa00 f202 	lsl.w	r2, r0, r2
 800627a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr
 8006288:	e000e100 	.word	0xe000e100

0800628c <__NVIC_SetPriority>:
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	6039      	str	r1, [r7, #0]
 8006296:	71fb      	strb	r3, [r7, #7]
 8006298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629c:	2b00      	cmp	r3, #0
 800629e:	db0a      	blt.n	80062b6 <__NVIC_SetPriority+0x2a>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	490c      	ldr	r1, [pc, #48]	; (80062d8 <__NVIC_SetPriority+0x4c>)
 80062a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062aa:	0112      	lsls	r2, r2, #4
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	440b      	add	r3, r1
 80062b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80062b4:	e00a      	b.n	80062cc <__NVIC_SetPriority+0x40>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4908      	ldr	r1, [pc, #32]	; (80062dc <__NVIC_SetPriority+0x50>)
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	3b04      	subs	r3, #4
 80062c4:	0112      	lsls	r2, r2, #4
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	440b      	add	r3, r1
 80062ca:	761a      	strb	r2, [r3, #24]
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	e000e100 	.word	0xe000e100
 80062dc:	e000ed00 	.word	0xe000ed00

080062e0 <NVIC_EncodePriority>:
 80062e0:	b480      	push	{r7}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f1c3 0307 	rsb	r3, r3, #7
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf28      	it	cs
 80062fe:	2304      	movcs	r3, #4
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3304      	adds	r3, #4
 8006306:	2b06      	cmp	r3, #6
 8006308:	d902      	bls.n	8006310 <NVIC_EncodePriority+0x30>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3b03      	subs	r3, #3
 800630e:	e000      	b.n	8006312 <NVIC_EncodePriority+0x32>
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43da      	mvns	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	401a      	ands	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	409a      	lsls	r2, r3
 8006328:	f04f 31ff 	mov.w	r1, #4294967295
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	fa01 f303 	lsl.w	r3, r1, r3
 8006332:	43d9      	mvns	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	400b      	ands	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	4618      	mov	r0, r3
 800633c:	3724      	adds	r7, #36	; 0x24
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <SysTick_Config>:
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3b01      	subs	r3, #1
 8006350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006354:	d301      	bcc.n	800635a <SysTick_Config+0x16>
 8006356:	2301      	movs	r3, #1
 8006358:	e00f      	b.n	800637a <SysTick_Config+0x36>
 800635a:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <SysTick_Config+0x40>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3b01      	subs	r3, #1
 8006360:	6053      	str	r3, [r2, #4]
 8006362:	210f      	movs	r1, #15
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	f7ff ff90 	bl	800628c <__NVIC_SetPriority>
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <SysTick_Config+0x40>)
 800636e:	2200      	movs	r2, #0
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	4b04      	ldr	r3, [pc, #16]	; (8006384 <SysTick_Config+0x40>)
 8006374:	2207      	movs	r2, #7
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000e010 	.word	0xe000e010

08006388 <HAL_NVIC_SetPriorityGrouping>:
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff2d 	bl	80061f0 <__NVIC_SetPriorityGrouping>
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_NVIC_SetPriority>:
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	4603      	mov	r3, r0
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	73fb      	strb	r3, [r7, #15]
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	f7ff ff42 	bl	8006238 <__NVIC_GetPriorityGrouping>
 80063b4:	6178      	str	r0, [r7, #20]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f7ff ff90 	bl	80062e0 <NVIC_EncodePriority>
 80063c0:	4602      	mov	r2, r0
 80063c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff ff5f 	bl	800628c <__NVIC_SetPriority>
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_NVIC_EnableIRQ>:
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	71fb      	strb	r3, [r7, #7]
 80063e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff ff35 	bl	8006254 <__NVIC_EnableIRQ>
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_SYSTICK_Config>:
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ffa2 	bl	8006344 <SysTick_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <HAL_DMA_Init>:
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_DMA_Init+0x16>
 800641e:	2301      	movs	r3, #1
 8006420:	e059      	b.n	80064d6 <HAL_DMA_Init+0xca>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <HAL_DMA_Init+0xd4>)
 800642a:	429a      	cmp	r2, r3
 800642c:	d80f      	bhi.n	800644e <HAL_DMA_Init+0x42>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	4b2b      	ldr	r3, [pc, #172]	; (80064e4 <HAL_DMA_Init+0xd8>)
 8006436:	4413      	add	r3, r2
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <HAL_DMA_Init+0xdc>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	009a      	lsls	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	641a      	str	r2, [r3, #64]	; 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a28      	ldr	r2, [pc, #160]	; (80064ec <HAL_DMA_Init+0xe0>)
 800644a:	63da      	str	r2, [r3, #60]	; 0x3c
 800644c:	e00e      	b.n	800646c <HAL_DMA_Init+0x60>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <HAL_DMA_Init+0xe4>)
 8006456:	4413      	add	r3, r2
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <HAL_DMA_Init+0xdc>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	091b      	lsrs	r3, r3, #4
 8006460:	009a      	lsls	r2, r3, #2
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <HAL_DMA_Init+0xe8>)
 800646a:	63da      	str	r2, [r3, #60]	; 0x3c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006482:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2020 	strb.w	r2, [r3, #32]
 80064d4:	2300      	movs	r3, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	40020407 	.word	0x40020407
 80064e4:	bffdfff8 	.word	0xbffdfff8
 80064e8:	cccccccd 	.word	0xcccccccd
 80064ec:	40020000 	.word	0x40020000
 80064f0:	bffdfbf8 	.word	0xbffdfbf8
 80064f4:	40020400 	.word	0x40020400

080064f8 <HAL_DMA_Start_IT>:
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_DMA_Start_IT+0x20>
 8006514:	2302      	movs	r3, #2
 8006516:	e04a      	b.n	80065ae <HAL_DMA_Start_IT+0xb6>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2020 	strb.w	r2, [r3, #32]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006526:	2b01      	cmp	r3, #1
 8006528:	d13a      	bne.n	80065a0 <HAL_DMA_Start_IT+0xa8>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fbb0 	bl	8006cb4 <DMA_SetConfig>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <HAL_DMA_Start_IT+0x76>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 020e 	orr.w	r2, r2, #14
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e00f      	b.n	800658e <HAL_DMA_Start_IT+0x96>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0204 	bic.w	r2, r2, #4
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 020a 	orr.w	r2, r2, #10
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e005      	b.n	80065ac <HAL_DMA_Start_IT+0xb4>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2020 	strb.w	r2, [r3, #32]
 80065a8:	2302      	movs	r3, #2
 80065aa:	75fb      	strb	r3, [r7, #23]
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_DMA_Abort>:
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d008      	beq.n	80065de <HAL_DMA_Abort+0x28>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2204      	movs	r2, #4
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2020 	strb.w	r2, [r3, #32]
 80065da:	2301      	movs	r3, #1
 80065dc:	e020      	b.n	8006620 <HAL_DMA_Abort+0x6a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 020e 	bic.w	r2, r2, #14
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0201 	bic.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	2101      	movs	r1, #1
 8006608:	fa01 f202 	lsl.w	r2, r1, r2
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2020 	strb.w	r2, [r3, #32]
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr
	...

0800662c <HAL_DMA_Abort_IT>:
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800663e:	2b02      	cmp	r3, #2
 8006640:	d005      	beq.n	800664e <HAL_DMA_Abort_IT+0x22>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2204      	movs	r2, #4
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	e0d6      	b.n	80067fc <HAL_DMA_Abort_IT+0x1d0>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 020e 	bic.w	r2, r2, #14
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	4b64      	ldr	r3, [pc, #400]	; (8006808 <HAL_DMA_Abort_IT+0x1dc>)
 8006676:	429a      	cmp	r2, r3
 8006678:	d958      	bls.n	800672c <HAL_DMA_Abort_IT+0x100>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a63      	ldr	r2, [pc, #396]	; (800680c <HAL_DMA_Abort_IT+0x1e0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d04f      	beq.n	8006724 <HAL_DMA_Abort_IT+0xf8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a61      	ldr	r2, [pc, #388]	; (8006810 <HAL_DMA_Abort_IT+0x1e4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d048      	beq.n	8006720 <HAL_DMA_Abort_IT+0xf4>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a60      	ldr	r2, [pc, #384]	; (8006814 <HAL_DMA_Abort_IT+0x1e8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d040      	beq.n	800671a <HAL_DMA_Abort_IT+0xee>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a5e      	ldr	r2, [pc, #376]	; (8006818 <HAL_DMA_Abort_IT+0x1ec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d038      	beq.n	8006714 <HAL_DMA_Abort_IT+0xe8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a5d      	ldr	r2, [pc, #372]	; (800681c <HAL_DMA_Abort_IT+0x1f0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d030      	beq.n	800670e <HAL_DMA_Abort_IT+0xe2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a5b      	ldr	r2, [pc, #364]	; (8006820 <HAL_DMA_Abort_IT+0x1f4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d028      	beq.n	8006708 <HAL_DMA_Abort_IT+0xdc>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a53      	ldr	r2, [pc, #332]	; (8006808 <HAL_DMA_Abort_IT+0x1dc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d020      	beq.n	8006702 <HAL_DMA_Abort_IT+0xd6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a57      	ldr	r2, [pc, #348]	; (8006824 <HAL_DMA_Abort_IT+0x1f8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d019      	beq.n	80066fe <HAL_DMA_Abort_IT+0xd2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a56      	ldr	r2, [pc, #344]	; (8006828 <HAL_DMA_Abort_IT+0x1fc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d012      	beq.n	80066fa <HAL_DMA_Abort_IT+0xce>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a54      	ldr	r2, [pc, #336]	; (800682c <HAL_DMA_Abort_IT+0x200>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00a      	beq.n	80066f4 <HAL_DMA_Abort_IT+0xc8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a53      	ldr	r2, [pc, #332]	; (8006830 <HAL_DMA_Abort_IT+0x204>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d102      	bne.n	80066ee <HAL_DMA_Abort_IT+0xc2>
 80066e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ec:	e01b      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 80066ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066f2:	e018      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 80066f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066f8:	e015      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 80066fa:	2310      	movs	r3, #16
 80066fc:	e013      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 80066fe:	2301      	movs	r3, #1
 8006700:	e011      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 8006702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006706:	e00e      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 8006708:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800670c:	e00b      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 800670e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006712:	e008      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 8006714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006718:	e005      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 800671a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671e:	e002      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 8006720:	2310      	movs	r3, #16
 8006722:	e000      	b.n	8006726 <HAL_DMA_Abort_IT+0xfa>
 8006724:	2301      	movs	r3, #1
 8006726:	4a43      	ldr	r2, [pc, #268]	; (8006834 <HAL_DMA_Abort_IT+0x208>)
 8006728:	6053      	str	r3, [r2, #4]
 800672a:	e057      	b.n	80067dc <HAL_DMA_Abort_IT+0x1b0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a36      	ldr	r2, [pc, #216]	; (800680c <HAL_DMA_Abort_IT+0x1e0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d04f      	beq.n	80067d6 <HAL_DMA_Abort_IT+0x1aa>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a35      	ldr	r2, [pc, #212]	; (8006810 <HAL_DMA_Abort_IT+0x1e4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d048      	beq.n	80067d2 <HAL_DMA_Abort_IT+0x1a6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a33      	ldr	r2, [pc, #204]	; (8006814 <HAL_DMA_Abort_IT+0x1e8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d040      	beq.n	80067cc <HAL_DMA_Abort_IT+0x1a0>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a32      	ldr	r2, [pc, #200]	; (8006818 <HAL_DMA_Abort_IT+0x1ec>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d038      	beq.n	80067c6 <HAL_DMA_Abort_IT+0x19a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a30      	ldr	r2, [pc, #192]	; (800681c <HAL_DMA_Abort_IT+0x1f0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d030      	beq.n	80067c0 <HAL_DMA_Abort_IT+0x194>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <HAL_DMA_Abort_IT+0x1f4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d028      	beq.n	80067ba <HAL_DMA_Abort_IT+0x18e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <HAL_DMA_Abort_IT+0x1dc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d020      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x188>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <HAL_DMA_Abort_IT+0x1f8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d019      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x184>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a29      	ldr	r2, [pc, #164]	; (8006828 <HAL_DMA_Abort_IT+0x1fc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d012      	beq.n	80067ac <HAL_DMA_Abort_IT+0x180>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a28      	ldr	r2, [pc, #160]	; (800682c <HAL_DMA_Abort_IT+0x200>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00a      	beq.n	80067a6 <HAL_DMA_Abort_IT+0x17a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a26      	ldr	r2, [pc, #152]	; (8006830 <HAL_DMA_Abort_IT+0x204>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d102      	bne.n	80067a0 <HAL_DMA_Abort_IT+0x174>
 800679a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800679e:	e01b      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067a4:	e018      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067aa:	e015      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067ac:	2310      	movs	r3, #16
 80067ae:	e013      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e011      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b8:	e00e      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067be:	e00b      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067c4:	e008      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ca:	e005      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d0:	e002      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067d2:	2310      	movs	r3, #16
 80067d4:	e000      	b.n	80067d8 <HAL_DMA_Abort_IT+0x1ac>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4a17      	ldr	r2, [pc, #92]	; (8006838 <HAL_DMA_Abort_IT+0x20c>)
 80067da:	6053      	str	r3, [r2, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2020 	strb.w	r2, [r3, #32]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_DMA_Abort_IT+0x1d0>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40020080 	.word	0x40020080
 800680c:	40020008 	.word	0x40020008
 8006810:	4002001c 	.word	0x4002001c
 8006814:	40020030 	.word	0x40020030
 8006818:	40020044 	.word	0x40020044
 800681c:	40020058 	.word	0x40020058
 8006820:	4002006c 	.word	0x4002006c
 8006824:	40020408 	.word	0x40020408
 8006828:	4002041c 	.word	0x4002041c
 800682c:	40020430 	.word	0x40020430
 8006830:	40020444 	.word	0x40020444
 8006834:	40020400 	.word	0x40020400
 8006838:	40020000 	.word	0x40020000

0800683c <HAL_DMA_IRQHandler>:
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60bb      	str	r3, [r7, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	2204      	movs	r2, #4
 800685a:	409a      	lsls	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80f1 	beq.w	8006a48 <HAL_DMA_IRQHandler+0x20c>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80eb 	beq.w	8006a48 <HAL_DMA_IRQHandler+0x20c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <HAL_DMA_IRQHandler+0x54>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0204 	bic.w	r2, r2, #4
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <HAL_DMA_IRQHandler+0x1d8>)
 8006898:	429a      	cmp	r2, r3
 800689a:	d958      	bls.n	800694e <HAL_DMA_IRQHandler+0x112>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5d      	ldr	r2, [pc, #372]	; (8006a18 <HAL_DMA_IRQHandler+0x1dc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04f      	beq.n	8006946 <HAL_DMA_IRQHandler+0x10a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a5c      	ldr	r2, [pc, #368]	; (8006a1c <HAL_DMA_IRQHandler+0x1e0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d048      	beq.n	8006942 <HAL_DMA_IRQHandler+0x106>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5a      	ldr	r2, [pc, #360]	; (8006a20 <HAL_DMA_IRQHandler+0x1e4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d040      	beq.n	800693c <HAL_DMA_IRQHandler+0x100>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a59      	ldr	r2, [pc, #356]	; (8006a24 <HAL_DMA_IRQHandler+0x1e8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d038      	beq.n	8006936 <HAL_DMA_IRQHandler+0xfa>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a57      	ldr	r2, [pc, #348]	; (8006a28 <HAL_DMA_IRQHandler+0x1ec>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d030      	beq.n	8006930 <HAL_DMA_IRQHandler+0xf4>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a56      	ldr	r2, [pc, #344]	; (8006a2c <HAL_DMA_IRQHandler+0x1f0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d028      	beq.n	800692a <HAL_DMA_IRQHandler+0xee>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a4d      	ldr	r2, [pc, #308]	; (8006a14 <HAL_DMA_IRQHandler+0x1d8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d020      	beq.n	8006924 <HAL_DMA_IRQHandler+0xe8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a52      	ldr	r2, [pc, #328]	; (8006a30 <HAL_DMA_IRQHandler+0x1f4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d019      	beq.n	8006920 <HAL_DMA_IRQHandler+0xe4>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a50      	ldr	r2, [pc, #320]	; (8006a34 <HAL_DMA_IRQHandler+0x1f8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d012      	beq.n	800691c <HAL_DMA_IRQHandler+0xe0>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a4f      	ldr	r2, [pc, #316]	; (8006a38 <HAL_DMA_IRQHandler+0x1fc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00a      	beq.n	8006916 <HAL_DMA_IRQHandler+0xda>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4d      	ldr	r2, [pc, #308]	; (8006a3c <HAL_DMA_IRQHandler+0x200>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d102      	bne.n	8006910 <HAL_DMA_IRQHandler+0xd4>
 800690a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800690e:	e01b      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006914:	e018      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800691a:	e015      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 800691c:	2340      	movs	r3, #64	; 0x40
 800691e:	e013      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006920:	2304      	movs	r3, #4
 8006922:	e011      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006924:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006928:	e00e      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 800692a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800692e:	e00b      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006930:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006934:	e008      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800693a:	e005      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 800693c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006940:	e002      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006942:	2340      	movs	r3, #64	; 0x40
 8006944:	e000      	b.n	8006948 <HAL_DMA_IRQHandler+0x10c>
 8006946:	2304      	movs	r3, #4
 8006948:	4a3d      	ldr	r2, [pc, #244]	; (8006a40 <HAL_DMA_IRQHandler+0x204>)
 800694a:	6053      	str	r3, [r2, #4]
 800694c:	e057      	b.n	80069fe <HAL_DMA_IRQHandler+0x1c2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a31      	ldr	r2, [pc, #196]	; (8006a18 <HAL_DMA_IRQHandler+0x1dc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d04f      	beq.n	80069f8 <HAL_DMA_IRQHandler+0x1bc>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a2f      	ldr	r2, [pc, #188]	; (8006a1c <HAL_DMA_IRQHandler+0x1e0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d048      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x1b8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2e      	ldr	r2, [pc, #184]	; (8006a20 <HAL_DMA_IRQHandler+0x1e4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d040      	beq.n	80069ee <HAL_DMA_IRQHandler+0x1b2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <HAL_DMA_IRQHandler+0x1e8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d038      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x1ac>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2b      	ldr	r2, [pc, #172]	; (8006a28 <HAL_DMA_IRQHandler+0x1ec>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d030      	beq.n	80069e2 <HAL_DMA_IRQHandler+0x1a6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a29      	ldr	r2, [pc, #164]	; (8006a2c <HAL_DMA_IRQHandler+0x1f0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d028      	beq.n	80069dc <HAL_DMA_IRQHandler+0x1a0>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <HAL_DMA_IRQHandler+0x1d8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d020      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x19a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <HAL_DMA_IRQHandler+0x1f4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d019      	beq.n	80069d2 <HAL_DMA_IRQHandler+0x196>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <HAL_DMA_IRQHandler+0x1f8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d012      	beq.n	80069ce <HAL_DMA_IRQHandler+0x192>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_DMA_IRQHandler+0x1fc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00a      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x18c>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <HAL_DMA_IRQHandler+0x200>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d102      	bne.n	80069c2 <HAL_DMA_IRQHandler+0x186>
 80069bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069c0:	e01b      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069c6:	e018      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069cc:	e015      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	e013      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e011      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80069da:	e00e      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069e0:	e00b      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069e6:	e008      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069ec:	e005      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f2:	e002      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	e000      	b.n	80069fa <HAL_DMA_IRQHandler+0x1be>
 80069f8:	2304      	movs	r3, #4
 80069fa:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <HAL_DMA_IRQHandler+0x208>)
 80069fc:	6053      	str	r3, [r2, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8136 	beq.w	8006c74 <HAL_DMA_IRQHandler+0x438>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
 8006a10:	e130      	b.n	8006c74 <HAL_DMA_IRQHandler+0x438>
 8006a12:	bf00      	nop
 8006a14:	40020080 	.word	0x40020080
 8006a18:	40020008 	.word	0x40020008
 8006a1c:	4002001c 	.word	0x4002001c
 8006a20:	40020030 	.word	0x40020030
 8006a24:	40020044 	.word	0x40020044
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	4002006c 	.word	0x4002006c
 8006a30:	40020408 	.word	0x40020408
 8006a34:	4002041c 	.word	0x4002041c
 8006a38:	40020430 	.word	0x40020430
 8006a3c:	40020444 	.word	0x40020444
 8006a40:	40020400 	.word	0x40020400
 8006a44:	40020000 	.word	0x40020000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80dd 	beq.w	8006c14 <HAL_DMA_IRQHandler+0x3d8>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80d7 	beq.w	8006c14 <HAL_DMA_IRQHandler+0x3d8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <HAL_DMA_IRQHandler+0x250>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 020a 	bic.w	r2, r2, #10
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <HAL_DMA_IRQHandler+0x444>)
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d958      	bls.n	8006b4a <HAL_DMA_IRQHandler+0x30e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a79      	ldr	r2, [pc, #484]	; (8006c84 <HAL_DMA_IRQHandler+0x448>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d04f      	beq.n	8006b42 <HAL_DMA_IRQHandler+0x306>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a78      	ldr	r2, [pc, #480]	; (8006c88 <HAL_DMA_IRQHandler+0x44c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d048      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x302>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a76      	ldr	r2, [pc, #472]	; (8006c8c <HAL_DMA_IRQHandler+0x450>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d040      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x2fc>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a75      	ldr	r2, [pc, #468]	; (8006c90 <HAL_DMA_IRQHandler+0x454>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d038      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x2f6>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a73      	ldr	r2, [pc, #460]	; (8006c94 <HAL_DMA_IRQHandler+0x458>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d030      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x2f0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a72      	ldr	r2, [pc, #456]	; (8006c98 <HAL_DMA_IRQHandler+0x45c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d028      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x2ea>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a69      	ldr	r2, [pc, #420]	; (8006c80 <HAL_DMA_IRQHandler+0x444>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d020      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x2e4>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a6e      	ldr	r2, [pc, #440]	; (8006c9c <HAL_DMA_IRQHandler+0x460>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d019      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x2e0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a6c      	ldr	r2, [pc, #432]	; (8006ca0 <HAL_DMA_IRQHandler+0x464>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d012      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x2dc>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6b      	ldr	r2, [pc, #428]	; (8006ca4 <HAL_DMA_IRQHandler+0x468>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00a      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x2d6>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a69      	ldr	r2, [pc, #420]	; (8006ca8 <HAL_DMA_IRQHandler+0x46c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d102      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x2d0>
 8006b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b0a:	e01b      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b10:	e018      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b16:	e015      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b18:	2320      	movs	r3, #32
 8006b1a:	e013      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e011      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b24:	e00e      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b2a:	e00b      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b30:	e008      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b36:	e005      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b3c:	e002      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b3e:	2320      	movs	r3, #32
 8006b40:	e000      	b.n	8006b44 <HAL_DMA_IRQHandler+0x308>
 8006b42:	2302      	movs	r3, #2
 8006b44:	4a59      	ldr	r2, [pc, #356]	; (8006cac <HAL_DMA_IRQHandler+0x470>)
 8006b46:	6053      	str	r3, [r2, #4]
 8006b48:	e057      	b.n	8006bfa <HAL_DMA_IRQHandler+0x3be>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a4d      	ldr	r2, [pc, #308]	; (8006c84 <HAL_DMA_IRQHandler+0x448>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d04f      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x3b8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a4b      	ldr	r2, [pc, #300]	; (8006c88 <HAL_DMA_IRQHandler+0x44c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d048      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x3b4>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a4a      	ldr	r2, [pc, #296]	; (8006c8c <HAL_DMA_IRQHandler+0x450>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d040      	beq.n	8006bea <HAL_DMA_IRQHandler+0x3ae>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a48      	ldr	r2, [pc, #288]	; (8006c90 <HAL_DMA_IRQHandler+0x454>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d038      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x3a8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a47      	ldr	r2, [pc, #284]	; (8006c94 <HAL_DMA_IRQHandler+0x458>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d030      	beq.n	8006bde <HAL_DMA_IRQHandler+0x3a2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a45      	ldr	r2, [pc, #276]	; (8006c98 <HAL_DMA_IRQHandler+0x45c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d028      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x39c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3d      	ldr	r2, [pc, #244]	; (8006c80 <HAL_DMA_IRQHandler+0x444>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d020      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0x396>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a41      	ldr	r2, [pc, #260]	; (8006c9c <HAL_DMA_IRQHandler+0x460>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d019      	beq.n	8006bce <HAL_DMA_IRQHandler+0x392>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a40      	ldr	r2, [pc, #256]	; (8006ca0 <HAL_DMA_IRQHandler+0x464>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d012      	beq.n	8006bca <HAL_DMA_IRQHandler+0x38e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a3e      	ldr	r2, [pc, #248]	; (8006ca4 <HAL_DMA_IRQHandler+0x468>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00a      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x388>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a3d      	ldr	r2, [pc, #244]	; (8006ca8 <HAL_DMA_IRQHandler+0x46c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d102      	bne.n	8006bbe <HAL_DMA_IRQHandler+0x382>
 8006bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bbc:	e01b      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bc2:	e018      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc8:	e015      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bca:	2320      	movs	r3, #32
 8006bcc:	e013      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e011      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bd6:	e00e      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bdc:	e00b      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006be2:	e008      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006be8:	e005      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bee:	e002      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	e000      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x3ba>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	4a2e      	ldr	r2, [pc, #184]	; (8006cb0 <HAL_DMA_IRQHandler+0x474>)
 8006bf8:	6053      	str	r3, [r2, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2020 	strb.w	r2, [r3, #32]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d034      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x438>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
 8006c12:	e02f      	b.n	8006c74 <HAL_DMA_IRQHandler+0x438>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	2208      	movs	r2, #8
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d028      	beq.n	8006c76 <HAL_DMA_IRQHandler+0x43a>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d023      	beq.n	8006c76 <HAL_DMA_IRQHandler+0x43a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 020e 	bic.w	r2, r2, #14
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2101      	movs	r1, #1
 8006c48:	fa01 f202 	lsl.w	r2, r1, r2
 8006c4c:	605a      	str	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2020 	strb.w	r2, [r3, #32]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <HAL_DMA_IRQHandler+0x43a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40020080 	.word	0x40020080
 8006c84:	40020008 	.word	0x40020008
 8006c88:	4002001c 	.word	0x4002001c
 8006c8c:	40020030 	.word	0x40020030
 8006c90:	40020044 	.word	0x40020044
 8006c94:	40020058 	.word	0x40020058
 8006c98:	4002006c 	.word	0x4002006c
 8006c9c:	40020408 	.word	0x40020408
 8006ca0:	4002041c 	.word	0x4002041c
 8006ca4:	40020430 	.word	0x40020430
 8006ca8:	40020444 	.word	0x40020444
 8006cac:	40020400 	.word	0x40020400
 8006cb0:	40020000 	.word	0x40020000

08006cb4 <DMA_SetConfig>:
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	2101      	movs	r1, #1
 8006ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d108      	bne.n	8006cf4 <DMA_SetConfig+0x40>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	e007      	b.n	8006d04 <DMA_SetConfig+0x50>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	609a      	str	r2, [r3, #8]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	60da      	str	r2, [r3, #12]
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
	...

08006d10 <HAL_GPIO_Init>:
 8006d10:	b480      	push	{r7}
 8006d12:	b08b      	sub	sp, #44	; 0x2c
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1e:	2300      	movs	r3, #0
 8006d20:	623b      	str	r3, [r7, #32]
 8006d22:	e179      	b.n	8007018 <HAL_GPIO_Init+0x308>
 8006d24:	2201      	movs	r2, #1
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	4013      	ands	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	f040 8168 	bne.w	8007012 <HAL_GPIO_Init+0x302>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4a96      	ldr	r2, [pc, #600]	; (8006fa0 <HAL_GPIO_Init+0x290>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d05e      	beq.n	8006e0a <HAL_GPIO_Init+0xfa>
 8006d4c:	4a94      	ldr	r2, [pc, #592]	; (8006fa0 <HAL_GPIO_Init+0x290>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d875      	bhi.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006d52:	4a94      	ldr	r2, [pc, #592]	; (8006fa4 <HAL_GPIO_Init+0x294>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d058      	beq.n	8006e0a <HAL_GPIO_Init+0xfa>
 8006d58:	4a92      	ldr	r2, [pc, #584]	; (8006fa4 <HAL_GPIO_Init+0x294>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d86f      	bhi.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006d5e:	4a92      	ldr	r2, [pc, #584]	; (8006fa8 <HAL_GPIO_Init+0x298>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d052      	beq.n	8006e0a <HAL_GPIO_Init+0xfa>
 8006d64:	4a90      	ldr	r2, [pc, #576]	; (8006fa8 <HAL_GPIO_Init+0x298>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d869      	bhi.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006d6a:	4a90      	ldr	r2, [pc, #576]	; (8006fac <HAL_GPIO_Init+0x29c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04c      	beq.n	8006e0a <HAL_GPIO_Init+0xfa>
 8006d70:	4a8e      	ldr	r2, [pc, #568]	; (8006fac <HAL_GPIO_Init+0x29c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d863      	bhi.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006d76:	4a8e      	ldr	r2, [pc, #568]	; (8006fb0 <HAL_GPIO_Init+0x2a0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d046      	beq.n	8006e0a <HAL_GPIO_Init+0xfa>
 8006d7c:	4a8c      	ldr	r2, [pc, #560]	; (8006fb0 <HAL_GPIO_Init+0x2a0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d85d      	bhi.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006d82:	2b12      	cmp	r3, #18
 8006d84:	d82a      	bhi.n	8006ddc <HAL_GPIO_Init+0xcc>
 8006d86:	2b12      	cmp	r3, #18
 8006d88:	d859      	bhi.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <HAL_GPIO_Init+0x80>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006e0b 	.word	0x08006e0b
 8006d94:	08006de5 	.word	0x08006de5
 8006d98:	08006df7 	.word	0x08006df7
 8006d9c:	08006e39 	.word	0x08006e39
 8006da0:	08006e3f 	.word	0x08006e3f
 8006da4:	08006e3f 	.word	0x08006e3f
 8006da8:	08006e3f 	.word	0x08006e3f
 8006dac:	08006e3f 	.word	0x08006e3f
 8006db0:	08006e3f 	.word	0x08006e3f
 8006db4:	08006e3f 	.word	0x08006e3f
 8006db8:	08006e3f 	.word	0x08006e3f
 8006dbc:	08006e3f 	.word	0x08006e3f
 8006dc0:	08006e3f 	.word	0x08006e3f
 8006dc4:	08006e3f 	.word	0x08006e3f
 8006dc8:	08006e3f 	.word	0x08006e3f
 8006dcc:	08006e3f 	.word	0x08006e3f
 8006dd0:	08006e3f 	.word	0x08006e3f
 8006dd4:	08006ded 	.word	0x08006ded
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	4a75      	ldr	r2, [pc, #468]	; (8006fb4 <HAL_GPIO_Init+0x2a4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_GPIO_Init+0xfa>
 8006de2:	e02c      	b.n	8006e3e <HAL_GPIO_Init+0x12e>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	e029      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	3304      	adds	r3, #4
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	e024      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	623b      	str	r3, [r7, #32]
 8006dfe:	e01f      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	330c      	adds	r3, #12
 8006e06:	623b      	str	r3, [r7, #32]
 8006e08:	e01a      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <HAL_GPIO_Init+0x108>
 8006e12:	2304      	movs	r3, #4
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	e013      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d105      	bne.n	8006e2c <HAL_GPIO_Init+0x11c>
 8006e20:	2308      	movs	r3, #8
 8006e22:	623b      	str	r3, [r7, #32]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	611a      	str	r2, [r3, #16]
 8006e2a:	e009      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	623b      	str	r3, [r7, #32]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	615a      	str	r2, [r3, #20]
 8006e36:	e003      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	e000      	b.n	8006e40 <HAL_GPIO_Init+0x130>
 8006e3e:	bf00      	nop
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2bff      	cmp	r3, #255	; 0xff
 8006e44:	d801      	bhi.n	8006e4a <HAL_GPIO_Init+0x13a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	e001      	b.n	8006e4e <HAL_GPIO_Init+0x13e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2bff      	cmp	r3, #255	; 0xff
 8006e54:	d802      	bhi.n	8006e5c <HAL_GPIO_Init+0x14c>
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	e002      	b.n	8006e62 <HAL_GPIO_Init+0x152>
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	3b08      	subs	r3, #8
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	210f      	movs	r1, #15
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	6a39      	ldr	r1, [r7, #32]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 80c1 	beq.w	8007012 <HAL_GPIO_Init+0x302>
 8006e90:	4b49      	ldr	r3, [pc, #292]	; (8006fb8 <HAL_GPIO_Init+0x2a8>)
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	4a48      	ldr	r2, [pc, #288]	; (8006fb8 <HAL_GPIO_Init+0x2a8>)
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	6193      	str	r3, [r2, #24]
 8006e9c:	4b46      	ldr	r3, [pc, #280]	; (8006fb8 <HAL_GPIO_Init+0x2a8>)
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4a44      	ldr	r2, [pc, #272]	; (8006fbc <HAL_GPIO_Init+0x2ac>)
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	089b      	lsrs	r3, r3, #2
 8006eae:	3302      	adds	r3, #2
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	220f      	movs	r2, #15
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3c      	ldr	r2, [pc, #240]	; (8006fc0 <HAL_GPIO_Init+0x2b0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d01f      	beq.n	8006f14 <HAL_GPIO_Init+0x204>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a3b      	ldr	r2, [pc, #236]	; (8006fc4 <HAL_GPIO_Init+0x2b4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d019      	beq.n	8006f10 <HAL_GPIO_Init+0x200>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a3a      	ldr	r2, [pc, #232]	; (8006fc8 <HAL_GPIO_Init+0x2b8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d013      	beq.n	8006f0c <HAL_GPIO_Init+0x1fc>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a39      	ldr	r2, [pc, #228]	; (8006fcc <HAL_GPIO_Init+0x2bc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00d      	beq.n	8006f08 <HAL_GPIO_Init+0x1f8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <HAL_GPIO_Init+0x2c0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d007      	beq.n	8006f04 <HAL_GPIO_Init+0x1f4>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a37      	ldr	r2, [pc, #220]	; (8006fd4 <HAL_GPIO_Init+0x2c4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d101      	bne.n	8006f00 <HAL_GPIO_Init+0x1f0>
 8006efc:	2305      	movs	r3, #5
 8006efe:	e00a      	b.n	8006f16 <HAL_GPIO_Init+0x206>
 8006f00:	2306      	movs	r3, #6
 8006f02:	e008      	b.n	8006f16 <HAL_GPIO_Init+0x206>
 8006f04:	2304      	movs	r3, #4
 8006f06:	e006      	b.n	8006f16 <HAL_GPIO_Init+0x206>
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e004      	b.n	8006f16 <HAL_GPIO_Init+0x206>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e002      	b.n	8006f16 <HAL_GPIO_Init+0x206>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <HAL_GPIO_Init+0x206>
 8006f14:	2300      	movs	r3, #0
 8006f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f18:	f002 0203 	and.w	r2, r2, #3
 8006f1c:	0092      	lsls	r2, r2, #2
 8006f1e:	4093      	lsls	r3, r2
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	4925      	ldr	r1, [pc, #148]	; (8006fbc <HAL_GPIO_Init+0x2ac>)
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d006      	beq.n	8006f4e <HAL_GPIO_Init+0x23e>
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4924      	ldr	r1, [pc, #144]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	600b      	str	r3, [r1, #0]
 8006f4c:	e006      	b.n	8006f5c <HAL_GPIO_Init+0x24c>
 8006f4e:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	4920      	ldr	r1, [pc, #128]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <HAL_GPIO_Init+0x266>
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	491a      	ldr	r1, [pc, #104]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	604b      	str	r3, [r1, #4]
 8006f74:	e006      	b.n	8006f84 <HAL_GPIO_Init+0x274>
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	4916      	ldr	r1, [pc, #88]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	604b      	str	r3, [r1, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d025      	beq.n	8006fdc <HAL_GPIO_Init+0x2cc>
 8006f90:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	4910      	ldr	r1, [pc, #64]	; (8006fd8 <HAL_GPIO_Init+0x2c8>)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	608b      	str	r3, [r1, #8]
 8006f9c:	e025      	b.n	8006fea <HAL_GPIO_Init+0x2da>
 8006f9e:	bf00      	nop
 8006fa0:	10320000 	.word	0x10320000
 8006fa4:	10310000 	.word	0x10310000
 8006fa8:	10220000 	.word	0x10220000
 8006fac:	10210000 	.word	0x10210000
 8006fb0:	10120000 	.word	0x10120000
 8006fb4:	10110000 	.word	0x10110000
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	40010800 	.word	0x40010800
 8006fc4:	40010c00 	.word	0x40010c00
 8006fc8:	40011000 	.word	0x40011000
 8006fcc:	40011400 	.word	0x40011400
 8006fd0:	40011800 	.word	0x40011800
 8006fd4:	40011c00 	.word	0x40011c00
 8006fd8:	40010400 	.word	0x40010400
 8006fdc:	4b15      	ldr	r3, [pc, #84]	; (8007034 <HAL_GPIO_Init+0x324>)
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	4913      	ldr	r1, [pc, #76]	; (8007034 <HAL_GPIO_Init+0x324>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	608b      	str	r3, [r1, #8]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d006      	beq.n	8007004 <HAL_GPIO_Init+0x2f4>
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <HAL_GPIO_Init+0x324>)
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	490e      	ldr	r1, [pc, #56]	; (8007034 <HAL_GPIO_Init+0x324>)
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60cb      	str	r3, [r1, #12]
 8007002:	e006      	b.n	8007012 <HAL_GPIO_Init+0x302>
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <HAL_GPIO_Init+0x324>)
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	43db      	mvns	r3, r3
 800700c:	4909      	ldr	r1, [pc, #36]	; (8007034 <HAL_GPIO_Init+0x324>)
 800700e:	4013      	ands	r3, r2
 8007010:	60cb      	str	r3, [r1, #12]
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	3301      	adds	r3, #1
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	fa22 f303 	lsr.w	r3, r2, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	f47f ae7e 	bne.w	8006d24 <HAL_GPIO_Init+0x14>
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	372c      	adds	r7, #44	; 0x2c
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	40010400 	.word	0x40010400

08007038 <HAL_GPIO_WritePin>:
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	807b      	strh	r3, [r7, #2]
 8007044:	4613      	mov	r3, r2
 8007046:	707b      	strb	r3, [r7, #1]
 8007048:	787b      	ldrb	r3, [r7, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_GPIO_WritePin+0x1e>
 800704e:	887a      	ldrh	r2, [r7, #2]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]
 8007054:	e003      	b.n	800705e <HAL_GPIO_WritePin+0x26>
 8007056:	887b      	ldrh	r3, [r7, #2]
 8007058:	041a      	lsls	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	611a      	str	r2, [r3, #16]
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <HAL_I2C_Init>:
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_I2C_Init+0x12>
 8007076:	2301      	movs	r3, #1
 8007078:	e12b      	b.n	80072d2 <HAL_I2C_Init+0x26a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_I2C_Init+0x2c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fe fa60 	bl	8005554 <HAL_I2C_MspInit>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	; 0x24
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f000 fffc 	bl	80080c8 <HAL_RCC_GetPCLK1Freq>
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4a81      	ldr	r2, [pc, #516]	; (80072dc <HAL_I2C_Init+0x274>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d807      	bhi.n	80070ec <HAL_I2C_Init+0x84>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a80      	ldr	r2, [pc, #512]	; (80072e0 <HAL_I2C_Init+0x278>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	bf94      	ite	ls
 80070e4:	2301      	movls	r3, #1
 80070e6:	2300      	movhi	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e006      	b.n	80070fa <HAL_I2C_Init+0x92>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a7d      	ldr	r2, [pc, #500]	; (80072e4 <HAL_I2C_Init+0x27c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	bf94      	ite	ls
 80070f4:	2301      	movls	r3, #1
 80070f6:	2300      	movhi	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_I2C_Init+0x9a>
 80070fe:	2301      	movs	r3, #1
 8007100:	e0e7      	b.n	80072d2 <HAL_I2C_Init+0x26a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4a78      	ldr	r2, [pc, #480]	; (80072e8 <HAL_I2C_Init+0x280>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	0c9b      	lsrs	r3, r3, #18
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4a6a      	ldr	r2, [pc, #424]	; (80072dc <HAL_I2C_Init+0x274>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d802      	bhi.n	800713c <HAL_I2C_Init+0xd4>
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	3301      	adds	r3, #1
 800713a:	e009      	b.n	8007150 <HAL_I2C_Init+0xe8>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	4a69      	ldr	r2, [pc, #420]	; (80072ec <HAL_I2C_Init+0x284>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	099b      	lsrs	r3, r3, #6
 800714e:	3301      	adds	r3, #1
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	430b      	orrs	r3, r1
 8007156:	6213      	str	r3, [r2, #32]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	495c      	ldr	r1, [pc, #368]	; (80072dc <HAL_I2C_Init+0x274>)
 800716c:	428b      	cmp	r3, r1
 800716e:	d819      	bhi.n	80071a4 <HAL_I2C_Init+0x13c>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1e59      	subs	r1, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	fbb1 f3f3 	udiv	r3, r1, r3
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007184:	400b      	ands	r3, r1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_I2C_Init+0x138>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1e59      	subs	r1, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	fbb1 f3f3 	udiv	r3, r1, r3
 8007198:	3301      	adds	r3, #1
 800719a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800719e:	e051      	b.n	8007244 <HAL_I2C_Init+0x1dc>
 80071a0:	2304      	movs	r3, #4
 80071a2:	e04f      	b.n	8007244 <HAL_I2C_Init+0x1dc>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d111      	bne.n	80071d0 <HAL_I2C_Init+0x168>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	1e58      	subs	r0, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6859      	ldr	r1, [r3, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	440b      	add	r3, r1
 80071ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80071be:	3301      	adds	r3, #1
 80071c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bf0c      	ite	eq
 80071c8:	2301      	moveq	r3, #1
 80071ca:	2300      	movne	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e012      	b.n	80071f6 <HAL_I2C_Init+0x18e>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	1e58      	subs	r0, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6859      	ldr	r1, [r3, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	0099      	lsls	r1, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071e6:	3301      	adds	r3, #1
 80071e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_I2C_Init+0x196>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e022      	b.n	8007244 <HAL_I2C_Init+0x1dc>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10e      	bne.n	8007224 <HAL_I2C_Init+0x1bc>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1e58      	subs	r0, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6859      	ldr	r1, [r3, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	440b      	add	r3, r1
 8007214:	fbb0 f3f3 	udiv	r3, r0, r3
 8007218:	3301      	adds	r3, #1
 800721a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800721e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007222:	e00f      	b.n	8007244 <HAL_I2C_Init+0x1dc>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	1e58      	subs	r0, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6859      	ldr	r1, [r3, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	0099      	lsls	r1, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	fbb0 f3f3 	udiv	r3, r0, r3
 800723a:	3301      	adds	r3, #1
 800723c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	6809      	ldr	r1, [r1, #0]
 8007248:	4313      	orrs	r3, r2
 800724a:	61cb      	str	r3, [r1, #28]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69da      	ldr	r2, [r3, #28]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6911      	ldr	r1, [r2, #16]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68d2      	ldr	r2, [r2, #12]
 800727e:	4311      	orrs	r1, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	430b      	orrs	r3, r1
 8007286:	6093      	str	r3, [r2, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695a      	ldr	r2, [r3, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	2300      	movs	r3, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	000186a0 	.word	0x000186a0
 80072e0:	001e847f 	.word	0x001e847f
 80072e4:	003d08ff 	.word	0x003d08ff
 80072e8:	431bde83 	.word	0x431bde83
 80072ec:	10624dd3 	.word	0x10624dd3

080072f0 <HAL_I2C_Mem_Write>:
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	4608      	mov	r0, r1
 80072fa:	4611      	mov	r1, r2
 80072fc:	461a      	mov	r2, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	817b      	strh	r3, [r7, #10]
 8007302:	460b      	mov	r3, r1
 8007304:	813b      	strh	r3, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
 800730a:	f7fe ff43 	bl	8006194 <HAL_GetTick>
 800730e:	6178      	str	r0, [r7, #20]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b20      	cmp	r3, #32
 800731a:	f040 80d9 	bne.w	80074d0 <HAL_I2C_Mem_Write+0x1e0>
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	2319      	movs	r3, #25
 8007324:	2201      	movs	r2, #1
 8007326:	496d      	ldr	r1, [pc, #436]	; (80074dc <HAL_I2C_Mem_Write+0x1ec>)
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f971 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_I2C_Mem_Write+0x48>
 8007334:	2302      	movs	r3, #2
 8007336:	e0cc      	b.n	80074d2 <HAL_I2C_Mem_Write+0x1e2>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_I2C_Mem_Write+0x56>
 8007342:	2302      	movs	r3, #2
 8007344:	e0c5      	b.n	80074d2 <HAL_I2C_Mem_Write+0x1e2>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d007      	beq.n	800736c <HAL_I2C_Mem_Write+0x7c>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2221      	movs	r2, #33	; 0x21
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2240      	movs	r2, #64	; 0x40
 8007388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	625a      	str	r2, [r3, #36]	; 0x24
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800739c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a4d      	ldr	r2, [pc, #308]	; (80074e0 <HAL_I2C_Mem_Write+0x1f0>)
 80073ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80073ae:	88f8      	ldrh	r0, [r7, #6]
 80073b0:	893a      	ldrh	r2, [r7, #8]
 80073b2:	8979      	ldrh	r1, [r7, #10]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4603      	mov	r3, r0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f890 	bl	80074e4 <I2C_RequestMemoryWrite>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d052      	beq.n	8007470 <HAL_I2C_Mem_Write+0x180>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e081      	b.n	80074d2 <HAL_I2C_Mem_Write+0x1e2>
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f9f2 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00d      	beq.n	80073fa <HAL_I2C_Mem_Write+0x10a>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d107      	bne.n	80073f6 <HAL_I2C_Mem_Write+0x106>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	2301      	movs	r3, #1
 80073f8:	e06b      	b.n	80074d2 <HAL_I2C_Mem_Write+0x1e2>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	611a      	str	r2, [r3, #16]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	625a      	str	r2, [r3, #36]	; 0x24
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	851a      	strh	r2, [r3, #40]	; 0x28
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b04      	cmp	r3, #4
 8007436:	d11b      	bne.n	8007470 <HAL_I2C_Mem_Write+0x180>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743c:	2b00      	cmp	r3, #0
 800743e:	d017      	beq.n	8007470 <HAL_I2C_Mem_Write+0x180>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	851a      	strh	r2, [r3, #40]	; 0x28
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1aa      	bne.n	80073ce <HAL_I2C_Mem_Write+0xde>
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f9de 	bl	800783e <I2C_WaitOnBTFFlagUntilTimeout>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00d      	beq.n	80074a4 <HAL_I2C_Mem_Write+0x1b4>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	2b04      	cmp	r3, #4
 800748e:	d107      	bne.n	80074a0 <HAL_I2C_Mem_Write+0x1b0>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	2301      	movs	r3, #1
 80074a2:	e016      	b.n	80074d2 <HAL_I2C_Mem_Write+0x1e2>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <HAL_I2C_Mem_Write+0x1e2>
 80074d0:	2302      	movs	r3, #2
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	00100002 	.word	0x00100002
 80074e0:	ffff0000 	.word	0xffff0000

080074e4 <I2C_RequestMemoryWrite>:
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	461a      	mov	r2, r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	817b      	strh	r3, [r7, #10]
 80074f6:	460b      	mov	r3, r1
 80074f8:	813b      	strh	r3, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	2200      	movs	r2, #0
 8007516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f878 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <I2C_RequestMemoryWrite+0x5e>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007534:	d103      	bne.n	800753e <I2C_RequestMemoryWrite+0x5a>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
 800753e:	2303      	movs	r3, #3
 8007540:	e05f      	b.n	8007602 <I2C_RequestMemoryWrite+0x11e>
 8007542:	897b      	ldrh	r3, [r7, #10]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007550:	611a      	str	r2, [r3, #16]
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	6a3a      	ldr	r2, [r7, #32]
 8007556:	492d      	ldr	r1, [pc, #180]	; (800760c <I2C_RequestMemoryWrite+0x128>)
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f8b0 	bl	80076be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <I2C_RequestMemoryWrite+0x84>
 8007564:	2301      	movs	r3, #1
 8007566:	e04c      	b.n	8007602 <I2C_RequestMemoryWrite+0x11e>
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007580:	6a39      	ldr	r1, [r7, #32]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f91a 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00d      	beq.n	80075aa <I2C_RequestMemoryWrite+0xc6>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	2b04      	cmp	r3, #4
 8007594:	d107      	bne.n	80075a6 <I2C_RequestMemoryWrite+0xc2>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	2301      	movs	r3, #1
 80075a8:	e02b      	b.n	8007602 <I2C_RequestMemoryWrite+0x11e>
 80075aa:	88fb      	ldrh	r3, [r7, #6]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d105      	bne.n	80075bc <I2C_RequestMemoryWrite+0xd8>
 80075b0:	893b      	ldrh	r3, [r7, #8]
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	611a      	str	r2, [r3, #16]
 80075ba:	e021      	b.n	8007600 <I2C_RequestMemoryWrite+0x11c>
 80075bc:	893b      	ldrh	r3, [r7, #8]
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	611a      	str	r2, [r3, #16]
 80075ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075cc:	6a39      	ldr	r1, [r7, #32]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f8f4 	bl	80077bc <I2C_WaitOnTXEFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00d      	beq.n	80075f6 <I2C_RequestMemoryWrite+0x112>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d107      	bne.n	80075f2 <I2C_RequestMemoryWrite+0x10e>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	2301      	movs	r3, #1
 80075f4:	e005      	b.n	8007602 <I2C_RequestMemoryWrite+0x11e>
 80075f6:	893b      	ldrh	r3, [r7, #8]
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	611a      	str	r2, [r3, #16]
 8007600:	2300      	movs	r3, #0
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	00010002 	.word	0x00010002

08007610 <I2C_WaitOnFlagUntilTimeout>:
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	4613      	mov	r3, r2
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	e025      	b.n	800766e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d021      	beq.n	800766e <I2C_WaitOnFlagUntilTimeout+0x5e>
 800762a:	f7fe fdb3 	bl	8006194 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d302      	bcc.n	8007640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d116      	bne.n	800766e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	631a      	str	r2, [r3, #48]	; 0x30
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f043 0220 	orr.w	r2, r3, #32
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800766a:	2301      	movs	r3, #1
 800766c:	e023      	b.n	80076b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d10d      	bne.n	8007694 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	43da      	mvns	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4013      	ands	r3, r2
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf0c      	ite	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	2300      	movne	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	e00c      	b.n	80076ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	43da      	mvns	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4013      	ands	r3, r2
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d0b6      	beq.n	8007622 <I2C_WaitOnFlagUntilTimeout+0x12>
 80076b4:	2300      	movs	r3, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	e051      	b.n	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076dc:	d123      	bne.n	8007726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f6:	615a      	str	r2, [r3, #20]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f043 0204 	orr.w	r2, r3, #4
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007722:	2301      	movs	r3, #1
 8007724:	e046      	b.n	80077b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d021      	beq.n	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800772e:	f7fe fd31 	bl	8006194 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d302      	bcc.n	8007744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d116      	bne.n	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	631a      	str	r2, [r3, #48]	; 0x30
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f043 0220 	orr.w	r2, r3, #32
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	641a      	str	r2, [r3, #64]	; 0x40
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800776e:	2301      	movs	r3, #1
 8007770:	e020      	b.n	80077b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	0c1b      	lsrs	r3, r3, #16
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	d10c      	bne.n	8007796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	43da      	mvns	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	bf14      	ite	ne
 800778e:	2301      	movne	r3, #1
 8007790:	2300      	moveq	r3, #0
 8007792:	b2db      	uxtb	r3, r3
 8007794:	e00b      	b.n	80077ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	43da      	mvns	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4013      	ands	r3, r2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d18d      	bne.n	80076ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80077b2:	2300      	movs	r3, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <I2C_WaitOnTXEFlagUntilTimeout>:
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	e02d      	b.n	8007826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f878 	bl	80078c0 <I2C_IsAcknowledgeFailed>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e02d      	b.n	8007836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d021      	beq.n	8007826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80077e2:	f7fe fcd7 	bl	8006194 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d116      	bne.n	8007826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007822:	2301      	movs	r3, #1
 8007824:	e007      	b.n	8007836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b80      	cmp	r3, #128	; 0x80
 8007832:	d1ca      	bne.n	80077ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007834:	2300      	movs	r3, #0
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <I2C_WaitOnBTFFlagUntilTimeout>:
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	e02d      	b.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f837 	bl	80078c0 <I2C_IsAcknowledgeFailed>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007858:	2301      	movs	r3, #1
 800785a:	e02d      	b.n	80078b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d021      	beq.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007864:	f7fe fc96 	bl	8006194 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	429a      	cmp	r2, r3
 8007872:	d302      	bcc.n	800787a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d116      	bne.n	80078a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	f043 0220 	orr.w	r2, r3, #32
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078a4:	2301      	movs	r3, #1
 80078a6:	e007      	b.n	80078b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d1ca      	bne.n	800784c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80078b6:	2300      	movs	r3, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <I2C_IsAcknowledgeFailed>:
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d6:	d11b      	bne.n	8007910 <I2C_IsAcknowledgeFailed+0x50>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078e0:	615a      	str	r2, [r3, #20]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	f043 0204 	orr.w	r2, r3, #4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <I2C_IsAcknowledgeFailed+0x52>
 8007910:	2300      	movs	r3, #0
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <HAL_RCC_OscConfig>:
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCC_OscConfig+0x12>
 800792a:	2301      	movs	r3, #1
 800792c:	e272      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8087 	beq.w	8007a4a <HAL_RCC_OscConfig+0x12e>
 800793c:	4b92      	ldr	r3, [pc, #584]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 030c 	and.w	r3, r3, #12
 8007944:	2b04      	cmp	r3, #4
 8007946:	d00c      	beq.n	8007962 <HAL_RCC_OscConfig+0x46>
 8007948:	4b8f      	ldr	r3, [pc, #572]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f003 030c 	and.w	r3, r3, #12
 8007950:	2b08      	cmp	r3, #8
 8007952:	d112      	bne.n	800797a <HAL_RCC_OscConfig+0x5e>
 8007954:	4b8c      	ldr	r3, [pc, #560]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007960:	d10b      	bne.n	800797a <HAL_RCC_OscConfig+0x5e>
 8007962:	4b89      	ldr	r3, [pc, #548]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d06c      	beq.n	8007a48 <HAL_RCC_OscConfig+0x12c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d168      	bne.n	8007a48 <HAL_RCC_OscConfig+0x12c>
 8007976:	2301      	movs	r3, #1
 8007978:	e24c      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007982:	d106      	bne.n	8007992 <HAL_RCC_OscConfig+0x76>
 8007984:	4b80      	ldr	r3, [pc, #512]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a7f      	ldr	r2, [pc, #508]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 800798a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	e02e      	b.n	80079f0 <HAL_RCC_OscConfig+0xd4>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10c      	bne.n	80079b4 <HAL_RCC_OscConfig+0x98>
 800799a:	4b7b      	ldr	r3, [pc, #492]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a7a      	ldr	r2, [pc, #488]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	4b78      	ldr	r3, [pc, #480]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a77      	ldr	r2, [pc, #476]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e01d      	b.n	80079f0 <HAL_RCC_OscConfig+0xd4>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079bc:	d10c      	bne.n	80079d8 <HAL_RCC_OscConfig+0xbc>
 80079be:	4b72      	ldr	r3, [pc, #456]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a71      	ldr	r2, [pc, #452]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	4b6f      	ldr	r3, [pc, #444]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a6e      	ldr	r2, [pc, #440]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	e00b      	b.n	80079f0 <HAL_RCC_OscConfig+0xd4>
 80079d8:	4b6b      	ldr	r3, [pc, #428]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a6a      	ldr	r2, [pc, #424]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	4b68      	ldr	r3, [pc, #416]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a67      	ldr	r2, [pc, #412]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 80079ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d013      	beq.n	8007a20 <HAL_RCC_OscConfig+0x104>
 80079f8:	f7fe fbcc 	bl	8006194 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0xf6>
 8007a00:	f7fe fbc8 	bl	8006194 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0xf6>
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e200      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007a12:	4b5d      	ldr	r3, [pc, #372]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCC_OscConfig+0xe4>
 8007a1e:	e014      	b.n	8007a4a <HAL_RCC_OscConfig+0x12e>
 8007a20:	f7fe fbb8 	bl	8006194 <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x11e>
 8007a28:	f7fe fbb4 	bl	8006194 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b64      	cmp	r3, #100	; 0x64
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x11e>
 8007a36:	2303      	movs	r3, #3
 8007a38:	e1ec      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007a3a:	4b53      	ldr	r3, [pc, #332]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f0      	bne.n	8007a28 <HAL_RCC_OscConfig+0x10c>
 8007a46:	e000      	b.n	8007a4a <HAL_RCC_OscConfig+0x12e>
 8007a48:	bf00      	nop
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d063      	beq.n	8007b1e <HAL_RCC_OscConfig+0x202>
 8007a56:	4b4c      	ldr	r3, [pc, #304]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 030c 	and.w	r3, r3, #12
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <HAL_RCC_OscConfig+0x15e>
 8007a62:	4b49      	ldr	r3, [pc, #292]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f003 030c 	and.w	r3, r3, #12
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d11c      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x18c>
 8007a6e:	4b46      	ldr	r3, [pc, #280]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d116      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x18c>
 8007a7a:	4b43      	ldr	r3, [pc, #268]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_RCC_OscConfig+0x176>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d001      	beq.n	8007a92 <HAL_RCC_OscConfig+0x176>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e1c0      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007a92:	4b3d      	ldr	r3, [pc, #244]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	4939      	ldr	r1, [pc, #228]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]
 8007aa6:	e03a      	b.n	8007b1e <HAL_RCC_OscConfig+0x202>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d020      	beq.n	8007af2 <HAL_RCC_OscConfig+0x1d6>
 8007ab0:	4b36      	ldr	r3, [pc, #216]	; (8007b8c <HAL_RCC_OscConfig+0x270>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	f7fe fb6d 	bl	8006194 <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]
 8007abc:	e008      	b.n	8007ad0 <HAL_RCC_OscConfig+0x1b4>
 8007abe:	f7fe fb69 	bl	8006194 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x1b4>
 8007acc:	2303      	movs	r3, #3
 8007ace:	e1a1      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007ad0:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0f0      	beq.n	8007abe <HAL_RCC_OscConfig+0x1a2>
 8007adc:	4b2a      	ldr	r3, [pc, #168]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	00db      	lsls	r3, r3, #3
 8007aea:	4927      	ldr	r1, [pc, #156]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	600b      	str	r3, [r1, #0]
 8007af0:	e015      	b.n	8007b1e <HAL_RCC_OscConfig+0x202>
 8007af2:	4b26      	ldr	r3, [pc, #152]	; (8007b8c <HAL_RCC_OscConfig+0x270>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	f7fe fb4c 	bl	8006194 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x1f6>
 8007b00:	f7fe fb48 	bl	8006194 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x1f6>
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e180      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x1e4>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d03a      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x284>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d019      	beq.n	8007b66 <HAL_RCC_OscConfig+0x24a>
 8007b32:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <HAL_RCC_OscConfig+0x274>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	f7fe fb2c 	bl	8006194 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x236>
 8007b40:	f7fe fb28 	bl	8006194 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x236>
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e160      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007b52:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <HAL_RCC_OscConfig+0x26c>)
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <HAL_RCC_OscConfig+0x224>
 8007b5e:	2001      	movs	r0, #1
 8007b60:	f000 fada 	bl	8008118 <RCC_Delay>
 8007b64:	e01c      	b.n	8007ba0 <HAL_RCC_OscConfig+0x284>
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <HAL_RCC_OscConfig+0x274>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	f7fe fb12 	bl	8006194 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]
 8007b72:	e00f      	b.n	8007b94 <HAL_RCC_OscConfig+0x278>
 8007b74:	f7fe fb0e 	bl	8006194 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d908      	bls.n	8007b94 <HAL_RCC_OscConfig+0x278>
 8007b82:	2303      	movs	r3, #3
 8007b84:	e146      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007b86:	bf00      	nop
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	42420000 	.word	0x42420000
 8007b90:	42420480 	.word	0x42420480
 8007b94:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e9      	bne.n	8007b74 <HAL_RCC_OscConfig+0x258>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80a6 	beq.w	8007cfa <HAL_RCC_OscConfig+0x3de>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	4b8b      	ldr	r3, [pc, #556]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10d      	bne.n	8007bda <HAL_RCC_OscConfig+0x2be>
 8007bbe:	4b88      	ldr	r3, [pc, #544]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	4a87      	ldr	r2, [pc, #540]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	61d3      	str	r3, [r2, #28]
 8007bca:	4b85      	ldr	r3, [pc, #532]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	60bb      	str	r3, [r7, #8]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	75fb      	strb	r3, [r7, #23]
 8007bda:	4b82      	ldr	r3, [pc, #520]	; (8007de4 <HAL_RCC_OscConfig+0x4c8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d118      	bne.n	8007c18 <HAL_RCC_OscConfig+0x2fc>
 8007be6:	4b7f      	ldr	r3, [pc, #508]	; (8007de4 <HAL_RCC_OscConfig+0x4c8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a7e      	ldr	r2, [pc, #504]	; (8007de4 <HAL_RCC_OscConfig+0x4c8>)
 8007bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	f7fe facf 	bl	8006194 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x2f0>
 8007bfa:	f7fe facb 	bl	8006194 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b64      	cmp	r3, #100	; 0x64
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x2f0>
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e103      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007c0c:	4b75      	ldr	r3, [pc, #468]	; (8007de4 <HAL_RCC_OscConfig+0x4c8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <HAL_RCC_OscConfig+0x2de>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d106      	bne.n	8007c2e <HAL_RCC_OscConfig+0x312>
 8007c20:	4b6f      	ldr	r3, [pc, #444]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	4a6e      	ldr	r2, [pc, #440]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	6213      	str	r3, [r2, #32]
 8007c2c:	e02d      	b.n	8007c8a <HAL_RCC_OscConfig+0x36e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10c      	bne.n	8007c50 <HAL_RCC_OscConfig+0x334>
 8007c36:	4b6a      	ldr	r3, [pc, #424]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	4a69      	ldr	r2, [pc, #420]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	6213      	str	r3, [r2, #32]
 8007c42:	4b67      	ldr	r3, [pc, #412]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	4a66      	ldr	r2, [pc, #408]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c48:	f023 0304 	bic.w	r3, r3, #4
 8007c4c:	6213      	str	r3, [r2, #32]
 8007c4e:	e01c      	b.n	8007c8a <HAL_RCC_OscConfig+0x36e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b05      	cmp	r3, #5
 8007c56:	d10c      	bne.n	8007c72 <HAL_RCC_OscConfig+0x356>
 8007c58:	4b61      	ldr	r3, [pc, #388]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	4a60      	ldr	r2, [pc, #384]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c5e:	f043 0304 	orr.w	r3, r3, #4
 8007c62:	6213      	str	r3, [r2, #32]
 8007c64:	4b5e      	ldr	r3, [pc, #376]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	4a5d      	ldr	r2, [pc, #372]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c6a:	f043 0301 	orr.w	r3, r3, #1
 8007c6e:	6213      	str	r3, [r2, #32]
 8007c70:	e00b      	b.n	8007c8a <HAL_RCC_OscConfig+0x36e>
 8007c72:	4b5b      	ldr	r3, [pc, #364]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	4a5a      	ldr	r2, [pc, #360]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c78:	f023 0301 	bic.w	r3, r3, #1
 8007c7c:	6213      	str	r3, [r2, #32]
 8007c7e:	4b58      	ldr	r3, [pc, #352]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	4a57      	ldr	r2, [pc, #348]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007c84:	f023 0304 	bic.w	r3, r3, #4
 8007c88:	6213      	str	r3, [r2, #32]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d015      	beq.n	8007cbe <HAL_RCC_OscConfig+0x3a2>
 8007c92:	f7fe fa7f 	bl	8006194 <HAL_GetTick>
 8007c96:	6138      	str	r0, [r7, #16]
 8007c98:	e00a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x394>
 8007c9a:	f7fe fa7b 	bl	8006194 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x394>
 8007cac:	2303      	movs	r3, #3
 8007cae:	e0b1      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007cb0:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0ee      	beq.n	8007c9a <HAL_RCC_OscConfig+0x37e>
 8007cbc:	e014      	b.n	8007ce8 <HAL_RCC_OscConfig+0x3cc>
 8007cbe:	f7fe fa69 	bl	8006194 <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]
 8007cc4:	e00a      	b.n	8007cdc <HAL_RCC_OscConfig+0x3c0>
 8007cc6:	f7fe fa65 	bl	8006194 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x3c0>
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e09b      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007cdc:	4b40      	ldr	r3, [pc, #256]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1ee      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x3aa>
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d105      	bne.n	8007cfa <HAL_RCC_OscConfig+0x3de>
 8007cee:	4b3c      	ldr	r3, [pc, #240]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	4a3b      	ldr	r2, [pc, #236]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf8:	61d3      	str	r3, [r2, #28]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 8087 	beq.w	8007e12 <HAL_RCC_OscConfig+0x4f6>
 8007d04:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f003 030c 	and.w	r3, r3, #12
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d061      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x4b8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d146      	bne.n	8007da6 <HAL_RCC_OscConfig+0x48a>
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <HAL_RCC_OscConfig+0x4cc>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f7fe fa39 	bl	8006194 <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x41c>
 8007d26:	f7fe fa35 	bl	8006194 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x41c>
 8007d34:	2303      	movs	r3, #3
 8007d36:	e06d      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007d38:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f0      	bne.n	8007d26 <HAL_RCC_OscConfig+0x40a>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d4c:	d108      	bne.n	8007d60 <HAL_RCC_OscConfig+0x444>
 8007d4e:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	4921      	ldr	r1, [pc, #132]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	604b      	str	r3, [r1, #4]
 8007d60:	4b1f      	ldr	r3, [pc, #124]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a19      	ldr	r1, [r3, #32]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	430b      	orrs	r3, r1
 8007d72:	491b      	ldr	r1, [pc, #108]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	604b      	str	r3, [r1, #4]
 8007d78:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <HAL_RCC_OscConfig+0x4cc>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f7fe fa09 	bl	8006194 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x47c>
 8007d86:	f7fe fa05 	bl	8006194 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x47c>
 8007d94:	2303      	movs	r3, #3
 8007d96:	e03d      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCC_OscConfig+0x46a>
 8007da4:	e035      	b.n	8007e12 <HAL_RCC_OscConfig+0x4f6>
 8007da6:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <HAL_RCC_OscConfig+0x4cc>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	f7fe f9f2 	bl	8006194 <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x4aa>
 8007db4:	f7fe f9ee 	bl	8006194 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x4aa>
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e026      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007dc6:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <HAL_RCC_OscConfig+0x4c4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCC_OscConfig+0x498>
 8007dd2:	e01e      	b.n	8007e12 <HAL_RCC_OscConfig+0x4f6>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d107      	bne.n	8007dec <HAL_RCC_OscConfig+0x4d0>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e019      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007de0:	40021000 	.word	0x40021000
 8007de4:	40007000 	.word	0x40007000
 8007de8:	42420060 	.word	0x42420060
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <HAL_RCC_OscConfig+0x500>)
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d106      	bne.n	8007e0e <HAL_RCC_OscConfig+0x4f2>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d001      	beq.n	8007e12 <HAL_RCC_OscConfig+0x4f6>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <HAL_RCC_OscConfig+0x4f8>
 8007e12:	2300      	movs	r3, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40021000 	.word	0x40021000

08007e20 <HAL_RCC_ClockConfig>:
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_RCC_ClockConfig+0x14>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e0d0      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007e34:	4b6a      	ldr	r3, [pc, #424]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d910      	bls.n	8007e64 <HAL_RCC_ClockConfig+0x44>
 8007e42:	4b67      	ldr	r3, [pc, #412]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f023 0207 	bic.w	r2, r3, #7
 8007e4a:	4965      	ldr	r1, [pc, #404]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	600b      	str	r3, [r1, #0]
 8007e52:	4b63      	ldr	r3, [pc, #396]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x44>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0b8      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d020      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x92>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x68>
 8007e7c:	4b59      	ldr	r3, [pc, #356]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a58      	ldr	r2, [pc, #352]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e86:	6053      	str	r3, [r2, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x80>
 8007e94:	4b53      	ldr	r3, [pc, #332]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a52      	ldr	r2, [pc, #328]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007e9e:	6053      	str	r3, [r2, #4]
 8007ea0:	4b50      	ldr	r3, [pc, #320]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	494d      	ldr	r1, [pc, #308]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	604b      	str	r3, [r1, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d040      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x120>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCC_ClockConfig+0xb6>
 8007ec6:	4b47      	ldr	r3, [pc, #284]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d115      	bne.n	8007efe <HAL_RCC_ClockConfig+0xde>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e07f      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d107      	bne.n	8007eee <HAL_RCC_ClockConfig+0xce>
 8007ede:	4b41      	ldr	r3, [pc, #260]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <HAL_RCC_ClockConfig+0xde>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e073      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007eee:	4b3d      	ldr	r3, [pc, #244]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_RCC_ClockConfig+0xde>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e06b      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007efe:	4b39      	ldr	r3, [pc, #228]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f023 0203 	bic.w	r2, r3, #3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4936      	ldr	r1, [pc, #216]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	604b      	str	r3, [r1, #4]
 8007f10:	f7fe f940 	bl	8006194 <HAL_GetTick>
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	e00a      	b.n	8007f2e <HAL_RCC_ClockConfig+0x10e>
 8007f18:	f7fe f93c 	bl	8006194 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_ClockConfig+0x10e>
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e053      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007f2e:	4b2d      	ldr	r3, [pc, #180]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f003 020c 	and.w	r2, r3, #12
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d1eb      	bne.n	8007f18 <HAL_RCC_ClockConfig+0xf8>
 8007f40:	4b27      	ldr	r3, [pc, #156]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d210      	bcs.n	8007f70 <HAL_RCC_ClockConfig+0x150>
 8007f4e:	4b24      	ldr	r3, [pc, #144]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f023 0207 	bic.w	r2, r3, #7
 8007f56:	4922      	ldr	r1, [pc, #136]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	600b      	str	r3, [r1, #0]
 8007f5e:	4b20      	ldr	r3, [pc, #128]	; (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d001      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x150>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e032      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1b6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <HAL_RCC_ClockConfig+0x16e>
 8007f7c:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4916      	ldr	r1, [pc, #88]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	604b      	str	r3, [r1, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <HAL_RCC_ClockConfig+0x18e>
 8007f9a:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	490e      	ldr	r1, [pc, #56]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	604b      	str	r3, [r1, #4]
 8007fae:	f000 f821 	bl	8007ff4 <HAL_RCC_GetSysClockFreq>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	490a      	ldr	r1, [pc, #40]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc0:	5ccb      	ldrb	r3, [r1, r3]
 8007fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc6:	4a09      	ldr	r2, [pc, #36]	; (8007fec <HAL_RCC_ClockConfig+0x1cc>)
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe f89e 	bl	8006110 <HAL_InitTick>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40022000 	.word	0x40022000
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	0800cf9c 	.word	0x0800cf9c
 8007fec:	2000000c 	.word	0x2000000c
 8007ff0:	20000010 	.word	0x20000010

08007ff4 <HAL_RCC_GetSysClockFreq>:
 8007ff4:	b490      	push	{r4, r7}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4b29      	ldr	r3, [pc, #164]	; (80080a0 <HAL_RCC_GetSysClockFreq+0xac>)
 8007ffc:	1d3c      	adds	r4, r7, #4
 8007ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008004:	f240 2301 	movw	r3, #513	; 0x201
 8008008:	803b      	strh	r3, [r7, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	2300      	movs	r3, #0
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	2300      	movs	r3, #0
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	2300      	movs	r3, #0
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	4b21      	ldr	r3, [pc, #132]	; (80080a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f003 030c 	and.w	r3, r3, #12
 800802a:	2b04      	cmp	r3, #4
 800802c:	d002      	beq.n	8008034 <HAL_RCC_GetSysClockFreq+0x40>
 800802e:	2b08      	cmp	r3, #8
 8008030:	d003      	beq.n	800803a <HAL_RCC_GetSysClockFreq+0x46>
 8008032:	e02b      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x98>
 8008034:	4b1c      	ldr	r3, [pc, #112]	; (80080a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008036:	623b      	str	r3, [r7, #32]
 8008038:	e02b      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x9e>
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	0c9b      	lsrs	r3, r3, #18
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	3328      	adds	r3, #40	; 0x28
 8008044:	443b      	add	r3, r7
 8008046:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d012      	beq.n	800807c <HAL_RCC_GetSysClockFreq+0x88>
 8008056:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	0c5b      	lsrs	r3, r3, #17
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	3328      	adds	r3, #40	; 0x28
 8008062:	443b      	add	r3, r7
 8008064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4a0e      	ldr	r2, [pc, #56]	; (80080a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800806e:	fb03 f202 	mul.w	r2, r3, r2
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	fbb2 f3f3 	udiv	r3, r2, r3
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
 800807a:	e004      	b.n	8008086 <HAL_RCC_GetSysClockFreq+0x92>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4a0b      	ldr	r2, [pc, #44]	; (80080ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	623b      	str	r3, [r7, #32]
 800808a:	e002      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x9e>
 800808c:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800808e:	623b      	str	r3, [r7, #32]
 8008090:	bf00      	nop
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	4618      	mov	r0, r3
 8008096:	3728      	adds	r7, #40	; 0x28
 8008098:	46bd      	mov	sp, r7
 800809a:	bc90      	pop	{r4, r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	0800c988 	.word	0x0800c988
 80080a4:	40021000 	.word	0x40021000
 80080a8:	00f42400 	.word	0x00f42400
 80080ac:	003d0900 	.word	0x003d0900
 80080b0:	007a1200 	.word	0x007a1200

080080b4 <HAL_RCC_GetHCLKFreq>:
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr
 80080c4:	2000000c 	.word	0x2000000c

080080c8 <HAL_RCC_GetPCLK1Freq>:
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	f7ff fff2 	bl	80080b4 <HAL_RCC_GetHCLKFreq>
 80080d0:	4602      	mov	r2, r0
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	4903      	ldr	r1, [pc, #12]	; (80080ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80080de:	5ccb      	ldrb	r3, [r1, r3]
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
 80080e4:	4618      	mov	r0, r3
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40021000 	.word	0x40021000
 80080ec:	0800cfac 	.word	0x0800cfac

080080f0 <HAL_RCC_GetPCLK2Freq>:
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	f7ff ffde 	bl	80080b4 <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	0adb      	lsrs	r3, r3, #11
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4903      	ldr	r1, [pc, #12]	; (8008114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
 800810c:	4618      	mov	r0, r3
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40021000 	.word	0x40021000
 8008114:	0800cfac 	.word	0x0800cfac

08008118 <RCC_Delay>:
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <RCC_Delay+0x34>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <RCC_Delay+0x38>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	0a5b      	lsrs	r3, r3, #9
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	fb02 f303 	mul.w	r3, r2, r3
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	bf00      	nop
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	60fa      	str	r2, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f9      	bne.n	8008134 <RCC_Delay+0x1c>
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr
 800814c:	2000000c 	.word	0x2000000c
 8008150:	10624dd3 	.word	0x10624dd3

08008154 <HAL_TIM_Base_Init>:
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_TIM_Base_Init+0x12>
 8008162:	2301      	movs	r3, #1
 8008164:	e041      	b.n	80081ea <HAL_TIM_Base_Init+0x96>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <HAL_TIM_Base_Init+0x2c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fd fa3a 	bl	80055f4 <HAL_TIM_Base_MspInit>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f000 fd88 	bl	8008ca8 <TIM_Base_SetConfig>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081e8:	2300      	movs	r3, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <HAL_TIM_Base_Start_IT>:
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	d001      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x18>
 8008208:	2301      	movs	r3, #1
 800820a:	e044      	b.n	8008296 <HAL_TIM_Base_Start_IT+0xa2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	60da      	str	r2, [r3, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1d      	ldr	r2, [pc, #116]	; (80082a0 <HAL_TIM_Base_Start_IT+0xac>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x6c>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1c      	ldr	r2, [pc, #112]	; (80082a4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x6c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008240:	d00e      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x6c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x6c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a16      	ldr	r2, [pc, #88]	; (80082ac <HAL_TIM_Base_Start_IT+0xb8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x6c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d111      	bne.n	8008284 <HAL_TIM_Base_Start_IT+0x90>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b06      	cmp	r3, #6
 8008270:	d010      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xa0>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e007      	b.n	8008294 <HAL_TIM_Base_Start_IT+0xa0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40013400 	.word	0x40013400
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00

080082b4 <HAL_TIM_PWM_Init>:
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_TIM_PWM_Init+0x12>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e041      	b.n	800834a <HAL_TIM_PWM_Init+0x96>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <HAL_TIM_PWM_Init+0x2c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f839 	bl	8008352 <HAL_TIM_PWM_MspInit>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f000 fcd8 	bl	8008ca8 <TIM_Base_SetConfig>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008348:	2300      	movs	r3, #0
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_TIM_PWM_MspInit>:
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr

08008364 <HAL_TIM_PWM_Start>:
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <HAL_TIM_PWM_Start+0x24>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b01      	cmp	r3, #1
 800837e:	bf14      	ite	ne
 8008380:	2301      	movne	r3, #1
 8008382:	2300      	moveq	r3, #0
 8008384:	b2db      	uxtb	r3, r3
 8008386:	e022      	b.n	80083ce <HAL_TIM_PWM_Start+0x6a>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b04      	cmp	r3, #4
 800838c:	d109      	bne.n	80083a2 <HAL_TIM_PWM_Start+0x3e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b01      	cmp	r3, #1
 8008398:	bf14      	ite	ne
 800839a:	2301      	movne	r3, #1
 800839c:	2300      	moveq	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	e015      	b.n	80083ce <HAL_TIM_PWM_Start+0x6a>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d109      	bne.n	80083bc <HAL_TIM_PWM_Start+0x58>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	bf14      	ite	ne
 80083b4:	2301      	movne	r3, #1
 80083b6:	2300      	moveq	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	e008      	b.n	80083ce <HAL_TIM_PWM_Start+0x6a>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	bf14      	ite	ne
 80083c8:	2301      	movne	r3, #1
 80083ca:	2300      	moveq	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_TIM_PWM_Start+0x72>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e072      	b.n	80084bc <HAL_TIM_PWM_Start+0x158>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <HAL_TIM_PWM_Start+0x82>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e4:	e013      	b.n	800840e <HAL_TIM_PWM_Start+0xaa>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d104      	bne.n	80083f6 <HAL_TIM_PWM_Start+0x92>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083f4:	e00b      	b.n	800840e <HAL_TIM_PWM_Start+0xaa>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b08      	cmp	r3, #8
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_PWM_Start+0xa2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008404:	e003      	b.n	800840e <HAL_TIM_PWM_Start+0xaa>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 ff02 	bl	8009220 <TIM_CCxChannelCmd>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a28      	ldr	r2, [pc, #160]	; (80084c4 <HAL_TIM_PWM_Start+0x160>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIM_PWM_Start+0xcc>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a27      	ldr	r2, [pc, #156]	; (80084c8 <HAL_TIM_PWM_Start+0x164>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d101      	bne.n	8008434 <HAL_TIM_PWM_Start+0xd0>
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <HAL_TIM_PWM_Start+0xd2>
 8008434:	2300      	movs	r3, #0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <HAL_TIM_PWM_Start+0xe6>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008448:	645a      	str	r2, [r3, #68]	; 0x44
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <HAL_TIM_PWM_Start+0x160>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d018      	beq.n	8008486 <HAL_TIM_PWM_Start+0x122>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <HAL_TIM_PWM_Start+0x164>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <HAL_TIM_PWM_Start+0x122>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008466:	d00e      	beq.n	8008486 <HAL_TIM_PWM_Start+0x122>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <HAL_TIM_PWM_Start+0x168>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d009      	beq.n	8008486 <HAL_TIM_PWM_Start+0x122>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <HAL_TIM_PWM_Start+0x16c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d004      	beq.n	8008486 <HAL_TIM_PWM_Start+0x122>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <HAL_TIM_PWM_Start+0x170>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d111      	bne.n	80084aa <HAL_TIM_PWM_Start+0x146>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b06      	cmp	r3, #6
 8008496:	d010      	beq.n	80084ba <HAL_TIM_PWM_Start+0x156>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e007      	b.n	80084ba <HAL_TIM_PWM_Start+0x156>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0201 	orr.w	r2, r2, #1
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	2300      	movs	r3, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40012c00 	.word	0x40012c00
 80084c8:	40013400 	.word	0x40013400
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00

080084d8 <HAL_TIM_Encoder_Init>:
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_TIM_Encoder_Init+0x14>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e093      	b.n	8008614 <HAL_TIM_Encoder_Init+0x13c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <HAL_TIM_Encoder_Init+0x2e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7fd f8c5 	bl	8005690 <HAL_TIM_Encoder_MspInit>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851c:	f023 0307 	bic.w	r3, r3, #7
 8008520:	6093      	str	r3, [r2, #8]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f000 fbbb 	bl	8008ca8 <TIM_Base_SetConfig>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	4313      	orrs	r3, r2
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008578:	f023 030c 	bic.w	r3, r3, #12
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	4313      	orrs	r3, r2
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	011a      	lsls	r2, r3, #4
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	031b      	lsls	r3, r3, #12
 80085a8:	4313      	orrs	r3, r2
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	4313      	orrs	r3, r2
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	609a      	str	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	619a      	str	r2, [r3, #24]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	621a      	str	r2, [r3, #32]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008612:	2300      	movs	r3, #0
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_TIM_Encoder_Start>:
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008634:	73bb      	strb	r3, [r7, #14]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800863c:	737b      	strb	r3, [r7, #13]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008644:	733b      	strb	r3, [r7, #12]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <HAL_TIM_Encoder_Start+0x52>
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d102      	bne.n	8008658 <HAL_TIM_Encoder_Start+0x3c>
 8008652:	7b7b      	ldrb	r3, [r7, #13]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d001      	beq.n	800865c <HAL_TIM_Encoder_Start+0x40>
 8008658:	2301      	movs	r3, #1
 800865a:	e069      	b.n	8008730 <HAL_TIM_Encoder_Start+0x114>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800866c:	e031      	b.n	80086d2 <HAL_TIM_Encoder_Start+0xb6>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b04      	cmp	r3, #4
 8008672:	d110      	bne.n	8008696 <HAL_TIM_Encoder_Start+0x7a>
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d102      	bne.n	8008680 <HAL_TIM_Encoder_Start+0x64>
 800867a:	7b3b      	ldrb	r3, [r7, #12]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d001      	beq.n	8008684 <HAL_TIM_Encoder_Start+0x68>
 8008680:	2301      	movs	r3, #1
 8008682:	e055      	b.n	8008730 <HAL_TIM_Encoder_Start+0x114>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008694:	e01d      	b.n	80086d2 <HAL_TIM_Encoder_Start+0xb6>
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d108      	bne.n	80086ae <HAL_TIM_Encoder_Start+0x92>
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d105      	bne.n	80086ae <HAL_TIM_Encoder_Start+0x92>
 80086a2:	7b7b      	ldrb	r3, [r7, #13]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <HAL_TIM_Encoder_Start+0x92>
 80086a8:	7b3b      	ldrb	r3, [r7, #12]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d001      	beq.n	80086b2 <HAL_TIM_Encoder_Start+0x96>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e03e      	b.n	8008730 <HAL_TIM_Encoder_Start+0x114>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2202      	movs	r2, #2
 80086c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_TIM_Encoder_Start+0xc4>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d008      	beq.n	80086f0 <HAL_TIM_Encoder_Start+0xd4>
 80086de:	e00f      	b.n	8008700 <HAL_TIM_Encoder_Start+0xe4>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2201      	movs	r2, #1
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fd99 	bl	8009220 <TIM_CCxChannelCmd>
 80086ee:	e016      	b.n	800871e <HAL_TIM_Encoder_Start+0x102>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2201      	movs	r2, #1
 80086f6:	2104      	movs	r1, #4
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fd91 	bl	8009220 <TIM_CCxChannelCmd>
 80086fe:	e00e      	b.n	800871e <HAL_TIM_Encoder_Start+0x102>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fd89 	bl	8009220 <TIM_CCxChannelCmd>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2201      	movs	r2, #1
 8008714:	2104      	movs	r1, #4
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fd82 	bl	8009220 <TIM_CCxChannelCmd>
 800871c:	bf00      	nop
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0201 	orr.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	2300      	movs	r3, #0
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_TIM_IRQHandler>:
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b02      	cmp	r3, #2
 800874c:	d122      	bne.n	8008794 <HAL_TIM_IRQHandler+0x5c>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b02      	cmp	r3, #2
 800875a:	d11b      	bne.n	8008794 <HAL_TIM_IRQHandler+0x5c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0202 	mvn.w	r2, #2
 8008764:	611a      	str	r2, [r3, #16]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	771a      	strb	r2, [r3, #28]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0x4a>
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa78 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0x56>
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa6b 	bl	8008c5e <HAL_TIM_OC_DelayElapsedCallback>
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fa7a 	bl	8008c82 <HAL_TIM_PWM_PulseFinishedCallback>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d122      	bne.n	80087e8 <HAL_TIM_IRQHandler+0xb0>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d11b      	bne.n	80087e8 <HAL_TIM_IRQHandler+0xb0>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0204 	mvn.w	r2, #4
 80087b8:	611a      	str	r2, [r3, #16]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	771a      	strb	r2, [r3, #28]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x9e>
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa4e 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 80087d4:	e005      	b.n	80087e2 <HAL_TIM_IRQHandler+0xaa>
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa41 	bl	8008c5e <HAL_TIM_OC_DelayElapsedCallback>
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fa50 	bl	8008c82 <HAL_TIM_PWM_PulseFinishedCallback>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	771a      	strb	r2, [r3, #28]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d122      	bne.n	800883c <HAL_TIM_IRQHandler+0x104>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b08      	cmp	r3, #8
 8008802:	d11b      	bne.n	800883c <HAL_TIM_IRQHandler+0x104>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0208 	mvn.w	r2, #8
 800880c:	611a      	str	r2, [r3, #16]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	771a      	strb	r2, [r3, #28]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_TIM_IRQHandler+0xf2>
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa24 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 8008828:	e005      	b.n	8008836 <HAL_TIM_IRQHandler+0xfe>
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa17 	bl	8008c5e <HAL_TIM_OC_DelayElapsedCallback>
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa26 	bl	8008c82 <HAL_TIM_PWM_PulseFinishedCallback>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b10      	cmp	r3, #16
 8008848:	d122      	bne.n	8008890 <HAL_TIM_IRQHandler+0x158>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b10      	cmp	r3, #16
 8008856:	d11b      	bne.n	8008890 <HAL_TIM_IRQHandler+0x158>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0210 	mvn.w	r2, #16
 8008860:	611a      	str	r2, [r3, #16]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2208      	movs	r2, #8
 8008866:	771a      	strb	r2, [r3, #28]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_TIM_IRQHandler+0x146>
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f9fa 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 800887c:	e005      	b.n	800888a <HAL_TIM_IRQHandler+0x152>
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f9ed 	bl	8008c5e <HAL_TIM_OC_DelayElapsedCallback>
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f9fc 	bl	8008c82 <HAL_TIM_PWM_PulseFinishedCallback>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	771a      	strb	r2, [r3, #28]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b01      	cmp	r3, #1
 800889c:	d10e      	bne.n	80088bc <HAL_TIM_IRQHandler+0x184>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d107      	bne.n	80088bc <HAL_TIM_IRQHandler+0x184>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f06f 0201 	mvn.w	r2, #1
 80088b4:	611a      	str	r2, [r3, #16]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9c8 	bl	8008c4c <HAL_TIM_PeriodElapsedCallback>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d10e      	bne.n	80088e8 <HAL_TIM_IRQHandler+0x1b0>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d4:	2b80      	cmp	r3, #128	; 0x80
 80088d6:	d107      	bne.n	80088e8 <HAL_TIM_IRQHandler+0x1b0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088e0:	611a      	str	r2, [r3, #16]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fd86 	bl	80093f4 <HAL_TIMEx_BreakCallback>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d10e      	bne.n	8008914 <HAL_TIM_IRQHandler+0x1dc>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008900:	2b40      	cmp	r3, #64	; 0x40
 8008902:	d107      	bne.n	8008914 <HAL_TIM_IRQHandler+0x1dc>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800890c:	611a      	str	r2, [r3, #16]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9c0 	bl	8008c94 <HAL_TIM_TriggerCallback>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b20      	cmp	r3, #32
 8008920:	d10e      	bne.n	8008940 <HAL_TIM_IRQHandler+0x208>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b20      	cmp	r3, #32
 800892e:	d107      	bne.n	8008940 <HAL_TIM_IRQHandler+0x208>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f06f 0220 	mvn.w	r2, #32
 8008938:	611a      	str	r2, [r3, #16]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd51 	bl	80093e2 <HAL_TIMEx_CommutCallback>
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_TIM_PWM_ConfigChannel>:
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895a:	2b01      	cmp	r3, #1
 800895c:	d101      	bne.n	8008962 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800895e:	2302      	movs	r3, #2
 8008960:	e0ac      	b.n	8008abc <HAL_TIM_PWM_ConfigChannel+0x174>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b0c      	cmp	r3, #12
 800896e:	f200 809f 	bhi.w	8008ab0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	080089ad 	.word	0x080089ad
 800897c:	08008ab1 	.word	0x08008ab1
 8008980:	08008ab1 	.word	0x08008ab1
 8008984:	08008ab1 	.word	0x08008ab1
 8008988:	080089ed 	.word	0x080089ed
 800898c:	08008ab1 	.word	0x08008ab1
 8008990:	08008ab1 	.word	0x08008ab1
 8008994:	08008ab1 	.word	0x08008ab1
 8008998:	08008a2f 	.word	0x08008a2f
 800899c:	08008ab1 	.word	0x08008ab1
 80089a0:	08008ab1 	.word	0x08008ab1
 80089a4:	08008ab1 	.word	0x08008ab1
 80089a8:	08008a6f 	.word	0x08008a6f
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f9f2 	bl	8008d9c <TIM_OC1_SetConfig>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0208 	orr.w	r2, r2, #8
 80089c6:	619a      	str	r2, [r3, #24]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0204 	bic.w	r2, r2, #4
 80089d6:	619a      	str	r2, [r3, #24]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6999      	ldr	r1, [r3, #24]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	619a      	str	r2, [r3, #24]
 80089ea:	e062      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fa42 	bl	8008e7c <TIM_OC2_SetConfig>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a06:	619a      	str	r2, [r3, #24]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a16:	619a      	str	r2, [r3, #24]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6999      	ldr	r1, [r3, #24]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	021a      	lsls	r2, r3, #8
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	619a      	str	r2, [r3, #24]
 8008a2c:	e041      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fa95 	bl	8008f64 <TIM_OC3_SetConfig>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0208 	orr.w	r2, r2, #8
 8008a48:	61da      	str	r2, [r3, #28]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0204 	bic.w	r2, r2, #4
 8008a58:	61da      	str	r2, [r3, #28]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69d9      	ldr	r1, [r3, #28]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	691a      	ldr	r2, [r3, #16]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	61da      	str	r2, [r3, #28]
 8008a6c:	e021      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fae9 	bl	800904c <TIM_OC4_SetConfig>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a88:	61da      	str	r2, [r3, #28]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69da      	ldr	r2, [r3, #28]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a98:	61da      	str	r2, [r3, #28]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69d9      	ldr	r1, [r3, #28]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	021a      	lsls	r2, r3, #8
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	61da      	str	r2, [r3, #28]
 8008aae:	e000      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008ab0:	bf00      	nop
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008aba:	2300      	movs	r3, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_TIM_ConfigClockSource>:
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIM_ConfigClockSource+0x18>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e0b3      	b.n	8008c44 <HAL_TIM_ConfigClockSource+0x180>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	609a      	str	r2, [r3, #8]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b14:	d03e      	beq.n	8008b94 <HAL_TIM_ConfigClockSource+0xd0>
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b1a:	f200 8087 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b22:	f000 8085 	beq.w	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2a:	d87f      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b2c:	2b70      	cmp	r3, #112	; 0x70
 8008b2e:	d01a      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0xa2>
 8008b30:	2b70      	cmp	r3, #112	; 0x70
 8008b32:	d87b      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b34:	2b60      	cmp	r3, #96	; 0x60
 8008b36:	d050      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0x116>
 8008b38:	2b60      	cmp	r3, #96	; 0x60
 8008b3a:	d877      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b3c:	2b50      	cmp	r3, #80	; 0x50
 8008b3e:	d03c      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0xf6>
 8008b40:	2b50      	cmp	r3, #80	; 0x50
 8008b42:	d873      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	d058      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x136>
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d86f      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b4c:	2b30      	cmp	r3, #48	; 0x30
 8008b4e:	d064      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x156>
 8008b50:	2b30      	cmp	r3, #48	; 0x30
 8008b52:	d86b      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d060      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x156>
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d867      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05c      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x156>
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d05a      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x156>
 8008b64:	e062      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x168>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f000 fb34 	bl	80091e2 <TIM_ETR_SetConfig>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	609a      	str	r2, [r3, #8]
 8008b92:	e04e      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	6899      	ldr	r1, [r3, #8]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f000 fb1d 	bl	80091e2 <TIM_ETR_SetConfig>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bb6:	609a      	str	r2, [r3, #8]
 8008bb8:	e03b      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6859      	ldr	r1, [r3, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f000 fa94 	bl	80090f4 <TIM_TI1_ConfigInputStage>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2150      	movs	r1, #80	; 0x50
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 faeb 	bl	80091ae <TIM_ITRx_SetConfig>
 8008bd8:	e02b      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f000 fab2 	bl	8009150 <TIM_TI2_ConfigInputStage>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2160      	movs	r1, #96	; 0x60
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fadb 	bl	80091ae <TIM_ITRx_SetConfig>
 8008bf8:	e01b      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6859      	ldr	r1, [r3, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f000 fa74 	bl	80090f4 <TIM_TI1_ConfigInputStage>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2140      	movs	r1, #64	; 0x40
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 facb 	bl	80091ae <TIM_ITRx_SetConfig>
 8008c18:	e00b      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f000 fac2 	bl	80091ae <TIM_ITRx_SetConfig>
 8008c2a:	e002      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008c2c:	bf00      	nop
 8008c2e:	e000      	b.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008c30:	bf00      	nop
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c42:	2300      	movs	r3, #0
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_TIM_PeriodElapsedCallback>:
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <HAL_TIM_OC_DelayElapsedCallback>:
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bc80      	pop	{r7}
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIM_IC_CaptureCallback>:
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bc80      	pop	{r7}
 8008c80:	4770      	bx	lr

08008c82 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bc80      	pop	{r7}
 8008c92:	4770      	bx	lr

08008c94 <HAL_TIM_TriggerCallback>:
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bc80      	pop	{r7}
 8008ca4:	4770      	bx	lr
	...

08008ca8 <TIM_Base_SetConfig>:
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a33      	ldr	r2, [pc, #204]	; (8008d88 <TIM_Base_SetConfig+0xe0>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a32      	ldr	r2, [pc, #200]	; (8008d8c <TIM_Base_SetConfig+0xe4>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00f      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cce:	d00b      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a2f      	ldr	r2, [pc, #188]	; (8008d90 <TIM_Base_SetConfig+0xe8>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d007      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a2e      	ldr	r2, [pc, #184]	; (8008d94 <TIM_Base_SetConfig+0xec>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a2d      	ldr	r2, [pc, #180]	; (8008d98 <TIM_Base_SetConfig+0xf0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d108      	bne.n	8008cfa <TIM_Base_SetConfig+0x52>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a22      	ldr	r2, [pc, #136]	; (8008d88 <TIM_Base_SetConfig+0xe0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <TIM_Base_SetConfig+0x82>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a21      	ldr	r2, [pc, #132]	; (8008d8c <TIM_Base_SetConfig+0xe4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <TIM_Base_SetConfig+0x82>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d10:	d00b      	beq.n	8008d2a <TIM_Base_SetConfig+0x82>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <TIM_Base_SetConfig+0xe8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_Base_SetConfig+0x82>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	; (8008d94 <TIM_Base_SetConfig+0xec>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_Base_SetConfig+0x82>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a1c      	ldr	r2, [pc, #112]	; (8008d98 <TIM_Base_SetConfig+0xf0>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d108      	bne.n	8008d3c <TIM_Base_SetConfig+0x94>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <TIM_Base_SetConfig+0xe0>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d003      	beq.n	8008d70 <TIM_Base_SetConfig+0xc8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a08      	ldr	r2, [pc, #32]	; (8008d8c <TIM_Base_SetConfig+0xe4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d103      	bne.n	8008d78 <TIM_Base_SetConfig+0xd0>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	615a      	str	r2, [r3, #20]
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr
 8008d88:	40012c00 	.word	0x40012c00
 8008d8c:	40013400 	.word	0x40013400
 8008d90:	40000400 	.word	0x40000400
 8008d94:	40000800 	.word	0x40000800
 8008d98:	40000c00 	.word	0x40000c00

08008d9c <TIM_OC1_SetConfig>:
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0201 	bic.w	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	621a      	str	r2, [r3, #32]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	613b      	str	r3, [r7, #16]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 0302 	bic.w	r3, r3, #2
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a20      	ldr	r2, [pc, #128]	; (8008e74 <TIM_OC1_SetConfig+0xd8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d003      	beq.n	8008e00 <TIM_OC1_SetConfig+0x64>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a1f      	ldr	r2, [pc, #124]	; (8008e78 <TIM_OC1_SetConfig+0xdc>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10c      	bne.n	8008e1a <TIM_OC1_SetConfig+0x7e>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0308 	bic.w	r3, r3, #8
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f023 0304 	bic.w	r3, r3, #4
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a15      	ldr	r2, [pc, #84]	; (8008e74 <TIM_OC1_SetConfig+0xd8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_OC1_SetConfig+0x8e>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a14      	ldr	r2, [pc, #80]	; (8008e78 <TIM_OC1_SetConfig+0xdc>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d111      	bne.n	8008e4e <TIM_OC1_SetConfig+0xb2>
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e38:	613b      	str	r3, [r7, #16]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	605a      	str	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	619a      	str	r2, [r3, #24]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	635a      	str	r2, [r3, #52]	; 0x34
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	621a      	str	r2, [r3, #32]
 8008e68:	bf00      	nop
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40012c00 	.word	0x40012c00
 8008e78:	40013400 	.word	0x40013400

08008e7c <TIM_OC2_SetConfig>:
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0210 	bic.w	r2, r3, #16
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f023 0320 	bic.w	r3, r3, #32
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a21      	ldr	r2, [pc, #132]	; (8008f5c <TIM_OC2_SetConfig+0xe0>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_OC2_SetConfig+0x68>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a20      	ldr	r2, [pc, #128]	; (8008f60 <TIM_OC2_SetConfig+0xe4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d10d      	bne.n	8008f00 <TIM_OC2_SetConfig+0x84>
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a16      	ldr	r2, [pc, #88]	; (8008f5c <TIM_OC2_SetConfig+0xe0>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x94>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a15      	ldr	r2, [pc, #84]	; (8008f60 <TIM_OC2_SetConfig+0xe4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d113      	bne.n	8008f38 <TIM_OC2_SetConfig+0xbc>
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	605a      	str	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	619a      	str	r2, [r3, #24]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	621a      	str	r2, [r3, #32]
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr
 8008f5c:	40012c00 	.word	0x40012c00
 8008f60:	40013400 	.word	0x40013400

08008f64 <TIM_OC3_SetConfig>:
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	621a      	str	r2, [r3, #32]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	613b      	str	r3, [r7, #16]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0303 	bic.w	r3, r3, #3
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fac:	617b      	str	r3, [r7, #20]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a21      	ldr	r2, [pc, #132]	; (8009044 <TIM_OC3_SetConfig+0xe0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d003      	beq.n	8008fca <TIM_OC3_SetConfig+0x66>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a20      	ldr	r2, [pc, #128]	; (8009048 <TIM_OC3_SetConfig+0xe4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d10d      	bne.n	8008fe6 <TIM_OC3_SetConfig+0x82>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	021b      	lsls	r3, r3, #8
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a16      	ldr	r2, [pc, #88]	; (8009044 <TIM_OC3_SetConfig+0xe0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d003      	beq.n	8008ff6 <TIM_OC3_SetConfig+0x92>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a15      	ldr	r2, [pc, #84]	; (8009048 <TIM_OC3_SetConfig+0xe4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d113      	bne.n	800901e <TIM_OC3_SetConfig+0xba>
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ffc:	613b      	str	r3, [r7, #16]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	605a      	str	r2, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	61da      	str	r2, [r3, #28]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	63da      	str	r2, [r3, #60]	; 0x3c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	621a      	str	r2, [r3, #32]
 8009038:	bf00      	nop
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	40012c00 	.word	0x40012c00
 8009048:	40013400 	.word	0x40013400

0800904c <TIM_OC4_SetConfig>:
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	621a      	str	r2, [r3, #32]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	021b      	lsls	r3, r3, #8
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4313      	orrs	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	031b      	lsls	r3, r3, #12
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	613b      	str	r3, [r7, #16]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a11      	ldr	r2, [pc, #68]	; (80090ec <TIM_OC4_SetConfig+0xa0>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d003      	beq.n	80090b4 <TIM_OC4_SetConfig+0x68>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a10      	ldr	r2, [pc, #64]	; (80090f0 <TIM_OC4_SetConfig+0xa4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d109      	bne.n	80090c8 <TIM_OC4_SetConfig+0x7c>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	019b      	lsls	r3, r3, #6
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	61da      	str	r2, [r3, #28]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	641a      	str	r2, [r3, #64]	; 0x40
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	621a      	str	r2, [r3, #32]
 80090e2:	bf00      	nop
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bc80      	pop	{r7}
 80090ea:	4770      	bx	lr
 80090ec:	40012c00 	.word	0x40012c00
 80090f0:	40013400 	.word	0x40013400

080090f4 <TIM_TI1_ConfigInputStage>:
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f023 0201 	bic.w	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	621a      	str	r2, [r3, #32]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f023 030a 	bic.w	r3, r3, #10
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	619a      	str	r2, [r3, #24]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	621a      	str	r2, [r3, #32]
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	bc80      	pop	{r7}
 800914e:	4770      	bx	lr

08009150 <TIM_TI2_ConfigInputStage>:
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f023 0210 	bic.w	r2, r3, #16
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	621a      	str	r2, [r3, #32]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	613b      	str	r3, [r7, #16]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	031b      	lsls	r3, r3, #12
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	4313      	orrs	r3, r2
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	613b      	str	r3, [r7, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	619a      	str	r2, [r3, #24]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	621a      	str	r2, [r3, #32]
 80091a4:	bf00      	nop
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bc80      	pop	{r7}
 80091ac:	4770      	bx	lr

080091ae <TIM_ITRx_SetConfig>:
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f043 0307 	orr.w	r3, r3, #7
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	609a      	str	r2, [r3, #8]
 80091d8:	bf00      	nop
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <TIM_ETR_SetConfig>:
 80091e2:	b480      	push	{r7}
 80091e4:	b087      	sub	sp, #28
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	021a      	lsls	r2, r3, #8
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	431a      	orrs	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	4313      	orrs	r3, r2
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	609a      	str	r2, [r3, #8]
 8009216:	bf00      	nop
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	bc80      	pop	{r7}
 800921e:	4770      	bx	lr

08009220 <TIM_CCxChannelCmd>:
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	2201      	movs	r2, #1
 8009234:	fa02 f303 	lsl.w	r3, r2, r3
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a1a      	ldr	r2, [r3, #32]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	43db      	mvns	r3, r3
 8009242:	401a      	ands	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	621a      	str	r2, [r3, #32]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a1a      	ldr	r2, [r3, #32]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	fa01 f303 	lsl.w	r3, r1, r3
 8009258:	431a      	orrs	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	621a      	str	r2, [r3, #32]
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	bc80      	pop	{r7}
 8009266:	4770      	bx	lr

08009268 <HAL_TIMEx_MasterConfigSynchronization>:
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800927c:	2302      	movs	r3, #2
 800927e:	e050      	b.n	8009322 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1b      	ldr	r2, [pc, #108]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d018      	beq.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a19      	ldr	r2, [pc, #100]	; (8009330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d013      	beq.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d6:	d00e      	beq.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a15      	ldr	r2, [pc, #84]	; (8009334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d009      	beq.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a14      	ldr	r2, [pc, #80]	; (8009338 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d004      	beq.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a12      	ldr	r2, [pc, #72]	; (800933c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d10c      	bne.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092fc:	60bb      	str	r3, [r7, #8]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	4313      	orrs	r3, r2
 8009306:	60bb      	str	r3, [r7, #8]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	609a      	str	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009320:	2300      	movs	r3, #0
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr
 800932c:	40012c00 	.word	0x40012c00
 8009330:	40013400 	.word	0x40013400
 8009334:	40000400 	.word	0x40000400
 8009338:	40000800 	.word	0x40000800
 800933c:	40000c00 	.word	0x40000c00

08009340 <HAL_TIMEx_ConfigBreakDeadTime>:
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009358:	2302      	movs	r3, #2
 800935a:	e03d      	b.n	80093d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	4313      	orrs	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4313      	orrs	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	645a      	str	r2, [r3, #68]	; 0x44
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80093d6:	2300      	movs	r3, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <HAL_TIMEx_CommutCallback>:
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bc80      	pop	{r7}
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIMEx_BreakCallback>:
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr

08009406 <HAL_UART_Init>:
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <HAL_UART_Init+0x12>
 8009414:	2301      	movs	r3, #1
 8009416:	e03f      	b.n	8009498 <HAL_UART_Init+0x92>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <HAL_UART_Init+0x2c>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7fc fa75 	bl	800591c <HAL_UART_MspInit>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2224      	movs	r2, #36	; 0x24
 8009436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009448:	60da      	str	r2, [r3, #12]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fdde 	bl	800a00c <UART_SetConfig>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800945e:	611a      	str	r2, [r3, #16]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800946e:	615a      	str	r2, [r3, #20]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800947e:	60da      	str	r2, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	641a      	str	r2, [r3, #64]	; 0x40
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009496:	2300      	movs	r3, #0
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_UART_Transmit>:
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08a      	sub	sp, #40	; 0x28
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	80fb      	strh	r3, [r7, #6]
 80094b0:	2300      	movs	r3, #0
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d17c      	bne.n	80095ba <HAL_UART_Transmit+0x11a>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_UART_Transmit+0x2c>
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_UART_Transmit+0x30>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e075      	b.n	80095bc <HAL_UART_Transmit+0x11c>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_UART_Transmit+0x3e>
 80094da:	2302      	movs	r3, #2
 80094dc:	e06e      	b.n	80095bc <HAL_UART_Transmit+0x11c>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	641a      	str	r2, [r3, #64]	; 0x40
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2221      	movs	r2, #33	; 0x21
 80094f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094f4:	f7fc fe4e 	bl	8006194 <HAL_GetTick>
 80094f8:	6178      	str	r0, [r7, #20]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	88fa      	ldrh	r2, [r7, #6]
 80094fe:	849a      	strh	r2, [r3, #36]	; 0x24
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	88fa      	ldrh	r2, [r7, #6]
 8009504:	84da      	strh	r2, [r3, #38]	; 0x26
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950e:	d108      	bne.n	8009522 <HAL_UART_Transmit+0x82>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d104      	bne.n	8009522 <HAL_UART_Transmit+0x82>
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e003      	b.n	800952a <HAL_UART_Transmit+0x8a>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	2300      	movs	r3, #0
 8009528:	61bb      	str	r3, [r7, #24]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009532:	e02a      	b.n	800958a <HAL_UART_Transmit+0xea>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2200      	movs	r2, #0
 800953c:	2180      	movs	r1, #128	; 0x80
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fb17 	bl	8009b72 <UART_WaitOnFlagUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <HAL_UART_Transmit+0xae>
 800954a:	2303      	movs	r3, #3
 800954c:	e036      	b.n	80095bc <HAL_UART_Transmit+0x11c>
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <HAL_UART_Transmit+0xcc>
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009562:	605a      	str	r2, [r3, #4]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	3302      	adds	r3, #2
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e007      	b.n	800957c <HAL_UART_Transmit+0xdc>
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	781a      	ldrb	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	605a      	str	r2, [r3, #4]
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	3301      	adds	r3, #1
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	84da      	strh	r2, [r3, #38]	; 0x26
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1cf      	bne.n	8009534 <HAL_UART_Transmit+0x94>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2200      	movs	r2, #0
 800959c:	2140      	movs	r1, #64	; 0x40
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fae7 	bl	8009b72 <UART_WaitOnFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_UART_Transmit+0x10e>
 80095aa:	2303      	movs	r3, #3
 80095ac:	e006      	b.n	80095bc <HAL_UART_Transmit+0x11c>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80095b6:	2300      	movs	r3, #0
 80095b8:	e000      	b.n	80095bc <HAL_UART_Transmit+0x11c>
 80095ba:	2302      	movs	r3, #2
 80095bc:	4618      	mov	r0, r3
 80095be:	3720      	adds	r7, #32
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_UART_Receive_IT>:
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4613      	mov	r3, r2
 80095d0:	80fb      	strh	r3, [r7, #6]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d11d      	bne.n	800961a <HAL_UART_Receive_IT+0x56>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <HAL_UART_Receive_IT+0x26>
 80095e4:	88fb      	ldrh	r3, [r7, #6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_UART_Receive_IT+0x2a>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e016      	b.n	800961c <HAL_UART_Receive_IT+0x58>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_UART_Receive_IT+0x38>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e00f      	b.n	800961c <HAL_UART_Receive_IT+0x58>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	631a      	str	r2, [r3, #48]	; 0x30
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	461a      	mov	r2, r3
 800960e:	68b9      	ldr	r1, [r7, #8]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 faf8 	bl	8009c06 <UART_Start_Receive_IT>
 8009616:	4603      	mov	r3, r0
 8009618:	e000      	b.n	800961c <HAL_UART_Receive_IT+0x58>
 800961a:	2302      	movs	r3, #2
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_UART_Receive_DMA>:
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	80fb      	strh	r3, [r7, #6]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b20      	cmp	r3, #32
 800963c:	d11d      	bne.n	800967a <HAL_UART_Receive_DMA+0x56>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_UART_Receive_DMA+0x26>
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_UART_Receive_DMA+0x2a>
 800964a:	2301      	movs	r3, #1
 800964c:	e016      	b.n	800967c <HAL_UART_Receive_DMA+0x58>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_UART_Receive_DMA+0x38>
 8009658:	2302      	movs	r3, #2
 800965a:	e00f      	b.n	800967c <HAL_UART_Receive_DMA+0x58>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	631a      	str	r2, [r3, #48]	; 0x30
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	461a      	mov	r2, r3
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 fb01 	bl	8009c78 <UART_Start_Receive_DMA>
 8009676:	4603      	mov	r3, r0
 8009678:	e000      	b.n	800967c <HAL_UART_Receive_DMA+0x58>
 800967a:	2302      	movs	r3, #2
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_UART_IRQHandler>:
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	623b      	str	r3, [r7, #32]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	2300      	movs	r3, #0
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	61bb      	str	r3, [r7, #24]
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10d      	bne.n	80096d6 <HAL_UART_IRQHandler+0x52>
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <HAL_UART_IRQHandler+0x52>
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_UART_IRQHandler+0x52>
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fbf2 	bl	8009eb8 <UART_Receive_IT>
 80096d4:	e17b      	b.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 80b1 	beq.w	8009840 <HAL_UART_IRQHandler+0x1bc>
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d105      	bne.n	80096f4 <HAL_UART_IRQHandler+0x70>
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 80a6 	beq.w	8009840 <HAL_UART_IRQHandler+0x1bc>
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <HAL_UART_IRQHandler+0x90>
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <HAL_UART_IRQHandler+0x90>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970c:	f043 0201 	orr.w	r2, r3, #1
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	641a      	str	r2, [r3, #64]	; 0x40
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_UART_IRQHandler+0xb0>
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d005      	beq.n	8009734 <HAL_UART_IRQHandler+0xb0>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972c:	f043 0202 	orr.w	r2, r3, #2
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	641a      	str	r2, [r3, #64]	; 0x40
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <HAL_UART_IRQHandler+0xd0>
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <HAL_UART_IRQHandler+0xd0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	f043 0204 	orr.w	r2, r3, #4
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	641a      	str	r2, [r3, #64]	; 0x40
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	f003 0308 	and.w	r3, r3, #8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00f      	beq.n	800977e <HAL_UART_IRQHandler+0xfa>
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	f003 0320 	and.w	r3, r3, #32
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_UART_IRQHandler+0xee>
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_UART_IRQHandler+0xfa>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	f043 0208 	orr.w	r2, r3, #8
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	641a      	str	r2, [r3, #64]	; 0x40
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 811e 	beq.w	80099c4 <HAL_UART_IRQHandler+0x340>
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	d007      	beq.n	80097a2 <HAL_UART_IRQHandler+0x11e>
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <HAL_UART_IRQHandler+0x11e>
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fb8b 	bl	8009eb8 <UART_Receive_IT>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2300      	moveq	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097bc:	f003 0308 	and.w	r3, r3, #8
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <HAL_UART_IRQHandler+0x146>
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d031      	beq.n	800982e <HAL_UART_IRQHandler+0x1aa>
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 facd 	bl	8009d6a <UART_EndRxTransfer>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d023      	beq.n	8009826 <HAL_UART_IRQHandler+0x1a2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	695a      	ldr	r2, [r3, #20]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ec:	615a      	str	r2, [r3, #20]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d013      	beq.n	800981e <HAL_UART_IRQHandler+0x19a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	4a76      	ldr	r2, [pc, #472]	; (80099d4 <HAL_UART_IRQHandler+0x350>)
 80097fc:	635a      	str	r2, [r3, #52]	; 0x34
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	4618      	mov	r0, r3
 8009804:	f7fc ff12 	bl	800662c <HAL_DMA_Abort_IT>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d016      	beq.n	800983c <HAL_UART_IRQHandler+0x1b8>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	e00e      	b.n	800983c <HAL_UART_IRQHandler+0x1b8>
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fa ff24 	bl	800466c <HAL_UART_ErrorCallback>
 8009824:	e00a      	b.n	800983c <HAL_UART_IRQHandler+0x1b8>
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7fa ff20 	bl	800466c <HAL_UART_ErrorCallback>
 800982c:	e006      	b.n	800983c <HAL_UART_IRQHandler+0x1b8>
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7fa ff1c 	bl	800466c <HAL_UART_ErrorCallback>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
 800983a:	e0c3      	b.n	80099c4 <HAL_UART_IRQHandler+0x340>
 800983c:	bf00      	nop
 800983e:	e0c1      	b.n	80099c4 <HAL_UART_IRQHandler+0x340>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	2b01      	cmp	r3, #1
 8009846:	f040 80a1 	bne.w	800998c <HAL_UART_IRQHandler+0x308>
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 809b 	beq.w	800998c <HAL_UART_IRQHandler+0x308>
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8095 	beq.w	800998c <HAL_UART_IRQHandler+0x308>
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009882:	2b00      	cmp	r3, #0
 8009884:	d04e      	beq.n	8009924 <HAL_UART_IRQHandler+0x2a0>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	823b      	strh	r3, [r7, #16]
 8009890:	8a3b      	ldrh	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 8098 	beq.w	80099c8 <HAL_UART_IRQHandler+0x344>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800989c:	8a3a      	ldrh	r2, [r7, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	f080 8092 	bcs.w	80099c8 <HAL_UART_IRQHandler+0x344>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8a3a      	ldrh	r2, [r7, #16]
 80098a8:	85da      	strh	r2, [r3, #46]	; 0x2e
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d02b      	beq.n	800990c <HAL_UART_IRQHandler+0x288>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098c2:	60da      	str	r2, [r3, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0201 	bic.w	r2, r2, #1
 80098d2:	615a      	str	r2, [r3, #20]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098e2:	615a      	str	r2, [r3, #20]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	631a      	str	r2, [r3, #48]	; 0x30
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0210 	bic.w	r2, r2, #16
 8009900:	60da      	str	r2, [r3, #12]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	4618      	mov	r0, r3
 8009908:	f7fc fe55 	bl	80065b6 <HAL_DMA_Abort>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009914:	b29b      	uxth	r3, r3
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	b29b      	uxth	r3, r3
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f86d 	bl	80099fc <HAL_UARTEx_RxEventCallback>
 8009922:	e051      	b.n	80099c8 <HAL_UART_IRQHandler+0x344>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800992c:	b29b      	uxth	r3, r3
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	827b      	strh	r3, [r7, #18]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009936:	b29b      	uxth	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d047      	beq.n	80099cc <HAL_UART_IRQHandler+0x348>
 800993c:	8a7b      	ldrh	r3, [r7, #18]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d044      	beq.n	80099cc <HAL_UART_IRQHandler+0x348>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009950:	60da      	str	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695a      	ldr	r2, [r3, #20]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	615a      	str	r2, [r3, #20]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	631a      	str	r2, [r3, #48]	; 0x30
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0210 	bic.w	r2, r2, #16
 800997e:	60da      	str	r2, [r3, #12]
 8009980:	8a7b      	ldrh	r3, [r7, #18]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f839 	bl	80099fc <HAL_UARTEx_RxEventCallback>
 800998a:	e01f      	b.n	80099cc <HAL_UART_IRQHandler+0x348>
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_UART_IRQHandler+0x324>
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <HAL_UART_IRQHandler+0x324>
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa22 	bl	8009dea <UART_Transmit_IT>
 80099a6:	e012      	b.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d008      	beq.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa63 	bl	8009e88 <UART_EndTransmit_IT>
 80099c2:	e004      	b.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <HAL_UART_IRQHandler+0x34a>
 80099cc:	bf00      	nop
 80099ce:	3728      	adds	r7, #40	; 0x28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	08009dc3 	.word	0x08009dc3

080099d8 <HAL_UART_TxCpltCallback>:
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr

080099ea <HAL_UART_RxHalfCpltCallback>:
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bc80      	pop	{r7}
 80099fa:	4770      	bx	lr

080099fc <HAL_UARTEx_RxEventCallback>:
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bc80      	pop	{r7}
 8009a10:	4770      	bx	lr

08009a12 <UART_DMAReceiveCplt>:
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d12a      	bne.n	8009a84 <UART_DMAReceiveCplt+0x72>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a42:	60da      	str	r2, [r3, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695a      	ldr	r2, [r3, #20]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	615a      	str	r2, [r3, #20]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695a      	ldr	r2, [r3, #20]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a62:	615a      	str	r2, [r3, #20]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d107      	bne.n	8009a84 <UART_DMAReceiveCplt+0x72>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f022 0210 	bic.w	r2, r2, #16
 8009a82:	60da      	str	r2, [r3, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d106      	bne.n	8009a9a <UART_DMAReceiveCplt+0x88>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a90:	4619      	mov	r1, r3
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff ffb2 	bl	80099fc <HAL_UARTEx_RxEventCallback>
 8009a98:	e002      	b.n	8009aa0 <UART_DMAReceiveCplt+0x8e>
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7fa fdb6 	bl	800460c <HAL_UART_RxCpltCallback>
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <UART_DMARxHalfCplt>:
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d108      	bne.n	8009ad0 <UART_DMARxHalfCplt+0x28>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff ff97 	bl	80099fc <HAL_UARTEx_RxEventCallback>
 8009ace:	e002      	b.n	8009ad6 <UART_DMARxHalfCplt+0x2e>
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7ff ff8a 	bl	80099ea <HAL_UART_RxHalfCpltCallback>
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <UART_DMAError>:
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	60bb      	str	r3, [r7, #8]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bf14      	ite	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	2300      	moveq	r3, #0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b21      	cmp	r3, #33	; 0x21
 8009b10:	d108      	bne.n	8009b24 <UART_DMAError+0x46>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <UART_DMAError+0x46>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	84da      	strh	r2, [r3, #38]	; 0x26
 8009b1e:	68b8      	ldr	r0, [r7, #8]
 8009b20:	f000 f90e 	bl	8009d40 <UART_EndTxTransfer>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bf14      	ite	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	2300      	moveq	r3, #0
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b22      	cmp	r3, #34	; 0x22
 8009b44:	d108      	bne.n	8009b58 <UART_DMAError+0x7a>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <UART_DMAError+0x7a>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f000 f909 	bl	8009d6a <UART_EndRxTransfer>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5c:	f043 0210 	orr.w	r2, r3, #16
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	641a      	str	r2, [r3, #64]	; 0x40
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f7fa fd81 	bl	800466c <HAL_UART_ErrorCallback>
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <UART_WaitOnFlagUntilTimeout>:
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	603b      	str	r3, [r7, #0]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	71fb      	strb	r3, [r7, #7]
 8009b82:	e02c      	b.n	8009bde <UART_WaitOnFlagUntilTimeout+0x6c>
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8a:	d028      	beq.n	8009bde <UART_WaitOnFlagUntilTimeout+0x6c>
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b92:	f7fc faff 	bl	8006194 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d21d      	bcs.n	8009bde <UART_WaitOnFlagUntilTimeout+0x6c>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bb0:	60da      	str	r2, [r3, #12]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	695a      	ldr	r2, [r3, #20]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0201 	bic.w	r2, r2, #1
 8009bc0:	615a      	str	r2, [r3, #20]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e00f      	b.n	8009bfe <UART_WaitOnFlagUntilTimeout+0x8c>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4013      	ands	r3, r2
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	bf0c      	ite	eq
 8009bee:	2301      	moveq	r3, #1
 8009bf0:	2300      	movne	r3, #0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d0c3      	beq.n	8009b84 <UART_WaitOnFlagUntilTimeout+0x12>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <UART_Start_Receive_IT>:
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	4613      	mov	r3, r2
 8009c12:	80fb      	strh	r3, [r7, #6]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	629a      	str	r2, [r3, #40]	; 0x28
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	88fa      	ldrh	r2, [r7, #6]
 8009c1e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	641a      	str	r2, [r3, #64]	; 0x40
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2222      	movs	r2, #34	; 0x22
 8009c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c4a:	60da      	str	r2, [r3, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	695a      	ldr	r2, [r3, #20]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0201 	orr.w	r2, r2, #1
 8009c5a:	615a      	str	r2, [r3, #20]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0220 	orr.w	r2, r2, #32
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bc80      	pop	{r7}
 8009c76:	4770      	bx	lr

08009c78 <UART_Start_Receive_DMA>:
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	80fb      	strh	r3, [r7, #6]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	88fa      	ldrh	r2, [r7, #6]
 8009c90:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2222      	movs	r2, #34	; 0x22
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	4a23      	ldr	r2, [pc, #140]	; (8009d34 <UART_Start_Receive_DMA+0xbc>)
 8009ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	4a22      	ldr	r2, [pc, #136]	; (8009d38 <UART_Start_Receive_DMA+0xc0>)
 8009cae:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	4a21      	ldr	r2, [pc, #132]	; (8009d3c <UART_Start_Receive_DMA+0xc4>)
 8009cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8009cc0:	f107 0308 	add.w	r3, r7, #8
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	f7fc fc0e 	bl	80064f8 <HAL_DMA_Start_IT>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d08:	60da      	str	r2, [r3, #12]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695a      	ldr	r2, [r3, #20]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0201 	orr.w	r2, r2, #1
 8009d18:	615a      	str	r2, [r3, #20]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695a      	ldr	r2, [r3, #20]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d28:	615a      	str	r2, [r3, #20]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	08009a13 	.word	0x08009a13
 8009d38:	08009aa9 	.word	0x08009aa9
 8009d3c:	08009adf 	.word	0x08009adf

08009d40 <UART_EndTxTransfer>:
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d56:	60da      	str	r2, [r3, #12]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bc80      	pop	{r7}
 8009d68:	4770      	bx	lr

08009d6a <UART_EndRxTransfer>:
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
 8009d90:	615a      	str	r2, [r3, #20]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d107      	bne.n	8009daa <UART_EndRxTransfer+0x40>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0210 	bic.w	r2, r2, #16
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr

08009dc2 <UART_DMAAbortOnError>:
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	84da      	strh	r2, [r3, #38]	; 0x26
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7fa fc45 	bl	800466c <HAL_UART_ErrorCallback>
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <UART_Transmit_IT>:
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b21      	cmp	r3, #33	; 0x21
 8009dfc:	d13e      	bne.n	8009e7c <UART_Transmit_IT+0x92>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e06:	d114      	bne.n	8009e32 <UART_Transmit_IT+0x48>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d110      	bne.n	8009e32 <UART_Transmit_IT+0x48>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a1b      	ldr	r3, [r3, #32]
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e24:	605a      	str	r2, [r3, #4]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	1c9a      	adds	r2, r3, #2
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	621a      	str	r2, [r3, #32]
 8009e30:	e008      	b.n	8009e44 <UART_Transmit_IT+0x5a>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	1c59      	adds	r1, r3, #1
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	6211      	str	r1, [r2, #32]
 8009e3c:	781a      	ldrb	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4619      	mov	r1, r3
 8009e52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10f      	bne.n	8009e78 <UART_Transmit_IT+0x8e>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e66:	60da      	str	r2, [r3, #12]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e76:	60da      	str	r2, [r3, #12]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e000      	b.n	8009e7e <UART_Transmit_IT+0x94>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr

08009e88 <UART_EndTransmit_IT>:
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e9e:	60da      	str	r2, [r3, #12]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff fd95 	bl	80099d8 <HAL_UART_TxCpltCallback>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <UART_Receive_IT>:
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b22      	cmp	r3, #34	; 0x22
 8009eca:	f040 8099 	bne.w	800a000 <UART_Receive_IT+0x148>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed6:	d117      	bne.n	8009f08 <UART_Receive_IT+0x50>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d113      	bne.n	8009f08 <UART_Receive_IT+0x50>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee8:	613b      	str	r3, [r7, #16]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	801a      	strh	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f00:	1c9a      	adds	r2, r3, #2
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	629a      	str	r2, [r3, #40]	; 0x28
 8009f06:	e026      	b.n	8009f56 <UART_Receive_IT+0x9e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	613b      	str	r3, [r7, #16]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f1a:	d007      	beq.n	8009f2c <UART_Receive_IT+0x74>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <UART_Receive_IT+0x82>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <UART_Receive_IT+0x82>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	701a      	strb	r2, [r3, #0]
 8009f38:	e008      	b.n	8009f4c <UART_Receive_IT+0x94>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	629a      	str	r2, [r3, #40]	; 0x28
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	4619      	mov	r1, r3
 8009f64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d148      	bne.n	8009ffc <UART_Receive_IT+0x144>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68da      	ldr	r2, [r3, #12]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0220 	bic.w	r2, r2, #32
 8009f78:	60da      	str	r2, [r3, #12]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f88:	60da      	str	r2, [r3, #12]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	695a      	ldr	r2, [r3, #20]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0201 	bic.w	r2, r2, #1
 8009f98:	615a      	str	r2, [r3, #20]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d123      	bne.n	8009ff2 <UART_Receive_IT+0x13a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	631a      	str	r2, [r3, #48]	; 0x30
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0210 	bic.w	r2, r2, #16
 8009fbe:	60da      	str	r2, [r3, #12]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0310 	and.w	r3, r3, #16
 8009fca:	2b10      	cmp	r3, #16
 8009fcc:	d10a      	bne.n	8009fe4 <UART_Receive_IT+0x12c>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff fd06 	bl	80099fc <HAL_UARTEx_RxEventCallback>
 8009ff0:	e002      	b.n	8009ff8 <UART_Receive_IT+0x140>
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7fa fb0a 	bl	800460c <HAL_UART_RxCpltCallback>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e002      	b.n	800a002 <UART_Receive_IT+0x14a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e000      	b.n	800a002 <UART_Receive_IT+0x14a>
 800a000:	2302      	movs	r3, #2
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <UART_SetConfig>:
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	611a      	str	r2, [r3, #16]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60bb      	str	r3, [r7, #8]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a046:	f023 030c 	bic.w	r3, r3, #12
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6812      	ldr	r2, [r2, #0]
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	430b      	orrs	r3, r1
 800a052:	60d3      	str	r3, [r2, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	615a      	str	r2, [r3, #20]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a2c      	ldr	r2, [pc, #176]	; (800a120 <UART_SetConfig+0x114>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d103      	bne.n	800a07c <UART_SetConfig+0x70>
 800a074:	f7fe f83c 	bl	80080f0 <HAL_RCC_GetPCLK2Freq>
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	e002      	b.n	800a082 <UART_SetConfig+0x76>
 800a07c:	f7fe f824 	bl	80080c8 <HAL_RCC_GetPCLK1Freq>
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009a      	lsls	r2, r3, #2
 800a08c:	441a      	add	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	fbb2 f3f3 	udiv	r3, r2, r3
 800a098:	4a22      	ldr	r2, [pc, #136]	; (800a124 <UART_SetConfig+0x118>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	0119      	lsls	r1, r3, #4
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009a      	lsls	r2, r3, #2
 800a0ac:	441a      	add	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <UART_SetConfig+0x118>)
 800a0ba:	fba3 0302 	umull	r0, r3, r3, r2
 800a0be:	095b      	lsrs	r3, r3, #5
 800a0c0:	2064      	movs	r0, #100	; 0x64
 800a0c2:	fb00 f303 	mul.w	r3, r0, r3
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	3332      	adds	r3, #50	; 0x32
 800a0cc:	4a15      	ldr	r2, [pc, #84]	; (800a124 <UART_SetConfig+0x118>)
 800a0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d2:	095b      	lsrs	r3, r3, #5
 800a0d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0d8:	4419      	add	r1, r3
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009a      	lsls	r2, r3, #2
 800a0e4:	441a      	add	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <UART_SetConfig+0x118>)
 800a0f2:	fba3 0302 	umull	r0, r3, r3, r2
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	2064      	movs	r0, #100	; 0x64
 800a0fa:	fb00 f303 	mul.w	r3, r0, r3
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	3332      	adds	r3, #50	; 0x32
 800a104:	4a07      	ldr	r2, [pc, #28]	; (800a124 <UART_SetConfig+0x118>)
 800a106:	fba2 2303 	umull	r2, r3, r2, r3
 800a10a:	095b      	lsrs	r3, r3, #5
 800a10c:	f003 020f 	and.w	r2, r3, #15
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	440a      	add	r2, r1
 800a116:	609a      	str	r2, [r3, #8]
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40013800 	.word	0x40013800
 800a124:	51eb851f 	.word	0x51eb851f

0800a128 <__assert_func>:
 800a128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a12a:	4614      	mov	r4, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <__assert_func+0x2c>)
 800a130:	4605      	mov	r5, r0
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68d8      	ldr	r0, [r3, #12]
 800a136:	b14c      	cbz	r4, 800a14c <__assert_func+0x24>
 800a138:	4b07      	ldr	r3, [pc, #28]	; (800a158 <__assert_func+0x30>)
 800a13a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a13e:	9100      	str	r1, [sp, #0]
 800a140:	462b      	mov	r3, r5
 800a142:	4906      	ldr	r1, [pc, #24]	; (800a15c <__assert_func+0x34>)
 800a144:	f000 f814 	bl	800a170 <fiprintf>
 800a148:	f000 fc2c 	bl	800a9a4 <abort>
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <__assert_func+0x38>)
 800a14e:	461c      	mov	r4, r3
 800a150:	e7f3      	b.n	800a13a <__assert_func+0x12>
 800a152:	bf00      	nop
 800a154:	20000018 	.word	0x20000018
 800a158:	0800cfb4 	.word	0x0800cfb4
 800a15c:	0800cfc1 	.word	0x0800cfc1
 800a160:	0800cfef 	.word	0x0800cfef

0800a164 <__errno>:
 800a164:	4b01      	ldr	r3, [pc, #4]	; (800a16c <__errno+0x8>)
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20000018 	.word	0x20000018

0800a170 <fiprintf>:
 800a170:	b40e      	push	{r1, r2, r3}
 800a172:	b503      	push	{r0, r1, lr}
 800a174:	4601      	mov	r1, r0
 800a176:	ab03      	add	r3, sp, #12
 800a178:	4805      	ldr	r0, [pc, #20]	; (800a190 <fiprintf+0x20>)
 800a17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a17e:	6800      	ldr	r0, [r0, #0]
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	f000 f869 	bl	800a258 <_vfiprintf_r>
 800a186:	b002      	add	sp, #8
 800a188:	f85d eb04 	ldr.w	lr, [sp], #4
 800a18c:	b003      	add	sp, #12
 800a18e:	4770      	bx	lr
 800a190:	20000018 	.word	0x20000018

0800a194 <__libc_init_array>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	2600      	movs	r6, #0
 800a198:	4d0c      	ldr	r5, [pc, #48]	; (800a1cc <__libc_init_array+0x38>)
 800a19a:	4c0d      	ldr	r4, [pc, #52]	; (800a1d0 <__libc_init_array+0x3c>)
 800a19c:	1b64      	subs	r4, r4, r5
 800a19e:	10a4      	asrs	r4, r4, #2
 800a1a0:	42a6      	cmp	r6, r4
 800a1a2:	d109      	bne.n	800a1b8 <__libc_init_array+0x24>
 800a1a4:	f002 fbb2 	bl	800c90c <_init>
 800a1a8:	2600      	movs	r6, #0
 800a1aa:	4d0a      	ldr	r5, [pc, #40]	; (800a1d4 <__libc_init_array+0x40>)
 800a1ac:	4c0a      	ldr	r4, [pc, #40]	; (800a1d8 <__libc_init_array+0x44>)
 800a1ae:	1b64      	subs	r4, r4, r5
 800a1b0:	10a4      	asrs	r4, r4, #2
 800a1b2:	42a6      	cmp	r6, r4
 800a1b4:	d105      	bne.n	800a1c2 <__libc_init_array+0x2e>
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1bc:	4798      	blx	r3
 800a1be:	3601      	adds	r6, #1
 800a1c0:	e7ee      	b.n	800a1a0 <__libc_init_array+0xc>
 800a1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1c6:	4798      	blx	r3
 800a1c8:	3601      	adds	r6, #1
 800a1ca:	e7f2      	b.n	800a1b2 <__libc_init_array+0x1e>
 800a1cc:	0800d2a0 	.word	0x0800d2a0
 800a1d0:	0800d2a0 	.word	0x0800d2a0
 800a1d4:	0800d2a0 	.word	0x0800d2a0
 800a1d8:	0800d2a4 	.word	0x0800d2a4

0800a1dc <memcpy>:
 800a1dc:	440a      	add	r2, r1
 800a1de:	4291      	cmp	r1, r2
 800a1e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1e4:	d100      	bne.n	800a1e8 <memcpy+0xc>
 800a1e6:	4770      	bx	lr
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ee:	4291      	cmp	r1, r2
 800a1f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1f4:	d1f9      	bne.n	800a1ea <memcpy+0xe>
 800a1f6:	bd10      	pop	{r4, pc}

0800a1f8 <memset>:
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	4402      	add	r2, r0
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d100      	bne.n	800a202 <memset+0xa>
 800a200:	4770      	bx	lr
 800a202:	f803 1b01 	strb.w	r1, [r3], #1
 800a206:	e7f9      	b.n	800a1fc <memset+0x4>

0800a208 <__sfputc_r>:
 800a208:	6893      	ldr	r3, [r2, #8]
 800a20a:	b410      	push	{r4}
 800a20c:	3b01      	subs	r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	6093      	str	r3, [r2, #8]
 800a212:	da07      	bge.n	800a224 <__sfputc_r+0x1c>
 800a214:	6994      	ldr	r4, [r2, #24]
 800a216:	42a3      	cmp	r3, r4
 800a218:	db01      	blt.n	800a21e <__sfputc_r+0x16>
 800a21a:	290a      	cmp	r1, #10
 800a21c:	d102      	bne.n	800a224 <__sfputc_r+0x1c>
 800a21e:	bc10      	pop	{r4}
 800a220:	f000 bb00 	b.w	800a824 <__swbuf_r>
 800a224:	6813      	ldr	r3, [r2, #0]
 800a226:	1c58      	adds	r0, r3, #1
 800a228:	6010      	str	r0, [r2, #0]
 800a22a:	7019      	strb	r1, [r3, #0]
 800a22c:	4608      	mov	r0, r1
 800a22e:	bc10      	pop	{r4}
 800a230:	4770      	bx	lr

0800a232 <__sfputs_r>:
 800a232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a234:	4606      	mov	r6, r0
 800a236:	460f      	mov	r7, r1
 800a238:	4614      	mov	r4, r2
 800a23a:	18d5      	adds	r5, r2, r3
 800a23c:	42ac      	cmp	r4, r5
 800a23e:	d101      	bne.n	800a244 <__sfputs_r+0x12>
 800a240:	2000      	movs	r0, #0
 800a242:	e007      	b.n	800a254 <__sfputs_r+0x22>
 800a244:	463a      	mov	r2, r7
 800a246:	4630      	mov	r0, r6
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	f7ff ffdc 	bl	800a208 <__sfputc_r>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d1f3      	bne.n	800a23c <__sfputs_r+0xa>
 800a254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a258 <_vfiprintf_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	460d      	mov	r5, r1
 800a25e:	4614      	mov	r4, r2
 800a260:	4698      	mov	r8, r3
 800a262:	4606      	mov	r6, r0
 800a264:	b09d      	sub	sp, #116	; 0x74
 800a266:	b118      	cbz	r0, 800a270 <_vfiprintf_r+0x18>
 800a268:	6983      	ldr	r3, [r0, #24]
 800a26a:	b90b      	cbnz	r3, 800a270 <_vfiprintf_r+0x18>
 800a26c:	f000 fcb8 	bl	800abe0 <__sinit>
 800a270:	4b89      	ldr	r3, [pc, #548]	; (800a498 <_vfiprintf_r+0x240>)
 800a272:	429d      	cmp	r5, r3
 800a274:	d11b      	bne.n	800a2ae <_vfiprintf_r+0x56>
 800a276:	6875      	ldr	r5, [r6, #4]
 800a278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a27a:	07d9      	lsls	r1, r3, #31
 800a27c:	d405      	bmi.n	800a28a <_vfiprintf_r+0x32>
 800a27e:	89ab      	ldrh	r3, [r5, #12]
 800a280:	059a      	lsls	r2, r3, #22
 800a282:	d402      	bmi.n	800a28a <_vfiprintf_r+0x32>
 800a284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a286:	f000 fd49 	bl	800ad1c <__retarget_lock_acquire_recursive>
 800a28a:	89ab      	ldrh	r3, [r5, #12]
 800a28c:	071b      	lsls	r3, r3, #28
 800a28e:	d501      	bpl.n	800a294 <_vfiprintf_r+0x3c>
 800a290:	692b      	ldr	r3, [r5, #16]
 800a292:	b9eb      	cbnz	r3, 800a2d0 <_vfiprintf_r+0x78>
 800a294:	4629      	mov	r1, r5
 800a296:	4630      	mov	r0, r6
 800a298:	f000 fb16 	bl	800a8c8 <__swsetup_r>
 800a29c:	b1c0      	cbz	r0, 800a2d0 <_vfiprintf_r+0x78>
 800a29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a0:	07dc      	lsls	r4, r3, #31
 800a2a2:	d50e      	bpl.n	800a2c2 <_vfiprintf_r+0x6a>
 800a2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a8:	b01d      	add	sp, #116	; 0x74
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	4b7b      	ldr	r3, [pc, #492]	; (800a49c <_vfiprintf_r+0x244>)
 800a2b0:	429d      	cmp	r5, r3
 800a2b2:	d101      	bne.n	800a2b8 <_vfiprintf_r+0x60>
 800a2b4:	68b5      	ldr	r5, [r6, #8]
 800a2b6:	e7df      	b.n	800a278 <_vfiprintf_r+0x20>
 800a2b8:	4b79      	ldr	r3, [pc, #484]	; (800a4a0 <_vfiprintf_r+0x248>)
 800a2ba:	429d      	cmp	r5, r3
 800a2bc:	bf08      	it	eq
 800a2be:	68f5      	ldreq	r5, [r6, #12]
 800a2c0:	e7da      	b.n	800a278 <_vfiprintf_r+0x20>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	0598      	lsls	r0, r3, #22
 800a2c6:	d4ed      	bmi.n	800a2a4 <_vfiprintf_r+0x4c>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ca:	f000 fd28 	bl	800ad1e <__retarget_lock_release_recursive>
 800a2ce:	e7e9      	b.n	800a2a4 <_vfiprintf_r+0x4c>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2da:	2330      	movs	r3, #48	; 0x30
 800a2dc:	f04f 0901 	mov.w	r9, #1
 800a2e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a4a4 <_vfiprintf_r+0x24c>
 800a2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f4:	b10a      	cbz	r2, 800a2fa <_vfiprintf_r+0xa2>
 800a2f6:	2a25      	cmp	r2, #37	; 0x25
 800a2f8:	d1f9      	bne.n	800a2ee <_vfiprintf_r+0x96>
 800a2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2fe:	d00b      	beq.n	800a318 <_vfiprintf_r+0xc0>
 800a300:	465b      	mov	r3, fp
 800a302:	4622      	mov	r2, r4
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ff93 	bl	800a232 <__sfputs_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	f000 80aa 	beq.w	800a466 <_vfiprintf_r+0x20e>
 800a312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a314:	445a      	add	r2, fp
 800a316:	9209      	str	r2, [sp, #36]	; 0x24
 800a318:	f89a 3000 	ldrb.w	r3, [sl]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 80a2 	beq.w	800a466 <_vfiprintf_r+0x20e>
 800a322:	2300      	movs	r3, #0
 800a324:	f04f 32ff 	mov.w	r2, #4294967295
 800a328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a338:	931a      	str	r3, [sp, #104]	; 0x68
 800a33a:	4654      	mov	r4, sl
 800a33c:	2205      	movs	r2, #5
 800a33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a342:	4858      	ldr	r0, [pc, #352]	; (800a4a4 <_vfiprintf_r+0x24c>)
 800a344:	f000 fd52 	bl	800adec <memchr>
 800a348:	9a04      	ldr	r2, [sp, #16]
 800a34a:	b9d8      	cbnz	r0, 800a384 <_vfiprintf_r+0x12c>
 800a34c:	06d1      	lsls	r1, r2, #27
 800a34e:	bf44      	itt	mi
 800a350:	2320      	movmi	r3, #32
 800a352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a356:	0713      	lsls	r3, r2, #28
 800a358:	bf44      	itt	mi
 800a35a:	232b      	movmi	r3, #43	; 0x2b
 800a35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a360:	f89a 3000 	ldrb.w	r3, [sl]
 800a364:	2b2a      	cmp	r3, #42	; 0x2a
 800a366:	d015      	beq.n	800a394 <_vfiprintf_r+0x13c>
 800a368:	4654      	mov	r4, sl
 800a36a:	2000      	movs	r0, #0
 800a36c:	f04f 0c0a 	mov.w	ip, #10
 800a370:	9a07      	ldr	r2, [sp, #28]
 800a372:	4621      	mov	r1, r4
 800a374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a378:	3b30      	subs	r3, #48	; 0x30
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d94e      	bls.n	800a41c <_vfiprintf_r+0x1c4>
 800a37e:	b1b0      	cbz	r0, 800a3ae <_vfiprintf_r+0x156>
 800a380:	9207      	str	r2, [sp, #28]
 800a382:	e014      	b.n	800a3ae <_vfiprintf_r+0x156>
 800a384:	eba0 0308 	sub.w	r3, r0, r8
 800a388:	fa09 f303 	lsl.w	r3, r9, r3
 800a38c:	4313      	orrs	r3, r2
 800a38e:	46a2      	mov	sl, r4
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	e7d2      	b.n	800a33a <_vfiprintf_r+0xe2>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d19      	adds	r1, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	9103      	str	r1, [sp, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfbb      	ittet	lt
 800a3a0:	425b      	neglt	r3, r3
 800a3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a6:	9307      	strge	r3, [sp, #28]
 800a3a8:	9307      	strlt	r3, [sp, #28]
 800a3aa:	bfb8      	it	lt
 800a3ac:	9204      	strlt	r2, [sp, #16]
 800a3ae:	7823      	ldrb	r3, [r4, #0]
 800a3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3b2:	d10c      	bne.n	800a3ce <_vfiprintf_r+0x176>
 800a3b4:	7863      	ldrb	r3, [r4, #1]
 800a3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b8:	d135      	bne.n	800a426 <_vfiprintf_r+0x1ce>
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	3402      	adds	r4, #2
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	bfb8      	it	lt
 800a3c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a4a8 <_vfiprintf_r+0x250>
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	7821      	ldrb	r1, [r4, #0]
 800a3d8:	f000 fd08 	bl	800adec <memchr>
 800a3dc:	b140      	cbz	r0, 800a3f0 <_vfiprintf_r+0x198>
 800a3de:	2340      	movs	r3, #64	; 0x40
 800a3e0:	eba0 000a 	sub.w	r0, r0, sl
 800a3e4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3e8:	9b04      	ldr	r3, [sp, #16]
 800a3ea:	3401      	adds	r4, #1
 800a3ec:	4303      	orrs	r3, r0
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f4:	2206      	movs	r2, #6
 800a3f6:	482d      	ldr	r0, [pc, #180]	; (800a4ac <_vfiprintf_r+0x254>)
 800a3f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3fc:	f000 fcf6 	bl	800adec <memchr>
 800a400:	2800      	cmp	r0, #0
 800a402:	d03f      	beq.n	800a484 <_vfiprintf_r+0x22c>
 800a404:	4b2a      	ldr	r3, [pc, #168]	; (800a4b0 <_vfiprintf_r+0x258>)
 800a406:	bb1b      	cbnz	r3, 800a450 <_vfiprintf_r+0x1f8>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	3307      	adds	r3, #7
 800a40c:	f023 0307 	bic.w	r3, r3, #7
 800a410:	3308      	adds	r3, #8
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a416:	443b      	add	r3, r7
 800a418:	9309      	str	r3, [sp, #36]	; 0x24
 800a41a:	e767      	b.n	800a2ec <_vfiprintf_r+0x94>
 800a41c:	460c      	mov	r4, r1
 800a41e:	2001      	movs	r0, #1
 800a420:	fb0c 3202 	mla	r2, ip, r2, r3
 800a424:	e7a5      	b.n	800a372 <_vfiprintf_r+0x11a>
 800a426:	2300      	movs	r3, #0
 800a428:	f04f 0c0a 	mov.w	ip, #10
 800a42c:	4619      	mov	r1, r3
 800a42e:	3401      	adds	r4, #1
 800a430:	9305      	str	r3, [sp, #20]
 800a432:	4620      	mov	r0, r4
 800a434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a438:	3a30      	subs	r2, #48	; 0x30
 800a43a:	2a09      	cmp	r2, #9
 800a43c:	d903      	bls.n	800a446 <_vfiprintf_r+0x1ee>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0c5      	beq.n	800a3ce <_vfiprintf_r+0x176>
 800a442:	9105      	str	r1, [sp, #20]
 800a444:	e7c3      	b.n	800a3ce <_vfiprintf_r+0x176>
 800a446:	4604      	mov	r4, r0
 800a448:	2301      	movs	r3, #1
 800a44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a44e:	e7f0      	b.n	800a432 <_vfiprintf_r+0x1da>
 800a450:	ab03      	add	r3, sp, #12
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	462a      	mov	r2, r5
 800a456:	4630      	mov	r0, r6
 800a458:	4b16      	ldr	r3, [pc, #88]	; (800a4b4 <_vfiprintf_r+0x25c>)
 800a45a:	a904      	add	r1, sp, #16
 800a45c:	f3af 8000 	nop.w
 800a460:	4607      	mov	r7, r0
 800a462:	1c78      	adds	r0, r7, #1
 800a464:	d1d6      	bne.n	800a414 <_vfiprintf_r+0x1bc>
 800a466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a468:	07d9      	lsls	r1, r3, #31
 800a46a:	d405      	bmi.n	800a478 <_vfiprintf_r+0x220>
 800a46c:	89ab      	ldrh	r3, [r5, #12]
 800a46e:	059a      	lsls	r2, r3, #22
 800a470:	d402      	bmi.n	800a478 <_vfiprintf_r+0x220>
 800a472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a474:	f000 fc53 	bl	800ad1e <__retarget_lock_release_recursive>
 800a478:	89ab      	ldrh	r3, [r5, #12]
 800a47a:	065b      	lsls	r3, r3, #25
 800a47c:	f53f af12 	bmi.w	800a2a4 <_vfiprintf_r+0x4c>
 800a480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a482:	e711      	b.n	800a2a8 <_vfiprintf_r+0x50>
 800a484:	ab03      	add	r3, sp, #12
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	462a      	mov	r2, r5
 800a48a:	4630      	mov	r0, r6
 800a48c:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <_vfiprintf_r+0x25c>)
 800a48e:	a904      	add	r1, sp, #16
 800a490:	f000 f882 	bl	800a598 <_printf_i>
 800a494:	e7e4      	b.n	800a460 <_vfiprintf_r+0x208>
 800a496:	bf00      	nop
 800a498:	0800d048 	.word	0x0800d048
 800a49c:	0800d068 	.word	0x0800d068
 800a4a0:	0800d028 	.word	0x0800d028
 800a4a4:	0800cff4 	.word	0x0800cff4
 800a4a8:	0800cffa 	.word	0x0800cffa
 800a4ac:	0800cffe 	.word	0x0800cffe
 800a4b0:	00000000 	.word	0x00000000
 800a4b4:	0800a233 	.word	0x0800a233

0800a4b8 <_printf_common>:
 800a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	4616      	mov	r6, r2
 800a4be:	4699      	mov	r9, r3
 800a4c0:	688a      	ldr	r2, [r1, #8]
 800a4c2:	690b      	ldr	r3, [r1, #16]
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	bfb8      	it	lt
 800a4ca:	4613      	movlt	r3, r2
 800a4cc:	6033      	str	r3, [r6, #0]
 800a4ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4d8:	b10a      	cbz	r2, 800a4de <_printf_common+0x26>
 800a4da:	3301      	adds	r3, #1
 800a4dc:	6033      	str	r3, [r6, #0]
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	0699      	lsls	r1, r3, #26
 800a4e2:	bf42      	ittt	mi
 800a4e4:	6833      	ldrmi	r3, [r6, #0]
 800a4e6:	3302      	addmi	r3, #2
 800a4e8:	6033      	strmi	r3, [r6, #0]
 800a4ea:	6825      	ldr	r5, [r4, #0]
 800a4ec:	f015 0506 	ands.w	r5, r5, #6
 800a4f0:	d106      	bne.n	800a500 <_printf_common+0x48>
 800a4f2:	f104 0a19 	add.w	sl, r4, #25
 800a4f6:	68e3      	ldr	r3, [r4, #12]
 800a4f8:	6832      	ldr	r2, [r6, #0]
 800a4fa:	1a9b      	subs	r3, r3, r2
 800a4fc:	42ab      	cmp	r3, r5
 800a4fe:	dc28      	bgt.n	800a552 <_printf_common+0x9a>
 800a500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a504:	1e13      	subs	r3, r2, #0
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	bf18      	it	ne
 800a50a:	2301      	movne	r3, #1
 800a50c:	0692      	lsls	r2, r2, #26
 800a50e:	d42d      	bmi.n	800a56c <_printf_common+0xb4>
 800a510:	4649      	mov	r1, r9
 800a512:	4638      	mov	r0, r7
 800a514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a518:	47c0      	blx	r8
 800a51a:	3001      	adds	r0, #1
 800a51c:	d020      	beq.n	800a560 <_printf_common+0xa8>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	68e5      	ldr	r5, [r4, #12]
 800a522:	f003 0306 	and.w	r3, r3, #6
 800a526:	2b04      	cmp	r3, #4
 800a528:	bf18      	it	ne
 800a52a:	2500      	movne	r5, #0
 800a52c:	6832      	ldr	r2, [r6, #0]
 800a52e:	f04f 0600 	mov.w	r6, #0
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	bf08      	it	eq
 800a536:	1aad      	subeq	r5, r5, r2
 800a538:	6922      	ldr	r2, [r4, #16]
 800a53a:	bf08      	it	eq
 800a53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a540:	4293      	cmp	r3, r2
 800a542:	bfc4      	itt	gt
 800a544:	1a9b      	subgt	r3, r3, r2
 800a546:	18ed      	addgt	r5, r5, r3
 800a548:	341a      	adds	r4, #26
 800a54a:	42b5      	cmp	r5, r6
 800a54c:	d11a      	bne.n	800a584 <_printf_common+0xcc>
 800a54e:	2000      	movs	r0, #0
 800a550:	e008      	b.n	800a564 <_printf_common+0xac>
 800a552:	2301      	movs	r3, #1
 800a554:	4652      	mov	r2, sl
 800a556:	4649      	mov	r1, r9
 800a558:	4638      	mov	r0, r7
 800a55a:	47c0      	blx	r8
 800a55c:	3001      	adds	r0, #1
 800a55e:	d103      	bne.n	800a568 <_printf_common+0xb0>
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a568:	3501      	adds	r5, #1
 800a56a:	e7c4      	b.n	800a4f6 <_printf_common+0x3e>
 800a56c:	2030      	movs	r0, #48	; 0x30
 800a56e:	18e1      	adds	r1, r4, r3
 800a570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a57a:	4422      	add	r2, r4
 800a57c:	3302      	adds	r3, #2
 800a57e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a582:	e7c5      	b.n	800a510 <_printf_common+0x58>
 800a584:	2301      	movs	r3, #1
 800a586:	4622      	mov	r2, r4
 800a588:	4649      	mov	r1, r9
 800a58a:	4638      	mov	r0, r7
 800a58c:	47c0      	blx	r8
 800a58e:	3001      	adds	r0, #1
 800a590:	d0e6      	beq.n	800a560 <_printf_common+0xa8>
 800a592:	3601      	adds	r6, #1
 800a594:	e7d9      	b.n	800a54a <_printf_common+0x92>
	...

0800a598 <_printf_i>:
 800a598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a59c:	7e0f      	ldrb	r7, [r1, #24]
 800a59e:	4691      	mov	r9, r2
 800a5a0:	2f78      	cmp	r7, #120	; 0x78
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	469a      	mov	sl, r3
 800a5a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5ae:	d807      	bhi.n	800a5c0 <_printf_i+0x28>
 800a5b0:	2f62      	cmp	r7, #98	; 0x62
 800a5b2:	d80a      	bhi.n	800a5ca <_printf_i+0x32>
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	f000 80d9 	beq.w	800a76c <_printf_i+0x1d4>
 800a5ba:	2f58      	cmp	r7, #88	; 0x58
 800a5bc:	f000 80a4 	beq.w	800a708 <_printf_i+0x170>
 800a5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5c8:	e03a      	b.n	800a640 <_printf_i+0xa8>
 800a5ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5ce:	2b15      	cmp	r3, #21
 800a5d0:	d8f6      	bhi.n	800a5c0 <_printf_i+0x28>
 800a5d2:	a101      	add	r1, pc, #4	; (adr r1, 800a5d8 <_printf_i+0x40>)
 800a5d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5d8:	0800a631 	.word	0x0800a631
 800a5dc:	0800a645 	.word	0x0800a645
 800a5e0:	0800a5c1 	.word	0x0800a5c1
 800a5e4:	0800a5c1 	.word	0x0800a5c1
 800a5e8:	0800a5c1 	.word	0x0800a5c1
 800a5ec:	0800a5c1 	.word	0x0800a5c1
 800a5f0:	0800a645 	.word	0x0800a645
 800a5f4:	0800a5c1 	.word	0x0800a5c1
 800a5f8:	0800a5c1 	.word	0x0800a5c1
 800a5fc:	0800a5c1 	.word	0x0800a5c1
 800a600:	0800a5c1 	.word	0x0800a5c1
 800a604:	0800a753 	.word	0x0800a753
 800a608:	0800a675 	.word	0x0800a675
 800a60c:	0800a735 	.word	0x0800a735
 800a610:	0800a5c1 	.word	0x0800a5c1
 800a614:	0800a5c1 	.word	0x0800a5c1
 800a618:	0800a775 	.word	0x0800a775
 800a61c:	0800a5c1 	.word	0x0800a5c1
 800a620:	0800a675 	.word	0x0800a675
 800a624:	0800a5c1 	.word	0x0800a5c1
 800a628:	0800a5c1 	.word	0x0800a5c1
 800a62c:	0800a73d 	.word	0x0800a73d
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	1d1a      	adds	r2, r3, #4
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	602a      	str	r2, [r5, #0]
 800a638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a63c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a640:	2301      	movs	r3, #1
 800a642:	e0a4      	b.n	800a78e <_printf_i+0x1f6>
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	6829      	ldr	r1, [r5, #0]
 800a648:	0606      	lsls	r6, r0, #24
 800a64a:	f101 0304 	add.w	r3, r1, #4
 800a64e:	d50a      	bpl.n	800a666 <_printf_i+0xce>
 800a650:	680e      	ldr	r6, [r1, #0]
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	2e00      	cmp	r6, #0
 800a656:	da03      	bge.n	800a660 <_printf_i+0xc8>
 800a658:	232d      	movs	r3, #45	; 0x2d
 800a65a:	4276      	negs	r6, r6
 800a65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a660:	230a      	movs	r3, #10
 800a662:	485e      	ldr	r0, [pc, #376]	; (800a7dc <_printf_i+0x244>)
 800a664:	e019      	b.n	800a69a <_printf_i+0x102>
 800a666:	680e      	ldr	r6, [r1, #0]
 800a668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	bf18      	it	ne
 800a670:	b236      	sxthne	r6, r6
 800a672:	e7ef      	b.n	800a654 <_printf_i+0xbc>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	1d19      	adds	r1, r3, #4
 800a67a:	6029      	str	r1, [r5, #0]
 800a67c:	0601      	lsls	r1, r0, #24
 800a67e:	d501      	bpl.n	800a684 <_printf_i+0xec>
 800a680:	681e      	ldr	r6, [r3, #0]
 800a682:	e002      	b.n	800a68a <_printf_i+0xf2>
 800a684:	0646      	lsls	r6, r0, #25
 800a686:	d5fb      	bpl.n	800a680 <_printf_i+0xe8>
 800a688:	881e      	ldrh	r6, [r3, #0]
 800a68a:	2f6f      	cmp	r7, #111	; 0x6f
 800a68c:	bf0c      	ite	eq
 800a68e:	2308      	moveq	r3, #8
 800a690:	230a      	movne	r3, #10
 800a692:	4852      	ldr	r0, [pc, #328]	; (800a7dc <_printf_i+0x244>)
 800a694:	2100      	movs	r1, #0
 800a696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a69a:	6865      	ldr	r5, [r4, #4]
 800a69c:	2d00      	cmp	r5, #0
 800a69e:	bfa8      	it	ge
 800a6a0:	6821      	ldrge	r1, [r4, #0]
 800a6a2:	60a5      	str	r5, [r4, #8]
 800a6a4:	bfa4      	itt	ge
 800a6a6:	f021 0104 	bicge.w	r1, r1, #4
 800a6aa:	6021      	strge	r1, [r4, #0]
 800a6ac:	b90e      	cbnz	r6, 800a6b2 <_printf_i+0x11a>
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	d04d      	beq.n	800a74e <_printf_i+0x1b6>
 800a6b2:	4615      	mov	r5, r2
 800a6b4:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6b8:	fb03 6711 	mls	r7, r3, r1, r6
 800a6bc:	5dc7      	ldrb	r7, [r0, r7]
 800a6be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6c2:	4637      	mov	r7, r6
 800a6c4:	42bb      	cmp	r3, r7
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	d9f4      	bls.n	800a6b4 <_printf_i+0x11c>
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d10b      	bne.n	800a6e6 <_printf_i+0x14e>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	07de      	lsls	r6, r3, #31
 800a6d2:	d508      	bpl.n	800a6e6 <_printf_i+0x14e>
 800a6d4:	6923      	ldr	r3, [r4, #16]
 800a6d6:	6861      	ldr	r1, [r4, #4]
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	bfde      	ittt	le
 800a6dc:	2330      	movle	r3, #48	; 0x30
 800a6de:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6e6:	1b52      	subs	r2, r2, r5
 800a6e8:	6122      	str	r2, [r4, #16]
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f8cd a000 	str.w	sl, [sp]
 800a6f4:	aa03      	add	r2, sp, #12
 800a6f6:	f7ff fedf 	bl	800a4b8 <_printf_common>
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d14c      	bne.n	800a798 <_printf_i+0x200>
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a702:	b004      	add	sp, #16
 800a704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a708:	4834      	ldr	r0, [pc, #208]	; (800a7dc <_printf_i+0x244>)
 800a70a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a70e:	6829      	ldr	r1, [r5, #0]
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	f851 6b04 	ldr.w	r6, [r1], #4
 800a716:	6029      	str	r1, [r5, #0]
 800a718:	061d      	lsls	r5, r3, #24
 800a71a:	d514      	bpl.n	800a746 <_printf_i+0x1ae>
 800a71c:	07df      	lsls	r7, r3, #31
 800a71e:	bf44      	itt	mi
 800a720:	f043 0320 	orrmi.w	r3, r3, #32
 800a724:	6023      	strmi	r3, [r4, #0]
 800a726:	b91e      	cbnz	r6, 800a730 <_printf_i+0x198>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	f023 0320 	bic.w	r3, r3, #32
 800a72e:	6023      	str	r3, [r4, #0]
 800a730:	2310      	movs	r3, #16
 800a732:	e7af      	b.n	800a694 <_printf_i+0xfc>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	f043 0320 	orr.w	r3, r3, #32
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	2378      	movs	r3, #120	; 0x78
 800a73e:	4828      	ldr	r0, [pc, #160]	; (800a7e0 <_printf_i+0x248>)
 800a740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a744:	e7e3      	b.n	800a70e <_printf_i+0x176>
 800a746:	0659      	lsls	r1, r3, #25
 800a748:	bf48      	it	mi
 800a74a:	b2b6      	uxthmi	r6, r6
 800a74c:	e7e6      	b.n	800a71c <_printf_i+0x184>
 800a74e:	4615      	mov	r5, r2
 800a750:	e7bb      	b.n	800a6ca <_printf_i+0x132>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	6826      	ldr	r6, [r4, #0]
 800a756:	1d18      	adds	r0, r3, #4
 800a758:	6961      	ldr	r1, [r4, #20]
 800a75a:	6028      	str	r0, [r5, #0]
 800a75c:	0635      	lsls	r5, r6, #24
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	d501      	bpl.n	800a766 <_printf_i+0x1ce>
 800a762:	6019      	str	r1, [r3, #0]
 800a764:	e002      	b.n	800a76c <_printf_i+0x1d4>
 800a766:	0670      	lsls	r0, r6, #25
 800a768:	d5fb      	bpl.n	800a762 <_printf_i+0x1ca>
 800a76a:	8019      	strh	r1, [r3, #0]
 800a76c:	2300      	movs	r3, #0
 800a76e:	4615      	mov	r5, r2
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	e7ba      	b.n	800a6ea <_printf_i+0x152>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	2100      	movs	r1, #0
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	602a      	str	r2, [r5, #0]
 800a77c:	681d      	ldr	r5, [r3, #0]
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	4628      	mov	r0, r5
 800a782:	f000 fb33 	bl	800adec <memchr>
 800a786:	b108      	cbz	r0, 800a78c <_printf_i+0x1f4>
 800a788:	1b40      	subs	r0, r0, r5
 800a78a:	6060      	str	r0, [r4, #4]
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	2300      	movs	r3, #0
 800a792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a796:	e7a8      	b.n	800a6ea <_printf_i+0x152>
 800a798:	462a      	mov	r2, r5
 800a79a:	4649      	mov	r1, r9
 800a79c:	4640      	mov	r0, r8
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	47d0      	blx	sl
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d0ab      	beq.n	800a6fe <_printf_i+0x166>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	079b      	lsls	r3, r3, #30
 800a7aa:	d413      	bmi.n	800a7d4 <_printf_i+0x23c>
 800a7ac:	68e0      	ldr	r0, [r4, #12]
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	4298      	cmp	r0, r3
 800a7b2:	bfb8      	it	lt
 800a7b4:	4618      	movlt	r0, r3
 800a7b6:	e7a4      	b.n	800a702 <_printf_i+0x16a>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	4632      	mov	r2, r6
 800a7bc:	4649      	mov	r1, r9
 800a7be:	4640      	mov	r0, r8
 800a7c0:	47d0      	blx	sl
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d09b      	beq.n	800a6fe <_printf_i+0x166>
 800a7c6:	3501      	adds	r5, #1
 800a7c8:	68e3      	ldr	r3, [r4, #12]
 800a7ca:	9903      	ldr	r1, [sp, #12]
 800a7cc:	1a5b      	subs	r3, r3, r1
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	dcf2      	bgt.n	800a7b8 <_printf_i+0x220>
 800a7d2:	e7eb      	b.n	800a7ac <_printf_i+0x214>
 800a7d4:	2500      	movs	r5, #0
 800a7d6:	f104 0619 	add.w	r6, r4, #25
 800a7da:	e7f5      	b.n	800a7c8 <_printf_i+0x230>
 800a7dc:	0800d005 	.word	0x0800d005
 800a7e0:	0800d016 	.word	0x0800d016

0800a7e4 <siprintf>:
 800a7e4:	b40e      	push	{r1, r2, r3}
 800a7e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7ea:	b500      	push	{lr}
 800a7ec:	b09c      	sub	sp, #112	; 0x70
 800a7ee:	ab1d      	add	r3, sp, #116	; 0x74
 800a7f0:	9002      	str	r0, [sp, #8]
 800a7f2:	9006      	str	r0, [sp, #24]
 800a7f4:	9107      	str	r1, [sp, #28]
 800a7f6:	9104      	str	r1, [sp, #16]
 800a7f8:	4808      	ldr	r0, [pc, #32]	; (800a81c <siprintf+0x38>)
 800a7fa:	4909      	ldr	r1, [pc, #36]	; (800a820 <siprintf+0x3c>)
 800a7fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a800:	9105      	str	r1, [sp, #20]
 800a802:	6800      	ldr	r0, [r0, #0]
 800a804:	a902      	add	r1, sp, #8
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	f000 fc7e 	bl	800b108 <_svfiprintf_r>
 800a80c:	2200      	movs	r2, #0
 800a80e:	9b02      	ldr	r3, [sp, #8]
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	b01c      	add	sp, #112	; 0x70
 800a814:	f85d eb04 	ldr.w	lr, [sp], #4
 800a818:	b003      	add	sp, #12
 800a81a:	4770      	bx	lr
 800a81c:	20000018 	.word	0x20000018
 800a820:	ffff0208 	.word	0xffff0208

0800a824 <__swbuf_r>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	460e      	mov	r6, r1
 800a828:	4614      	mov	r4, r2
 800a82a:	4605      	mov	r5, r0
 800a82c:	b118      	cbz	r0, 800a836 <__swbuf_r+0x12>
 800a82e:	6983      	ldr	r3, [r0, #24]
 800a830:	b90b      	cbnz	r3, 800a836 <__swbuf_r+0x12>
 800a832:	f000 f9d5 	bl	800abe0 <__sinit>
 800a836:	4b21      	ldr	r3, [pc, #132]	; (800a8bc <__swbuf_r+0x98>)
 800a838:	429c      	cmp	r4, r3
 800a83a:	d12b      	bne.n	800a894 <__swbuf_r+0x70>
 800a83c:	686c      	ldr	r4, [r5, #4]
 800a83e:	69a3      	ldr	r3, [r4, #24]
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	071a      	lsls	r2, r3, #28
 800a846:	d52f      	bpl.n	800a8a8 <__swbuf_r+0x84>
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	b36b      	cbz	r3, 800a8a8 <__swbuf_r+0x84>
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	6820      	ldr	r0, [r4, #0]
 800a850:	b2f6      	uxtb	r6, r6
 800a852:	1ac0      	subs	r0, r0, r3
 800a854:	6963      	ldr	r3, [r4, #20]
 800a856:	4637      	mov	r7, r6
 800a858:	4283      	cmp	r3, r0
 800a85a:	dc04      	bgt.n	800a866 <__swbuf_r+0x42>
 800a85c:	4621      	mov	r1, r4
 800a85e:	4628      	mov	r0, r5
 800a860:	f000 f92a 	bl	800aab8 <_fflush_r>
 800a864:	bb30      	cbnz	r0, 800a8b4 <__swbuf_r+0x90>
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	3001      	adds	r0, #1
 800a86a:	3b01      	subs	r3, #1
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	1c5a      	adds	r2, r3, #1
 800a872:	6022      	str	r2, [r4, #0]
 800a874:	701e      	strb	r6, [r3, #0]
 800a876:	6963      	ldr	r3, [r4, #20]
 800a878:	4283      	cmp	r3, r0
 800a87a:	d004      	beq.n	800a886 <__swbuf_r+0x62>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	07db      	lsls	r3, r3, #31
 800a880:	d506      	bpl.n	800a890 <__swbuf_r+0x6c>
 800a882:	2e0a      	cmp	r6, #10
 800a884:	d104      	bne.n	800a890 <__swbuf_r+0x6c>
 800a886:	4621      	mov	r1, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 f915 	bl	800aab8 <_fflush_r>
 800a88e:	b988      	cbnz	r0, 800a8b4 <__swbuf_r+0x90>
 800a890:	4638      	mov	r0, r7
 800a892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a894:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <__swbuf_r+0x9c>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d101      	bne.n	800a89e <__swbuf_r+0x7a>
 800a89a:	68ac      	ldr	r4, [r5, #8]
 800a89c:	e7cf      	b.n	800a83e <__swbuf_r+0x1a>
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <__swbuf_r+0xa0>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	68ec      	ldreq	r4, [r5, #12]
 800a8a6:	e7ca      	b.n	800a83e <__swbuf_r+0x1a>
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 f80c 	bl	800a8c8 <__swsetup_r>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d0cb      	beq.n	800a84c <__swbuf_r+0x28>
 800a8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a8b8:	e7ea      	b.n	800a890 <__swbuf_r+0x6c>
 800a8ba:	bf00      	nop
 800a8bc:	0800d048 	.word	0x0800d048
 800a8c0:	0800d068 	.word	0x0800d068
 800a8c4:	0800d028 	.word	0x0800d028

0800a8c8 <__swsetup_r>:
 800a8c8:	4b32      	ldr	r3, [pc, #200]	; (800a994 <__swsetup_r+0xcc>)
 800a8ca:	b570      	push	{r4, r5, r6, lr}
 800a8cc:	681d      	ldr	r5, [r3, #0]
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	b125      	cbz	r5, 800a8de <__swsetup_r+0x16>
 800a8d4:	69ab      	ldr	r3, [r5, #24]
 800a8d6:	b913      	cbnz	r3, 800a8de <__swsetup_r+0x16>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f000 f981 	bl	800abe0 <__sinit>
 800a8de:	4b2e      	ldr	r3, [pc, #184]	; (800a998 <__swsetup_r+0xd0>)
 800a8e0:	429c      	cmp	r4, r3
 800a8e2:	d10f      	bne.n	800a904 <__swsetup_r+0x3c>
 800a8e4:	686c      	ldr	r4, [r5, #4]
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8ec:	0719      	lsls	r1, r3, #28
 800a8ee:	d42c      	bmi.n	800a94a <__swsetup_r+0x82>
 800a8f0:	06dd      	lsls	r5, r3, #27
 800a8f2:	d411      	bmi.n	800a918 <__swsetup_r+0x50>
 800a8f4:	2309      	movs	r3, #9
 800a8f6:	6033      	str	r3, [r6, #0]
 800a8f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	e03e      	b.n	800a982 <__swsetup_r+0xba>
 800a904:	4b25      	ldr	r3, [pc, #148]	; (800a99c <__swsetup_r+0xd4>)
 800a906:	429c      	cmp	r4, r3
 800a908:	d101      	bne.n	800a90e <__swsetup_r+0x46>
 800a90a:	68ac      	ldr	r4, [r5, #8]
 800a90c:	e7eb      	b.n	800a8e6 <__swsetup_r+0x1e>
 800a90e:	4b24      	ldr	r3, [pc, #144]	; (800a9a0 <__swsetup_r+0xd8>)
 800a910:	429c      	cmp	r4, r3
 800a912:	bf08      	it	eq
 800a914:	68ec      	ldreq	r4, [r5, #12]
 800a916:	e7e6      	b.n	800a8e6 <__swsetup_r+0x1e>
 800a918:	0758      	lsls	r0, r3, #29
 800a91a:	d512      	bpl.n	800a942 <__swsetup_r+0x7a>
 800a91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a91e:	b141      	cbz	r1, 800a932 <__swsetup_r+0x6a>
 800a920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a924:	4299      	cmp	r1, r3
 800a926:	d002      	beq.n	800a92e <__swsetup_r+0x66>
 800a928:	4630      	mov	r0, r6
 800a92a:	f000 fa87 	bl	800ae3c <_free_r>
 800a92e:	2300      	movs	r3, #0
 800a930:	6363      	str	r3, [r4, #52]	; 0x34
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	2300      	movs	r3, #0
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	6923      	ldr	r3, [r4, #16]
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f043 0308 	orr.w	r3, r3, #8
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	b94b      	cbnz	r3, 800a962 <__swsetup_r+0x9a>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a958:	d003      	beq.n	800a962 <__swsetup_r+0x9a>
 800a95a:	4621      	mov	r1, r4
 800a95c:	4630      	mov	r0, r6
 800a95e:	f000 fa05 	bl	800ad6c <__smakebuf_r>
 800a962:	89a0      	ldrh	r0, [r4, #12]
 800a964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a968:	f010 0301 	ands.w	r3, r0, #1
 800a96c:	d00a      	beq.n	800a984 <__swsetup_r+0xbc>
 800a96e:	2300      	movs	r3, #0
 800a970:	60a3      	str	r3, [r4, #8]
 800a972:	6963      	ldr	r3, [r4, #20]
 800a974:	425b      	negs	r3, r3
 800a976:	61a3      	str	r3, [r4, #24]
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	b943      	cbnz	r3, 800a98e <__swsetup_r+0xc6>
 800a97c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a980:	d1ba      	bne.n	800a8f8 <__swsetup_r+0x30>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	0781      	lsls	r1, r0, #30
 800a986:	bf58      	it	pl
 800a988:	6963      	ldrpl	r3, [r4, #20]
 800a98a:	60a3      	str	r3, [r4, #8]
 800a98c:	e7f4      	b.n	800a978 <__swsetup_r+0xb0>
 800a98e:	2000      	movs	r0, #0
 800a990:	e7f7      	b.n	800a982 <__swsetup_r+0xba>
 800a992:	bf00      	nop
 800a994:	20000018 	.word	0x20000018
 800a998:	0800d048 	.word	0x0800d048
 800a99c:	0800d068 	.word	0x0800d068
 800a9a0:	0800d028 	.word	0x0800d028

0800a9a4 <abort>:
 800a9a4:	2006      	movs	r0, #6
 800a9a6:	b508      	push	{r3, lr}
 800a9a8:	f000 fce6 	bl	800b378 <raise>
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	f7fb f938 	bl	8005c22 <_exit>
	...

0800a9b4 <__sflush_r>:
 800a9b4:	898a      	ldrh	r2, [r1, #12]
 800a9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	0710      	lsls	r0, r2, #28
 800a9bc:	460c      	mov	r4, r1
 800a9be:	d457      	bmi.n	800aa70 <__sflush_r+0xbc>
 800a9c0:	684b      	ldr	r3, [r1, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dc04      	bgt.n	800a9d0 <__sflush_r+0x1c>
 800a9c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dc01      	bgt.n	800a9d0 <__sflush_r+0x1c>
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	d0fa      	beq.n	800a9cc <__sflush_r+0x18>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9dc:	682f      	ldr	r7, [r5, #0]
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	d032      	beq.n	800aa48 <__sflush_r+0x94>
 800a9e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	075a      	lsls	r2, r3, #29
 800a9e8:	d505      	bpl.n	800a9f6 <__sflush_r+0x42>
 800a9ea:	6863      	ldr	r3, [r4, #4]
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f0:	b10b      	cbz	r3, 800a9f6 <__sflush_r+0x42>
 800a9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	6a21      	ldr	r1, [r4, #32]
 800aa00:	47b0      	blx	r6
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	d106      	bne.n	800aa16 <__sflush_r+0x62>
 800aa08:	6829      	ldr	r1, [r5, #0]
 800aa0a:	291d      	cmp	r1, #29
 800aa0c:	d82c      	bhi.n	800aa68 <__sflush_r+0xb4>
 800aa0e:	4a29      	ldr	r2, [pc, #164]	; (800aab4 <__sflush_r+0x100>)
 800aa10:	40ca      	lsrs	r2, r1
 800aa12:	07d6      	lsls	r6, r2, #31
 800aa14:	d528      	bpl.n	800aa68 <__sflush_r+0xb4>
 800aa16:	2200      	movs	r2, #0
 800aa18:	6062      	str	r2, [r4, #4]
 800aa1a:	6922      	ldr	r2, [r4, #16]
 800aa1c:	04d9      	lsls	r1, r3, #19
 800aa1e:	6022      	str	r2, [r4, #0]
 800aa20:	d504      	bpl.n	800aa2c <__sflush_r+0x78>
 800aa22:	1c42      	adds	r2, r0, #1
 800aa24:	d101      	bne.n	800aa2a <__sflush_r+0x76>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	b903      	cbnz	r3, 800aa2c <__sflush_r+0x78>
 800aa2a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2e:	602f      	str	r7, [r5, #0]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d0cb      	beq.n	800a9cc <__sflush_r+0x18>
 800aa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__sflush_r+0x8e>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 f9fd 	bl	800ae3c <_free_r>
 800aa42:	2000      	movs	r0, #0
 800aa44:	6360      	str	r0, [r4, #52]	; 0x34
 800aa46:	e7c2      	b.n	800a9ce <__sflush_r+0x1a>
 800aa48:	6a21      	ldr	r1, [r4, #32]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b0      	blx	r6
 800aa50:	1c41      	adds	r1, r0, #1
 800aa52:	d1c7      	bne.n	800a9e4 <__sflush_r+0x30>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0c4      	beq.n	800a9e4 <__sflush_r+0x30>
 800aa5a:	2b1d      	cmp	r3, #29
 800aa5c:	d001      	beq.n	800aa62 <__sflush_r+0xae>
 800aa5e:	2b16      	cmp	r3, #22
 800aa60:	d101      	bne.n	800aa66 <__sflush_r+0xb2>
 800aa62:	602f      	str	r7, [r5, #0]
 800aa64:	e7b2      	b.n	800a9cc <__sflush_r+0x18>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	e7ae      	b.n	800a9ce <__sflush_r+0x1a>
 800aa70:	690f      	ldr	r7, [r1, #16]
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d0aa      	beq.n	800a9cc <__sflush_r+0x18>
 800aa76:	0793      	lsls	r3, r2, #30
 800aa78:	bf18      	it	ne
 800aa7a:	2300      	movne	r3, #0
 800aa7c:	680e      	ldr	r6, [r1, #0]
 800aa7e:	bf08      	it	eq
 800aa80:	694b      	ldreq	r3, [r1, #20]
 800aa82:	1bf6      	subs	r6, r6, r7
 800aa84:	600f      	str	r7, [r1, #0]
 800aa86:	608b      	str	r3, [r1, #8]
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	dd9f      	ble.n	800a9cc <__sflush_r+0x18>
 800aa8c:	4633      	mov	r3, r6
 800aa8e:	463a      	mov	r2, r7
 800aa90:	4628      	mov	r0, r5
 800aa92:	6a21      	ldr	r1, [r4, #32]
 800aa94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa98:	47e0      	blx	ip
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	dc06      	bgt.n	800aaac <__sflush_r+0xf8>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	e790      	b.n	800a9ce <__sflush_r+0x1a>
 800aaac:	4407      	add	r7, r0
 800aaae:	1a36      	subs	r6, r6, r0
 800aab0:	e7ea      	b.n	800aa88 <__sflush_r+0xd4>
 800aab2:	bf00      	nop
 800aab4:	20400001 	.word	0x20400001

0800aab8 <_fflush_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	690b      	ldr	r3, [r1, #16]
 800aabc:	4605      	mov	r5, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	b913      	cbnz	r3, 800aac8 <_fflush_r+0x10>
 800aac2:	2500      	movs	r5, #0
 800aac4:	4628      	mov	r0, r5
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	b118      	cbz	r0, 800aad2 <_fflush_r+0x1a>
 800aaca:	6983      	ldr	r3, [r0, #24]
 800aacc:	b90b      	cbnz	r3, 800aad2 <_fflush_r+0x1a>
 800aace:	f000 f887 	bl	800abe0 <__sinit>
 800aad2:	4b14      	ldr	r3, [pc, #80]	; (800ab24 <_fflush_r+0x6c>)
 800aad4:	429c      	cmp	r4, r3
 800aad6:	d11b      	bne.n	800ab10 <_fflush_r+0x58>
 800aad8:	686c      	ldr	r4, [r5, #4]
 800aada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0ef      	beq.n	800aac2 <_fflush_r+0xa>
 800aae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae4:	07d0      	lsls	r0, r2, #31
 800aae6:	d404      	bmi.n	800aaf2 <_fflush_r+0x3a>
 800aae8:	0599      	lsls	r1, r3, #22
 800aaea:	d402      	bmi.n	800aaf2 <_fflush_r+0x3a>
 800aaec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaee:	f000 f915 	bl	800ad1c <__retarget_lock_acquire_recursive>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	f7ff ff5d 	bl	800a9b4 <__sflush_r>
 800aafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aafc:	4605      	mov	r5, r0
 800aafe:	07da      	lsls	r2, r3, #31
 800ab00:	d4e0      	bmi.n	800aac4 <_fflush_r+0xc>
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	059b      	lsls	r3, r3, #22
 800ab06:	d4dd      	bmi.n	800aac4 <_fflush_r+0xc>
 800ab08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0a:	f000 f908 	bl	800ad1e <__retarget_lock_release_recursive>
 800ab0e:	e7d9      	b.n	800aac4 <_fflush_r+0xc>
 800ab10:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <_fflush_r+0x70>)
 800ab12:	429c      	cmp	r4, r3
 800ab14:	d101      	bne.n	800ab1a <_fflush_r+0x62>
 800ab16:	68ac      	ldr	r4, [r5, #8]
 800ab18:	e7df      	b.n	800aada <_fflush_r+0x22>
 800ab1a:	4b04      	ldr	r3, [pc, #16]	; (800ab2c <_fflush_r+0x74>)
 800ab1c:	429c      	cmp	r4, r3
 800ab1e:	bf08      	it	eq
 800ab20:	68ec      	ldreq	r4, [r5, #12]
 800ab22:	e7da      	b.n	800aada <_fflush_r+0x22>
 800ab24:	0800d048 	.word	0x0800d048
 800ab28:	0800d068 	.word	0x0800d068
 800ab2c:	0800d028 	.word	0x0800d028

0800ab30 <std>:
 800ab30:	2300      	movs	r3, #0
 800ab32:	b510      	push	{r4, lr}
 800ab34:	4604      	mov	r4, r0
 800ab36:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab3e:	6083      	str	r3, [r0, #8]
 800ab40:	8181      	strh	r1, [r0, #12]
 800ab42:	6643      	str	r3, [r0, #100]	; 0x64
 800ab44:	81c2      	strh	r2, [r0, #14]
 800ab46:	6183      	str	r3, [r0, #24]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	305c      	adds	r0, #92	; 0x5c
 800ab4e:	f7ff fb53 	bl	800a1f8 <memset>
 800ab52:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <std+0x38>)
 800ab54:	6224      	str	r4, [r4, #32]
 800ab56:	6263      	str	r3, [r4, #36]	; 0x24
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <std+0x3c>)
 800ab5a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab5c:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <std+0x40>)
 800ab5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab60:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <std+0x44>)
 800ab62:	6323      	str	r3, [r4, #48]	; 0x30
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	bf00      	nop
 800ab68:	0800b3b1 	.word	0x0800b3b1
 800ab6c:	0800b3d3 	.word	0x0800b3d3
 800ab70:	0800b40b 	.word	0x0800b40b
 800ab74:	0800b42f 	.word	0x0800b42f

0800ab78 <_cleanup_r>:
 800ab78:	4901      	ldr	r1, [pc, #4]	; (800ab80 <_cleanup_r+0x8>)
 800ab7a:	f000 b8af 	b.w	800acdc <_fwalk_reent>
 800ab7e:	bf00      	nop
 800ab80:	0800aab9 	.word	0x0800aab9

0800ab84 <__sfmoreglue>:
 800ab84:	2268      	movs	r2, #104	; 0x68
 800ab86:	b570      	push	{r4, r5, r6, lr}
 800ab88:	1e4d      	subs	r5, r1, #1
 800ab8a:	4355      	muls	r5, r2
 800ab8c:	460e      	mov	r6, r1
 800ab8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab92:	f000 f9bb 	bl	800af0c <_malloc_r>
 800ab96:	4604      	mov	r4, r0
 800ab98:	b140      	cbz	r0, 800abac <__sfmoreglue+0x28>
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	e9c0 1600 	strd	r1, r6, [r0]
 800aba0:	300c      	adds	r0, #12
 800aba2:	60a0      	str	r0, [r4, #8]
 800aba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aba8:	f7ff fb26 	bl	800a1f8 <memset>
 800abac:	4620      	mov	r0, r4
 800abae:	bd70      	pop	{r4, r5, r6, pc}

0800abb0 <__sfp_lock_acquire>:
 800abb0:	4801      	ldr	r0, [pc, #4]	; (800abb8 <__sfp_lock_acquire+0x8>)
 800abb2:	f000 b8b3 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800abb6:	bf00      	nop
 800abb8:	20007fad 	.word	0x20007fad

0800abbc <__sfp_lock_release>:
 800abbc:	4801      	ldr	r0, [pc, #4]	; (800abc4 <__sfp_lock_release+0x8>)
 800abbe:	f000 b8ae 	b.w	800ad1e <__retarget_lock_release_recursive>
 800abc2:	bf00      	nop
 800abc4:	20007fad 	.word	0x20007fad

0800abc8 <__sinit_lock_acquire>:
 800abc8:	4801      	ldr	r0, [pc, #4]	; (800abd0 <__sinit_lock_acquire+0x8>)
 800abca:	f000 b8a7 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800abce:	bf00      	nop
 800abd0:	20007fae 	.word	0x20007fae

0800abd4 <__sinit_lock_release>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__sinit_lock_release+0x8>)
 800abd6:	f000 b8a2 	b.w	800ad1e <__retarget_lock_release_recursive>
 800abda:	bf00      	nop
 800abdc:	20007fae 	.word	0x20007fae

0800abe0 <__sinit>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4604      	mov	r4, r0
 800abe4:	f7ff fff0 	bl	800abc8 <__sinit_lock_acquire>
 800abe8:	69a3      	ldr	r3, [r4, #24]
 800abea:	b11b      	cbz	r3, 800abf4 <__sinit+0x14>
 800abec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf0:	f7ff bff0 	b.w	800abd4 <__sinit_lock_release>
 800abf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abf8:	6523      	str	r3, [r4, #80]	; 0x50
 800abfa:	4b13      	ldr	r3, [pc, #76]	; (800ac48 <__sinit+0x68>)
 800abfc:	4a13      	ldr	r2, [pc, #76]	; (800ac4c <__sinit+0x6c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac02:	42a3      	cmp	r3, r4
 800ac04:	bf08      	it	eq
 800ac06:	2301      	moveq	r3, #1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	bf08      	it	eq
 800ac0c:	61a3      	streq	r3, [r4, #24]
 800ac0e:	f000 f81f 	bl	800ac50 <__sfp>
 800ac12:	6060      	str	r0, [r4, #4]
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f81b 	bl	800ac50 <__sfp>
 800ac1a:	60a0      	str	r0, [r4, #8]
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 f817 	bl	800ac50 <__sfp>
 800ac22:	2200      	movs	r2, #0
 800ac24:	2104      	movs	r1, #4
 800ac26:	60e0      	str	r0, [r4, #12]
 800ac28:	6860      	ldr	r0, [r4, #4]
 800ac2a:	f7ff ff81 	bl	800ab30 <std>
 800ac2e:	2201      	movs	r2, #1
 800ac30:	2109      	movs	r1, #9
 800ac32:	68a0      	ldr	r0, [r4, #8]
 800ac34:	f7ff ff7c 	bl	800ab30 <std>
 800ac38:	2202      	movs	r2, #2
 800ac3a:	2112      	movs	r1, #18
 800ac3c:	68e0      	ldr	r0, [r4, #12]
 800ac3e:	f7ff ff77 	bl	800ab30 <std>
 800ac42:	2301      	movs	r3, #1
 800ac44:	61a3      	str	r3, [r4, #24]
 800ac46:	e7d1      	b.n	800abec <__sinit+0xc>
 800ac48:	0800cff0 	.word	0x0800cff0
 800ac4c:	0800ab79 	.word	0x0800ab79

0800ac50 <__sfp>:
 800ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac52:	4607      	mov	r7, r0
 800ac54:	f7ff ffac 	bl	800abb0 <__sfp_lock_acquire>
 800ac58:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <__sfp+0x84>)
 800ac5a:	681e      	ldr	r6, [r3, #0]
 800ac5c:	69b3      	ldr	r3, [r6, #24]
 800ac5e:	b913      	cbnz	r3, 800ac66 <__sfp+0x16>
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7ff ffbd 	bl	800abe0 <__sinit>
 800ac66:	3648      	adds	r6, #72	; 0x48
 800ac68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	d503      	bpl.n	800ac78 <__sfp+0x28>
 800ac70:	6833      	ldr	r3, [r6, #0]
 800ac72:	b30b      	cbz	r3, 800acb8 <__sfp+0x68>
 800ac74:	6836      	ldr	r6, [r6, #0]
 800ac76:	e7f7      	b.n	800ac68 <__sfp+0x18>
 800ac78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac7c:	b9d5      	cbnz	r5, 800acb4 <__sfp+0x64>
 800ac7e:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <__sfp+0x88>)
 800ac80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac84:	60e3      	str	r3, [r4, #12]
 800ac86:	6665      	str	r5, [r4, #100]	; 0x64
 800ac88:	f000 f847 	bl	800ad1a <__retarget_lock_init_recursive>
 800ac8c:	f7ff ff96 	bl	800abbc <__sfp_lock_release>
 800ac90:	2208      	movs	r2, #8
 800ac92:	4629      	mov	r1, r5
 800ac94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac9c:	6025      	str	r5, [r4, #0]
 800ac9e:	61a5      	str	r5, [r4, #24]
 800aca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aca4:	f7ff faa8 	bl	800a1f8 <memset>
 800aca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acb0:	4620      	mov	r0, r4
 800acb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb4:	3468      	adds	r4, #104	; 0x68
 800acb6:	e7d9      	b.n	800ac6c <__sfp+0x1c>
 800acb8:	2104      	movs	r1, #4
 800acba:	4638      	mov	r0, r7
 800acbc:	f7ff ff62 	bl	800ab84 <__sfmoreglue>
 800acc0:	4604      	mov	r4, r0
 800acc2:	6030      	str	r0, [r6, #0]
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1d5      	bne.n	800ac74 <__sfp+0x24>
 800acc8:	f7ff ff78 	bl	800abbc <__sfp_lock_release>
 800accc:	230c      	movs	r3, #12
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	e7ee      	b.n	800acb0 <__sfp+0x60>
 800acd2:	bf00      	nop
 800acd4:	0800cff0 	.word	0x0800cff0
 800acd8:	ffff0001 	.word	0xffff0001

0800acdc <_fwalk_reent>:
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	4606      	mov	r6, r0
 800ace2:	4688      	mov	r8, r1
 800ace4:	2700      	movs	r7, #0
 800ace6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acee:	f1b9 0901 	subs.w	r9, r9, #1
 800acf2:	d505      	bpl.n	800ad00 <_fwalk_reent+0x24>
 800acf4:	6824      	ldr	r4, [r4, #0]
 800acf6:	2c00      	cmp	r4, #0
 800acf8:	d1f7      	bne.n	800acea <_fwalk_reent+0xe>
 800acfa:	4638      	mov	r0, r7
 800acfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad00:	89ab      	ldrh	r3, [r5, #12]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d907      	bls.n	800ad16 <_fwalk_reent+0x3a>
 800ad06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	d003      	beq.n	800ad16 <_fwalk_reent+0x3a>
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4630      	mov	r0, r6
 800ad12:	47c0      	blx	r8
 800ad14:	4307      	orrs	r7, r0
 800ad16:	3568      	adds	r5, #104	; 0x68
 800ad18:	e7e9      	b.n	800acee <_fwalk_reent+0x12>

0800ad1a <__retarget_lock_init_recursive>:
 800ad1a:	4770      	bx	lr

0800ad1c <__retarget_lock_acquire_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__retarget_lock_release_recursive>:
 800ad1e:	4770      	bx	lr

0800ad20 <__swhatbuf_r>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	460e      	mov	r6, r1
 800ad24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad28:	4614      	mov	r4, r2
 800ad2a:	2900      	cmp	r1, #0
 800ad2c:	461d      	mov	r5, r3
 800ad2e:	b096      	sub	sp, #88	; 0x58
 800ad30:	da08      	bge.n	800ad44 <__swhatbuf_r+0x24>
 800ad32:	2200      	movs	r2, #0
 800ad34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad38:	602a      	str	r2, [r5, #0]
 800ad3a:	061a      	lsls	r2, r3, #24
 800ad3c:	d410      	bmi.n	800ad60 <__swhatbuf_r+0x40>
 800ad3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad42:	e00e      	b.n	800ad62 <__swhatbuf_r+0x42>
 800ad44:	466a      	mov	r2, sp
 800ad46:	f000 fb99 	bl	800b47c <_fstat_r>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	dbf1      	blt.n	800ad32 <__swhatbuf_r+0x12>
 800ad4e:	9a01      	ldr	r2, [sp, #4]
 800ad50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad58:	425a      	negs	r2, r3
 800ad5a:	415a      	adcs	r2, r3
 800ad5c:	602a      	str	r2, [r5, #0]
 800ad5e:	e7ee      	b.n	800ad3e <__swhatbuf_r+0x1e>
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	2000      	movs	r0, #0
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	b016      	add	sp, #88	; 0x58
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad6c <__smakebuf_r>:
 800ad6c:	898b      	ldrh	r3, [r1, #12]
 800ad6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad70:	079d      	lsls	r5, r3, #30
 800ad72:	4606      	mov	r6, r0
 800ad74:	460c      	mov	r4, r1
 800ad76:	d507      	bpl.n	800ad88 <__smakebuf_r+0x1c>
 800ad78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	6123      	str	r3, [r4, #16]
 800ad80:	2301      	movs	r3, #1
 800ad82:	6163      	str	r3, [r4, #20]
 800ad84:	b002      	add	sp, #8
 800ad86:	bd70      	pop	{r4, r5, r6, pc}
 800ad88:	466a      	mov	r2, sp
 800ad8a:	ab01      	add	r3, sp, #4
 800ad8c:	f7ff ffc8 	bl	800ad20 <__swhatbuf_r>
 800ad90:	9900      	ldr	r1, [sp, #0]
 800ad92:	4605      	mov	r5, r0
 800ad94:	4630      	mov	r0, r6
 800ad96:	f000 f8b9 	bl	800af0c <_malloc_r>
 800ad9a:	b948      	cbnz	r0, 800adb0 <__smakebuf_r+0x44>
 800ad9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada0:	059a      	lsls	r2, r3, #22
 800ada2:	d4ef      	bmi.n	800ad84 <__smakebuf_r+0x18>
 800ada4:	f023 0303 	bic.w	r3, r3, #3
 800ada8:	f043 0302 	orr.w	r3, r3, #2
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	e7e3      	b.n	800ad78 <__smakebuf_r+0xc>
 800adb0:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <__smakebuf_r+0x7c>)
 800adb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	6020      	str	r0, [r4, #0]
 800adb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	6120      	str	r0, [r4, #16]
 800adc2:	6163      	str	r3, [r4, #20]
 800adc4:	9b01      	ldr	r3, [sp, #4]
 800adc6:	b15b      	cbz	r3, 800ade0 <__smakebuf_r+0x74>
 800adc8:	4630      	mov	r0, r6
 800adca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adce:	f000 fb67 	bl	800b4a0 <_isatty_r>
 800add2:	b128      	cbz	r0, 800ade0 <__smakebuf_r+0x74>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	89a0      	ldrh	r0, [r4, #12]
 800ade2:	4305      	orrs	r5, r0
 800ade4:	81a5      	strh	r5, [r4, #12]
 800ade6:	e7cd      	b.n	800ad84 <__smakebuf_r+0x18>
 800ade8:	0800ab79 	.word	0x0800ab79

0800adec <memchr>:
 800adec:	4603      	mov	r3, r0
 800adee:	b510      	push	{r4, lr}
 800adf0:	b2c9      	uxtb	r1, r1
 800adf2:	4402      	add	r2, r0
 800adf4:	4293      	cmp	r3, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	d101      	bne.n	800adfe <memchr+0x12>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e003      	b.n	800ae06 <memchr+0x1a>
 800adfe:	7804      	ldrb	r4, [r0, #0]
 800ae00:	3301      	adds	r3, #1
 800ae02:	428c      	cmp	r4, r1
 800ae04:	d1f6      	bne.n	800adf4 <memchr+0x8>
 800ae06:	bd10      	pop	{r4, pc}

0800ae08 <memmove>:
 800ae08:	4288      	cmp	r0, r1
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	eb01 0402 	add.w	r4, r1, r2
 800ae10:	d902      	bls.n	800ae18 <memmove+0x10>
 800ae12:	4284      	cmp	r4, r0
 800ae14:	4623      	mov	r3, r4
 800ae16:	d807      	bhi.n	800ae28 <memmove+0x20>
 800ae18:	1e43      	subs	r3, r0, #1
 800ae1a:	42a1      	cmp	r1, r4
 800ae1c:	d008      	beq.n	800ae30 <memmove+0x28>
 800ae1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae26:	e7f8      	b.n	800ae1a <memmove+0x12>
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4402      	add	r2, r0
 800ae2c:	428a      	cmp	r2, r1
 800ae2e:	d100      	bne.n	800ae32 <memmove+0x2a>
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae3a:	e7f7      	b.n	800ae2c <memmove+0x24>

0800ae3c <_free_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4605      	mov	r5, r0
 800ae40:	2900      	cmp	r1, #0
 800ae42:	d040      	beq.n	800aec6 <_free_r+0x8a>
 800ae44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae48:	1f0c      	subs	r4, r1, #4
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	bfb8      	it	lt
 800ae4e:	18e4      	addlt	r4, r4, r3
 800ae50:	f000 fb48 	bl	800b4e4 <__malloc_lock>
 800ae54:	4a1c      	ldr	r2, [pc, #112]	; (800aec8 <_free_r+0x8c>)
 800ae56:	6813      	ldr	r3, [r2, #0]
 800ae58:	b933      	cbnz	r3, 800ae68 <_free_r+0x2c>
 800ae5a:	6063      	str	r3, [r4, #4]
 800ae5c:	6014      	str	r4, [r2, #0]
 800ae5e:	4628      	mov	r0, r5
 800ae60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae64:	f000 bb44 	b.w	800b4f0 <__malloc_unlock>
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	d908      	bls.n	800ae7e <_free_r+0x42>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	1821      	adds	r1, r4, r0
 800ae70:	428b      	cmp	r3, r1
 800ae72:	bf01      	itttt	eq
 800ae74:	6819      	ldreq	r1, [r3, #0]
 800ae76:	685b      	ldreq	r3, [r3, #4]
 800ae78:	1809      	addeq	r1, r1, r0
 800ae7a:	6021      	streq	r1, [r4, #0]
 800ae7c:	e7ed      	b.n	800ae5a <_free_r+0x1e>
 800ae7e:	461a      	mov	r2, r3
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b10b      	cbz	r3, 800ae88 <_free_r+0x4c>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d9fa      	bls.n	800ae7e <_free_r+0x42>
 800ae88:	6811      	ldr	r1, [r2, #0]
 800ae8a:	1850      	adds	r0, r2, r1
 800ae8c:	42a0      	cmp	r0, r4
 800ae8e:	d10b      	bne.n	800aea8 <_free_r+0x6c>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	4401      	add	r1, r0
 800ae94:	1850      	adds	r0, r2, r1
 800ae96:	4283      	cmp	r3, r0
 800ae98:	6011      	str	r1, [r2, #0]
 800ae9a:	d1e0      	bne.n	800ae5e <_free_r+0x22>
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	4401      	add	r1, r0
 800aea2:	6011      	str	r1, [r2, #0]
 800aea4:	6053      	str	r3, [r2, #4]
 800aea6:	e7da      	b.n	800ae5e <_free_r+0x22>
 800aea8:	d902      	bls.n	800aeb0 <_free_r+0x74>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	e7d6      	b.n	800ae5e <_free_r+0x22>
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	1821      	adds	r1, r4, r0
 800aeb4:	428b      	cmp	r3, r1
 800aeb6:	bf01      	itttt	eq
 800aeb8:	6819      	ldreq	r1, [r3, #0]
 800aeba:	685b      	ldreq	r3, [r3, #4]
 800aebc:	1809      	addeq	r1, r1, r0
 800aebe:	6021      	streq	r1, [r4, #0]
 800aec0:	6063      	str	r3, [r4, #4]
 800aec2:	6054      	str	r4, [r2, #4]
 800aec4:	e7cb      	b.n	800ae5e <_free_r+0x22>
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	20007fb0 	.word	0x20007fb0

0800aecc <sbrk_aligned>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	4e0e      	ldr	r6, [pc, #56]	; (800af08 <sbrk_aligned+0x3c>)
 800aed0:	460c      	mov	r4, r1
 800aed2:	6831      	ldr	r1, [r6, #0]
 800aed4:	4605      	mov	r5, r0
 800aed6:	b911      	cbnz	r1, 800aede <sbrk_aligned+0x12>
 800aed8:	f000 fa16 	bl	800b308 <_sbrk_r>
 800aedc:	6030      	str	r0, [r6, #0]
 800aede:	4621      	mov	r1, r4
 800aee0:	4628      	mov	r0, r5
 800aee2:	f000 fa11 	bl	800b308 <_sbrk_r>
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	d00a      	beq.n	800af00 <sbrk_aligned+0x34>
 800aeea:	1cc4      	adds	r4, r0, #3
 800aeec:	f024 0403 	bic.w	r4, r4, #3
 800aef0:	42a0      	cmp	r0, r4
 800aef2:	d007      	beq.n	800af04 <sbrk_aligned+0x38>
 800aef4:	1a21      	subs	r1, r4, r0
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 fa06 	bl	800b308 <_sbrk_r>
 800aefc:	3001      	adds	r0, #1
 800aefe:	d101      	bne.n	800af04 <sbrk_aligned+0x38>
 800af00:	f04f 34ff 	mov.w	r4, #4294967295
 800af04:	4620      	mov	r0, r4
 800af06:	bd70      	pop	{r4, r5, r6, pc}
 800af08:	20007fb4 	.word	0x20007fb4

0800af0c <_malloc_r>:
 800af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	1ccd      	adds	r5, r1, #3
 800af12:	f025 0503 	bic.w	r5, r5, #3
 800af16:	3508      	adds	r5, #8
 800af18:	2d0c      	cmp	r5, #12
 800af1a:	bf38      	it	cc
 800af1c:	250c      	movcc	r5, #12
 800af1e:	2d00      	cmp	r5, #0
 800af20:	4607      	mov	r7, r0
 800af22:	db01      	blt.n	800af28 <_malloc_r+0x1c>
 800af24:	42a9      	cmp	r1, r5
 800af26:	d905      	bls.n	800af34 <_malloc_r+0x28>
 800af28:	230c      	movs	r3, #12
 800af2a:	2600      	movs	r6, #0
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	4630      	mov	r0, r6
 800af30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af34:	4e2e      	ldr	r6, [pc, #184]	; (800aff0 <_malloc_r+0xe4>)
 800af36:	f000 fad5 	bl	800b4e4 <__malloc_lock>
 800af3a:	6833      	ldr	r3, [r6, #0]
 800af3c:	461c      	mov	r4, r3
 800af3e:	bb34      	cbnz	r4, 800af8e <_malloc_r+0x82>
 800af40:	4629      	mov	r1, r5
 800af42:	4638      	mov	r0, r7
 800af44:	f7ff ffc2 	bl	800aecc <sbrk_aligned>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	4604      	mov	r4, r0
 800af4c:	d14d      	bne.n	800afea <_malloc_r+0xde>
 800af4e:	6834      	ldr	r4, [r6, #0]
 800af50:	4626      	mov	r6, r4
 800af52:	2e00      	cmp	r6, #0
 800af54:	d140      	bne.n	800afd8 <_malloc_r+0xcc>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	4631      	mov	r1, r6
 800af5a:	4638      	mov	r0, r7
 800af5c:	eb04 0803 	add.w	r8, r4, r3
 800af60:	f000 f9d2 	bl	800b308 <_sbrk_r>
 800af64:	4580      	cmp	r8, r0
 800af66:	d13a      	bne.n	800afde <_malloc_r+0xd2>
 800af68:	6821      	ldr	r1, [r4, #0]
 800af6a:	3503      	adds	r5, #3
 800af6c:	1a6d      	subs	r5, r5, r1
 800af6e:	f025 0503 	bic.w	r5, r5, #3
 800af72:	3508      	adds	r5, #8
 800af74:	2d0c      	cmp	r5, #12
 800af76:	bf38      	it	cc
 800af78:	250c      	movcc	r5, #12
 800af7a:	4638      	mov	r0, r7
 800af7c:	4629      	mov	r1, r5
 800af7e:	f7ff ffa5 	bl	800aecc <sbrk_aligned>
 800af82:	3001      	adds	r0, #1
 800af84:	d02b      	beq.n	800afde <_malloc_r+0xd2>
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	442b      	add	r3, r5
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	e00e      	b.n	800afac <_malloc_r+0xa0>
 800af8e:	6822      	ldr	r2, [r4, #0]
 800af90:	1b52      	subs	r2, r2, r5
 800af92:	d41e      	bmi.n	800afd2 <_malloc_r+0xc6>
 800af94:	2a0b      	cmp	r2, #11
 800af96:	d916      	bls.n	800afc6 <_malloc_r+0xba>
 800af98:	1961      	adds	r1, r4, r5
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	6025      	str	r5, [r4, #0]
 800af9e:	bf18      	it	ne
 800afa0:	6059      	strne	r1, [r3, #4]
 800afa2:	6863      	ldr	r3, [r4, #4]
 800afa4:	bf08      	it	eq
 800afa6:	6031      	streq	r1, [r6, #0]
 800afa8:	5162      	str	r2, [r4, r5]
 800afaa:	604b      	str	r3, [r1, #4]
 800afac:	4638      	mov	r0, r7
 800afae:	f104 060b 	add.w	r6, r4, #11
 800afb2:	f000 fa9d 	bl	800b4f0 <__malloc_unlock>
 800afb6:	f026 0607 	bic.w	r6, r6, #7
 800afba:	1d23      	adds	r3, r4, #4
 800afbc:	1af2      	subs	r2, r6, r3
 800afbe:	d0b6      	beq.n	800af2e <_malloc_r+0x22>
 800afc0:	1b9b      	subs	r3, r3, r6
 800afc2:	50a3      	str	r3, [r4, r2]
 800afc4:	e7b3      	b.n	800af2e <_malloc_r+0x22>
 800afc6:	6862      	ldr	r2, [r4, #4]
 800afc8:	42a3      	cmp	r3, r4
 800afca:	bf0c      	ite	eq
 800afcc:	6032      	streq	r2, [r6, #0]
 800afce:	605a      	strne	r2, [r3, #4]
 800afd0:	e7ec      	b.n	800afac <_malloc_r+0xa0>
 800afd2:	4623      	mov	r3, r4
 800afd4:	6864      	ldr	r4, [r4, #4]
 800afd6:	e7b2      	b.n	800af3e <_malloc_r+0x32>
 800afd8:	4634      	mov	r4, r6
 800afda:	6876      	ldr	r6, [r6, #4]
 800afdc:	e7b9      	b.n	800af52 <_malloc_r+0x46>
 800afde:	230c      	movs	r3, #12
 800afe0:	4638      	mov	r0, r7
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	f000 fa84 	bl	800b4f0 <__malloc_unlock>
 800afe8:	e7a1      	b.n	800af2e <_malloc_r+0x22>
 800afea:	6025      	str	r5, [r4, #0]
 800afec:	e7de      	b.n	800afac <_malloc_r+0xa0>
 800afee:	bf00      	nop
 800aff0:	20007fb0 	.word	0x20007fb0

0800aff4 <_realloc_r>:
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4680      	mov	r8, r0
 800affa:	4614      	mov	r4, r2
 800affc:	460e      	mov	r6, r1
 800affe:	b921      	cbnz	r1, 800b00a <_realloc_r+0x16>
 800b000:	4611      	mov	r1, r2
 800b002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b006:	f7ff bf81 	b.w	800af0c <_malloc_r>
 800b00a:	b92a      	cbnz	r2, 800b018 <_realloc_r+0x24>
 800b00c:	f7ff ff16 	bl	800ae3c <_free_r>
 800b010:	4625      	mov	r5, r4
 800b012:	4628      	mov	r0, r5
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	f000 fa70 	bl	800b4fc <_malloc_usable_size_r>
 800b01c:	4284      	cmp	r4, r0
 800b01e:	4607      	mov	r7, r0
 800b020:	d802      	bhi.n	800b028 <_realloc_r+0x34>
 800b022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b026:	d812      	bhi.n	800b04e <_realloc_r+0x5a>
 800b028:	4621      	mov	r1, r4
 800b02a:	4640      	mov	r0, r8
 800b02c:	f7ff ff6e 	bl	800af0c <_malloc_r>
 800b030:	4605      	mov	r5, r0
 800b032:	2800      	cmp	r0, #0
 800b034:	d0ed      	beq.n	800b012 <_realloc_r+0x1e>
 800b036:	42bc      	cmp	r4, r7
 800b038:	4622      	mov	r2, r4
 800b03a:	4631      	mov	r1, r6
 800b03c:	bf28      	it	cs
 800b03e:	463a      	movcs	r2, r7
 800b040:	f7ff f8cc 	bl	800a1dc <memcpy>
 800b044:	4631      	mov	r1, r6
 800b046:	4640      	mov	r0, r8
 800b048:	f7ff fef8 	bl	800ae3c <_free_r>
 800b04c:	e7e1      	b.n	800b012 <_realloc_r+0x1e>
 800b04e:	4635      	mov	r5, r6
 800b050:	e7df      	b.n	800b012 <_realloc_r+0x1e>

0800b052 <__ssputs_r>:
 800b052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b056:	688e      	ldr	r6, [r1, #8]
 800b058:	4682      	mov	sl, r0
 800b05a:	429e      	cmp	r6, r3
 800b05c:	460c      	mov	r4, r1
 800b05e:	4690      	mov	r8, r2
 800b060:	461f      	mov	r7, r3
 800b062:	d838      	bhi.n	800b0d6 <__ssputs_r+0x84>
 800b064:	898a      	ldrh	r2, [r1, #12]
 800b066:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b06a:	d032      	beq.n	800b0d2 <__ssputs_r+0x80>
 800b06c:	6825      	ldr	r5, [r4, #0]
 800b06e:	6909      	ldr	r1, [r1, #16]
 800b070:	3301      	adds	r3, #1
 800b072:	eba5 0901 	sub.w	r9, r5, r1
 800b076:	6965      	ldr	r5, [r4, #20]
 800b078:	444b      	add	r3, r9
 800b07a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b07e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b082:	106d      	asrs	r5, r5, #1
 800b084:	429d      	cmp	r5, r3
 800b086:	bf38      	it	cc
 800b088:	461d      	movcc	r5, r3
 800b08a:	0553      	lsls	r3, r2, #21
 800b08c:	d531      	bpl.n	800b0f2 <__ssputs_r+0xa0>
 800b08e:	4629      	mov	r1, r5
 800b090:	f7ff ff3c 	bl	800af0c <_malloc_r>
 800b094:	4606      	mov	r6, r0
 800b096:	b950      	cbnz	r0, 800b0ae <__ssputs_r+0x5c>
 800b098:	230c      	movs	r3, #12
 800b09a:	f04f 30ff 	mov.w	r0, #4294967295
 800b09e:	f8ca 3000 	str.w	r3, [sl]
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ae:	464a      	mov	r2, r9
 800b0b0:	6921      	ldr	r1, [r4, #16]
 800b0b2:	f7ff f893 	bl	800a1dc <memcpy>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	6126      	str	r6, [r4, #16]
 800b0c4:	444e      	add	r6, r9
 800b0c6:	6026      	str	r6, [r4, #0]
 800b0c8:	463e      	mov	r6, r7
 800b0ca:	6165      	str	r5, [r4, #20]
 800b0cc:	eba5 0509 	sub.w	r5, r5, r9
 800b0d0:	60a5      	str	r5, [r4, #8]
 800b0d2:	42be      	cmp	r6, r7
 800b0d4:	d900      	bls.n	800b0d8 <__ssputs_r+0x86>
 800b0d6:	463e      	mov	r6, r7
 800b0d8:	4632      	mov	r2, r6
 800b0da:	4641      	mov	r1, r8
 800b0dc:	6820      	ldr	r0, [r4, #0]
 800b0de:	f7ff fe93 	bl	800ae08 <memmove>
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	1b9b      	subs	r3, r3, r6
 800b0e8:	60a3      	str	r3, [r4, #8]
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	4433      	add	r3, r6
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	e7db      	b.n	800b0aa <__ssputs_r+0x58>
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	f7ff ff7e 	bl	800aff4 <_realloc_r>
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d1e1      	bne.n	800b0c2 <__ssputs_r+0x70>
 800b0fe:	4650      	mov	r0, sl
 800b100:	6921      	ldr	r1, [r4, #16]
 800b102:	f7ff fe9b 	bl	800ae3c <_free_r>
 800b106:	e7c7      	b.n	800b098 <__ssputs_r+0x46>

0800b108 <_svfiprintf_r>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	4698      	mov	r8, r3
 800b10e:	898b      	ldrh	r3, [r1, #12]
 800b110:	4607      	mov	r7, r0
 800b112:	061b      	lsls	r3, r3, #24
 800b114:	460d      	mov	r5, r1
 800b116:	4614      	mov	r4, r2
 800b118:	b09d      	sub	sp, #116	; 0x74
 800b11a:	d50e      	bpl.n	800b13a <_svfiprintf_r+0x32>
 800b11c:	690b      	ldr	r3, [r1, #16]
 800b11e:	b963      	cbnz	r3, 800b13a <_svfiprintf_r+0x32>
 800b120:	2140      	movs	r1, #64	; 0x40
 800b122:	f7ff fef3 	bl	800af0c <_malloc_r>
 800b126:	6028      	str	r0, [r5, #0]
 800b128:	6128      	str	r0, [r5, #16]
 800b12a:	b920      	cbnz	r0, 800b136 <_svfiprintf_r+0x2e>
 800b12c:	230c      	movs	r3, #12
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	e0d1      	b.n	800b2da <_svfiprintf_r+0x1d2>
 800b136:	2340      	movs	r3, #64	; 0x40
 800b138:	616b      	str	r3, [r5, #20]
 800b13a:	2300      	movs	r3, #0
 800b13c:	9309      	str	r3, [sp, #36]	; 0x24
 800b13e:	2320      	movs	r3, #32
 800b140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b144:	2330      	movs	r3, #48	; 0x30
 800b146:	f04f 0901 	mov.w	r9, #1
 800b14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b14e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b2f4 <_svfiprintf_r+0x1ec>
 800b152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b156:	4623      	mov	r3, r4
 800b158:	469a      	mov	sl, r3
 800b15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15e:	b10a      	cbz	r2, 800b164 <_svfiprintf_r+0x5c>
 800b160:	2a25      	cmp	r2, #37	; 0x25
 800b162:	d1f9      	bne.n	800b158 <_svfiprintf_r+0x50>
 800b164:	ebba 0b04 	subs.w	fp, sl, r4
 800b168:	d00b      	beq.n	800b182 <_svfiprintf_r+0x7a>
 800b16a:	465b      	mov	r3, fp
 800b16c:	4622      	mov	r2, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	4638      	mov	r0, r7
 800b172:	f7ff ff6e 	bl	800b052 <__ssputs_r>
 800b176:	3001      	adds	r0, #1
 800b178:	f000 80aa 	beq.w	800b2d0 <_svfiprintf_r+0x1c8>
 800b17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17e:	445a      	add	r2, fp
 800b180:	9209      	str	r2, [sp, #36]	; 0x24
 800b182:	f89a 3000 	ldrb.w	r3, [sl]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 80a2 	beq.w	800b2d0 <_svfiprintf_r+0x1c8>
 800b18c:	2300      	movs	r3, #0
 800b18e:	f04f 32ff 	mov.w	r2, #4294967295
 800b192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b196:	f10a 0a01 	add.w	sl, sl, #1
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	9307      	str	r3, [sp, #28]
 800b19e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a4:	4654      	mov	r4, sl
 800b1a6:	2205      	movs	r2, #5
 800b1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ac:	4851      	ldr	r0, [pc, #324]	; (800b2f4 <_svfiprintf_r+0x1ec>)
 800b1ae:	f7ff fe1d 	bl	800adec <memchr>
 800b1b2:	9a04      	ldr	r2, [sp, #16]
 800b1b4:	b9d8      	cbnz	r0, 800b1ee <_svfiprintf_r+0xe6>
 800b1b6:	06d0      	lsls	r0, r2, #27
 800b1b8:	bf44      	itt	mi
 800b1ba:	2320      	movmi	r3, #32
 800b1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c0:	0711      	lsls	r1, r2, #28
 800b1c2:	bf44      	itt	mi
 800b1c4:	232b      	movmi	r3, #43	; 0x2b
 800b1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b1d0:	d015      	beq.n	800b1fe <_svfiprintf_r+0xf6>
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	9a07      	ldr	r2, [sp, #28]
 800b1dc:	4621      	mov	r1, r4
 800b1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e2:	3b30      	subs	r3, #48	; 0x30
 800b1e4:	2b09      	cmp	r3, #9
 800b1e6:	d94e      	bls.n	800b286 <_svfiprintf_r+0x17e>
 800b1e8:	b1b0      	cbz	r0, 800b218 <_svfiprintf_r+0x110>
 800b1ea:	9207      	str	r2, [sp, #28]
 800b1ec:	e014      	b.n	800b218 <_svfiprintf_r+0x110>
 800b1ee:	eba0 0308 	sub.w	r3, r0, r8
 800b1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	e7d2      	b.n	800b1a4 <_svfiprintf_r+0x9c>
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	1d19      	adds	r1, r3, #4
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	9103      	str	r1, [sp, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	bfbb      	ittet	lt
 800b20a:	425b      	neglt	r3, r3
 800b20c:	f042 0202 	orrlt.w	r2, r2, #2
 800b210:	9307      	strge	r3, [sp, #28]
 800b212:	9307      	strlt	r3, [sp, #28]
 800b214:	bfb8      	it	lt
 800b216:	9204      	strlt	r2, [sp, #16]
 800b218:	7823      	ldrb	r3, [r4, #0]
 800b21a:	2b2e      	cmp	r3, #46	; 0x2e
 800b21c:	d10c      	bne.n	800b238 <_svfiprintf_r+0x130>
 800b21e:	7863      	ldrb	r3, [r4, #1]
 800b220:	2b2a      	cmp	r3, #42	; 0x2a
 800b222:	d135      	bne.n	800b290 <_svfiprintf_r+0x188>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	3402      	adds	r4, #2
 800b228:	1d1a      	adds	r2, r3, #4
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	9203      	str	r2, [sp, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bfb8      	it	lt
 800b232:	f04f 33ff 	movlt.w	r3, #4294967295
 800b236:	9305      	str	r3, [sp, #20]
 800b238:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b2f8 <_svfiprintf_r+0x1f0>
 800b23c:	2203      	movs	r2, #3
 800b23e:	4650      	mov	r0, sl
 800b240:	7821      	ldrb	r1, [r4, #0]
 800b242:	f7ff fdd3 	bl	800adec <memchr>
 800b246:	b140      	cbz	r0, 800b25a <_svfiprintf_r+0x152>
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	eba0 000a 	sub.w	r0, r0, sl
 800b24e:	fa03 f000 	lsl.w	r0, r3, r0
 800b252:	9b04      	ldr	r3, [sp, #16]
 800b254:	3401      	adds	r4, #1
 800b256:	4303      	orrs	r3, r0
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25e:	2206      	movs	r2, #6
 800b260:	4826      	ldr	r0, [pc, #152]	; (800b2fc <_svfiprintf_r+0x1f4>)
 800b262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b266:	f7ff fdc1 	bl	800adec <memchr>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d038      	beq.n	800b2e0 <_svfiprintf_r+0x1d8>
 800b26e:	4b24      	ldr	r3, [pc, #144]	; (800b300 <_svfiprintf_r+0x1f8>)
 800b270:	bb1b      	cbnz	r3, 800b2ba <_svfiprintf_r+0x1b2>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	3307      	adds	r3, #7
 800b276:	f023 0307 	bic.w	r3, r3, #7
 800b27a:	3308      	adds	r3, #8
 800b27c:	9303      	str	r3, [sp, #12]
 800b27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b280:	4433      	add	r3, r6
 800b282:	9309      	str	r3, [sp, #36]	; 0x24
 800b284:	e767      	b.n	800b156 <_svfiprintf_r+0x4e>
 800b286:	460c      	mov	r4, r1
 800b288:	2001      	movs	r0, #1
 800b28a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b28e:	e7a5      	b.n	800b1dc <_svfiprintf_r+0xd4>
 800b290:	2300      	movs	r3, #0
 800b292:	f04f 0c0a 	mov.w	ip, #10
 800b296:	4619      	mov	r1, r3
 800b298:	3401      	adds	r4, #1
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	4620      	mov	r0, r4
 800b29e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a2:	3a30      	subs	r2, #48	; 0x30
 800b2a4:	2a09      	cmp	r2, #9
 800b2a6:	d903      	bls.n	800b2b0 <_svfiprintf_r+0x1a8>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0c5      	beq.n	800b238 <_svfiprintf_r+0x130>
 800b2ac:	9105      	str	r1, [sp, #20]
 800b2ae:	e7c3      	b.n	800b238 <_svfiprintf_r+0x130>
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b8:	e7f0      	b.n	800b29c <_svfiprintf_r+0x194>
 800b2ba:	ab03      	add	r3, sp, #12
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	4b10      	ldr	r3, [pc, #64]	; (800b304 <_svfiprintf_r+0x1fc>)
 800b2c4:	a904      	add	r1, sp, #16
 800b2c6:	f3af 8000 	nop.w
 800b2ca:	1c42      	adds	r2, r0, #1
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	d1d6      	bne.n	800b27e <_svfiprintf_r+0x176>
 800b2d0:	89ab      	ldrh	r3, [r5, #12]
 800b2d2:	065b      	lsls	r3, r3, #25
 800b2d4:	f53f af2c 	bmi.w	800b130 <_svfiprintf_r+0x28>
 800b2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2da:	b01d      	add	sp, #116	; 0x74
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	ab03      	add	r3, sp, #12
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <_svfiprintf_r+0x1fc>)
 800b2ea:	a904      	add	r1, sp, #16
 800b2ec:	f7ff f954 	bl	800a598 <_printf_i>
 800b2f0:	e7eb      	b.n	800b2ca <_svfiprintf_r+0x1c2>
 800b2f2:	bf00      	nop
 800b2f4:	0800cff4 	.word	0x0800cff4
 800b2f8:	0800cffa 	.word	0x0800cffa
 800b2fc:	0800cffe 	.word	0x0800cffe
 800b300:	00000000 	.word	0x00000000
 800b304:	0800b053 	.word	0x0800b053

0800b308 <_sbrk_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	2300      	movs	r3, #0
 800b30c:	4d05      	ldr	r5, [pc, #20]	; (800b324 <_sbrk_r+0x1c>)
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	602b      	str	r3, [r5, #0]
 800b314:	f7fa fcf8 	bl	8005d08 <_sbrk>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_sbrk_r+0x1a>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_sbrk_r+0x1a>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	20007fb8 	.word	0x20007fb8

0800b328 <_raise_r>:
 800b328:	291f      	cmp	r1, #31
 800b32a:	b538      	push	{r3, r4, r5, lr}
 800b32c:	4604      	mov	r4, r0
 800b32e:	460d      	mov	r5, r1
 800b330:	d904      	bls.n	800b33c <_raise_r+0x14>
 800b332:	2316      	movs	r3, #22
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	f04f 30ff 	mov.w	r0, #4294967295
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b33e:	b112      	cbz	r2, 800b346 <_raise_r+0x1e>
 800b340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b344:	b94b      	cbnz	r3, 800b35a <_raise_r+0x32>
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f830 	bl	800b3ac <_getpid_r>
 800b34c:	462a      	mov	r2, r5
 800b34e:	4601      	mov	r1, r0
 800b350:	4620      	mov	r0, r4
 800b352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b356:	f000 b817 	b.w	800b388 <_kill_r>
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d00a      	beq.n	800b374 <_raise_r+0x4c>
 800b35e:	1c59      	adds	r1, r3, #1
 800b360:	d103      	bne.n	800b36a <_raise_r+0x42>
 800b362:	2316      	movs	r3, #22
 800b364:	6003      	str	r3, [r0, #0]
 800b366:	2001      	movs	r0, #1
 800b368:	e7e7      	b.n	800b33a <_raise_r+0x12>
 800b36a:	2400      	movs	r4, #0
 800b36c:	4628      	mov	r0, r5
 800b36e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b372:	4798      	blx	r3
 800b374:	2000      	movs	r0, #0
 800b376:	e7e0      	b.n	800b33a <_raise_r+0x12>

0800b378 <raise>:
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <raise+0xc>)
 800b37a:	4601      	mov	r1, r0
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	f7ff bfd3 	b.w	800b328 <_raise_r>
 800b382:	bf00      	nop
 800b384:	20000018 	.word	0x20000018

0800b388 <_kill_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	2300      	movs	r3, #0
 800b38c:	4d06      	ldr	r5, [pc, #24]	; (800b3a8 <_kill_r+0x20>)
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	4611      	mov	r1, r2
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	f7fa fc34 	bl	8005c02 <_kill>
 800b39a:	1c43      	adds	r3, r0, #1
 800b39c:	d102      	bne.n	800b3a4 <_kill_r+0x1c>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	b103      	cbz	r3, 800b3a4 <_kill_r+0x1c>
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	bd38      	pop	{r3, r4, r5, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20007fb8 	.word	0x20007fb8

0800b3ac <_getpid_r>:
 800b3ac:	f7fa bc22 	b.w	8005bf4 <_getpid>

0800b3b0 <__sread>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b8:	f000 f8a8 	bl	800b50c <_read_r>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	bfab      	itete	ge
 800b3c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3c4:	181b      	addge	r3, r3, r0
 800b3c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3ca:	bfac      	ite	ge
 800b3cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3ce:	81a3      	strhlt	r3, [r4, #12]
 800b3d0:	bd10      	pop	{r4, pc}

0800b3d2 <__swrite>:
 800b3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d6:	461f      	mov	r7, r3
 800b3d8:	898b      	ldrh	r3, [r1, #12]
 800b3da:	4605      	mov	r5, r0
 800b3dc:	05db      	lsls	r3, r3, #23
 800b3de:	460c      	mov	r4, r1
 800b3e0:	4616      	mov	r6, r2
 800b3e2:	d505      	bpl.n	800b3f0 <__swrite+0x1e>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ec:	f000 f868 	bl	800b4c0 <_lseek_r>
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	4632      	mov	r2, r6
 800b3f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	463b      	mov	r3, r7
 800b3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b406:	f000 b817 	b.w	800b438 <_write_r>

0800b40a <__sseek>:
 800b40a:	b510      	push	{r4, lr}
 800b40c:	460c      	mov	r4, r1
 800b40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b412:	f000 f855 	bl	800b4c0 <_lseek_r>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	bf15      	itete	ne
 800b41c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b41e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b426:	81a3      	strheq	r3, [r4, #12]
 800b428:	bf18      	it	ne
 800b42a:	81a3      	strhne	r3, [r4, #12]
 800b42c:	bd10      	pop	{r4, pc}

0800b42e <__sclose>:
 800b42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b432:	f000 b813 	b.w	800b45c <_close_r>
	...

0800b438 <_write_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	2200      	movs	r2, #0
 800b442:	4d05      	ldr	r5, [pc, #20]	; (800b458 <_write_r+0x20>)
 800b444:	602a      	str	r2, [r5, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	f7fa fc12 	bl	8005c70 <_write>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d102      	bne.n	800b456 <_write_r+0x1e>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	b103      	cbz	r3, 800b456 <_write_r+0x1e>
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20007fb8 	.word	0x20007fb8

0800b45c <_close_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	2300      	movs	r3, #0
 800b460:	4d05      	ldr	r5, [pc, #20]	; (800b478 <_close_r+0x1c>)
 800b462:	4604      	mov	r4, r0
 800b464:	4608      	mov	r0, r1
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	f7fa fc1e 	bl	8005ca8 <_close>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_close_r+0x1a>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_close_r+0x1a>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	20007fb8 	.word	0x20007fb8

0800b47c <_fstat_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	2300      	movs	r3, #0
 800b480:	4d06      	ldr	r5, [pc, #24]	; (800b49c <_fstat_r+0x20>)
 800b482:	4604      	mov	r4, r0
 800b484:	4608      	mov	r0, r1
 800b486:	4611      	mov	r1, r2
 800b488:	602b      	str	r3, [r5, #0]
 800b48a:	f7fa fc18 	bl	8005cbe <_fstat>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	d102      	bne.n	800b498 <_fstat_r+0x1c>
 800b492:	682b      	ldr	r3, [r5, #0]
 800b494:	b103      	cbz	r3, 800b498 <_fstat_r+0x1c>
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	bd38      	pop	{r3, r4, r5, pc}
 800b49a:	bf00      	nop
 800b49c:	20007fb8 	.word	0x20007fb8

0800b4a0 <_isatty_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	4d05      	ldr	r5, [pc, #20]	; (800b4bc <_isatty_r+0x1c>)
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	602b      	str	r3, [r5, #0]
 800b4ac:	f7fa fc16 	bl	8005cdc <_isatty>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_isatty_r+0x1a>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_isatty_r+0x1a>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	20007fb8 	.word	0x20007fb8

0800b4c0 <_lseek_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4d05      	ldr	r5, [pc, #20]	; (800b4e0 <_lseek_r+0x20>)
 800b4cc:	602a      	str	r2, [r5, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f7fa fc0e 	bl	8005cf0 <_lseek>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_lseek_r+0x1e>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_lseek_r+0x1e>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20007fb8 	.word	0x20007fb8

0800b4e4 <__malloc_lock>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__malloc_lock+0x8>)
 800b4e6:	f7ff bc19 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20007fac 	.word	0x20007fac

0800b4f0 <__malloc_unlock>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <__malloc_unlock+0x8>)
 800b4f2:	f7ff bc14 	b.w	800ad1e <__retarget_lock_release_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	20007fac 	.word	0x20007fac

0800b4fc <_malloc_usable_size_r>:
 800b4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b500:	1f18      	subs	r0, r3, #4
 800b502:	2b00      	cmp	r3, #0
 800b504:	bfbc      	itt	lt
 800b506:	580b      	ldrlt	r3, [r1, r0]
 800b508:	18c0      	addlt	r0, r0, r3
 800b50a:	4770      	bx	lr

0800b50c <_read_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	2200      	movs	r2, #0
 800b516:	4d05      	ldr	r5, [pc, #20]	; (800b52c <_read_r+0x20>)
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f7fa fb8b 	bl	8005c36 <_read>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_read_r+0x1e>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_read_r+0x1e>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	20007fb8 	.word	0x20007fb8

0800b530 <atan>:
 800b530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	4bb6      	ldr	r3, [pc, #728]	; (800b810 <atan+0x2e0>)
 800b536:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b53a:	429e      	cmp	r6, r3
 800b53c:	4604      	mov	r4, r0
 800b53e:	460d      	mov	r5, r1
 800b540:	468b      	mov	fp, r1
 800b542:	dd17      	ble.n	800b574 <atan+0x44>
 800b544:	4bb3      	ldr	r3, [pc, #716]	; (800b814 <atan+0x2e4>)
 800b546:	429e      	cmp	r6, r3
 800b548:	dc01      	bgt.n	800b54e <atan+0x1e>
 800b54a:	d109      	bne.n	800b560 <atan+0x30>
 800b54c:	b140      	cbz	r0, 800b560 <atan+0x30>
 800b54e:	4622      	mov	r2, r4
 800b550:	462b      	mov	r3, r5
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f4 fe6d 	bl	8000234 <__adddf3>
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	e005      	b.n	800b56c <atan+0x3c>
 800b560:	f1bb 0f00 	cmp.w	fp, #0
 800b564:	4cac      	ldr	r4, [pc, #688]	; (800b818 <atan+0x2e8>)
 800b566:	f300 8121 	bgt.w	800b7ac <atan+0x27c>
 800b56a:	4dac      	ldr	r5, [pc, #688]	; (800b81c <atan+0x2ec>)
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	4baa      	ldr	r3, [pc, #680]	; (800b820 <atan+0x2f0>)
 800b576:	429e      	cmp	r6, r3
 800b578:	dc11      	bgt.n	800b59e <atan+0x6e>
 800b57a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b57e:	429e      	cmp	r6, r3
 800b580:	dc0a      	bgt.n	800b598 <atan+0x68>
 800b582:	a38b      	add	r3, pc, #556	; (adr r3, 800b7b0 <atan+0x280>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f4 fe54 	bl	8000234 <__adddf3>
 800b58c:	2200      	movs	r2, #0
 800b58e:	4ba5      	ldr	r3, [pc, #660]	; (800b824 <atan+0x2f4>)
 800b590:	f7f5 fa96 	bl	8000ac0 <__aeabi_dcmpgt>
 800b594:	2800      	cmp	r0, #0
 800b596:	d1e9      	bne.n	800b56c <atan+0x3c>
 800b598:	f04f 3aff 	mov.w	sl, #4294967295
 800b59c:	e027      	b.n	800b5ee <atan+0xbe>
 800b59e:	f000 f997 	bl	800b8d0 <fabs>
 800b5a2:	4ba1      	ldr	r3, [pc, #644]	; (800b828 <atan+0x2f8>)
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	429e      	cmp	r6, r3
 800b5a8:	460d      	mov	r5, r1
 800b5aa:	f300 80b8 	bgt.w	800b71e <atan+0x1ee>
 800b5ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b5b2:	429e      	cmp	r6, r3
 800b5b4:	f300 809c 	bgt.w	800b6f0 <atan+0x1c0>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	f7f4 fe3a 	bl	8000234 <__adddf3>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4b98      	ldr	r3, [pc, #608]	; (800b824 <atan+0x2f4>)
 800b5c4:	f7f4 fe34 	bl	8000230 <__aeabi_dsub>
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7f4 fe2d 	bl	8000234 <__adddf3>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f5 f907 	bl	80007f4 <__aeabi_ddiv>
 800b5e6:	f04f 0a00 	mov.w	sl, #0
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	460d      	mov	r5, r1
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	462b      	mov	r3, r5
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7f4 ffd3 	bl	80005a0 <__aeabi_dmul>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4680      	mov	r8, r0
 800b600:	4689      	mov	r9, r1
 800b602:	f7f4 ffcd 	bl	80005a0 <__aeabi_dmul>
 800b606:	a36c      	add	r3, pc, #432	; (adr r3, 800b7b8 <atan+0x288>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	4606      	mov	r6, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	f7f4 ffc6 	bl	80005a0 <__aeabi_dmul>
 800b614:	a36a      	add	r3, pc, #424	; (adr r3, 800b7c0 <atan+0x290>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f4 fe0b 	bl	8000234 <__adddf3>
 800b61e:	4632      	mov	r2, r6
 800b620:	463b      	mov	r3, r7
 800b622:	f7f4 ffbd 	bl	80005a0 <__aeabi_dmul>
 800b626:	a368      	add	r3, pc, #416	; (adr r3, 800b7c8 <atan+0x298>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 fe02 	bl	8000234 <__adddf3>
 800b630:	4632      	mov	r2, r6
 800b632:	463b      	mov	r3, r7
 800b634:	f7f4 ffb4 	bl	80005a0 <__aeabi_dmul>
 800b638:	a365      	add	r3, pc, #404	; (adr r3, 800b7d0 <atan+0x2a0>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 fdf9 	bl	8000234 <__adddf3>
 800b642:	4632      	mov	r2, r6
 800b644:	463b      	mov	r3, r7
 800b646:	f7f4 ffab 	bl	80005a0 <__aeabi_dmul>
 800b64a:	a363      	add	r3, pc, #396	; (adr r3, 800b7d8 <atan+0x2a8>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fdf0 	bl	8000234 <__adddf3>
 800b654:	4632      	mov	r2, r6
 800b656:	463b      	mov	r3, r7
 800b658:	f7f4 ffa2 	bl	80005a0 <__aeabi_dmul>
 800b65c:	a360      	add	r3, pc, #384	; (adr r3, 800b7e0 <atan+0x2b0>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fde7 	bl	8000234 <__adddf3>
 800b666:	4642      	mov	r2, r8
 800b668:	464b      	mov	r3, r9
 800b66a:	f7f4 ff99 	bl	80005a0 <__aeabi_dmul>
 800b66e:	a35e      	add	r3, pc, #376	; (adr r3, 800b7e8 <atan+0x2b8>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	4680      	mov	r8, r0
 800b676:	4689      	mov	r9, r1
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f4 ff90 	bl	80005a0 <__aeabi_dmul>
 800b680:	a35b      	add	r3, pc, #364	; (adr r3, 800b7f0 <atan+0x2c0>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fdd3 	bl	8000230 <__aeabi_dsub>
 800b68a:	4632      	mov	r2, r6
 800b68c:	463b      	mov	r3, r7
 800b68e:	f7f4 ff87 	bl	80005a0 <__aeabi_dmul>
 800b692:	a359      	add	r3, pc, #356	; (adr r3, 800b7f8 <atan+0x2c8>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fdca 	bl	8000230 <__aeabi_dsub>
 800b69c:	4632      	mov	r2, r6
 800b69e:	463b      	mov	r3, r7
 800b6a0:	f7f4 ff7e 	bl	80005a0 <__aeabi_dmul>
 800b6a4:	a356      	add	r3, pc, #344	; (adr r3, 800b800 <atan+0x2d0>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 fdc1 	bl	8000230 <__aeabi_dsub>
 800b6ae:	4632      	mov	r2, r6
 800b6b0:	463b      	mov	r3, r7
 800b6b2:	f7f4 ff75 	bl	80005a0 <__aeabi_dmul>
 800b6b6:	a354      	add	r3, pc, #336	; (adr r3, 800b808 <atan+0x2d8>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f7f4 fdb8 	bl	8000230 <__aeabi_dsub>
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	f7f4 ff6c 	bl	80005a0 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	f7f4 fdb0 	bl	8000234 <__adddf3>
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	f7f4 ff62 	bl	80005a0 <__aeabi_dmul>
 800b6dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	d144      	bne.n	800b770 <atan+0x240>
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	f7f4 fda1 	bl	8000230 <__aeabi_dsub>
 800b6ee:	e734      	b.n	800b55a <atan+0x2a>
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4b4c      	ldr	r3, [pc, #304]	; (800b824 <atan+0x2f4>)
 800b6f4:	f7f4 fd9c 	bl	8000230 <__aeabi_dsub>
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	4b48      	ldr	r3, [pc, #288]	; (800b824 <atan+0x2f4>)
 800b704:	f7f4 fd96 	bl	8000234 <__adddf3>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f5 f870 	bl	80007f4 <__aeabi_ddiv>
 800b714:	f04f 0a01 	mov.w	sl, #1
 800b718:	4604      	mov	r4, r0
 800b71a:	460d      	mov	r5, r1
 800b71c:	e767      	b.n	800b5ee <atan+0xbe>
 800b71e:	4b43      	ldr	r3, [pc, #268]	; (800b82c <atan+0x2fc>)
 800b720:	429e      	cmp	r6, r3
 800b722:	da1a      	bge.n	800b75a <atan+0x22a>
 800b724:	2200      	movs	r2, #0
 800b726:	4b42      	ldr	r3, [pc, #264]	; (800b830 <atan+0x300>)
 800b728:	f7f4 fd82 	bl	8000230 <__aeabi_dsub>
 800b72c:	2200      	movs	r2, #0
 800b72e:	4606      	mov	r6, r0
 800b730:	460f      	mov	r7, r1
 800b732:	4620      	mov	r0, r4
 800b734:	4629      	mov	r1, r5
 800b736:	4b3e      	ldr	r3, [pc, #248]	; (800b830 <atan+0x300>)
 800b738:	f7f4 ff32 	bl	80005a0 <__aeabi_dmul>
 800b73c:	2200      	movs	r2, #0
 800b73e:	4b39      	ldr	r3, [pc, #228]	; (800b824 <atan+0x2f4>)
 800b740:	f7f4 fd78 	bl	8000234 <__adddf3>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f5 f852 	bl	80007f4 <__aeabi_ddiv>
 800b750:	f04f 0a02 	mov.w	sl, #2
 800b754:	4604      	mov	r4, r0
 800b756:	460d      	mov	r5, r1
 800b758:	e749      	b.n	800b5ee <atan+0xbe>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	2000      	movs	r0, #0
 800b760:	4934      	ldr	r1, [pc, #208]	; (800b834 <atan+0x304>)
 800b762:	f7f5 f847 	bl	80007f4 <__aeabi_ddiv>
 800b766:	f04f 0a03 	mov.w	sl, #3
 800b76a:	4604      	mov	r4, r0
 800b76c:	460d      	mov	r5, r1
 800b76e:	e73e      	b.n	800b5ee <atan+0xbe>
 800b770:	4b31      	ldr	r3, [pc, #196]	; (800b838 <atan+0x308>)
 800b772:	4e32      	ldr	r6, [pc, #200]	; (800b83c <atan+0x30c>)
 800b774:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b778:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b77c:	e9da 2300 	ldrd	r2, r3, [sl]
 800b780:	f7f4 fd56 	bl	8000230 <__aeabi_dsub>
 800b784:	4622      	mov	r2, r4
 800b786:	462b      	mov	r3, r5
 800b788:	f7f4 fd52 	bl	8000230 <__aeabi_dsub>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b794:	f7f4 fd4c 	bl	8000230 <__aeabi_dsub>
 800b798:	f1bb 0f00 	cmp.w	fp, #0
 800b79c:	4604      	mov	r4, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	f6bf aee4 	bge.w	800b56c <atan+0x3c>
 800b7a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7a8:	461d      	mov	r5, r3
 800b7aa:	e6df      	b.n	800b56c <atan+0x3c>
 800b7ac:	4d24      	ldr	r5, [pc, #144]	; (800b840 <atan+0x310>)
 800b7ae:	e6dd      	b.n	800b56c <atan+0x3c>
 800b7b0:	8800759c 	.word	0x8800759c
 800b7b4:	7e37e43c 	.word	0x7e37e43c
 800b7b8:	e322da11 	.word	0xe322da11
 800b7bc:	3f90ad3a 	.word	0x3f90ad3a
 800b7c0:	24760deb 	.word	0x24760deb
 800b7c4:	3fa97b4b 	.word	0x3fa97b4b
 800b7c8:	a0d03d51 	.word	0xa0d03d51
 800b7cc:	3fb10d66 	.word	0x3fb10d66
 800b7d0:	c54c206e 	.word	0xc54c206e
 800b7d4:	3fb745cd 	.word	0x3fb745cd
 800b7d8:	920083ff 	.word	0x920083ff
 800b7dc:	3fc24924 	.word	0x3fc24924
 800b7e0:	5555550d 	.word	0x5555550d
 800b7e4:	3fd55555 	.word	0x3fd55555
 800b7e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b7ec:	bfa2b444 	.word	0xbfa2b444
 800b7f0:	52defd9a 	.word	0x52defd9a
 800b7f4:	3fadde2d 	.word	0x3fadde2d
 800b7f8:	af749a6d 	.word	0xaf749a6d
 800b7fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b800:	fe231671 	.word	0xfe231671
 800b804:	3fbc71c6 	.word	0x3fbc71c6
 800b808:	9998ebc4 	.word	0x9998ebc4
 800b80c:	3fc99999 	.word	0x3fc99999
 800b810:	440fffff 	.word	0x440fffff
 800b814:	7ff00000 	.word	0x7ff00000
 800b818:	54442d18 	.word	0x54442d18
 800b81c:	bff921fb 	.word	0xbff921fb
 800b820:	3fdbffff 	.word	0x3fdbffff
 800b824:	3ff00000 	.word	0x3ff00000
 800b828:	3ff2ffff 	.word	0x3ff2ffff
 800b82c:	40038000 	.word	0x40038000
 800b830:	3ff80000 	.word	0x3ff80000
 800b834:	bff00000 	.word	0xbff00000
 800b838:	0800d0a8 	.word	0x0800d0a8
 800b83c:	0800d088 	.word	0x0800d088
 800b840:	3ff921fb 	.word	0x3ff921fb

0800b844 <cos>:
 800b844:	b530      	push	{r4, r5, lr}
 800b846:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <cos+0x84>)
 800b848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b84c:	4293      	cmp	r3, r2
 800b84e:	b087      	sub	sp, #28
 800b850:	dc06      	bgt.n	800b860 <cos+0x1c>
 800b852:	2200      	movs	r2, #0
 800b854:	2300      	movs	r3, #0
 800b856:	b007      	add	sp, #28
 800b858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b85c:	f000 baa0 	b.w	800bda0 <__kernel_cos>
 800b860:	4a1a      	ldr	r2, [pc, #104]	; (800b8cc <cos+0x88>)
 800b862:	4293      	cmp	r3, r2
 800b864:	dd05      	ble.n	800b872 <cos+0x2e>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	f7f4 fce1 	bl	8000230 <__aeabi_dsub>
 800b86e:	b007      	add	sp, #28
 800b870:	bd30      	pop	{r4, r5, pc}
 800b872:	aa02      	add	r2, sp, #8
 800b874:	f000 f89c 	bl	800b9b0 <__ieee754_rem_pio2>
 800b878:	f000 0003 	and.w	r0, r0, #3
 800b87c:	2801      	cmp	r0, #1
 800b87e:	d009      	beq.n	800b894 <cos+0x50>
 800b880:	2802      	cmp	r0, #2
 800b882:	d011      	beq.n	800b8a8 <cos+0x64>
 800b884:	b9b8      	cbnz	r0, 800b8b6 <cos+0x72>
 800b886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88e:	f000 fa87 	bl	800bda0 <__kernel_cos>
 800b892:	e7ec      	b.n	800b86e <cos+0x2a>
 800b894:	9000      	str	r0, [sp, #0]
 800b896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b89e:	f000 fe7f 	bl	800c5a0 <__kernel_sin>
 800b8a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b8a6:	e7e2      	b.n	800b86e <cos+0x2a>
 800b8a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b0:	f000 fa76 	bl	800bda0 <__kernel_cos>
 800b8b4:	e7f5      	b.n	800b8a2 <cos+0x5e>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8c2:	f000 fe6d 	bl	800c5a0 <__kernel_sin>
 800b8c6:	e7d2      	b.n	800b86e <cos+0x2a>
 800b8c8:	3fe921fb 	.word	0x3fe921fb
 800b8cc:	7fefffff 	.word	0x7fefffff

0800b8d0 <fabs>:
 800b8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <sin>:
 800b8d8:	b530      	push	{r4, r5, lr}
 800b8da:	4a20      	ldr	r2, [pc, #128]	; (800b95c <sin+0x84>)
 800b8dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	dc06      	bgt.n	800b8f4 <sin+0x1c>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f000 fe57 	bl	800c5a0 <__kernel_sin>
 800b8f2:	e006      	b.n	800b902 <sin+0x2a>
 800b8f4:	4a1a      	ldr	r2, [pc, #104]	; (800b960 <sin+0x88>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	dd05      	ble.n	800b906 <sin+0x2e>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	f7f4 fc97 	bl	8000230 <__aeabi_dsub>
 800b902:	b007      	add	sp, #28
 800b904:	bd30      	pop	{r4, r5, pc}
 800b906:	aa02      	add	r2, sp, #8
 800b908:	f000 f852 	bl	800b9b0 <__ieee754_rem_pio2>
 800b90c:	f000 0003 	and.w	r0, r0, #3
 800b910:	2801      	cmp	r0, #1
 800b912:	d009      	beq.n	800b928 <sin+0x50>
 800b914:	2802      	cmp	r0, #2
 800b916:	d00e      	beq.n	800b936 <sin+0x5e>
 800b918:	b9c0      	cbnz	r0, 800b94c <sin+0x74>
 800b91a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91e:	2301      	movs	r3, #1
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b926:	e7e2      	b.n	800b8ee <sin+0x16>
 800b928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b930:	f000 fa36 	bl	800bda0 <__kernel_cos>
 800b934:	e7e5      	b.n	800b902 <sin+0x2a>
 800b936:	2301      	movs	r3, #1
 800b938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b942:	f000 fe2d 	bl	800c5a0 <__kernel_sin>
 800b946:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b94a:	e7da      	b.n	800b902 <sin+0x2a>
 800b94c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b954:	f000 fa24 	bl	800bda0 <__kernel_cos>
 800b958:	e7f5      	b.n	800b946 <sin+0x6e>
 800b95a:	bf00      	nop
 800b95c:	3fe921fb 	.word	0x3fe921fb
 800b960:	7fefffff 	.word	0x7fefffff

0800b964 <roundf>:
 800b964:	b508      	push	{r3, lr}
 800b966:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b96a:	3b7f      	subs	r3, #127	; 0x7f
 800b96c:	2b16      	cmp	r3, #22
 800b96e:	4601      	mov	r1, r0
 800b970:	4602      	mov	r2, r0
 800b972:	dc14      	bgt.n	800b99e <roundf+0x3a>
 800b974:	2b00      	cmp	r3, #0
 800b976:	da07      	bge.n	800b988 <roundf+0x24>
 800b978:	3301      	adds	r3, #1
 800b97a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b97e:	d101      	bne.n	800b984 <roundf+0x20>
 800b980:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b984:	4608      	mov	r0, r1
 800b986:	bd08      	pop	{r3, pc}
 800b988:	4808      	ldr	r0, [pc, #32]	; (800b9ac <roundf+0x48>)
 800b98a:	4118      	asrs	r0, r3
 800b98c:	4201      	tst	r1, r0
 800b98e:	d0f9      	beq.n	800b984 <roundf+0x20>
 800b990:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b994:	4119      	asrs	r1, r3
 800b996:	4411      	add	r1, r2
 800b998:	ea21 0100 	bic.w	r1, r1, r0
 800b99c:	e7f2      	b.n	800b984 <roundf+0x20>
 800b99e:	2b80      	cmp	r3, #128	; 0x80
 800b9a0:	d1f0      	bne.n	800b984 <roundf+0x20>
 800b9a2:	f7f5 f915 	bl	8000bd0 <__addsf3>
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	e7ec      	b.n	800b984 <roundf+0x20>
 800b9aa:	bf00      	nop
 800b9ac:	007fffff 	.word	0x007fffff

0800b9b0 <__ieee754_rem_pio2>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	4ac4      	ldr	r2, [pc, #784]	; (800bcc8 <__ieee754_rem_pio2+0x318>)
 800b9b8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b9bc:	b08d      	sub	sp, #52	; 0x34
 800b9be:	4592      	cmp	sl, r2
 800b9c0:	9104      	str	r1, [sp, #16]
 800b9c2:	dc07      	bgt.n	800b9d4 <__ieee754_rem_pio2+0x24>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e9c4 0100 	strd	r0, r1, [r4]
 800b9cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	e024      	b.n	800ba1e <__ieee754_rem_pio2+0x6e>
 800b9d4:	4abd      	ldr	r2, [pc, #756]	; (800bccc <__ieee754_rem_pio2+0x31c>)
 800b9d6:	4592      	cmp	sl, r2
 800b9d8:	dc72      	bgt.n	800bac0 <__ieee754_rem_pio2+0x110>
 800b9da:	9b04      	ldr	r3, [sp, #16]
 800b9dc:	4dbc      	ldr	r5, [pc, #752]	; (800bcd0 <__ieee754_rem_pio2+0x320>)
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	a3ab      	add	r3, pc, #684	; (adr r3, 800bc90 <__ieee754_rem_pio2+0x2e0>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	dd36      	ble.n	800ba56 <__ieee754_rem_pio2+0xa6>
 800b9e8:	f7f4 fc22 	bl	8000230 <__aeabi_dsub>
 800b9ec:	45aa      	cmp	sl, r5
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	460f      	mov	r7, r1
 800b9f2:	d018      	beq.n	800ba26 <__ieee754_rem_pio2+0x76>
 800b9f4:	a3a8      	add	r3, pc, #672	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2e8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	f7f4 fc19 	bl	8000230 <__aeabi_dsub>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4630      	mov	r0, r6
 800ba04:	e9c4 2300 	strd	r2, r3, [r4]
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f4 fc11 	bl	8000230 <__aeabi_dsub>
 800ba0e:	a3a2      	add	r3, pc, #648	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2e8>)
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	f7f4 fc0c 	bl	8000230 <__aeabi_dsub>
 800ba18:	2501      	movs	r5, #1
 800ba1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba1e:	4628      	mov	r0, r5
 800ba20:	b00d      	add	sp, #52	; 0x34
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	a39e      	add	r3, pc, #632	; (adr r3, 800bca0 <__ieee754_rem_pio2+0x2f0>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f7f4 fc00 	bl	8000230 <__aeabi_dsub>
 800ba30:	a39d      	add	r3, pc, #628	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x2f8>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	4606      	mov	r6, r0
 800ba38:	460f      	mov	r7, r1
 800ba3a:	f7f4 fbf9 	bl	8000230 <__aeabi_dsub>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4630      	mov	r0, r6
 800ba44:	e9c4 2300 	strd	r2, r3, [r4]
 800ba48:	4639      	mov	r1, r7
 800ba4a:	f7f4 fbf1 	bl	8000230 <__aeabi_dsub>
 800ba4e:	a396      	add	r3, pc, #600	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x2f8>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	e7de      	b.n	800ba14 <__ieee754_rem_pio2+0x64>
 800ba56:	f7f4 fbed 	bl	8000234 <__adddf3>
 800ba5a:	45aa      	cmp	sl, r5
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	d016      	beq.n	800ba90 <__ieee754_rem_pio2+0xe0>
 800ba62:	a38d      	add	r3, pc, #564	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2e8>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f4 fbe4 	bl	8000234 <__adddf3>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4630      	mov	r0, r6
 800ba72:	e9c4 2300 	strd	r2, r3, [r4]
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f4 fbda 	bl	8000230 <__aeabi_dsub>
 800ba7c:	a386      	add	r3, pc, #536	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2e8>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fbd7 	bl	8000234 <__adddf3>
 800ba86:	f04f 35ff 	mov.w	r5, #4294967295
 800ba8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba8e:	e7c6      	b.n	800ba1e <__ieee754_rem_pio2+0x6e>
 800ba90:	a383      	add	r3, pc, #524	; (adr r3, 800bca0 <__ieee754_rem_pio2+0x2f0>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fbcd 	bl	8000234 <__adddf3>
 800ba9a:	a383      	add	r3, pc, #524	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x2f8>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	4606      	mov	r6, r0
 800baa2:	460f      	mov	r7, r1
 800baa4:	f7f4 fbc6 	bl	8000234 <__adddf3>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4630      	mov	r0, r6
 800baae:	e9c4 2300 	strd	r2, r3, [r4]
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f4 fbbc 	bl	8000230 <__aeabi_dsub>
 800bab8:	a37b      	add	r3, pc, #492	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x2f8>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	e7e0      	b.n	800ba82 <__ieee754_rem_pio2+0xd2>
 800bac0:	4a84      	ldr	r2, [pc, #528]	; (800bcd4 <__ieee754_rem_pio2+0x324>)
 800bac2:	4592      	cmp	sl, r2
 800bac4:	f300 80d5 	bgt.w	800bc72 <__ieee754_rem_pio2+0x2c2>
 800bac8:	f7ff ff02 	bl	800b8d0 <fabs>
 800bacc:	a378      	add	r3, pc, #480	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x300>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	4606      	mov	r6, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	f7f4 fd63 	bl	80005a0 <__aeabi_dmul>
 800bada:	2200      	movs	r2, #0
 800badc:	4b7e      	ldr	r3, [pc, #504]	; (800bcd8 <__ieee754_rem_pio2+0x328>)
 800bade:	f7f4 fba9 	bl	8000234 <__adddf3>
 800bae2:	f7f4 fff7 	bl	8000ad4 <__aeabi_d2iz>
 800bae6:	4605      	mov	r5, r0
 800bae8:	f7f4 fcf0 	bl	80004cc <__aeabi_i2d>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baf4:	a366      	add	r3, pc, #408	; (adr r3, 800bc90 <__ieee754_rem_pio2+0x2e0>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f7f4 fd51 	bl	80005a0 <__aeabi_dmul>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4630      	mov	r0, r6
 800bb04:	4639      	mov	r1, r7
 800bb06:	f7f4 fb93 	bl	8000230 <__aeabi_dsub>
 800bb0a:	a363      	add	r3, pc, #396	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2e8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	4680      	mov	r8, r0
 800bb12:	4689      	mov	r9, r1
 800bb14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb18:	f7f4 fd42 	bl	80005a0 <__aeabi_dmul>
 800bb1c:	2d1f      	cmp	r5, #31
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	dc0e      	bgt.n	800bb42 <__ieee754_rem_pio2+0x192>
 800bb24:	4b6d      	ldr	r3, [pc, #436]	; (800bcdc <__ieee754_rem_pio2+0x32c>)
 800bb26:	1e6a      	subs	r2, r5, #1
 800bb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2c:	4553      	cmp	r3, sl
 800bb2e:	d008      	beq.n	800bb42 <__ieee754_rem_pio2+0x192>
 800bb30:	4632      	mov	r2, r6
 800bb32:	463b      	mov	r3, r7
 800bb34:	4640      	mov	r0, r8
 800bb36:	4649      	mov	r1, r9
 800bb38:	f7f4 fb7a 	bl	8000230 <__aeabi_dsub>
 800bb3c:	e9c4 0100 	strd	r0, r1, [r4]
 800bb40:	e013      	b.n	800bb6a <__ieee754_rem_pio2+0x1ba>
 800bb42:	463b      	mov	r3, r7
 800bb44:	4632      	mov	r2, r6
 800bb46:	4640      	mov	r0, r8
 800bb48:	4649      	mov	r1, r9
 800bb4a:	f7f4 fb71 	bl	8000230 <__aeabi_dsub>
 800bb4e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bb52:	9305      	str	r3, [sp, #20]
 800bb54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb58:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800bb5c:	f1ba 0f10 	cmp.w	sl, #16
 800bb60:	dc1f      	bgt.n	800bba2 <__ieee754_rem_pio2+0x1f2>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	e9c4 2300 	strd	r2, r3, [r4]
 800bb6a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4653      	mov	r3, sl
 800bb72:	4649      	mov	r1, r9
 800bb74:	f7f4 fb5c 	bl	8000230 <__aeabi_dsub>
 800bb78:	4632      	mov	r2, r6
 800bb7a:	463b      	mov	r3, r7
 800bb7c:	f7f4 fb58 	bl	8000230 <__aeabi_dsub>
 800bb80:	460b      	mov	r3, r1
 800bb82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb86:	9904      	ldr	r1, [sp, #16]
 800bb88:	4602      	mov	r2, r0
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	f6bf af47 	bge.w	800ba1e <__ieee754_rem_pio2+0x6e>
 800bb90:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800bb94:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bb98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb9c:	60e3      	str	r3, [r4, #12]
 800bb9e:	426d      	negs	r5, r5
 800bba0:	e73d      	b.n	800ba1e <__ieee754_rem_pio2+0x6e>
 800bba2:	a33f      	add	r3, pc, #252	; (adr r3, 800bca0 <__ieee754_rem_pio2+0x2f0>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbac:	f7f4 fcf8 	bl	80005a0 <__aeabi_dmul>
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	f7f4 fb38 	bl	8000230 <__aeabi_dsub>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4682      	mov	sl, r0
 800bbc6:	468b      	mov	fp, r1
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4649      	mov	r1, r9
 800bbcc:	f7f4 fb30 	bl	8000230 <__aeabi_dsub>
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	f7f4 fb2c 	bl	8000230 <__aeabi_dsub>
 800bbd8:	a333      	add	r3, pc, #204	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x2f8>)
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	4606      	mov	r6, r0
 800bbe0:	460f      	mov	r7, r1
 800bbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbe6:	f7f4 fcdb 	bl	80005a0 <__aeabi_dmul>
 800bbea:	4632      	mov	r2, r6
 800bbec:	463b      	mov	r3, r7
 800bbee:	f7f4 fb1f 	bl	8000230 <__aeabi_dsub>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	4650      	mov	r0, sl
 800bbfc:	4659      	mov	r1, fp
 800bbfe:	f7f4 fb17 	bl	8000230 <__aeabi_dsub>
 800bc02:	9a05      	ldr	r2, [sp, #20]
 800bc04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	2b31      	cmp	r3, #49	; 0x31
 800bc0c:	dc06      	bgt.n	800bc1c <__ieee754_rem_pio2+0x26c>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	46d0      	mov	r8, sl
 800bc14:	46d9      	mov	r9, fp
 800bc16:	e9c4 2300 	strd	r2, r3, [r4]
 800bc1a:	e7a6      	b.n	800bb6a <__ieee754_rem_pio2+0x1ba>
 800bc1c:	a326      	add	r3, pc, #152	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x308>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc26:	f7f4 fcbb 	bl	80005a0 <__aeabi_dmul>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460f      	mov	r7, r1
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4650      	mov	r0, sl
 800bc34:	4659      	mov	r1, fp
 800bc36:	f7f4 fafb 	bl	8000230 <__aeabi_dsub>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4680      	mov	r8, r0
 800bc40:	4689      	mov	r9, r1
 800bc42:	4650      	mov	r0, sl
 800bc44:	4659      	mov	r1, fp
 800bc46:	f7f4 faf3 	bl	8000230 <__aeabi_dsub>
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	463b      	mov	r3, r7
 800bc4e:	f7f4 faef 	bl	8000230 <__aeabi_dsub>
 800bc52:	a31b      	add	r3, pc, #108	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x310>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	4606      	mov	r6, r0
 800bc5a:	460f      	mov	r7, r1
 800bc5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc60:	f7f4 fc9e 	bl	80005a0 <__aeabi_dmul>
 800bc64:	4632      	mov	r2, r6
 800bc66:	463b      	mov	r3, r7
 800bc68:	f7f4 fae2 	bl	8000230 <__aeabi_dsub>
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	e75e      	b.n	800bb30 <__ieee754_rem_pio2+0x180>
 800bc72:	4a1b      	ldr	r2, [pc, #108]	; (800bce0 <__ieee754_rem_pio2+0x330>)
 800bc74:	4592      	cmp	sl, r2
 800bc76:	dd35      	ble.n	800bce4 <__ieee754_rem_pio2+0x334>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	f7f4 fad8 	bl	8000230 <__aeabi_dsub>
 800bc80:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc84:	e9c4 0100 	strd	r0, r1, [r4]
 800bc88:	e6a2      	b.n	800b9d0 <__ieee754_rem_pio2+0x20>
 800bc8a:	bf00      	nop
 800bc8c:	f3af 8000 	nop.w
 800bc90:	54400000 	.word	0x54400000
 800bc94:	3ff921fb 	.word	0x3ff921fb
 800bc98:	1a626331 	.word	0x1a626331
 800bc9c:	3dd0b461 	.word	0x3dd0b461
 800bca0:	1a600000 	.word	0x1a600000
 800bca4:	3dd0b461 	.word	0x3dd0b461
 800bca8:	2e037073 	.word	0x2e037073
 800bcac:	3ba3198a 	.word	0x3ba3198a
 800bcb0:	6dc9c883 	.word	0x6dc9c883
 800bcb4:	3fe45f30 	.word	0x3fe45f30
 800bcb8:	2e000000 	.word	0x2e000000
 800bcbc:	3ba3198a 	.word	0x3ba3198a
 800bcc0:	252049c1 	.word	0x252049c1
 800bcc4:	397b839a 	.word	0x397b839a
 800bcc8:	3fe921fb 	.word	0x3fe921fb
 800bccc:	4002d97b 	.word	0x4002d97b
 800bcd0:	3ff921fb 	.word	0x3ff921fb
 800bcd4:	413921fb 	.word	0x413921fb
 800bcd8:	3fe00000 	.word	0x3fe00000
 800bcdc:	0800d0c8 	.word	0x0800d0c8
 800bce0:	7fefffff 	.word	0x7fefffff
 800bce4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bce8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bcec:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bcf0:	460f      	mov	r7, r1
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	f7f4 feee 	bl	8000ad4 <__aeabi_d2iz>
 800bcf8:	f7f4 fbe8 	bl	80004cc <__aeabi_i2d>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd08:	f7f4 fa92 	bl	8000230 <__aeabi_dsub>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4b22      	ldr	r3, [pc, #136]	; (800bd98 <__ieee754_rem_pio2+0x3e8>)
 800bd10:	f7f4 fc46 	bl	80005a0 <__aeabi_dmul>
 800bd14:	460f      	mov	r7, r1
 800bd16:	4606      	mov	r6, r0
 800bd18:	f7f4 fedc 	bl	8000ad4 <__aeabi_d2iz>
 800bd1c:	f7f4 fbd6 	bl	80004cc <__aeabi_i2d>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4630      	mov	r0, r6
 800bd26:	4639      	mov	r1, r7
 800bd28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd2c:	f7f4 fa80 	bl	8000230 <__aeabi_dsub>
 800bd30:	2200      	movs	r2, #0
 800bd32:	4b19      	ldr	r3, [pc, #100]	; (800bd98 <__ieee754_rem_pio2+0x3e8>)
 800bd34:	f7f4 fc34 	bl	80005a0 <__aeabi_dmul>
 800bd38:	f04f 0803 	mov.w	r8, #3
 800bd3c:	2600      	movs	r6, #0
 800bd3e:	2700      	movs	r7, #0
 800bd40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd44:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800bd48:	4632      	mov	r2, r6
 800bd4a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800bd4e:	463b      	mov	r3, r7
 800bd50:	46c2      	mov	sl, r8
 800bd52:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd56:	f7f4 fe8b 	bl	8000a70 <__aeabi_dcmpeq>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d1f4      	bne.n	800bd48 <__ieee754_rem_pio2+0x398>
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <__ieee754_rem_pio2+0x3ec>)
 800bd60:	462a      	mov	r2, r5
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	2302      	movs	r3, #2
 800bd66:	4621      	mov	r1, r4
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	a806      	add	r0, sp, #24
 800bd6c:	4653      	mov	r3, sl
 800bd6e:	f000 f8d5 	bl	800bf1c <__kernel_rem_pio2>
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	4605      	mov	r5, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f6bf ae51 	bge.w	800ba1e <__ieee754_rem_pio2+0x6e>
 800bd7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bd80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd84:	e9c4 2300 	strd	r2, r3, [r4]
 800bd88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bd8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bd94:	e703      	b.n	800bb9e <__ieee754_rem_pio2+0x1ee>
 800bd96:	bf00      	nop
 800bd98:	41700000 	.word	0x41700000
 800bd9c:	0800d148 	.word	0x0800d148

0800bda0 <__kernel_cos>:
 800bda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bda8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800bdac:	4680      	mov	r8, r0
 800bdae:	460f      	mov	r7, r1
 800bdb0:	e9cd 2300 	strd	r2, r3, [sp]
 800bdb4:	da04      	bge.n	800bdc0 <__kernel_cos+0x20>
 800bdb6:	f7f4 fe8d 	bl	8000ad4 <__aeabi_d2iz>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f000 8086 	beq.w	800becc <__kernel_cos+0x12c>
 800bdc0:	4642      	mov	r2, r8
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 fbea 	bl	80005a0 <__aeabi_dmul>
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4b4e      	ldr	r3, [pc, #312]	; (800bf08 <__kernel_cos+0x168>)
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	f7f4 fbe4 	bl	80005a0 <__aeabi_dmul>
 800bdd8:	a33f      	add	r3, pc, #252	; (adr r3, 800bed8 <__kernel_cos+0x138>)
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	4682      	mov	sl, r0
 800bde0:	468b      	mov	fp, r1
 800bde2:	4620      	mov	r0, r4
 800bde4:	4629      	mov	r1, r5
 800bde6:	f7f4 fbdb 	bl	80005a0 <__aeabi_dmul>
 800bdea:	a33d      	add	r3, pc, #244	; (adr r3, 800bee0 <__kernel_cos+0x140>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f7f4 fa20 	bl	8000234 <__adddf3>
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	462b      	mov	r3, r5
 800bdf8:	f7f4 fbd2 	bl	80005a0 <__aeabi_dmul>
 800bdfc:	a33a      	add	r3, pc, #232	; (adr r3, 800bee8 <__kernel_cos+0x148>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f7f4 fa15 	bl	8000230 <__aeabi_dsub>
 800be06:	4622      	mov	r2, r4
 800be08:	462b      	mov	r3, r5
 800be0a:	f7f4 fbc9 	bl	80005a0 <__aeabi_dmul>
 800be0e:	a338      	add	r3, pc, #224	; (adr r3, 800bef0 <__kernel_cos+0x150>)
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f7f4 fa0e 	bl	8000234 <__adddf3>
 800be18:	4622      	mov	r2, r4
 800be1a:	462b      	mov	r3, r5
 800be1c:	f7f4 fbc0 	bl	80005a0 <__aeabi_dmul>
 800be20:	a335      	add	r3, pc, #212	; (adr r3, 800bef8 <__kernel_cos+0x158>)
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	f7f4 fa03 	bl	8000230 <__aeabi_dsub>
 800be2a:	4622      	mov	r2, r4
 800be2c:	462b      	mov	r3, r5
 800be2e:	f7f4 fbb7 	bl	80005a0 <__aeabi_dmul>
 800be32:	a333      	add	r3, pc, #204	; (adr r3, 800bf00 <__kernel_cos+0x160>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 f9fc 	bl	8000234 <__adddf3>
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	f7f4 fbae 	bl	80005a0 <__aeabi_dmul>
 800be44:	4622      	mov	r2, r4
 800be46:	462b      	mov	r3, r5
 800be48:	f7f4 fbaa 	bl	80005a0 <__aeabi_dmul>
 800be4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	4640      	mov	r0, r8
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fba2 	bl	80005a0 <__aeabi_dmul>
 800be5c:	460b      	mov	r3, r1
 800be5e:	4602      	mov	r2, r0
 800be60:	4629      	mov	r1, r5
 800be62:	4620      	mov	r0, r4
 800be64:	f7f4 f9e4 	bl	8000230 <__aeabi_dsub>
 800be68:	4b28      	ldr	r3, [pc, #160]	; (800bf0c <__kernel_cos+0x16c>)
 800be6a:	4680      	mov	r8, r0
 800be6c:	429e      	cmp	r6, r3
 800be6e:	4689      	mov	r9, r1
 800be70:	dc0e      	bgt.n	800be90 <__kernel_cos+0xf0>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4650      	mov	r0, sl
 800be78:	4659      	mov	r1, fp
 800be7a:	f7f4 f9d9 	bl	8000230 <__aeabi_dsub>
 800be7e:	4602      	mov	r2, r0
 800be80:	2000      	movs	r0, #0
 800be82:	460b      	mov	r3, r1
 800be84:	4922      	ldr	r1, [pc, #136]	; (800bf10 <__kernel_cos+0x170>)
 800be86:	f7f4 f9d3 	bl	8000230 <__aeabi_dsub>
 800be8a:	b003      	add	sp, #12
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	2400      	movs	r4, #0
 800be92:	4b20      	ldr	r3, [pc, #128]	; (800bf14 <__kernel_cos+0x174>)
 800be94:	4622      	mov	r2, r4
 800be96:	429e      	cmp	r6, r3
 800be98:	bfcc      	ite	gt
 800be9a:	4d1f      	ldrgt	r5, [pc, #124]	; (800bf18 <__kernel_cos+0x178>)
 800be9c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800bea0:	462b      	mov	r3, r5
 800bea2:	2000      	movs	r0, #0
 800bea4:	491a      	ldr	r1, [pc, #104]	; (800bf10 <__kernel_cos+0x170>)
 800bea6:	f7f4 f9c3 	bl	8000230 <__aeabi_dsub>
 800beaa:	4622      	mov	r2, r4
 800beac:	4606      	mov	r6, r0
 800beae:	460f      	mov	r7, r1
 800beb0:	462b      	mov	r3, r5
 800beb2:	4650      	mov	r0, sl
 800beb4:	4659      	mov	r1, fp
 800beb6:	f7f4 f9bb 	bl	8000230 <__aeabi_dsub>
 800beba:	4642      	mov	r2, r8
 800bebc:	464b      	mov	r3, r9
 800bebe:	f7f4 f9b7 	bl	8000230 <__aeabi_dsub>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4630      	mov	r0, r6
 800bec8:	4639      	mov	r1, r7
 800beca:	e7dc      	b.n	800be86 <__kernel_cos+0xe6>
 800becc:	2000      	movs	r0, #0
 800bece:	4910      	ldr	r1, [pc, #64]	; (800bf10 <__kernel_cos+0x170>)
 800bed0:	e7db      	b.n	800be8a <__kernel_cos+0xea>
 800bed2:	bf00      	nop
 800bed4:	f3af 8000 	nop.w
 800bed8:	be8838d4 	.word	0xbe8838d4
 800bedc:	bda8fae9 	.word	0xbda8fae9
 800bee0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bee4:	3e21ee9e 	.word	0x3e21ee9e
 800bee8:	809c52ad 	.word	0x809c52ad
 800beec:	3e927e4f 	.word	0x3e927e4f
 800bef0:	19cb1590 	.word	0x19cb1590
 800bef4:	3efa01a0 	.word	0x3efa01a0
 800bef8:	16c15177 	.word	0x16c15177
 800befc:	3f56c16c 	.word	0x3f56c16c
 800bf00:	5555554c 	.word	0x5555554c
 800bf04:	3fa55555 	.word	0x3fa55555
 800bf08:	3fe00000 	.word	0x3fe00000
 800bf0c:	3fd33332 	.word	0x3fd33332
 800bf10:	3ff00000 	.word	0x3ff00000
 800bf14:	3fe90000 	.word	0x3fe90000
 800bf18:	3fd20000 	.word	0x3fd20000

0800bf1c <__kernel_rem_pio2>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bf24:	9308      	str	r3, [sp, #32]
 800bf26:	9106      	str	r1, [sp, #24]
 800bf28:	4bb6      	ldr	r3, [pc, #728]	; (800c204 <__kernel_rem_pio2+0x2e8>)
 800bf2a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bf2c:	f112 0f14 	cmn.w	r2, #20
 800bf30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf34:	bfa8      	it	ge
 800bf36:	1ed4      	subge	r4, r2, #3
 800bf38:	9302      	str	r3, [sp, #8]
 800bf3a:	9b08      	ldr	r3, [sp, #32]
 800bf3c:	bfb8      	it	lt
 800bf3e:	2400      	movlt	r4, #0
 800bf40:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf44:	9307      	str	r3, [sp, #28]
 800bf46:	bfa4      	itt	ge
 800bf48:	2318      	movge	r3, #24
 800bf4a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bf4e:	f06f 0317 	mvn.w	r3, #23
 800bf52:	fb04 3303 	mla	r3, r4, r3, r3
 800bf56:	eb03 0b02 	add.w	fp, r3, r2
 800bf5a:	9a07      	ldr	r2, [sp, #28]
 800bf5c:	9b02      	ldr	r3, [sp, #8]
 800bf5e:	1aa7      	subs	r7, r4, r2
 800bf60:	eb03 0802 	add.w	r8, r3, r2
 800bf64:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bf66:	2500      	movs	r5, #0
 800bf68:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	9009      	str	r0, [sp, #36]	; 0x24
 800bf72:	ae20      	add	r6, sp, #128	; 0x80
 800bf74:	4545      	cmp	r5, r8
 800bf76:	dd14      	ble.n	800bfa2 <__kernel_rem_pio2+0x86>
 800bf78:	f04f 0800 	mov.w	r8, #0
 800bf7c:	9a08      	ldr	r2, [sp, #32]
 800bf7e:	ab20      	add	r3, sp, #128	; 0x80
 800bf80:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800bf84:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800bf88:	9b02      	ldr	r3, [sp, #8]
 800bf8a:	4598      	cmp	r8, r3
 800bf8c:	dc35      	bgt.n	800bffa <__kernel_rem_pio2+0xde>
 800bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf90:	2200      	movs	r2, #0
 800bf92:	f1a3 0908 	sub.w	r9, r3, #8
 800bf96:	2300      	movs	r3, #0
 800bf98:	462f      	mov	r7, r5
 800bf9a:	2600      	movs	r6, #0
 800bf9c:	e9cd 2300 	strd	r2, r3, [sp]
 800bfa0:	e01f      	b.n	800bfe2 <__kernel_rem_pio2+0xc6>
 800bfa2:	42ef      	cmn	r7, r5
 800bfa4:	d40b      	bmi.n	800bfbe <__kernel_rem_pio2+0xa2>
 800bfa6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bfaa:	e9cd 2300 	strd	r2, r3, [sp]
 800bfae:	f7f4 fa8d 	bl	80004cc <__aeabi_i2d>
 800bfb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfb6:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bfba:	3501      	adds	r5, #1
 800bfbc:	e7da      	b.n	800bf74 <__kernel_rem_pio2+0x58>
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	e7f8      	b.n	800bfb6 <__kernel_rem_pio2+0x9a>
 800bfc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfc8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bfcc:	f7f4 fae8 	bl	80005a0 <__aeabi_dmul>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd8:	f7f4 f92c 	bl	8000234 <__adddf3>
 800bfdc:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe0:	3601      	adds	r6, #1
 800bfe2:	9b07      	ldr	r3, [sp, #28]
 800bfe4:	3f08      	subs	r7, #8
 800bfe6:	429e      	cmp	r6, r3
 800bfe8:	ddec      	ble.n	800bfc4 <__kernel_rem_pio2+0xa8>
 800bfea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfee:	f108 0801 	add.w	r8, r8, #1
 800bff2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800bff6:	3508      	adds	r5, #8
 800bff8:	e7c6      	b.n	800bf88 <__kernel_rem_pio2+0x6c>
 800bffa:	9b02      	ldr	r3, [sp, #8]
 800bffc:	aa0c      	add	r2, sp, #48	; 0x30
 800bffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c002:	930b      	str	r3, [sp, #44]	; 0x2c
 800c004:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c006:	9e02      	ldr	r6, [sp, #8]
 800c008:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c00c:	930a      	str	r3, [sp, #40]	; 0x28
 800c00e:	ab98      	add	r3, sp, #608	; 0x260
 800c010:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c014:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c018:	ab70      	add	r3, sp, #448	; 0x1c0
 800c01a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c01e:	46d0      	mov	r8, sl
 800c020:	46b1      	mov	r9, r6
 800c022:	af0c      	add	r7, sp, #48	; 0x30
 800c024:	9700      	str	r7, [sp, #0]
 800c026:	f1b9 0f00 	cmp.w	r9, #0
 800c02a:	f1a8 0808 	sub.w	r8, r8, #8
 800c02e:	dc71      	bgt.n	800c114 <__kernel_rem_pio2+0x1f8>
 800c030:	465a      	mov	r2, fp
 800c032:	4620      	mov	r0, r4
 800c034:	4629      	mov	r1, r5
 800c036:	f000 fbeb 	bl	800c810 <scalbn>
 800c03a:	2200      	movs	r2, #0
 800c03c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	f7f4 faac 	bl	80005a0 <__aeabi_dmul>
 800c048:	f000 fb62 	bl	800c710 <floor>
 800c04c:	2200      	movs	r2, #0
 800c04e:	4b6e      	ldr	r3, [pc, #440]	; (800c208 <__kernel_rem_pio2+0x2ec>)
 800c050:	f7f4 faa6 	bl	80005a0 <__aeabi_dmul>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	4620      	mov	r0, r4
 800c05a:	4629      	mov	r1, r5
 800c05c:	f7f4 f8e8 	bl	8000230 <__aeabi_dsub>
 800c060:	460d      	mov	r5, r1
 800c062:	4604      	mov	r4, r0
 800c064:	f7f4 fd36 	bl	8000ad4 <__aeabi_d2iz>
 800c068:	9004      	str	r0, [sp, #16]
 800c06a:	f7f4 fa2f 	bl	80004cc <__aeabi_i2d>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 f8db 	bl	8000230 <__aeabi_dsub>
 800c07a:	f1bb 0f00 	cmp.w	fp, #0
 800c07e:	4680      	mov	r8, r0
 800c080:	4689      	mov	r9, r1
 800c082:	dd70      	ble.n	800c166 <__kernel_rem_pio2+0x24a>
 800c084:	1e72      	subs	r2, r6, #1
 800c086:	ab0c      	add	r3, sp, #48	; 0x30
 800c088:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c08c:	9c04      	ldr	r4, [sp, #16]
 800c08e:	f1cb 0118 	rsb	r1, fp, #24
 800c092:	fa40 f301 	asr.w	r3, r0, r1
 800c096:	441c      	add	r4, r3
 800c098:	408b      	lsls	r3, r1
 800c09a:	1ac0      	subs	r0, r0, r3
 800c09c:	ab0c      	add	r3, sp, #48	; 0x30
 800c09e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c0a2:	f1cb 0317 	rsb	r3, fp, #23
 800c0a6:	9404      	str	r4, [sp, #16]
 800c0a8:	fa40 f303 	asr.w	r3, r0, r3
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	9b00      	ldr	r3, [sp, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	dd66      	ble.n	800c182 <__kernel_rem_pio2+0x266>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c0ba:	4614      	mov	r4, r2
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	4296      	cmp	r6, r2
 800c0c4:	f300 80ac 	bgt.w	800c220 <__kernel_rem_pio2+0x304>
 800c0c8:	f1bb 0f00 	cmp.w	fp, #0
 800c0cc:	dd07      	ble.n	800c0de <__kernel_rem_pio2+0x1c2>
 800c0ce:	f1bb 0f01 	cmp.w	fp, #1
 800c0d2:	f000 80b4 	beq.w	800c23e <__kernel_rem_pio2+0x322>
 800c0d6:	f1bb 0f02 	cmp.w	fp, #2
 800c0da:	f000 80ba 	beq.w	800c252 <__kernel_rem_pio2+0x336>
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d14e      	bne.n	800c182 <__kernel_rem_pio2+0x266>
 800c0e4:	4642      	mov	r2, r8
 800c0e6:	464b      	mov	r3, r9
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	4948      	ldr	r1, [pc, #288]	; (800c20c <__kernel_rem_pio2+0x2f0>)
 800c0ec:	f7f4 f8a0 	bl	8000230 <__aeabi_dsub>
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	4689      	mov	r9, r1
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	d044      	beq.n	800c182 <__kernel_rem_pio2+0x266>
 800c0f8:	465a      	mov	r2, fp
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	4943      	ldr	r1, [pc, #268]	; (800c20c <__kernel_rem_pio2+0x2f0>)
 800c0fe:	f000 fb87 	bl	800c810 <scalbn>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4640      	mov	r0, r8
 800c108:	4649      	mov	r1, r9
 800c10a:	f7f4 f891 	bl	8000230 <__aeabi_dsub>
 800c10e:	4680      	mov	r8, r0
 800c110:	4689      	mov	r9, r1
 800c112:	e036      	b.n	800c182 <__kernel_rem_pio2+0x266>
 800c114:	2200      	movs	r2, #0
 800c116:	4b3e      	ldr	r3, [pc, #248]	; (800c210 <__kernel_rem_pio2+0x2f4>)
 800c118:	4620      	mov	r0, r4
 800c11a:	4629      	mov	r1, r5
 800c11c:	f7f4 fa40 	bl	80005a0 <__aeabi_dmul>
 800c120:	f7f4 fcd8 	bl	8000ad4 <__aeabi_d2iz>
 800c124:	f7f4 f9d2 	bl	80004cc <__aeabi_i2d>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c130:	2200      	movs	r2, #0
 800c132:	4b38      	ldr	r3, [pc, #224]	; (800c214 <__kernel_rem_pio2+0x2f8>)
 800c134:	f7f4 fa34 	bl	80005a0 <__aeabi_dmul>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f876 	bl	8000230 <__aeabi_dsub>
 800c144:	f7f4 fcc6 	bl	8000ad4 <__aeabi_d2iz>
 800c148:	9b00      	ldr	r3, [sp, #0]
 800c14a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c14e:	f843 0b04 	str.w	r0, [r3], #4
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c158:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c15c:	f7f4 f86a 	bl	8000234 <__adddf3>
 800c160:	4604      	mov	r4, r0
 800c162:	460d      	mov	r5, r1
 800c164:	e75f      	b.n	800c026 <__kernel_rem_pio2+0x10a>
 800c166:	d105      	bne.n	800c174 <__kernel_rem_pio2+0x258>
 800c168:	1e73      	subs	r3, r6, #1
 800c16a:	aa0c      	add	r2, sp, #48	; 0x30
 800c16c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c170:	15c3      	asrs	r3, r0, #23
 800c172:	e79b      	b.n	800c0ac <__kernel_rem_pio2+0x190>
 800c174:	2200      	movs	r2, #0
 800c176:	4b28      	ldr	r3, [pc, #160]	; (800c218 <__kernel_rem_pio2+0x2fc>)
 800c178:	f7f4 fc98 	bl	8000aac <__aeabi_dcmpge>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d13e      	bne.n	800c1fe <__kernel_rem_pio2+0x2e2>
 800c180:	9000      	str	r0, [sp, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	2300      	movs	r3, #0
 800c186:	4640      	mov	r0, r8
 800c188:	4649      	mov	r1, r9
 800c18a:	f7f4 fc71 	bl	8000a70 <__aeabi_dcmpeq>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f000 80b1 	beq.w	800c2f6 <__kernel_rem_pio2+0x3da>
 800c194:	1e74      	subs	r4, r6, #1
 800c196:	4623      	mov	r3, r4
 800c198:	2200      	movs	r2, #0
 800c19a:	9902      	ldr	r1, [sp, #8]
 800c19c:	428b      	cmp	r3, r1
 800c19e:	da5f      	bge.n	800c260 <__kernel_rem_pio2+0x344>
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	d074      	beq.n	800c28e <__kernel_rem_pio2+0x372>
 800c1a4:	ab0c      	add	r3, sp, #48	; 0x30
 800c1a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c1aa:	f1ab 0b18 	sub.w	fp, fp, #24
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 809f 	beq.w	800c2f2 <__kernel_rem_pio2+0x3d6>
 800c1b4:	465a      	mov	r2, fp
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	4914      	ldr	r1, [pc, #80]	; (800c20c <__kernel_rem_pio2+0x2f0>)
 800c1ba:	f000 fb29 	bl	800c810 <scalbn>
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	460f      	mov	r7, r1
 800c1c4:	f04f 0800 	mov.w	r8, #0
 800c1c8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c1ca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c210 <__kernel_rem_pio2+0x2f4>
 800c1ce:	00e5      	lsls	r5, r4, #3
 800c1d0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c1d4:	f1ba 0f00 	cmp.w	sl, #0
 800c1d8:	f280 80c3 	bge.w	800c362 <__kernel_rem_pio2+0x446>
 800c1dc:	4626      	mov	r6, r4
 800c1de:	2e00      	cmp	r6, #0
 800c1e0:	f2c0 80f5 	blt.w	800c3ce <__kernel_rem_pio2+0x4b2>
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <__kernel_rem_pio2+0x300>)
 800c1e6:	f04f 0a00 	mov.w	sl, #0
 800c1ea:	9307      	str	r3, [sp, #28]
 800c1ec:	ab70      	add	r3, sp, #448	; 0x1c0
 800c1ee:	f04f 0b00 	mov.w	fp, #0
 800c1f2:	f04f 0800 	mov.w	r8, #0
 800c1f6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c1fa:	1ba7      	subs	r7, r4, r6
 800c1fc:	e0db      	b.n	800c3b6 <__kernel_rem_pio2+0x49a>
 800c1fe:	2302      	movs	r3, #2
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	e757      	b.n	800c0b4 <__kernel_rem_pio2+0x198>
 800c204:	0800d290 	.word	0x0800d290
 800c208:	40200000 	.word	0x40200000
 800c20c:	3ff00000 	.word	0x3ff00000
 800c210:	3e700000 	.word	0x3e700000
 800c214:	41700000 	.word	0x41700000
 800c218:	3fe00000 	.word	0x3fe00000
 800c21c:	0800d250 	.word	0x0800d250
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	b944      	cbnz	r4, 800c236 <__kernel_rem_pio2+0x31a>
 800c224:	b11b      	cbz	r3, 800c22e <__kernel_rem_pio2+0x312>
 800c226:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	2301      	movs	r3, #1
 800c22e:	461c      	mov	r4, r3
 800c230:	3201      	adds	r2, #1
 800c232:	3704      	adds	r7, #4
 800c234:	e745      	b.n	800c0c2 <__kernel_rem_pio2+0x1a6>
 800c236:	1acb      	subs	r3, r1, r3
 800c238:	603b      	str	r3, [r7, #0]
 800c23a:	4623      	mov	r3, r4
 800c23c:	e7f7      	b.n	800c22e <__kernel_rem_pio2+0x312>
 800c23e:	1e72      	subs	r2, r6, #1
 800c240:	ab0c      	add	r3, sp, #48	; 0x30
 800c242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c246:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c24a:	a90c      	add	r1, sp, #48	; 0x30
 800c24c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c250:	e745      	b.n	800c0de <__kernel_rem_pio2+0x1c2>
 800c252:	1e72      	subs	r2, r6, #1
 800c254:	ab0c      	add	r3, sp, #48	; 0x30
 800c256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c25e:	e7f4      	b.n	800c24a <__kernel_rem_pio2+0x32e>
 800c260:	a90c      	add	r1, sp, #48	; 0x30
 800c262:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c266:	3b01      	subs	r3, #1
 800c268:	430a      	orrs	r2, r1
 800c26a:	e796      	b.n	800c19a <__kernel_rem_pio2+0x27e>
 800c26c:	3401      	adds	r4, #1
 800c26e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c272:	2a00      	cmp	r2, #0
 800c274:	d0fa      	beq.n	800c26c <__kernel_rem_pio2+0x350>
 800c276:	9b08      	ldr	r3, [sp, #32]
 800c278:	f106 0801 	add.w	r8, r6, #1
 800c27c:	18f5      	adds	r5, r6, r3
 800c27e:	ab20      	add	r3, sp, #128	; 0x80
 800c280:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c284:	4434      	add	r4, r6
 800c286:	4544      	cmp	r4, r8
 800c288:	da04      	bge.n	800c294 <__kernel_rem_pio2+0x378>
 800c28a:	4626      	mov	r6, r4
 800c28c:	e6bf      	b.n	800c00e <__kernel_rem_pio2+0xf2>
 800c28e:	2401      	movs	r4, #1
 800c290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c292:	e7ec      	b.n	800c26e <__kernel_rem_pio2+0x352>
 800c294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c296:	f04f 0900 	mov.w	r9, #0
 800c29a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c29e:	f7f4 f915 	bl	80004cc <__aeabi_i2d>
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	2700      	movs	r7, #0
 800c2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a8:	e9c5 0100 	strd	r0, r1, [r5]
 800c2ac:	3b08      	subs	r3, #8
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	9504      	str	r5, [sp, #16]
 800c2b2:	9b07      	ldr	r3, [sp, #28]
 800c2b4:	4599      	cmp	r9, r3
 800c2b6:	dd05      	ble.n	800c2c4 <__kernel_rem_pio2+0x3a8>
 800c2b8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c2bc:	f108 0801 	add.w	r8, r8, #1
 800c2c0:	3508      	adds	r5, #8
 800c2c2:	e7e0      	b.n	800c286 <__kernel_rem_pio2+0x36a>
 800c2c4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c2c8:	9900      	ldr	r1, [sp, #0]
 800c2ca:	f109 0901 	add.w	r9, r9, #1
 800c2ce:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c2d2:	9100      	str	r1, [sp, #0]
 800c2d4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c2d8:	f8cd c010 	str.w	ip, [sp, #16]
 800c2dc:	f7f4 f960 	bl	80005a0 <__aeabi_dmul>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	f7f3 ffa4 	bl	8000234 <__adddf3>
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	460f      	mov	r7, r1
 800c2f0:	e7df      	b.n	800c2b2 <__kernel_rem_pio2+0x396>
 800c2f2:	3c01      	subs	r4, #1
 800c2f4:	e756      	b.n	800c1a4 <__kernel_rem_pio2+0x288>
 800c2f6:	f1cb 0200 	rsb	r2, fp, #0
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	f000 fa87 	bl	800c810 <scalbn>
 800c302:	2200      	movs	r2, #0
 800c304:	4ba4      	ldr	r3, [pc, #656]	; (800c598 <__kernel_rem_pio2+0x67c>)
 800c306:	4604      	mov	r4, r0
 800c308:	460d      	mov	r5, r1
 800c30a:	f7f4 fbcf 	bl	8000aac <__aeabi_dcmpge>
 800c30e:	b1f8      	cbz	r0, 800c350 <__kernel_rem_pio2+0x434>
 800c310:	2200      	movs	r2, #0
 800c312:	4ba2      	ldr	r3, [pc, #648]	; (800c59c <__kernel_rem_pio2+0x680>)
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	f7f4 f942 	bl	80005a0 <__aeabi_dmul>
 800c31c:	f7f4 fbda 	bl	8000ad4 <__aeabi_d2iz>
 800c320:	4607      	mov	r7, r0
 800c322:	f7f4 f8d3 	bl	80004cc <__aeabi_i2d>
 800c326:	2200      	movs	r2, #0
 800c328:	4b9b      	ldr	r3, [pc, #620]	; (800c598 <__kernel_rem_pio2+0x67c>)
 800c32a:	f7f4 f939 	bl	80005a0 <__aeabi_dmul>
 800c32e:	460b      	mov	r3, r1
 800c330:	4602      	mov	r2, r0
 800c332:	4629      	mov	r1, r5
 800c334:	4620      	mov	r0, r4
 800c336:	f7f3 ff7b 	bl	8000230 <__aeabi_dsub>
 800c33a:	f7f4 fbcb 	bl	8000ad4 <__aeabi_d2iz>
 800c33e:	1c74      	adds	r4, r6, #1
 800c340:	ab0c      	add	r3, sp, #48	; 0x30
 800c342:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c346:	f10b 0b18 	add.w	fp, fp, #24
 800c34a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c34e:	e731      	b.n	800c1b4 <__kernel_rem_pio2+0x298>
 800c350:	4620      	mov	r0, r4
 800c352:	4629      	mov	r1, r5
 800c354:	f7f4 fbbe 	bl	8000ad4 <__aeabi_d2iz>
 800c358:	ab0c      	add	r3, sp, #48	; 0x30
 800c35a:	4634      	mov	r4, r6
 800c35c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c360:	e728      	b.n	800c1b4 <__kernel_rem_pio2+0x298>
 800c362:	ab0c      	add	r3, sp, #48	; 0x30
 800c364:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c368:	f7f4 f8b0 	bl	80004cc <__aeabi_i2d>
 800c36c:	4632      	mov	r2, r6
 800c36e:	463b      	mov	r3, r7
 800c370:	f7f4 f916 	bl	80005a0 <__aeabi_dmul>
 800c374:	4642      	mov	r2, r8
 800c376:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c37a:	464b      	mov	r3, r9
 800c37c:	4630      	mov	r0, r6
 800c37e:	4639      	mov	r1, r7
 800c380:	f7f4 f90e 	bl	80005a0 <__aeabi_dmul>
 800c384:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c388:	4606      	mov	r6, r0
 800c38a:	460f      	mov	r7, r1
 800c38c:	e722      	b.n	800c1d4 <__kernel_rem_pio2+0x2b8>
 800c38e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c392:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c396:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c39a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c39e:	f7f4 f8ff 	bl	80005a0 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	4659      	mov	r1, fp
 800c3aa:	f7f3 ff43 	bl	8000234 <__adddf3>
 800c3ae:	4682      	mov	sl, r0
 800c3b0:	468b      	mov	fp, r1
 800c3b2:	f108 0801 	add.w	r8, r8, #1
 800c3b6:	9b02      	ldr	r3, [sp, #8]
 800c3b8:	4598      	cmp	r8, r3
 800c3ba:	dc01      	bgt.n	800c3c0 <__kernel_rem_pio2+0x4a4>
 800c3bc:	45b8      	cmp	r8, r7
 800c3be:	dde6      	ble.n	800c38e <__kernel_rem_pio2+0x472>
 800c3c0:	ab48      	add	r3, sp, #288	; 0x120
 800c3c2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c3c6:	e9c7 ab00 	strd	sl, fp, [r7]
 800c3ca:	3e01      	subs	r6, #1
 800c3cc:	e707      	b.n	800c1de <__kernel_rem_pio2+0x2c2>
 800c3ce:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	dc09      	bgt.n	800c3e8 <__kernel_rem_pio2+0x4cc>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dc32      	bgt.n	800c43e <__kernel_rem_pio2+0x522>
 800c3d8:	d05a      	beq.n	800c490 <__kernel_rem_pio2+0x574>
 800c3da:	9b04      	ldr	r3, [sp, #16]
 800c3dc:	f003 0007 	and.w	r0, r3, #7
 800c3e0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d1f5      	bne.n	800c3da <__kernel_rem_pio2+0x4be>
 800c3ee:	ab48      	add	r3, sp, #288	; 0x120
 800c3f0:	441d      	add	r5, r3
 800c3f2:	46aa      	mov	sl, r5
 800c3f4:	46a3      	mov	fp, r4
 800c3f6:	f1bb 0f00 	cmp.w	fp, #0
 800c3fa:	dc76      	bgt.n	800c4ea <__kernel_rem_pio2+0x5ce>
 800c3fc:	46aa      	mov	sl, r5
 800c3fe:	46a3      	mov	fp, r4
 800c400:	f1bb 0f01 	cmp.w	fp, #1
 800c404:	f300 8090 	bgt.w	800c528 <__kernel_rem_pio2+0x60c>
 800c408:	2700      	movs	r7, #0
 800c40a:	463e      	mov	r6, r7
 800c40c:	2c01      	cmp	r4, #1
 800c40e:	f300 80aa 	bgt.w	800c566 <__kernel_rem_pio2+0x64a>
 800c412:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c416:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f040 80ac 	bne.w	800c57a <__kernel_rem_pio2+0x65e>
 800c422:	4603      	mov	r3, r0
 800c424:	462a      	mov	r2, r5
 800c426:	9806      	ldr	r0, [sp, #24]
 800c428:	e9c0 2300 	strd	r2, r3, [r0]
 800c42c:	4622      	mov	r2, r4
 800c42e:	460b      	mov	r3, r1
 800c430:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c434:	463a      	mov	r2, r7
 800c436:	4633      	mov	r3, r6
 800c438:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c43c:	e7cd      	b.n	800c3da <__kernel_rem_pio2+0x4be>
 800c43e:	2000      	movs	r0, #0
 800c440:	46a0      	mov	r8, r4
 800c442:	4601      	mov	r1, r0
 800c444:	ab48      	add	r3, sp, #288	; 0x120
 800c446:	441d      	add	r5, r3
 800c448:	f1b8 0f00 	cmp.w	r8, #0
 800c44c:	da3a      	bge.n	800c4c4 <__kernel_rem_pio2+0x5a8>
 800c44e:	9b00      	ldr	r3, [sp, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d03e      	beq.n	800c4d2 <__kernel_rem_pio2+0x5b6>
 800c454:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c458:	4602      	mov	r2, r0
 800c45a:	462b      	mov	r3, r5
 800c45c:	9d06      	ldr	r5, [sp, #24]
 800c45e:	2601      	movs	r6, #1
 800c460:	e9c5 2300 	strd	r2, r3, [r5]
 800c464:	460b      	mov	r3, r1
 800c466:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c46a:	f7f3 fee1 	bl	8000230 <__aeabi_dsub>
 800c46e:	4684      	mov	ip, r0
 800c470:	460f      	mov	r7, r1
 800c472:	ad48      	add	r5, sp, #288	; 0x120
 800c474:	42b4      	cmp	r4, r6
 800c476:	f105 0508 	add.w	r5, r5, #8
 800c47a:	da2c      	bge.n	800c4d6 <__kernel_rem_pio2+0x5ba>
 800c47c:	9b00      	ldr	r3, [sp, #0]
 800c47e:	b10b      	cbz	r3, 800c484 <__kernel_rem_pio2+0x568>
 800c480:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c484:	4662      	mov	r2, ip
 800c486:	463b      	mov	r3, r7
 800c488:	9906      	ldr	r1, [sp, #24]
 800c48a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c48e:	e7a4      	b.n	800c3da <__kernel_rem_pio2+0x4be>
 800c490:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c492:	ab48      	add	r3, sp, #288	; 0x120
 800c494:	4637      	mov	r7, r6
 800c496:	441d      	add	r5, r3
 800c498:	2c00      	cmp	r4, #0
 800c49a:	da09      	bge.n	800c4b0 <__kernel_rem_pio2+0x594>
 800c49c:	9b00      	ldr	r3, [sp, #0]
 800c49e:	b10b      	cbz	r3, 800c4a4 <__kernel_rem_pio2+0x588>
 800c4a0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	9906      	ldr	r1, [sp, #24]
 800c4aa:	e9c1 2300 	strd	r2, r3, [r1]
 800c4ae:	e794      	b.n	800c3da <__kernel_rem_pio2+0x4be>
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f3 febc 	bl	8000234 <__adddf3>
 800c4bc:	3c01      	subs	r4, #1
 800c4be:	4606      	mov	r6, r0
 800c4c0:	460f      	mov	r7, r1
 800c4c2:	e7e9      	b.n	800c498 <__kernel_rem_pio2+0x57c>
 800c4c4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c4c8:	f7f3 feb4 	bl	8000234 <__adddf3>
 800c4cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4d0:	e7ba      	b.n	800c448 <__kernel_rem_pio2+0x52c>
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	e7c0      	b.n	800c458 <__kernel_rem_pio2+0x53c>
 800c4d6:	4660      	mov	r0, ip
 800c4d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4dc:	4639      	mov	r1, r7
 800c4de:	f7f3 fea9 	bl	8000234 <__adddf3>
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	4684      	mov	ip, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	e7c4      	b.n	800c474 <__kernel_rem_pio2+0x558>
 800c4ea:	e9da 6700 	ldrd	r6, r7, [sl]
 800c4ee:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c4f2:	4632      	mov	r2, r6
 800c4f4:	463b      	mov	r3, r7
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	f7f3 fe9b 	bl	8000234 <__adddf3>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c506:	4640      	mov	r0, r8
 800c508:	4649      	mov	r1, r9
 800c50a:	f7f3 fe91 	bl	8000230 <__aeabi_dsub>
 800c50e:	4632      	mov	r2, r6
 800c510:	463b      	mov	r3, r7
 800c512:	f7f3 fe8f 	bl	8000234 <__adddf3>
 800c516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c51a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c51e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c522:	e9ca 2300 	strd	r2, r3, [sl]
 800c526:	e766      	b.n	800c3f6 <__kernel_rem_pio2+0x4da>
 800c528:	e9da 8900 	ldrd	r8, r9, [sl]
 800c52c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c530:	4642      	mov	r2, r8
 800c532:	464b      	mov	r3, r9
 800c534:	4630      	mov	r0, r6
 800c536:	4639      	mov	r1, r7
 800c538:	f7f3 fe7c 	bl	8000234 <__adddf3>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c544:	4630      	mov	r0, r6
 800c546:	4639      	mov	r1, r7
 800c548:	f7f3 fe72 	bl	8000230 <__aeabi_dsub>
 800c54c:	4642      	mov	r2, r8
 800c54e:	464b      	mov	r3, r9
 800c550:	f7f3 fe70 	bl	8000234 <__adddf3>
 800c554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c558:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c55c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c560:	e9ca 2300 	strd	r2, r3, [sl]
 800c564:	e74c      	b.n	800c400 <__kernel_rem_pio2+0x4e4>
 800c566:	4638      	mov	r0, r7
 800c568:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c56c:	4631      	mov	r1, r6
 800c56e:	f7f3 fe61 	bl	8000234 <__adddf3>
 800c572:	3c01      	subs	r4, #1
 800c574:	4607      	mov	r7, r0
 800c576:	460e      	mov	r6, r1
 800c578:	e748      	b.n	800c40c <__kernel_rem_pio2+0x4f0>
 800c57a:	9b06      	ldr	r3, [sp, #24]
 800c57c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c580:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c584:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c588:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c58c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c590:	601d      	str	r5, [r3, #0]
 800c592:	615e      	str	r6, [r3, #20]
 800c594:	e721      	b.n	800c3da <__kernel_rem_pio2+0x4be>
 800c596:	bf00      	nop
 800c598:	41700000 	.word	0x41700000
 800c59c:	3e700000 	.word	0x3e700000

0800c5a0 <__kernel_sin>:
 800c5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a4:	b086      	sub	sp, #24
 800c5a6:	e9cd 2300 	strd	r2, r3, [sp]
 800c5aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c5b2:	4682      	mov	sl, r0
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c5b8:	da03      	bge.n	800c5c2 <__kernel_sin+0x22>
 800c5ba:	f7f4 fa8b 	bl	8000ad4 <__aeabi_d2iz>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d050      	beq.n	800c664 <__kernel_sin+0xc4>
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4623      	mov	r3, r4
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f7f3 ffe9 	bl	80005a0 <__aeabi_dmul>
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	4621      	mov	r1, r4
 800c5da:	f7f3 ffe1 	bl	80005a0 <__aeabi_dmul>
 800c5de:	a33e      	add	r3, pc, #248	; (adr r3, 800c6d8 <__kernel_sin+0x138>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	4680      	mov	r8, r0
 800c5e6:	4689      	mov	r9, r1
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	f7f3 ffd8 	bl	80005a0 <__aeabi_dmul>
 800c5f0:	a33b      	add	r3, pc, #236	; (adr r3, 800c6e0 <__kernel_sin+0x140>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f3 fe1b 	bl	8000230 <__aeabi_dsub>
 800c5fa:	4632      	mov	r2, r6
 800c5fc:	463b      	mov	r3, r7
 800c5fe:	f7f3 ffcf 	bl	80005a0 <__aeabi_dmul>
 800c602:	a339      	add	r3, pc, #228	; (adr r3, 800c6e8 <__kernel_sin+0x148>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	f7f3 fe14 	bl	8000234 <__adddf3>
 800c60c:	4632      	mov	r2, r6
 800c60e:	463b      	mov	r3, r7
 800c610:	f7f3 ffc6 	bl	80005a0 <__aeabi_dmul>
 800c614:	a336      	add	r3, pc, #216	; (adr r3, 800c6f0 <__kernel_sin+0x150>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	f7f3 fe09 	bl	8000230 <__aeabi_dsub>
 800c61e:	4632      	mov	r2, r6
 800c620:	463b      	mov	r3, r7
 800c622:	f7f3 ffbd 	bl	80005a0 <__aeabi_dmul>
 800c626:	a334      	add	r3, pc, #208	; (adr r3, 800c6f8 <__kernel_sin+0x158>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f7f3 fe02 	bl	8000234 <__adddf3>
 800c630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c634:	b9dd      	cbnz	r5, 800c66e <__kernel_sin+0xce>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f3 ffaf 	bl	80005a0 <__aeabi_dmul>
 800c642:	a32f      	add	r3, pc, #188	; (adr r3, 800c700 <__kernel_sin+0x160>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f7f3 fdf2 	bl	8000230 <__aeabi_dsub>
 800c64c:	4642      	mov	r2, r8
 800c64e:	464b      	mov	r3, r9
 800c650:	f7f3 ffa6 	bl	80005a0 <__aeabi_dmul>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4650      	mov	r0, sl
 800c65a:	4621      	mov	r1, r4
 800c65c:	f7f3 fdea 	bl	8000234 <__adddf3>
 800c660:	4682      	mov	sl, r0
 800c662:	460c      	mov	r4, r1
 800c664:	4650      	mov	r0, sl
 800c666:	4621      	mov	r1, r4
 800c668:	b006      	add	sp, #24
 800c66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66e:	2200      	movs	r2, #0
 800c670:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c674:	4b24      	ldr	r3, [pc, #144]	; (800c708 <__kernel_sin+0x168>)
 800c676:	f7f3 ff93 	bl	80005a0 <__aeabi_dmul>
 800c67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c67e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 ff8b 	bl	80005a0 <__aeabi_dmul>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c692:	f7f3 fdcd 	bl	8000230 <__aeabi_dsub>
 800c696:	4632      	mov	r2, r6
 800c698:	463b      	mov	r3, r7
 800c69a:	f7f3 ff81 	bl	80005a0 <__aeabi_dmul>
 800c69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a2:	f7f3 fdc5 	bl	8000230 <__aeabi_dsub>
 800c6a6:	a316      	add	r3, pc, #88	; (adr r3, 800c700 <__kernel_sin+0x160>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f7f3 ff74 	bl	80005a0 <__aeabi_dmul>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4630      	mov	r0, r6
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f3 fdb8 	bl	8000234 <__adddf3>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	f7f3 fdb0 	bl	8000230 <__aeabi_dsub>
 800c6d0:	e7c6      	b.n	800c660 <__kernel_sin+0xc0>
 800c6d2:	bf00      	nop
 800c6d4:	f3af 8000 	nop.w
 800c6d8:	5acfd57c 	.word	0x5acfd57c
 800c6dc:	3de5d93a 	.word	0x3de5d93a
 800c6e0:	8a2b9ceb 	.word	0x8a2b9ceb
 800c6e4:	3e5ae5e6 	.word	0x3e5ae5e6
 800c6e8:	57b1fe7d 	.word	0x57b1fe7d
 800c6ec:	3ec71de3 	.word	0x3ec71de3
 800c6f0:	19c161d5 	.word	0x19c161d5
 800c6f4:	3f2a01a0 	.word	0x3f2a01a0
 800c6f8:	1110f8a6 	.word	0x1110f8a6
 800c6fc:	3f811111 	.word	0x3f811111
 800c700:	55555549 	.word	0x55555549
 800c704:	3fc55555 	.word	0x3fc55555
 800c708:	3fe00000 	.word	0x3fe00000
 800c70c:	00000000 	.word	0x00000000

0800c710 <floor>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c718:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c71c:	2e13      	cmp	r6, #19
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4607      	mov	r7, r0
 800c724:	460c      	mov	r4, r1
 800c726:	4605      	mov	r5, r0
 800c728:	dc33      	bgt.n	800c792 <floor+0x82>
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	da14      	bge.n	800c758 <floor+0x48>
 800c72e:	a334      	add	r3, pc, #208	; (adr r3, 800c800 <floor+0xf0>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fd7e 	bl	8000234 <__adddf3>
 800c738:	2200      	movs	r2, #0
 800c73a:	2300      	movs	r3, #0
 800c73c:	f7f4 f9c0 	bl	8000ac0 <__aeabi_dcmpgt>
 800c740:	b138      	cbz	r0, 800c752 <floor+0x42>
 800c742:	2c00      	cmp	r4, #0
 800c744:	da58      	bge.n	800c7f8 <floor+0xe8>
 800c746:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c74a:	431d      	orrs	r5, r3
 800c74c:	d001      	beq.n	800c752 <floor+0x42>
 800c74e:	2500      	movs	r5, #0
 800c750:	4c2d      	ldr	r4, [pc, #180]	; (800c808 <floor+0xf8>)
 800c752:	4623      	mov	r3, r4
 800c754:	462f      	mov	r7, r5
 800c756:	e025      	b.n	800c7a4 <floor+0x94>
 800c758:	4a2c      	ldr	r2, [pc, #176]	; (800c80c <floor+0xfc>)
 800c75a:	fa42 f806 	asr.w	r8, r2, r6
 800c75e:	ea01 0208 	and.w	r2, r1, r8
 800c762:	4302      	orrs	r2, r0
 800c764:	d01e      	beq.n	800c7a4 <floor+0x94>
 800c766:	a326      	add	r3, pc, #152	; (adr r3, 800c800 <floor+0xf0>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd62 	bl	8000234 <__adddf3>
 800c770:	2200      	movs	r2, #0
 800c772:	2300      	movs	r3, #0
 800c774:	f7f4 f9a4 	bl	8000ac0 <__aeabi_dcmpgt>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d0ea      	beq.n	800c752 <floor+0x42>
 800c77c:	2c00      	cmp	r4, #0
 800c77e:	bfbe      	ittt	lt
 800c780:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c784:	fa43 f606 	asrlt.w	r6, r3, r6
 800c788:	19a4      	addlt	r4, r4, r6
 800c78a:	2500      	movs	r5, #0
 800c78c:	ea24 0408 	bic.w	r4, r4, r8
 800c790:	e7df      	b.n	800c752 <floor+0x42>
 800c792:	2e33      	cmp	r6, #51	; 0x33
 800c794:	dd0a      	ble.n	800c7ac <floor+0x9c>
 800c796:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c79a:	d103      	bne.n	800c7a4 <floor+0x94>
 800c79c:	f7f3 fd4a 	bl	8000234 <__adddf3>
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c7b4:	fa22 f808 	lsr.w	r8, r2, r8
 800c7b8:	ea18 0f00 	tst.w	r8, r0
 800c7bc:	d0f2      	beq.n	800c7a4 <floor+0x94>
 800c7be:	a310      	add	r3, pc, #64	; (adr r3, 800c800 <floor+0xf0>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f3 fd36 	bl	8000234 <__adddf3>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f7f4 f978 	bl	8000ac0 <__aeabi_dcmpgt>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0be      	beq.n	800c752 <floor+0x42>
 800c7d4:	2c00      	cmp	r4, #0
 800c7d6:	da02      	bge.n	800c7de <floor+0xce>
 800c7d8:	2e14      	cmp	r6, #20
 800c7da:	d103      	bne.n	800c7e4 <floor+0xd4>
 800c7dc:	3401      	adds	r4, #1
 800c7de:	ea25 0508 	bic.w	r5, r5, r8
 800c7e2:	e7b6      	b.n	800c752 <floor+0x42>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c7ea:	fa03 f606 	lsl.w	r6, r3, r6
 800c7ee:	4435      	add	r5, r6
 800c7f0:	42bd      	cmp	r5, r7
 800c7f2:	bf38      	it	cc
 800c7f4:	18e4      	addcc	r4, r4, r3
 800c7f6:	e7f2      	b.n	800c7de <floor+0xce>
 800c7f8:	2500      	movs	r5, #0
 800c7fa:	462c      	mov	r4, r5
 800c7fc:	e7a9      	b.n	800c752 <floor+0x42>
 800c7fe:	bf00      	nop
 800c800:	8800759c 	.word	0x8800759c
 800c804:	7e37e43c 	.word	0x7e37e43c
 800c808:	bff00000 	.word	0xbff00000
 800c80c:	000fffff 	.word	0x000fffff

0800c810 <scalbn>:
 800c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c812:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c816:	4604      	mov	r4, r0
 800c818:	460d      	mov	r5, r1
 800c81a:	4617      	mov	r7, r2
 800c81c:	460b      	mov	r3, r1
 800c81e:	b996      	cbnz	r6, 800c846 <scalbn+0x36>
 800c820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c824:	4303      	orrs	r3, r0
 800c826:	d039      	beq.n	800c89c <scalbn+0x8c>
 800c828:	4b33      	ldr	r3, [pc, #204]	; (800c8f8 <scalbn+0xe8>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	f7f3 feb8 	bl	80005a0 <__aeabi_dmul>
 800c830:	4b32      	ldr	r3, [pc, #200]	; (800c8fc <scalbn+0xec>)
 800c832:	4604      	mov	r4, r0
 800c834:	429f      	cmp	r7, r3
 800c836:	460d      	mov	r5, r1
 800c838:	da0f      	bge.n	800c85a <scalbn+0x4a>
 800c83a:	a32b      	add	r3, pc, #172	; (adr r3, 800c8e8 <scalbn+0xd8>)
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f7f3 feae 	bl	80005a0 <__aeabi_dmul>
 800c844:	e006      	b.n	800c854 <scalbn+0x44>
 800c846:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c84a:	4296      	cmp	r6, r2
 800c84c:	d10a      	bne.n	800c864 <scalbn+0x54>
 800c84e:	4602      	mov	r2, r0
 800c850:	f7f3 fcf0 	bl	8000234 <__adddf3>
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	e020      	b.n	800c89c <scalbn+0x8c>
 800c85a:	460b      	mov	r3, r1
 800c85c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c860:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c864:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c868:	19b9      	adds	r1, r7, r6
 800c86a:	4291      	cmp	r1, r2
 800c86c:	dd0e      	ble.n	800c88c <scalbn+0x7c>
 800c86e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c872:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c876:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c87a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c87e:	4820      	ldr	r0, [pc, #128]	; (800c900 <scalbn+0xf0>)
 800c880:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c884:	a31a      	add	r3, pc, #104	; (adr r3, 800c8f0 <scalbn+0xe0>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	e7d9      	b.n	800c840 <scalbn+0x30>
 800c88c:	2900      	cmp	r1, #0
 800c88e:	dd08      	ble.n	800c8a2 <scalbn+0x92>
 800c890:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c898:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c8a6:	da12      	bge.n	800c8ce <scalbn+0xbe>
 800c8a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c8ac:	429f      	cmp	r7, r3
 800c8ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c8b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c8b6:	dcdc      	bgt.n	800c872 <scalbn+0x62>
 800c8b8:	a30b      	add	r3, pc, #44	; (adr r3, 800c8e8 <scalbn+0xd8>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c8c2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c8c6:	480f      	ldr	r0, [pc, #60]	; (800c904 <scalbn+0xf4>)
 800c8c8:	f041 011f 	orr.w	r1, r1, #31
 800c8cc:	e7b8      	b.n	800c840 <scalbn+0x30>
 800c8ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8d2:	3136      	adds	r1, #54	; 0x36
 800c8d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c8dc:	4620      	mov	r0, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4b09      	ldr	r3, [pc, #36]	; (800c908 <scalbn+0xf8>)
 800c8e4:	e7ac      	b.n	800c840 <scalbn+0x30>
 800c8e6:	bf00      	nop
 800c8e8:	c2f8f359 	.word	0xc2f8f359
 800c8ec:	01a56e1f 	.word	0x01a56e1f
 800c8f0:	8800759c 	.word	0x8800759c
 800c8f4:	7e37e43c 	.word	0x7e37e43c
 800c8f8:	43500000 	.word	0x43500000
 800c8fc:	ffff3cb0 	.word	0xffff3cb0
 800c900:	8800759c 	.word	0x8800759c
 800c904:	c2f8f359 	.word	0xc2f8f359
 800c908:	3c900000 	.word	0x3c900000

0800c90c <_init>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	bf00      	nop
 800c910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c912:	bc08      	pop	{r3}
 800c914:	469e      	mov	lr, r3
 800c916:	4770      	bx	lr

0800c918 <_fini>:
 800c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91a:	bf00      	nop
 800c91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c91e:	bc08      	pop	{r3}
 800c920:	469e      	mov	lr, r3
 800c922:	4770      	bx	lr
